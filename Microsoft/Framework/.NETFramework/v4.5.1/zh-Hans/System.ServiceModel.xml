<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel</name>
  </assembly>
  <members>
    <member name="T:System.UriTemplate">
      <summary>一个表示统一资源标识符 (URI) 模板的类。</summary>
    </member>
    <member name="M:System.UriTemplate.#ctor(System.String)">
      <summary>使用指定的模板字符串初始化 <see cref="T:System.UriTemplate" /> 类的新实例。</summary>
      <param name="template">模板。</param>
    </member>
    <member name="M:System.UriTemplate.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.UriTemplate" /> 类的新实例。</summary>
      <param name="template">模板字符串。</param>
      <param name="ignoreTrailingSlash">一个值，指定是否应忽略尾部正斜杠“/”字符。</param>
    </member>
    <member name="M:System.UriTemplate.#ctor(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>初始化 <see cref="T:System.UriTemplate" /> 类的新实例。</summary>
      <param name="template">模板字符串。</param>
      <param name="ignoreTrailingSlash">如果忽略尾部正斜杠“/”字符，则为 true；否则为 false。</param>
      <param name="additionalDefaults">一个字典，其中包含模板参数的默认值列表。</param>
    </member>
    <member name="M:System.UriTemplate.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>初始化 <see cref="T:System.UriTemplate" /> 类的新实例。</summary>
      <param name="template">模板字符串。</param>
      <param name="additionalDefaults">一个字典，其中包含模板参数的默认值列表。</param>
    </member>
    <member name="M:System.UriTemplate.BindByName(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>利用模板和参数集合创建一个新的 URI。</summary>
      <returns>一个 URI。</returns>
      <param name="baseAddress">基址。</param>
      <param name="parameters">一个字典，其中包含参数名称/值对的集合。</param>
    </member>
    <member name="M:System.UriTemplate.BindByName(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
      <summary>利用模板和参数集合创建一个新的 URI。</summary>
      <returns>一个 URI。</returns>
      <param name="baseAddress">一个包含基址的 URI。</param>
      <param name="parameters">一个字典，其中包含参数名称/值对的集合。</param>
      <param name="omitDefaults">如果忽略默认值，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.UriTemplate.BindByName(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>利用模板和参数集合创建一个新的 URI。</summary>
      <returns>新实例。</returns>
      <param name="baseAddress">基址。</param>
      <param name="parameters">参数值。</param>
    </member>
    <member name="M:System.UriTemplate.BindByName(System.Uri,System.Collections.Specialized.NameValueCollection,System.Boolean)">
      <summary>利用模板和参数集合创建一个新的 URI。</summary>
      <returns>一个 URI。</returns>
      <param name="baseAddress">基址。</param>
      <param name="parameters">参数名称/值对的集合。</param>
      <param name="omitDefaults">如果忽略默认值，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.UriTemplate.BindByPosition(System.Uri,System.String[])">
      <summary>利用模板和参数值数组创建一个新的 URI。</summary>
      <returns>新 <see cref="T:System.Uri" /> 实例。</returns>
      <param name="baseAddress">一个包含基址的 <see cref="T:System.Uri" />。</param>
      <param name="values">参数值。</param>
    </member>
    <member name="P:System.UriTemplate.Defaults">
      <summary>获取名称/值对的集合，其中元素为所有默认参数值。</summary>
      <returns>一个泛型字典。</returns>
    </member>
    <member name="P:System.UriTemplate.IgnoreTrailingSlash">
      <summary>指定在匹配候选 URI 时是否应忽略模板中的尾部正斜杠“/”。</summary>
      <returns>如果应忽略尾部正斜杠“/”，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.UriTemplate.IsEquivalentTo(System.UriTemplate)">
      <summary>指示 <see cref="T:System.UriTemplate" /> 与其他模板的结构是否等效。</summary>
      <returns>如果 <see cref="T:System.UriTemplate" /> 与其他模板的结构等效，则为 true；否则为 false。</returns>
      <param name="other">要比较的 <see cref="T:System.UriTemplate" />。</param>
    </member>
    <member name="M:System.UriTemplate.Match(System.Uri,System.Uri)">
      <summary>尝试将 <see cref="T:System.URI" /> 与 <see cref="T:System.UriTemplate" /> 匹配。</summary>
      <returns>一个实例。</returns>
      <param name="baseAddress">基址。</param>
      <param name="candidate">要与模板匹配的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="P:System.UriTemplate.PathSegmentVariableNames">
      <summary>获取模板的路径段中所使用的变量名的集合。</summary>
      <returns>一个集合，包含模板的路径段中显示的变量名。</returns>
    </member>
    <member name="P:System.UriTemplate.QueryValueVariableNames">
      <summary>获取模板的查询字符串中所使用的变量名的集合。</summary>
      <returns>一个在模板字符串的查询部分显示的模板变量名的集合。</returns>
    </member>
    <member name="M:System.UriTemplate.ToString">
      <summary>返回 <see cref="T:System.UriTemplate" /> 实例的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.UriTemplate" /> 实例的表示形式。</returns>
    </member>
    <member name="T:System.UriTemplateEquivalenceComparer">
      <summary>一个用于比较 <see cref="T:System.UriTemplate" /> 实例以确定结构（而非引用）等效性的类。</summary>
    </member>
    <member name="M:System.UriTemplateEquivalenceComparer.#ctor">
      <summary>初始化 <see cref="T:System.UriTemplateEquivalenceComparer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriTemplateEquivalenceComparer.Equals(System.UriTemplate,System.UriTemplate)">
      <summary>比较两个 <see cref="T:System.UriTemplate" /> 实例是否等效。</summary>
      <returns>一个值，指示两个 <see cref="T:System.UriTemplate" /> 实例是否等效。</returns>
      <param name="x">一个 <see cref="T:System.UriTemplate" /> 实例。</param>
      <param name="y">一个 <see cref="T:System.UriTemplate" /> 实例。</param>
    </member>
    <member name="M:System.UriTemplateEquivalenceComparer.GetHashCode(System.UriTemplate)">
      <summary>获取所指定 <see cref="T:System.UriTemplate" /> 实例的哈希代码。</summary>
      <returns>哈希代码。</returns>
      <param name="obj">
        <see cref="T:System.UriTemplate" /> 实例。</param>
    </member>
    <member name="T:System.UriTemplateMatch">
      <summary>一个类，表示对 <see cref="T:System.UriTemplate" /> 实例执行匹配操作的结果。</summary>
    </member>
    <member name="M:System.UriTemplateMatch.#ctor">
      <summary>初始化 <see cref="T:System.UriTemplateMatch" /> 类的新实例。</summary>
    </member>
    <member name="P:System.UriTemplateMatch.BaseUri">
      <summary>获取和设置模板匹配的基 URI。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 实例，表示模板匹配的基 URI。</returns>
    </member>
    <member name="P:System.UriTemplateMatch.BoundVariables">
      <summary>获取模板匹配的 BoundVariables 集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例，包含匹配期间从 URI 中提取的模板变量值。</returns>
    </member>
    <member name="P:System.UriTemplateMatch.Data">
      <summary>获取和设置与 <see cref="T:System.UriTemplateMatch" /> 实例关联的对象。</summary>
      <returns>一个 <see cref="T:System.Object" /> 实例。</returns>
    </member>
    <member name="P:System.UriTemplateMatch.QueryParameters">
      <summary>获取查询字符串参数及其值的集合。</summary>
      <returns>一个包含查询字符串参数及其值的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例。</returns>
    </member>
    <member name="P:System.UriTemplateMatch.RelativePathSegments">
      <summary>获取相对路径段的集合。</summary>
      <returns>相对路径段的集合。</returns>
    </member>
    <member name="P:System.UriTemplateMatch.RequestUri">
      <summary>获取和设置匹配的 URI。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 实例。</returns>
    </member>
    <member name="P:System.UriTemplateMatch.Template">
      <summary>获取和设置与此 <see cref="T:System.UriTemplateMatch" /> 实例关联的 <see cref="T:System.UriTemplate" /> 实例。</summary>
      <returns>一个 <see cref="T:System.UriTemplate" /> 实例。</returns>
    </member>
    <member name="P:System.UriTemplateMatch.WildcardPathSegments">
      <summary>获取 URI 模板中由通配符匹配的路径段的集合。</summary>
      <returns>URI 模板中由通配符匹配的路径段的集合。</returns>
    </member>
    <member name="T:System.UriTemplateMatchException">
      <summary>表示将 <see cref="T:System.Uri" /> 与 <see cref="T:System.UriTemplateTable" /> 匹配时发生的错误。</summary>
    </member>
    <member name="M:System.UriTemplateMatchException.#ctor">
      <summary>初始化 <see cref="T:System.UriTemplateMatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriTemplateMatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.UriTemplateMatchException" /> 类的新实例。</summary>
      <param name="info">用于保存序列化数据对象的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.UriTemplateMatchException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.UriTemplateMatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.UriTemplateMatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.UriTemplateMatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.UriTemplateTable">
      <summary>一个表示一组关联 <see cref="T:System.UriTemplate" /> 对象的类。</summary>
    </member>
    <member name="M:System.UriTemplateTable.#ctor">
      <summary>初始化 <see cref="T:System.UriTemplateTable" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriTemplateTable.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.UriTemplate,System.Object}})">
      <summary>使用指定的键/值对集合初始化 <see cref="T:System.UriTemplateTable" /> 类的新实例。</summary>
      <param name="keyValuePairs">一个由 URI 模板和关联数据构成的键/值对集合。</param>
    </member>
    <member name="M:System.UriTemplateTable.#ctor(System.Uri)">
      <summary>使用指定的基址初始化 <see cref="T:System.UriTemplateTable" /> 类的新实例。</summary>
      <param name="baseAddress">一个包含基址的 <see cref="T:System.Uri" /> 实例。</param>
    </member>
    <member name="M:System.UriTemplateTable.#ctor(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.UriTemplate,System.Object}})">
      <summary>使用指定的基址和键/值对集合初始化 <see cref="T:System.UriTemplateTable" /> 类的新实例。</summary>
      <param name="baseAddress">一个包含基址的 <see cref="T:System.Uri" /> 实例。</param>
      <param name="keyValuePairs">一个由 URI 模板和关联数据构成的键/值对集合。</param>
    </member>
    <member name="P:System.UriTemplateTable.BaseAddress">
      <summary>获取和设置 <see cref="T:System.UriTemplateTable" /> 实例的基址。</summary>
      <returns>一个包含基址的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.UriTemplateTable.IsReadOnly">
      <summary>获取一个值，该值指定 <see cref="T:System.UriTemplateTable" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.UriTemplateTable" /> 属性为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.UriTemplateTable.KeyValuePairs">
      <summary>获取由 <see cref="T:System.UriTemplate" /> 对象及其关联数据构成的键/值对集合。</summary>
      <returns>一个键/值对的集合，由 <see cref="T:System.UriTemplate" /> 对象及其关联的数据构成。</returns>
    </member>
    <member name="M:System.UriTemplateTable.MakeReadOnly(System.Boolean)">
      <summary>将 <see cref="T:System.UriTemplateTable" /> 设置为只读。</summary>
      <param name="allowDuplicateEquivalentUriTemplates">指定是否允许 <see cref="T:System.UriTemplateTable" /> 中有重复的等效 <see cref="T:System.UriTemplate" /> 实例。</param>
    </member>
    <member name="M:System.UriTemplateTable.Match(System.Uri)">
      <summary>尝试将候选 <see cref="T:System.Uri" /> 与 <see cref="T:System.UriTemplateTable" /> 匹配。</summary>
      <returns>
        <see cref="T:System.UriTemplateMatch" /> 实例的集合。</returns>
      <param name="uri">候选 URI。</param>
    </member>
    <member name="M:System.UriTemplateTable.MatchSingle(System.Uri)">
      <summary>尝试将候选 <see cref="T:System.Uri" /> 与 <see cref="T:System.UriTemplateTable" /> 匹配。</summary>
      <returns>单个 <see cref="T:System.UriTemplateMatch" /> 实例。</returns>
      <param name="uri">候选 URI。</param>
    </member>
    <member name="P:System.UriTemplateTable.OriginalBaseAddress">
      <summary>获取原始基址。</summary>
      <returns>原始基址。</returns>
    </member>
    <member name="T:System.Collections.Generic.KeyedByTypeCollection`1">
      <summary>提供一个集合，该集合的项是用作键的类型。</summary>
      <typeparam name="TItem">集合中包含的项类型，这些项类型还用作集合的键。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>根据指定的对象枚举初始化 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> 类的新实例。</summary>
      <param name="items">泛型类型 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Find``1">
      <summary>返回集合中第一个具有指定类型的项。</summary>
      <returns>如果为引用类型，则返回 <paramref name="T" /> 类型的对象；如果为值类型，则返回 <paramref name="T" /> 类型的值。 如果集合中不包含类型 <paramref name="T" /> 的对象，则返回类型的默认值：如果是引用类型，默认值为 null；如果是值类型，默认值为 0。</returns>
      <typeparam name="T">要在集合中查找的项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1">
      <summary>返回 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> 中包含的 <paramref name="T" /> 类型的对象的集合。</summary>
      <returns>一个 <paramref name="T" /> 类型的 <see cref="T:System.Collections.ObjectModel.Collection`1" />，其中包含来自原始集合的 <paramref name="T" /> 类型的对象。</returns>
      <typeparam name="T">要在集合中查找的项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)">
      <summary>获取集合中包含的某个项的类型。</summary>
      <returns>集合中指定的 <paramref name="item" /> 的类型。</returns>
      <param name="item">集合中要检索其类型的项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)">
      <summary>在集合中的特定位置插入一个元素。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要在集合中插入的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Remove``1">
      <summary>从集合中移除具有指定类型的对象。</summary>
      <returns>从集合中移除的对象。</returns>
      <typeparam name="T">要从集合中移除的项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1">
      <summary>从集合中移除所有具有指定类型的元素。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" />，包含来自原始集合的 <paramref name="T" /> 类型的对象。</returns>
      <typeparam name="T">要从集合中移除的项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)">
      <summary>将指定索引处的项替换为新对象。</summary>
      <param name="index">要替换的 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.SynchronizedCollection`1">
      <summary>提供一个线程安全集合，其中包含泛型参数所指定类型的对象作为元素。</summary>
      <typeparam name="T">包含在线程安全集合中作为项的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)">
      <summary>通过用于对线程安全集合的访问进行同步的对象来初始化 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
      <summary>使用指定的可枚举元素列表和用于对线程安全集合的访问进行同步的对象来初始化 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
      <param name="list">用于初始化线程安全集合的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 或 <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])">
      <summary>使用指定的元素数组和用于对线程安全集合的访问进行同步的对象来初始化 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
      <param name="list">用于初始化线程安全集合的 <paramref name="T" /> 类型元素的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 或 <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Add(`0)">
      <summary>将项添加到线程安全只读集合中。</summary>
      <param name="item">要添加到集合的元素。</param>
      <exception cref="T:System.ArgumentException">设置的值为 null，或者不是集合的正确泛型类型 <paramref name="T" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.ClearItems">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Contains(`0)">
      <summary>确定集合是否包含具有特定值的元素。</summary>
      <returns>如果在集合中找到元素值，则为 true；否则为  false。</returns>
      <param name="item">要在集合中定位的对象。</param>
      <exception cref="T:System.ArgumentException">设置的值为 null，或者不是集合的正确泛型类型 <paramref name="T" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)">
      <summary>从特定索引处开始，将集合中的元素复制到指定的数组。</summary>
      <param name="array">从集合中复制的 <paramref name="T " /> 类型元素的目标 <see cref="T:System.Array" />。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.Count">
      <summary>获取线程安全集合中所含元素的数目。</summary>
      <returns>线程安全的只读集合中所含元素的数目。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.GetEnumerator">
      <summary>返回一个循环访问同步集合的枚举数。</summary>
      <returns>一个表示集合中存储的类型的对象的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)">
      <summary>返回某个值在集合中的第一个匹配项的索引。</summary>
      <returns>该值在集合中的第一个匹配项的从零开始的索引。</returns>
      <param name="item">从集合中移除所有项。</param>
      <exception cref="T:System.ArgumentException">设置的值为 null，或者不是集合的正确泛型类型 <paramref name="T" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)">
      <summary>将一项插入集合中的指定索引处。</summary>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
      <param name="item">要作为元素插入到集合中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
      <exception cref="T:System.ArgumentException">设置的值为 null，或者不是集合的正确泛型类型 <paramref name="T" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)">
      <summary>将一项插入集合中的指定索引处。</summary>
      <param name="index">集合中从零开始的索引，在此处插入对象。</param>
      <param name="item">要插入到集合中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
      <exception cref="T:System.ArgumentException">设置的值为 null，或者不是集合的正确泛型类型 <paramref name="T" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)">
      <summary>获取线程安全集合中具有指定索引的元素。</summary>
      <returns>集合中具有指定 <paramref name="index" /> 的对象。</returns>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.Items">
      <summary>获取线程安全集合中所含元素的列表。</summary>
      <returns>线程安全的只读集合中所含元素的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Remove(`0)">
      <summary>从集合中移除指定项的第一个匹配项。</summary>
      <returns>如果从集合中成功移除了项，则为 true；否则为 false。</returns>
      <param name="item">要从集合中移除的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的项。</summary>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)">
      <summary>从集合中移除指定 <paramref name="index" /> 处的项。</summary>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)">
      <summary>使用另一项替换指定索引处的项。</summary>
      <param name="index">要替换的对象的从零开始的索引。</param>
      <param name="item">要替换的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.SyncRoot">
      <summary>获取用于对线程安全集合的访问进行同步的对象。</summary>
      <returns>用于对线程安全集合的访问进行同步的对象。</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读集合。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定索引处开始，将集合中的元素复制到指定的数组。</summary>
      <param name="array">从集合中复制的 <paramref name="T" /> 类型元素的目标 <see cref="T:System.Array" />。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，指示集合是否为线程安全集合。</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取用于对线程安全集合的访问进行同步的对象。</summary>
      <returns>用于对线程安全集合的访问进行同步的对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问同步集合的枚举数。</summary>
      <returns>一个表示集合中存储的类型的对象的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>向集合中添加一个元素。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合是否包含具有特定值的元素。</summary>
      <returns>如果在集合中找到元素 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是集合所含类型的对象。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中某个元素的从零开始的索引。</summary>
      <returns>如果在集合中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">集合中要确定其索引的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某个对象插入到集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，将在该位置插入 <paramref name="value" />。</param>
      <param name="value">要在集合中插入的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
      <exception cref="T:System.ArgumentException">设置的 <paramref name="value" /> 为 null，或者不是集合的正确泛型类型 <paramref name="T" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，指示集合是否具有固定大小。</summary>
      <returns>false</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读集合。</summary>
      <returns>false</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于从零开始的指定索引处的项。</summary>
      <returns>具有指定 <paramref name="index" /> 的项。</returns>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentException">设置的值为 null，或者不是集合的正确泛型类型 <paramref name="T" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除作为元素的指定对象的第一个匹配项。</summary>
      <param name="value">要从集合中移除的对象。</param>
    </member>
    <member name="T:System.Collections.Generic.SynchronizedKeyedCollection`2">
      <summary>提供一个线程安全集合，该集合所含对象的类型由一个泛型参数指定，并且集合根据键进行分组。</summary>
      <typeparam name="K">用于对集合所含的项进行分组的键的类型。</typeparam>
      <typeparam name="T">线程安全键控集合中所包含的项的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SynchronizedKeyedCollection`2" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object)">
      <summary>使用由显式指定的对象进行同步的访问初始化 <see cref="T:System.Collections.Generic.SynchronizedKeyedCollection`2" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>使用由显式指定的对象进行同步的访问和以指定方式进行比较的键，初始化 <see cref="T:System.Collections.Generic.SynchronizedKeyedCollection`2" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
      <param name="comparer">类型 <paramref name="K" /> 的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于比较类型 <paramref name="K" /> 的键对象是否相等。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 为 null 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>使用由显式指定的对象进行同步的访问和以指定方式进行比较的键，初始化 <see cref="T:System.Collections.Generic.SynchronizedKeyedCollection`2" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全集合的访问进行同步的对象。</param>
      <param name="comparer">类型 <paramref name="K" /> 的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于比较类型 <paramref name="K" /> 的键对象是否相等。</param>
      <param name="dictionaryCreationThreshold">为集合创建字典所需的项的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 为 null 或 <paramref name="comparer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionaryCreationThreshold" /> 小于 -1。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary>更改同步集合中某个指定项的键。</summary>
      <param name="item">要更改其键的项。</param>
      <param name="newKey">指定项的新键。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems">
      <summary>清除集合中的所有项。</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)">
      <summary>返回一个值，该值指示集合是否包含具有指定键的项。</summary>
      <returns>如果集合包含具有指定键的项，则为 true；否则为 false。</returns>
      <param name="key">要测试的类型 <paramref name="K" /> 的键。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary">
      <summary>获取与集合关联的字典。</summary>
      <returns>包含集合的键项对的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)">
      <summary>在派生类中重写时，获取指定项的键。</summary>
      <returns>类型 K 的键，用于类型 <paramref name="T" /> 的指定 <paramref name="item" />。</returns>
      <param name="item">要检索其键的类型 <paramref name="T" /> 的项。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>将某个项插入集合中的指定位置。</summary>
      <param name="index">从零开始的索引，它指定项在集合中的插入位置。</param>
      <param name="item">要插入集合的类型 <paramref name="T" /> 的项。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)">
      <summary>获取集合中具有指定键的项。</summary>
      <returns>集合中具有指定键的类型 <paramref name="T" /> 的项。</returns>
      <param name="key">要检索的项的键。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)">
      <summary>从集合中移除具有指定键的项并返回一个值，该值指示项是否已移除。</summary>
      <returns>如果已移除具有指定键的项，则为 true；否则为 false。</returns>
      <param name="key">要移除的项的键。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)">
      <summary>从集合中移除指定位置处的项。</summary>
      <param name="index">从零开始的索引，它指定从集合移除的项的位置。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>用新项替换集合中指定位置处的项。</summary>
      <param name="index">从零开始的索引，它指定项在集合中的插入位置。</param>
      <param name="item">要插入集合的类型 <paramref name="T" /> 的项。</param>
    </member>
    <member name="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1">
      <summary>提供一个线程安全的只读集合，该集合包含泛型参数指定为元素的类型的对象。</summary>
      <typeparam name="T">包含在线程安全只读集合中作为项的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)">
      <summary>使用对线程安全只读集合的访问进行同步的对象，初始化 <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全只读集合的访问进行同步的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
      <summary>使用指定的可枚举元素列表和用于对线程安全的只读集合的访问进行同步的对象来初始化 <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全只读集合的访问进行同步的对象。</param>
      <param name="list">元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，用于初始化线程安全只读集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 或 <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])">
      <summary>使用指定的元素数组和用于对线程安全只读集合的访问进行同步的对象，初始化 <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> 类的新实例。</summary>
      <param name="syncRoot">用于对线程安全只读集合的访问进行同步的对象。</param>
      <param name="list">类型 <paramref name="T" /> 元素的 <see cref="T:System.Array" />，用于初始化线程安全只读集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> 或 <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)">
      <summary>确定集合是否包含具有特定值的元素。</summary>
      <returns>如果在集合中找到元素 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是集合所含类型的对象。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>从特定索引处开始，将集合中的元素复制到指定的数组。</summary>
      <param name="array">
        <see cref="T:System.Array" />，它是从集合中复制的元素的目标位置。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count">
      <summary>获取线程安全的只读集合中所含元素的数目。</summary>
      <returns>线程安全的只读集合中所含元素的数目。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator">
      <summary>返回循环访问同步的只读集合的枚举器。</summary>
      <returns>一个表示集合中存储的类型的对象的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)">
      <summary>返回某个值在集合中的第一个匹配项的索引。</summary>
      <returns>
        <paramref name="value" /> 在集合中的第一个匹配项的从零开始的索引。</returns>
      <param name="value">要检索其索引的元素。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)">
      <summary>获取线程安全的只读集合中具有指定索引的元素。</summary>
      <returns>集合中具有指定 <paramref name="index" /> 的对象。</returns>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items">
      <summary>获取线程安全的只读集合中所含元素的列表。</summary>
      <returns>线程安全的只读集合中所含元素的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>如果调用，会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到集合的元素。</param>
      <exception cref="T:System.NotSupportedException">不能设置只读集合中的项。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>如果调用，会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">不能清除只读集合中的项。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>此属性总是返回 true，这是因为集合是只读的。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。 此属性总是返回 true，这是因为集合是只读的。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>如果调用，则会返回 false 并引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>False. 该方法返回 false，指示未移除只读集合中的项。</returns>
      <param name="value">要从集合中移除的值。</param>
      <exception cref="T:System.NotSupportedException">不能移除只读集合中的项。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>如果调用，会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">从零开始的索引，将在该位置插入 <paramref name="value" />。</param>
      <param name="value">要在集合中插入的对象。</param>
      <exception cref="T:System.NotSupportedException">不能向只读集合插入项。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>返回集合中具有指定 <paramref name="index" /> 的对象。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。 返回集合中具有指定 <paramref name="index" /> 的对象。</returns>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>如果调用，会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">不能移除只读集合中的项。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定索引处开始，将集合中的元素复制到指定的数组。</summary>
      <param name="array">
        <see cref="T:System.Array" />，它是从集合中复制的元素的目标位置。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>此属性总是返回 true，这是因为集合是线程安全集合。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。 此属性总是返回 true，这是因为集合是线程安全集合。</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取用于对线程安全只读集合的访问进行同步的对象。</summary>
      <returns>返回 <see cref="T:System.Object" />。 用于对线程安全只读集合的访问进行同步的对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问同步的只读集合的枚举器。</summary>
      <returns>返回 <see cref="T:System.Collections.IEnumerator" />。一个循环访问同步只读集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>向集合中添加一个元素。</summary>
      <returns>返回 <see cref="T:System.Int32" />。 新元素的插入位置。</returns>
      <param name="value">要添加到集合的元素。</param>
      <exception cref="T:System.NotSupportedException">不能设置只读集合中的项。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>不能清除只读集合中的项。</summary>
      <exception cref="T:System.NotSupportedException">不能清除只读集合中的项。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>检查集合中是否存在指定的对象。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。 如果对象位于集合中，则为 true；否则为 false。</returns>
      <param name="value">要在集合中定位的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是集合所含类型的对象。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>获取指定项的索引。</summary>
      <returns>返回 <see cref="T:System.Int32" />。 <paramref name="value" /> 在集合中的第一个匹配项的从零开始的索引。</returns>
      <param name="value">要检索其索引的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>不能向只读集合插入项。</summary>
      <param name="index">从零开始的索引，将在该位置插入 <paramref name="value" />。</param>
      <param name="value">要在集合中插入的对象。</param>
      <exception cref="T:System.NotSupportedException">不能向只读集合插入项。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>此属性返回 true，这是因为只读集合的大小始终是固定的。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。 此属性返回 true，这是因为只读集合的大小始终是固定的。</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>此属性总是返回 true，这是因为集合是只读的。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。 此属性总是返回 true，这是因为集合是只读的。</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取位于从零开始的指定索引处的项。</summary>
      <returns>返回 <see cref="T:System.Object" />。 获取位于从零开始的指定索引处的项。</returns>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">不能设置只读集合中的项。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中检索指定的元素。</summary>
      <param name="value">要从集合中检索的元素的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">不能移除只读集合中的项。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>不能移除只读集合中的项。</summary>
      <param name="index">要从集合中检索的元素的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">不能移除只读集合中的项。</exception>
    </member>
    <member name="T:System.IO.PipeException">
      <summary>当命名管道内出现错误时引发。</summary>
    </member>
    <member name="M:System.IO.PipeException.#ctor">
      <summary>初始化 <see cref="T:System.IO.PipeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.PipeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.IO.PipeException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.IO.PipeException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IO.PipeException" /> 类的新实例。</summary>
      <param name="message">一个字符串，其中包含解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.IO.PipeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和内部异常初始化 <see cref="T:System.IO.PipeException" /> 类的新实例。</summary>
      <param name="message">一个字符串，其中包含解释异常原因的错误消息。</param>
      <param name="inner">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.IO.PipeException.#ctor(System.String,System.Int32)">
      <summary>使用指定的错误消息和错误代码初始化 <see cref="T:System.IO.PipeException" /> 类的新实例。</summary>
      <param name="message">一个字符串，其中包含解释异常原因的错误消息。</param>
      <param name="errorCode">一个包含错误代码的整数。</param>
    </member>
    <member name="P:System.IO.PipeException.ErrorCode">
      <summary>获取与异常一起返回的错误代码。</summary>
      <returns>一个整数，它包含与异常一起返回的错误代码。</returns>
    </member>
    <member name="T:System.ServiceModel.ActionNotSupportedException">
      <summary>当与所调用操作相关的动作和服务器中的任何操作动作都不匹配时，通常会在客户端上引发此异常。</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ActionNotSupportedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.ActionNotSupportedException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ServiceModel.ActionNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.ActionNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.AddressAccessDeniedException">
      <summary>对地址的访问遭到拒绝时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.AddressAccessDeniedException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.AddressAccessDeniedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.AddressAccessDeniedException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.AddressAccessDeniedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.AddressAccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.AddressAccessDeniedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.AddressAlreadyInUseException">
      <summary>因地址已被使用而不可用时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.AddressAlreadyInUseException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.AddressAlreadyInUseException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.AddressAlreadyInUseException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.AddressAlreadyInUseException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.AddressAlreadyInUseException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.AddressAlreadyInUseException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.AddressFilterMode">
      <summary>指定调度程序用于将传入消息路由到正确终结点的匹配语义的类型。</summary>
    </member>
    <member name="F:System.ServiceModel.AddressFilterMode.Any">
      <summary>指示与传入消息的任意地址相匹配的筛选器。</summary>
    </member>
    <member name="F:System.ServiceModel.AddressFilterMode.Exact">
      <summary>指示对传入消息的地址执行精确匹配的筛选器。</summary>
    </member>
    <member name="F:System.ServiceModel.AddressFilterMode.Prefix">
      <summary>指示对传入消息的地址执行最长前缀匹配的筛选器。</summary>
    </member>
    <member name="T:System.ServiceModel.AuditLevel">
      <summary>指定审核安全事件的时间。</summary>
    </member>
    <member name="F:System.ServiceModel.AuditLevel.Failure">
      <summary>仅记录失败的与安全相关的事件。</summary>
    </member>
    <member name="F:System.ServiceModel.AuditLevel.None">
      <summary>不记录任何事件。 这是默认设置。</summary>
    </member>
    <member name="F:System.ServiceModel.AuditLevel.Success">
      <summary>仅记录成功的与安全相关的事件。</summary>
    </member>
    <member name="F:System.ServiceModel.AuditLevel.SuccessOrFailure">
      <summary>同时记录失败和成功的与安全相关的事件。</summary>
    </member>
    <member name="T:System.ServiceModel.AuditLogLocation">
      <summary>指定与安全相关的事件日志的记录位置。</summary>
    </member>
    <member name="F:System.ServiceModel.AuditLogLocation.Application">
      <summary>在事件日志中指定应用程序日志。</summary>
    </member>
    <member name="F:System.ServiceModel.AuditLogLocation.Default">
      <summary>指定由操作系统确定的默认位置。 如果支持写入安全日志（例如在 wv 和 ws2003 以及更高版本的平台中），则默认日志位置将为安全日志。 否则（例如在 wxpsp2 中），默认日志位置将为应用程序日志。</summary>
    </member>
    <member name="F:System.ServiceModel.AuditLogLocation.Security">
      <summary>在事件日志中指定安全日志。 调用线程必须确保 SeAuditPrivilege 可以写入安全日志。</summary>
    </member>
    <member name="T:System.ServiceModel.BasicHttpBinding">
      <summary>表示一个绑定，Windows Communication Foundation (WCF) 服务可以使用此绑定配置和公开这样的终结点：这些终结点能够与基于 ASMX 的 Web 服务和客户端以及符合 WS-I Basic Profile 1.1 标准的其他服务进行通信。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>通过绑定所使用的指定安全类型初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 的值，该值指定 SOAP 消息和客户端使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor(System.String)">
      <summary>使用由配置名称指定的绑定初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 类的新实例。</summary>
      <param name="configurationName">
        <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" /> 的绑定配置名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到配置名称为 <paramref name="configurationName" /> 的绑定。</exception>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在客户端上生成通道工厂堆栈，此通道工厂堆栈创建具有指定类型的通道并满足绑定参数集合所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，它满足集合所指定的功能。</returns>
      <param name="parameters">为生成的通道工厂指定要求。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements">
      <summary>创建并返回一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>包含已排序的绑定元素堆栈的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，这些绑定元素由 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 描述。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer">
      <summary>获取或设置一个值，该值指示是否启用 HTTP Cookie 容器。</summary>
      <returns>如果启用 HTTP cookie 容器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MessageEncoding">
      <summary>获取或设置是使用 MTOM 还是文本对 SOAP 消息进行编码。</summary>
      <returns>
        <see cref="T:System.ServiceModel.WSMessageEncoding" /> 的值，指示是使用 MTOM 还是文本/XML 对 SOAP 消息进行编码。 默认值为 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Security">
      <summary>获取与此绑定一起使用的安全类型。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.BasicHttpSecurity" />。 默认值为 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeEnableHttpCookieContainer">
      <summary>指示是否 HTTP cookie 容器应启用序列化。</summary>
      <returns>true如果 HTTP cookie 容器应启用序列化，否则false。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeSecurity">
      <summary>返回是否应基于是否已进行序列化（例如在消息级别或传输级别）来对安全设置进行序列化。</summary>
      <returns>如果应对安全进行序列化，则为 true；否则，为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpContextBinding">
      <summary>为 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 绑定提供启用了上下文的绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpContextBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.BasicHttpContextBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpContextBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>用指定的 <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 初始化 <see cref="T:System.ServiceModel.BasicHttpContextBinding" /> 类的新实例。</summary>
      <param name="securityMode">HTTP 安全模式。</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpContextBinding.#ctor(System.String)">
      <summary>使用指定的绑定配置初始化 <see cref="T:System.ServiceModel.BasicHttpContextBinding" /> 类的新实例。</summary>
      <param name="configName">绑定配置的名称。</param>
    </member>
    <member name="P:System.ServiceModel.BasicHttpContextBinding.ContextManagementEnabled">
      <summary>获取一个值，该值指定是否启用上下文管理。</summary>
      <returns>如果启用上下文管理，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpContextBinding.CreateBindingElements">
      <summary>创建一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>包含已排序的绑定元素堆栈的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，这些绑定元素由 <see cref="T:System.ServiceModel.BasicHttpContextBinding" /> 描述。</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpMessageCredentialType">
      <summary>枚举在 BasicHttpBinding 绑定中启用安全时客户端可用来进行身份验证的凭据类型。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.Certificate">
      <summary>指示使用证书对客户端进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.UserName">
      <summary>指示使用用户名凭据对客户端进行身份验证。</summary>
    </member>
    <member name="T:System.ServiceModel.BasicHttpMessageSecurity">
      <summary>配置 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 的消息级安全性设置。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpMessageSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.BasicHttpMessageSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.BasicHttpMessageSecurity.AlgorithmSuite">
      <summary>指定要与 <see cref="T:System.ServiceModel.BasicHttpMessageSecurity" /> 一起使用的算法组。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpMessageSecurity.ClientCredentialType">
      <summary>指定客户端用以进行身份验证的凭据的类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.BasicHttpMessageCredentialType" /> 枚举的成员。 默认值为 <see cref="F:System.ServiceModel.BasicHttpMessageCredentialType.UserName" />。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpMessageSecurity.ShouldSerializeAlgorithmSuite">
      <summary>返回是否应对用于保护 SOAP 级消息的算法组进行序列化。</summary>
      <returns>如果应对该算法组进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpMessageSecurity.ShouldSerializeClientCredentialType">
      <summary>返回是否应序列化客户端凭据类型。</summary>
      <returns>如果应序列化客户端凭据类型，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpsBinding">
      <summary>指定基本 https 绑定设置。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.BasicHttpsBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode)">
      <summary>使用指定的安全模式初始化 <see cref="T:System.ServiceModel.BasicHttpsBinding" /> 类的新实例。</summary>
      <param name="securityMode">指定安全声明类型的 <see cref="T:System.ServiceModel.BasicHttpsSecurityMode" /> 的值。</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsBinding.#ctor(System.String)">
      <summary>使用指定的配置名称的类型初始化 <see cref="T:System.ServiceModel.BasicHttpsBinding" /> 类的新实例。</summary>
      <param name="configurationName">BasicHttpsBindingElement 的绑定配置名称。</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在客户端上生成通道工厂堆栈，该客户端创建指定类型的通道。</summary>
      <returns>客户端上的通道工厂堆栈。</returns>
      <param name="parameters">
        <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />，为生成的通道工厂指定要求。</param>
      <typeparam name="TChannel">通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsBinding.CreateBindingElements">
      <summary>返回一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>一个包含在当前绑定中的已排序的绑定元素集合。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpsBinding.MessageEncoding">
      <summary>获取或设置是使用 MTOM 还是文本对 SOAP 消息进行编码。</summary>
      <returns>该值指示是使用 MTOM 还是使用文本/XML 对 SOAP 消息进行编码。 默认值为文本。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpsBinding.Security">
      <summary>获取与此绑定一起使用的安全类型。</summary>
      <returns>与绑定一起使用的 BasicHttpSecurity。 默认值为 None。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsBinding.ShouldSerializeSecurity">
      <summary>指示是否应序列化安全性设置。</summary>
      <returns>如果应对这些安全设置进行序列化，则为 True；否则，为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurity">
      <summary>配置 basicHttpBinding 绑定的安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.BasicHttpSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.BasicHttpSecurity.Message">
      <summary>获取 basicHttpBinding 绑定的消息级安全性设置。</summary>
      <returns>
        <see cref="T:System.ServiceModel.BasicHttpMessageSecurity" />，表示此绑定的消息级安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpSecurity.Mode">
      <summary>获取或设置 basicHttpBinding 绑定的安全模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 枚举中的一个值。 此属性的默认值为 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此值不是 <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 的合法值。</exception>
    </member>
    <member name="M:System.ServiceModel.BasicHttpSecurity.ShouldSerializeMessage">
      <summary>确定是否应序列化消息元素。</summary>
      <returns>如果应序列化消息，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpSecurity.ShouldSerializeTransport">
      <summary>确定是否应序列化传输元素。</summary>
      <returns>表示应对运输元素可被序列化；则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpSecurity.Transport">
      <summary>设置 basicHttpBinding 绑定的传输级安全性设置。</summary>
      <returns>basicHttpBinding 绑定的传输级安全性设置。</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurityMode">
      <summary>指定可与系统提供的 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 一起使用的安全类型。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.Message">
      <summary>使用 SOAP 消息安全提供安全性。 对于 <see cref="T:System.ServiceModel.BasicHttpBinding" />，系统要求向客户端单独提供服务器证书。 此绑定的有效客户端凭据类型为 UserName 和 Certificate。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.None">
      <summary>SOAP 消息在传输过程中并不安全。 这是默认行为。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.Transport">
      <summary>使用 HTTPS 提供安全性。 此服务必须使用 SSL 证书进行配置。 SOAP 消息是用 HTTPS 作为一个整体进行保护的。 客户端使用服务的 SSL 证书对服务进行身份验证。 通过 <see cref="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType" /> 可对客户端身份验证进行控制。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly">
      <summary>此模式并不提供消息的完整性和保密性， 而是仅提供基于 HTTP 的客户端身份验证。 使用此模式时一定要小心。 在通过其他方式（如 IPSec）提供传输安全并且 Windows Communication Foundation (WCF) 基础结构只提供客户端身份验证的环境中，应该使用此模式。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential">
      <summary>完整性、保密性和服务器身份验证均由 HTTPS 提供。 此服务必须使用证书进行配置。 客户端身份验证采用 SOAP 消息安全方式提供。 如果要使用用户名或证书凭据对用户进行身份验证，并且存在用于保护消息传输的现有 HTTPS 部署，则适用此模式。</summary>
    </member>
    <member name="T:System.ServiceModel.BasicHttpsSecurity">
      <summary>指定基本 https 安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.BasicHttpsSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.BasicHttpsSecurity.Message">
      <summary>获取 basicHttpBinding 绑定的消息级安全设置。</summary>
      <returns>basicHttpBinding 绑定的消息级安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpsSecurity.Mode">
      <summary>获取或设置 basicHttpsBinding 绑定的安全模式。</summary>
      <returns>basicHttpsBinding 绑定的安全模式。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsSecurity.ShouldSerializeMessage">
      <summary>指示是否应序列化消息元素。</summary>
      <returns>表示应对消息元素进行序列化；则为 True，否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.BasicHttpsSecurity.ShouldSerializeTransport">
      <summary>指示是否应序列化传输元素。</summary>
      <returns>表示应对运输元素可被序列化；则为 True，否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpsSecurity.Transport">
      <summary>获取 basicHttpBinding 绑定的传输级安全设置。</summary>
      <returns>basicHttpBinding 绑定的传输级安全设置。</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpsSecurityMode">
      <summary>指定基本 https 模型。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpsSecurityMode.Transport">
      <summary>传输安全模式。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpsSecurityMode.TransportWithMessageCredential">
      <summary>transport with message credential security mode（使用消息凭据的传输安全模式）。</summary>
    </member>
    <member name="T:System.ServiceModel.CacheSetting">
      <summary>指定贮藏所设置的枚举。</summary>
    </member>
    <member name="F:System.ServiceModel.CacheSetting.AlwaysOff">
      <summary>设置总是未开启。</summary>
    </member>
    <member name="F:System.ServiceModel.CacheSetting.AlwaysOn">
      <summary>设置总是开启。</summary>
    </member>
    <member name="F:System.ServiceModel.CacheSetting.Default">
      <summary>默认设置。</summary>
    </member>
    <member name="T:System.ServiceModel.CallbackBehaviorAttribute">
      <summary>在客户端应用程序中配置回调服务实现。</summary>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.CallbackBehaviorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.AutomaticSessionShutdown">
      <summary>指定是否在服务关闭双工会话时自动关闭会话。</summary>
      <returns>如果双工回调对象在服务关闭双工会话时自动关闭会话，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.ConcurrencyMode">
      <summary>获取或设置一个值，该值指示服务是支持单线程、多线程还是支持可重入调用。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ConcurrencyMode" /> 值之一，默认值为 <see cref="F:System.ServiceModel.ConcurrencyMode.Single" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.ConcurrencyMode" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.IgnoreExtensionDataObject">
      <summary>获取或设置一个值，该值指定是否将未知序列化数据发送到网络上。</summary>
      <returns>如果永不发送未知序列化数据，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.IncludeExceptionDetailInFaults">
      <summary>获取或设置一个值，该值指定是否要将常规未处理的执行异常转换为 <see cref="T:System.String" /> 类型的 <see cref="T:System.ServiceModel.FaultException`1" />，并将其作为错误消息发送。 仅在开发阶段将其设置为 true 以便对服务进行故障排除。</summary>
      <returns>如果未经处理的异常将作为 SOAP 错误返回，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.MaxItemsInObjectGraph">
      <summary>获取或设置序列化对象中允许的最大项数。</summary>
      <returns>对象中允许的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>将绑定元素配置为支持回调行为。</summary>
      <param name="serviceEndpoint">回调对象的终结点。</param>
      <param name="parameters">要配置的绑定参数的集合。</param>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>将客户端运行库配置为支持回调对象。</summary>
      <param name="serviceEndpoint">由属性配置的终结点。</param>
      <param name="clientRuntime">属性所配置的客户端运行时对象。</param>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>
        <see cref="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" /> 方法的实现。 此实现无效。</summary>
      <param name="serviceEndpoint">要修改的终结点。</param>
      <param name="endpointDispatcher">方法修改的终结点调度程序。</param>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>在生成运行时之前验证终结点说明。</summary>
      <param name="serviceEndpoint">要验证的终结点。</param>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.TransactionIsolationLevel">
      <summary>指定事务的隔离级别。</summary>
      <returns>一个 <see cref="T:System.Transactions.IsolationLevel" /> 值，指定事务的隔离级别。 默认值为 <see cref="F:System.Transactions.IsolationLevel.Unspecified" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.Transactions.IsolationLevel" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.TransactionTimeout">
      <summary>获取或设置事务必须在此期间完成的时间段。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 对象，表示一个时间段，事务必须在此期间完成，否则会自动中止。 默认值为 <see cref="F:System.TimeSpan.Zero" />。</returns>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.UseSynchronizationContext">
      <summary>获取或设置一个值，该值指定是否使用当前同步上下文来选择执行的线程。</summary>
      <returns>如果对服务的所有调用都必须在 <see cref="T:System.Threading.SynchronizationContext" /> 指定的线程上运行，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.ValidateMustUnderstand">
      <summary>获取或设置一个值，该值指定是由系统还是由应用程序强制执行 SOAP MustUnderstand 标头处理。</summary>
      <returns>如果由系统执行 SOAP 标头 MustUnderstand 处理，则为 true，否则为 false，这表示由应用程序执行此处理。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory">
      <summary>创建和管理客户端用来将消息发送到服务终结点的通道。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ChannelFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)">
      <summary>使用由指定配置文件提供的行为和通道工厂服务终结点中的那些行为来初始化通道工厂。</summary>
      <param name="configurationName">配置文件的名称。</param>
      <exception cref="T:System.InvalidOperationException">通道工厂的服务终结点为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateDescription">
      <summary>在派生类中实现时，创建与通道工厂关联的服务终结点说明。</summary>
      <returns>与通道工厂关联的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateFactory">
      <summary>为工厂的当前终结点生成通道工厂。</summary>
      <returns>当前工厂的终结点的 <see cref="T:System.ServiceModel.Channels.IChannelFactory" />。</returns>
      <exception cref="T:System.InvalidOperationException">工厂通道所连接的服务终结点为 null，或者终结点的绑定为 null 或是缺少具有指定配置名称的元素。</exception>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Credentials">
      <summary>获取客户端在通过由工厂产生的通道与服务终结点进行通信时使用的凭据。</summary>
      <returns>如果已为工厂配置凭据或终结点不为 null 且处于已创建或正在打开通信状态，则为客户端使用的 <see cref="T:System.ServiceModel.Description.ClientCredentials" />；否则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout">
      <summary>获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout">
      <summary>获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Endpoint">
      <summary>获取由工厂产生的通道所要连接的服务终结点。</summary>
      <returns>由工厂产生的通道所要连接的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.EnsureOpened">
      <summary>打开尚未打开的当前通道工厂。</summary>
      <exception cref="T:System.ObjectDisposedException">当前工厂的状态为正在关闭或已关闭，因此无法打开。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.GetProperty``1">
      <summary>如果存在，则从通道堆栈的适当层返回所请求的类型化对象；如果不存在，则返回 null。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的绑定和地址初始化通道工厂的服务终结点。</summary>
      <param name="binding">用以初始化通道工厂的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">用以初始化通道工厂的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用指定的终结点初始化通道工厂的服务终结点。</summary>
      <param name="endpoint">用以初始化通道工厂的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoint" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的地址和配置初始化通道工厂的服务终结点。</summary>
      <param name="configurationName">用于初始化通道工厂的配置文件名称。</param>
      <param name="address">用以初始化通道工厂的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnAbort">
      <summary>终止当前通道工厂的内部通道工厂。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>对当前通道工厂（具有关联的状态对象）的内部通道工厂，开始一个异步关闭操作。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成操作的时间。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>对当前通道工厂（具有关联的状态对象）的内部通道工厂，开始一个异步打开操作。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成操作的时间。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)">
      <summary>使用完成操作的指定超时对内部通道工厂调用 close。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)">
      <summary>对当前通道工厂的内部通道工厂，完成一个异步关闭操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)">
      <summary>对当前通道工厂的内部通道工厂，完成一个异步打开操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)">
      <summary>使用完成操作的指定超时对当前通道工厂的内部通道工厂调用 open。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <exception cref="T:System.InvalidOperationException">当前通道的内部通道为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpened">
      <summary>为通道工厂初始化 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 对象的一个只读副本。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpening">
      <summary>为当前的通道生成内部通道工厂。</summary>
      <exception cref="T:System.InvalidOperationException">通道工厂的内部通道工厂为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose">
      <summary>关闭当前的通道工厂。</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory`1">
      <summary>一个创建不同类型通道的工厂，客户端使用这些通道将消息发送到不同配置的服务终结点。</summary>
      <typeparam name="TChannel">由通道工厂生成的通道类型。 此类型必须为 <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IRequestChannel" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>初始化 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 类的新实例。</summary>
      <param name="binding">为由工厂生成的通道指定的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的绑定和终结点地址初始化 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 类的新实例。</summary>
      <param name="binding">用于配置终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String)">
      <summary>使用指定的绑定和远程地址初始化 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 类的新实例。</summary>
      <param name="binding">用于配置终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用指定的终结点初始化生成通道的 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 类的新实例。</summary>
      <param name="endpoint">由工厂生成的通道的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoint" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)">
      <summary>使用指定的终结点配置名称初始化 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">用于终结点的配置名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointConfigurationName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>初始化 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 类的新实例，该类与终结点配置和远程地址的指定名称相关联。</summary>
      <param name="endpointConfigurationName">用于终结点的配置名称。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointConfigurationName" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 类的新实例。</summary>
      <param name="channelType">由工厂生成的通道的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelType" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="channelType" /> 为类或值类型，而非接口。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel">
      <summary>创建到指定终结点地址的指定类型的通道。</summary>
      <returns>工厂创建的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <paramref name="TChannel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>创建一个指定类型的通道，该通道用于将消息发送到用指定绑定进行配置的服务终结点。</summary>
      <returns>工厂创建的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <paramref name="TChannel" />。</returns>
      <param name="binding">用于配置终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="endpointAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ChannelFactory" /> 有它不支持的双工操作。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建一个指定类型的通道，该通道用于将消息发送到用指定绑定配置的指定传输地址处的服务终结点。</summary>
      <returns>工厂创建的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <paramref name="TChannel" />。</returns>
      <param name="binding">用于配置终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="endpointAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">包含通道向其发送消息的传输地址的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ChannelFactory" /> 有它不支持的双工操作。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>创建用于将消息发送到特定终结点地址的服务的通道。</summary>
      <returns>工厂创建的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <paramref name="TChannel" />。</returns>
      <param name="address">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建一个通道，该通道用于通过指定的传输地址将消息发送到特定终结点地址的服务。</summary>
      <returns>工厂创建的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <paramref name="TChannel" />。</returns>
      <param name="address">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">包含通道向其发送消息的传输地址的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ChannelFactory" /> 有它不支持的双工操作。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.String)">
      <summary>创建一个通道，该通道用于将消息发送到以指定方式配置其终结点的服务。</summary>
      <returns>工厂创建的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <paramref name="TChannel" />。</returns>
      <param name="endpointConfigurationName">用于服务的终结点配置的名称。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ChannelFactory" /> 有它不支持的双工操作。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>创建用于将消息发送到有作为安全令牌行为的服务的通道。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="actAsToken">安全令牌。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)">
      <summary>创建一个通道，该通道用于将消息发送到位于特定终结点地址的、具有一个作为安全令牌的行为的服务。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="actAsToken">安全令牌</param>
      <param name="address">提供服务位置的终点结地址。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithActAsToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建一个通道，该通道用于通过指定的传输地址将消息发送到位于特定终结点地址的、具有一个作为安全令牌的行为的服务。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="actAsToken">安全令牌</param>
      <param name="address">提供服务位置的终点结地址。</param>
      <param name="via">通道将消息发送传输地址。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>创建用于将消息发送到含有已发布安全令牌的服务的通道。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="issuedToken">已颁发令牌的安全性标记。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)">
      <summary>创建一个通道，该通道用于将消息发送到位于特定终结点地址的、具有一个已发布的安全令牌的服务。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="issuedToken">已颁发令牌的安全性标记。</param>
      <param name="address">提供服务位置的终点结地址。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithIssuedToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建一个通道，该通道用于通过指定的传输地址将消息发送到位于特定终结点地址的、具有一个已发布的安全令牌的服务。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="issuedToken">已颁发令牌的安全性标记。</param>
      <param name="address">提供服务位置的终点结地址。</param>
      <param name="via">通道将消息发送传输地址。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>创建用于将消息发送到有代表安全令牌行为的服务的通道。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="onBehalfOf">安全令牌。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress)">
      <summary>创建用于将消息发送到特定终结点地址的服务的通道，该服务有安全令牌。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="onBehalfOf">安全令牌。</param>
      <param name="address">提供服务位置的终点结地址。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannelWithOnBehalfOfToken(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建一个通道，该通道用于通过指定的传输地址将消息发送到位于特定终结点地址的、代表安全令牌的服务。</summary>
      <returns>创建的通道工厂。</returns>
      <param name="onBehalfOf">安全令牌。</param>
      <param name="address">提供服务位置的终点结地址。</param>
      <param name="via">通道将消息发送传输地址。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateDescription">
      <summary>创建服务终结点的说明。</summary>
      <returns>服务的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <exception cref="T:System.InvalidOperationException">回调协定为 null，但服务终结点需要的是一个非 null 的协定。</exception>
    </member>
    <member name="T:System.ServiceModel.ChannelTerminatedException">
      <summary>此异常通常在通道由于服务器关闭了所关联的连接而终止时在客户端上引发。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelTerminatedException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ChannelTerminatedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.ChannelTerminatedException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.ChannelTerminatedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelTerminatedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.ChannelTerminatedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1">
      <summary>提供基实现，用于创建可调用服务的 Windows Communication Foundation (WCF) 客户端对象。</summary>
      <typeparam name="TChannel">用于连接服务的通道。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor">
      <summary>使用应用程序配置文件中的默认目标终结点初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">配置文件中没有默认的终结点信息，或者文件中有多个终结点，或者没有配置文件。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的绑定和目标地址初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="binding">用于调用服务的绑定。</param>
      <param name="remoteAddress">服务终结点的地址。</param>
      <exception cref="T:System.ArgumentNullException">绑定为 null。</exception>
      <exception cref="T:System.ArgumentNullException">绑定为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="endpoint">允许客户端查找并与服务通信的服务的终结点。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext)">
      <summary>通过使用 <paramref name="callbackInstance" /> 作为双工对话中的回调对象来初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">客户端应用程序用以侦听来自所连接服务的消息的回调对象。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.InvalidOperationException">配置文件中没有默认的终结点信息，或者文件中有多个终结点，或者没有配置文件。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">回调服务。</param>
      <param name="binding">用于调用服务的绑定。</param>
      <param name="remoteAddress">服务终结点的地址。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 和 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">客户端应用程序用以侦听来自所连接服务的消息的回调对象。</param>
      <param name="endpoint">允许客户端查找并与服务通信的服务的终结点。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
      <summary>使用指定的回调服务和终结点配置信息初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">客户端用以侦听来自所连接服务的消息的回调对象。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
      <summary>初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">客户端用以侦听来自所连接服务的消息的回调对象。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <param name="remoteAddress">服务的地址。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">客户端用以侦听来自所连接服务的消息的回调对象。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <param name="remoteAddress">服务的地址。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String)">
      <summary>使用应用程序配置文件中由 <paramref name="endpointConfigurationName" /> 指定的配置信息来初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <exception cref="T:System.ArgumentNullException">指定的终结点信息为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的目标地址和终结点信息初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <param name="remoteAddress">服务的地址。</param>
      <exception cref="T:System.ArgumentNullException">终结点为 null。</exception>
      <exception cref="T:System.ArgumentNullException">终结点为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.ClientBase`1" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
      <param name="remoteAddress">服务的地址。</param>
      <exception cref="T:System.ArgumentNullException">终结点为 null。</exception>
      <exception cref="T:System.ArgumentNullException">终结点为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到终结点或者终结点协定无效。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Abort">
      <summary>使 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象立即从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.CacheSetting">
      <summary>获取或设置缓存设置。</summary>
      <returns>缓存设置。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Channel">
      <summary>获取用于将消息发送到不同配置的服务终结点的内部通道。</summary>
      <returns>指定类型的通道。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelFactory">
      <summary>获取基础 <see cref="T:System.ServiceModel.ChannelFactory`1" /> 对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ChannelFactory`1" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ClientCredentials">
      <summary>获取用于调用操作的客户端凭据。</summary>
      <returns>返回一个 <see cref="T:System.ServiceModel.Description.ClientCredentials" />，它表示客户端所提供的身份证明。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Close">
      <summary>使 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.CreateChannel">
      <summary>返回新的服务通道。</summary>
      <returns>一个类型为服务协定的通道。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.DisplayInitializationUI">
      <summary>指示内部通道显示在使用通道之前初始化通道时所需的用户界面。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Endpoint">
      <summary>获取 WCF 客户端可连接的服务的目标终结点。</summary>
      <returns>目标终结点。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1">
      <summary>复制 C# 中默认关键字的行为。</summary>
      <returns>如果 T 为引用类型，则返回 null；如果 T 为数值类型，则返回零。</returns>
      <typeparam name="T">由关键字标识为引用或数字的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InnerChannel">
      <summary>获取基础 <see cref="T:System.ServiceModel.IClientChannel" /> 实现。</summary>
      <returns>WCF 客户端对象的客户端通道。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)">
      <summary>为实现基于事件的异步模式提供支持。 For more information about该模式的更多信息，请参见基于事件的异步模式概述。</summary>
      <param name="beginOperationDelegate">一个用于调用异步操作的委托。</param>
      <param name="inValues">异步调用的输入值。</param>
      <param name="endOperationDelegate">一个用于在异步调用完成后将其结束的委托。</param>
      <param name="operationCompletedCallback">一个在异步方法完成时调用的由客户端提供的回调。 系统会将该回调传递给 <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />。</param>
      <param name="userState">要与异步调用关联的 <paramref name="userState" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Open">
      <summary>使 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从已创建状态转换到已打开状态。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.State">
      <summary>获取 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的当前状态。</summary>
      <returns>对象的 <see cref="T:System.ServiceModel.CommunicationState" /> 的值。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#IDisposable#Dispose">
      <summary>
        <see cref="M:System.IDisposable.Dispose" /> 方法的显式实现。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个关闭 <see cref="T:System.ServiceModel.ClientBase`1" /> 的异步操作。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">完成时接收回调的方法。</param>
      <param name="state">状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个在指定超时内关闭 <see cref="T:System.ServiceModel.ClientBase`1" /> 的异步操作。</summary>
      <returns>引用异步开始关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">必须在其中完成调用的时间段。</param>
      <param name="callback">完成操作时调用的回调对象。</param>
      <param name="state">状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个打开 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的异步操作。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">完成时接收回调的方法。</param>
      <param name="state">状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个在指定时间间隔内打开 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的异步操作。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">必须在其中完成调用的时间段。</param>
      <param name="callback">完成时接收回调的方法。</param>
      <param name="state">状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>使 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从其当前状态转换到关闭状态。</summary>
      <param name="timeout">必须在其中完成调用的时间段。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>当 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象已经从其当前状态转换到已关闭状态时调用的事件处理程序。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>当 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从其当前状态转换到已关闭状态时调用的事件处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>完成一个关闭 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的异步操作。</summary>
      <param name="result">用于完成异步关闭操作的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>完成一个打开 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象的异步操作。</summary>
      <param name="result">用于完成异步结束打开操作的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>在对 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象执行操作的过程中发生错误时调用的事件处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>使 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象在指定的时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">必须在其中完成调用的时间段。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>当 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从已创建状态转换为已打开状态时调用的事件处理程序。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>当 <see cref="T:System.ServiceModel.ClientBase`1" /> 对象从已创建状态转换为已打开状态时调用的事件处理程序。</summary>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate">
      <summary>一个委托，由 <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> 用于调用客户端的异步操作。</summary>
      <returns>异步调用的结果。</returns>
      <param name="inValues">异步调用的输入值。</param>
      <param name="asyncCallback">引用在相应异步操作完成时调用的方法。</param>
      <param name="state">一个 <see cref="T:System.Object" />，可让客户端区分不同的异步调用。 客户端可在事件完成回调的实参参数中进行使用。</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <summary>表示一般 ChannelBase 类。</summary>
      <typeparam name="T">泛型类。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})">
      <summary>从该类的现有实例初始化 <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> 类的新实例。</summary>
      <param name="client">用于初始化类的新实例的对象。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
      <summary>按名称启动指定方法的异步调用。</summary>
      <returns>引用调用的异步方法的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="methodName">要异步调用的方法的名称。</param>
      <param name="args">调用的方法的参数数组。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">状态对象。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)">
      <summary>按指定方法的名称完成异步调用。</summary>
      <returns>由该方法调用的 <see cref="T:System.Object" /> 输出。</returns>
      <param name="methodName">异步调用的方法的名称。</param>
      <param name="args">调用的方法的参数数组。</param>
      <param name="result">调用返回的结果。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose">
      <summary>通过释放或重置与通道相关的非托管资源来指定应用程序定义的任务。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 T，如果不存在，则返回 null。</returns>
      <typeparam name="TProperty">方法正在查询的类型对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，向输出通道的目标传输一条消息。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">正在输出通道上发送的消息。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步发送操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内向输出通道的目标传输消息。</summary>
      <returns>引用异步发送操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">正在输出通道上发送的消息。</param>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，接收异步操作完成发送的通知。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步发送操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)">
      <summary>完成一个异步操作，向输出通道的目标传输消息。</summary>
      <param name="result">调用返回的结果。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress">
      <summary>获取在输出通道上发出的消息将要到达的服务的目标。</summary>
      <returns>输出通道发送的消息将要到达的服务的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)">
      <summary>向输出通道的目标传输一条消息。</summary>
      <param name="message">正在输出通道上发送的消息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>在指定时间间隔内在当前输出通道上发送一条消息。</summary>
      <param name="message">正在输出通道上发送的消息。</param>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via">
      <summary>获取 URI，该 URI 包含输出通道发送消息的目标传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含输出通道发送消息的目标传输地址。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，将请求消息传送到请求-答复消息交换的答复端。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">待传输的请求消息。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内将请求消息传送到请求-答复消息交换的答复端。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">待传输的请求消息。</param>
      <param name="timeout">指定时间间隔的时间跨度，在此时间间隔内必须收到响应。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)">
      <summary>完成异步操作以向传送的请求返回基于消息的响应。</summary>
      <returns>以响应该请求接收的消息 。</returns>
      <param name="result">操作的结果。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress">
      <summary>获取请求通道将消息发送到的远程地址。</summary>
      <returns>请求通道将消息发送到的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)">
      <summary>发送一个基于消息的请求，并返回相关的基于消息的响应。</summary>
      <returns>以响应该请求接收的消息 。</returns>
      <param name="message">待传输的请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>发送一个基于消息的请求，并在指定的时间间隔内返回相关的基于消息的响应。</summary>
      <returns>以响应该请求接收的消息 。</returns>
      <param name="message">待传输的请求消息。</param>
      <param name="timeout">指定时间间隔的时间跨度，在此时间间隔内必须收到响应。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via">
      <summary>获取将请求发送至的目标传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI">
      <summary>获取或设置一个值，该值指示客户端是否允许初始化 UI。</summary>
      <returns>如果客户渠道允许初始化 UR，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>要开始使用用户接口获取凭据信息的异步调用。</summary>
      <returns>处理完成时用于回调的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">此方法完成时调用的方法。</param>
      <param name="state">有关通道状态的信息。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization">
      <summary>获取一个值，该值指示是否对用户接口执行调用以获取凭据信息。</summary>
      <returns>如果对用户接口执行调用以获取凭据信息，则 True；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI">
      <summary>指定用以获取凭据信息的用户接口的调用。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>在对 BeginDisplayInitializationUI 的调用完成时调用。</summary>
      <param name="result">操作的结果。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived">
      <summary>当 ClientBase 对象接收一条未知消息时调用的事件处理程序。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via">
      <summary>获取 URI，该 URI 包含客户端通道上发送的消息将要到达的传输地址。</summary>
      <returns>包含客户端信道上发送的消息将要到达的传输地址的 URI。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort">
      <summary>使通信对象立即从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定超时时间内关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定时间间隔内打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>ClientBase 对象已从其当前状态转换到已关闭状态时调用的事件处理程序。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>ClientBase 对象从其当前状态转换到已关闭状态时调用的事件处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>完成一个异步操作以关闭通信对象。</summary>
      <param name="result">通过调用返回到 BeginClose() 方法的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>完成一个异步操作以打开通信对象。</summary>
      <param name="result">通过调用返回到 BeginOpen() 方法的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>在对 ClientBase 对象执行操作过程中发生错误时调用的事件处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>使通信对象从已创建状态转换到已打开状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">指定在超时前必须完成发送操作的时间的时间跨度。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>ClientBase 对象已从已创建状态转换为已打开状态时调用的事件处理程序。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>ClientBase 对象从已创建状态转换为已打开状态时调用的事件处理程序。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State">
      <summary>获取面向通信的对象的当前状态。</summary>
      <returns>对象的 <see cref="T:System.ServiceModel.CommunicationState" /> 的值。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching">
      <summary>获取或设置指示是否允许传出消息的批处理的值；如果不允许，则为 false。</summary>
      <returns>如果允许对传出消息进行批处理，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession">
      <summary>获取通道的输入会话。</summary>
      <returns>适用于通道的输入会话。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress">
      <summary>获取通道的本地终结点。</summary>
      <returns>通道的本地终结点。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout">
      <summary>获取或设置一个时间段，操作必须在此时间段内完成否则将引发异常。</summary>
      <returns>指定操作必须在此期间内完成的时间段的时间跨度。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession">
      <summary>获取与通道关联的输出会话（如果有）。</summary>
      <returns>如果存在输入会话，则为 <see cref="T:System.ServiceModel.Channels.IOutputSession" /> 实现；否则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress">
      <summary>获取与通道关联的远程地址。</summary>
      <returns>通道的远程 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId">
      <summary>获取当前会话的标识符（如果有）。</summary>
      <returns>当前会话的标识符（如果有）。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{T}#Extensions">
      <summary>获取此可扩展对象的扩展对象集合。</summary>
      <returns>扩展对象的该 <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.EndOperationDelegate">
      <summary>
        <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> 成功完成对 <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" /> 的调用之后，由 <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> 调用的委托。</summary>
      <returns>一个 <see cref="T:System.Object" /> 数组，包含调用异步方法的结果。 此项操作可能会有多个返回值，这些值都将返回到该对象数组中。</returns>
      <param name="result">
        <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> 通过对 <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" /> 的唯一值。</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <summary>存储客户端进行异步调用的结果。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results">
      <summary>获取客户端进行异步调用的结果。</summary>
      <returns>一个 <see cref="T:System.Object" /> 数组，包含客户端进行异步调用的结果。</returns>
    </member>
    <member name="T:System.ServiceModel.ClientCredentialsSecurityTokenManager">
      <summary>管理客户端的安全令牌。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.#ctor(System.ServiceModel.Description.ClientCredentials)">
      <summary>初始化 <see cref="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" /> 类的新实例。</summary>
      <param name="clientCredentials">
        <see cref="T:System.ServiceModel.Description.ClientCredentials" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientCredentials" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.ClientCredentialsSecurityTokenManager.ClientCredentials">
      <summary>获取客户端凭据。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <summary>创建安全令牌身份验证器。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> 对象。</returns>
      <param name="tokenRequirement">
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />。</param>
      <param name="outOfBandTokenResolver">此方法返回时，包含 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenRequirement" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>创建安全令牌提供程序。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider" /> 对象。</returns>
      <param name="tokenRequirement">
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenRequirement" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)">
      <summary>创建安全令牌序列化程序。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> 对象。</returns>
      <param name="version">安全令牌的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.ServiceModel.Security.SecurityVersion)">
      <summary>创建安全令牌序列化程序。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> 对象。</returns>
      <param name="version">安全令牌的 <see cref="T:System.ServiceModel.Security.SecurityVersion" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientCredentialsSecurityTokenManager.IsIssuedSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>获取一个值，该值指示指定的令牌要求是否是已颁发的安全令牌要求。</summary>
      <returns>如果指定的令牌要求是已颁发的安全令牌要求，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="requirement">
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requirement" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.CommunicationException">
      <summary>表示服务或客户端应用程序中的通信错误。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.CommunicationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和上下文对象初始化 <see cref="T:System.ServiceModel.CommunicationException" /> 类的新实例。</summary>
      <param name="info">与反序列化进程相关的信息。</param>
      <param name="context">反序列化进程的上下文。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.CommunicationException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.CommunicationException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
      <param name="innerException">要使用的内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectAbortedException">
      <summary>调用已经中止的 <see cref="T:System.ServiceModel.ICommunicationObject" /> 对象时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化用来将数据反序列化到 <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> 对象中的 <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)">
      <summary>使用指定消息初始化 <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> 类的新实例。</summary>
      <param name="message">异常中传达的消息。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectFaultedException">
      <summary>调用出错通信对象时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象反序列化流时初始化 <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> 类的新实例。</summary>
      <param name="info">用于创建异常对象的序列化信息。</param>
      <param name="context">用于创建异常对象的上下文。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationState">
      <summary>定义 <see cref="T:System.ServiceModel.ICommunicationObject" /> 可存在的状态。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closed">
      <summary>指示通信对象已关闭，且不再可用。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closing">
      <summary>指示通信对象正转换到 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Created">
      <summary>指示通信对象已实例化且可配置，但尚未打开或无法使用。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Faulted">
      <summary>指示通信对象发生错误，无法恢复且不再可用。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opened">
      <summary>指示通信对象目前已打开，且随时可供使用。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opening">
      <summary>指示通信对象正从 <see cref="F:System.ServiceModel.CommunicationState.Created" /> 状态转换到 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</summary>
    </member>
    <member name="T:System.ServiceModel.ConcurrencyMode">
      <summary>指定服务类是支持单线程还是多线程操作模式。</summary>
    </member>
    <member name="F:System.ServiceModel.ConcurrencyMode.Multiple">
      <summary>服务实例是多线程的。 无同步保证。 因为其他线程可以随时更改服务对象，所以必须始终处理同步与状态一致性。</summary>
    </member>
    <member name="F:System.ServiceModel.ConcurrencyMode.Reentrant">
      <summary>服务实例是单线程的，且接受可重入调用。 可重入服务接受在调用其他服务的同时进行调用；因此在调出之前，您需要负责让对象的状态一致，而在调出之后，必须确认本地操作数据有效。 请注意，只有通过 WCF 通道调用其他服务，才能解除服务实例锁定。 在此情况下，已调用的服务可以通过回调重入第一个服务。 如果第一个服务不可重入，则该调用顺序会导致死锁。 有关详细信息，请参见<see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />。</summary>
    </member>
    <member name="F:System.ServiceModel.ConcurrencyMode.Single">
      <summary>服务实例是单线程的，且不接受可重入调用。 如果 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> 属性为 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />，且其他消息在实例处理调用的同时到达，则这些消息必须等待，直到服务可用或消息超时为止。</summary>
    </member>
    <member name="T:System.ServiceModel.DataContractFormatAttribute">
      <summary>指示 Windows Communication Foundation (WCF) 基础结构使用 <see cref="T:System.Runtime.Serialization.DataContractSerializer" />。</summary>
    </member>
    <member name="M:System.ServiceModel.DataContractFormatAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.DataContractFormatAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.DataContractFormatAttribute.Style">
      <summary>获取或设置序列化数据的 SOAP 样式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationFormatStyle" /> 值之一。 默认值为 <see cref="F:System.ServiceModel.OperationFormatStyle.Document" />。</returns>
    </member>
    <member name="T:System.ServiceModel.DeadLetterQueue">
      <summary>指定要使用的死信队列类型。</summary>
    </member>
    <member name="F:System.ServiceModel.DeadLetterQueue.Custom">
      <summary>自定义死信队列。</summary>
    </member>
    <member name="F:System.ServiceModel.DeadLetterQueue.None">
      <summary>没有要使用的死信队列。</summary>
    </member>
    <member name="F:System.ServiceModel.DeadLetterQueue.System">
      <summary>使用系统级死信队列。</summary>
    </member>
    <member name="T:System.ServiceModel.DeliveryRequirementsAttribute">
      <summary>指定绑定必须提供给服务或客户端实现的功能要求。</summary>
    </member>
    <member name="M:System.ServiceModel.DeliveryRequirementsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.DeliveryRequirementsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.DeliveryRequirementsAttribute.QueuedDeliveryRequirements">
      <summary>指定服务的绑定是否必须支持排队协定。</summary>
      <returns>
        <see cref="T:System.ServiceModel.QueuedDeliveryRequirementsMode" /> 值之一，默认值为 <see cref="F:System.ServiceModel.QueuedDeliveryRequirementsMode.Allowed" />。</returns>
      <exception cref="T:System.ArgumentException">该值不是 <see cref="T:System.ServiceModel.QueuedDeliveryRequirementsMode" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.DeliveryRequirementsAttribute.RequireOrderedDelivery">
      <summary>指定绑定是否必须支持已排序消息。</summary>
      <returns>如果指示 Windows Communication Foundation (WCF) 确认绑定必须支持排序消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>实现 <see cref="M:System.ServiceModel.DeliveryRequirementsAttribute.System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" /> 方法以正确地附加绑定参数。</summary>
      <param name="description">协定说明。</param>
      <param name="endpoint">协定的服务终结点。</param>
      <param name="parameters">绑定参数。</param>
    </member>
    <member name="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>实现 <see cref="M:System.ServiceModel.DeliveryRequirementsAttribute.System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" /> 方法以获取客户端支持。</summary>
      <param name="description">与行为有关的协定说明。</param>
      <param name="endpoint">协定的终结点。</param>
      <param name="proxy">行为对其产生作用的运行时客户端。</param>
    </member>
    <member name="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <summary>实现 <see cref="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" /> 方法以启用服务支持。</summary>
      <param name="description">与行为有关的协定说明。</param>
      <param name="endpoint">协定的终结点。</param>
      <param name="dispatch">支持终结点的运行时调度。</param>
    </member>
    <member name="M:System.ServiceModel.DeliveryRequirementsAttribute.System#ServiceModel#Description#IContractBehavior#Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>实现 <see cref="M:System.ServiceModel.DeliveryRequirementsAttribute.System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" /> 方法以启用验证支持。</summary>
      <param name="description">协定说明。</param>
      <param name="endpoint">要验证的终结点。</param>
    </member>
    <member name="P:System.ServiceModel.DeliveryRequirementsAttribute.TargetContract">
      <summary>获取或设置所适用的类型。</summary>
      <returns>属性适用的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.DnsEndpointIdentity">
      <summary>指定服务器的 DNS 标识。</summary>
    </member>
    <member name="M:System.ServiceModel.DnsEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)">
      <summary>使用声明初始化 <see cref="T:System.ServiceModel.DnsEndpointIdentity" /> 类的新实例。</summary>
      <param name="identity">
        <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DnsEndpointIdentity.#ctor(System.String)">
      <summary>从 DNS 名称初始化此类的新实例。</summary>
      <param name="dnsName">DNS 名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dnsName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dnsName" /> 的声明类型不是 <see cref="P:System.IdentityModel.Claims.ClaimTypes.Dns" />。</exception>
    </member>
    <member name="T:System.ServiceModel.DuplexChannelFactory`1">
      <summary>提供创建和管理不同类型的双工通道的方式，客户端使用这些通道在服务终结点发送和接收消息。</summary>
      <typeparam name="TChannel">由通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object)">
      <summary>使用实现回调协定的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding)">
      <summary>使用实现回调协定和指定绑定的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 或 <paramref name="binding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用实现回调协定和指定绑定和终结点地址的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 或 <paramref name="binding" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.String)">
      <summary>使用指定的回调对象、绑定和远程地址初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的远程地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 或 <paramref name="binding" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用实现回调协定和指定终结点的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpoint">工厂生成的通道所连接至的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.String)">
      <summary>使用实现回调协定以及指定配置的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpointConfigurationName">用于终结点的配置名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 或 <paramref name="endpointConfigurationName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用实现回调协定的对象以及指定配置和终结点地址初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpointConfigurationName">用于终结点配置的名称。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 或 <paramref name="endpointConfigurationName" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext)">
      <summary>用指定的实例上下文初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding)">
      <summary>使用实现回调协定和指定绑定的上下文初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 或 <paramref name="binding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用实现回调协定和指定绑定和终结点地址的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 或 <paramref name="binding" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.String)">
      <summary>使用指定的实例上下文、绑定和远程地址初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的远程地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 或 <paramref name="binding" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用实现回调协定和指定终结点的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpoint">工厂生成的通道所连接至的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
      <summary>使用实现回调协定以及指定配置的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpointConfigurationName">用于终结点配置的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 或 <paramref name="endpointConfigurationName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用实现回调协定和指定配置和终结点地址的对象初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpointConfigurationName">用于终结点配置的名称。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 或 <paramref name="endpointConfigurationName" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type)">
      <summary>使用指定类型的回调实例初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstanceType">
        <see cref="T:System.Type" />，客户端用以侦听来自所连接服务的消息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstanceType" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding)">
      <summary>使用指定类型的回调实例和绑定初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstanceType">
        <see cref="T:System.Type" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstanceType" /> 或 <paramref name="binding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定类型的回调实例、绑定和远程地址初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstanceType">
        <see cref="T:System.Type" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstanceType" /> 或 <paramref name="binding" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <summary>使用指定类型的回调实例、绑定和远程地址初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstanceType">
        <see cref="T:System.Type" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的远程地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstanceType" /> 或 <paramref name="binding" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用指定类型的回调实例和服务终结点初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstanceType">
        <see cref="T:System.Type" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpoint">该服务的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstanceType" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.String)">
      <summary>使用指定类型的回调实例和配置初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstanceType">
        <see cref="T:System.Type" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpointConfigurationName">用于终结点配置的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstanceType" /> 或 <paramref name="endpointConfigurationName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.Type,System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用指定类型的回调实例、配置和远程地址初始化 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackInstanceType">
        <see cref="T:System.Type" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpointConfigurationName">用于终结点配置的名称。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstanceType" /> 或 <paramref name="endpointConfigurationName" /> 或 <paramref name="remoteAddress" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的通道。</returns>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="endpointAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 或 <paramref name="endpointAddress" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的通道。</returns>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="endpointAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 或 <paramref name="endpointAddress" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.Object,System.String)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的通道。</returns>
      <param name="callbackObject">
        <see cref="T:System.Object" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpointConfigurationName">用于终结点配置的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointConfigurationName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的双工通道。</returns>
      <param name="address">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的双工通道。</returns>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的通道。</returns>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="endpointAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 或 <paramref name="endpointAddress" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的通道。</returns>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="binding">用于通过工厂生成的通道连接至服务的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="endpointAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 或 <paramref name="endpointAddress" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的双工通道。</returns>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="address">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的通道。</returns>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="address">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.String)">
      <summary>在服务和客户端上的回调实例之间创建双工通道。</summary>
      <returns>位于客户端和服务之间类型为 <paramref name="TChannel" />（工厂的泛型参数）的通道。</returns>
      <param name="callbackInstance">
        <see cref="T:System.ServiceModel.InstanceContext" />，客户端用以侦听来自所连接服务的消息。</param>
      <param name="endpointConfigurationName">用于终结点配置的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointConfigurationName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 或 <paramref name="callbackInstance" />.UserObject 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.DuplexClientBase`1">
      <summary>用于创建双工服务的通道，并将该通道与回调对象相关联。</summary>
      <typeparam name="TChannel">要创建的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object)">
      <summary>使用指定的回调对象初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的回调对象、绑定和服务终结点地址初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="binding">用于调用服务的绑定。</param>
      <param name="remoteAddress">要使用的服务终结点地址。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用指定的回调对象和服务终结点初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="endpoint">服务终结点。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String)">
      <summary>使用指定的回调对象和配置名称初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的客户端终结点信息的名称。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的回调对象、配置名称和服务终结点地址初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的客户端终结点信息的名称。</param>
      <param name="remoteAddress">要使用的服务终结点地址。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.Object,System.String,System.String)">
      <summary>使用指定的回调对象、终结点配置名称和服务终结点地址初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的客户端终结点信息的名称。</param>
      <param name="remoteAddress">要使用的服务终结点地址。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext)">
      <summary>使用指定的回调对象初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个将回调对象与服务的通道相关联的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的回调对象、绑定和服务终结点地址初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="binding">用于调用服务的绑定。</param>
      <param name="remoteAddress">要使用的服务终结点地址。</param>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用指定的回调对象和服务终结点初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个将回调对象与服务的通道相关联的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</param>
      <param name="endpoint">服务终结点。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
      <summary>使用指定的回调对象和配置名称初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的客户端终结点信息的名称。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的回调对象、配置名称和服务终结点地址初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的客户端终结点信息的名称。</param>
      <param name="remoteAddress">要使用的服务终结点地址。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)">
      <summary>使用指定的回调对象、配置名称和服务终结点地址初始化 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 类的新实例。</summary>
      <param name="callbackInstance">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
      <param name="endpointConfigurationName">应用程序配置文件中的客户端终结点信息的名称。</param>
      <param name="remoteAddress">要使用的服务终结点地址。</param>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
      <exception cref="T:System.ArgumentNullException">回调实例为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.DuplexClientBase`1.InnerDuplexChannel">
      <summary>获取内部双工通道。</summary>
      <returns>内部双工通道。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddress">
      <summary>提供客户端用来与服务终结点进行通信的唯一网络地址。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.String)">
      <summary>使用指定的 URI 字符串初始化 <see cref="T:System.ServiceModel.EndpointAddress" /> 类的新实例。</summary>
      <param name="uri">标识终结点的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])">
      <summary>使用指定的 URI 和标头初始化 <see cref="T:System.ServiceModel.EndpointAddress" /> 类的新实例。</summary>
      <param name="uri">标识终结点位置的 <see cref="T:System.Uri" />。</param>
      <param name="addressHeaders">类型为 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 的 <see cref="T:System.Array" />，包含用于与终结点交互的地址信息。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeader[])">
      <summary>使用指定的 URI、标识和标头初始化 <see cref="T:System.ServiceModel.EndpointAddress" /> 类的新实例。</summary>
      <param name="uri">标识终结点位置的 <see cref="T:System.Uri" />。</param>
      <param name="identity">终结点的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</param>
      <param name="addressHeaders">类型为 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 的 <see cref="T:System.Array" />，包含用于与终结点交互的地址信息。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeaderCollection)">
      <summary>使用指定的 URI、标识和标头集合初始化 <see cref="T:System.ServiceModel.EndpointAddress" /> 类的新实例。</summary>
      <param name="uri">标识终结点位置的 <see cref="T:System.Uri" />。</param>
      <param name="identity">终结点的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</param>
      <param name="headers">包含用于与终结点交互的地址信息的 <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeaderCollection,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryReader)">
      <summary>使用指定的 URI、标识、标头集合、元数据和扩展读取器初始化 <see cref="T:System.ServiceModel.EndpointAddress" /> 类的新实例。</summary>
      <param name="uri">标识终结点位置的 <see cref="T:System.Uri" />。</param>
      <param name="identity">终结点的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</param>
      <param name="headers">包含用于与终结点交互的地址信息的 <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" />。</param>
      <param name="metadataReader">从中获取终结点元数据的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="extensionReader">从中获取扩展的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.AnonymousUri">
      <summary>获取匿名 URI 的与版本无关的表示形式。</summary>
      <returns>一个值为 http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/Anonymous 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)">
      <summary>将终结点地址的 URI 和属性分配给指定消息的标头值。</summary>
      <param name="message">要分配其标头值的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.Equals(System.Object)">
      <summary>返回一个值，该值指示指定的对象与当前终结点地址是否等同。</summary>
      <returns>如果指定的对象等同于当前地址，则为 true；否则为 false。</returns>
      <param name="obj">要与当前终结点地址进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetHashCode">
      <summary>提供当前终结点地址的唯一哈希代码。</summary>
      <returns>当前终结点地址的唯一哈希代码。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetReaderAtExtensions">
      <summary>获取使您可以访问扩展的 XML 字典读取器。</summary>
      <returns>使您可以访问扩展的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetReaderAtMetadata">
      <summary>获取使您可以访问终结点元数据的 XML 字典读取器。</summary>
      <returns>使您可以访问终结点元数据的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Headers">
      <summary>获取生成器可以创建的终结点的地址标头的集合。</summary>
      <returns>包含终结点地址信息的 <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Identity">
      <summary>获取用于验证终结点的标识。</summary>
      <returns>终结点的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsAnonymous">
      <summary>获取一个值，该值指示终结点是否为“匿名”。</summary>
      <returns>如果终结点为 <see cref="P:System.ServiceModel.EndpointAddress.AnonymousUri" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsNone">
      <summary>获取一个值，该值指示终结点 URI 是否为 <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />。</summary>
      <returns>如果终结点 的 URI 为 <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.NoneUri">
      <summary>获取一个与版本无关的 URI，用作不得向其发送消息的终结点的地址。</summary>
      <returns>一个值为 http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/None 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>返回一个值，该值指示指定的终结点地址是否不等同。</summary>
      <returns>如果终结点地址等同，则为 true；否则为 false。</returns>
      <param name="address1">要比较的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象之一。</param>
      <param name="address2">要比较的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象之一。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>返回一个值，该值指示指定的终结点地址是否不等同。</summary>
      <returns>如果终结点地址不等同，则为 true；否则为 false。</returns>
      <param name="address1">要比较的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象之一。</param>
      <param name="address2">要比较的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象之一。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)">
      <summary>从指定的 XML 读取器读取指定地址版本的终结点地址。</summary>
      <returns>从 XML 字典读取器读取的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>从指定的 XML 字典读取器读取具有指定限定名的指定地址版本的终结点地址。</summary>
      <returns>从 XML 读取器中读取的具有限定名的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="localName">包含要包含终结点地址的 XML 节点的本地名称。</param>
      <param name="ns">包含要包含终结点地址的 XML 节点的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader)">
      <summary>从指定的 XML 读取器读取指定地址版本的终结点地址。</summary>
      <returns>从 XML 读取器读取的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlReader,System.String,System.String)">
      <summary>从指定的 XML 读取器读取具有指定限定名的指定地址版本的终结点地址。</summary>
      <returns>从 XML 读取器中读取的具有限定名的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="localName">包含要包含终结点地址的 XML 节点的本地名称。</param>
      <param name="ns">包含要包含终结点地址的 XML 节点的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader)">
      <summary>从指定的 XML 读取器读取终结点地址。</summary>
      <returns>从 XML 字典读取器读取的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.Xml.XmlDictionaryReader,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>从指定的 XML 读取器读取具有指定限定名的终结点地址。</summary>
      <returns>从 XML 字典读取器中读取的具有限定名的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="localName">一个 <see cref="T:System.Xml.XmlDictionaryString" />，其中包含要包含终结点地址的 XML 节点的本地名称。</param>
      <param name="ns">一个 <see cref="T:System.Xml.XmlDictionaryString" />，其中包含要包含终结点地址的 XML 节点的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ToString">
      <summary>返回终结点地址中包含的 URI 的规范字符串表示形式。</summary>
      <returns>标识终结点的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Uri">
      <summary>获取终结点的 URI。</summary>
      <returns>终结点的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <summary>将节点的所有子节点保存到指定的 XML 字典编写器中。</summary>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">终结点地址所保存到的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 或 <paramref name="addressingVersion" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)">
      <summary>将节点的所有子节点保存到指定的 XML 编写器中。</summary>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">终结点地址所保存到的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 或 <paramref name="addressingVersion" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <summary>将指定版本的当前终结点地址保存到指定的 XML 字典编写器。</summary>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">终结点地址所保存到的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 或 <paramref name="addressingVersion" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>使用指定的命名空间和本地名称将指定版本的当前终结点地址保存到 XML 字典编写器。</summary>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">终结点地址所保存到的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="localName">
        <see cref="T:System.Xml.XmlDictionaryString" />，其中包含要包含终结点地址的 XML 节点的本地名称。</param>
      <param name="ns">
        <see cref="T:System.Xml.XmlDictionaryString" />，其中包含要包含终结点地址的 XML 节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 或 <paramref name="addressingVersion" /> 或 <paramref name="localName" /> 或 <paramref name="ns" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter)">
      <summary>将指定版本的当前终结点地址保存到指定的 XML 编写器。</summary>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">终结点地址所保存到的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 或 <paramref name="addressingVersion" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlWriter,System.String,System.String)">
      <summary>使用指定的命名空间和本地名称将指定版本的当前终结点地址保存到 XML 编写器。</summary>
      <param name="addressingVersion">当前终结点地址的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">终结点地址所保存到的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="localName">
        <see cref="T:System.Xml.XmlDictionaryString" />，其中包含要包含终结点地址的 XML 节点的本地名称。</param>
      <param name="ns">
        <see cref="T:System.Xml.XmlDictionaryString" />，其中包含要包含终结点地址的 XML 节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 或 <paramref name="addressingVersion" /> 或 <paramref name="localName" /> 或 <paramref name="ns" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.EndpointAddress10">
      <summary>提供可序列化的终结点地址类型，该类型与 WS-Addressing 1.0 版兼容，且可使终结点作为服务协定的一部分进行公开。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress10.FromEndpointAddress(System.ServiceModel.EndpointAddress)">
      <summary>使用指定的终结点地址初始化 <see cref="T:System.ServiceModel.EndpointAddress10" /> 类的新实例。</summary>
      <returns>包含指定的终结点地址的 <see cref="T:System.ServiceModel.EndpointAddress10" /> 类。</returns>
      <param name="address">用于初始化此类的实例的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress10.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>从指定的缓存架构返回 XML 限定名，该名称描述 1.0 版终结点地址的 XML 表示形式。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlQualifiedName" />，描述终结点地址的 XML 表示形式。</returns>
      <param name="xmlSchemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchema" />，其中包含终结点地址的 XML 架构定义语言 (XSD) 架构的缓存。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlSchemaSet" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>返回 null。</summary>
      <returns>null</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress10.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">当前终结点地址所保存到的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress10.ToEndpointAddress">
      <summary>检索此可序列化类型中包含的终结点地址。</summary>
      <returns>用于初始化此类的实例的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddressAugust2004">
      <summary>提供可序列化的终结点地址类型，该类型与 WS-Addressing 2004 年 8 月版兼容，且可使终结点作为服务协定的一部分进行公开。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressAugust2004.FromEndpointAddress(System.ServiceModel.EndpointAddress)">
      <summary>使用指定的终结点地址初始化 <see cref="T:System.ServiceModel.EndpointAddress10" /> 类的新实例。</summary>
      <returns>包含指定的终结点地址的 <see cref="T:System.ServiceModel.EndpointAddressAugust2004" /> 类。</returns>
      <param name="address">用于初始化此类的实例的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressAugust2004.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>从指定的缓存架构返回 XML 限定名，该名称描述 1.0 版终结点地址的 XML 表示形式。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlQualifiedName" />，描述终结点地址的 XML 表示形式。</returns>
      <param name="xmlSchemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchema" />，其中包含终结点地址的 XML 架构定义语言 (XSD) 架构的缓存。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlSchemaSet" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>返回 null。</summary>
      <returns>null</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">从中获取终结点地址的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressAugust2004.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">当前终结点地址所保存到的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressAugust2004.ToEndpointAddress">
      <summary>检索此可序列化类型中包含的终结点地址。</summary>
      <returns>
        <see cref="T:System.ServiceModel.EndpointAddress" />，包含此 <see cref="T:System.ServiceModel.EndpointAddressAugust2004" /> 的与版本无关的终结点地址。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddressBuilder">
      <summary>一个生成具有特定属性值的新的（不可变）终结点地址的工厂。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>从现有的终结点地址初始化 <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> 类的新实例。</summary>
      <param name="address">
        <see cref="T:System.ServiceModel.EndpointAddress" />，其属性值用于初始化此实例的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.GetReaderAtExtensions">
      <summary>返回包含终结点地址扩展的 XML 字典读取器。</summary>
      <returns>可读取终结点地址扩展的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.GetReaderAtMetadata">
      <summary>返回包含与终结点地址关联的元数据的读取器。</summary>
      <returns>如果存在一些元数据，则 <see cref="T:System.Xml.XmlDictionaryReader" /> 将读取与终结点地址关联的元数据；否则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Headers">
      <summary>获取生成器可以创建的终结点的地址标头列表。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 的 <see cref="T:System.Collections.Generic.List`1" />，包含生成器可以创建的终结点的地址头。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Identity">
      <summary>获取或设置生成器可以创建的终结点的标识。</summary>
      <returns>终结点的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.SetExtensionReader(System.Xml.XmlDictionaryReader)">
      <summary>指定包含终结点地址扩展的 XML 字典读取器。</summary>
      <param name="reader">可读取终结点扩展的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.SetMetadataReader(System.Xml.XmlDictionaryReader)">
      <summary>指定包含与终结点地址关联的元数据的 XML 字典读取器。</summary>
      <param name="reader">读取与终结点关联的元数据的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress">
      <summary>创建新的终结点地址，该地址使用当前终结点地址生成器的属性值进行初始化。</summary>
      <returns>
        <see cref="T:System.ServiceModel.EndpointAddress" />，其属性使用当前终结点地址生成器的值进行初始化。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Uri">
      <summary>获取或设置生成器可以创建的终结点的 URI。</summary>
      <returns>指定终结点地址的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointIdentity">
      <summary>一个抽象类，实现此类后可提供一个标识，与终结点交换消息的客户端可以使用该标识对终结点进行身份验证。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.#ctor">
      <summary>创建一个空的 <see cref="T:System.ServiceModel.EndpointIdentity" /> 实例。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.CreateDnsIdentity(System.String)">
      <summary>使用指定的 DNS 名称创建 DNS 标识。</summary>
      <returns>一个与特定的 <paramref name="dnsName" /> 关联的 DNS <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="dnsName">DNS 标识的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dnsName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.CreateIdentity(System.IdentityModel.Claims.Claim)">
      <summary>使用指定的声明创建一个标识。</summary>
      <returns>一个与特定的 <paramref name="identity" /> 关联的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="identity">一个用于创建新标识的 <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书创建一个 RSA 标识。</summary>
      <returns>一个与指定的 <paramref name="certificate" /> 关联的 RSA <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="certificate">一个包含 RSA 标识的证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="certificate" /> 不是一个 RSA 证书。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.CreateRsaIdentity(System.String)">
      <summary>使用指定的公钥创建一个 RSA 标识。</summary>
      <returns>一个与指定的 <paramref name="publicKey" /> 关联的 RSA <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="publicKey">RSA 标识的公钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publicKey" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.CreateSpnIdentity(System.String)">
      <summary>使用指定名称创建服务器主体名称 (SPN) 标识。</summary>
      <returns>一个与指定的 <paramref name="spnName" /> 关联的 SPN <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="spnName">SPN 标识的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spnName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.CreateUpnIdentity(System.String)">
      <summary>使用指定名称创建用户主体名称 (UPN) 标识。</summary>
      <returns>一个与指定的 <paramref name="upnName" /> 关联的 UPN <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="upnName">UPN 标识的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="upnName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的证书创建一个 X509Certificate 标识。</summary>
      <returns>一个与指定的 <paramref name="certificate" /> 关联的 X509Certificate <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="certificate">一个包含标识的证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.CreateX509CertificateIdentity(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>使用指定的主要支持证书创建一个 X509Certificate 标识。</summary>
      <returns>通过此标识连接到终结点的安全 WCF 客户端将验证服务器提供的声明中是否具有一个包含用于构造此标识的证书指纹的声明。 一个与指定的 <paramref name="primaryCertificate" /> 和 <paramref name="supportingCertificates" /> 关联的 X509Certificate <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="primaryCertificate">一个包含标识的主要证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <param name="supportingCertificates">一个包含标识的支持证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primaryCertificate" /> 或 <paramref name="supportingCertificates" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)">
      <summary>返回一个值，该值确定指定的对象是否与当前的标识对象相等，或者它们是否拥有相等的安全属性。</summary>
      <returns>如果指定的对象 <paramref name="obj" /> 与当前的标识相等或包含相同的安全属性，则为 true；否则为 false。</returns>
      <param name="obj">与当前的标识进行相等比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.GetHashCode">
      <summary>提供当前标识实例的哈希代码。</summary>
      <returns>当前标识的哈希代码。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointIdentity.IdentityClaim">
      <summary>获取对应于此标识的标识声明。</summary>
      <returns>表示标识声明的 <see cref="T:System.IdentityModel.Claims.Claim" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim)">
      <summary>使用指定的声明初始化 <see cref="T:System.ServiceModel.EndpointIdentity" />。</summary>
      <param name="identityClaim">用于初始化 <see cref="T:System.ServiceModel.EndpointIdentity" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.Initialize(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})">
      <summary>使用指定的声明和接口初始化 <see cref="T:System.ServiceModel.EndpointIdentity" /> 并对相等性进行比较。</summary>
      <param name="identityClaim">用于初始化 <see cref="T:System.ServiceModel.EndpointIdentity" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
      <param name="claimComparer">用于比较声明的 <see cref="T:System.Collections.IEqualityComparer" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.ToString">
      <summary>返回标识。</summary>
      <returns>形式为“标识（字符串）”的 <see cref="T:System.String" />，其中字符串 = <see cref="P:System.ServiceModel.EndpointIdentity.IdentityClaim" />。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointNotFoundException">
      <summary>无法找到或访问远程终结点时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.EndpointNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定流的源和目标的数据以及序列化异常所需的信息来初始化 <see cref="T:System.ServiceModel.EndpointNotFoundException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ServiceModel.EndpointNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及导致当前异常的内部异常来初始化 <see cref="T:System.ServiceModel.EndpointNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.EnvelopeVersion">
      <summary>包含与 SOAP 版本相关的信息，该版本与消息及其交换关联。</summary>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues">
      <summary>获取一个字符串，该字符串包含与最终目标的当前消息版本关联的 SOAP 角色的 URI 名称。</summary>
      <returns>如果使用的是 SOAP1.1，则为空字符串；如果使用的是 SOAP1.2，则为包含 http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver 的字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue">
      <summary>获取一个字符串，该字符串包含与下一目标的当前消息版本关联的 SOAP 角色的 URI 名称。</summary>
      <returns>如果使用的是 SOAP1.1，则为包含 http://schemas.xmlsoap.org/soap/actor/next 的字符串；如果使用的是 SOAP1.2，则为包含 http://www.w3.org/2003/05/soap-envelope/role/next 的字符串；如果没有消息版本，则为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.None">
      <summary>获取不使用 SOAP 版本的信封版本。</summary>
      <returns>不使用 SOAP 格式的信封版本。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap11">
      <summary>获取 SOAP1.1 信封版本。</summary>
      <returns>SOAP1.1 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap12">
      <summary>获取 SOAP1.2 信封版本。</summary>
      <returns>SOAP1.2 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.ToString">
      <summary>获取表示当前信封版本的字符串。</summary>
      <returns>当前版本的信封的字符串表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.ExceptionDetail">
      <summary>表示错误详细信息。</summary>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.#ctor(System.Exception)">
      <summary>初始化异常中的 <see cref="T:System.ServiceModel.ExceptionDetail" /> 类的新实例。</summary>
      <param name="exception">要序列化为 <see cref="T:System.ServiceModel.ExceptionDetail" /> 对象的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.HelpLink">
      <summary>获取或设置传递到构造函数的异常中的帮助链接。</summary>
      <returns>异常的帮助链接信息。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.InnerException">
      <summary>获取或设置表示内部异常的 <see cref="T:System.ServiceModel.ExceptionDetail" /> 对象。</summary>
      <returns>内部异常信息。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Message">
      <summary>获取或设置传递到构造函数的异常中的消息。</summary>
      <returns>异常消息。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.StackTrace">
      <summary>获取或设置传递到构造函数的异常中的堆栈跟踪信息。</summary>
      <returns>异常的堆栈跟踪。</returns>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.ToString">
      <summary>返回传递到构造函数的异常的详细信息。</summary>
      <returns>异常的消息和堆栈跟踪。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Type">
      <summary>获取或设置传递到构造函数的异常的类型字符串。</summary>
      <returns>传递到构造函数的异常的类型字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.ExceptionMapper">
      <summary>定义用于翻译异常错误的映射。</summary>
    </member>
    <member name="M:System.ServiceModel.ExceptionMapper.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ExceptionMapper" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception)">
      <summary>将输入异常转换为默认异常。</summary>
      <returns>与输入异常相对应的错误。</returns>
      <param name="ex">被映射错误的异常。</param>
    </member>
    <member name="M:System.ServiceModel.ExceptionMapper.FromException(System.Exception,System.String,System.String)">
      <summary>将输入异常转换为默认异常。</summary>
      <returns>与输入异常相对应的错误。</returns>
      <param name="ex">被映射错误的异常。</param>
      <param name="soapNamespace">当生成映射的错误时，要使用的 SOAP 命名空间。</param>
      <param name="trustNamespace">当生成映射的错误时，要使用的 WS-Trust 命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.ExceptionMapper.HandleSecurityTokenProcessingException(System.Exception)">
      <summary>确定在安全标记进程中发生的异常是否应该处理。</summary>
      <returns>如果应处理异常，则为 True，否则为 false。</returns>
      <param name="ex">输入异常。</param>
    </member>
    <member name="T:System.ServiceModel.ExtensionCollection`1">
      <summary>表示扩展的集合。</summary>
      <typeparam name="T">集合的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ExtensionCollection`1.#ctor(`0)">
      <summary>使用指定的所有者初始化 <see cref="T:System.ServiceModel.ExtensionCollection`1" /> 类的新实例。</summary>
      <param name="owner">集合的所有者。</param>
    </member>
    <member name="M:System.ServiceModel.ExtensionCollection`1.#ctor(`0,System.Object)">
      <summary>使用指定的所有者和同步根初始化 <see cref="T:System.ServiceModel.ExtensionCollection`1" /> 类的新实例。</summary>
      <param name="owner">集合的所有者。</param>
      <param name="syncRoot">用于同步的对象。</param>
    </member>
    <member name="M:System.ServiceModel.ExtensionCollection`1.Find``1">
      <summary>返回在集合中找到的一个扩展。</summary>
      <returns>一个具有所查找类型的扩展，如果没有扩展实现该类型，则返回 null。 如果有多个扩展都可实现该类型，则返回最新添加的扩展。</returns>
      <typeparam name="E">查找的扩展类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ExtensionCollection`1.FindAll``1">
      <summary>返回在集合中找到的扩展的集合。</summary>
      <returns>一个具有所查找类型的扩展集合。 如果没有扩展可实现此类型，则返回一个非 Null 的空集合。</returns>
      <typeparam name="E">用于查找扩展集合的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.ExtensionCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ExtensionCollection`1" /> 始终返回 false。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultCode">
      <summary>表示 SOAP 错误代码。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultCode" /> 类的新实例。</summary>
      <param name="name">错误代码的名称。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultCode" /> 类的新实例。</summary>
      <param name="name">错误代码的名称。</param>
      <param name="subCode">错误子代码。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)">
      <summary>用指定的名称和命名空间初始化 <see cref="T:System.ServiceModel.FaultCode" /> 类的新实例。</summary>
      <param name="name">错误代码的本地名称。</param>
      <param name="ns">错误代码的命名空间名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="ns" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> 是空字符串。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)">
      <summary>使用指定的名称、命名空间和错误子代码初始化 <see cref="T:System.ServiceModel.FaultCode" /> 类的新实例。</summary>
      <param name="name">错误代码的本地名称。</param>
      <param name="ns">错误代码的命名空间名称。</param>
      <param name="subCode">一个表示错误子代码的 <see cref="T:System.ServiceModel.FaultCode" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="ns" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> 是空字符串。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.ServiceModel.FaultCode)">
      <summary>使用指定的子代码创建接收方错误代码。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultCode" /> 对象，具有 <see cref="P:System.ServiceModel.FaultCode.SubCode" /> 属性中创建的 SOAP 错误子代码。</returns>
      <param name="subCode">一个表示错误子代码的 <see cref="T:System.ServiceModel.FaultCode" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subCode" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateReceiverFaultCode(System.String,System.String)">
      <summary>使用指定的子代码创建接收方错误代码。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultCode" /> 实例，具有 <see cref="P:System.ServiceModel.FaultCode.SubCode" /> 属性中创建的 SOAP 错误子代码。</returns>
      <param name="name">错误子代码的本地名称。</param>
      <param name="ns">错误子代码的命名空间名称。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)">
      <summary>使用指定的子代码创建发送方错误代码。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultCode" /> 对象，具有 <see cref="P:System.ServiceModel.FaultCode.SubCode" /> 属性中创建的 SOAP 错误子代码。</returns>
      <param name="subCode">一个表示错误子代码的 <see cref="T:System.ServiceModel.FaultCode" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subCode" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.String,System.String)">
      <summary>使用指定的子代码创建发送方错误代码。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultCode" /> 对象，具有 <see cref="P:System.ServiceModel.FaultCode.SubCode" /> 中创建的 SOAP 错误子代码。</returns>
      <param name="name">错误子代码的本地名称。</param>
      <param name="ns">错误子代码的命名空间名称。</param>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsPredefinedFault">
      <summary>获取一个值，该值指示错误为 SOAP 1.1 错误还是 SOAP 1.2 错误。</summary>
      <returns>如果错误为 SOAP 1.1 错误或 SOAP 1.2 错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsReceiverFault">
      <summary>获取一个值，该值指示错误为 SOAP 1.1 服务器错误还是 SOAP 1.2 接收方错误。</summary>
      <returns>如果错误为 SOAP 1.1 服务器错误或 SOAP 1.2 接收方错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsSenderFault">
      <summary>获取一个值，该值指示错误为 SOAP 1.1 客户端错误还是 SOAP 1.2 发送方错误。</summary>
      <returns>如果错误为 SOAP 1.1 客户端错误或 SOAP 1.2 发送方错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Name">
      <summary>获取错误代码的本地名称。</summary>
      <returns>错误代码的本地名称。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Namespace">
      <summary>获取错误代码的命名空间。</summary>
      <returns>命名空间名称的统一资源标识符 (URI)。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.SubCode">
      <summary>获取错误子代码。</summary>
      <returns>一个表示错误子代码的 <see cref="T:System.ServiceModel.FaultCode" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultContractAttribute">
      <summary>指定服务操作遇到处理错误时返回的一个或多个 SOAP 错误。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultContractAttribute" /> 类的新实例。</summary>
      <param name="detailType">包含调用方错误信息的可序列化类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="detailType" /> 参数为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Action">
      <summary>获取或设置已指定作为操作协定一部分的 SOAP 错误消息的操作。</summary>
      <returns>SOAP 错误消息的操作值。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.DetailType">
      <summary>获取包含错误信息的可序列化对象的类型。</summary>
      <returns>表示可序列化错误类的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
      <summary>获取一个值，该值指示 SOAP 错误消息是否分配有保护级别。</summary>
      <returns>如果错误消息具有保护级别，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Name">
      <summary>获取或设置 Web 服务描述语言 (WSDL) 中的错误消息的名称。</summary>
      <returns>错误消息名称。 默认名称是用作错误详细信息类型的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Namespace">
      <summary>获取或设置 SOAP 错误的命名空间。</summary>
      <returns>SOAP 错误的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
      <summary>指定 SOAP 错误要求的绑定的保护级别。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException">
      <summary>表示 SOAP 错误。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在将流反序列化到 <see cref="T:System.ServiceModel.FaultException" /> 对象时，使用指定的序列化信息和上下文初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="info">从流中重新构造 <see cref="T:System.ServiceModel.FaultException" /> 对象所需的序列化信息。</param>
      <param name="context">重新构造 <see cref="T:System.ServiceModel.FaultException" /> 对象所需的流上下文。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault)">
      <summary>使用指定的消息错误值初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="fault">包含默认 SOAP 错误值的消息错误。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)">
      <summary>使用指定的消息错误值和提供的操作字符串初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="fault">包含要使用的默认 SOAP 错误值的消息错误。</param>
      <param name="action">SOAP 错误的操作。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason)">
      <summary>使用指定的原因初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="reason">SOAP 错误的原因。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode)">
      <summary>使用指定的原因和错误代码初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>使用指定的原因、错误代码和操作值初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
      <param name="action">SOAP 错误的操作值。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.String)">
      <summary>用指定的错误原因初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="reason">错误的原因。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.String,System.ServiceModel.FaultCode)">
      <summary>使用指定的原因和 SOAP 错误代码初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">该错误的 SOAP 错误代码。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.String,System.ServiceModel.FaultCode,System.String)">
      <summary>使用指定的原因、错误代码和操作值初始化 <see cref="T:System.ServiceModel.FaultException" /> 类的新实例。</summary>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
      <param name="action">SOAP 错误的操作值。</param>
    </member>
    <member name="P:System.ServiceModel.FaultException.Action">
      <summary>获取错误消息的 SOAP 操作值。</summary>
      <returns>错误消息的 SOAP 操作的值。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Code">
      <summary>获取 SOAP 错误的错误代码。</summary>
      <returns>SOAP 错误的错误代码。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])">
      <summary>从指定的消息错误、操作和详细信息类型的数组返回一个 <see cref="T:System.ServiceModel.Channels.FaultException" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultException" /> 对象，您可以引发该对象以指示已收到 SOAP 错误消息。</returns>
      <param name="messageFault">包含默认 SOAP 错误信息的消息错误。</param>
      <param name="action">错误操作值。</param>
      <param name="faultDetailTypes">包含错误详细信息的类型的数组。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])">
      <summary>从指定的消息错误和详细信息类型的数组返回 <see cref="T:System.ServiceModel.Channels.FaultException" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultException" /> 对象，您可以引发该对象以指示已收到 SOAP 错误消息。</returns>
      <param name="messageFault">包含默认 SOAP 错误信息的消息错误。</param>
      <param name="faultDetailTypes">包含错误详细信息的类型的数组。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateMessageFault">
      <summary>返回 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</summary>
      <returns>SOAP 错误的内存中表示形式，该错误可以传递到 <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> 以创建包含错误的消息。 对于从错误消息中产生的 <see cref="T:System.ServiceModel.FaultException" /> 对象，此 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象为收到的错误。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现在将对象序列化到流中时调用的 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 方法。</summary>
      <param name="info">序列化时向其添加对象数据的序列化信息。</param>
      <param name="context">序列化对象的目标。</param>
    </member>
    <member name="P:System.ServiceModel.FaultException.Message">
      <summary>获取异常消息。</summary>
      <returns>异常消息。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Reason">
      <summary>获取 SOAP 错误的 <see cref="T:System.ServiceModel.FaultReason" />。</summary>
      <returns>SOAP 错误的原因。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException`1">
      <summary>用于在客户端应用程序中捕获通过协定方式指定的 SOAP 错误。</summary>
      <typeparam name="TDetail">可序列化错误详细信息类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将流反序列化为 <see cref="T:System.ServiceModel.FaultException" /> 对象时，使用指定的序列化信息和上下文初始化 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例。</summary>
      <param name="info">从 <paramref name="context" /> 中重新构造 <see cref="T:System.ServiceModel.FaultException" /> 对象时必需的序列化信息。</param>
      <param name="context">从中重新构造 <see cref="T:System.ServiceModel.FaultException" /> 对象的流。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0)">
      <summary>初始化使用指定详细信息对象的 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例。</summary>
      <param name="detail">用作 SOAP 错误详细信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason)">
      <summary>初始化使用指定详细信息对象和错误原因的 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例。</summary>
      <param name="detail">用作 SOAP 错误详细信息的对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例，该类使用指定的详细信息对象、错误原因和错误代码。</summary>
      <param name="detail">用作 SOAP 错误详细信息的对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例，该类使用指定的详细信息对象以及 SOAP 错误原因、代码和操作值。</summary>
      <param name="detail">用作 SOAP 错误详细信息的对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
      <param name="action">SOAP 错误的操作。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String)">
      <summary>初始化使用指定详细信息和错误原因的 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例。</summary>
      <param name="detail">用作 SOAP 错误详细信息的对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String,System.ServiceModel.FaultCode)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例，该类使用指定的详细信息对象、错误原因和错误代码。</summary>
      <param name="detail">用作 SOAP 错误详细信息的对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.String,System.ServiceModel.FaultCode,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultException`1" /> 类的新实例，该类使用指定的详细信息对象以及 SOAP 错误原因、代码和操作值。</summary>
      <param name="detail">用作 SOAP 错误详细信息的对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="code">SOAP 错误的错误代码。</param>
      <param name="action">SOAP 错误的操作。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.CreateMessageFault">
      <summary>创建一个 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象，该对象可用于创建表示 SOAP 错误的 <see cref="T:System.ServiceModel.Channels.Message" />。</summary>
      <returns>创建的错误消息。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException`1.Detail">
      <summary>获取包含错误条件详细信息的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.FaultException`1" /> 对象的类型参数的详细信息对象。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现在将对象序列化到流中时调用的 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 方法。</summary>
      <param name="info">序列化时向其添加对象数据的序列化信息。</param>
      <param name="context">序列化对象的目标。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.ToString">
      <summary>返回 <see cref="T:System.ServiceModel.FaultException`1" /> 对象的字符串。</summary>
      <returns>SOAP 错误的字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultImportOptions">
      <summary>指示是否使用 <see cref="T:System.Xml.XmlSerializer" /> 来读取和写入错误。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultImportOptions.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultImportOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.FaultImportOptions.UseMessageFormat">
      <summary>获取或设置一个值，该值指示应使用 <see cref="T:System.Xml.XmlSerializer" /> 来读取和写入错误。</summary>
      <returns>如果应使用 <see cref="T:System.Xml.XmlSerializer" /> 来读取和写入错误，则为 true；如果应使用 <see cref="T:System.Runtime.Serialization.DataContractSerializer" />，则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReason">
      <summary>提供 SOAP 错误的文本说明。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})">
      <summary>使用指定的错误翻译列表初始化 <see cref="T:System.ServiceModel.FaultReason" /> 类的新实例。</summary>
      <param name="translations">
        <see cref="T:System.ServiceModel.FaultReasonText" /> 对象的一个列表；每个对象以一种特定语言描述错误。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translations" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="translations" /> 为空或者一个或多个项为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)">
      <summary>使用以特定语言描述错误的指定文本元素初始化 <see cref="T:System.ServiceModel.FaultReason" /> 类的新实例。</summary>
      <param name="translation">
        <see cref="T:System.ServiceModel.FaultReasonText" /> 对象的一个数组，这些对象与使用不同语言的错误说明相对应。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.String)">
      <summary>使用指定的错误说明初始化 <see cref="T:System.ServiceModel.FaultReason" /> 类的新实例。</summary>
      <param name="text">错误发生原因的说明。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation">
      <summary>获取使用当前线程所用语言的错误说明。</summary>
      <returns>一个包含错误说明的 <see cref="T:System.ServiceModel.FaultReasonText" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)">
      <summary>获取使用指定语言的错误说明。</summary>
      <returns>使用指定语言的错误文本。</returns>
      <param name="cultureInfo">一个 <see cref="T:System.Globalization.CultureInfo" /> 对象，指定错误说明的语言。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Globalization.CultureInfo" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.ToString">
      <summary>以字符串形式返回错误原因。</summary>
      <returns>一个包含错误原因的字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReason.Translations">
      <summary>获取一个使用不同语言的错误说明的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.FaultReasonText" /> 对象的一个集合，其中的每个对象都使用不同的语言描述错误。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReasonText">
      <summary>表示 SOAP 错误原因的文本。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String)">
      <summary>初始化使用指定错误文本的 <see cref="T:System.ServiceModel.FaultReasonText" /> 类的新实例。</summary>
      <param name="text">表示 SOAP 错误原因的文本。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>初始化使用指定 SOAP 错误文本和指定 <see cref="T:System.Globalization.CultureInfo" /> 对象的 <see cref="T:System.ServiceModel.FaultReasonText" /> 类的新实例。</summary>
      <param name="text">表示 SOAP 错误原因的文本。</param>
      <param name="cultureInfo">描述说明语言的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.FaultReasonText" /> 类的新实例。</summary>
      <param name="text">错误原因的文本。</param>
      <param name="xmlLang">错误的语言。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)">
      <summary>返回一个值，该值指示说明的语言是否与提供的 <see cref="T:System.Globalization.CultureInfo" /> 对象匹配。</summary>
      <returns>如果指定的 <see cref="T:System.Globalization.CultureInfo" /> 匹配，则为 true；否则为 false。</returns>
      <param name="cultureInfo">要与说明语言比较的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.Text">
      <summary>获取 SOAP 错误原因的文本。</summary>
      <returns>SOAP 错误原因的文本。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.XmlLang">
      <summary>获取 SOAP 错误原因的语言。</summary>
      <returns>SOAP 错误原因的语言。</returns>
    </member>
    <member name="T:System.ServiceModel.FederatedMessageSecurityOverHttp">
      <summary>配置 WSFederationHttpBinding 绑定的消息级安全性。</summary>
    </member>
    <member name="M:System.ServiceModel.FederatedMessageSecurityOverHttp.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.FederatedMessageSecurityOverHttp" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.AlgorithmSuite">
      <summary>获取和设置指定消息加密算法和密钥换行算法的算法组。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.ClaimTypeRequirements">
      <summary>获取此绑定的 <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> 实例的集合。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> 类型的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。 默认值为空集合。</returns>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.EstablishSecurityContext">
      <summary>获取或设置是否需要放置安全上下文。</summary>
      <returns>如果需要放置安全上下文，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuedKeyType">
      <summary>指定要颁发的密钥类型。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityKeyType" />。 默认值为 <see cref="F:System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是有效的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyType" />。</exception>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuedTokenType">
      <summary>指定应该由安全令牌服务颁发的令牌类型。</summary>
      <returns>要颁发的令牌类型。 默认值为 null，它会导致 WCF 从 STS 中请求 SAML 安全令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerAddress">
      <summary>获取或设置颁发服务凭据的安全令牌服务的终结点地址。</summary>
      <returns>安全令牌服务的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerBinding">
      <summary>获取或设置当与终结点地址为 <see cref="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerAddress" /> 的安全令牌服务通信时客户端所使用的绑定。</summary>
      <returns>与安全令牌服务通信时客户端所使用的 <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.IssuerMetadataAddress">
      <summary>获取或设置终结点地址以用于与带外的安全令牌服务通信。</summary>
      <returns>在与带外安全令牌服务通信时使用的 <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.NegotiateServiceCredential">
      <summary>指定是否已进行消息级 SSL 协商以获取服务的证书。</summary>
      <returns>如果已协商服务证书，则为 true；如果可以在带外使用服务证书，则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.FederatedMessageSecurityOverHttp.ShouldSerializeAlgorithmSuite">
      <summary>返回是否应对用于保护 SOAP 级消息的算法组进行序列化。</summary>
      <returns>如果应对该算法组进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.FederatedMessageSecurityOverHttp.ShouldSerializeClaimTypeRequirements">
      <summary>返回是否存在可以序列化的现有声明类型要求。</summary>
      <returns>如果存在要序列化的要求，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.FederatedMessageSecurityOverHttp.ShouldSerializeEstablishSecurityContext">
      <summary>返回一个表明安全上下文是否为默认值以及是否应对其进行序列化的指示。</summary>
      <returns>如果上下文应序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.FederatedMessageSecurityOverHttp.ShouldSerializeIssuedKeyType">
      <summary>返回一个表明已颁发的密钥类型是否为默认值以及是否应对其进行序列化的指示。</summary>
      <returns>如果应序列化该类型 ，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.FederatedMessageSecurityOverHttp.ShouldSerializeNegotiateServiceCredential">
      <summary>返回一个表明服务凭据的协商过程是否为默认过程以及是否应对其进行序列化的指示。</summary>
      <returns>如果应序列化进程，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.FederatedMessageSecurityOverHttp.ShouldSerializeTokenRequestParameters">
      <summary>返回一个表明是否存在可序列化的现有令牌请求参数的指示。</summary>
      <returns>如果存在要序列化的参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.FederatedMessageSecurityOverHttp.TokenRequestParameters">
      <summary>获取请求令牌时要在消息正文中发送到安全令牌服务中的 XML 元素的集合。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlElement" /> 类型的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.HostNameComparisonMode">
      <summary>指定将传入的消息调度到服务终结点时应该如何在 URI 比较中使用主机名。</summary>
    </member>
    <member name="F:System.ServiceModel.HostNameComparisonMode.Exact">
      <summary>如果没有找到强匹配，在将传入的消息调度到此终结点时使用主机名。</summary>
    </member>
    <member name="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard">
      <summary>将传入的消息调度到此终结点时，忽略主机名。 这是默认值。</summary>
    </member>
    <member name="F:System.ServiceModel.HostNameComparisonMode.WeakWildcard">
      <summary>如果没有找到强匹配或精确匹配，匹配时忽略主机名。</summary>
    </member>
    <member name="T:System.ServiceModel.HttpBindingBase">
      <summary>指定基 HTTP 绑定。</summary>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.AllowCookies">
      <summary>获取或设置一个值，该值指示客户端是否接受 Cookie 并且对今后的请求传播它们。</summary>
      <returns>如果接受 Cookie，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.BypassProxyOnLocal">
      <summary>获取或设置一个值，该值指示是否对本地地址不使用代理服务器。</summary>
      <returns>如果对本地地址不使用代理服务器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.EnvelopeVersion">
      <summary>获取此绑定处理的消息将要使用的 SOAP 版本。</summary>
      <returns>此绑定处理的消息将要使用的 SOAP 版本。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>如果主机名用于于 URI 相匹配，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.MaxBufferPoolSize">
      <summary>获取或设置为从通道接收消息的消息缓冲区管理器分配并供其使用的最大内存量（以字节为单位）。</summary>
      <returns>分配供从通道接收消息的消息缓冲区管理器使用的最大内存量（以字节为单位）。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.MaxBufferSize">
      <summary>获取或设置缓冲区的最大大小（以字节为单位），该缓冲区用于接收来自通道的消息。</summary>
      <returns>接收来自通道的消息的缓冲区的最大大小（以字节为单位）。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.MaxReceivedMessageSize">
      <summary>获取或设置配置了此绑定配置的通道上可以接收的消息的最大大小（以字节为单位）。</summary>
      <returns>此绑定配置的通道上可以接收的消息的最大大小（以字节为单位）。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.ProxyAddress">
      <summary>获取或设置 HTTP 代理的 URI 地址。</summary>
      <returns>HTTP 代理的 URI 地址。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的该复杂性约束。</summary>
      <returns>可由用此绑定配置的终结点处理的 SOAP 消息的复杂性约束。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.Scheme">
      <summary>获取用此绑定配置的通道和侦听器的 URI 传输方案。</summary>
      <returns>用此绑定配置的通道和侦听器的 URI 传输方案。</returns>
    </member>
    <member name="M:System.ServiceModel.HttpBindingBase.ShouldSerializeReaderQuotas">
      <summary>返回是否应序列化对 SOAP 消息结构的复杂性施加的约束值。</summary>
      <returns>如果应对读取器配额进行序列化，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.HttpBindingBase.ShouldSerializeTextEncoding">
      <summary>返回是否应对文本编码设置进行序列化。</summary>
      <returns>如果应对文本编码进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>获取一个值，该值指示是同步处理传入请求还是异步处理传入请求。</summary>
      <returns>如果同步或异步处理传入的请求，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.TextEncoding">
      <summary>获取或设置用于消息文本的字符编码。</summary>
      <returns>用于消息文本的字符编码。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.TransferMode">
      <summary>获取或设置一个值，该值指示是通过缓冲处理还是流处理来发送消息。</summary>
      <returns>
        <see cref="T:System.ServiceModel.TransferMode" /> 的一个枚举值指示信息发送是否中断或以流化。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpBindingBase.UseDefaultWebProxy">
      <summary>获取或设置一个值，该值指示是否应使用系统的自动配置 HTTP 代理（如果可用）。</summary>
      <returns>如果应使用系统的自动配置 HTTP 代理（如果可用），则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.HttpClientCredentialType">
      <summary>枚举 HTTP 客户端的有效凭据类型。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpClientCredentialType.Basic">
      <summary>指定基本身份验证。 更多信息，请参见 RFC 2617 – HTTP Authentication: Basic and Digest Authentication（RFC 2617 – HTTP 身份验证：基本和摘要式身份验证）。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpClientCredentialType.Certificate">
      <summary>指定使用证书进行客户端身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpClientCredentialType.Digest">
      <summary>指定摘要式身份验证。 更多信息，请参见 RFC 2617 – HTTP Authentication: Basic and Digest Authentication（RFC 2617 – HTTP 身份验证：基本和摘要式身份验证）。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpClientCredentialType.InheritedFromHost">
      <summary>身份验证继承自主机。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpClientCredentialType.None">
      <summary>指定匿名身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpClientCredentialType.Ntlm">
      <summary>指定使用 NTLM 进行客户端身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpClientCredentialType.Windows">
      <summary>指定使用 Windows 进行客户端身份验证。</summary>
    </member>
    <member name="T:System.ServiceModel.HttpProxyCredentialType">
      <summary>枚举 HTTP 代理身份验证的有效凭据类型。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpProxyCredentialType.Basic">
      <summary>指定基本身份验证。 更多信息，请参见 RFC 2617 – HTTP Authentication: Basic and Digest Authentication（RFC 2617 – HTTP 身份验证：基本和摘要式身份验证）。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpProxyCredentialType.Digest">
      <summary>指定摘要式身份验证。 更多信息，请参见 RFC 2617 – HTTP Authentication: Basic and Digest Authentication（RFC 2617 – HTTP 身份验证：基本和摘要式身份验证）。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpProxyCredentialType.None">
      <summary>指定匿名身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpProxyCredentialType.Ntlm">
      <summary>指定 NTLM 身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.HttpProxyCredentialType.Windows">
      <summary>指定 Windows 身份验证。</summary>
    </member>
    <member name="T:System.ServiceModel.HttpTransportSecurity">
      <summary>表示 <see cref="T:System.ServiceModel.WSHttpBinding" /> 的传输级安全性设置。</summary>
    </member>
    <member name="M:System.ServiceModel.HttpTransportSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.HttpTransportSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType">
      <summary>获取或设置要用于身份验证的客户端凭据的类型。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.HttpClientCredentialType" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">将此属性设置为未定义的值。</exception>
    </member>
    <member name="P:System.ServiceModel.HttpTransportSecurity.ExtendedProtectionPolicy">
      <summary>获取或设置扩展保护策略。</summary>
      <returns>扩展保护策略。</returns>
    </member>
    <member name="P:System.ServiceModel.HttpTransportSecurity.ProxyCredentialType">
      <summary>获取或设置要用于针对代理进行身份验证的客户端凭据的类型。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.HttpProxyCredentialType" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">将此属性设置为未定义的值。</exception>
    </member>
    <member name="P:System.ServiceModel.HttpTransportSecurity.Realm">
      <summary>获取或设置摘要式或基本身份验证的身份验证领域。</summary>
      <returns>身份验证领域。 默认值为 ""。</returns>
    </member>
    <member name="M:System.ServiceModel.HttpTransportSecurity.ShouldSerializeClientCredentialType">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType" /> 属性是否已更改，不再是默认值且应对其进行序列化。. WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.HttpTransportSecurity.ShouldSerializeExtendedProtectionPolicy">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.HttpTransportSecurity.ExtendedProtectionPolicy" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.HttpTransportSecurity.ExtendedProtectionPolicy" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.HttpTransportSecurity.ShouldSerializeProxyCredentialType">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.HttpTransportSecurity.ProxyCredentialType" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.HttpTransportSecurity.ProxyCredentialType" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.HttpTransportSecurity.ShouldSerializeRealm">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.HttpTransportSecurity.Realm" /> 属性是否已更改，不再是默认值且应对其进行序列化。. WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.HttpTransportSecurity.Realm" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.IClientChannel">
      <summary>定义出站请求的行为和客户端应用程序使用的请求/答复通道。</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
      <summary>获取或设置一个值，该值指示 <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> 是要尝试调用 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> 属性中的 <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> 对象还是要在该集合不为空时引发对象。</summary>
      <returns>如果 Windows Communication Foundation (WCF) 可以调用交互式通道初始值设定项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>要开始使用用户接口获取凭据信息的异步调用。</summary>
      <returns>处理完成时用于回调的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">此方法完成时调用的方法。</param>
      <param name="state">有关通道状态的信息。</param>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
      <summary>获取一个值，该值指示是否对用户接口执行调用以获取凭据信息。</summary>
      <returns>如果调用了 <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> 方法（或 <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> 和 <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> 方法），则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
      <summary>用于获取凭据信息的用户接口的调用。</summary>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>完成对 <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> 的调用后调用。</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
      <summary>这是保留事件。</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.Via">
      <summary>获取 URI，该 URI 包含客户端通道上发送的消息将要到达的传输地址。</summary>
      <returns>包含客户端通道上发送的消息将要到达的传输地址的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ICommunicationObject">
      <summary>为系统中所有面向通信的对象（包括通道、通道管理器、工厂、侦听器以及调度程序和服务主机）定义基本状态机的协定。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Abort">
      <summary>使通信对象立即从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的默认超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定超时时间内关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的指定超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的默认打开超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定时间间隔内打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的指定超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.Close" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的默认关闭超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.Close" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的超时。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closed">
      <summary>当通信对象完成从正在关闭状态转换到已关闭状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closing">
      <summary>当通信对象首次进入正在关闭状态时发生。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
      <summary>完成一个异步操作以关闭通信对象。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" />。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" /> 能够正常关闭之前所经过的超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>完成一个异步操作以打开通信对象。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的超时。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Faulted">
      <summary>当通信对象首次进入出错状态时发生。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open">
      <summary>使通信对象从已创建状态转换到已打开状态。</summary>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的默认打开超时。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> 无法打开并且已进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.TimeoutException">在 <see cref="T:System.ServiceModel.ICommunicationObject" />（已经进入 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态）能够进入 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态之前所经过的指定超时。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opened">
      <summary>当通信对象完成从正在打开状态转换到已打开状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opening">
      <summary>当通信对象首次进入正在打开状态时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.ICommunicationObject.State">
      <summary>获取面向通信的对象的当前状态。</summary>
      <returns>对象的 <see cref="T:System.ServiceModel.CommunicationState" /> 的值。</returns>
    </member>
    <member name="T:System.ServiceModel.IContextChannel">
      <summary>定义通道的上下文控件接口。</summary>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
      <summary>获取或设置一个值，该值指示 Windows Communication Foundation (WCF) 在传输消息之前存储一组消息。</summary>
      <returns>如果允许对传出消息进行批处理，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.InputSession">
      <summary>获取通道的输入会话。</summary>
      <returns>通道的 <see cref="T:System.ServiceModel.Channels.IInputSession" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.LocalAddress">
      <summary>获取通道的本地终结点。</summary>
      <returns>通道的本地 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OperationTimeout">
      <summary>获取或设置一个时间段，操作必须在此时间段内完成否则将引发异常。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定操作必须在此期间内完成的时间段。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OutputSession">
      <summary>获取与通道关联的输出会话（如果有）。</summary>
      <returns>如果存在输入会话，则为 <see cref="T:System.ServiceModel.Channels.IOutputSession" /> 实现；否则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.RemoteAddress">
      <summary>获取与通道关联的远程地址。</summary>
      <returns>通道的远程 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.SessionId">
      <summary>返回当前会话的标识符（如果有）。</summary>
      <returns>当前会话的标识符（如果有）。</returns>
    </member>
    <member name="T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <summary>定义用于指定通道、通道管理器（如通道侦听器和通道工厂）和服务主机所使用的通信超时的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout">
      <summary>获取 close 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 close 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout">
      <summary>获取 open 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 open 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout">
      <summary>获取 receive 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 receive 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout">
      <summary>获取 send 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 send 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.IDuplexContextChannel">
      <summary>定义客户端信道必须实现用于在双工会话中交换消息的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.IDuplexContextChannel.AutomaticInputSessionShutdown">
      <summary>获取或设置一个值，该值指示输入会话是否自动关闭。</summary>
      <returns>如果输入会话自动关闭，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.IDuplexContextChannel.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以关闭具有指定超时及关联状态对象的客户端上的输出会话。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步操作关闭完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="P:System.ServiceModel.IDuplexContextChannel.CallbackInstance">
      <summary>获取或设置与双工消息交换关联的实例上下文。</summary>
      <returns>与双工消息交换关联的 <see cref="T:System.ServiceModel.InstanceContext" />。</returns>
    </member>
    <member name="M:System.ServiceModel.IDuplexContextChannel.CloseOutputSession(System.TimeSpan)">
      <summary>关闭与双工通道关联的客户端上的输出会话。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.IDuplexContextChannel.EndCloseOutputSession(System.IAsyncResult)">
      <summary>完成异步操作以关闭客户端上的输出会话。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.IDuplexContextChannel.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.IExtensibleObject`1">
      <summary>使对象可以参与自定义行为，例如注册事件或监视状态转换等。</summary>
      <typeparam name="T">扩展类的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.IExtensibleObject`1.Extensions">
      <summary>获取此可扩展对象的扩展对象集合。</summary>
      <returns>扩展对象的 <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.IExtension`1">
      <summary>使对象可以通过聚合扩展另一个对象。</summary>
      <typeparam name="T">参与自定义行为的对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Attach(`0)">
      <summary>使扩展对象可以查找它聚合的时间。 当扩展添加到 <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> 属性中时调用。</summary>
      <param name="owner">聚合此扩展的可扩展对象。</param>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Detach(`0)">
      <summary>使对象可以查找它不再聚合的时间。 当从 <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> 属性中移除扩展时调用。</summary>
      <param name="owner">聚合此扩展的可扩展对象。</param>
    </member>
    <member name="T:System.ServiceModel.IExtensionCollection`1">
      <summary>允许按照其类型检索 <see cref="T:System.ServiceModel.IExtension`1" /> 的 <see cref="T:System.ServiceModel.IExtension`1" /> 对象集合。</summary>
      <typeparam name="T">扩展对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.Find``1">
      <summary>查找集合中的指定扩展对象。</summary>
      <returns>查找到的扩展对象。</returns>
      <typeparam name="E">扩展对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
      <summary>查找集合中由 <paramref name="E" /> 指定的所有扩展对象。</summary>
      <returns>集合中实现此指定类型的所有扩展对象的集合。</returns>
      <typeparam name="E">扩展对象的类型。</typeparam>
    </member>
    <member name="T:System.ServiceModel.ImpersonationOption">
      <summary>指定服务实例中服务操作的模拟行为。</summary>
    </member>
    <member name="F:System.ServiceModel.ImpersonationOption.Allowed">
      <summary>如果凭据可用并且 <see cref="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.ImpersonateCallerForAllOperations" /> 等于 true，将执行模拟。</summary>
    </member>
    <member name="F:System.ServiceModel.ImpersonationOption.NotAllowed">
      <summary>不执行模拟。 如果 <see cref="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.ImpersonateCallerForAllOperations" /> 等于 true，则服务启动时将会发生验证异常。</summary>
    </member>
    <member name="F:System.ServiceModel.ImpersonationOption.Required">
      <summary>需要进行模拟。</summary>
    </member>
    <member name="T:System.ServiceModel.InstanceContext">
      <summary>表示服务实例的上下文信息。</summary>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.#ctor(System.Object)">
      <summary>为实现服务实例的指定对象初始化 <see cref="T:System.ServiceModel.InstanceContext" /> 类的新实例。</summary>
      <param name="implementation">实现服务实例的对象。</param>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.#ctor(System.ServiceModel.ServiceHostBase)">
      <summary>为指定主机承载的服务初始化 <see cref="T:System.ServiceModel.InstanceContext" /> 类的新实例。</summary>
      <param name="host">承载服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.#ctor(System.ServiceModel.ServiceHostBase,System.Object)">
      <summary>为实现服务实例并且由指定主机承载的指定对象初始化 <see cref="T:System.ServiceModel.InstanceContext" /> 类的新实例。</summary>
      <param name="host">承载服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
      <param name="implementation">实现服务实例的对象。</param>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.Extensions">
      <summary>获取与服务实例关联的扩展集合（如果有）。</summary>
      <returns>
        <see cref="T:System.ServiceModel.InstanceContext" /> 类型的 <see cref="T:System.ServiceModel.IExtensionCollection`1" />，包含服务实例扩展的实例上下文。</returns>
      <exception cref="T:System.ObjectDisposedException">与此上下文关联的服务实例已关闭，但是没有中止。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">与此上下文关联的服务实例处于错误状态。</exception>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.GetServiceInstance">
      <summary>为实例上下文返回服务的实例。</summary>
      <returns>表示服务实例的对象。</returns>
      <exception cref="T:System.InvalidOperationException">该服务实例处于已创建或正在打开的状态，或没有初始化。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">该服务实例已中止。</exception>
      <exception cref="T:System.ObjectDisposedException">该服务实例已关闭，并且在这些状态下无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">该服务实例处于错误状态，并且在这些状态下无法修改。</exception>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.GetServiceInstance(System.ServiceModel.Channels.Message)">
      <summary>为实例上下文返回服务的实例，以响应传入消息。</summary>
      <returns>表示服务实例的对象。</returns>
      <param name="message">触发服务对象的创建的传入消息。</param>
      <exception cref="T:System.InvalidOperationException">该服务实例处于已创建或正在打开的状态，或没有初始化。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">该服务实例已中止。</exception>
      <exception cref="T:System.ObjectDisposedException">该服务实例已关闭，并且在这些状态下无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">该服务实例处于错误状态，并且在这些状态下无法修改。</exception>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.Host">
      <summary>获取服务实例的主机。</summary>
      <returns>承载服务实例的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</returns>
      <exception cref="T:System.ObjectDisposedException">与此上下文关联的服务实例已关闭，但是没有中止。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">与此上下文关联的服务实例处于错误状态。</exception>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.IncomingChannels">
      <summary>获取传入服务实例的会话通道。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />，包含传入服务实例的会话通道。</returns>
      <exception cref="T:System.ObjectDisposedException">该服务实例已关闭并且不能使用。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">该服务实例处于错误状态。</exception>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.IncrementManualFlowControlLimit(System.Int32)">
      <summary>增加服务实例可以处理的消息数目。</summary>
      <returns>在添加 <paramref name="incrementBy" /> 后，服务实例可以处理的消息的新数目限制。</returns>
      <param name="incrementBy">服务实例可以处理的消息的额外数量。</param>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.ManualFlowControlLimit">
      <summary>获取或设置实例上下文可以处理的消息数目的限制。</summary>
      <returns>实例上下文可以处理的消息数目。</returns>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.OutgoingChannels">
      <summary>获取从服务实例传出的会话通道。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />，包含从服务实例传出的会话通道。</returns>
      <exception cref="T:System.ObjectDisposedException">该服务实例已关闭并且不能使用。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">该服务实例处于错误状态。</exception>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.ReleaseServiceInstance">
      <summary>释放服务实例。</summary>
      <exception cref="T:System.InvalidOperationException">该服务实例处于已创建或打开状态并且不能使用。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">该服务实例已中止。</exception>
      <exception cref="T:System.ObjectDisposedException">该服务实例正在关闭或已关闭并且无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">该服务实例处于错误状态，并且在这些状态下无法修改。</exception>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.SynchronizationContext">
      <summary>获取或设置与当前实例上下文一起用于线程同步的上下文。</summary>
      <returns>与当前实例上下文一起用于线程同步的 <see cref="T:System.Threading.SynchronizationContext" />。</returns>
      <exception cref="T:System.InvalidOperationException">该通信对象已打开或正在关闭，并且在这些状态下不能修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">该通信对象已中止，并且在这些状态下无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">该通信对象已关闭，并且在这些状态下无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">该通信对象处于错误状态，并且在这些状态下无法修改。</exception>
    </member>
    <member name="T:System.ServiceModel.InstanceContextMode">
      <summary>指定可用来处理包含在传入消息中的调用的服务实例数。</summary>
    </member>
    <member name="F:System.ServiceModel.InstanceContextMode.PerCall">
      <summary>新的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象在每次调用前创建，在调用后回收。 如果信道未创建会话，则该值的行为就如同 <see cref="F:System.ServiceModel.InstanceContextMode.PerCall" /> 一样。</summary>
    </member>
    <member name="F:System.ServiceModel.InstanceContextMode.PerSession">
      <summary>为每个会话创建一个新的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</summary>
    </member>
    <member name="F:System.ServiceModel.InstanceContextMode.Single">
      <summary>只有一个 <see cref="T:System.ServiceModel.InstanceContext" /> 对象用于所有传入呼叫，并且在调用后不回收。 如果服务对象不存在，则创建一个。</summary>
    </member>
    <member name="T:System.ServiceModel.InvalidMessageContractException">
      <summary>表示无效的消息协定。</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.InvalidMessageContractException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从流反序列化到对象时初始化 <see cref="T:System.ServiceModel.InvalidMessageContractException" /> 类的新实例。</summary>
      <param name="info">序列化信息。</param>
      <param name="context">用于反序列化的流。</param>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.InvalidMessageContractException" /> 类的新实例。</summary>
      <param name="message">异常的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)">
      <summary>初始化使用指定消息和内部异常的 <see cref="T:System.ServiceModel.InvalidMessageContractException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.IOnlineStatus">
      <summary>定义具有网络功能的对象所使用的属性和事件以指示网络可用性。</summary>
    </member>
    <member name="P:System.ServiceModel.IOnlineStatus.IsOnline">
      <summary>获取一个值，该值指示实例是否具有网络连接并已连接到资源。</summary>
      <returns>如果当前实例在网络上可用，则为 true；否则，为 false。</returns>
    </member>
    <member name="E:System.ServiceModel.IOnlineStatus.Offline">
      <summary>用信号通知实例已与网络资源断开连接。</summary>
    </member>
    <member name="E:System.ServiceModel.IOnlineStatus.Online">
      <summary>用信号通知实例已连接到网络资源。</summary>
    </member>
    <member name="T:System.ServiceModel.IServiceChannel">
      <summary>定义服务通道的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.IServiceChannel.ListenUri">
      <summary>获取服务在其上侦听传入请求的 URI。</summary>
      <returns>服务在其上侦听通道上传入请求的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageBodyMemberAttribute">
      <summary>指定将成员序列化为 SOAP 正文中的元素。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageBodyMemberAttribute.Order">
      <summary>获取和设置一个值，该值指示将成员序列化到 SOAP 正文中的位置。</summary>
      <returns>SOAP 正文中元素的位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传入属性 setter 的值为负整数。</exception>
    </member>
    <member name="T:System.ServiceModel.MessageContractAttribute">
      <summary>定义与 SOAP 消息相对应的强类型类。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageContractAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.HasProtectionLevel">
      <summary>获取一个值，该值指示消息是否有保护级别。</summary>
      <returns>如果必须对消息进行加密、签名或执行这两种操作，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.IsWrapped">
      <summary>获取或设置一个值，该值指定消息正文是否有包装元素。</summary>
      <returns>如果消息正文有包装元素，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.ProtectionLevel">
      <summary>获取或设置一个值，该值指定是否对消息进行加密、签名或同时执行这两种操作。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置不是 <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一时传递给属性的值。</exception>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperName">
      <summary>获取或设置消息正文的包装元素名称。</summary>
      <returns>消息正文中的包装元素的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace">
      <summary>获取或设置消息正文包装元素的命名空间。</summary>
      <returns>包装元素命名空间。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageContractMemberAttribute">
      <summary>声明 <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> 和 <see cref="T:System.ServiceModel.MessageHeaderAttribute" /> 的基成员。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractMemberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel">
      <summary>当在派生类中重写时，获取一个指示成员是否具有分配的保护级别的值。</summary>
      <returns>如果成员具有保护级别，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Name">
      <summary>指定与此成员对应的元素的名称。</summary>
      <returns>与此成员对应的元素的名称。 此字符串必须是有效的 XML 元素名称。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Namespace">
      <summary>指定与此成员对应的元素的命名空间。</summary>
      <returns>与此成员对应的元素的命名空间 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel">
      <summary>指定该成员是否按原样传输，是否已签名或是否已签名和加密。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageCredentialType">
      <summary>枚举有效的消息凭据类型。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.Certificate">
      <summary>指定使用证书进行客户端身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.IssuedToken">
      <summary>指定使用已颁发的令牌进行客户端身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.None">
      <summary>指定匿名身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.UserName">
      <summary>指定使用 UserName 进行客户端身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.Windows">
      <summary>指定使用 Windows 进行客户端身份验证。</summary>
    </member>
    <member name="T:System.ServiceModel.MessageHeader`1">
      <summary>表示 SOAP 标头的内容。</summary>
      <typeparam name="T">消息头类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.MessageHeader`1.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageHeader`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeader`1.#ctor(`0)">
      <summary>使用指定的标头内容初始化 <see cref="T:System.ServiceModel.MessageHeader`1" /> 类的新实例。</summary>
      <param name="content">新标头的内容。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeader`1.#ctor(`0,System.Boolean,System.String,System.Boolean)">
      <summary>使用指定的标头内容和元数据初始化 <see cref="T:System.ServiceModel.MessageHeader`1" /> 类的新实例。</summary>
      <param name="content">新标头的内容。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
      <param name="relay">一个值，指示是否应该中继标头。</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeader`1.Actor">
      <summary>获取或设置消息头的目标接收方。</summary>
      <returns>消息头的目标接收方。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeader`1.Content">
      <summary>获取或设置标头的内容。</summary>
      <returns>标头的内容。</returns>
    </member>
    <member name="M:System.ServiceModel.MessageHeader`1.GetUntypedHeader(System.String,System.String)">
      <summary>获取具有指定命名空间和本地名称的消息头。</summary>
      <returns>具有指定命名空间和本地名称的消息头。</returns>
      <param name="name">标头 XML 元素的本地名称</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeader`1.MustUnderstand">
      <summary>获取或设置一个值，该值指示是否必须理解标头，如 SOAP 1.1/1.2 规范所述。</summary>
      <returns>如果必须理解标头，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeader`1.Relay">
      <summary>获取一个值，该值指示是否应该中继标头。</summary>
      <returns>如果应该中继标头，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderArrayAttribute">
      <summary>指定在 SOAP 消息中，默认包装元素不能写在标头元素的数组类型旁。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderArrayAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageHeaderArrayAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderAttribute">
      <summary>指定数据成员为 SOAP 消息头。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageHeaderAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderAttribute.Actor">
      <summary>获取或设置一个指示此标头为目标的节点的 URI。 使用 SOAP 1.2 时映射到角色标头属性，而使用 SOAP 1.1 时则映射到参与者标头属性。</summary>
      <returns>一个指示此标头为目标的节点的 URI。 使用 SOAP 1.2 时此 URI 映射到角色标头属性，而使用 SOAP 1.1 时则映射到参与者标头属性。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderAttribute.MustUnderstand">
      <summary>指定在 <see cref="P:System.ServiceModel.MessageHeaderAttribute.Actor" /> 角色中起作用的节点是否必须理解此标头。 这将映射到 mustUnderstand SOAP 标头属性。</summary>
      <returns>如果在 <see cref="P:System.ServiceModel.MessageHeaderAttribute.Actor" /> 角色中起作用的节点必须理解此标头，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderAttribute.Relay">
      <summary>指定此标头是否要中继至下游节点。 这将映射到 relay SOAP 标头属性。</summary>
      <returns>如果要将此标头中继至下游节点，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderException">
      <summary>在处理消息时，如果不能满足与 SOAP 消息头有关的期望，则引发该异常。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化用于将数据反序列化到 <see cref="T:System.ServiceModel.MessageHeaderException" /> 对象中的 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)">
      <summary>使用指定消息初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常中传达的消息。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)">
      <summary>使用指定的消息和指示消息头是重复还是缺少的值初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="isDuplicate">如果多个消息头是重复的，则为 true；如果没有消息头，则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和导致异常的内部异常来初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">包含导致异常的内部异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的消息、标头名称和命名空间初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="headerName">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>使用指定的消息、标头名称和命名空间以及指示消息头是重复还是缺少的值来初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="headerName">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
      <param name="isDuplicate">如果多个消息头是重复的，则为 true；如果没有消息头，则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)">
      <summary>使用指定的消息、标头名称和命名空间、指示消息头是重复还是缺少的值以及导致异常的内部异常来初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="headerName">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
      <param name="isDuplicate">如果多个消息头是重复的，则为 true；如果没有消息头，则为 false。</param>
      <param name="innerException">包含导致异常的内部异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)">
      <summary>使用指定的消息、标头名称和命名空间以及导致异常的内部异常来初始化 <see cref="T:System.ServiceModel.MessageHeaderException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="headerName">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
      <param name="innerException">包含导致异常的内部异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderName">
      <summary>获取导致异常的 SOAP 标头的名称。</summary>
      <returns>SOAP 标头的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderNamespace">
      <summary>获取导致异常的 SOAP 标头的命名空间。</summary>
      <returns>SOAP 标头的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.IsDuplicate">
      <summary>获取一个值，该值指示是存在多个消息头还是没有消息头。</summary>
      <returns>如果多个消息头是重复的，则为 true；如果没有消息头，则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageParameterAttribute">
      <summary>控制请求和响应参数的名称。 不能与 <see cref="T:System.ServiceModel.Channels.Message" /> 或消息协定一起使用。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageParameterAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageParameterAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageParameterAttribute.Name">
      <summary>获取或设置 XML 架构 (XSD) 中参数的名称属性。</summary>
      <returns>XSD 中参数的名称属性。</returns>
    </member>
    <member name="T:System.ServiceModel.MessagePropertyAttribute">
      <summary>表示使用自定义消息类型进行局部传递但没有序列化为 SOAP 消息的数据。</summary>
    </member>
    <member name="M:System.ServiceModel.MessagePropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessagePropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessagePropertyAttribute.Name">
      <summary>获取或设置属性的名称。</summary>
      <returns>
        <see cref="T:System.ServiceModel.MessagePropertyAttribute" /> 属性的名称。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageSecurityOverHttp">
      <summary>用于设置 wsDualHttpBinding 绑定上的消息级安全属性。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageSecurityOverHttp.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageSecurityOverHttp" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite">
      <summary>指定用于 SOAP 级安全消息的算法组。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" /> 的值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType">
      <summary>指定在 wsHttpBinding 或 wsDualHttpBinding 绑定中用于客户端身份验证的客户端凭据的类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.MessageCredentialType" />。 默认值为 <see cref="F:System.ServiceModel.MessageCredentialType.Windows" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" /> 的值不是有效的 <see cref="T:System.ServiceModel.MessageCredentialType" />。</exception>
    </member>
    <member name="M:System.ServiceModel.MessageSecurityOverHttp.IsSecureConversationEnabled">
      <summary>仅用于扩展性方案，指出从 <see cref="T:System.ServiceModel.MessageSecurityOverHttp" /> 派生的类的实例是否可以如 WS-SecurityConversation 所述，配置为执行安全对话。</summary>
      <returns>除非在派生类中重写，否则始终返回 true。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential">
      <summary>获取或设置一个值，该值指示是在带外客户端提供服务凭据，还是通过协商过程从服务向客户端获取服务凭据。</summary>
      <returns>如果通过协商过程获取服务凭据，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.MessageSecurityOverHttp.ShouldSerializeAlgorithmSuite">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.MessageSecurityOverHttp.ShouldSerializeClientCredentialType">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.MessageSecurityOverHttp.ShouldSerializeNegotiateServiceCredential">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageSecurityOverMsmq">
      <summary>可用来设置 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定上的消息级安全属性。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageSecurityOverMsmq.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageSecurityOverMsmq" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite">
      <summary>指定用于 SOAP 级安全消息的算法组。</summary>
      <returns>通过 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定发送的消息的 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 设置。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType">
      <summary>获取或设置通过 MSMQ 传输发送的消息的 <see cref="T:System.ServiceModel.MessageCredentialType" /> 安全设置。</summary>
      <returns>通过 MSMQ 传输发送的消息的 <see cref="T:System.ServiceModel.MessageCredentialType" /> 安全设置。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageSecurityOverTcp">
      <summary>为使用 TCP 传输发送的消息配置消息级安全性。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageSecurityOverTcp.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MessageSecurityOverTcp" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityOverTcp.AlgorithmSuite">
      <summary>指定要用于保护 SOAP 级消息的算法组。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.MessageSecurityOverTcp.AlgorithmSuite" /> 的值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityOverTcp.ClientCredentialType">
      <summary>指定客户端用于向 SOAP 级服务进行身份验证的客户端凭据类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.MessageCredentialType" />。 默认值为 <see cref="F:System.ServiceModel.MessageCredentialType.Windows" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.ServiceModel.MessageSecurityOverTcp.ClientCredentialType" /> 的值不是有效的 <see cref="T:System.ServiceModel.MessageCredentialType" />。</exception>
    </member>
    <member name="T:System.ServiceModel.MessageSecurityVersion">
      <summary>一个抽象容器类，在由其几个静态属性实现时包含安全组件的版本信息。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.BasicSecurityProfileVersion">
      <summary>获取基本安全配置文件的版本信息。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.BasicSecurityProfileVersion" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.Default">
      <summary>获取默认消息安全的版本信息。</summary>
      <returns>表示默认消息安全的 <see cref="T:System.ServiceModel.MessageSecurityVersion" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.SecureConversationVersion">
      <summary>获取与消息安全版本相对应的 WS-SecureConversation 版本。</summary>
      <returns>与消息安全版本相对应的 <see cref="T:System.ServiceModel.Security.SecureConversationVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.SecurityPolicyVersion">
      <summary>获取与消息安全版本相对应的 WS-SecurityPolicy 版本。</summary>
      <returns>与消息安全版本相对应的 <see cref="T:System.ServiceModel.Security.SecurityPolicyVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.SecurityTokenVersion">
      <summary>获取与消息安全版本相对应的安全令牌版本。</summary>
      <returns>与消息安全版本相对应的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.SecurityVersion">
      <summary>获取与消息安全版本相对应的 WS-Security 版本。</summary>
      <returns>与消息安全版本相对应的 <see cref="T:System.ServiceModel.Security.SecurityVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.TrustVersion">
      <summary>获取与消息安全版本相对应的 WS-Trust 版本。</summary>
      <returns>与消息安全版本相对应的 <see cref="T:System.ServiceModel.Security.TrustVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10">
      <summary>获取要求 Basic Security Profile 1.0 的消息安全版本，Basic Security Profile 1.0 以 WS-Security 1.0、WS-Trust 1.3、WS-SecureConversation 1.3 和 WS-SecurityPolicy 1.2 安全规范为基础。</summary>
      <returns>需要基于WS-Security 1.0、WS-Trust 1.3、WS-SecureConversation 1.3 和 WS-SecurityPolicy 1.2 安全指定的 Basic Security Profile 1.0 的 <see cref="T:System.ServiceModel.MessageSecurityVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10">
      <summary>获取要求 Basic Security Profile 1.0 的消息安全版本，Basic Security Profile 1.0 以 WS-Security 1.0、WS-Trust 2005 年 2 月版本、WS-SecureConversation 2005 年 2 月版本和 WS-SecurityPolicy 1.1 安全规范为基础。</summary>
      <returns>需要基于 WS-Security 1.0、WS-Trust of February 2005、WS-SecureConversation of February 2005 和 WS-SecurityPolicy 1.1 安全指定的 Basic Security Profile 1.0 的 <see cref="T:System.ServiceModel.MessageSecurityVersion" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12">
      <summary>获取要求 WS-Security 1.1、WS-Trust 1.3、WS-SecureConversation 1.3 和 WS-SecurityPolicy 1.2 安全规范的消息安全版本。</summary>
      <returns>需要 WS-Security 1.1、WS-Trust 1.3、WS-SecureConversation 1.3 和 WS-SecurityPolicy 1.2 安全指定的 <see cref="T:System.ServiceModel.MessageSecurityVersion" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10">
      <summary>获取要求 WS-Security1.1、WS-Trust 1.3、WS-SecureConversation 1.3、WS-SecurityPolicy 1.2 和 BasicSecurityProfile 1.0 安全规范的消息安全版本。</summary>
      <returns>需要WS-Security1.1、WS-Trust 1.3、WS-SecureConversation 1.3、WS-SecurityPolicy 1.2 和 BasicSecurityProfile 1.0 安全指示的 的 <see cref="T:System.ServiceModel.MessageSecurityVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11">
      <summary>获取要求 WS-Security 1.1、WS-Trust 2005 年 2 月版本、WS-SecureConversation 2005 年 2 月版本和 WS-SecurityPolicy 1.1 安全规范的消息安全版本。</summary>
      <returns>需要 WS-Security 1.1、WS-Trust 2005 年 2 月版本、WS-SecureConversation 2005 年 2 月版本 和 WS-SecurityPolicy 1.1 安全指定的 <see cref="T:System.ServiceModel.MessageSecurityVersion" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10">
      <summary>获取要求基本安全配置文件的消息安全版本，基本安全配置文件以 WS-Security 1.1、WS-Trust 2005 年 2 月版本、WS-SecureConversation 2005 年 2 月版本和 WS-SecurityPolicy 1.1 安全规范为基础。</summary>
      <returns>需要基于 WS-Security 1.1、S-Trust of February 2005、WS-SecureConversation of February 2005 和 WS-SecurityPolicy 1.1 安全指定的 Basic Security Profile 的 <see cref="T:System.ServiceModel.MessageSecurityVersion" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqAuthenticationMode">
      <summary>指定用于绑定的身份验证的类型。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqAuthenticationMode.Certificate">
      <summary>客户端通过 X.509 证书进行身份验证。 客户端证书必须显示在服务器的证书存储区中。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqAuthenticationMode.None">
      <summary>此绑定未使用任何安全性。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqAuthenticationMode.WindowsDomain">
      <summary>通过 Kerberos 进行身份验证。 客户端和服务器必须连接到受信任域。</summary>
    </member>
    <member name="T:System.ServiceModel.MsmqBindingBase">
      <summary>
        <see cref="T:System.ServiceModel.NetMsmqBinding" /> 和 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> 的基类。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqBindingBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MsmqBindingBase" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue">
      <summary>获取或设置一个 URI，该 URI 包含每个应用程序的死信队列（该队列用于放置已过期的消息以及传输或传递失败的消息）的位置。</summary>
      <returns>
        <see cref="T:System.Uri" />，其中包含每个应用程序的死信队列的位置。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.DeadLetterQueue">
      <summary>获取或设置一个枚举值，该值指示要使用的死信队列的类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.DeadLetterQueue" /> 枚举值，指示要使用的死信队列的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.Durable">
      <summary>获取或设置一个值，该值指定此绑定处理的消息是持久的还是可变的。</summary>
      <returns>如果此绑定处理的消息是持久的，则为 true；如果这些消息是可变的，则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.ExactlyOnce">
      <summary>获取或设置一个值，该值指示是否只接收一次由此绑定处理的消息。</summary>
      <returns>如果只接收一次由此绑定处理的消息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.MaxReceivedMessageSize">
      <summary>获取或设置此绑定可处理消息的最大字节大小。</summary>
      <returns>此绑定可处理的最大消息大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.MaxRetryCycles">
      <summary>获取或设置尝试向接收应用程序传递消息的最大重试周期数。</summary>
      <returns>尝试向应用程序传递消息的最大重试周期数。 默认值为 2。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.ReceiveContextEnabled">
      <summary>获取或设置一个指示是否请求接收上下文行为的值。</summary>
      <returns>如果要求接收上下文行为，则为 true；否则为false。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling">
      <summary>获取或设置一个枚举值，该值指定如何处理病毒消息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.ReceiveErrorHandling" /> 值，指定如何处理病毒消息和其他无法调度的消息。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount">
      <summary>获取或设置从应用程序队列读取的消息的最大立即传递尝试次数。</summary>
      <returns>立即传递尝试的最大次数。 默认值为 5。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.RetryCycleDelay">
      <summary>获取或设置一个值，该值指示尝试传递无法立即传递的消息时，各个重试周期之间的时间延迟。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在开始下一个尝试传递到接收应用程序的周期前等待的时间间隔。 默认值为 10 分钟。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.Scheme">
      <summary>返回此绑定的方案。</summary>
      <returns>此绑定的方案。 返回的方案取决于 <see cref="T:System.ServiceModel.MsmqBindingBase" /> 的实现。 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 实现返回“net.msmq”。 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> 实现返回“msmq.formatname”。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>获取一个值，该值指示传入请求是由同步处理更加有效还是异步处理更加有效。</summary>
      <returns>如果同步处理请求更加有效，则为 true；否则为 false。 默认值为 false，即异步处理请求。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.TimeToLive">
      <summary>获取或设置一个时间间隔，该时间间隔指示此绑定处理的消息在过期之前可以保留在队列中的时间长度。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指示消息在过期之前可以保留在队列中的时间长度。 默认值为 1 天。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.UseMsmqTracing">
      <summary>获取或设置一个值，该值指示是否应跟踪由此绑定处理的消息。</summary>
      <returns>如果应跟踪由此绑定处理的消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.UseSourceJournal">
      <summary>获取或设置一个值，该值指示是否应将此绑定处理的消息副本存储到源日记队列中。</summary>
      <returns>如果应将此绑定处理的消息副本存储在源日记队列中，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqBindingBase.ValidityDuration">
      <summary>获取或设置一个值，该值指定由接收上下文功能锁定消息的持续时间。</summary>
      <returns>一个 timespan 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqEncryptionAlgorithm">
      <summary>包含可用于在网络上加密消息的一组加密算法。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqEncryptionAlgorithm.Aes">
      <summary>高级加密标准 (AES) 由美国国家标准与技术研究院 (NIST) 制定。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqEncryptionAlgorithm.RC4Stream">
      <summary>由 RSA Security 定义的流密码。</summary>
    </member>
    <member name="T:System.ServiceModel.MsmqException">
      <summary>由消息队列 (MSMQ) 返回的包装错误。 此异常由消息队列传输和消息队列集成通道引发。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关此异常的其他序列化信息初始化 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保留与 <see cref="T:System.ServiceModel.MsmqException" /> 相关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.ServiceModel.MsmqException" /> 关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqException.#ctor(System.String)">
      <summary>使用提供的消息初始化 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例。</summary>
      <param name="message">用于初始化新实例的消息。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqException.#ctor(System.String,System.Exception)">
      <summary>使用提供的消息和内部异常初始化 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例。</summary>
      <param name="message">用于初始化 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例的消息。</param>
      <param name="inner">要通过 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例来进行包装的内部异常。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqException.#ctor(System.String,System.Int32)">
      <summary>使用提供的消息和错误代码初始化 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例。</summary>
      <param name="message">用于初始化 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例的消息。</param>
      <param name="error">由消息队列 (MSMQ) 基础结构返回的错误代码，用于初始化 <see cref="T:System.ServiceModel.MsmqException" /> 类的新实例。</param>
    </member>
    <member name="T:System.ServiceModel.MsmqPoisonMessageException">
      <summary>包装当通道检测到消息为病毒消息时所引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqPoisonMessageException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Int64)">
      <summary>使用病毒消息的指定的查找 ID 初始化 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例。</summary>
      <param name="messageLookupId">病毒消息的查找 ID。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Int64,System.Exception)">
      <summary>使用病毒消息的指定的查找 ID 和内部异常初始化 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例。</summary>
      <param name="messageLookupId">病毒消息的查找 ID。</param>
      <param name="innerException">要通过 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例来进行包装的内部异常。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关该异常的其他序列化信息初始化 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，保存与 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 相关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例，包含与 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 相关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.String)">
      <summary>使用指定的消息文本初始化 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例。</summary>
      <param name="message">用于初始化 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例的消息。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqPoisonMessageException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息文本和内部异常初始化 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例。</summary>
      <param name="message">用于初始化 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例的消息。</param>
      <param name="innerException">要通过 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 类的新实例来进行包装的内部异常。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqPoisonMessageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>检索与 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 相关联的序列化数据，以及与 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 相关联的序列化流的源和目标。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，用于保存与 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 相关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例，用于保存与 <see cref="T:System.ServiceModel.MsmqPoisonMessageException" /> 相关联的序列化流的源和目标。</param>
    </member>
    <member name="P:System.ServiceModel.MsmqPoisonMessageException.MessageLookupId">
      <summary>获取病毒消息的查找 ID。</summary>
      <returns>病毒消息的查找 ID。</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqSecureHashAlgorithm">
      <summary>包含消息队列 (MSMQ) 可用于对消息进行签名的哈希算法。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqSecureHashAlgorithm.MD5">
      <summary>该 Message Digest Algorithm 5 (MD5).</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha1">
      <summary>“安全哈希算法”(SHA-1).</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha256">
      <summary>该 SHA-256 算法。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqSecureHashAlgorithm.Sha512">
      <summary>该 SHA 512 算法。</summary>
    </member>
    <member name="T:System.ServiceModel.MsmqTransportSecurity">
      <summary>
        <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类包装排队传输的传输安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqTransportSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqTransportSecurity.#ctor(System.ServiceModel.MsmqTransportSecurity)">
      <summary>使用现有实例初始化 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的新实例。</summary>
      <param name="other">用于初始化新实例的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的现有实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqTransportSecurity.MsmqAuthenticationMode">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqAuthenticationMode" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqAuthenticationMode" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.MsmqAuthenticationMode" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqTransportSecurity.MsmqEncryptionAlgorithm">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqEncryptionAlgorithm" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqEncryptionAlgorithm" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.MsmqEncryptionAlgorithm" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqTransportSecurity.MsmqProtectionLevel">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.Net.Security.ProtectionLevel" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqTransportSecurity.MsmqSecureHashAlgorithm">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqSecureHashAlgorithm" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqSecureHashAlgorithm" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.MsmqSecureHashAlgorithm" /> 值之一。</exception>
    </member>
    <member name="T:System.ServiceModel.NamedPipeTransportSecurity">
      <summary>提供控制命名管道的保护级别的属性。</summary>
    </member>
    <member name="M:System.ServiceModel.NamedPipeTransportSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NamedPipeTransportSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.NamedPipeTransportSecurity.ProtectionLevel">
      <summary>为命名管道指定保护。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" />。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.EncryptAndSign" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是有效的 <see cref="T:System.Net.Security.ProtectionLevel" />。</exception>
    </member>
    <member name="T:System.ServiceModel.NetHttpBinding">
      <summary>指定 <see cref="T:System.ServiceModel.NetHttpBinding" /> 设置。</summary>
    </member>
    <member name="M:System.ServiceModel.NetHttpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetHttpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.NetHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>使用指定的安全模式初始化 <see cref="T:System.ServiceModel.NetHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">安全模式</param>
    </member>
    <member name="M:System.ServiceModel.NetHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode,System.Boolean)">
      <summary>使用指定的安全模式初始化 <see cref="T:System.ServiceModel.NetHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">安全模式</param>
      <param name="reliableSessionEnabled">true 指示该可靠会话已启用；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.NetHttpBinding.#ctor(System.String)">
      <summary>使用指定配置名称初始化 <see cref="T:System.ServiceModel.NetHttpBinding" /> 类的新实例。</summary>
      <param name="configurationName">配置的名称。</param>
    </member>
    <member name="M:System.ServiceModel.NetHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在客户端上生成通道工厂堆栈，此通道工厂堆栈创建具有指定类型的通道并满足绑定参数集合所指定的功能。</summary>
      <returns>通道工厂满足集合所指定的功能。</returns>
      <param name="parameters">为生成的通道工厂指定要求的参数集合。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.NetHttpBinding.CreateBindingElements">
      <summary>为绑定创建一个包含绑定元素的集合。</summary>
      <returns>构成绑定的绑定元素集合。</returns>
    </member>
    <member name="P:System.ServiceModel.NetHttpBinding.MessageEncoding">
      <summary>获取或设置用于编码消息的消息编码类型。</summary>
      <returns>用于进行编码消息的消息编码类型。</returns>
    </member>
    <member name="P:System.ServiceModel.NetHttpBinding.ReliableSession">
      <summary>获取或设置一个对象，该对象指示是否在通道终结点之间建立可靠会话。</summary>
      <returns>一个对象，该对象指示是否在通道终结点之间建立可靠会话。</returns>
    </member>
    <member name="P:System.ServiceModel.NetHttpBinding.Security">
      <summary>获取或设置用于配置有绑定的服务的安全。</summary>
      <returns>安全类型与由绑定配置的服务一起使用。</returns>
    </member>
    <member name="M:System.ServiceModel.NetHttpBinding.ShouldSerializeReliableSession">
      <summary>指示可靠会话是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应序列化该可卡会话，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetHttpBinding.ShouldSerializeSecurity">
      <summary>指示安全性是否已从默认值中更改或是否应被序列化。</summary>
      <returns>如果应对该安全进行序列化，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetHttpBinding.WebSocketSettings">
      <summary>获取 websocket 的设置。</summary>
      <returns>websocket 的设置。</returns>
    </member>
    <member name="T:System.ServiceModel.NetHttpMessageEncoding">
      <summary>指定网络 Http 消息内码。</summary>
    </member>
    <member name="F:System.ServiceModel.NetHttpMessageEncoding.Binary">
      <summary>二进制消息编码。</summary>
    </member>
    <member name="F:System.ServiceModel.NetHttpMessageEncoding.Mtom">
      <summary>Mtom 消息编码。</summary>
    </member>
    <member name="F:System.ServiceModel.NetHttpMessageEncoding.Text">
      <summary>文本消息编码。</summary>
    </member>
    <member name="T:System.ServiceModel.NetHttpsBinding">
      <summary>指定用于 NetHttpsBinding 的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.NetHttpsBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetHttpsBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.NetHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode)">
      <summary>用所使用的安全类型初始化 <see cref="T:System.ServiceModel.NetHttpsBinding" /> 类的新实例。</summary>
      <param name="securityMode">与此绑定一起使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.NetHttpsBinding.#ctor(System.ServiceModel.BasicHttpsSecurityMode,System.Boolean)">
      <summary>用所使用的指定安全类型和一个指示是否显式启用安全会话的值来初始化 <see cref="T:System.ServiceModel.NetHttpsBinding" /> 类的新实例。</summary>
      <param name="securityMode">与此绑定一起使用的安全类型。</param>
      <param name="reliableSessionEnabled">如果已启用可靠会话，则为 True；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.NetHttpsBinding.#ctor(System.String)">
      <summary>使用指定配置名称初始化 <see cref="T:System.ServiceModel.NetHttpsBinding" /> 类的新实例。</summary>
      <param name="configurationName">绑定配置名称。</param>
    </member>
    <member name="M:System.ServiceModel.NetHttpsBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在客户端上生成通道工厂堆栈，此通道工厂堆栈创建具有指定类型的通道并满足绑定参数集合所指定的功能。</summary>
      <returns>一个 TChannel 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，它满足集合所指定的功能。</returns>
      <param name="parameters">为生成的通道工厂指定要求。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.NetHttpsBinding.CreateBindingElements">
      <summary>为绑定创建一个绑定元素集合。</summary>
      <returns>用于绑定的绑定元素集合。</returns>
    </member>
    <member name="P:System.ServiceModel.NetHttpsBinding.MessageEncoding">
      <summary>获取或设置与绑定关联的消息编码。</summary>
      <returns>与绑定有关的消息编码。</returns>
    </member>
    <member name="P:System.ServiceModel.NetHttpsBinding.ReliableSession">
      <summary>获取或设置在通道终结点之间建立的可靠会话。</summary>
      <returns>建立在通道终结点之间的可靠会话。</returns>
    </member>
    <member name="P:System.ServiceModel.NetHttpsBinding.Security">
      <summary>获取或设置用于此绑定配置的服务的安全类型。</summary>
      <returns>置用于此绑定的配置服务的安全类型。</returns>
    </member>
    <member name="M:System.ServiceModel.NetHttpsBinding.ShouldSerializeReliableSession">
      <summary>指示可靠会话属性是否已从其默认值中更改或应对其进行序列化。</summary>
      <returns>如果应序列化该可靠会话的属性值，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetHttpsBinding.ShouldSerializeSecurity">
      <summary>指示安全性属性是否已从默认值更改或是否应对其进行序列化。</summary>
      <returns>如果应对该安全属性值进行序列化，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetHttpsBinding.WebSocketSettings">
      <summary>获取网络套接字设置。</summary>
      <returns>网络套接字设置。</returns>
    </member>
    <member name="T:System.ServiceModel.NetMsmqBinding">
      <summary>表示适用于跨计算机通信的排队绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.NetMsmqBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.NetMsmqBinding.#ctor(System.ServiceModel.NetMsmqSecurityMode)">
      <summary>使用指定的安全模式初始化 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 类的新实例。</summary>
      <param name="securityMode">用于初始化新实例的安全模式。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">该值不是 <see cref="T:System.ServiceModel.NetMsmqSecurityMode" /> 值之一。</exception>
    </member>
    <member name="M:System.ServiceModel.NetMsmqBinding.#ctor(System.String)">
      <summary>从指定配置绑定元素的设置中初始化 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 类的新实例。</summary>
      <param name="configurationName">configurationName 属性的值，该值标识其设置用于初始化绑定的 binding 元素。</param>
    </member>
    <member name="M:System.ServiceModel.NetMsmqBinding.CreateBindingElements">
      <summary>返回一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>由 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定描述的已排序的绑定元素集合。</returns>
    </member>
    <member name="P:System.ServiceModel.NetMsmqBinding.EnvelopeVersion">
      <summary>获取此绑定处理的消息将要使用的 SOAP 版本。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 的值。 默认值为 SOAP 1.2。</returns>
    </member>
    <member name="P:System.ServiceModel.NetMsmqBinding.MaxBufferPoolSize">
      <summary>获取或设置为从通道接收消息的消息缓冲区管理器分配并供其使用的最大内存量。</summary>
      <returns>可供消息缓冲区管理器使用的最大内存量（以字节为单位）。 默认值为 524288 (0x80000) 字节。</returns>
    </member>
    <member name="P:System.ServiceModel.NetMsmqBinding.QueueTransferProtocol">
      <summary>获取或设置一个枚举值，该值指示此绑定使用的排队通信通道传输。</summary>
      <returns>此绑定使用的队列管理器之间的传输。</returns>
    </member>
    <member name="P:System.ServiceModel.NetMsmqBinding.ReaderQuotas">
      <summary>获取或设置与此绑定关联的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</summary>
      <returns>与此绑定关联的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.NetMsmqBinding.Security">
      <summary>获取或设置与此绑定关联的 <see cref="T:System.ServiceModel.NetMsmqSecurity" />。</summary>
      <returns>与此绑定关联的 <see cref="T:System.ServiceModel.NetMsmqSecurity" />。</returns>
    </member>
    <member name="M:System.ServiceModel.NetMsmqBinding.ShouldSerializeReaderQuotas">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetMsmqBinding.ReaderQuotas" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetMsmqBinding.ReaderQuotas" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetMsmqBinding.ShouldSerializeSecurity">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetMsmqBinding.Security" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetMsmqBinding.Security" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetMsmqBinding.UseActiveDirectory">
      <summary>获取或设置一个值，该值指示是否应该使用 Active Directory 来转换队列地址。</summary>
      <returns>如果应该使用 Active Directory 转换队列地址，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.NetMsmqSecurity">
      <summary>使用 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定时，<see cref="T:System.ServiceModel.NetMsmqSecurity" /> 类包装可用的 MSMQ 安全功能。</summary>
    </member>
    <member name="M:System.ServiceModel.NetMsmqSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetMsmqSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.NetMsmqSecurity.Message">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.MessageSecurityOverMsmq" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.MessageSecurityOverMsmq" />。</returns>
    </member>
    <member name="P:System.ServiceModel.NetMsmqSecurity.Mode">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.NetMsmqSecurityMode" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.NetMsmqSecurityMode" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值不是 <see cref="T:System.ServiceModel.NetMsmqSecurityMode" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.NetMsmqSecurity.Transport">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" />。</returns>
    </member>
    <member name="T:System.ServiceModel.NetMsmqSecurityMode">
      <summary>
        <see cref="T:System.ServiceModel.NetMsmqSecurityMode" /> 枚举指定可供 MSMQ 传输使用的安全模式。</summary>
    </member>
    <member name="F:System.ServiceModel.NetMsmqSecurityMode.Both">
      <summary>同时启用 MSMQ 传输安全和 SOAP 安全。</summary>
    </member>
    <member name="F:System.ServiceModel.NetMsmqSecurityMode.Message">
      <summary>启用 SOAP 安全。</summary>
    </member>
    <member name="F:System.ServiceModel.NetMsmqSecurityMode.None">
      <summary>同时禁用 MSMQ 传输安全和 SOAP 安全。</summary>
    </member>
    <member name="F:System.ServiceModel.NetMsmqSecurityMode.Transport">
      <summary>启用 MSMQ 传输安全。</summary>
    </member>
    <member name="T:System.ServiceModel.NetNamedPipeBinding">
      <summary>提供一个既安全又可靠且针对计算机上的通信进行了优化的绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetNamedPipeBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.ServiceModel.NetNamedPipeSecurityMode)">
      <summary>使用指定的安全模式初始化 <see cref="T:System.ServiceModel.NetNamedPipeBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.NetNamedPipeSecurityMode" /> 值，该值指定是否将 Windows 安全性与命名管道一起使用。</param>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.String)">
      <summary>使用指定配置名称初始化 <see cref="T:System.ServiceModel.NetNamedPipeBinding" /> 类的新实例。</summary>
      <param name="configurationName">&lt;netNamedPipeBinding&gt; 的绑定配置名称。</param>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeBinding.CreateBindingElements">
      <summary>为绑定创建一个绑定元素集合。</summary>
      <returns>组成绑定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.EnvelopeVersion">
      <summary>获取此绑定处理的消息将要使用的 SOAP 版本。</summary>
      <returns>
        <see cref="P:System.ServiceModel.EnvelopeVersion.Soap12" />.</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>
        <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，表示在匹配过程中忽略主机名。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferPoolSize">
      <summary>获取或设置内存中用于对传入消息进行缓冲的最大字节数。</summary>
      <returns>内存中用于对传入消息进行缓冲的最大字节数。 默认值为 524,288 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferSize">
      <summary>获取或设置内存中用于对传入消息进行缓冲的最大字节数。</summary>
      <returns>内存中用于对传入消息进行缓冲的最大字节数。 默认值为 65,536 个字节。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所设置的值小于 0。</exception>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections">
      <summary>获取或设置入站和出站的最大连接数，这些连接是配置了命名管道绑定的终结点所允许的。</summary>
      <returns>该绑定所允许的命名管道连接的最大数目。 默认值为 10。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.MaxReceivedMessageSize">
      <summary>获取或设置绑定可处理的消息最大接收字节大小。</summary>
      <returns>绑定可处理的最大接收消息大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>为交换的 SOAP 消息指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。 下面的备注部分中提供了这些约束的默认值。</returns>
      <exception cref="T:System.ArgumentNullException">所设置的值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.Scheme">
      <summary>获取用此绑定配置的通道和侦听器的 URI 传输方案。</summary>
      <returns>返回“net.pipe”。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.Security">
      <summary>获取一个对象，该对象指定与采用此绑定配置的服务一起使用的安全类型。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.NetNamedPipeSecurity" />。 默认值为 <see cref="F:System.ServiceModel.NetNamedPipeSecurityMode.Transport" />。</returns>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeBinding.ShouldSerializeMaxConnections">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections" /> 属性是否已更改（不再是默认值）而且应进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections" /> 属性值序列化，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeBinding.ShouldSerializeReaderQuotas">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeBinding.ShouldSerializeSecurity">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetNamedPipeBinding.Security" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetNamedPipeBinding.Security" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeBinding.ShouldSerializeTransactionProtocol">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>获取一个值，该值指示是同步处理传入请求还是异步处理传入请求。</summary>
      <returns>false 表示异步处理传入请求。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.TransactionFlow">
      <summary>获取或设置一个值，该值指定事务是否应流动到服务。</summary>
      <returns>如果客户端的事务应流向服务，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol">
      <summary>获取或设置服务在对事务进行流处理时使用的事务处理协议。</summary>
      <returns>服务在对事务进行流处理时使用的 <see cref="T:System.ServiceModel.TransactionProtocol" />。 默认协议为 <see cref="P:System.ServiceModel.TransactionProtocol.OleTransactions" />。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeBinding.TransferMode">
      <summary>获取或设置一个值，该值指示采用此绑定配置的服务是使用消息传输的流处理模式（单向或双向），还是缓冲模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.TransferMode" /> 值，该值指示通过此绑定配置的服务是使用消息传输的流处理模式（单向或双向）还是缓冲模式。 默认值为 <see cref="F:System.ServiceModel.TransferMode.Buffered" />。</returns>
    </member>
    <member name="T:System.ServiceModel.NetNamedPipeSecurity">
      <summary>对使用命名管道绑定配置的终结点提供对安全设置的访问权限。</summary>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetNamedPipeSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeSecurity.Mode">
      <summary>获取或设置命名管道绑定的安全代码。</summary>
      <returns>命名管道绑定的 <see cref="T:System.ServiceModel.NetNamedPipeSecurityMode" /> 值。 默认值为 <see cref="F:System.ServiceModel.NetNamedPipeSecurityMode.Transport" />。</returns>
    </member>
    <member name="M:System.ServiceModel.NetNamedPipeSecurity.ShouldSerializeTransport">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetNamedPipeSecurity.Transport" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetNamedPipeSecurity.Transport" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetNamedPipeSecurity.Transport">
      <summary>获取命名管道绑定的传输安全性。</summary>
      <returns>命名管道绑定的 <see cref="T:System.ServiceModel.NamedPipeTransportSecurity" /> 值。</returns>
    </member>
    <member name="T:System.ServiceModel.NetNamedPipeSecurityMode">
      <summary>指定是否将传输层安全性与命名管道一起使用。</summary>
    </member>
    <member name="F:System.ServiceModel.NetNamedPipeSecurityMode.None">
      <summary>指示未将安全性与命名管道传输一起使用。</summary>
    </member>
    <member name="F:System.ServiceModel.NetNamedPipeSecurityMode.Transport">
      <summary>指示已将传输层安全性与命名管道传输一起使用。</summary>
    </member>
    <member name="T:System.ServiceModel.NetPeerTcpBinding">
      <summary>为对等网络应用程序提供安全绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.NetPeerTcpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetPeerTcpBinding" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.NetPeerTcpBinding.#ctor(System.String)">
      <summary>使用指定配置名称初始化 <see cref="T:System.ServiceModel.NetPeerTcpBinding" /> 类的新实例。</summary>
      <param name="configurationName">configurationName 属性的值，该属性标识其设置用于初始化绑定的绑定元素。</param>
      <exception cref="T:System.Configuration.ConfigurationException">配置无效。</exception>
    </member>
    <member name="M:System.ServiceModel.NetPeerTcpBinding.CreateBindingElements">
      <summary>为绑定创建一个绑定元素集合。</summary>
      <returns>组成绑定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.EnvelopeVersion">
      <summary>获取与此绑定一起使用的 SOAP 版本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.EnvelopeVersion" />，指定要与此绑定一起使用的 SOAP 版本。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.IsPnrpAvailable">
      <summary>获取表示 PNRP 服务是否已在计算机上安装并可用的属性值。</summary>
      <returns>如果安装并配置了 PNRP，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.ListenIPAddress">
      <summary>获取或设置本地对等节点用于侦听的 IP 地址。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，包含格式正确的 IPv4 或 IPv6 地址，本地对等节点将在该地址上进行侦听。</returns>
      <exception cref="T:System.ArgumentException">提供的地址无效或其格式不正确。</exception>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.MaxBufferPoolSize">
      <summary>获取或设置用于对等 TCP 缓冲区的内存池的最大大小（以字节为单位）。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，指定用于对内存中的传入消息进行缓冲的最大字节数。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.MaxReceivedMessageSize">
      <summary>获取或设置 TCP 消息的最大字节大小，这些消息由此绑定创建的对等通道来处理。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含 TCP 消息的最大大小（以字节为单位），这些消息通过此绑定创建的对等通道发送。 默认值为 65,536 (64 KB)。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.Port">
      <summary>获取或设置要绑定的网络端口。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，表示此绑定实例将用于处理对等特定 TCP 消息的网络端口。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.ReaderQuotas">
      <summary>获取或设置与此绑定关联的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</summary>
      <returns>与此绑定关联的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
      <exception cref="T:System.ArgumentNullException">应用程序试图将此属性设置为 Null。</exception>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.Resolver">
      <summary>获取 <see cref="T:System.ServiceModel.PeerResolver" />，此绑定实例将使用它将对等网格 ID 解析为对等网格中节点的终结点 IP 地址。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.PeerResolver" />，用于将对等网格 ID 解析为一组 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 实例，这些实例表示参与网格的多个节点。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.Scheme">
      <summary>获取用于传输协议（与此绑定关联）的 URI 方案。</summary>
      <returns>一个 <see cref="T:System.String" />，指定用于此绑定的特定传输协议的 URI 方案。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.Security">
      <summary>获取和设置要对此绑定创建的对等通道设置的安全性。</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerSecuritySettings" /> 枚举值，指示要对此绑定创建的对等通道设置的安全性。 安全性可以是特定于消息的，也可以是特定于传输的。</returns>
    </member>
    <member name="M:System.ServiceModel.NetPeerTcpBinding.ShouldSerializeReaderQuotas">
      <summary>获取一个值，该值指定是否应对绑定的读取器配额数据进行序列化。</summary>
      <returns>返回一个 <see cref="T:System.Boolean" />，如果应序列化读取器配额数据，则该布尔值为 true；如果不应序列化读取器配额数据，则该布尔值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetPeerTcpBinding.ShouldSerializeSecurity">
      <summary>获取一个值，该值指定是否应序列化绑定的安全信息。</summary>
      <returns>返回一个 <see cref="T:System.Boolean" />，如果应序列化绑定的安全信息，则该布尔值为 true；如果不应序列化绑定的安全信息，则该布尔值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetPeerTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>获取表示此绑定创建的对等通道上的传入请求是同步处理传入请求还是异步处理传入请求的属性值。</summary>
      <returns>如果为 true，则传入请求是同步处理传入请求；如果为 false，则传入请求是异步处理传入请求。 默认值为 false，即异步处理请求。</returns>
    </member>
    <member name="T:System.ServiceModel.NetTcpBinding">
      <summary>一种适合于跨计算机通信的安全可靠的绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetTcpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.#ctor(System.ServiceModel.SecurityMode)">
      <summary>用所使用的指定安全类型初始化 <see cref="T:System.ServiceModel.NetTcpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.SecurityMode" /> 值，指定与绑定一起使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <summary>用所使用的指定安全类型和一个指示是否显式启用安全会话的值来初始化 <see cref="T:System.ServiceModel.NetTcpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.SecurityMode" /> 值，指定与绑定一起使用的安全类型。</param>
      <param name="reliableSessionEnabled">如果已启用可靠会话，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.#ctor(System.String)">
      <summary>使用指定配置名称初始化 <see cref="T:System.ServiceModel.NetTcpBinding" /> 类的新实例。</summary>
      <param name="configurationName">
        <see cref="T:System.ServiceModel.NetTcpBinding" /> 的绑定配置名称。</param>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.CreateBindingElements">
      <summary>为绑定创建一个绑定元素集合。</summary>
      <returns>组成绑定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.EnvelopeVersion">
      <summary>获取此绑定处理的消息将要使用的 SOAP 版本。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 的值。 值为 SOAP 1.2。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>
        <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值之一，指示在对 URI 进行匹配时，是否使用主机名来访问服务。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，表示在匹配过程中忽略主机名。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.ListenBacklog">
      <summary>获取或设置可挂起的最大排队连接请求数。</summary>
      <returns>返回挂起的最大排队连接请求数。 默认值为 10。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不能小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.MaxBufferPoolSize">
      <summary>获取或设置缓冲池允许的最大大小（以字节为单位），该缓冲池用于存储由绑定处理的 TCP 消息。</summary>
      <returns>缓冲池允许的最大大小，该缓冲池用于存储由绑定处理的 TCP 消息。 默认值为 524,288 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.MaxBufferSize">
      <summary>获取或设置一个值，该值指定内存中用于存储消息的缓冲区的最大大小（以字节为单位）。</summary>
      <returns>内存中用于存储消息的缓冲区的最大大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.MaxConnections">
      <summary>获取或设置一个值，该值控制客户端上可存入池中以备后续重复使用的最大连接数，以及服务器上可挂起调度的最大连接数。</summary>
      <returns>客户端上可存入池中以备后续重复使用的最大连接数；服务器上可挂起调度的最大连接数。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.MaxReceivedMessageSize">
      <summary>获取或设置绑定可处理的消息最大接收字节大小。</summary>
      <returns>绑定可处理的最大接收消息大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.PortSharingEnabled">
      <summary>获取或设置一个值，该值指示是否为采用此绑定配置的连接启用 TCP 端口共享。</summary>
      <returns>如果启用 TCP 端口共享，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>为交换的 Soap 消息指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。 下面的备注部分中提供了这些约束的默认值。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.ReliableSession">
      <summary>获取一个对象，该对象指示是否在通道终结点之间建立可靠会话。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.OptionalReliableSession" />，指示是否在通道终结点之间建立 WS-RM 可靠会话。 <see cref="P:System.ServiceModel.OptionalReliableSession.Enabled" /> 的默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.Scheme">
      <summary>返回传输的 URI 方案。</summary>
      <returns>传输的 URI 方案“net.tcp”。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.Security">
      <summary>获取一个对象，该对象指定与采用此绑定配置的服务一起使用的安全类型。</summary>
      <returns>包含与此绑定一起使用的安全类型的 <see cref="T:System.ServiceModel.NetTcpSecurity" />。 NetTCPBinding 的默认安全模式是 <see cref="F:System.ServiceModel.SecurityMode.Transport" />。</returns>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.ShouldSerializeListenBacklog">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetTcpBinding.ListenBacklog" /> 属性是否已更改（不再是默认值）而且应进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetTcpBinding.ListenBacklog" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.ShouldSerializeMaxConnections">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetTcpBinding.MaxConnections" /> 属性是否已更改（不再是默认值）而且应进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetTcpBinding.MaxConnections" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.ShouldSerializeReaderQuotas">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetTcpBinding.ReaderQuotas" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetTcpBinding.ReaderQuotas" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.ShouldSerializeReliableSession">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetTcpBinding.ReliableSession" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetTcpBinding.ReliableSession" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.ShouldSerializeSecurity">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetTcpBinding.Security" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetTcpBinding.Security" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.NetTcpBinding.ShouldSerializeTransactionProtocol">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.NetTcpBinding.TransactionProtocol" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.NetTcpBinding.TransactionProtocol" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>获取一个值，该值指示是同步处理传入请求还是异步处理传入请求。</summary>
      <returns>如果同步处理传入请求，则为 true；如果异步处理传入请求，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.TransactionFlow">
      <summary>获取或设置一个值，该值确定是否启用事务流。</summary>
      <returns>如果启用事务流，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.TransactionProtocol">
      <summary>获取或设置服务在对事务进行流处理时使用的事务处理协议。</summary>
      <returns>服务在对事务进行流处理时使用的 <see cref="T:System.ServiceModel.TransactionProtocol" />。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpBinding.TransferMode">
      <summary>获取或设置一个值，该值指示使用此绑定配置的服务是使用消息传输的流处理模式、缓冲模式还是同时使用这两种模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.TransferMode" /> 值，指示使用此绑定配置的服务是使用消息传输的流处理模式、缓冲模式还是同时使用这两种模式。</returns>
    </member>
    <member name="T:System.ServiceModel.NetTcpContextBinding">
      <summary>为 <see cref="T:System.ServiceModel.NetTcpContextBinding" /> 绑定提供启用了上下文的绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.NetTcpContextBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetTcpContextBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.ServiceModel.SecurityMode)">
      <summary>用指定的 <see cref="T:System.ServiceModel.SecurityMode" /> 初始化 <see cref="T:System.ServiceModel.NetTcpContextBinding" /> 类的新实例。</summary>
      <param name="securityMode">安全模式。</param>
    </member>
    <member name="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.SecurityMode" /> 和可靠的会话设置初始化 <see cref="T:System.ServiceModel.NetTcpContextBinding" /> 类的新实例。</summary>
      <param name="securityMode">安全模式。</param>
      <param name="reliableSessionEnabled">若要启用可靠会话，则为 true；否则，为 false。</param>
    </member>
    <member name="M:System.ServiceModel.NetTcpContextBinding.#ctor(System.String)">
      <summary>使用指定的绑定配置初始化 <see cref="T:System.ServiceModel.NetTcpContextBinding" /> 类的新实例。</summary>
      <param name="configName">绑定配置的名称。</param>
    </member>
    <member name="P:System.ServiceModel.NetTcpContextBinding.ClientCallbackAddress">
      <summary>获取或设置客户端回调地址。</summary>
      <returns>客户端回调地址。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpContextBinding.ContextManagementEnabled">
      <summary>获取一个值，该值指定是否启用上下文管理。</summary>
      <returns>如果启用上下文管理，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpContextBinding.ContextProtectionLevel">
      <summary>获取或设置此绑定的上下文保护级别。</summary>
      <returns>绑定的保护级别。</returns>
    </member>
    <member name="M:System.ServiceModel.NetTcpContextBinding.CreateBindingElements">
      <summary>创建一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>包含已排序的绑定元素堆栈的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，这些绑定元素由 <see cref="T:System.ServiceModel.NetTcpContextBinding" /> 描述。</returns>
    </member>
    <member name="T:System.ServiceModel.NetTcpSecurity">
      <summary>指定用 <see cref="T:System.ServiceModel.NetTcpBinding" /> 配置的终结点所使用的传输级安全性和消息级安全性的类型。</summary>
    </member>
    <member name="M:System.ServiceModel.NetTcpSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NetTcpSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.NetTcpSecurity.Message">
      <summary>为用 <see cref="T:System.ServiceModel.NetTcpBinding" /> 配置的服务获取消息级安全性要求的类型。</summary>
      <returns>为终结点指示消息级安全性要求类型的 <see cref="T:System.ServiceModel.MessageSecurityOverTcp" />。</returns>
    </member>
    <member name="P:System.ServiceModel.NetTcpSecurity.Mode">
      <summary>获取或设置使用 <see cref="T:System.ServiceModel.NetTcpBinding" /> 配置的终结点是否使用消息级安全性和传输级安全性。</summary>
      <returns>指示终结点是使用消息级安全性还是传输级安全性的 <see cref="T:System.ServiceModel.SecurityMode" /> 的值。 默认值为 <see cref="F:System.ServiceModel.SecurityMode.Transport" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">未定义该值。</exception>
    </member>
    <member name="P:System.ServiceModel.NetTcpSecurity.Transport">
      <summary>为用 <see cref="T:System.ServiceModel.NetTcpBinding" /> 配置的终结点获取消息级安全性要求的类型。</summary>
      <returns>为终结点指示传输级安全性要求类型的 <see cref="T:System.ServiceModel.TcpTransportSecurity" />。</returns>
    </member>
    <member name="T:System.ServiceModel.NonDualMessageSecurityOverHttp">
      <summary>表示 wsHttpBinding 绑定的安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.NonDualMessageSecurityOverHttp" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext">
      <summary>获取或设置一个值，该值指示是否建立安全上下文令牌。</summary>
      <returns>如果已建立安全上下文令牌，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.OperationBehaviorAttribute">
      <summary>指定服务方法的本地执行行为。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationBehaviorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters">
      <summary>获取或设置是否自动释放参数。</summary>
      <returns>如果自动释放参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationBehaviorAttribute.Impersonation">
      <summary>获取或设置一个值，该值指示操作支持的调用方模拟级别。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ImpersonationOption" /> 值之一。 默认值为 <see cref="F:System.ServiceModel.ImpersonationOption.NotAllowed" />。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode">
      <summary>获取或设置一个值，该值指示在调用操作过程中回收服务对象的时间。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ReleaseInstanceMode" /> 值之一。 默认值为 <see cref="F:System.ServiceModel.ReleaseInstanceMode.None" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.ReleaseInstanceMode" /> 值之一。</exception>
    </member>
    <member name="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>实现 <see cref="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" /> 方法。</summary>
      <param name="description">为支持 <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> 属性而修改的操作说明。</param>
      <param name="parameters">为支持绑定行为而传递的绑定参数。</param>
    </member>
    <member name="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>实现客户端操作行为。</summary>
      <param name="description">为支持 <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> 属性而修改的操作说明。</param>
      <param name="proxy">用于插入此操作的自定义客户端修改的扩展访问点。</param>
    </member>
    <member name="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>实现服务操作行为。</summary>
      <param name="description">为支持 <see cref="T:System.ServiceModel.OperationBehaviorAttribute" /> 属性而修改的操作说明。</param>
      <param name="dispatch">用于插入此操作的自定义服务修改的扩展点。</param>
    </member>
    <member name="M:System.ServiceModel.OperationBehaviorAttribute.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>实现验证行为。</summary>
      <param name="description">要验证的操作说明。</param>
    </member>
    <member name="P:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete">
      <summary>获取或设置一个值，该值指示如果没有发生未经处理的异常，是否自动完成当前的事务范围。</summary>
      <returns>如果在成功执行操作后自动完成事务范围，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired">
      <summary>获取或设置一个值，该值指示方法在执行时是否需要事务范围。</summary>
      <returns>如果方法需要事务范围才能执行，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContext">
      <summary>提供对服务方法的执行上下文的访问权限。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationContext" /> 类的新实例，该类使用客户端应用程序中指定的 <see cref="T:System.ServiceModel.IContextChannel" />。</summary>
      <param name="channel">用于创建新客户端 <see cref="T:System.ServiceModel.OperationContext" /> 的 <see cref="T:System.ServiceModel.IContextChannel" />。</param>
      <exception cref="T:System.ArgumentNullException">通道为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Channel">
      <summary>获取与当前 <see cref="T:System.ServiceModel.OperationContext" /> 对象关联的通道。</summary>
      <returns>一个与当前 <see cref="T:System.ServiceModel.OperationContext" /> 关联的 <see cref="T:System.ServiceModel.IContextChannel" />。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.ClaimsPrincipal">
      <summary>获取与此操作关联的基于声明的主体。</summary>
      <returns>声明主体。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Current">
      <summary>获取或设置当前线程的执行上下文。</summary>
      <returns>表示当前方法的消息和执行上下文的 <see cref="T:System.ServiceModel.OperationContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.EndpointDispatcher">
      <summary>获取或设置要检查或修改的终结点的终结点调度程序。</summary>
      <returns>要检查或修改的终结点的终结点调度程序。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Extensions">
      <summary>从当前消息上下文中获取服务扩展集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationContext" /> 的扩展集合。</returns>
    </member>
    <member name="M:System.ServiceModel.OperationContext.GetCallbackChannel``1">
      <summary>获取调用当前操作的客户端实例的通道。</summary>
      <returns>一个客户端实例的通道，该客户端实例调用 <see cref="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" /> 属性中指定类型的操作。</returns>
      <typeparam name="T">用于回调到客户端的通道的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.OperationContext.HasSupportingTokens">
      <summary>获取一个值，该值指示传入消息是否具有支持令牌。</summary>
      <returns>如果传入消息具有支持令牌，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Host">
      <summary>获取当前服务对象的 <see cref="T:System.ServiceModel.ServiceHost" />。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ServiceHost" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageHeaders">
      <summary>获取 <see cref="T:System.ServiceModel.OperationContext" /> 的传入消息头。</summary>
      <returns>一个包含传入消息头的 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageProperties">
      <summary>获取 <see cref="T:System.ServiceModel.OperationContext" /> 中的传入消息的消息属性。</summary>
      <returns>一个包含传入消息的消息属性的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageVersion">
      <summary>获取 <see cref="T:System.ServiceModel.OperationContext" /> 的传入 SOAP 消息版本。</summary>
      <returns>传入消息的 SOAP 版本。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.InstanceContext">
      <summary>获取管理当前服务实例的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</summary>
      <returns>当前服务的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IsUserContext">
      <summary>此属性专供系统使用，不应由用户调用。</summary>
      <returns>true.</returns>
    </member>
    <member name="E:System.ServiceModel.OperationContext.OperationCompleted">
      <summary>操作完成时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders">
      <summary>获取活动 <see cref="T:System.ServiceModel.OperationContext" /> 的传出消息头。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 对象，包含活动 <see cref="T:System.ServiceModel.OperationContext" /> 的出站消息头。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageProperties">
      <summary>获取活动 <see cref="T:System.ServiceModel.OperationContext" /> 中的出站消息的消息属性。</summary>
      <returns>一个包含出站消息的消息属性的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.RequestContext">
      <summary>获取或设置此方法的 <see cref="T:System.ServiceModel.Channels.RequestContext" /> 实现。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.RequestContext" /> 实现，或者为 null（如果没有请求上下文）。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.ServiceSecurityContext">
      <summary>获取或设置将在其中执行此方法的 <see cref="T:System.ServiceModel.ServiceSecurityContext" />。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.SessionId">
      <summary>获取用于标识当前会话的 <see cref="T:System.String" />。</summary>
      <returns>会话标识符。</returns>
    </member>
    <member name="M:System.ServiceModel.OperationContext.SetTransactionComplete">
      <summary>提交当前正在执行的事务。</summary>
      <exception cref="T:System.InvalidOperationException">上下文中没有任何事务。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContext.SupportingTokens">
      <summary>获取一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>安全令牌集合。</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContextScope">
      <summary>创建一个块，其中 <see cref="T:System.ServiceModel.OperationContext" /> 对象在范围之内。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationContextScope" /> 类的新实例，该类使用指定的 <see cref="T:System.ServiceModel.IContextChannel" /> 创建新的 <see cref="T:System.ServiceModel.OperationContext" /> 的范围。</summary>
      <param name="channel">为新的 <see cref="T:System.ServiceModel.OperationContext" /> 创建范围时要使用的信道。</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationContextScope" /> 类的新实例，以为指定的 <see cref="T:System.ServiceModel.OperationContext" /> 对象创建范围。</summary>
      <param name="context">创建的范围中的活动 <see cref="T:System.ServiceModel.OperationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.Dispose">
      <summary>将原始 <see cref="T:System.ServiceModel.OperationContext" /> 还原为活动上下文并回收 <see cref="T:System.ServiceModel.OperationContextScope" /> 对象。</summary>
    </member>
    <member name="T:System.ServiceModel.OperationContractAttribute">
      <summary>指示方法定义一个操作，该操作是 Windows Communication Foundation (WCF) 应用程序中服务协定的一部分。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContractAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.OperationContractAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Action">
      <summary>获取或设置请求消息的 WS-Addressing 操作。</summary>
      <returns>生成 WS-Addressing Action 标头时要使用的操作。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.AsyncPattern">
      <summary>指示操作是使用服务协定中的 Begin&lt;methodName&gt; 和 End&lt;methodName&gt; 方法对异步实现的。</summary>
      <returns>如果 Begin&lt;methodName&gt; 方法与 End&lt;methodName&gt; 方法匹配，并且基础结构可将其视为服务接口上作为异步方法对实现的操作，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel">
      <summary>获取一个值，该值指示是否必须对此操作的消息进行加密和/或签名。</summary>
      <returns>如果 <see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> 属性设置为除 <see cref="F:System.Net.Security.ProtectionLevel.None" /> 以外的任何值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsInitiating">
      <summary>获取或设置一个值，该值指示方法是否实现可在服务器上启动会话（如果存在会话）的操作。</summary>
      <returns>如果允许操作启动服务器上的会话，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsOneWay">
      <summary>获取或设置一个值，该值指示操作是否返回答复消息。</summary>
      <returns>如果此方法收到请求消息，但未返回任何答复消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsTerminating">
      <summary>获取或设置一个值，该值指示服务操作在发送答复消息（如果存在）后，是否会导致服务器关闭会话。</summary>
      <returns>如果该操作会导致服务器关闭会话，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Name">
      <summary>获取或设置操作的名称。</summary>
      <returns>操作的名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel">
      <summary>获取或设置一个值，该值指定是否必须对操作的消息进行加密和/或签名。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.ReplyAction">
      <summary>获取或设置用于该操作答复消息的 SOAP 操作的值。</summary>
      <returns>用于答复消息的 SOAP 操作的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.OperationFormatStyle">
      <summary>表示 SOAP 样式，该样式确定如何设置服务的 WSDL 元数据格式。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Document">
      <summary>导致 WSDL 表示形式包含一个表示与操作交换的文档的元素。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Rpc">
      <summary>使消息的 WSDL 表示形式针对某个操作进行交换，并如同远程过程调用那样包含参数。</summary>
    </member>
    <member name="T:System.ServiceModel.OperationFormatUse">
      <summary>确定消息的格式。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatUse.Encoded">
      <summary>表明 WSDL 中的架构是根据 SOAP 1.1 第 5 节中的规则进行编码的抽象规范。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatUse.Literal">
      <summary>表明该消息是 WSDL 中的一个架构文本实例。</summary>
    </member>
    <member name="T:System.ServiceModel.OptionalReliableSession">
      <summary>当使用预定义的绑定之一（该绑定是可选的）时，提供对是否启用可靠会话的便捷访问。</summary>
    </member>
    <member name="M:System.ServiceModel.OptionalReliableSession.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.OptionalReliableSession" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.OptionalReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)">
      <summary>从可靠会话绑定元素中初始化 <see cref="T:System.ServiceModel.OptionalReliableSession" /> 类的新实例。</summary>
      <param name="reliableSessionBindingElement">
        <see cref="T:System.ServiceModel.Channels.ReliableSessionBindingElement" />，其属性值用于初始化可靠会话。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reliableSessionBindingElement" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.OptionalReliableSession.Enabled">
      <summary>获取或设置一个值，该值指示是否已启用可靠会话。</summary>
      <returns>如果已启用可靠对话，则为 true；否则为 false。 默认值取决于所使用的绑定。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerHopCountAttribute">
      <summary>指定 SOAP 消息头信息块的对等跃点计数成员。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerHopCountAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerHopCountAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerHopCountAttribute.Actor">
      <summary>获取指示此标头目标节点的 URI。</summary>
      <returns>
        <see cref="T:System.String" /> 值，包含标头值的目标操作者节点的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerHopCountAttribute.MustUnderstand">
      <summary>指定在 <see cref="P:System.ServiceModel.PeerHopCountAttribute.Actor" /> 角色中起作用的节点是否必须理解此标头。</summary>
      <returns>如果在 <see cref="P:System.ServiceModel.PeerHopCountAttribute.Actor" /> 角色中起作用的节点必须理解此标头，则为 True；否则为 False。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerHopCountAttribute.Name">
      <summary>指定对应于对等跃点计数成员的元素的名称。</summary>
      <returns>
        <see cref="T:System.String" /> 值，包含 SOAP 消息中对应于对等跃点计数的 XML 元素的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerHopCountAttribute.Namespace">
      <summary>获取对应于对等跃点计数成员的元素的命名空间。</summary>
      <returns>
        <see cref="T:System.String" /> 值，包含 SOAP 消息中对应于对等跃点计数的 XML 元素的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerHopCountAttribute.ProtectionLevel">
      <summary>获取对等跃点计数成员是否按原样传输，是否已签名或是否已签名和加密。</summary>
      <returns>表示安全保护级别的 <see cref="T:System.Net.Security.ProtectionLevel" /> 枚举值。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerHopCountAttribute.Relay">
      <summary>获取此对等跃点计数是否要中继至下游节点。</summary>
      <returns>如果对等跃点计数中继至下游节点，则为 True；否则为 False。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerMessageOrigination">
      <summary>指示对等通道消息的网络源。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerMessageOrigination.Local">
      <summary>从本地计算机上产生的消息。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerMessageOrigination.Remote">
      <summary>从远程计算机上产生的消息。</summary>
    </member>
    <member name="T:System.ServiceModel.PeerMessagePropagation">
      <summary>指示通过对等通道发送的消息的接收方。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerMessagePropagation.Local">
      <summary>此消息适用于本地对等节点。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerMessagePropagation.LocalAndRemote">
      <summary>此消息对于本地对等节点和对等网格中的远程对等节点都适用。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerMessagePropagation.None">
      <summary>消息的接收方未知或不可用。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerMessagePropagation.Remote">
      <summary>此消息适用于对等网格中的远程对等节点。</summary>
    </member>
    <member name="T:System.ServiceModel.PeerMessagePropagationFilter">
      <summary>定义对等通道消息筛选器的基类。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerMessagePropagationFilter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerMessagePropagationFilter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerMessagePropagationFilter.ShouldMessagePropagate(System.ServiceModel.Channels.Message,System.ServiceModel.PeerMessageOrigination)">
      <summary>返回是否应传播对等通道上接收到的消息，如果传播，则指定消息的目标。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.PeerMessagePropagation" /> 枚举值，该值指示消息的目标（本地、远程、两者兼有或根本不传播）。</returns>
      <param name="message">要计算用于传播的消息。</param>
      <param name="origination">一个 <see cref="T:System.ServiceModel.PeerMessageOrigination" /> 枚举值，该值指定计算中的消息的源（本地或远程）。</param>
    </member>
    <member name="T:System.ServiceModel.PeerNode">
      <summary>定义参与特定对等网格的应用程序所使用的对等节点实例。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerNode.IsOnline">
      <summary>获取一个值，该值指示对等节点是否联机以及是否能将消息发送给对等网格中的相邻节点。</summary>
      <returns>如果对等节点联机，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerNode.MessagePropagationFilter">
      <summary>获取和设置自定义筛选器，以用于通过对等通道接收的消息。</summary>
      <returns>包含自定义消息筛选器的 <see cref="T:System.ServiceModel.PeerMessagePropagationFilter" />。</returns>
      <exception cref="T:System.InvalidOperationException">未打开任何侦听通道。</exception>
    </member>
    <member name="E:System.ServiceModel.PeerNode.Offline">
      <summary>当对等节点在对等网格中进入脱机状态时发出信号。</summary>
    </member>
    <member name="E:System.ServiceModel.PeerNode.Online">
      <summary>当对等节点在对等网格中进入联机状态时发出信号。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerNode.Port">
      <summary>获取对等节点所侦听的网络端口。</summary>
      <returns>指定对等节点所侦听的网络端口的 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.InvalidOperationException">未打开任何侦听通道。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerNode.RefreshConnection">
      <summary>刷新与对等网格的连接。</summary>
      <exception cref="T:System.InvalidOperationException">未打开任何侦听通道。</exception>
      <exception cref="T:System.TimeOutException">刷新操作超时。</exception>
      <exception cref="T:System.ServiceModel.CommunicationException">尝试刷新时发生网络错误。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">尝试刷新时连接中止。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">尝试刷新时连接出错。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerNode.ToString">
      <summary>提供对等节点的字符串表示形式。</summary>
      <returns>如果设置了网格 ID，则为包含对等节点网格 ID 的 <see cref="T:System.String" /> 值；否则将返回类型。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerNodeAddress">
      <summary>指定对等节点的包含 <see cref="T:System.ServiceModel.EndpointAddress" /> 的类型以及可选的多宿主 IP 地址集合。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerNodeAddress.#ctor(System.ServiceModel.EndpointAddress,System.Collections.ObjectModel.ReadOnlyCollection{System.Net.IPAddress})">
      <summary>使用提供的 <see cref="T:System.ServiceModel.EndpointAddress" /> 以及也是为本地计算机配置的多宿主 IP 地址集合初始化 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 类的新实例。</summary>
      <param name="endpointAddress">一个 <see cref="T:System.ServiceModel.EndpointAddress" />，表示网格中对等节点的地址。</param>
      <param name="ipAddresses">一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含为本地计算机配置的 IP 地址，且可用于连接至对等节点。</param>
      <exception cref="T:System.ArgumentNullException">提供给构造函数的参数之一将设置为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.PeerNodeAddress.EndpointAddress">
      <summary>获取与此 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 关联的 <see cref="T:System.ServiceModel.EndpointAddress" />。</summary>
      <returns>与此 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 关联的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerNodeAddress.IPAddresses">
      <summary>获取此 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 的多宿主 IP 地址集合。</summary>
      <returns>与此 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 关联的多宿主 IP 地址集合。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolver">
      <summary>指定一个基类型，用于定义对等网格 ID 的注册协定以及将对等网格 ID 解析为参与网格的节点终结点地址的协定。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolver.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolver" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerResolver.CanShareReferrals">
      <summary>获取对等名解析程序是否可以共享引用。</summary>
      <returns>如果为 True，对等名解析程序就可以共享引用；如果为 False，则不能共享。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)">
      <summary>使用新提供的终结点地址和设置初始化当前对等解析程序实例。</summary>
      <param name="address">包含此对等解析程序实例的新终结点地址的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="binding">为此对等解析程序指定新网络绑定的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="credentials">为此对等解析程序指定新客户端凭据的 <see cref="T:System.ServiceModel.Description.ClientCredentials" />。</param>
      <param name="referralPolicy">为此对等解析程序指定新引用策略的 <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)">
      <summary>为指定的对等网格注册 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</summary>
      <returns>表示注册 ID 的 <see cref="T:System.Object" />。 此注册 ID 对象将传递给 <see cref="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> 和 <see cref="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" /> 方法。</returns>
      <param name="meshId">要在其中注册对等节点的对等网格的 ID。</param>
      <param name="nodeAddress">要向对等网格注册的 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</param>
      <param name="timeout">停止尝试向对等网格注册之前，等待成功注册的时间。 如果尝试失败，对等网格上将引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)">
      <summary>将提供的网格 ID 解析为零或更多参与对等网格的节点的终结点地址。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含表示参与对等网格的节点的 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 对象。</returns>
      <param name="meshId">要在其中获取表示参与节点的 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 对象的对等网格的网格 ID。</param>
      <param name="maxAddresses">要返回的终结点地址的数量。</param>
      <param name="timeout">停止在对等网格中尝试解析终结点地址之前，等待成功解析的时间。 如果尝试失败，对等网格上将引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)">
      <summary>移除对等网格中某个节点的注册项。</summary>
      <param name="registrationId">由先前对 <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> 的调用所获得的节点的注册 ID。</param>
      <param name="timeout">从对等网格中成功移除注册所需等待的时间。 如果尝试失败，对等网格上将引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)">
      <summary>为在特定对等网格中注册的节点更新 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</summary>
      <param name="registrationId">节点的注册 ID 令牌，通过先前对 <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> 的调用获得</param>
      <param name="updatedNodeAddress">已更新的终结点地址（和其他多宿主 IP 地址）。</param>
      <param name="timeout">停止在对等网格中尝试更新节点的注册之前，等待成功更新的时间。 如果尝试失败，对等网格上将引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="T:System.ServiceModel.PeerSecuritySettings">
      <summary>包含与对等通道相关的安全设置，包括使用的身份验证类型和用于消息传输的安全性。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerSecuritySettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerSecuritySettings" /> 类的新默认实例。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerSecuritySettings.Mode">
      <summary>获取和设置指示对等通道安全模式的值。</summary>
      <returns>指示对等通道安全模式的 <see cref="T:System.ServiceModel.SecurityMode" /> 枚举值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定值不是 <see cref="T:System.ServiceModel.SecurityMode" /> 中的枚举值</exception>
    </member>
    <member name="M:System.ServiceModel.PeerSecuritySettings.ShouldSerializeMode">
      <summary>获取一个值，该值指示是否应序列化安全模式信息。</summary>
      <returns>返回一个 <see cref="T:System.Boolean" />，如果应序列化绑定的安全模式，则该布尔值为 true；如果不应序列化绑定的安全模式，则该布尔值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerSecuritySettings.ShouldSerializeTransport">
      <summary>获取一个值，该值指示是否应序列化传输信息。</summary>
      <returns>返回一个 <see cref="T:System.Boolean" />，如果应序列化传输信息，则该布尔值为 true；如果不应序列化传输信息，则该布尔值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerSecuritySettings.Transport">
      <summary>获取值，该值指示用于通过对等通道传输的消息的传输安全设置。</summary>
      <returns>包含对等通道的传输安全设置的 <see cref="T:System.ServiceModel.PeerTransportSecuritySettings" />。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerTransportCredentialType">
      <summary>指定用于对对等通道传输进行身份验证的凭据集类型。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerTransportCredentialType.Certificate">
      <summary>对等通道传输的身份验证需要 X509 证书。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerTransportCredentialType.Password">
      <summary>对等通道传输的身份验证需要正确的密码。</summary>
    </member>
    <member name="T:System.ServiceModel.PeerTransportSecuritySettings">
      <summary>包含对等通道传输的安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerTransportSecuritySettings.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.PeerTransportSecuritySettings" /> 类型的实例。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerTransportSecuritySettings.CredentialType">
      <summary>获取和设置用于对对等通道传输进行身份验证的凭据类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.PeerTransportCredentialType" /> 枚举值，该值指定提供用于身份验证的凭据类型。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">凭据类型不是有效的 <see cref="T:System.ServiceModel.PeerTransportCredentialType" /> 枚举值。</exception>
    </member>
    <member name="T:System.ServiceModel.PoisonMessageException">
      <summary>当认为消息是病毒消息时引发的一个异常。 如果多次尝试发送某个消息都失败，则说明该消息已中毒。</summary>
    </member>
    <member name="M:System.ServiceModel.PoisonMessageException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PoisonMessageException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PoisonMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ServiceModel.PoisonMessageException" /> 类的新实例。</summary>
      <param name="info">保存有关异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.ServiceModel.PoisonMessageException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.PoisonMessageException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.ServiceModel.PoisonMessageException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致当前异常的内部异常的引用来初始化 <see cref="T:System.ServiceModel.PoisonMessageException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.ServiceModel.ProtocolException">
      <summary>当由于数据传输协议不匹配而导致无法与远程方进行通信时，将在客户端引发此异常。</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ProtocolException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.ProtocolException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ServiceModel.ProtocolException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.ProtocolException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.QueuedDeliveryRequirementsMode">
      <summary>
        <see cref="T:System.ServiceModel.QueuedDeliveryRequirementsMode" /> 枚举指定排队传送要求。</summary>
    </member>
    <member name="F:System.ServiceModel.QueuedDeliveryRequirementsMode.Allowed">
      <summary>允许排队传送。</summary>
    </member>
    <member name="F:System.ServiceModel.QueuedDeliveryRequirementsMode.NotAllowed">
      <summary>不允许排队传送。</summary>
    </member>
    <member name="F:System.ServiceModel.QueuedDeliveryRequirementsMode.Required">
      <summary>要求排队传送。</summary>
    </member>
    <member name="T:System.ServiceModel.QueueTransferProtocol">
      <summary>指示要在队列管理器之间传输消息时使用的协议。</summary>
    </member>
    <member name="F:System.ServiceModel.QueueTransferProtocol.Native">
      <summary>使用本机 MSMQ 协议。</summary>
    </member>
    <member name="F:System.ServiceModel.QueueTransferProtocol.Srmp">
      <summary>使用 SOAP 可靠消息传送协议 (SRMP)。</summary>
    </member>
    <member name="F:System.ServiceModel.QueueTransferProtocol.SrmpSecure">
      <summary>使用 SOAP 可靠消息传送协议安全 (SRMPS) 传输。</summary>
    </member>
    <member name="T:System.ServiceModel.QuotaExceededException">
      <summary>当超过消息配额时引发的一个异常。</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.QuotaExceededException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定流的源和目标的数据以及序列化异常所需的信息来初始化 <see cref="T:System.ServiceModel.QuotaExceededException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ServiceModel.QuotaExceededException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.QuotaExceededException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ReceiveContextEnabledAttribute">
      <summary>此特性可应用于服务操作以启用接收上下文行为。</summary>
    </member>
    <member name="M:System.ServiceModel.ReceiveContextEnabledAttribute.#ctor">
      <summary>初始化 <see cref="M:System.ServiceModel.ReceiveContextEnabledAttribute.#ctor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ReceiveContextEnabledAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>配置绑定元素以支持接收上下文行为。</summary>
      <param name="operationDescription">操作说明。</param>
      <param name="bindingParameters">绑定参数。</param>
    </member>
    <member name="M:System.ServiceModel.ReceiveContextEnabledAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>实现 <see cref="M:System.ServiceModel.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" /> 方法。</summary>
      <param name="operationDescription">操作说明。</param>
      <param name="clientOperation">客户端运行时对象。</param>
    </member>
    <member name="M:System.ServiceModel.ReceiveContextEnabledAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>实现 <see cref="M:System.ServiceModel.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" /> 方法。</summary>
      <param name="operationDescription">操作说明。</param>
      <param name="dispatchOperation">要调度到的操作。</param>
    </member>
    <member name="P:System.ServiceModel.ReceiveContextEnabledAttribute.ManualControl">
      <summary>获取或设置一个值，该值指示是否通过服务方法显式发出针对此操作的接收确认的信号。</summary>
      <returns>如果该显式发出针对此操作的接收确认的信号，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ReceiveContextEnabledAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>实现 <see cref="M:System.ServiceModel.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" /> 方法。</summary>
      <param name="operationDescription">操作说明。</param>
    </member>
    <member name="T:System.ServiceModel.ReceiveErrorHandling">
      <summary>一个指定病毒消息处理的枚举。</summary>
    </member>
    <member name="F:System.ServiceModel.ReceiveErrorHandling.Drop">
      <summary>此选项可删除病毒消息。 消息始终没有传递到应用程序。 如果此时消息的 TTL 已过期，则此消息就会出现发送端的死信队列中。 如果不是这种情况，则该消息将不会显示在任何位置。 此选项指示用户实际并不在意该消息是否丢失。</summary>
    </member>
    <member name="F:System.ServiceModel.ReceiveErrorHandling.Fault">
      <summary>此选项会向导致 ServiceHost 出现错误的侦听器发送一个错误。 必须利用其他一些外部机制将该消息从应用程序中移除，应用程序才能继续处理队列中的消息。</summary>
    </member>
    <member name="F:System.ServiceModel.ReceiveErrorHandling.Move">
      <summary>选择此选项会将病毒消息移动到病毒消息队列，以供以后由病毒消息处理应用程序进行处理。</summary>
    </member>
    <member name="F:System.ServiceModel.ReceiveErrorHandling.Reject">
      <summary>选择此选项会指示消息队列 (MSMQ) 将否定确认发送回发送队列管理器，以说明应用程序无法接收此消息。 该消息会放入发送队列管理器的死信队列中。</summary>
    </member>
    <member name="T:System.ServiceModel.ReleaseInstanceMode">
      <summary>指定系统在操作调用进程中回收服务对象的时间。</summary>
    </member>
    <member name="F:System.ServiceModel.ReleaseInstanceMode.AfterCall">
      <summary>在完成操作后回收对象。</summary>
    </member>
    <member name="F:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall">
      <summary>在调用操作前和完成操作后回收对象。</summary>
    </member>
    <member name="F:System.ServiceModel.ReleaseInstanceMode.BeforeCall">
      <summary>在调用操作前回收对象。</summary>
    </member>
    <member name="F:System.ServiceModel.ReleaseInstanceMode.None">
      <summary>根据 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> 值回收对象。</summary>
    </member>
    <member name="T:System.ServiceModel.ReliableMessagingVersion">
      <summary>包含 WS-ReliableMessaging 协议的支持版本的设置。 这是一个抽象类。</summary>
    </member>
    <member name="P:System.ServiceModel.ReliableMessagingVersion.Default">
      <summary>返回 WS-ReliableMessaging 协议的默认版本。</summary>
      <returns>从 <see cref="T:System.ServiceModel.ReliableMessagingVersion" /> 派生的实例，表示 WS-ReliableMessaging 协议的默认版本。 默认版本为 WS-ReliableMessagingFebruary2005。</returns>
    </member>
    <member name="P:System.ServiceModel.ReliableMessagingVersion.WSReliableMessaging11">
      <summary>获取 WS-ReliableMessaging 协议的 1.1 版。</summary>
      <returns>从 <see cref="T:System.ServiceModel.ReliableMessagingVersion" /> 派生的实例，表示 WS-ReliableMessaging1.1 版本。</returns>
    </member>
    <member name="P:System.ServiceModel.ReliableMessagingVersion.WSReliableMessagingFebruary2005">
      <summary>获取 WS-ReliableMessaging 协议的 2005 年 2 月版本。</summary>
      <returns>从 <see cref="T:System.ServiceModel.ReliableMessagingVersion" /> 派生的实例，表示 WS-ReliableMessagingFebruary2005 版本。</returns>
    </member>
    <member name="T:System.ServiceModel.ReliableSession">
      <summary>提供对可靠会话绑定元素属性的便捷访问，这些属性是在使用系统提供的绑定之一时提供的。</summary>
    </member>
    <member name="M:System.ServiceModel.ReliableSession.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ReliableSession" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)">
      <summary>从可靠会话绑定元素中初始化 <see cref="T:System.ServiceModel.ReliableSession" /> 类的新实例。</summary>
      <param name="reliableSessionBindingElement">
        <see cref="T:System.ServiceModel.Channels.ReliableSessionBindingElement" />，其属性值用于初始化可靠会话。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reliableSessionBindingElement" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.ReliableSession.InactivityTimeout">
      <summary>获取或设置服务在关闭之前保持非活动状态的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定服务在关闭之前保持非活动状态的时间间隔。 默认值为 10 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.ReliableSession.Ordered">
      <summary>获取或设置一个值，该值指示消息传递是否必须保持与消息发送一致的顺序。</summary>
      <returns>如果消息必须按照发送时的顺序传递，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.RsaEndpointIdentity">
      <summary>指定服务终结点的 RSA 标识。</summary>
    </member>
    <member name="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)">
      <summary>使用声明初始化 <see cref="T:System.ServiceModel.RsaEndpointIdentity" /> 类的新实例。</summary>
      <param name="identity">
        <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 的声明类型不是 <see cref="P:System.IdentityModel.Claims.ClaimTypes.Rsa" />。</exception>
    </member>
    <member name="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>初始化 <see cref="T:System.ServiceModel.RsaEndpointIdentity" /> 类的新实例。</summary>
      <param name="certificate">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="certificate" /> 公钥为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法访问证书的公钥。</exception>
    </member>
    <member name="M:System.ServiceModel.RsaEndpointIdentity.#ctor(System.String)">
      <summary>初始化公钥中的 <see cref="T:System.ServiceModel.RsaEndpointIdentity" /> 类的新实例。</summary>
      <param name="publicKey">公钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publicKey" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.SecurityMode">
      <summary>确定绑定的安全设置。</summary>
    </member>
    <member name="F:System.ServiceModel.SecurityMode.Message">
      <summary>使用 SOAP 消息安全提供安全性。</summary>
    </member>
    <member name="F:System.ServiceModel.SecurityMode.None">
      <summary>禁用安全性。</summary>
    </member>
    <member name="F:System.ServiceModel.SecurityMode.Transport">
      <summary>使用安全传输（例如 HTTPS）提供安全性。</summary>
    </member>
    <member name="F:System.ServiceModel.SecurityMode.TransportWithMessageCredential">
      <summary>安全传输（例如 HTTPS）会提供完整性、保密性和身份验证，而 SOAP 消息安全会提供客户端身份验证。</summary>
    </member>
    <member name="T:System.ServiceModel.ServerTooBusyException">
      <summary>服务器太忙而无法接受消息时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ServerTooBusyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定流的源和目标的数据以及序列化异常所需的信息来初始化 <see cref="T:System.ServiceModel.ServerTooBusyException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.ServerTooBusyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.ServerTooBusyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceActivationException">
      <summary>无法激活服务时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceActivationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.ServiceActivationException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.ServiceActivationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)">
      <summary>使用提供的指定错误消息和内部异常初始化 <see cref="T:System.ServiceModel.ServiceActivationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceAuthenticationManager">
      <summary>表示服务身份验证管理器。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceAuthenticationManager.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.ServiceAuthenticationManager" /> 的一个新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceAuthenticationManager.Authenticate(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.Uri,System.ServiceModel.Channels.Message@)">
      <summary>对指定的消息进行身份验证。</summary>
      <returns>返回 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
      <param name="authPolicy">授权策略。</param>
      <param name="listenUri">接收消息时的 URI。</param>
      <param name="message">要进行身份验证的消息。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceAuthorizationManager">
      <summary>提供对服务操作的授权访问检查。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceAuthorizationManager.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceAuthorizationManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
      <summary>检查给定操作上下文的授权。</summary>
      <returns>如果授予访问权限，则为 true；否则为 false。 默认值为 true。</returns>
      <param name="operationContext">
        <see cref="T:System.ServiceModel.OperationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
      <summary>访问所需的消息时，检查给定操作上下文的授权。</summary>
      <returns>如果授予访问权限，则为 true；否则为 false。 默认值为 true。</returns>
      <param name="operationContext">
        <see cref="T:System.ServiceModel.OperationContext" />。</param>
      <param name="message">要接收检查以确定授权的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
      <summary>基于默认的策略评估，检查给定操作上下文和可选消息的授权。</summary>
      <returns>如果授予访问权限，则为 true；否则为 false。 默认值为 true。</returns>
      <param name="operationContext">当前授权请求的 <see cref="T:System.ServiceModel.OperationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)">
      <summary>获取参与策略评估的策略集。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 类型的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
      <param name="operationContext">当前授权请求的 <see cref="T:System.ServiceModel.OperationContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceBehaviorAttribute">
      <summary>指定服务协定实现的内部执行行为。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceBehaviorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.AddressFilterMode">
      <summary>获取或设置调度程序用于将传入消息路由到正确终结点的 <see cref="T:System.ServiceModel.AddressFilterMode" />。</summary>
      <returns>调度程序用于将传入消息路由到正确终结点的 <see cref="T:System.ServiceModel.AddressFilterMode" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.AddressFilterMode" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.AutomaticSessionShutdown">
      <summary>指定在客户端关闭输出会话时是否自动关闭会话。</summary>
      <returns>如果客户端关闭输出会话时服务自动关闭会话，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode">
      <summary>获取或设置一个值，该值指示服务是支持单线程、多线程还是支持可重入调用。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ConcurrencyMode" /> 值之一，默认值为 <see cref="F:System.ServiceModel.ConcurrencyMode.Single" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.ConcurrencyMode" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName">
      <summary>获取或设置用于在应用程序配置文件中定位服务元素的值。</summary>
      <returns>要在配置文件中查找的值。 默认值为此完全限定类型名称，不包含程序集信息。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.EnsureOrderedDispatch">
      <summary>获取或设置指示是否确保服务有序调度的值。</summary>
      <returns>如果确保服务进行排序的调度，则为 True；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.GetWellKnownSingleton">
      <summary>检索实现此服务的对象，该对象被用作服务的单一实例；如果没有单一实例，则为 null。</summary>
      <returns>服务的一个实现。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.IgnoreExtensionDataObject">
      <summary>获取或设置一个值，该值指定是否将未知序列化数据发送到网络上。</summary>
      <returns>如果永不发送未知序列化数据，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults">
      <summary>获取或设置一个值，该值指定是否要将常规未处理执行异常转换为 <see cref="T:System.ServiceModel.ExceptionDetail" /> 类型的 <see cref="T:System.ServiceModel.FaultException`1" />，并将其作为错误消息发送。 仅在开发阶段将其设置为 true 以便对服务进行故障排除。</summary>
      <returns>如果未经处理的异常将作为 SOAP 错误返回，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode">
      <summary>获取或设置指示新服务对象何时创建的值。</summary>
      <returns>
        <see cref="T:System.ServiceModel.InstanceContextMode" /> 值之一；默认值为 <see cref="F:System.ServiceModel.InstanceContextMode.PerSession" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.InstanceContextMode" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.MaxItemsInObjectGraph">
      <summary>获取或设置序列化对象中允许的最大项数。</summary>
      <returns>对象中允许的最大项数。 默认值为 65536 字节 (64KB)。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.Name">
      <summary>获取或设置 Web 服务描述语言 (WSDL) 中服务元素中的 name 特性值。</summary>
      <returns>导出时 &lt;wsdl:service&gt; 元素中名称属性的值。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.Namespace">
      <summary>获取或设置 Web 服务描述语言 (WSDL) 中服务的目标命名空间值。</summary>
      <returns>包含 &lt;wsdl:service&gt; 元素的 &lt;wsdl:definitions&gt; 元素的 targetNamespace 属性值。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete">
      <summary>获取或设置一个值，该值指定在完成当前事务后是否释放服务对象。</summary>
      <returns>如果释放服务对象，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.SetWellKnownSingleton(System.Object)">
      <summary>指定实现此服务的对象，该对象被用作服务的单一实例。</summary>
      <param name="value">服务的单一实例。</param>
      <exception cref="T:System.ArgumentNullException">所设置的值为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeConfigurationName">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeReleaseServiceInstanceOnTransactionComplete">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionAutoCompleteOnSessionClose">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionIsolationLevel">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionIsolationLevel" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionIsolationLevel" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.ShouldSerializeTransactionTimeout">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionTimeout" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionTimeout" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>将自定义数据对象传递到支持此行为属性的绑定。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务主机。</param>
      <param name="endpoints">服务终结点。</param>
      <param name="parameters">绑定支持该行为所需的数据对象。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>自定义服务运行时，以支持行为属性。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务主机。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceBehaviorAttribute.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>确认服务说明和服务主机是否支持此行为。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务主机。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose">
      <summary>获取或设置一个值，该值指定当前会话正常关闭时是否完成挂起事务。</summary>
      <returns>如果当前会话正常关闭时完成挂起事务，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionIsolationLevel">
      <summary>指定服务中新创建的事务和客户端传入的流事务的事务隔离级别。</summary>
      <returns>一个 <see cref="T:System.Transactions.IsolationLevel" /> 值，指定事务的隔离级别。 默认值为 <see cref="F:System.Transactions.IsolationLevel.Unspecified" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.Transactions.IsolationLevel" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionTimeout">
      <summary>获取或设置事务必须在此期间完成的时间段。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 对象，表示一个时间段，事务必须在此期间完成，否则会自动中止。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.UseSynchronizationContext">
      <summary>获取或设置一个值，该值指定是否使用当前同步上下文来选择执行的线程。</summary>
      <returns>如果对服务的所有调用都必须在 <see cref="T:System.Threading.SynchronizationContext" /> 指定的线程上运行，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceBehaviorAttribute.ValidateMustUnderstand">
      <summary>获取或设置一个值，该值指定是由系统还是由应用程序强制执行 SOAP MustUnderstand 标头处理。</summary>
      <returns>如果由系统执行 SOAP 标头 MustUnderstand 处理，则为 true，否则为 false，这表示由应用程序执行此处理。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.ServiceConfiguration">
      <summary>表示服务的可配置属性。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>将指定的服务终结点添加到配置服务中。</summary>
      <param name="endpoint">服务终结点。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <summary>使用指定的协定、绑定和终结点地址将服务终结点添加到配置服务中。</summary>
      <returns>添加到配置服务服务的终点。</returns>
      <param name="contractType">所添加终结点的协定的类型。</param>
      <param name="binding">添加的终结点的绑定。</param>
      <param name="address">所添加终结点的地址。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <summary>使用指定的协定、绑定和终结点地址以及包含服务所侦听地址的 URI，将服务终结点添加到配置服务中。</summary>
      <returns>添加到配置服务服务的终点。</returns>
      <param name="contractType">终结点实现的协定的类型。</param>
      <param name="binding">添加的终结点的绑定。</param>
      <param name="address">所添加终结点的地址。</param>
      <param name="listenUri">包含终结点在其上侦听传入消息的地址的 URI 。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)">
      <summary>使用指定的约定、绑定和包含终结点地址的 URI 将服务终结点添加到配置服务中。</summary>
      <returns>添加到配置服务服务的终点。</returns>
      <param name="contractType">所添加终结点的协定的类型。</param>
      <param name="binding">添加的终结点的绑定。</param>
      <param name="address">包含所添加终结点地址的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <summary>使用指定的协定、绑定和包含终结点与所侦听地址的 URI，将服务终结点添加到配置服务。</summary>
      <returns>添加到配置服务服务的终点。</returns>
      <param name="contractType">终结点实现的协定的类型。</param>
      <param name="binding">添加的终结点的绑定。</param>
      <param name="address">包含所添加终结点地址的 URI。</param>
      <param name="listenUri">包含终结点在其上侦听传入消息的地址的 URI。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.Authentication">
      <summary>获取服务身份验证行为。</summary>
      <returns>服务身份验证行为。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.Authorization">
      <summary>获取服务的授权行为。</summary>
      <returns>服务的授权行为。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.BaseAddresses">
      <summary>获取服务所使用的基址。</summary>
      <returns>服务的基址。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.CloseTimeout">
      <summary>获取或设置允许服务关闭的时间间隔。</summary>
      <returns>指定允许服务关闭的时间间隔的时间跨度。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.Credentials">
      <summary>获取服务凭据。</summary>
      <returns>该服务凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.Description">
      <summary>获取服务说明。</summary>
      <returns>服务说明。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.EnableProtocol(System.ServiceModel.Channels.Binding)">
      <summary>启用服务终结点的绑定协议。</summary>
      <returns>服务终结点的集合。</returns>
      <param name="protocol">绑定协议。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.IdentityConfiguration">
      <summary>获取或设置服务的标识配置。</summary>
      <returns>服务的标识配置。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration">
      <summary>从当前的服务配置加载配置。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.LoadFromConfiguration(System.Configuration.Configuration)">
      <summary>从当前的服务配置加载此配置。</summary>
      <param name="configuration">配置。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.OpenTimeout">
      <summary>获取或设置允许服务打开的时间间隔。</summary>
      <returns>指定允许服务打开的时间间隔的时间跨度。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceConfiguration.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)">
      <summary>将指定终结点的终结点地址设置为指定的地址。</summary>
      <param name="endpoint">服务终结点。</param>
      <param name="relativeAddress">终结点地址。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceConfiguration.UseIdentityConfiguration">
      <summary>获取或设置一个值，该值指示该服务是否使用标识配置。</summary>
      <returns>如果服务使用标识配置，则为 True；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.ServiceContractAttribute">
      <summary>指示接口或类在 Windows Communication Foundation (WCF) 应用程序中定义服务协定。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceContractAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
      <summary>获取或设置当协定为双工协定时的回调协定类型。</summary>
      <returns>指示回调协定的 <see cref="T:System.Type" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
      <summary>获取或设置用于查找应用程序配置文件中的服务的名称。</summary>
      <returns>用于查找应用程序配置文件中的服务元素的名称。 默认值是服务实现类的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel">
      <summary>获取一个值，该值指示是否对成员分配保护级别。</summary>
      <returns>如果 <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /> 属性不是 F:System.Net.Security.ProtectionLevel.None，则为 <see cref="true" />；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Name">
      <summary>获取或设置 Web 服务描述语言 (WSDL) 中的 &lt;portType&gt; 元素的名称。</summary>
      <returns>默认值为应用了 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 的类或接口的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Namespace">
      <summary>获取或设置 Web 服务描述语言 (WSDL) 中的 &lt;portType&gt; 元素的命名空间。</summary>
      <returns>&lt;portType&gt; 元素的 WSDL 命名空间。 默认值为“http://tempuri.org”。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel">
      <summary>指定协定的绑定是否必须支持 <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /> 属性的值。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.SessionMode">
      <summary>获取或设置是否允许、不允许或要求会话。</summary>
      <returns>指示是否允许、不允许或要求会话的 <see cref="T:System.ServiceModel.SessionMode" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.SessionMode" /> 值之一。</exception>
    </member>
    <member name="T:System.ServiceModel.ServiceHost">
      <summary>提供服务的主机。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceHost" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])">
      <summary>使用服务的实例及其指定的基址初始化 <see cref="T:System.ServiceModel.ServiceHost" /> 类的新实例。</summary>
      <param name="singletonInstance">承载的服务的实例。</param>
      <param name="baseAddresses">
        <see cref="T:System.Uri" /> 类型的 <see cref="T:System.Array" />，包含承载服务的基址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="singletonInstance" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])">
      <summary>使用服务的类型及其指定的基址初始化 <see cref="T:System.ServiceModel.ServiceHost" /> 类的新实例。</summary>
      <param name="serviceType">承载服务的类型。</param>
      <param name="baseAddresses">
        <see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <summary>使用指定的协定、绑定和终结点地址将服务终结点添加到承载服务中。</summary>
      <returns>添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <param name="implementedContract">所添加终结点的协定的 <see cref="T:System.Type" />。</param>
      <param name="binding">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">所添加终结点的地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> 或 <paramref name="binding" /> 或 <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <summary>使用指定的协定、绑定和终结点地址以及服务在其上侦听的 URI 将服务终结点添加到承载服务中。</summary>
      <returns>添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <param name="implementedContract">所添加终结点的协定的 <see cref="T:System.Type" />。</param>
      <param name="binding">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">服务的终结点地址。</param>
      <param name="listenUri">服务终结点可在其上侦听的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> 或 <paramref name="binding" /> 或 <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)">
      <summary>使用指定的协定、绑定和包含终结点地址的 URI 将服务终结点添加到承载服务中。</summary>
      <returns>添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <param name="implementedContract">所添加终结点的协定的 <see cref="T:System.Type" />。</param>
      <param name="binding">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">包含所添加终结点地址的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> 或 <paramref name="binding" /> 或 <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <summary>使用指定的协定、绑定、包含终结点地址的 URI 以及服务在其上侦听的 URI 将服务终结点添加到承载服务中。</summary>
      <returns>添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <param name="implementedContract">所添加终结点的协定的 <see cref="T:System.Type" />。</param>
      <param name="binding">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">包含所添加终结点地址的 <see cref="T:System.Uri" />。</param>
      <param name="listenUri">服务终结点可在其上侦听的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> 或 <paramref name="binding" /> 或 <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">尚未初始化协定或无法找到协定密钥。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.ApplyConfiguration">
      <summary>从配置文件加载服务说明，并将其应用于正在构造的运行库。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
      <summary>创建承载服务的说明。</summary>
      <returns>承载服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</returns>
      <param name="implementedContracts">具有密钥对类型（<see cref="T:System.String" />、<see cref="T:System.ServiceModel.Description.ContractDescription" />）的 <see cref="T:System.Collections.Generic.IDictionary`2" />，包含已实现的承载服务的键控协定。</param>
      <exception cref="T:System.InvalidOperationException">承载服务的类型为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)">
      <summary>基于承载服务的实例和指定的基址初始化该承载服务的说明。</summary>
      <param name="singletonInstance">承载的服务的实例。</param>
      <param name="baseAddresses">包含承载服务基址的 <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="singletonInstance" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)">
      <summary>基于承载服务的类型和指定的基址初始化该承载服务的说明。</summary>
      <param name="serviceType">承载服务的 <see cref="T:System.Type" />。</param>
      <param name="baseAddresses">包含承载服务基址的 <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHost.OnClosed">
      <summary>当服务主机关闭时，释放所承载的可处置服务。</summary>
    </member>
    <member name="P:System.ServiceModel.ServiceHost.SingletonInstance">
      <summary>获取承载服务的单一实例。</summary>
      <returns>承载服务对象。</returns>
    </member>
    <member name="T:System.ServiceModel.ServiceHostBase">
      <summary>扩展 <see cref="T:System.ServiceModel.ServiceHostBase" /> 类，以实现可公开自定义编程模型的主机。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceHostBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)">
      <summary>将基址添加到服务主机。</summary>
      <param name="baseAddress">
        <see cref="T:System.Uri" />，包含当前主机上所承载服务的基址。</param>
      <exception cref="T:System.InvalidOperationException">无法调用 <paramref name="baseAddress" />。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints">
      <summary>使用默认绑定为在服务主机中找到的每个协定中的所有基址添加服务终结点。</summary>
      <returns>默认终结点的只读集合。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>将指定的服务终结点添加到承载服务中。</summary>
      <param name="endpoint">服务终结点。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Endpoint" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">主机未处于已创建或打开状态，或者所承载服务没有 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Address" />、<paramref name="Binding, " /> 或 <paramref name="Contract" /> 属性为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)">
      <summary>使用指定的协定、绑定和终结点地址将服务终结点添加到承载服务中。</summary>
      <returns>添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <param name="implementedContract">终结点实现的协定。</param>
      <param name="binding">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">所添加终结点的地址。 这可以是绝对 URI，也可以是相对 URI。 如果是相对的 URI，则 <see cref="T:System.ServiceModel.ServiceHost" /> 的其中一个基址（取决于绑定协议）会用作终结点的基址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> 或 <paramref name="binding" /> 或 <paramref name="address" /> 或为 null。</exception>
      <exception cref="T:System.InvalidOperationException">主机未处于 <see cref="F:System.ServiceModel.CommunicationState.Created" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，或者所承载服务没有 <see cref="T:System.ServiceModel.Description.ServiceDescription" />，因此无法添加终结点，或绑定缺少绑定方案的传输。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <summary>使用指定的协定、绑定和终结点地址以及包含服务所侦听地址的 URI，将服务终结点添加到承载服务中。</summary>
      <returns>添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <param name="implementedContract">终结点实现的协定。</param>
      <param name="binding">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">所添加终结点的地址。 此地址可以是相对的 URI，也可以是绝对的 URI。 如果是相对的 URI，则 <see cref="T:System.ServiceModel.ServiceHost" /> 的其中一个基址（取决于绑定协议）会用作终结点的基址。</param>
      <param name="listenUri">
        <see cref="T:System.Uri" />，包含终结点在其上侦听传入消息的地址。 该 URI 可以是相对的，也可以是绝对的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> 或 <paramref name="binding" /> 或 <paramref name="address" /> 或为 null。</exception>
      <exception cref="T:System.InvalidOperationException">主机未处于 <see cref="F:System.ServiceModel.CommunicationState.Created" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，或者所承载服务没有 <see cref="T:System.ServiceModel.Description.ServiceDescription" />，因此无法添加终结点。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)">
      <summary>使用指定的协定、绑定和包含终结点地址的 URI 将服务终结点添加到承载服务中。</summary>
      <returns>添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <param name="implementedContract">终结点实现的协定。</param>
      <param name="binding">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">包含所添加终结点地址的 <see cref="T:System.Uri" />。 这可以是绝对 URI，也可以是相对 URI。 如果是相对的 URI，则 <see cref="T:System.ServiceModel.ServiceHost" /> 的其中一个基址（取决于绑定协议）会用作终结点的基址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> 或 <paramref name="binding" /> 或 <paramref name="address" /> 或为 null。</exception>
      <exception cref="T:System.InvalidOperationException">主机未处于 <see cref="F:System.ServiceModel.CommunicationState.Created" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，或者所承载服务没有 <see cref="T:System.ServiceModel.Description.ServiceDescription" />，因此无法添加终结点。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <summary>使用指定的协定、绑定和包含终结点与所侦听地址的 URI，将服务终结点添加到承载服务。</summary>
      <returns>添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。 该 URI 可以是绝对的，也可以是相对的。</returns>
      <param name="implementedContract">终结点实现的协定。</param>
      <param name="binding">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">包含所添加终结点地址的 <see cref="T:System.Uri" />。 如果是相对的 URI，则 <see cref="T:System.ServiceModel.ServiceHost" /> 的其中一个基址（取决于绑定协议）会用作终结点的基址。</param>
      <param name="listenUri">
        <see cref="T:System.Uri" />，包含终结点在其上侦听传入消息的地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> 或 <paramref name="binding" /> 或 <paramref name="address" /> 或为 null。</exception>
      <exception cref="T:System.InvalidOperationException">主机未处于 <see cref="F:System.ServiceModel.CommunicationState.Created" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，或者所承载服务没有 <see cref="T:System.ServiceModel.Description.ServiceDescription" />，因此无法添加终结点。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.ApplyConfiguration">
      <summary>从配置文件加载服务说明信息，并将其应用于正在构造的运行库。</summary>
      <exception cref="T:System.InvalidOperationException">承载服务的说明为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.Authentication">
      <summary>获取服务身份验证行为。</summary>
      <returns>服务身份验证行为。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.Authorization">
      <summary>获取所承载服务的授权行为。</summary>
      <returns>所承载服务的 <see cref="T:System.ServiceModel.Description.ServiceAuthorizationBehavior" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.BaseAddresses">
      <summary>获取所承载服务使用的基址。</summary>
      <returns>
        <see cref="T:System.Uri" /> 类型的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，其中包含所承载服务的基址。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.ChannelDispatchers">
      <summary>获取服务主机所使用的通道调度程序的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcherCollection" />，包含服务主机所使用的通道调度程序的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.CloseTimeout">
      <summary>获取或设置允许服务主机关闭的时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定允许服务主机关闭的时间间隔。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或大于 <see cref="F:System.Int32.MaxValue" />（2,147,483,647 或以十六进制表示的 0X7FFFFFFF，以毫秒为单位）。</exception>
      <exception cref="T:System.InvalidOperationException">主机处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">主机已处于 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">主机处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
      <summary>在派生类中实现时，创建所承载服务的说明。</summary>
      <returns>所承载服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</returns>
      <param name="implementedContracts">包含服务的 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 对象的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.Credentials">
      <summary>获取所承载服务的凭据。</summary>
      <returns>所承载服务的 <see cref="T:System.ServiceModel.Description.ServiceCredentials" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.DefaultCloseTimeout">
      <summary>获取允许服务主机关闭的默认时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定允许服务主机关闭的默认时间间隔。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.DefaultOpenTimeout">
      <summary>获取允许服务主机打开的默认时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定允许服务主机打开的默认时间间隔。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.Description">
      <summary>获取所承载服务的说明。</summary>
      <returns>所承载服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.Extensions">
      <summary>获取当前指定的服务主机的扩展。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.ServiceHostBase" /> 的 <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.ImplementedContracts">
      <summary>检索由所承载服务实现的协定。</summary>
      <returns>包含服务的 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 对象的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)">
      <summary>以指定的增量增加对消息到所承载服务的流入率的限制。</summary>
      <returns>添加增量后的新限制。</returns>
      <param name="incrementBy">用以增加流入控制限制的消息数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)">
      <summary>使用协定和服务说明创建并初始化服务主机。</summary>
      <param name="baseAddresses">包含所承载服务基址的 <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.InitializeRuntime">
      <summary>初始化服务主机的运行库。</summary>
      <exception cref="T:System.InvalidOperationException">承载服务的说明为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)">
      <summary>从承载服务的配置文件加载服务元素。</summary>
      <param name="serviceSection">从配置中加载的 <see cref="T:System.ServiceModel.Configuration.ServiceElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceSection" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">承载服务的说明为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.ManualFlowControlLimit">
      <summary>获取或设置由所承载服务接收的消息的流控制限制。</summary>
      <returns>由所承载服务接收的消息的流控制限制。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnAbort">
      <summary>中止服务。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始在关闭服务主机时调用的异步操作。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始在打开服务主机时调用的异步操作。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与打开操作异步相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)">
      <summary>关闭所承载服务，包括它们的通道调度程序以及相关的实例上下文和侦听器。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnClosed">
      <summary>释放服务主机占用的资源。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)">
      <summary>完成在关闭服务主机时调用的异步操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)">
      <summary>完成在打开服务主机时调用的异步操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)">
      <summary>打开通道调度程序。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.OnOpened">
      <summary>获取所承载服务的服务凭据、服务身份验证和授权行为。</summary>
    </member>
    <member name="P:System.ServiceModel.ServiceHostBase.OpenTimeout">
      <summary>获取或设置允许服务主机打开的时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定允许服务主机打开的时间间隔。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或大于 <see cref="F:System.Int32.MaxValue" />（2,147,483,647 或以十六进制表示的 0X7FFFFFFF）。</exception>
      <exception cref="T:System.InvalidOperationException">主机处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">主机已处于 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">主机处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters">
      <summary>释放所承载服务的服务与通道调度程序性能计数器。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)">
      <summary>将指定终结点的终结点地址设置为指定的地址。</summary>
      <param name="endpoint">服务终结点。</param>
      <param name="relativeAddress">终结点地址。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose">
      <summary>关闭服务主机。</summary>
    </member>
    <member name="E:System.ServiceModel.ServiceHostBase.UnknownMessageReceived">
      <summary>接收未知消息时发生。</summary>
    </member>
    <member name="T:System.ServiceModel.ServiceKnownTypeAttribute">
      <summary>指定序列化或反序列化时服务要使用的已知类型。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> 类的新实例，并指定返回已知类型的方法的名称。</summary>
      <param name="methodName">返回已知类型的方法的名称。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
      <summary>使用返回已知类型的方法的名称，以及包含返回已知类型的方法的类型来初始化 <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> 类的新实例。</summary>
      <param name="methodName">返回已知类型的方法的名称。</param>
      <param name="declaringType">可以在其对象图中使用已知类型的类型。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
      <summary>使用指定的已知类型初始化 <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> 类的新实例。</summary>
      <param name="type">指定一个可用于由服务定义的参数或返回值的已知类型。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
      <summary>获取包含返回已知类型的方法的类型。</summary>
      <returns>包含返回已知类型的方法的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
      <summary>获取返回已知类型集合的方法的名称。</summary>
      <returns>返回已知类型的方法的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
      <summary>可包含在对象图中的已知类型。</summary>
      <returns>已知类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ServiceSecurityContext">
      <summary>表示远程方的安全上下文。 在客户端，表示服务标识；而在服务端，则表示客户端标识。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>使用策略对象集合初始化 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的新实例。</summary>
      <param name="authorizationPolicies">一个包含授权策略的类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)">
      <summary>使用指定的授权参数初始化 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的新实例。</summary>
      <param name="authorizationContext">一个包含授权信息的 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>使用指定的授权参数和策略集合初始化 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的新实例。</summary>
      <param name="authorizationContext">一个包含授权设置的 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。</param>
      <param name="authorizationPolicies">一个包含授权策略的类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceSecurityContext.Anonymous">
      <summary>返回一个 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的实例，该实例包含空的声明集合、标识和通常用于表示匿名方的其他上下文数据。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 的空实例。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceSecurityContext.AuthorizationContext">
      <summary>获取此类的实例的授权信息。<see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 包含一个可供应用程序询问和检索远程方信息的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 集合。</summary>
      <returns>一个包含授权设置的 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies">
      <summary>获取与此类的实例关联的策略集合。</summary>
      <returns>一个包含策略的类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceSecurityContext.Current">
      <summary>获取当前 <see cref="T:System.ServiceModel.ServiceSecurityContext" />。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.ServiceSecurityContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceSecurityContext.IsAnonymous">
      <summary>获取一个值，该值指示当前客户端是否已向服务提供凭据。</summary>
      <returns>如果客户端已提供凭据，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity">
      <summary>获取与当前设置关联的主标识。</summary>
      <returns>与当前设置关联的 <see cref="T:System.Security.Principal.IIdentity" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceSecurityContext.WindowsIdentity">
      <summary>获取当前设置的 Windows 标识。</summary>
      <returns>一个表示 Windows 域用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</returns>
    </member>
    <member name="T:System.ServiceModel.SessionMode">
      <summary>指定可用于指示支持协定需要或支持的可靠会话的值。</summary>
    </member>
    <member name="F:System.ServiceModel.SessionMode.Allowed">
      <summary>指定当传入绑定支持会话时，协定也支持会话。</summary>
    </member>
    <member name="F:System.ServiceModel.SessionMode.NotAllowed">
      <summary>指定协定永不支持启动会话的绑定。</summary>
    </member>
    <member name="F:System.ServiceModel.SessionMode.Required">
      <summary>指定协定需要会话绑定。 如果绑定并未配置为支持会话，则将引发异常。</summary>
    </member>
    <member name="T:System.ServiceModel.SpnEndpointIdentity">
      <summary>表示当绑定使用 Kerberos 时标识的服务主体名称 (SPN)。</summary>
    </member>
    <member name="M:System.ServiceModel.SpnEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)">
      <summary>使用指定的标识声明初始化 <see cref="T:System.ServiceModel.SpnEndpointIdentity" /> 的新实例。</summary>
      <param name="identity">此服务主体名称 (SPN) 的标识。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 的声明类型不是 <see cref="P:System.IdentityModel.Claims.ClaimTypes.Spn" />。</exception>
    </member>
    <member name="M:System.ServiceModel.SpnEndpointIdentity.#ctor(System.String)">
      <summary>使用指定的服务主体名称 (SPN) 初始化 <see cref="T:System.ServiceModel.SpnEndpointIdentity" /> 的新实例。</summary>
      <param name="spnName">SPN。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spnName" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.SpnEndpointIdentity.SpnLookupTime">
      <summary>指定查找服务主体名称 (SPN) 的最大时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />。 默认值为 1 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值设置为小于 0。</exception>
    </member>
    <member name="T:System.ServiceModel.TcpClientCredentialType">
      <summary>枚举 TCP 客户端的有效凭据类型。</summary>
    </member>
    <member name="F:System.ServiceModel.TcpClientCredentialType.Certificate">
      <summary>指定使用证书进行客户端身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.TcpClientCredentialType.None">
      <summary>指定匿名身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.TcpClientCredentialType.Windows">
      <summary>指定使用 Windows 进行客户端身份验证。</summary>
    </member>
    <member name="T:System.ServiceModel.TcpTransportSecurity">
      <summary>提供控制 TCP 传输的身份验证参数和保护级别的属性。</summary>
    </member>
    <member name="M:System.ServiceModel.TcpTransportSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.TcpTransportSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.TcpTransportSecurity.ClientCredentialType">
      <summary>获取或设置用于身份验证的客户端凭据类型。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.TcpClientCredentialType" />。</returns>
    </member>
    <member name="P:System.ServiceModel.TcpTransportSecurity.ExtendedProtectionPolicy">
      <summary>获取或设置 TCP 传输的扩展保护策略。</summary>
      <returns>TCP 传输的扩展保护策略。</returns>
    </member>
    <member name="P:System.ServiceModel.TcpTransportSecurity.ProtectionLevel">
      <summary>获取或设置 TCP 流的 <see cref="T:System.Net.Security.ProtectionLevel" />。</summary>
      <returns>返回 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.TcpTransportSecurity.ShouldSerializeExtendedProtectionPolicy">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.TcpTransportSecurity.ExtendedProtectionPolicy" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.TcpTransportSecurity.ExtendedProtectionPolicy" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.TransactionFlowAttribute">
      <summary>指定服务操作是否接受来自客户端的传入事务。</summary>
    </member>
    <member name="M:System.ServiceModel.TransactionFlowAttribute.#ctor(System.ServiceModel.TransactionFlowOption)">
      <summary>初始化 <see cref="T:System.ServiceModel.TransactionFlowAttribute" /> 类的新实例。</summary>
      <param name="transactions">
        <see cref="T:System.ServiceModel.TransactionFlowOption" />。</param>
    </member>
    <member name="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>向绑定上下文中添加额外的参数（设置），以支持此操作的行为。 不能继承此方法。</summary>
      <param name="description">此特性为其添加额外功能的操作说明。</param>
      <param name="parameters">绑定上下文中的参数对象集合。</param>
    </member>
    <member name="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>将属性功能附加到此属性功能标记的方法的 ProxyOperation 对象。 不能继承此方法。</summary>
      <param name="description">此属性将功能附加到的操作。</param>
      <param name="proxy">表示当前操作的 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>将属性功能附加到此属性功能标记的方法的 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> 对象。 不能继承此方法。</summary>
      <param name="description">此操作的说明。</param>
      <param name="dispatch">此操作的 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.TransactionFlowAttribute.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>验证操作是否能够支持此行为。 不能继承此方法。</summary>
      <param name="description">要验证的操作。</param>
    </member>
    <member name="P:System.ServiceModel.TransactionFlowAttribute.Transactions">
      <summary>获取一个值，该值指示是否支持传入事务。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TransactionFlowOption" />，指示是否支持传入事务。</returns>
    </member>
    <member name="T:System.ServiceModel.TransactionFlowOption">
      <summary>一个枚举，与 <see cref="T:System.ServiceModel.TransactionFlowAttribute" /> 一起使用以指定服务操作的事务流策略。</summary>
    </member>
    <member name="F:System.ServiceModel.TransactionFlowOption.Allowed">
      <summary>事务可以成为流。</summary>
    </member>
    <member name="F:System.ServiceModel.TransactionFlowOption.Mandatory">
      <summary>事务必须成为流。</summary>
    </member>
    <member name="F:System.ServiceModel.TransactionFlowOption.NotAllowed">
      <summary>事务不应成为流。 这是默认值。</summary>
    </member>
    <member name="T:System.ServiceModel.TransactionProtocol">
      <summary>指定在流动事务中使用的事务处理协议。</summary>
    </member>
    <member name="M:System.ServiceModel.TransactionProtocol.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.TransactionProtocol" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.TransactionProtocol.Default">
      <summary>获取事务处理协议的默认值。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.TransactionProtocol" /> 值，指定用于对事务进行流处理的默认事务处理协议。</returns>
    </member>
    <member name="P:System.ServiceModel.TransactionProtocol.OleTransactions">
      <summary>获取 OleTransactions 事务处理协议值。</summary>
      <returns>一个 <see cref="P:System.ServiceModel.TransactionProtocol.OleTransactions" /> 值。</returns>
    </member>
    <member name="P:System.ServiceModel.TransactionProtocol.WSAtomicTransaction11">
      <summary>获取 WSAtomicTransaction11 事务处理协议值。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TransactionProtocol" /> 值。</returns>
    </member>
    <member name="P:System.ServiceModel.TransactionProtocol.WSAtomicTransactionOctober2004">
      <summary>获取 WSAtomicTransactionOctober2004 事务处理协议值。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TransactionProtocol" /> 值。</returns>
    </member>
    <member name="T:System.ServiceModel.TransferMode">
      <summary>指示通道是使用流处理模式还是缓冲模式来传输请求和响应消息。</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.Buffered">
      <summary>对请求和响应消息进行缓冲处理。</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.Streamed">
      <summary>对请求和响应消息进行流式处理。</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.StreamedRequest">
      <summary>对请求消息进行流式处理，对响应消息进行缓冲处理。</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.StreamedResponse">
      <summary>对请求消息进行缓冲处理，对响应消息进行流式处理。</summary>
    </member>
    <member name="T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <summary>包含通过通道接收但不能与任何回调操作或挂起请求相关联的消息。</summary>
    </member>
    <member name="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message">
      <summary>获取导致该事件的未知消息。</summary>
      <returns>导致该事件的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="T:System.ServiceModel.UpnEndpointIdentity">
      <summary>表示当绑定使用 SSPINegotiate 身份验证模式时所使用的标识的用户主体名称 (UPN)。</summary>
    </member>
    <member name="M:System.ServiceModel.UpnEndpointIdentity.#ctor(System.IdentityModel.Claims.Claim)">
      <summary>使用声明初始化 <see cref="T:System.ServiceModel.UpnEndpointIdentity" /> 类的新实例。</summary>
      <param name="identity">
        <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 的声明类型不是 <see cref="P:System.IdentityModel.Claims.ClaimTypes.Upn" />。</exception>
    </member>
    <member name="M:System.ServiceModel.UpnEndpointIdentity.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.UpnEndpointIdentity" /> 类的新实例。</summary>
      <param name="upnName">UPN 名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="upnName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="upnName" /> 的声明类型不是 <see cref="P:System.IdentityModel.Claims.ClaimTypes.Upn" />。</exception>
    </member>
    <member name="T:System.ServiceModel.UriSchemeKeyedCollection">
      <summary>提供包含 URI 的线程安全集合，这些 URI 由其传输方案名称进行键控。</summary>
    </member>
    <member name="M:System.ServiceModel.UriSchemeKeyedCollection.#ctor(System.Uri[])">
      <summary>初始化 <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" /> 类的新实例。</summary>
      <param name="addresses">用来初始化集合的 <see cref="T:System.Uri" /> 对象的可变长度 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.UriSchemeKeyedCollection.GetKeyForItem(System.Uri)">
      <summary>从集合中获取指定的 URI 的密钥。</summary>
      <returns>集合中指定的 URI 的密钥。</returns>
      <param name="item">其密钥正受到检索的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.ServiceModel.UriSchemeKeyedCollection.InsertItem(System.Int32,System.Uri)">
      <summary>将 URI 插入到集合中的指定位置。</summary>
      <param name="index">从零开始的索引，它指定项在集合中的插入位置。</param>
      <param name="item">要插入到集合中的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="item" /> URI 不是一个绝对 URI。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> URI 已经包含一个已在集合中的方案名称。</exception>
    </member>
    <member name="M:System.ServiceModel.UriSchemeKeyedCollection.SetItem(System.Int32,System.Uri)">
      <summary>用新的 URI 替换位于集合指定位置的 URI。</summary>
      <param name="index">从零开始的索引，它指定集合中 URI 的插入位置。</param>
      <param name="item">要置于集合中的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="item" /> URI 不是一个绝对 URI。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> URI 已经包含一个已在集合中的方案名称。</exception>
    </member>
    <member name="T:System.ServiceModel.WS2007FederationHttpBinding">
      <summary>一个安全且可互操作的绑定，它派生自 <see cref="T:System.ServiceModel.WS2007HttpBinding" /> 并支持联合安全性。</summary>
    </member>
    <member name="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WS2007FederationHttpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode)">
      <summary>通过绑定所使用的指定安全类型初始化 <see cref="T:System.ServiceModel.WS2007FederationHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.WSFederationHttpSecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode,System.Boolean)">
      <summary>通过绑定所使用的指定安全类型以及一个指示是否启用可靠会话的值来初始化 <see cref="T:System.ServiceModel.WS2007FederationHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.WSFederationHttpSecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
      <param name="reliableSessionEnabled">如果已启用可靠会话，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.WS2007FederationHttpBinding.#ctor(System.String)">
      <summary>使用由配置名称指定的绑定初始化 <see cref="T:System.ServiceModel.WS2007FederationHttpBinding" /> 类的新实例。</summary>
      <param name="configName">
        <see cref="T:System.ServiceModel.Configuration.WS2007HttpBindingElement" /> 的绑定配置名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到名为 <paramref name="configurationName" /> 的绑定元素。</exception>
    </member>
    <member name="M:System.ServiceModel.WS2007FederationHttpBinding.CreateMessageSecurity">
      <summary>使用此实例提供的设置创建 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</summary>
      <returns>一个使用此实例提供的设置的 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</returns>
    </member>
    <member name="T:System.ServiceModel.WS2007HttpBinding">
      <summary>表示派生自 <see cref="T:System.ServiceModel.WSHttpBinding" /> 的可互操作绑定，并对 <see cref="P:System.ServiceModel.WSHttpBinding.Security" />、<see cref="T:System.ServiceModel.ReliableSession" /> 和 <see cref="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" /> 绑定元素的更新版本提供支持。</summary>
    </member>
    <member name="M:System.ServiceModel.WS2007HttpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WS2007HttpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.ServiceModel.SecurityMode)">
      <summary>通过绑定所使用的指定安全类型初始化 <see cref="T:System.ServiceModel.WS2007HttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.SecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <summary>通过绑定所使用的指定安全类型以及一个指示是否启用可靠会话的值来初始化 <see cref="T:System.ServiceModel.WS2007HttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.SecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
      <param name="reliableSessionEnabled">如果已启用可靠会话，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.WS2007HttpBinding.#ctor(System.String)">
      <summary>使用由配置名称指定的绑定初始化 <see cref="T:System.ServiceModel.WS2007HttpBinding" /> 类的新实例。</summary>
      <param name="configName">
        <see cref="T:System.ServiceModel.Configuration.WS2007HttpBindingElement" /> 的绑定配置名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到名为 <paramref name="configName" /> 的绑定元素。</exception>
    </member>
    <member name="M:System.ServiceModel.WS2007HttpBinding.CreateMessageSecurity">
      <summary>返回来自于当前绑定的安全绑定元素。</summary>
      <returns>来自于当前绑定的 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</returns>
    </member>
    <member name="T:System.ServiceModel.WSDualHttpBinding">
      <summary>一个安全且可互操作的绑定，可用于双工服务协定，允许服务和客户端发送和接收消息。</summary>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WSDualHttpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)">
      <summary>通过绑定所使用的指定安全类型初始化 <see cref="T:System.ServiceModel.WSDualHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.WSDualHttpSecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpBinding.#ctor(System.String)">
      <summary>使用由配置名称指定的绑定初始化 <see cref="T:System.ServiceModel.WSDualHttpBinding" /> 类的新实例。</summary>
      <param name="configName">
        <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" /> 的绑定配置名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到名为 <paramref name="configurationName" /> 的绑定元素。</exception>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal">
      <summary>获取或设置一个值，该值指示是否对本地地址不使用代理服务器。</summary>
      <returns>如果对本地地址不使用代理服务器，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.ClientBaseAddress">
      <summary>获取或设置客户端的基址。</summary>
      <returns>为客户端基址的 <see cref="T:System.Uri" />。 默认值为 null。</returns>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpBinding.CreateBindingElements">
      <summary>返回一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>一个包含 <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" /> 和 <see cref="T:System.ServiceModel.Channels.ReliableSessionBindingElement" />（由于 <see cref="T:System.ServiceModel.WSDualHttpBinding" /> 要求可靠对话）的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.EnvelopeVersion">
      <summary>获取此绑定处理的消息将要使用的 SOAP 版本。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 的值。 该值必须始终为 SOAP 1.2。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，表示在匹配过程中忽略主机名。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize">
      <summary>获取或设置可为消息缓冲区管理器（该管理器在采用此绑定配置的终结点接收消息）分配的最大内存量（以字节为单位）。</summary>
      <returns>配置了此绑定的终结点所使用的缓冲池的最大大小（以字节为单位）。 默认值为 524288 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize">
      <summary>获取或设置配置了此绑定配置的通道上可以接收的消息的最大大小（以字节为单位）。</summary>
      <returns>绑定可处理的最大消息大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.MessageEncoding">
      <summary>获取或设置一个值，该值指示是使用 MTOM 还是文本/XML 对 SOAP 消息进行编码。</summary>
      <returns>
        <see cref="T:System.ServiceModel.WSMessageEncoding" /> 的值，指示是使用 MTOM 还是文本/XML 对 SOAP 消息进行编码。 默认值为 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.ProxyAddress">
      <summary>获取或设置 HTTP 代理的 URI 地址。</summary>
      <returns>一个充当 HTTP 代理地址的 <see cref="T:System.Uri" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.ReliableSession">
      <summary>获取一个对象，当使用系统提供的一个绑定时，该对象可提供对可用的可靠会话绑定元素属性的便捷访问。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ReliableSession" />，当使用系统提供的一个绑定时，可提供对可用的可靠会话绑定元素属性的便捷访问。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.Scheme">
      <summary>获取用此绑定配置的通道和侦听器的 URI 传输方案。</summary>
      <returns>传输方案：“http”。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.Security">
      <summary>获取一个对象，该对象指定与此绑定一起使用的安全设置。</summary>
      <returns>
        <see cref="T:System.ServiceModel.WSDualHttpSecurity" />，指定与此绑定一起使用的安全设置。 <see cref="T:System.ServiceModel.WSDualHttpSecurityMode" /> 的默认值为 <see cref="F:System.ServiceModel.WSDualHttpSecurityMode.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSDualHttpBinding.ReaderQuotas" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSDualHttpBinding.ReaderQuotas" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSDualHttpBinding.ReliableSession" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSDualHttpBinding.ReliableSession" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSDualHttpBinding.Security" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSDualHttpBinding.Security" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSDualHttpBinding.TextEncoding" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSDualHttpBinding.TextEncoding" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>获取一个值，该值指示是同步处理传入请求还是异步处理传入请求。</summary>
      <returns>如果同步处理请求，则为 true；如果异步处理请求，则为 false。 返回的值始终为 false，以异步处理请求。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.TextEncoding">
      <summary>获取或设置用于消息文本的字符编码。</summary>
      <returns>用于指示所使用的字符编码的 <see cref="T:System.Text.Encoding" />。 默认值为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.TransactionFlow">
      <summary>获取或设置一个值，该值指示此绑定是否应支持流动 WS-Transactions。</summary>
      <returns>如果支持事务的流动，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy">
      <summary>获取或设置一个值，该值指示是否应使用系统的自动配置 HTTP 代理（如果可用）。</summary>
      <returns>如果应使用系统的自动配置 HTTP 代理（如果可用），则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.WSDualHttpSecurity">
      <summary>指定 <see cref="T:System.ServiceModel.WsDualHttpBinding" /> 的安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WSDualHttpSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpSecurity.Message">
      <summary>获取 <see cref="T:System.ServiceModel.WsDualHttpBinding" /> 的消息级安全性属性。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.MessageSecurityOverHttp" /> 值。 默认值包括：<see cref="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" /> 为 <see cref="F:System.ServiceModel.MessageCredentialType.Windows" />，<see cref="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" /> 为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />，以及 <see cref="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential" /> 为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.WSDualHttpSecurity.Mode">
      <summary>获取或设置父级 <see cref="T:System.ServiceModel.WSDualHttpBinding" /> 的安全模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.WSDualHttpSecurityMode" /> 枚举中的一个值。 默认值为 <see cref="F:System.ServiceModel.WSDualHttpSecurityMode.Message" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是有效的 <see cref="T:System.ServiceModel.WSDualHttpSecurityMode" />。</exception>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpSecurity.ShouldSerializeMessage">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSDualHttpSecurity.Message" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSDualHttpSecurity.Message" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSDualHttpSecurity.ShouldSerializeMode">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSDualHttpSecurity.Mode" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSDualHttpSecurity.Mode" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.WSDualHttpSecurityMode">
      <summary>为 <see cref="T:System.ServiceModel.WsDualHttpBinding" /> 指定不同的安全模式。</summary>
    </member>
    <member name="F:System.ServiceModel.WSDualHttpSecurityMode.Message">
      <summary>使用 SOAP 消息级安全性，并且 <see cref="P:System.ServiceModel.WsDualHttpSecurity.Message" /> 属性中的设置将有效。</summary>
    </member>
    <member name="F:System.ServiceModel.WSDualHttpSecurityMode.None">
      <summary>未使用任何安全性。</summary>
    </member>
    <member name="T:System.ServiceModel.WSFederationHttpBinding">
      <summary>支持联合安全的可互操作的安全绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WSFederationHttpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode)">
      <summary>通过绑定所使用的指定安全类型初始化 <see cref="T:System.ServiceModel.WSFederationHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.WSFederationHttpSecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.ServiceModel.WSFederationHttpSecurityMode,System.Boolean)">
      <summary>通过绑定所使用的指定安全类型以及一个指示是否启用可靠会话的值来初始化 <see cref="T:System.ServiceModel.WSFederationHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.WSFederationHttpSecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
      <param name="reliableSessionEnabled">如果已启用可靠会话，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpBinding.#ctor(System.String)">
      <summary>使用由配置名称指定的绑定初始化 <see cref="T:System.ServiceModel.WSFederationHttpBinding" /> 类的新实例。</summary>
      <param name="configName">
        <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" /> 的绑定配置名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到名为 <paramref name="configurationName" /> 的绑定元素。</exception>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpBinding.CreateBindingElements">
      <summary>为绑定创建一个绑定元素集合。</summary>
      <returns>组成绑定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpBinding.CreateMessageSecurity">
      <summary>创建一个已启用可靠会话的 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</summary>
      <returns>已启用可靠会话的 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpBinding.GetTransport">
      <summary>返回来自于当前绑定的传输绑定元素。</summary>
      <returns>来自于当前绑定的 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeAt">
      <summary>获取或设置隐私声明所在的 URI。</summary>
      <returns>隐私声明所在的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSFederationHttpBinding.PrivacyNoticeVersion">
      <summary>获取或设置绑定的隐私声明版本号。</summary>
      <returns>隐私声明的版本号。</returns>
    </member>
    <member name="P:System.ServiceModel.WSFederationHttpBinding.Security">
      <summary>获取或设置用于此绑定的安全类型。</summary>
      <returns>指定此绑定所使用的安全模式的 <see cref="T:System.ServiceModel.WSFederationHttpSecurity" />。 此绑定的 <see cref="T:System.ServiceModel.WSFederationHttpSecurityMode" /> 默认值为 <see cref="F:System.ServiceModel.WSFederationHttpSecurityMode.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpBinding.ShouldSerializeSecurity">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSFederationHttpBinding.Security" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSFederationHttpBinding.Security" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.WSFederationHttpSecurity">
      <summary>指定 <see cref="T:System.ServiceModel.WSFederationHttpBinding" /> 的安全设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WSFederationHttpSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.WSFederationHttpSecurity.Message">
      <summary>为 <see cref="T:System.ServiceModel.WSFederationHttpBinding" /> 指示消息安全设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FederatedMessageSecurityOverHttp" /> 值。</returns>
    </member>
    <member name="P:System.ServiceModel.WSFederationHttpSecurity.Mode">
      <summary>获取或设置要应用的安全类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.WSFederationHttpSecurityMode" />。 默认值为 <see cref="F:System.ServiceModel.WSFederationHttpSecurityMode.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpSecurity.ShouldSerializeMessage">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSFederationHttpSecurity.Message" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSFederationHttpSecurity.Message" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSFederationHttpSecurity.ShouldSerializeMode">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSFederationHttpSecurity.Mode" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSFederationHttpSecurity.Mode" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.WSFederationHttpSecurityMode">
      <summary>为 <see cref="T:System.ServiceModel.WsFederationHttpBinding" /> 指定不同的安全模式。</summary>
    </member>
    <member name="F:System.ServiceModel.WSFederationHttpSecurityMode.Message">
      <summary>通过使用 SOAP 消息安全，可以提供完整性、保密性、服务器身份验证和客户端身份验证。 默认情况下，将对正文进行加密和签名。 此服务必须使用证书进行配置。 客户端根据由安全令牌服务颁发给客户端的令牌进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.WSFederationHttpSecurityMode.None">
      <summary>SOAP 消息在传输过程中并不安全。 未联系到任何安全令牌服务。 此模式相当于将 wsHttpBinding 绑定与 SecurityMode.None 一起使用。</summary>
    </member>
    <member name="F:System.ServiceModel.WSFederationHttpSecurityMode.TransportWithMessageCredential">
      <summary>完整性、保密性和服务器身份验证均由 HTTPS 提供。 此服务必须使用证书进行配置。 客户端身份验证采用 SOAP 消息安全方式提供，并根据由安全令牌服务颁发给客户端的令牌进行。</summary>
    </member>
    <member name="T:System.ServiceModel.WSHttpBinding">
      <summary>表示一个可互操作的绑定，该绑定支持分布式事务和安全、可靠的会话。</summary>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WSHttpBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode)">
      <summary>通过绑定所使用的指定安全类型初始化 <see cref="T:System.ServiceModel.WSHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.SecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <summary>通过绑定所使用的指定安全类型以及一个指示是否启用可靠会话的值来初始化 <see cref="T:System.ServiceModel.WSHttpBinding" /> 类的新实例。</summary>
      <param name="securityMode">
        <see cref="T:System.ServiceModel.SecurityMode" /> 的值，该值指定在 SOAP 消息和客户端中使用的安全类型。</param>
      <param name="reliableSessionEnabled">如果已启用可靠会话，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.#ctor(System.String)">
      <summary>使用由配置名称指定的绑定初始化 <see cref="T:System.ServiceModel.WSHttpBinding" /> 类的新实例。</summary>
      <param name="configName">
        <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" /> 的绑定配置名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到名为 <paramref name="configName" /> 的绑定元素。</exception>
    </member>
    <member name="P:System.ServiceModel.WSHttpBinding.AllowCookies">
      <summary>获取或设置一个无论 WCF 客户端是否将自动存储并通过单个网页服务重新发送任何 cookie 的值。</summary>
      <returns>True 如果需要自动 cookie 操作；否则，false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在客户端上生成通道工厂堆栈，此通道工厂堆栈创建具有指定类型的通道并满足绑定参数集合所指定的功能。</summary>
      <returns>一个 TChannel 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，它满足集合所指定的功能。</returns>
      <param name="parameters">为生成的通道工厂指定要求。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.CreateBindingElements">
      <summary>返回一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>包含已排序的绑定元素堆栈的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，这些绑定元素由 <see cref="T:System.ServiceModel.WSHttpBinding" /> 绑定描述。</returns>
      <exception cref="T:System.InvalidOperationException">传输安全模式设置无法提供已启用的可靠会话。</exception>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.CreateMessageSecurity">
      <summary>返回来自于当前绑定的安全绑定元素。</summary>
      <returns>来自于当前绑定的 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.GetTransport">
      <summary>返回来自于当前绑定的传输绑定元素。</summary>
      <returns>来自于当前绑定的 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBinding.Security">
      <summary>获取与此绑定一起使用的安全设置。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.WSHttpSecurity" />。 <see cref="P:System.ServiceModel.WSHttpSecurity.Mode" /> 属性的默认值为 <see cref="P:System.ServiceModel.WSHttpSecurity.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBinding.ShouldSerializeSecurity">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSHttpBinding.Security" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSHttpBinding.Security" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.WSHttpBindingBase">
      <summary>提供一个基类，该基类具有 <see cref="T:System.ServiceModel.WSHttpBinding" /> 和 <see cref="T:System.ServiceModel.WSFederationHttpBinding" /> 共有的成员。</summary>
    </member>
    <member name="M:System.ServiceModel.WSHttpBindingBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WSHttpBindingBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.WSHttpBindingBase.#ctor(System.Boolean)">
      <summary>用一个值初始化 <see cref="T:System.ServiceModel.WSHttpBindingBase" /> 类的新实例，该值指定是否已启用可靠会话。</summary>
      <param name="reliableSessionEnabled">如果已启用可靠会话，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal">
      <summary>获取或设置一个值，该值指示是否对本地地址不使用代理服务器。</summary>
      <returns>如果对本地地址不使用代理服务器，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBindingBase.CreateBindingElements">
      <summary>返回一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，包含绑定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBindingBase.CreateMessageSecurity">
      <summary>在派生类中实现时，从当前绑定返回 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</summary>
      <returns>来自于当前绑定的 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.EnvelopeVersion">
      <summary>获取此绑定处理的消息将要使用的 SOAP 版本。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 的值。 该值始终为 SOAP 1.2。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBindingBase.GetTransport">
      <summary>在派生类中实现时，从当前绑定返回传输绑定元素。</summary>
      <returns>来自于当前绑定的 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，表示在匹配过程中忽略主机名。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize">
      <summary>获取或设置可为缓冲区管理器分配的最大内存量（以字节为单位），该管理器管理使用此绑定的终结点所需的缓冲区。</summary>
      <returns>配置了此绑定的终结点所使用的缓冲池的最大大小（以字节为单位）。 默认值为 524,288 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize">
      <summary>获取或设置绑定可处理的消息的最大大小（以字节为单位）。</summary>
      <returns>绑定可处理的最大消息大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">消息超出分配的最大大小。</exception>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.MessageEncoding">
      <summary>获取或设置一个值，该值指示是使用 MTOM 还是文本/XML 对 SOAP 消息进行编码。</summary>
      <returns>
        <see cref="T:System.ServiceModel.WSMessageEncoding" /> 的值，指示是使用 MTOM 还是文本对 SOAP 消息进行编码。 默认值为 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.ProxyAddress">
      <summary>获取或设置 HTTP 代理的 URI 地址。</summary>
      <returns>一个充当 HTTP 代理地址的 <see cref="T:System.Uri" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.ReliableSession">
      <summary>获取一个对象，当使用系统提供的一个绑定时，该对象可提供对可用的可靠会话绑定元素属性的便捷访问。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ReliableSession" />，当使用系统提供的一个绑定时，可提供对可用的可靠会话绑定元素属性的便捷访问。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.Scheme">
      <summary>获取用此绑定配置的通道和侦听器的 URI 传输方案。</summary>
      <returns>如果传输绑定元素的安全模式设置为 <see cref="F:System.ServiceModel.SecurityMode.None" /> 或 <see cref="F:System.ServiceModel.SecurityMode.Message" />，则为“http”；如果安全模式另行设置，则为“https”。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBindingBase.ShouldSerializeReaderQuotas">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSHttpBindingBase.ReaderQuotas" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBindingBase.ShouldSerializeReliableSession">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSHttpBindingBase.ReliableSession" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpBindingBase.ShouldSerializeTextEncoding">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSHttpBindingBase.TextEncoding" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>获取一个值，该值指示是同步处理传入请求还是异步处理传入请求。</summary>
      <returns>如果同步处理请求，则为 true；如果异步处理请求，则为 false。 默认值为 false，即异步处理请求。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.TextEncoding">
      <summary>获取或设置用于消息文本的字符编码。</summary>
      <returns>用于指示所使用的字符编码的 <see cref="T:System.Text.Encoding" />。 默认值为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow">
      <summary>获取或设置一个值，该值指示此绑定是否应支持流动 WS-Transactions。</summary>
      <returns>如果支持事务的流动，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy">
      <summary>获取或设置一个值，该值指示是否应使用系统的自动配置 HTTP 代理（如果可用）。</summary>
      <returns>如果应使用系统的自动配置 HTTP 代理（如果可用），则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.WSHttpContextBinding">
      <summary>为 <see cref="T:System.ServiceModel.WSHttpContextBinding" /> 提供启用了上下文的绑定</summary>
    </member>
    <member name="M:System.ServiceModel.WSHttpContextBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WSHttpContextBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.ServiceModel.SecurityMode)">
      <summary>使用指定 <see cref="T:System.ServiceModel.SecurityMode" /> 初始化 <see cref="T:System.ServiceModel.WSHttpContextBinding" /> 类的新实例。</summary>
      <param name="securityMode">安全模式。</param>
    </member>
    <member name="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.SecurityMode" /> 和可靠的会话设置初始化 <see cref="T:System.ServiceModel.WSHttpContextBinding" /> 类的新实例。</summary>
      <param name="securityMode">安全模式。</param>
      <param name="reliableSessionEnabled">若要启用可靠会话，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.WSHttpContextBinding.#ctor(System.String)">
      <summary>使用指定的绑定配置初始化 <see cref="T:System.ServiceModel.WSHttpContextBinding" /> 类的新实例。</summary>
      <param name="configName">绑定配置的名称。</param>
    </member>
    <member name="P:System.ServiceModel.WSHttpContextBinding.ClientCallbackAddress">
      <summary>获取或设置客户端回调地址。</summary>
      <returns>客户端回调地址。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpContextBinding.ContextManagementEnabled">
      <summary>获取一个值，该值指定是否启用上下文管理。</summary>
      <returns>如果启用上下文管理，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpContextBinding.ContextProtectionLevel">
      <summary>获取或设置此绑定的上下文保护级别。</summary>
      <returns>绑定的保护级别。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpContextBinding.CreateBindingElements">
      <summary>创建一个包含在当前绑定中的已排序的绑定元素集合。</summary>
      <returns>由 <see cref="T:System.ServiceModel.WSHttpContextBinding" /> 描述的已排序的绑定元素堆栈。</returns>
    </member>
    <member name="T:System.ServiceModel.WSHttpSecurity">
      <summary>表示 <see cref="T:System.ServiceModel.WSHttpBinding" /> 的安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.WSHttpSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.WSHttpSecurity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.WSHttpSecurity.Message">
      <summary>获取此绑定的消息级安全性设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.NonDualMessageSecurityOverHttp" /> 实例。 默认值包括：<see cref="P:System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext" /> 的默认值设置为 true、<see cref="P:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType" /> 的默认值为 <see cref="F:System.ServiceModel.MessageCredentialType.Windows" />、<see cref="P:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite" /> 的默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" /> 以及 <see cref="P:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential" /> 的默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpSecurity.Mode">
      <summary>指定此绑定的消息 <see cref="T:System.ServiceModel.SecurityMode" />。</summary>
      <returns>此绑定的 <see cref="T:System.ServiceModel.SecurityMode" />。 默认值为 <see cref="F:System.ServiceModel.SecurityMode.Message" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.ServiceModel.WSHttpSecurity.Mode" /> 集的值未定义。</exception>
    </member>
    <member name="M:System.ServiceModel.WSHttpSecurity.ShouldSerializeMessage">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSHttpSecurity.Message" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSHttpSecurity.Message" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpSecurity.ShouldSerializeMode">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSHttpSecurity.Mode" /> 属性是否已更改，不再是默认值且应对其进行序列化。 WCF 使用此项进行 XAML 集成。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSHttpSecurity.Mode" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.WSHttpSecurity.ShouldSerializeTransport">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.WSHttpSecurity.Transport" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.WSHttpSecurity.Transport" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.WSHttpSecurity.Transport">
      <summary>获取一个包含此绑定的传输级安全性设置的对象。</summary>
      <returns>此绑定的 <see cref="T:System.ServiceModel.HttpTransportSecurity" />。 默认值包括 <see cref="F:System.ServiceModel.HttpClientCredentialType.None" /> 的 <see cref="P:System.ServiceModel.HttpTransportSecurity.ClientCredentialType" /> 和 <see cref="F:System.ServiceModel.HttpProxyCredentialType.None" /> 的 <see cref="P:System.ServiceModel.HttpTransportSecurity.ProxyCredentialType" />。</returns>
    </member>
    <member name="T:System.ServiceModel.WSMessageEncoding">
      <summary>指定是否使用消息传输优化机制 (MTOM) 或文本来编码 SOAP 消息。</summary>
    </member>
    <member name="F:System.ServiceModel.WSMessageEncoding.Mtom">
      <summary>MTOM 用于对 SOAP 消息进行编码。</summary>
    </member>
    <member name="F:System.ServiceModel.WSMessageEncoding.Text">
      <summary>文本用于对 SOAP 消息进行编码。</summary>
    </member>
    <member name="T:System.ServiceModel.X509CertificateEndpointIdentity">
      <summary>表示服务终结点的证书标识。 尝试与服务终结点通信的客户端应基于终结点标识提供的证书对服务进行身份验证。</summary>
    </member>
    <member name="M:System.ServiceModel.X509CertificateEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用现有证书初始化 <see cref="T:System.ServiceModel.X509CertificateEndpointIdentity" /> 对象的类。</summary>
      <param name="certificate">要克隆的证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.X509CertificateEndpointIdentity.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>使用主要（叶）证书和作为其信任链一部分的证书初始化此the <see cref="T:System.ServiceModel.X509CertificateEndpointIdentity" />类的新实例。</summary>
      <param name="primaryCertificate">表示服务标识的主要证书。</param>
      <param name="supportingCertificates">作为主要证书信任链一部分的证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primaryCertificate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primaryCertificate" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.X509CertificateEndpointIdentity.Certificates">
      <summary>获取此标识的证书集合。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.XmlSerializerFormatAttribute">
      <summary>指示 Windows Communication Foundation (WCF) 基础结构使用 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 代替 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</summary>
    </member>
    <member name="M:System.ServiceModel.XmlSerializerFormatAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.XmlSerializerFormatAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.XmlSerializerFormatAttribute.Style">
      <summary>获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的 SOAP 样式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationFormatStyle" /> 值之一。 默认值为 <see cref="F:System.ServiceModel.OperationFormatStyle.Document" />。</returns>
    </member>
    <member name="P:System.ServiceModel.XmlSerializerFormatAttribute.SupportFaults">
      <summary>获取或设置一个值，该值指示应使用 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 来读取和写入错误。</summary>
      <returns>如果应使用 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 来读取和写入错误，则为 true；如果应使用 <see cref="T:System.Runtime.Serialization.DataContractSerializer" />，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.XmlSerializerFormatAttribute.Use">
      <summary>获取或设置一个指定要使用的格式的值。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationFormatUse" /> 值之一。 默认值为 <see cref="F:System.ServiceModel.OperationFormatUse.Literal" />。</returns>
    </member>
    <member name="T:System.ServiceModel.XPathMessageQuery">
      <summary>一个用于计算 XPath 表达式以检索消息中的数据的消息查询。</summary>
    </member>
    <member name="M:System.ServiceModel.XPathMessageQuery.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.XPathMessageQuery" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String)">
      <summary>使用指定的 XPath 表达式初始化 <see cref="T:System.ServiceModel.XPathMessageQuery" /> 类的新实例。</summary>
      <param name="expression">XPath 表达式。</param>
    </member>
    <member name="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String,System.Xml.XmlNamespaceManager)">
      <summary>使用指定的 XPath 表达式和 <see cref="T:System.Xml.XmlNamespaceManager" /> 初始化 <see cref="T:System.ServiceModel.XPathMessageQuery" /> 类的新实例。</summary>
      <param name="expression">XPath 表达式。</param>
      <param name="namespaces">XML 命名空间管理器。</param>
    </member>
    <member name="M:System.ServiceModel.XPathMessageQuery.#ctor(System.String,System.Xml.Xsl.XsltContext)">
      <summary>使用指定的 XPath 表达式和 <see cref="T:System.Xml.Xsl.XsltContext" /> 初始化 <see cref="T:System.ServiceModel.XPathMessageQuery" /> 类的新实例。</summary>
      <param name="expression">XPath 表达式。</param>
      <param name="context">XSLT 上下文。</param>
    </member>
    <member name="M:System.ServiceModel.XPathMessageQuery.CreateMessageQueryCollection">
      <summary>创建一个消息查询集合，它可用于在对一个消息执行多个查询时启用优化。</summary>
      <returns>消息查询集合。</returns>
    </member>
    <member name="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>针对指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 评估 XPath 查询。</summary>
      <returns>从消息中检索的数据。</returns>
      <param name="message">要查询的消息。</param>
      <typeparam name="TResult">要检索的数据的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.XPathMessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>针对指定的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 计算 XPath 查询。</summary>
      <returns>从消息缓冲区中检索的数据。</returns>
      <param name="buffer">要查询的消息缓冲区。</param>
      <typeparam name="TResult">要检索的数据的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.XPathMessageQuery.Expression">
      <summary>获取或设置 <see cref="T:System.ServiceModel.XPathMessageQuery" /> 实例的 XPath 表达式。</summary>
      <returns>XPath 表达式。</returns>
    </member>
    <member name="P:System.ServiceModel.XPathMessageQuery.Namespaces">
      <summary>获取与此 <see cref="T:System.ServiceModel.XPathMessageQuery" /> 实例关联的 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
      <returns>XML 命名空间管理器。</returns>
    </member>
    <member name="T:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute">
      <summary>应用于 Windows Communication Foundation (WCF) 服务以指示该服务能否在 ASP.NET 兼容模式下运行。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute.RequirementsMode">
      <summary>获取或设置该服务所需的 ASP.NET 兼容级别。</summary>
      <returns>指示该服务所需的 ASP.NET 兼容程度的 <see cref="T:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode" />。 默认值为 <see cref="F:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed" />。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">该值不是 <see cref="T:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode" />enum 的有效值。</exception>
    </member>
    <member name="M:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>添加绑定元素可访问的自定义数据以支持协定的实现。</summary>
      <param name="description">服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</param>
      <param name="serviceHostBase">用于承载服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
      <param name="endpoints">类型为 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 且包含服务终结点的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</param>
      <param name="parameters">包含服务的绑定元素可访问的参数的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
    </member>
    <member name="M:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>检查宿主类型与 ASP.NET 兼容性要求是否一致。</summary>
      <param name="description">服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</param>
      <param name="serviceHostBase">用于承载服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="description" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">服务宿主与 ASP.NET 兼容性要求不兼容。</exception>
    </member>
    <member name="M:System.ServiceModel.Activation.AspNetCompatibilityRequirementsAttribute.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>验证服务行为。</summary>
      <param name="description">服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</param>
      <param name="serviceHostBase">用于承载服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
    </member>
    <member name="T:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode">
      <summary>指定 Windows Communication Foundation (WCF) 服务是否（或能否）以与 ASP.NET 兼容的模式运行。</summary>
    </member>
    <member name="F:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Allowed">
      <summary>WCF 服务可以在 ASP.NET 兼容模式设置为 true 或 false 的应用程序域中运行。</summary>
    </member>
    <member name="F:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.NotAllowed">
      <summary>WCF 服务必须在 ASP.NET 兼容模式设置为 false 的应用程序域中运行。</summary>
    </member>
    <member name="F:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required">
      <summary>WCF 服务必须在 ASP.NET 兼容模式设置为 true 的应用程序域中运行。</summary>
    </member>
    <member name="T:System.ServiceModel.Activation.ServiceHostFactoryBase">
      <summary>提供工厂的基实现，以允许应用程序代码在可动态创建主机实例以响应传入消息的托管宿主环境中参与创建服务主机。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceHostFactoryBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Activation.ServiceHostFactoryBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceHostFactoryBase.CreateServiceHost(System.String,System.Uri[])">
      <summary>在派生类中重写时，可使用自定义初始数据创建具有特定基址的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</summary>
      <returns>具有指定基址的 <see cref="T:System.ServiceModel.ServiceHostBase" /> 对象，可使用自定义初始数据对其进行初始化。</returns>
      <param name="constructorString">传递给正在由工厂构造的 <see cref="T:System.ServiceModel.ServiceHostBase" /> 实例的初始化数据。</param>
      <param name="baseAddresses">类型为 <see cref="T:System.Uri" /> 且包含主机基址的 <see cref="T:System.Array" />。</param>
    </member>
    <member name="T:System.ServiceModel.Activation.VirtualPathExtension">
      <summary>当服务承载在 Internet 信息服务 (IIS) 或 Windows 进程激活服务 (WAS) 中时，包含此服务的虚拟路径。</summary>
    </member>
    <member name="P:System.ServiceModel.Activation.VirtualPathExtension.ApplicationVirtualPath">
      <summary>获取承载 WCF 服务的 IIS 或 WAS 应用程序的虚拟路径。</summary>
      <returns>承载此服务的 IIS 或 WAS 应用程序的虚拟路径。</returns>
    </member>
    <member name="M:System.ServiceModel.Activation.VirtualPathExtension.Attach(System.ServiceModel.ServiceHostBase)">
      <summary>提供此方法是为了支持 Windows Communication Foundation (WCF) 基础结构。</summary>
      <param name="owner">使用虚拟路径的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
    </member>
    <member name="M:System.ServiceModel.Activation.VirtualPathExtension.Detach(System.ServiceModel.ServiceHostBase)">
      <summary>提供此方法是为了支持 WCF 基础结构。</summary>
      <param name="owner">使用虚拟路径的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
    </member>
    <member name="P:System.ServiceModel.Activation.VirtualPathExtension.SiteName">
      <summary>获取承载 WCF 服务的 IIS 或 WAS 应用程序的站点名称。</summary>
      <returns>承载此服务的 IIS 或 WAS 应用程序的站点名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.VirtualPathExtension.VirtualPath">
      <summary>获取服务使用的虚拟路径。</summary>
      <returns>服务使用的虚拟路径。</returns>
    </member>
    <member name="T:System.ServiceModel.Activation.Configuration.DiagnosticSection">
      <summary>表示一个配置元素，用于指定 Windows Communication Foundation (WCF) 侦听器的诊断功能。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.Configuration.DiagnosticSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Activation.Configuration.DiagnosticSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.DiagnosticSection.PerformanceCountersEnabled">
      <summary>获取或设置一个布尔值，该值指示是否启用用于诊断目的的性能计数器。</summary>
      <returns>如果启用性能计数器，则为 true，否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Activation.Configuration.NetPipeSection">
      <summary>包含 NetPipeActivator 共享服务的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.Configuration.NetPipeSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Activation.Configuration.NetPipeSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetPipeSection.AllowAccounts">
      <summary>获取进程的用户帐户，这些进程承载 Windows Communication Foundation (WCF) 服务并被授予了对该共享服务的连接访问权限。</summary>
      <returns>一个包含进程的用户帐户的 <see cref="T:System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection" />，这些进程承载 WCF 服务并被授予了对该共享服务的连接访问权限。 返回的默认值为 LocalSystem、Admin、NS、LS 和 IIS_USRS。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetPipeSection.MaxPendingAccepts">
      <summary>获取或设置共享服务侦听终结点上的最大未完成并发接受线程数。</summary>
      <returns>共享服务侦听终结点上的最大未完成并发接受线程数。 默认值为 2。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetPipeSection.MaxPendingConnections">
      <summary>获取或设置此共享服务的最大挂起连接数。</summary>
      <returns>此共享服务的最大挂起连接数。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetPipeSection.ReceiveTimeout">
      <summary>获取或设置 NetPipeActivator 共享服务的超时值。</summary>
      <returns>默认值为 10 秒。</returns>
    </member>
    <member name="T:System.ServiceModel.Activation.Configuration.NetTcpSection">
      <summary>包含 NetTcpPortSharing 共享服务的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.Configuration.NetTcpSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Activation.Configuration.NetTcpSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetTcpSection.AllowAccounts">
      <summary>获取进程的用户帐户，这些进程承载 Windows Communication Foundation (WCF) 服务并被授予了对该共享服务的连接访问权限。</summary>
      <returns>一个包含进程的用户帐户的 <see cref="T:System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection" />，这些进程承载 WCF 服务并被授予了对该共享服务的连接访问权限。 返回的默认值为 LocalSystem、Admin、NS、LS 和 IIS_USRS。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetTcpSection.ListenBacklog">
      <summary>获取或设置从共享连接接受但仍未调度给 WCF 服务的最大未完成连接数。</summary>
      <returns>从共享连接接受但仍未调度给 WCF 的最大未完成连接数。 默认值为 10。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetTcpSection.MaxPendingAccepts">
      <summary>获取或设置共享服务侦听终结点上的最大未完成并发接受线程数。</summary>
      <returns>共享服务侦听终结点上的最大未完成并发接受线程数。 默认值为 2。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetTcpSection.MaxPendingConnections">
      <summary>获取或设置此共享服务的最大挂起连接数。</summary>
      <returns>此共享服务的最大挂起连接数。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetTcpSection.ReceiveTimeout">
      <summary>获取或设置 NetTcpPortSharing 共享服务的超时值。</summary>
      <returns>默认值为 10 秒。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.NetTcpSection.TeredoEnabled">
      <summary>获取或设置一个布尔值，该值指示端口共享服务是否使用 Microsoft Teredo 服务代表 WCF 服务侦听 TCP 端口。</summary>
      <returns>如果端口共享服务使用 Microsoft Teredo 服务代表 WCF 服务侦听 TCP 端口，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Activation.Configuration.SecurityIdentifierElement">
      <summary>表示一个配置元素，该元素包含一些进程的用户帐户，这些进程承载 WCF 服务并被授予了对该共享服务的连接访问权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.Configuration.SecurityIdentifierElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Activation.Configuration.SecurityIdentifierElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.Configuration.SecurityIdentifierElement.#ctor(System.Security.Principal.SecurityIdentifier)">
      <summary>使用指定的安全标识符初始化 <see cref="T:System.ServiceModel.Activation.Configuration.SecurityIdentifierElement" /> 类的新实例。</summary>
      <param name="sid">安全标识符。</param>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.SecurityIdentifierElement.SecurityIdentifier">
      <summary>获取或设置与此元素关联的安全标识符。</summary>
      <returns>与此元素关联的安全标识符。</returns>
    </member>
    <member name="T:System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection">
      <summary>包含 <see cref="T:System.ServiceModel.Activation.Configuration.SecurityIdentifierElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Activation.Configuration.SecurityIdentifierElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup">
      <summary>包含 SMSvcHost.exe 工具的配置节。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup.Diagnostics">
      <summary>获取诊断配置节。</summary>
      <returns>一个包含诊断配置节的 <see cref="T:System.ServiceModel.Activation.Configuration.DiagnosticSection" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup.GetSectionGroup(System.Configuration.Configuration)">
      <summary>从指定的配置文件中获取 System.ServiceModel.Activation 配置节组。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup" />，表示配置文件中的 System.ServiceModel.Activation 设置。</returns>
      <param name="config">表示配置文件的 <see cref="T:System.Configuration.Configuration" />。</param>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup.NetPipe">
      <summary>获取 NetPipeActivator 共享服务的配置设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Activation.Configuration.NetPipeSection" />，包含 NetPipeActivator 共享服务的配置设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup.NetTcp">
      <summary>获取 NetTcpPortSharing 共享服务的配置设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Activation.Configuration.NetTcpSection" />，包含 NetTcpPortSharing 共享服务的配置设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeader">
      <summary>表示一个地址头，它包装的地址信息项用于标识终结点或与终结点进行交互。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.Object)">
      <summary>使用指定的值创建 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 类的新实例。</summary>
      <returns>包含 <paramref name="value" /> 参数指定的信息项的 <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="value">为地址头提供的信息项。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>创建 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 类的新实例，使用指定的格式化程序对指定对象的信息项进行序列化。</summary>
      <returns>包含 value 参数指定的信息项的 <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="value">为地址头提供的信息项。</param>
      <param name="serializer">用于序列化 <paramref name="value" /> 参数中的指定对象的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formatter" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object)">
      <summary>用指定的值、名称和命名空间创建 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 类的新实例。</summary>
      <returns>具有指定 <paramref name="name" /> 和 <paramref name="ns" /> 并且包含 <paramref name="value" /> 指定的信息项的 <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">地址头的名称。</param>
      <param name="ns">地址头的命名空间。</param>
      <param name="value">为地址头提供的信息项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或 <paramref name="name" />.Length == 0。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定名称和命名空间创建 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 类的新实例，该实例使用指定的格式化程序对指定对象的信息项进行序列化。</summary>
      <returns>具有指定 <paramref name="name" /> 和 <paramref name="ns" /> 并且包含 <paramref name="value" /> 指定的信息项的 <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">地址头的名称。</param>
      <param name="ns">地址头的命名空间。</param>
      <param name="value">为地址头提供的信息项。</param>
      <param name="serializer">用于序列化 <paramref name="value" /> 参数中的指定对象的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="serializer" /> 为 null，或 <paramref name="name" />.Length == 0。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.Equals(System.Object)">
      <summary>确定指定对象中的信息项是否与当前地址头包含的对象相等。</summary>
      <returns>如果指定的 <paramref name="obj" /> 中的信息项等效于当前地址头包含的信息项，则为 true；否则为 false。 具体而言，如果 <paramref name="obj" /> 为 null，则返回false。</returns>
      <param name="obj">要与当前地址头包含的对象进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetAddressHeaderReader">
      <summary>返回可对当前地址头对象进行序列化的 XML 读取器。</summary>
      <returns>可对当前地址头对象进行序列化的 <see cref="T:System.Xml.XmlDictionaryReader" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetHashCode">
      <summary>为地址头提供一个唯一的哈希代码。</summary>
      <returns>当前地址头的唯一哈希代码。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1">
      <summary>将来自当前地址头的信息项反序列化为具有指定类型的对象。</summary>
      <returns>一个类型为 <paramref name="T" /> 的类的实例，其字段和属性设置为当前地址头对象所提供的值。</returns>
      <typeparam name="T">一个类型为 <paramref name="T" /> 的类，其字段和属性设置为当前地址头对象所提供的值。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>将来自当前地址头的信息项反序列化为具有指定类型的对象，该对象使用指定格式化程序对此信息进行序列化。</summary>
      <returns>一个类型为 <paramref name="T" /> 的类的实例，其字段和属性设置为当前地址头对象所提供的值。</returns>
      <param name="serializer">用于反序列化来自当前地址头对象的信息项的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">一个类型为 <paramref name="T" /> 的类，其字段和属性设置为当前地址头对象所提供的值。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Name">
      <summary>在实现时，获取地址头的名称。</summary>
      <returns>地址头的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Namespace">
      <summary>在实现时，获取地址头的命名空间。</summary>
      <returns>地址头的命名空间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>当在派生类中重写时，在向流或文件写入地址头内容时调用。</summary>
      <param name="writer">用于向流或文件写入地址头内容的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>当在派生类中重写时，在开始向流或文件写入地址头内容时调用。</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.ToMessageHeader">
      <summary>将地址头包装为消息头。</summary>
      <returns>包装当前地址头的 <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定 <see cref="T:System.Xml.XmlDictionaryWriter" /> 向流或文件写入地址头。</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlWriter)">
      <summary>使用指定 <see cref="T:System.Xml.XmlWriter" /> 向流或文件写入地址头。</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>向流或文件写入地址头内容。</summary>
      <param name="writer">用于向流或文件写入地址头内容的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>开始向流或文件写入地址头内容。</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeaderCollection">
      <summary>表示地址头的线程安全的只读集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.AddressHeader})">
      <summary>从地址头的可枚举集创建 <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> 类的新实例。</summary>
      <param name="addressHeaders">用于初始化集合的 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="addressHeaders" /> 参数中的一个地址标头为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.AddHeadersTo(System.ServiceModel.Channels.Message)">
      <summary>将集合中的标头添加到指定消息的标头中。</summary>
      <param name="message">向其中添加标头的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindAll(System.String,System.String)">
      <summary>查找集合中具有指定名称和命名空间的所有地址头。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 的 <see cref="T:System.Array" />，包含集合中具有指定名称和命名空间的所有标头。</returns>
      <param name="name">要查找的地址标头的名称。</param>
      <param name="ns">要查找的地址标头的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="ns" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindHeader(System.String,System.String)">
      <summary>查找集合中具有指定名称和命名空间的第一个地址头。</summary>
      <returns>集合中具有指定名称和命名空间的 <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">要查找的地址标头的名称。</param>
      <param name="ns">要查找的地址标头的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="ns" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">存在多个具有指定 <paramref name="name" /> 和 <paramref name="ns" /> 的标头。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressingVersion">
      <summary>与 SOAP 消息关联或终结点所理解的 WS-Addressing 版本。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.None">
      <summary>获取与 WS-Addressing 版本不相关联的寻址版本。</summary>
      <returns>不是与 WS-Addressing 版本相关的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressingVersion.ToString">
      <summary>返回当前寻址版本的字符串表示形式。</summary>
      <returns>一个表示当前寻址版本的字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.WSAddressing10">
      <summary>获取与 WS-Addressing 1.0 关联的地址版本的标识符。</summary>
      <returns>标识与 WS-Addressing 1.0 关联的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> 的单一实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.WSAddressingAugust2004">
      <summary>获取与 WS-Addressing August 2004 关联的 WS-Addressing 的版本。</summary>
      <returns>标识与 WS-Addressing August 2004 关联的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> 的单一实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ApplicationContainerSettings">
      <summary>指定应用容器的设置。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ApplicationContainerSettings.CurrentSession">
      <summary>当前会话设置。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ApplicationContainerSettings.PackageFullName">
      <summary>获取包的 FullName。</summary>
      <returns>包的 FullName。</returns>
    </member>
    <member name="F:System.ServiceModel.Channels.ApplicationContainerSettings.ServiceSession">
      <summary>服务会话设置。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ApplicationContainerSettings.SessionId">
      <summary>获取或设置应用程序容器设置的会话标识符。</summary>
      <returns>应用容器设置的会话标识符。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement">
      <summary>表示一个自定义绑定元素，它支持使用不对称加密的通道安全。 此绑定元素会使用发送方的身份验证令牌来签署消息，并使用接收方的令牌来加密消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.#ctor">
      <summary>创建此类的实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.#ctor(System.ServiceModel.Security.Tokens.SecurityTokenParameters)">
      <summary>使用指定的接收方令牌参数初始化 <see cref="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement" /> 类的新实例。</summary>
      <param name="recipientTokenParameters">定义接收方的令牌（例如，服务器的 X.509 证书）。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.#ctor(System.ServiceModel.Security.Tokens.SecurityTokenParameters,System.ServiceModel.Security.Tokens.SecurityTokenParameters)">
      <summary>使用指定的接收方和发起方令牌参数初始化 <see cref="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement" /> 的新实例。</summary>
      <param name="recipientTokenParameters">定义接收方的令牌（例如，服务器的 X.509 证书）。</param>
      <param name="initiatorTokenParameters">定义发起方的令牌（例如，客户端的 X.509 证书）。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.AllowSerializedSigningTokenOnReply">
      <summary>获取或设置一个值，该值指示是否允许在答复消息上序列化签名令牌。</summary>
      <returns>如果允许在答复消息上序列化签名令牌，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.Clone">
      <summary>创建此类的新实例（从当前类初始化）。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象，其属性值等于当前实例的属性值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中获取指定的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的指定对象；如果找不到该对象，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的对象的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.InitiatorTokenParameters">
      <summary>指定发起方的令牌定义。</summary>
      <returns>用于包含令牌定义的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.MessageProtectionOrder">
      <summary>获取或设置此绑定的消息加密和签名的顺序。</summary>
      <returns>一个指定如何保护消息的 <see cref="T:System.ServiceModel.Security.MessageProtectionOrder" /> 值。 默认值为 <see cref="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncrypt" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是枚举的有效成员。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.RecipientTokenParameters">
      <summary>指定接收方的令牌定义。</summary>
      <returns>用于包含令牌定义的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.RequireSignatureConfirmation">
      <summary>获取或设置一个值，该值指示是否必须确认消息签名。</summary>
      <returns>如果必须确认消息签名，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.SetKeyDerivation(System.Boolean)">
      <summary>设置一个值，该值指示是否需要派生密钥。</summary>
      <param name="requireDerivedKeys">如果需要派生密钥，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出关于绑定的自定义策略断言，将其添加到 Web 服务描述语言 (WSDL) 信息中。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.ToString">
      <summary>返回一个字符串，它表示此 <see cref="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement" /> 实例。</summary>
      <returns>当前的 <see cref="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement" /> 实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement">
      <summary>用于指定编码消息时所采用的 .NET 二进制 XML 格式的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在客户端上生成通道工厂堆栈，该通道工厂堆栈可为指定上下文创建指定类型的通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在服务上生成通道侦听器，以接受指定上下文的指定类型通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />。</returns>
      <param name="context">侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示当前绑定是否可以为指定的通道类型和上下文生成侦听器。</summary>
      <returns>如果可以在服务上生成指定的通道侦听器堆栈，则为 true；否则为 false。</returns>
      <param name="context">侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.Clone">
      <summary>创建一个从当前对象初始化的新 <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> 对象，其属性值等于当前元素的属性值。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CompressionFormat">
      <summary>获取或设置绑定元素的压缩格式。</summary>
      <returns>绑定元素的压缩格式。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>为利用 SOAP 与 WS-Addressing 版本以及当前编码绑定元素指定的字符编码的二进制消息编码器，创建一个工厂。</summary>
      <returns>此绑定元素创建的 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定元素堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <param name="context">绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MaxReadPoolSize">
      <summary>获取或设置最大 XML 读取器数，这些读取器将分配到池中，并随时可以用于处理传入消息。</summary>
      <returns>要保留在池中的读取器的最大数量。 默认值为 64 个读取器。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MaxSessionSize">
      <summary>获取或设置会话中的最大可用内存量，以优化传输过程。</summary>
      <returns>会话的最大大小（以字节为单位）。 默认值为 2048 个字节。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MaxWritePoolSize">
      <summary>获取或设置最大 XML 编写器数，这些编写器将分配到池中，并随时可以用于处理传出消息。</summary>
      <returns>要保留在池中的编写器的最大数量。 默认值为 16 个编写器。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MessageVersion">
      <summary>获取或设置使用的或预期的 SOAP 消息和 WS-Addressing 版本。</summary>
      <returns>使用的或预期的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <exception cref="T:System.ArgumentNullException">所设置的值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值设置为不受支持的信封版本。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.ReaderQuotas">
      <summary>获取 XML 消息的复杂性约束，这些消息可由采用此绑定元素配置的终结点进行处理。</summary>
      <returns>为交换的 SOAP 消息指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。 下面的备注部分中提供了这些约束的默认值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.ShouldSerializeMessageVersion">
      <summary>返回是否应序列化 SOAP 消息结构版本。</summary>
      <returns>如果应序列化该 SOAP 消息结构版本，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.ShouldSerializeReaderQuotas">
      <summary>返回是否应序列化对 SOAP 消息结构的复杂性施加的约束的值。</summary>
      <returns>如果应对读取器配额进行序列化，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>为终结点将一自定义二进制消息编码元素写入到生成的元数据中。</summary>
      <param name="exporter">可导出元数据信息的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="policyContext">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>为协定将一自定义二进制消息编码元素写入到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>为终结点将一自定义二进制消息编码元素写入到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到终结点说明的映射。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Binding">
      <summary>包含绑定元素，这些元素指定客户端和服务之间的通信所用的协议、传输和消息编码器。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor">
      <summary>使用默认的名称和命名空间初始化 <see cref="T:System.ServiceModel.Channels.Binding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor(System.String,System.String)">
      <summary>使用指定的服务绑定初始化 <see cref="T:System.ServiceModel.Channels.Binding" /> 类的新实例。</summary>
      <param name="name">绑定的 <see cref="P:System.ServiceModel.Channels.Binding.Name" />。</param>
      <param name="ns">绑定的 <see cref="P:System.ServiceModel.Channels.Binding.Namespace" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ns" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])">
      <summary>在客户端上生成通道工厂堆栈，该通道工厂堆栈创建具有指定类型的通道并满足对象数组所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，它满足集合所指定的功能。</returns>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在客户端上生成通道工厂堆栈，此通道工厂堆栈创建具有指定类型的通道并满足绑定参数集合所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，它满足集合所指定的功能。</returns>
      <param name="parameters">
        <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />，为生成的通道工厂指定要求。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Object[])">
      <summary>在服务上生成通道侦听器，该通道侦听器接受具有指定类型的通道并满足所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，它满足指定的功能。</returns>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在服务上生成通道侦听器，该通道侦听器接受具有指定类型的通道并满足绑定参数集合所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，它满足指定的功能。</returns>
      <param name="parameters">为生成的通道侦听器指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.Object[])">
      <summary>在服务上生成通道侦听器，该通道侦听器接受具有指定类型的通道并满足所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，它满足指定的功能。</returns>
      <param name="listenUriBaseAddress">提供服务侦听基址的 <see cref="T:System.Uri" />。</param>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在服务上生成通道侦听器，该通道侦听器接受具有指定类型的通道并满足所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，它满足指定的功能。</returns>
      <param name="listenUriBaseAddress">提供服务侦听基址的 <see cref="T:System.Uri" />。</param>
      <param name="parameters">为生成的通道侦听器指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.Object[])">
      <summary>在服务上生成通道侦听器，该通道侦听器接受具有指定类型的通道并满足所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，它满足指定的功能。</returns>
      <param name="listenUriBaseAddress">提供服务侦听基址的 <see cref="T:System.Uri" />。</param>
      <param name="listenUriRelativeAddress">相对于服务侦听基址的地址。</param>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在服务上生成通道侦听器，该通道侦听器接受具有指定类型的通道并满足所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，它满足指定的功能。</returns>
      <param name="listenUriBaseAddress">提供服务侦听基址的 <see cref="T:System.Uri" />。</param>
      <param name="listenUriRelativeAddress">相对于服务侦听基址的地址。</param>
      <param name="parameters">为生成的通道侦听器指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.Object[])">
      <summary>在服务上生成通道侦听器，该通道侦听器接受具有指定类型的通道并满足所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，它满足指定的功能。</returns>
      <param name="listenUriBaseAddress">提供服务侦听基址的 <see cref="T:System.Uri" />。</param>
      <param name="listenUriRelativeAddress">相对于服务侦听基址的地址。</param>
      <param name="listenUriMode">
        <see cref="T:System.ServiceModel.Description.ListenUriMode" /> 的一个值，指示传输是必须确保提供给服务侦听的 URI 唯一，还是严格按照所提供的内容使用。</param>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelListener``1(System.Uri,System.String,System.ServiceModel.Description.ListenUriMode,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在服务上生成通道侦听器，该通道侦听器接受具有指定类型的通道并满足所指定的功能。</summary>
      <returns>一个类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，它满足指定的功能。</returns>
      <param name="listenUriBaseAddress">提供服务侦听基址的 <see cref="T:System.Uri" />。</param>
      <param name="listenUriRelativeAddress">相对于服务侦听基址的地址。</param>
      <param name="listenUriMode">
        <see cref="T:System.ServiceModel.Description.ListenUriMode" /> 的一个值，指示传输是必须确保提供给服务侦听的 URI 唯一，还是严格按照所提供的内容使用。</param>
      <param name="parameters">为生成的通道侦听器指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">缺少传输元素或其顺序紊乱，或架构无效，或未指定消息版本。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])">
      <summary>返回一个值，该值指示当前绑定是否可以在客户端上生成满足对象数组所指定的要求的通道工厂堆栈。</summary>
      <returns>如果可以在客户端生成指定的通道工厂堆栈，则为 true；否则为 false。</returns>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">要为其进行工厂测试的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>返回一个值，该值指示当前绑定是否可以在客户端上生成满足指定绑定参数集合的通道工厂堆栈。</summary>
      <returns>如果可以在客户端生成指定的通道工厂堆栈，则为 true；否则为 false。</returns>
      <param name="parameters">为生成的通道工厂指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">要为其进行工厂测试的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.Object[])">
      <summary>返回一个值，该值指示当前绑定是否可以在服务上生成满足对象数组所指定的条件的通道侦听器堆栈。</summary>
      <returns>如果可以在服务上生成指定的通道侦听器堆栈，则为 true；否则为 false。</returns>
      <param name="parameters">为生成的通道工厂指定要求的对象数组。</param>
      <typeparam name="TChannel">要为其进行侦听器测试的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>返回一个值，该值指示当前绑定是否可以在服务上生成满足指定绑定参数集合的通道侦听器堆栈。</summary>
      <returns>如果可以在服务上生成指定的通道侦听器堆栈，则为 true；否则为 false。</returns>
      <param name="parameters">为生成的通道侦听器指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">要为其进行侦听器测试的通道类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.CloseTimeout">
      <summary>获取或设置在传输引发异常之前可用于关闭连接的时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。 默认值为 1 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或太大。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
      <summary>在派生类中重写时，创建一个集合，该集合包含属于当前绑定的绑定元素。</summary>
      <returns>一个类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象，它以正确的顺序包含当前绑定对象的绑定元素。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>从绑定堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <param name="parameters">为生成的通道侦听器指定要求的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.MessageVersion">
      <summary>获取由绑定所配置的客户端和服务使用的消息版本。</summary>
      <returns>由绑定所配置的客户端和服务使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Name">
      <summary>获取或设置绑定的名称。</summary>
      <returns>绑定的名称。 默认名称为 null。</returns>
      <exception cref="T:System.ArgumentException">该值不能设置为 null 或空字符串。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Namespace">
      <summary>获取或设置绑定的 XML 命名空间。</summary>
      <returns>绑定的 XML 命名空间。 默认值为“http://tempuri.org/”。</returns>
      <exception cref="T:System.ArgumentNullException">该值不能设置为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.OpenTimeout">
      <summary>获取或设置在传输引发异常之前可用于打开连接的时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。 默认值为 1 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或太大。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.ReceiveTimeout">
      <summary>获取或设置连接在撤消之前保持非活动状态的最大时间间隔，在此时间间隔内未接收任何应用程序消息。</summary>
      <returns>一个 <see cref="T:System.Timespan" />，指定在超时前应用程序接收消息的时间。 默认值为 10 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或太大。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Scheme">
      <summary>在派生类中实现时，设置 URI 架构，此架构指定由绑定生成的通道和侦听器工厂所使用的传输。</summary>
      <returns>由当前绑定生成的工厂所创建的通道或侦听器所使用的 URI 架构。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.SendTimeout">
      <summary>获取或设置在传输引发异常之前可用于完成写入操作的时间间隔。</summary>
      <returns>
        <see cref="T:System.Timespan" />，指定在超时前必须完成写入操作的时间。 默认值为 1 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或太大。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.ShouldSerializeName">
      <summary>返回是否应序列化绑定名称。</summary>
      <returns>如果应序列化绑定名称，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.ShouldSerializeNamespace">
      <summary>返回是否应序列化绑定命名空间。</summary>
      <returns>如果应序列化绑定命名空间，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingContext">
      <summary>提供关于生成通道侦听器和通道工厂所需的地址、绑定、绑定元素和绑定参数的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.#ctor(System.ServiceModel.Channels.CustomBinding,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>使用指定的绑定和绑定参数集合初始化 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 类的新实例。</summary>
      <param name="binding">通道的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</param>
      <param name="parameters">通道的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.#ctor(System.ServiceModel.Channels.CustomBinding,System.ServiceModel.Channels.BindingParameterCollection,System.Uri,System.String,System.ServiceModel.Description.ListenUriMode)">
      <summary>使用指定的绑定、绑定参数集合以及服务侦听的终结点的地址初始化 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 类的新实例。</summary>
      <param name="binding">通道的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</param>
      <param name="parameters">通道的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <param name="listenUriBaseAddress">服务终结点侦听的 <see cref="T:System.Uri" />。</param>
      <param name="listenUriRelativeAddress">服务终结点侦听的相对地址。</param>
      <param name="listenUriMode">
        <see cref="T:System.ServiceModel.Description.ListenUriMode" />，指示传输是否必须确保提供给服务侦听的 URI 是唯一的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.ServiceModel.Description.ListenUriMode" /> 未定义。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.Binding">
      <summary>获取当前上下文中生成的通道的绑定。</summary>
      <returns>当前上下文中生成的通道的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.BindingParameters">
      <summary>获取当前上下文中生成的通道的绑定参数集合。</summary>
      <returns>当前上下文中生成的通道的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelFactory``1">
      <summary>在当前通道工厂之下为指定类型的通道生成内部通道工厂。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Channels.IChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，表示当前通道工厂的内部通道工厂。</returns>
      <typeparam name="TChannel">内部通道工厂生成的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelListener``1">
      <summary>生成用于侦听指定类型的通道的内部通道侦听器。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Channels.IChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，表示当前通道工厂的内部通道侦听器。</returns>
      <typeparam name="TChannel">内部通道侦听器侦听的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.CanBuildInnerChannelFactory``1">
      <summary>返回一个值，该值指示内部通道工厂是否可以生成指定类型的通道。</summary>
      <returns>如果内部通道工厂可以生成指定的 <paramref name="TChannel" />，则为 true；否则为 false。</returns>
      <typeparam name="TChannel">内部通道工厂生成的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.CanBuildInnerChannelListener``1">
      <summary>返回一个值，该值指示是否可以生成内部通道侦听器来侦听指定类型的通道。</summary>
      <returns>如果可以生成用于侦听指定 <paramref name="TChannel" /> 的内部通道侦听器，则为 true；否则为 false。</returns>
      <typeparam name="TChannel">内部通道侦听器侦听的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.Clone">
      <summary>返回当前通道生成上下文的副本。</summary>
      <returns>作为当前通道生成上下文副本的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.GetInnerProperty``1">
      <summary>从绑定堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.ListenUriBaseAddress">
      <summary>获取或设置一个 URI，该 URI 提供服务终结点侦听的基址。</summary>
      <returns>服务终结点侦听的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.ListenUriMode">
      <summary>获取或设置一个值，该值指示传输是否必须确保提供给服务侦听的 URI 是唯一的。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.ListenUriMode" />，指示传输是否必须确保提供给服务侦听的 URI 是唯一的。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.ListenUriRelativeAddress">
      <summary>获取或设置一个 URI，该 URI 提供服务终结点侦听的相对地址。</summary>
      <returns>服务终结点侦听的相对地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.RemainingBindingElements">
      <summary>获取其他绑定元素用于构造通道堆栈的绑定元素。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，包含其他绑定元素用于构造通道堆栈的绑定元素。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElement">
      <summary>用于为各种类型的通道生成通道工厂和通道侦听器以处理传出和传入消息的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor(System.ServiceModel.Channels.BindingElement)">
      <summary>从指定的绑定元素初始化 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>初始化通道工厂，用于生成来自绑定上下文中指定类型的通道。</summary>
      <returns>从 <paramref name="context" /> 中初始化的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">工厂生成的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>初始化通道侦听器，用于接受绑定上下文中指定类型的通道。</summary>
      <returns>从 <paramref name="context" /> 中初始化的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">生成侦听器以接受的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示绑定元素是否可以为特定的通道类型生成通道工厂。</summary>
      <returns>如果绑定元素可以生成类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，则为 true；否则为 false。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示绑定元素是否可以为特定类型的通道生成侦听器。</summary>
      <returns>如果绑定元素可以生成类型为 <see cref="T:System.ServiceModel.Channels.IChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，则为 true；否则为 false。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.Clone">
      <summary>在派生类中重写时，返回绑定元素对象的副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象，它是原始绑定元素对象的深层克隆。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在派生类中重写时，从绑定堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <param name="context">绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElementCollection">
      <summary>表示绑定中使用的绑定元素的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>使用绑定元素的可枚举集初始化 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> 类的新实例。</summary>
      <param name="elements">泛型类型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>使用一个绑定元素数组初始化 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> 类的新实例。</summary>
      <param name="elements">类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Array" />，用于初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.AddRange(System.ServiceModel.Channels.BindingElement[])">
      <summary>将数组中的绑定元素添加到绑定元素集合中。</summary>
      <param name="elements">要添加到集合中的类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Clone">
      <summary>创建绑定元素集合的副本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> 的副本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Contains(System.Type)">
      <summary>返回一个值，该值指示具有指定类型的绑定元素是否属于绑定元素集合。</summary>
      <returns>如果指定的绑定元素类型包含在集合中，则为 true；否则为 false。</returns>
      <param name="bindingElementType">要测试其是否属于集合的绑定元素的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementType" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Find``1">
      <summary>返回绑定元素集合中第一个具有指定类型的项。</summary>
      <returns>如果找到，则返回类型为 <see cref="T:System.Type" /> 的项；如果未找到，若 <paramref name="T" /> 为值类型，则返回 0，若 <paramref name="T" /> 为引用类型，则返回 null。</returns>
      <typeparam name="T">要查找的项的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.FindAll``1">
      <summary>返回绑定元素集合中具有指定类型的所有项。</summary>
      <returns>如果找到，则返回类型为 <see cref="T:System.Type" /> 的所有项的 <see cref="T:System.Collections.ObjectModel.Collection`1" />；如果未找到任何项，若 <paramref name="T" /> 为值类型，则返回 0，若 <paramref name="T" /> 为引用类型，则返回 null。</returns>
      <typeparam name="T">要查找的项的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.InsertItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>将一个绑定元素插入绑定元素集合的指定位置。</summary>
      <param name="index">在集合中插入绑定元素的位置。</param>
      <param name="item">要插入的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Remove``1">
      <summary>从绑定元素集合中移除一个具有指定类型的绑定元素。</summary>
      <returns>类型为 <see cref="T:System.Type" /> 的被移除项。</returns>
      <typeparam name="T">要查找的项的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.RemoveAll``1">
      <summary>从绑定元素集合中移除具有指定类型的所有绑定元素。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.Collection`1" />，它包含查找到的所有 <see cref="T:System.Type" /> 类型的项。</returns>
      <typeparam name="T">要查找的项的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.SetItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>替换绑定元素集合中指定索引处的绑定元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">指定 <paramref name="index" /> 处的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 项的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingParameterCollection">
      <summary>表示一个绑定参数的集合，这些参数存储由绑定元素用来生成工厂的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.BodyWriter">
      <summary>表示消息正文的编写器。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BodyWriter" /> 类的新实例，该实例显式指示是否缓冲。</summary>
      <param name="isBuffered">如果可以多次调用正文编写器，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.BeginWriteBodyContents(System.Xml.XmlDictionaryWriter,System.AsyncCallback,System.Object)">
      <summary>当正文写入器开始使用指定的写入器、回调和状态时引发事件。</summary>
      <returns>操作的结果。</returns>
      <param name="writer">编写器。</param>
      <param name="callback">回调。</param>
      <param name="state">状态。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.CreateBufferedCopy(System.Int32)">
      <summary>创建正文的缓冲副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BodyWriter" />，包含此对象的副本。</returns>
      <param name="maxBufferSize">正文缓冲区的最大大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferSize" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">已写入正文且无法再次写入，或者未缓冲正文编写器。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.EndWriteBodyContents(System.IAsyncResult)">
      <summary>关闭主体内容的写入。</summary>
      <param name="result">操作的结果。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.BodyWriter.IsBuffered">
      <summary>获取一个值，该值指示是否可以多次调用写入方法。</summary>
      <returns>如果可以多次调用正文编写器，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnBeginWriteBodyContents(System.Xml.XmlDictionaryWriter,System.AsyncCallback,System.Object)">
      <summary>当正文写入器开始使用指定的写入器、回调和状态时引发事件。</summary>
      <returns>异步结果。</returns>
      <param name="writer">编写器。</param>
      <param name="callback">回调</param>
      <param name="state">状态。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnCreateBufferedCopy(System.Int32)">
      <summary>在写入正文内容时提供可扩展点。</summary>
      <returns>具有指定最大缓冲区大小的 <see cref="T:System.ServiceModel.Channels.BodyWriter" />。</returns>
      <param name="maxBufferSize">正文缓冲区的最大大小。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnEndWriteBodyContents(System.IAsyncResult)">
      <summary>当正文写入器终止写入正文时引发事件。</summary>
      <param name="result">操作的结果。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>实现时，提供写入正文内容时的可扩展点。</summary>
      <param name="writer">用于写出消息正文的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>写出消息正文的内容。</summary>
      <param name="writer">用于写出消息正文的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BufferManager">
      <summary>许多 Windows Communication Foundation (WCF) 功能都需要使用缓冲区，然而创建和销毁缓冲区的造价非常高。 您可以使用 <see cref="T:System.ServiceModel.Channels.BufferManager" /> 类来管理缓冲池。 缓冲池及其缓冲区是在实例化此类时创建，在垃圾回收将缓冲池回收时销毁。 每次需要使用缓冲区时，您就可以从缓冲池中取出一个缓冲区来进行使用，然后在使用完毕后将其返回到缓冲池。 这个过程要比每次需要使用缓冲区时就创建一个然后再销毁快得多。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.BufferManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.Clear">
      <summary>释放目前在管理器中缓存的缓冲区。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.CreateBufferManager(System.Int64,System.Int32)">
      <summary>使用指定的最大缓冲池大小和缓冲池中每个单独缓冲区的最大大小创建新的 BufferManager。</summary>
      <returns>返回一个带有指定参数的 <see cref="T:System.ServiceModel.Channels.BufferManager" /> 对象。</returns>
      <param name="maxBufferPoolSize">缓冲池的最大大小。</param>
      <param name="maxBufferSize">单独缓冲区的最大大小。</param>
      <exception cref="T:System.InsufficientMemoryException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.OutOfMemoryException" />。 没有足够的内存来创建请求的缓冲池。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferPoolSize" /> 或 <paramref name="maxBufferSize" /> 小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.ReturnBuffer(System.Byte[])">
      <summary>将缓冲区返回到缓冲池。</summary>
      <param name="buffer">要返回的缓冲区引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 引用不可为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 的长度与缓冲池的缓冲区长度属性不符。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.TakeBuffer(System.Int32)">
      <summary>从缓冲池获取一个至少为指定大小的缓冲区。</summary>
      <returns>一个字节数组，表示所请求的缓冲区大小。</returns>
      <param name="bufferSize">所请求缓冲区的大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 不能小于零。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.CallbackContextMessageProperty">
      <summary>当使用支持上下文交换协议的通道时，表示 wsc:CallbackContext 消息头的内容。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的上下文初始化 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 类的新实例。</summary>
      <param name="context">可由正在相互通信的客户端和服务实例识别的消息中的信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>用指定的 <see cref="T:System.ServiceModel.EndpointAddress" /> 初始化 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 类的新实例。</summary>
      <param name="callbackAddress">回调地址。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.#ctor(System.ServiceModel.EndpointAddress,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的 <see cref="T:System.ServiceModel.EndpointAddress" /> 和包含上下文信息的 <see cref="T: System.Collections.Generic.IDictionary{System.String,System.String}" /> 来初始化 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 类的新实例。</summary>
      <param name="listenAddress">客户端侦听的终结点地址。</param>
      <param name="context">可由正在相互通信的客户端和服务实例识别的消息中的信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的侦听地址和上下文信息初始化 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 类的新实例。</summary>
      <param name="listenAddress">客户端侦听的终结点地址。</param>
      <param name="context">可由正在相互通信的客户端和服务实例识别的消息中的信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.#ctor(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的侦听地址和上下文信息初始化 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 类的新实例。</summary>
      <param name="listenAddress">客户端侦听的终结点地址。</param>
      <param name="context">可由正在相互通信的客户端和服务实例识别的消息中的信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.AddOrReplaceInMessage(System.ServiceModel.Channels.Message)">
      <summary>在指定的消息内添加或替换当前 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 实例。</summary>
      <param name="message">要在其中添加或替换回调上下文消息属性的消息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.AddOrReplaceInMessageProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>在指定的消息属性集合内添加或替换当前 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 实例。</summary>
      <param name="properties">要在其中添加回调上下文消息属性的消息属性集合。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.CallbackContextMessageProperty.CallbackAddress">
      <summary>获取回调地址。</summary>
      <returns>一个包含回调地址的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CallbackContextMessageProperty.Context">
      <summary>获取与 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 关联的上下文。</summary>
      <returns>上下文。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.CreateCallbackAddress(System.Uri)">
      <summary>将客户端的 <paramref name="listenAddress" /> 及其上下文合并为一个发送给服务的回调地址。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.EndpointAddress" /> 实例。</returns>
      <param name="listenAddress">侦听 URI</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.CreateCopy">
      <summary>创建 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 实例的副本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 实例的副本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.GetListenAddressAndContext(System.ServiceModel.EndpointAddress@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 实例中获取侦听地址和上下文数据。</summary>
      <param name="listenAddress">用于存储侦听地址的引用。</param>
      <param name="context">可由正在相互通信的客户端和服务实例识别的消息中的信息。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.CallbackContextMessageProperty.Name">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 类的属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.CallbackContextMessageProperty@)">
      <summary>尝试从指定的消息获取 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 实例。</summary>
      <returns>如果成功检索回调上下文消息属性，则为 true；否则为 false。</returns>
      <param name="message">要从中获取回调上下文消息属性的消息。</param>
      <param name="contextMessageProperty">用于存储回调上下文消息属性实例的引用。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CallbackContextMessageProperty.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Channels.CallbackContextMessageProperty@)">
      <summary>尝试从指定的消息属性获取 <see cref="T:System.ServiceModel.Channels.CallbackContextMessageProperty" /> 实例。</summary>
      <returns>如果成功检索回调上下文消息属性，则为 true；否则为 false。</returns>
      <param name="properties">要从中获取回调上下文消息属性的消息属性集合。</param>
      <param name="contextMessageProperty">用于存储回调上下文消息属性实例的引用。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelBase">
      <summary>提供自定义通道的基实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.#ctor(System.ServiceModel.Channels.ChannelManagerBase)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelBase" /> 类的新实例。</summary>
      <param name="channelManager">用于提供通道操作（发送、接收、打开和关闭）默认超时的 <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelManager" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultCloseTimeout">
      <summary>获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultOpenTimeout">
      <summary>获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultReceiveTimeout">
      <summary>获取为完成接收操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成接收操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout">
      <summary>获取为完成发送操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成发送操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.GetProperty``1">
      <summary>从通道堆栈的适当层，返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.Manager">
      <summary>获取与当前通道关联的通道管理器。</summary>
      <returns>与当前通道关联的 <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.OnClosed">
      <summary>在向关闭状态过渡期间使用诊断跟踪。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>获取 close 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 close 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>获取 open 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 open 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>获取 receive 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 receive 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>获取 send 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 send 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase">
      <summary>为所有自定义通道工厂提供一个通用基实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>使用指定的默认通信超时初始化 <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> 类的新实例。</summary>
      <param name="timeouts">
        <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />，指定交换消息时打开、发送、接收和关闭操作的默认超时。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultCloseTimeout">
      <summary>获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultOpenTimeout">
      <summary>获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultReceiveTimeout">
      <summary>获取为完成接收操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成接收操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultSendTimeout">
      <summary>获取为完成发送操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成发送操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求的类型化对象 T，如果不存在，则为 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnAbort">
      <summary>在调用了一个同步中止操作，从而引起通信对象转换为关闭状态的情况下，该方法插入对通信对象的处理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作来关闭工厂创建的每个通道。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnClose(System.TimeSpan)">
      <summary>在通信对象转换为打开状态（此过程必须在指定时间间隔内完成）后插入对通信对象的处理。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnEndClose(System.IAsyncResult)">
      <summary>完成一个异步操作来关闭工厂打开的通道。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase`1">
      <summary>为客户端上的通道工厂提供通用的基实现，以创建具有指定类型、与指定地址连接的通道。</summary>
      <typeparam name="TChannel">工厂生成的通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>使用指定的默认通信超时初始化 <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> 类的新实例。</summary>
      <param name="timeouts">指定交换消息时打开、发送、接收和关闭操作的默认超时的 <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>使用指定的终结点地址创建特定类型的通道。</summary>
      <returns>一个 <paramref name="TChannel" /> 类型的通道，它具有指定的 <paramref name="address" />。</returns>
      <param name="address">
        <see cref="T:System.ServiceModel.EndpointAddress" />，它是通道发送消息的目标远程终结点。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>使用指定的传输和终结点地址创建特定类型的通道。</summary>
      <returns>
        <paramref name="TChannel" /> 类型的通道，具有指定的远程和传输地址。</returns>
      <param name="address">
        <see cref="T:System.ServiceModel.EndpointAddress" />，它是通道发送消息的目标远程终结点。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含输出通道发送消息的目标传输地址。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnAbort">
      <summary>中止由通道工厂管理的每个通道。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内，关闭通道工厂的所有关联通道。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnClose(System.TimeSpan)">
      <summary>在指定时间间隔内，关闭通道工厂的所有关联通道。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnCreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>在派生类中实现时，在创建通道时提供一个可扩展点。</summary>
      <returns>一个 <paramref name="TChannel" /> 类型的通道，它具有指定的地址。</returns>
      <param name="address">
        <see cref="T:System.ServiceModel.EndpointAddress" />，它是通道发送消息的目标远程终结点。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含输出通道发送消息的目标传输地址。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnEndClose(System.IAsyncResult)">
      <summary>完成一个异步操作，在指定时间间隔内，关闭通道工厂的所有关联通道。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.ValidateCreateChannel">
      <summary>确认通道工厂是打开的，并且已准备就绪，可以创建通道了。</summary>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
      <exception cref="T:System.InvalidOperationException">当前通道工厂不处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelListenerBase">
      <summary>提供服务上的通道侦听器的通用基实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelListenerBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>使用指定的默认通信超时初始化 <see cref="T:System.ServiceModel.Channels.ChannelListenerBase" /> 类的新实例。</summary>
      <param name="timeouts">指定交换消息时打开、发送、接收和关闭操作的默认超时的 <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.BeginWaitForChannel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在派生类中实现时，开始一个等待通道到达的异步操作。</summary>
      <returns>引用异步等待通道操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成等待通道操作的时间长度。</param>
      <param name="callback">接收异步等待通道操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步等待通道操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通道侦听器尚未打开，因此无法使用。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelListenerBase.DefaultCloseTimeout">
      <summary>获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelListenerBase.DefaultOpenTimeout">
      <summary>获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelListenerBase.DefaultReceiveTimeout">
      <summary>获取为完成接收操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成接收操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelListenerBase.DefaultSendTimeout">
      <summary>获取为完成发送操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成发送操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.EndWaitForChannel(System.IAsyncResult)">
      <summary>在派生类中实现时，完成一个等待通道到达的异步操作。</summary>
      <returns>如果消息已到达，则为 true；否则为 false。</returns>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ChannelListenerBase.EndWaitForChannel(System.IAsyncResult)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求的类型化对象 T，如果不存在，则为 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.OnBeginWaitForChannel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在派生类中实现时，在开始等待通道到达时提供一个可扩展点。</summary>
      <returns>引用异步开始等待操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成开始等待操作的时间。</param>
      <param name="callback">接收异步开始等待操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步开始等待操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.OnEndWaitForChannel(System.IAsyncResult)">
      <summary>在派生类中实现时，在结束等待通道到达时提供一个可扩展点。</summary>
      <returns>如果方法在 <paramref name="timeout" /> 指定的时间间隔结束前完成，则为 true；否则为 false。</returns>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ChannelListenerBase.OnBeginWaitForChannel(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.OnWaitForChannel(System.TimeSpan)">
      <summary>在派生类中重写时，在等待通道到达时提供一个可扩展点。</summary>
      <returns>如果方法在 <paramref name="timeout" /> 指定的时间间隔结束前完成，则为 true；否则为 false。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成等待通道操作的时间长度。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelListenerBase.Uri">
      <summary>在派生类中实现时，获取通道侦听器为传入通道侦听的 URI。</summary>
      <returns>通道侦听器为传入通道侦听的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase.WaitForChannel(System.TimeSpan)">
      <summary>在派生类中实现时，等待通道到达。</summary>
      <returns>如果通道在 <paramref name="timeout" /> 指定的时间间隔结束前到达，则为 true；否则为 false。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成等待通道操作的时间长度。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelListenerBase`1">
      <summary>为服务上的通道侦听器提供通用的基实现，以接受客户端工厂生成的通道。</summary>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelListenerBase`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>使用指定的默认通信超时初始化 <see cref="T:System.ServiceModel.Channels.ChannelListenerBase`1" /> 类的新实例。</summary>
      <param name="timeouts">指定交换消息时打开、发送、接收和关闭操作的默认超时的 <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.AcceptChannel">
      <summary>接受当前通道侦听器指定的类型的通道。</summary>
      <returns>侦听器接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.AcceptChannel(System.TimeSpan)">
      <summary>在指定时间间隔内接受当前通道侦听器指定的类型的通道。</summary>
      <returns>侦听器接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成接受通道操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.BeginAcceptChannel(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，以接受当前通道侦听器指定的类型的通道。</summary>
      <returns>引用异步接受通道操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成接受通道操作的时间。</param>
      <param name="state">接收接受通道操作异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.BeginAcceptChannel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>当在派生类中实现时，开始一个异步操作以在指定时间间隔内接受当前通道侦听器指定的类型的通道。</summary>
      <returns>引用异步接受通道操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成接受通道操作的时间。</param>
      <param name="callback">接收接受通道操作异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步接受通道操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.EndAcceptChannel(System.IAsyncResult)">
      <summary>当在派生类中实现时，完成异步操作以接受通道。</summary>
      <returns>侦听器接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.ChannelListenerBase`1.BeginAcceptChannel" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.OnAcceptChannel(System.TimeSpan)">
      <summary>在派生类中实现时，在接受通道时提供一个可扩展点。</summary>
      <returns>接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成接受通道操作的时间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.OnBeginAcceptChannel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在派生类中实现时，在开始接受通道时提供一个异步可扩展点。</summary>
      <returns>引用异步接受通道操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成接受通道操作的时间。</param>
      <param name="callback">接收接受通道操作异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步接受通道操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelListenerBase`1.OnEndAcceptChannel(System.IAsyncResult)">
      <summary>在派生类中实现时，在完成接受通道时提供一个异步可扩展点。</summary>
      <returns>侦听器接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ChannelListenerBase`1.OnBeginAcceptChannel(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelManagerBase">
      <summary>提供基实现，用以管理与通道和侦听器工厂关联的默认超时。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelManagerBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultReceiveTimeout">
      <summary>在派生类中重写时，获取通道必须完成消息接收的默认时间间隔。</summary>
      <returns>默认 <see cref="T:System.Timespan" />，指定在调用 receive 方法后，通道在超时前必须完成消息接收的时长。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultSendTimeout">
      <summary>在派生类中重写时，获取通道必须完成消息发送的默认时间间隔。</summary>
      <returns>默认 <see cref="T:System.Timespan" />，指定在调用 send 方法后，通道在超时前必须完成消息发送的时长。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>获取 close 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 close 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>获取 open 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 open 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>获取 receive 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 receive 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>获取 send 方法（由通信对象调用）在超时之前的时间间隔。</summary>
      <returns>指定在 send 方法超时之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelParameterCollection">
      <summary>表示通道参数的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor(System.ServiceModel.Channels.IChannel)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> 类的新实例。</summary>
      <param name="channel">其参数位于此集合中的通道。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelParameterCollection.Channel">
      <summary>获取一个通道，该通道的参数位于此集合中。</summary>
      <returns>其参数位于此集合中的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.ClearItems">
      <summary>清除参数集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>使用指定索引将指定的项插入集合中。</summary>
      <param name="index">集合中的项的索引。</param>
      <param name="item">要添加到集合的项。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.PropagateChannelParameters(System.ServiceModel.Channels.IChannel)">
      <summary>将当前集合中的参数添加到指定通道的 <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" />。</summary>
      <param name="innerChannel">接受当前集合的参数的通道。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.RemoveItem(System.Int32)">
      <summary>从集合中移除参数。</summary>
      <param name="index">要移除的参数的索引。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>替换集合中指定索引处的项。</summary>
      <param name="index">要替换的项的索引。</param>
      <param name="item">替代项的值。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelPoolSettings">
      <summary>指定属于服务终结点使用的通道池的通道配额。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelPoolSettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ChannelPoolSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelPoolSettings.IdleTimeout">
      <summary>获取或设置池中的通道在关闭前可空闲的最大时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定池中的通道在关闭前可空闲的最大时间间隔。 默认值为 2 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或大于 T:System.Int32.MaxValue（以毫秒为单位）。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelPoolSettings.LeaseTimeout">
      <summary>获取或设置通道在关闭前的生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定通道在关闭前的生存期。 默认值为 10 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelPoolSettings.MaxOutboundChannelsPerEndpoint">
      <summary>获取或设置可由服务启动的连接到远程终结点的最大通道数目。</summary>
      <returns>一个正整数，指定池中可由服务启动的连接到远程终结点的最大通道数目。 默认值为 10 个通道。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ClientWebSocketFactory">
      <summary>表示客户端 web 套接字工厂。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ClientWebSocketFactory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ClientWebSocketFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ClientWebSocketFactory.CreateWebSocket(System.IO.Stream,System.ServiceModel.Channels.WebSocketTransportSettings)">
      <summary>创建指定连接的新网络套接字。</summary>
      <returns>一个新的 <see cref="T:System.Net.WebSockets.WebSocket" /> 对象。</returns>
      <param name="connection">Web 套接连接。</param>
      <param name="settings">网络套接字设置。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ClientWebSocketFactory.WebSocketVersion">
      <summary>获取网络套接字工厂的版本。</summary>
      <returns>网络套接字工厂的版本。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.CommunicationObject">
      <summary>为系统中所有面向通信的对象（包括通道、侦听器以及通道和侦听器工厂）公用的基本状态机提供通用的基实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor(System.Object)">
      <summary>使用相互排斥锁初始化 <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> 类的新实例可保护指定的状态转换。</summary>
      <param name="mutex">在状态转换过程中保护类实例的相互排斥锁。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Abort">
      <summary>使通信对象立即从其当前状态转换到正在关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定超时时间内关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定时间间隔内打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <param name="callback">接收异步打开操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从当前状态转换到关闭状态。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closed">
      <summary>当通信对象转换到已关闭状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closing">
      <summary>当通信对象转换到正在关闭状态时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
      <summary>在派生类中重写时，获取为完成关闭操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
      <summary>在派生类中重写时，获取为完成打开操作提供的默认时间间隔。</summary>
      <returns>默认的 <see cref="T:System.Timespan" />，指定在超时前可用于完成打开操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)">
      <summary>完成一个异步操作以关闭通信对象。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>完成一个异步操作以打开通信对象。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Fault">
      <summary>使通信对象从其当前状态转换到出错状态。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Faulted">
      <summary>在通信对象转换到出错状态时发生。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType">
      <summary>获取通信对象的类型。</summary>
      <returns>通信对象的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed">
      <summary>获取一个值，该值指示通信对象是否已被释放。</summary>
      <returns>如果通信对象处于已关闭状态，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
      <summary>在调用了一个同步中止操作，从而引起通信对象转换为关闭状态的情况下，该方法插入对通信对象的处理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在调用了异步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法将插入处理。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收关闭操作异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在调用了异步打开操作，从而引起通信对象转换为正在打开状态的情况下，该方法将插入处理。</summary>
      <returns>引用打开操作异步的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <param name="callback">接收打开操作的异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与打开操作异步相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
      <summary>在调用了一个同步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法插入对通信对象的处理。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">对处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态的对象调用了 <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" />。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
      <exception cref="T:System.ServiceModel.CommunicationException">关闭对象时发生通信错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosed">
      <summary>在通信对象转换到正在关闭状态的过程中被调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosing">
      <summary>在通信对象转换到正在关闭状态的过程中被调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
      <summary>在关闭通信对象时完成一个异步操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
      <summary>在打开通信对象时完成一个异步操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted">
      <summary>在调用了同步错误操作，从而引起通信对象转换为出错状态的情况下，该方法插入对通信对象的处理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
      <summary>在通信对象转换为打开状态（此过程必须在指定时间间隔内完成）后插入对通信对象的处理。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
      <summary>在通信对象转换到已打开状态的过程中被调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpening">
      <summary>在通信对象转换到正在打开状态的过程中被调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open">
      <summary>使通信对象从已创建状态转换到已打开状态。</summary>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.TimeoutException">在操作完成之前超出了分配给该操作的默认时间间隔。</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opened">
      <summary>当通信对象转换到已打开状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opening">
      <summary>当通信对象转换到正在打开状态时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.State">
      <summary>获取指示通信对象当前状态的值。</summary>
      <returns>
        <see cref="T:System.ServiceModel.CommunicationState" /> 枚举中的一个值，指示对象的当前状态。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.ThisLock">
      <summary>获取在状态转换过程中保护类实例的相互排斥锁。</summary>
      <returns>在状态转换过程中保护类实例的相互排斥锁。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed">
      <summary>如果通信对象已释放，则引发异常。</summary>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable">
      <summary>如果通信对象的 <see cref="P:System.ServiceModel.Channels.CommunicationObject.State" /> 属性未设置为 <see cref="F:System.ServiceModel.CommunicationState.Created" /> 状态，则引发异常。</summary>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen">
      <summary>如果通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态，则引发异常。</summary>
      <exception cref="T:System.InvalidOperationException">通信对象未处于 <see cref="F:System.ServiceModel.CommunicationState.Created" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状态，因此无法使用。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态，因此无法修改。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态，因此无法修改。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.CompositeDuplexBindingElement">
      <summary>表示一个绑定元素，客户端在必须公开一个终结点以使服务可以将消息发送回客户端时使用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CompositeDuplexBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个通道工厂，该通道工厂可以创建一个复合双工通道。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，可以创建 <paramref name="TChannel" /> 类型的复合双工通道。</returns>
      <param name="context">用于提供生成通道工厂所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">工厂生成的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TChannel" /> 的类型不为 <see cref="T:System.ServiceModel.Channels.IOutputChannel" />，不受支持。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个通道侦听器，该通道侦听器可以接受复合双工通道。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />，可以接受 <paramref name="TChannel" /> 类型的复合双工通道。</returns>
      <param name="context">用于提供生成通道侦听器所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">侦听器接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TChannel" /> 的类型不为 <see cref="T:System.ServiceModel.Channels.IInputChannel" />，不受支持。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示绑定是否可以创建能够生成符合上下文需要的特定类型通道的通道工厂。</summary>
      <returns>如果绑定可以生成通道工厂，则为 true；否则为 false。</returns>
      <param name="context">用于提供生成通道侦听器所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示绑定是否可以生成通道侦听器，且该通道侦听器能够接受符合上下文需要的特定类型的通道。</summary>
      <returns>如果可以生成接受特定类型通道所需的通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">用于提供生成通道侦听器所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">侦听器接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress">
      <summary>获取或设置客户端的基址。</summary>
      <returns>一个包含客户端基址的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.Clone">
      <summary>返回当前绑定元素的深层克隆。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.CompositeDuplexBindingElement" />，它是当前绑定元素的深层克隆。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回其中一个通道堆栈的适当层所请求的类型化对象。</summary>
      <returns>如果受支持，则为所请求的类型化对象 <paramref name="T" />；否则，为 null。</returns>
      <param name="context">用于提供生成通道所需上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">正在测试其支持性的类型化对象。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出关于绑定的自定义策略断言，该自定义断言表示在绑定中出现复合双工。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.CompositeDuplexBindingElementImporter">
      <summary>提供策略导入扩展，用以将策略断言映射到要求客户端必须公开服务终结点才能将消息发送回客户端的 Windows Communication Foundation (WCF) 绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CompositeDuplexBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CompositeDuplexBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导入复合双工绑定的自定义策略断言。</summary>
      <param name="importer">可导入元数据信息的 <see cref="T:System.ServiceModel.Description.MetadataImporter" />。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> 对象，其中包含可以导入的策略断言，以及可向其添加实现策略的自定义绑定元素的绑定元素集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="importer" /> 或 <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.CompressionFormat">
      <summary>指定渠道压缩格式。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.CompressionFormat.Deflate">
      <summary>已用的 Deflate 压缩格式。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.CompressionFormat.GZip">
      <summary>GZip 压缩格式。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.CompressionFormat.None">
      <summary>none 压缩格式。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement">
      <summary>一个抽象类，可以向基 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> 补充面向连接的传输（如 TCP 和命名管道）所通用的其他属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果可以生成通道工厂，则为 true；否则为 false。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">要检查的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道侦听器。</summary>
      <returns>如果可以生成通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">要检查的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.ChannelInitializationTimeout">
      <summary>获取或设置确定通道在断开连接前可处于初始化状态的最长时间的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，在其之后的通道初始化请求就会超时。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.ConnectionBufferSize">
      <summary>获取或设置用于从客户端或服务传输网络上的序列化消息块的缓冲区大小。</summary>
      <returns>连接缓冲区的大小。 默认值为 8192 个字节。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定堆栈中获取属性（如果存在）。</summary>
      <returns>绑定堆栈中的一个 <paramref name="T" /> 对象（如果存在）。</returns>
      <param name="context">绑定上下文。</param>
      <typeparam name="T">属性的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>
        <see cref="T:System.ServiceModel.HostNameComparisonMode" /> 值，该值指示在将传入的请求路由到终结点 URI 时，是否包含主机名。 默认值为 <see cref="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />，表示在比较过程中忽略主机名与端口号。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是有效的 <see cref="T:System.ServiceModel.HostnameComparisonMode" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxBufferSize">
      <summary>获取或设置要使用的缓冲区的最大大小。 对于经过流处理的消息，该值最少应为以缓冲模式读取的消息头的最大可能大小。</summary>
      <returns>内存中用于对传入消息进行缓冲的最大字节数。 默认值为 65,536 个字节。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxOutputDelay">
      <summary>获取或设置消息块或完整消息在发出之前可以在内存中保持缓冲的最大时间间隔。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定消息块或完整消息在发出之前可以在内存中保持缓冲的最大时间间隔。 默认值为 2 秒。 只有在传出消息的 <see cref="P:System.ServiceModel.Channels.MessageProperties.AllowOutputBatching" /> 属性设置为 true 时，该属性才有意义。 否则，该值就会被忽略，消息将立即发送。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingAccepts">
      <summary>获取或设置服务可等待许可证处理至服务的传入连接的最大通道数量。</summary>
      <returns>服务可拥有的侦听器上正在等待的最大通道数。 属性的默认值为 2 * 处理器数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.MaxPendingConnections">
      <summary>获取或设置在服务上等待调度的最大连接数。</summary>
      <returns>在服务上等待调度的最大入站连接数。 属性的默认值为 12 * 处理器数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.ShouldSerializeMaxPendingAccepts">
      <summary>指示连接针对的传输绑定元素是否应序列化最长等待接受。</summary>
      <returns>如果连接针对的传输绑定元素序列化最长等待接受，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.ShouldSerializeMaxPendingConnections">
      <summary>指示连接针对的传输绑定元素是否应序列化最长等待连接。</summary>
      <returns>如果连接针对的传输绑定元素序列化最长等待连接，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出有关绑定的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exporter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exporter" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>为协定将自定义 Web 服务描述语言 (WSDL) 元素写入到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>为终结点将自定义 Web 服务描述语言 (WSDL) 元素添加到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="endpointContext">提供从导出的 WSDL 元素到终结点说明的映射。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement.TransferMode">
      <summary>获取或设置一个值，该值指示通过面向连接的传输对消息进行缓冲还是流处理。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TransferMode" /> 值，该值指示通道是使用消息传输的流处理模式还是缓冲模式。 默认值为 <see cref="F:System.ServiceModel.TransferMode.Buffered" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是有效的 <see cref="T:System.ServiceModel.TransferMode" />。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ContextBindingElement">
      <summary>提供作为绑定元素上下文一部分的保护级别和交换机制以及用于生成通道侦听器和工厂的功能。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ContextBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.#ctor(System.Net.Security.ProtectionLevel)">
      <summary>使用指定的保护级别初始化 <see cref="T:System.ServiceModel.Channels.ContextBindingElement" /> 类的新实例。</summary>
      <param name="protectionLevel">绑定元素的 <see cref="T:System.Net.Security.ProtectionLevel" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="protectionLevel" /> 无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.#ctor(System.Net.Security.ProtectionLevel,System.ServiceModel.Channels.ContextExchangeMechanism)">
      <summary>使用指定的保护级别和交换机制初始化 <see cref="T:System.ServiceModel.Channels.ContextBindingElement" /> 类的新实例。</summary>
      <param name="protectionLevel">绑定元素的 <see cref="T:System.Net.Security.ProtectionLevel" />。</param>
      <param name="contextExchangeMechanism">指定用于交换绑定元素上下文的机制的 <see cref="T:System.ServiceModel.Channels.ContextExchangeMechanism" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="protectionLevel" /> 或 <paramref name="contextExchangeMechanism" /> 无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.#ctor(System.Net.Security.ProtectionLevel,System.ServiceModel.Channels.ContextExchangeMechanism,System.Uri)">
      <summary>使用指定的保护级别、上下文交换机制和客户端回调地址初始化 <see cref="T:System.ServiceModel.Channels.ContextBindingElement" /> 类的新实例。</summary>
      <param name="protectionLevel">绑定元素的保护级别。</param>
      <param name="contextExchangeMechanism">用于交换绑定元素上下文的机制。</param>
      <param name="clientCallbackAddress">客户端回调地址。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.#ctor(System.Net.Security.ProtectionLevel,System.ServiceModel.Channels.ContextExchangeMechanism,System.Uri,System.Boolean)">
      <summary>使用指定的保护级别、上下文交换机制、客户端回调地址和一个用于指定是否启用上下文管理的值，初始化 <see cref="T:System.ServiceModel.Channels.ContextBindingElement" /> 类的新实例。</summary>
      <param name="protectionLevel">绑定元素的保护级别。</param>
      <param name="contextExchangeMechanism">用于交换绑定元素上下文的机制。</param>
      <param name="clientCallbackAddress">客户端回调地址。</param>
      <param name="contextManagementEnabled">如果启用上下文管理，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在客户端上生成通道工厂堆栈，该通道工厂堆栈可为指定上下文创建指定类型的通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 设置为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在客户端生成通道侦听器堆栈，该通道侦听器堆栈接受针对指定上下文的具有指定类型的通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />。</returns>
      <param name="context">侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 设置为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示当前绑定元素是否可以为指定的通道类型和上下文生成工厂。</summary>
      <returns>如果可以在客户端上生成指定的通道工厂堆栈，则为 true；否则为 false。</returns>
      <param name="context">工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。 默认情况下仅允许 <see cref="T:System.ServiceModel.Channels.IRequestChannel" />、<see cref="T:System.ServiceModel.Channels.IRequestSessionChannel" /> 和 <see cref="T:System.ServiceModel.Channels.IDuplexSessionChannel" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示当前绑定是否可以为指定的通道类型和上下文生成侦听器。</summary>
      <returns>如果可以在服务上生成指定的通道侦听器堆栈，则为 true；否则为 false。</returns>
      <param name="context">侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。 默认情况下仅允许 <see cref="T:System.ServiceModel.Channels.IReplyChannel" />、<see cref="T:System.ServiceModel.Channels.IReplySessionChannel" /> 和 <see cref="T:System.ServiceModel.Channels.IDuplexSessionChannel" />。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ContextBindingElement.ClientCallbackAddress">
      <summary>获取或设置绑定元素的客户端回调地址。</summary>
      <returns>客户端回调地址。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.Clone">
      <summary>创建一个从当前对象初始化的新 <see cref="T:System.ServiceModel.Channels.ContextBindingElement" /> 对象。</summary>
      <returns>从当前对象初始化的 <see cref="T:System.ServiceModel.Channels.ContextBindingElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ContextBindingElement.ContextExchangeMechanism">
      <summary>获取或设置用于传递绑定元素上下文的交换机制。</summary>
      <returns>指定用于交换绑定元素上下文的机制的 <see cref="T:System.ServiceModel.Channels.ContextExchangeMechanism" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置值无效。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ContextBindingElement.ContextManagementEnabled">
      <summary>获取或设置一个指定是否已启用上下文管理的值。</summary>
      <returns>如果启用上下文管理，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>将自定义策略断言写入到绑定元素的上下文中。</summary>
      <param name="exporter">可导出元数据信息的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null 或绑定中的策略断言为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从通道堆栈的适当层返回具有指定上下文的类型化对象。</summary>
      <returns>所请求的类型化对象 <paramref name="T" />（如果存在）。</returns>
      <param name="context">指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ContextBindingElement.ProtectionLevel">
      <summary>获取或设置上下文中绑定元素的安全级别。</summary>
      <returns>绑定元素的 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置值无效。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ContextBindingElementImporter">
      <summary>启用策略和 WSDL 扩展以及要导入的协定。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ContextBindingElementImporter" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElementImporter.BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>在导入前使用。</summary>
      <param name="wsdlDocuments">
        <see cref="T:System.Web.Services.Description.ServiceDescription" /> 的实例的 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />。</param>
      <param name="xmlSchemas">包含 XML 架构定义语言 (XSD) 架构的缓存的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <param name="policy">
        <see cref="T:System.Xml.XmlElement" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElementImporter.ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>导入协定。</summary>
      <param name="importer">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElementImporter.ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>导入终结点。</summary>
      <param name="importer">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="importer" /> 或 <paramref name="context" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextBindingElementImporter.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导入元数据。</summary>
      <param name="importer">
        <see cref="T:System.ServiceModel.Description.MetadataImporter" />。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="importer" /> 或 <paramref name="context" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ServiceModel.Channels.ContextExchangeMechanism">
      <summary>指定 HTTP Cookie 或 SOAP 标头是否是交换客户端和服务之间对话的上下文所用的机制。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.ServiceModel.Channels.ContextExchangeMechanism.ContextSoapHeader">
      <summary>使用 SOAP 标头来交换上下文。 这是默认的交换机制。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ContextExchangeMechanism.HttpCookie">
      <summary>使用 HTTP Cookie 来交换上下文。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ContextMessageProperty">
      <summary>一个用于在客户端或服务上的应用程序层和通道层之间传递上下文的属性。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextMessageProperty.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>用指定的上下文初始化 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" /> 类的新实例。</summary>
      <param name="context">包含用于将消息与客户端和服务之间的特定对话相关联的上下文信息的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextMessageProperty.AddOrReplaceInMessage(System.ServiceModel.Channels.Message)">
      <summary>设置 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" /> 当前实例的指定 <see cref="T:System.ServiceModel.Channels.Message" /> 中的 ContextMessageProperty 属性的值。</summary>
      <param name="message">要设置其上下文消息属性的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextMessageProperty.AddOrReplaceInMessageProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>设置 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" /> 当前实例的指定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 集合中的 ContextMessageProperty 属性的值。</summary>
      <param name="properties">要设置其上下文消息属性的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="properties" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Channels.ContextMessageProperty.Context">
      <summary>获取用于在客户端和服务之间的对话内关联消息的上下文。</summary>
      <returns>包含用于在客户端和服务之间的对话内关联消息的上下文信息的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextMessageProperty.CreateCopy">
      <summary>创建 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" /> 的当前实例的副本。</summary>
      <returns>包含 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" /> 当前实例密封副本的 <see cref="T:System.ServiceModel.Channels.IMessageProperty" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Channels.ContextMessageProperty.Name">
      <summary>获取上下文消息属性的名称。</summary>
      <returns>字符串“ContextMessageProperty”。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextMessageProperty.TryCreateFromHttpCookieHeader(System.String,System.ServiceModel.Channels.ContextMessageProperty@)">
      <summary>尝试从指定 HTTP Cookie 的键/值对实例化 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" />。</summary>
      <returns>当从 <paramref name="httpCookieHeader" /> 中获取 ContextMessageProperty 的值时为 true，否则为 false。</returns>
      <param name="httpCookieHeader">要从中初始化 <paramref name="context" /> 属性值的 HTTP Cookie 标头的名称。</param>
      <param name="context">如果此方法返回 true 时，则 <paramref name="context" /> 将包含一个 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" />，其中包含与 <paramref name="httpCookieHeader" /> 关联的 ContextMessageProperty。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpCookieHeader" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextMessageProperty.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.ContextMessageProperty@)">
      <summary>尝试从指定消息的属性获取 ContextMessageProperty。</summary>
      <returns>当从 <paramref name="message" /> 中获取 ContextMessageProperty 的值时为 true，否则为 false。</returns>
      <param name="message">要从中检索上下文消息属性的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="contextMessageProperty">如果此方法返回 true 时，则 <paramref name="contextMessageProperty" /> 将包含一个 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" />，其中包含与 <paramref name="message" /> 关联的 ContextMessageProperty。 该参数未经初始化即被传递。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Channels.ContextMessageProperty.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Channels.ContextMessageProperty@)">
      <summary>尝试从指定的消息属性集合获取 ContextMessageProperty。</summary>
      <returns>当从 <paramref name="properties" /> 中获取 ContextMessageProperty 的值时为 true，否则为 false。</returns>
      <param name="properties">要从中检索上下文消息属性的 <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</param>
      <param name="contextMessageProperty">如果此方法返回 true 时，则 <paramref name="contextMessageProperty" /> 将包含一个 <see cref="T:System.ServiceModel.Channels.ContextMessageProperty" />，其中包含与 <paramref name="properties" /> 关联的 ContextMessageProperty。 该参数未经初始化即被传递。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty">
      <summary>提供一个抽象基类以便将相关键计算延迟到所有相关数据可用后执行。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.#ctor(System.Collections.Generic.ICollection{System.String})">
      <summary>由派生类调用以初始化派生类的新实例，此实例使用计算相关性所需的指定相关数据集。</summary>
      <param name="neededData">计算相关性所需的相关数据。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.#ctor(System.ServiceModel.Channels.CorrelationCallbackMessageProperty)">
      <summary>由派生类调用以初始化派生类的新实例，此实例使用来自另一个 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" /> 派生类实例的所需相关数据。</summary>
      <param name="callback">要复制的 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" /> 派生类实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.AddData(System.String,System.Func{System.String})">
      <summary>将所需的相关数据添加到属性。</summary>
      <param name="name">相关数据值的名称。</param>
      <param name="value">提供相关数据的值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.BeginFinalizeCorrelation(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在所有相关信息可用时由相关协议调用以异步构造相关性。</summary>
      <returns>对当前异步操作的引用。</returns>
      <param name="message">要关联的消息。</param>
      <param name="timeout">时间间隔，必须在其中完成相关性，否则将引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">完成相关性计算时将要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.CreateCopy">
      <summary>在派生类中重写时，初始化并返回派生消息属性实例的副本。</summary>
      <returns>派生消息属性实例的副本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.EndFinalizeCorrelation(System.IAsyncResult)">
      <summary>返回为获得相关性而异步准备的消息。</summary>
      <returns>为获得相关性而准备的消息。</returns>
      <param name="result">引用了异步 <see cref="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.BeginFinalizeCorrelation(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" /> 操作的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.FinalizeCorrelation(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>在所有相关信息可用时由相关协议调用以构造相关性。</summary>
      <returns>关联的消息。</returns>
      <param name="message">要关联的消息。</param>
      <param name="timeout">时间间隔，必须在其中完成相关性计算，否则将引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.IsFullyDefined">
      <summary>确定 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" /> 是否具有所有必需的相关数据。</summary>
      <returns>如果存在所有必需的相关数据，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.Name">
      <summary>获取此消息属性的名称：“CorrelationCallbackMessageProperty”。</summary>
      <returns>字符串值“CorrelationCallbackMessageProperty”。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.NeededData">
      <summary>获取在应用相关性之前必需的相关数据的列表。</summary>
      <returns>必需的相关数据的列表。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.OnBeginFinalizeCorrelation(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>当在派生类中重写时，异步执行对指定消息的相关性计算。</summary>
      <returns>对当前异步操作的引用。</returns>
      <param name="message">要关联的消息。</param>
      <param name="timeout">时间间隔，必须在其中完成相关性计算，否则将引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">完成相关性计算时将要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.OnEndFinalizeCorrelation(System.IAsyncResult)">
      <summary>在派生类中重写时，返回为获得相关性而异步准备的消息。</summary>
      <returns>关联的消息。</returns>
      <param name="result">引用了异步 <see cref="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.BeginFinalizeCorrelation(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" /> 操作的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.OnFinalizeCorrelation(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>在派生类中重写时，执行对指定消息的相关性计算。</summary>
      <returns>关联的消息。</returns>
      <param name="message">要关联的消息。</param>
      <param name="timeout">时间间隔，必须在其中完成相关性计算，否则将引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.CorrelationCallbackMessageProperty@)">
      <summary>尝试从指定消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 获取 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" />。</summary>
      <returns>如果消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 包含一个 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" />，则为 true；否则为 false。</returns>
      <param name="message">包含要检查的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 的消息。</param>
      <param name="property">当此方法返回时，将包含指定消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 中含有的 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" />；否则为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationCallbackMessageProperty.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Channels.CorrelationCallbackMessageProperty@)">
      <summary>尝试从指定的消息属性获取 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" />。</summary>
      <returns>如果消息属性包含 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" />，则为 true；否则为 false。</returns>
      <param name="properties">要检查的消息属性。</param>
      <param name="property">当此方法返回时，将包含指定的消息属性中含有的 <see cref="T:System.ServiceModel.Channels.CorrelationCallbackMessageProperty" />；否则为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CorrelationDataDescription">
      <summary>允许特定通道选择提供相关数据，并指定提供数据的条件，例如，数据是默认提供、选择性提供、发送时提供、发送前提供还是接收时提供。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataDescription.#ctor">
      <summary>由派生类函数调用以初始化对象。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationDataDescription.IsDefault">
      <summary>在派生类中重写时，指示相关数据是否应包含在默认生成的相关查询中。</summary>
      <returns>如果相关数据应包含在默认生成的相关查询中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationDataDescription.IsOptional">
      <summary>在派生类中重写时，指示相关数据是否可以作为查询的可选部分。</summary>
      <returns>如果关联数据是可选的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationDataDescription.KnownBeforeSend">
      <summary>在派生类中重写时，指示任何数据在传输之前是否是完全已知的。</summary>
      <returns>如果数据在传输之前是已知的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationDataDescription.Name">
      <summary>在派生类中重写时，获取提供相关数据的相关协议的名称。</summary>
      <returns>提供相关数据的相关协议的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationDataDescription.ReceiveValue">
      <summary>在派生类中重写时，指示在接收消息时当前 <see cref="T:System.ServiceModel.Channels.CorrelationDataDescription" /> 是否可用。</summary>
      <returns>如果在接收消息时当前 <see cref="T:System.ServiceModel.Channels.CorrelationDataDescription" /> 可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationDataDescription.SendValue">
      <summary>在派生类中重写时，指示在发送消息时当前 <see cref="T:System.ServiceModel.Channels.CorrelationDataDescription" /> 是否可用。</summary>
      <returns>如果在发送消息时当前 <see cref="T:System.ServiceModel.Channels.CorrelationDataDescription" /> 可用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.CorrelationDataMessageProperty">
      <summary>提供一个消息属性，该属性将会随着协议的应用（例如，通过传入信息从 <see cref="T:System.ServiceModel.MessageQuerySet" /> 返回数据时）累积消息的其他相关信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataMessageProperty.Add(System.String,System.Func{System.String})">
      <summary>将相关数据提供程序添加到该属性的提供程序专用字典。</summary>
      <param name="name">相关数据提供程序的名称。</param>
      <param name="dataProvider">相关数据提供程序。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataMessageProperty.AddData(System.ServiceModel.Channels.Message,System.String,System.Func{System.String})">
      <summary>将相关数据添加到指定的消息。</summary>
      <param name="message">要修改的消息。</param>
      <param name="name">相关数据提供程序的名称。</param>
      <param name="dataProvider">相关数据提供程序。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataMessageProperty.CreateCopy">
      <summary>初始化并返回一个新的 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" /> 实例，它是当前 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" /> 实例的副本。</summary>
      <returns>新实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationDataMessageProperty.Name">
      <summary>获取此消息属性的名称：“CorrelationDataMessageProperty”。</summary>
      <returns>字符串值“CorrelationDataMessageProperty”。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataMessageProperty.Remove(System.String)">
      <summary>将相关数据提供程序从数据提供程序的专用字典中删除。</summary>
      <returns>如果该移除操作成功，则为 true；否则为 false。</returns>
      <param name="name">要移除的数据提供程序的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataMessageProperty.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.CorrelationDataMessageProperty@)">
      <summary>尝试从指定消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 获取 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />。</summary>
      <returns>如果消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 属性包含 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" /> 类，则为 true；否则为 false。</returns>
      <param name="message">包含要检查的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 的消息。</param>
      <param name="property">当此方法返回时，将包含指定消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 中含有的 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />；否则为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataMessageProperty.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Channels.CorrelationDataMessageProperty@)">
      <summary>尝试从指定的消息属性获取 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />。</summary>
      <returns>如果消息属性包含 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />，则为 true；否则为 false。</returns>
      <param name="properties">要检查的消息属性。</param>
      <param name="property">当此方法返回时，将包含指定的消息属性中含有的 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />；否则为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationDataMessageProperty.TryGetValue(System.String,System.String@)">
      <summary>尝试从数据提供程序专用字典中检索指定的相关数据提供程序。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" /> 包含指定的相关数据提供程序，则为 true；否则为 false。</returns>
      <param name="name">数据提供程序的名称。</param>
      <param name="value">当此方法返回时，将包含存在的数据提供程序的值；否则为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CorrelationKey">
      <summary>表示某段应用程序数据和实例之间的关联。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationKey.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Xml.Linq.XName,System.Xml.Linq.XNamespace)">
      <summary>使用指定的密钥数据、范围名称和提供程序初始化 <see cref="T:System.ServiceModel.Channels.CorrelationKey" /> 类的新实例。</summary>
      <param name="keyData">密钥数据。</param>
      <param name="scopeName">范围名称。</param>
      <param name="provider">提供程序。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationKey.KeyData">
      <summary>获取密钥数据字典。</summary>
      <returns>密钥数据字典。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationKey.KeyString">
      <summary>获取密钥数据的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>密钥数据。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationKey.Name">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Channels.CorrelationKey" /> 的名称。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.CorrelationKey" /> 的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationKey.Provider">
      <summary>获取提供程序。</summary>
      <returns>提供程序。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationKey.ScopeName">
      <summary>获取范围名称。</summary>
      <returns>范围名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.CorrelationMessageProperty">
      <summary>提供一个消息属性，该属性包含在对消息应用相关计算之后的相关实例键。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationMessageProperty.#ctor(System.Runtime.DurableInstancing.InstanceKey,System.Collections.Generic.IEnumerable{System.Runtime.DurableInstancing.InstanceKey})">
      <summary>使用指定的相关键初始化 <see cref="T:System.Runtime.Persistence.CorrelationMessageProperty" /> 类的新实例。</summary>
      <param name="correlationKey">主相关的实例键。</param>
      <param name="additionalKeys">其他相关的实例键。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationMessageProperty.#ctor(System.Runtime.DurableInstancing.InstanceKey,System.Collections.Generic.IEnumerable{System.Runtime.DurableInstancing.InstanceKey},System.Collections.Generic.IEnumerable{System.Runtime.DurableInstancing.InstanceKey})">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" /> 类的新实例。</summary>
      <param name="correlationKey">相关键。</param>
      <param name="additionalKeys">其他键。</param>
      <param name="transientCorrelations">瞬变相关。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationMessageProperty.AdditionalKeys">
      <summary>获取一个包含此 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" /> 其他实例键的集合。</summary>
      <returns>其他实例键。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationMessageProperty.CorrelationKey">
      <summary>获取此 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" /> 的主相关实例键。</summary>
      <returns>主相关实例键。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationMessageProperty.Name">
      <summary>获取此 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" /> 的名称。</summary>
      <returns>字符串 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CorrelationMessageProperty.TransientCorrelations">
      <summary>获取此 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" /> 的瞬态相关实例键的集合。</summary>
      <returns>瞬变相关实例键的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationMessageProperty.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.CorrelationMessageProperty@)">
      <summary>尝试从指定消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 获取 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" />。</summary>
      <returns>如果消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 包含一个 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" />，则为 true；否则为 false。</returns>
      <param name="message">包含要检查的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 的消息。</param>
      <param name="property">当此方法返回时，将包含由指定消息的 <see cref="P:System.ServiceModel.Channels.Message.Properties" /> 所包含的 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" />（如果有的话）；否则为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CorrelationMessageProperty.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Channels.CorrelationMessageProperty@)">
      <summary>尝试从指定的消息属性获取 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" />。</summary>
      <returns>如果消息属性包含 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" />，则为 true；否则为 false。</returns>
      <param name="properties">要检查的消息属性。</param>
      <param name="property">当此方法返回时，则将包含由指定的消息属性所包含的 <see cref="T:System.ServiceModel.Channels.CorrelationMessageProperty" />（如果有的话）；否则为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CustomBinding">
      <summary>从一个绑定元素列表定义绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>使用完整通道堆栈中的绑定元素初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">一个类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中以从上至下的顺序包含通道堆栈的绑定元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>从指定绑定的值初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="binding">用于初始化自定义绑定的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>使用一个绑定元素数组初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">用于初始化自定义绑定的类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="configurationName">configurationName 属性的值，该属性标识 binding 元素，该元素的设置用于初始化绑定。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">由 <paramref name="configurationName" /> 标识的绑定元素为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.String,System.String,System.ServiceModel.Channels.BindingElement[])">
      <summary>从一个具有指定名称和命名空间的绑定元素数组初始化 <see cref="T:System.ServiceModel.Channels.CustomBinding" /> 类的新实例。</summary>
      <param name="name">绑定的名称。</param>
      <param name="ns">绑定的命名空间。</param>
      <param name="bindingElementsInTopDownChannelStackOrder">用于初始化自定义绑定的类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.CreateBindingElements">
      <summary>返回由自定义绑定中的绑定元素构成的泛型集合。</summary>
      <returns>一个类型为 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象，其中包含自定义绑定中的绑定元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Elements">
      <summary>从自定义绑定获取绑定元素。</summary>
      <returns>一个包含自定义绑定中的绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Scheme">
      <summary>获取由自定义绑定使用的传输的 URI 方案。</summary>
      <returns>自定义绑定使用的传输的 URI 方案；如果没有传输（<see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> 为 null），则为空字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.DeliveryFailure">
      <summary>为从队列读取的消息指定可能的传递失败类型。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.AccessDenied">
      <summary>发送方不具有将消息放入目标队列的访问权限。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.BadDestinationQueue">
      <summary>未找到目标队列。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.BadEncryption">
      <summary>目标队列管理器无法对消息进行解密。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.BadSignature">
      <summary>目标队列管理器无法对消息进行身份验证，原因是附加的签名无效。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.CouldNotEncrypt">
      <summary>源队列管理器无法对消息进行加密。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.HopCountExceeded">
      <summary>已超出消息跃点计数（跃点计数指示中间服务器的数目）。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.NotTransactionalMessage">
      <summary>非事务性消息发送到了事务性队列中。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.NotTransactionalQueue">
      <summary>事务性消息发送到了非事务性队列中。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.Purged">
      <summary>在到达目标队列之前，消息已被清除。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.QueueDeleted">
      <summary>在消息可传递到应用程序之前，目标队列已被删除。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.QueueExceedMaximumSize">
      <summary>目标队列已满，因此消息未进行传递。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.QueuePurged">
      <summary>队列已清除，消息不再存在。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.ReachQueueTimeout">
      <summary>消息未能在超时前到达目标队列。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.ReceiveTimeout">
      <summary>消息未按时传递到应用程序。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryFailure.Unknown">
      <summary>发生未知错误。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.DeliveryStatus">
      <summary>一个枚举，指定消息传递结果不确定或未传递消息时消息的传递状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryStatus.InDoubt">
      <summary>消息传递结果不确定。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.DeliveryStatus.NotDelivered">
      <summary>消息未被传递。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.FaultConverter">
      <summary>将通道引发的异常转换为符合通道协议的 SOAP 错误消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.FaultConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.GetDefaultFaultConverter(System.ServiceModel.Channels.MessageVersion)">
      <summary>获取默认错误转换器。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.FaultConverter" /> 的一个实例。</returns>
      <param name="version">消息版本。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>尝试创建异常。</summary>
      <returns>如果错误成功转换，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="message">错误消息。</param>
      <param name="fault">错误。</param>
      <param name="exception">如果转换成功，则为作为 out 参数返回的 SOAP 异常。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateFaultMessage(System.Exception,System.ServiceModel.Channels.Message@)">
      <summary>尝试在错误转换成 SOAP 异常后创建错误消息。</summary>
      <returns>如果成功创建了错误消息，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="exception">SOAP 异常。</param>
      <param name="message">错误消息作为 out 参数返回。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.TryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>使用错误检查包装 <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" />。</summary>
      <returns>如果错误成功转换，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="message">错误消息。</param>
      <param name="fault">错误。</param>
      <param name="exception">如果转换成功，则为作为 out 参数返回的 SOAP 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 或 <paramref name="fault" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 或 <paramref name="fault" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 或 <paramref name="fault" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.TryCreateFaultMessage(System.Exception,System.ServiceModel.Channels.Message@)">
      <summary>使用错误检查包装 <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateFaultMessage(System.Exception,System.ServiceModel.Channels.Message@)" />。</summary>
      <returns>如果成功创建了错误消息，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="exception">SOAP 异常。</param>
      <param name="message">错误消息作为 out 参数返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> 返回了 true，但 <paramref name="message" /> 是 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> 返回了 true，但 <paramref name="message" /> 是 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement">
      <summary>启用对 HTTP 请求和响应中的 HTTP Cookie 处理方式的管理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.#ctor(System.ServiceModel.Channels.HttpCookieContainerBindingElement)">
      <summary>从指定的绑定元素初始化 <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">克隆的绑定元素。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建可用于创建通道的通道工厂。</summary>
      <returns>具有指定类型的通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.Clone">
      <summary>返回当前绑定元素对象的副本。</summary>
      <returns>绑定元素对象，它是原始绑定元素对象的深层克隆。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 Nothing。</returns>
      <param name="context">绑定元素的绑定上下文。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpMessageHandlerFactory">
      <summary>表示工厂的 http 消息处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpMessageHandlerFactory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpMessageHandlerFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpMessageHandlerFactory.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler}})">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpMessageHandlerFactory" /> 类的新实例。</summary>
      <param name="handlers">处理程序的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpMessageHandlerFactory.#ctor(System.Type[])">
      <summary>用指定的处理程序初始化 <see cref="T:System.ServiceModel.Channels.HttpMessageHandlerFactory" /> 类的新实例。</summary>
      <param name="handlers">处理程序。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpMessageHandlerFactory.Create(System.Net.Http.HttpMessageHandler)">
      <summary>创建一个新 HTTP 消息处理程序。</summary>
      <returns>创建的 HTTP 消息处理程序。</returns>
      <param name="innerChannel">内部通道。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpMessageHandlerFactory.OnCreate(System.Net.Http.HttpMessageHandler)">
      <summary>当创建新的 HTTP 消息时引发事件。</summary>
      <returns>创建的 HTTP 消息处理程序。</returns>
      <param name="innerChannel">内部通道。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpMessageSettings">
      <summary>可与 HTTP 传输协议一起使用的、用于指定 HttpMessage 支持的绑定参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpMessageSettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpMessageSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpMessageSettings.Equals(System.ServiceModel.Channels.HttpMessageSettings)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 true；否则为 false。</returns>
      <param name="other">要与当前对象进行比较的对象。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpMessageSettings.HttpMessagesSupported">
      <summary>获取或设置指示 HTTP 传输是否应支持 <see cref="T:System.Net.Http.HttpRequestMessage" /> 和 <see cref="T:System.Net.Http.HttpResponseMessage" /> 实例的值。</summary>
      <returns>如果 HTTP 传输支持 <see cref="T:System.Net.Http.HttpRequestMessage" /> 和 <see cref="T:System.Net.Http.HttpResponseMessage" /> 实例，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpRequestMessageExtensionMethods">
      <summary>为了访问与 HTTP 请求消息关联的用户主体提供扩展方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpRequestMessageExtensionMethods.GetUserPrincipal(System.Net.Http.HttpRequestMessage)">
      <summary>获取与指定的 HTTP 请求消息相关的用户主体。</summary>
      <returns>与指定的 HTTP 请求消息相关的用户主体。</returns>
      <param name="httpRequestMessage">来自获取用户主体的 HTTP 请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpRequestMessageExtensionMethods.SetUserPrincipal(System.Net.Http.HttpRequestMessage,System.Security.Principal.IPrincipal)">
      <summary>替换与指定的 HTTP 请求消息相关的用户主体。</summary>
      <param name="httpRequestMessage">来自设置用户主体的 HTTP 请求消息。</param>
      <param name="user">要设置用户主体。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpRequestMessageProperty">
      <summary>提供对 HTTP 请求的访问，以访问和响应通过 HTTP 协议提供给请求的附加信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpRequestMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Headers">
      <summary>从 HTTP 请求获取 HTTP 标头。</summary>
      <returns>返回一个 <see cref="T:System.Net.WebHeaderCollection" />，其中包含 HTTP 请求中的 HTTP 标头。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Method">
      <summary>获取或设置 HTTP 请求的 HTTP 谓词。</summary>
      <returns>HTTP 请求的 HTTP 谓词。</returns>
      <exception cref="T:System.ArgumentNullException">值设置为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Name">
      <summary>获取与 <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> 类关联的消息属性的名称。</summary>
      <returns>值“httpRequest”。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.QueryString">
      <summary>获取或设置 HTTP 请求的查询字符串。</summary>
      <returns>HTTP 请求中的查询字符串。</returns>
      <exception cref="T:System.ArgumentNullException">值设置为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody">
      <summary>获取或设置一个值，该值指示是否忽略消息正文并且只发送标头。</summary>
      <returns>如果禁止发送消息正文，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpRequestMessageProperty.System#ServiceModel#Channels#IMessageProperty#CreateCopy">
      <summary>创建并返回当前对象的一个副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.IMessageProperty" /> 对象，该对象表示当前对象的副本。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpResponseMessageProperty">
      <summary>提供对 HTTP 响应的访问，以便访问和响应为 HTTP 协议请求提供的附加信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpResponseMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Headers">
      <summary>从 HTTP 响应中获取 HTTP 标头。</summary>
      <returns>返回一个 <see cref="T:System.Net.WebHeaderCollection" />，它包含 HTTP 响应中的 HTTP 标头。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Name">
      <summary>获取与 <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> 类关联的消息属性的名称。</summary>
      <returns>返回“httpResponse”。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusCode">
      <summary>获取或设置附加此属性的当前 HTTP 响应的状态代码。</summary>
      <returns>返回要在 HTTP 响应中发送的 <see cref="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusCode" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于 100 或大于 599。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusDescription">
      <summary>获取或设置附加此属性的当前 HTTP 响应的状态代码说明。</summary>
      <returns>返回要在 HTTP 响应中发送的 <see cref="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.SuppressEntityBody">
      <summary>获取或设置一个值，该值指示是否忽略消息正文，只发送一个空消息。</summary>
      <returns>如果禁止发送消息正文，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.SuppressPreamble">
      <summary>获取或设置是否禁止发送消息前导码。</summary>
      <returns>如果禁止发送消息前导码，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpResponseMessageProperty.System#ServiceModel#Channels#IMessageProperty#CreateCopy">
      <summary>创建当前实例的新副本。</summary>
      <returns>新创建的当前实例的 <see cref="T:System.ServiceModel.Channels.IMessageProperty" /> 类型的副本。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpsTransportBindingElement">
      <summary>表示用于指定 HTTPS 传输以传输消息的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpsTransportBindingElement)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">
        <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> 类的实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的可用于创建通道的通道工厂。</summary>
      <returns>指定类型的通道工厂，基于传输绑定元素中设置的值进行了配置。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的可用于创建通道的通道侦听器。</summary>
      <returns>指定类型的通道侦听器。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.Clone">
      <summary>创建当前绑定元素的副本。</summary>
      <returns>当前绑定元素的副本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中获取指定的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的指定对象；如果找不到该对象，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.GetTransportTokenAssertion">
      <summary>获取表示安全绑定中使用的传输令牌的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlElement" />，表示安全绑定中使用的传输令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpsTransportBindingElement.RequireClientCertificate">
      <summary>获取或设置一个值，该值指示是否需要 SSL 客户端身份验证。</summary>
      <returns>如果需要 SSL 客户端身份验证，则为 true；否则为 false。 默认值为 false.。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpsTransportBindingElement.Scheme">
      <summary>返回传输的 URI 方案。</summary>
      <returns>返回传输的 URI 方案，即“HTTPS”。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpTransportBindingElement">
      <summary>表示用于指定 HTTP 传输以传输消息的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpTransportBindingElement)">
      <summary>初始化使用另一个绑定元素的 <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">用于初始化此实例的 <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> 对象。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.AllowCookies">
      <summary>获取或设置一个值，该值指示客户端是否接受 Cookie 并且对今后的请求传播它们。</summary>
      <returns>如果接受 Cookie，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.AuthenticationScheme">
      <summary>获取或设置身份验证方案，该方案用于验证 HTTP 侦听器所处理的客户端请求。</summary>
      <returns>
        <see cref="T:System.Net.AuthenticationSchemes" /> 枚举的枚举值之一，指定用于客户端身份验证的协议。 默认值为 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />。</returns>
      <exception cref="T:System.ArgumentException">已设置 <see cref="T:System.Net.AuthenticationSchemes" /> 的值。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建可用于创建通道的通道工厂。</summary>
      <returns>具有指定类型的通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
      <exception cref="T:System.ArgumentException">传递的参数无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的通道侦听器。</summary>
      <returns>指定类型的通道侦听器。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
      <exception cref="T:System.ArgumentException">传递的参数无效。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.BypassProxyOnLocal">
      <summary>获取或设置一个值，该值指示是否为本地地址忽略代理。</summary>
      <returns>如果为本地地址忽略代理，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果可以生成通道工厂，则为 true；否则为 false。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">要检查的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道侦听器。</summary>
      <returns>如果可以生成通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">要检查的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.Clone">
      <summary>创建作为当前绑定元素的副本的新实例。</summary>
      <returns>作为当前绑定元素的副本的新实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.DecompressionEnabled">
      <summary>获取或设置是否启用将压缩的消息数据还原为原始大小和格式的过程。</summary>
      <returns>如果启用解压缩，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.ExtendedProtectionPolicy">
      <summary>获取或设置服务器用来验证传入客户端连接的扩展安全策略的值。</summary>
      <returns>服务器用来验证传入客户端连接的扩展安全策略的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 获取属性。</summary>
      <returns>取自指定 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 的属性。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的属性的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>
        <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 枚举值，该值指示在将传入的请求路由到终结点 URI 时，是否包含主机名。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，表示在匹配过程中忽略主机名。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值尚未定义。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.KeepAliveEnabled">
      <summary>获取或设置一个值，该值指示是否与服务终结点建立持久性连接。</summary>
      <returns>如果对服务终结点的请求应包含具有 Keep-alive 值的连接 HTTP 标头，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.MaxBufferSize">
      <summary>获取或设置要使用的缓冲区的最大大小。 对于缓冲的消息，此值与 <see cref="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize" /> 相同。 对于经过流处理的消息，此值为必须以缓冲模式读取的 SOAP 标头的最大大小。</summary>
      <returns>缓冲区的最大大小（以字节为单位）。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.MaxPendingAccepts">
      <summary>获取或设置服务可以同时接受的最大连接数。</summary>
      <returns>服务可以同时接受的最大连接数。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.MessageHandlerFactory">
      <summary>获取或设置 Http 传输消息处理程序工厂。</summary>
      <returns>HTTP 传输消息处理程序工厂。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.ProxyAddress">
      <summary>获取或设置一个 URI，包含要用于 HTTP 请求的代理地址。</summary>
      <returns>包含代理地址的 <see cref="T:System.Uri" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.ProxyAuthenticationScheme">
      <summary>获取或设置用于对 HTTP 代理所处理的客户端请求进行身份验证的身份验证方案。</summary>
      <returns>
        <see cref="T:System.Net.AuthenticationSchemes" /> 枚举值，指定用于代理上客户端身份验证的协议。 默认值为 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.Realm">
      <summary>获取或设置身份验证领域。</summary>
      <returns>身份验证领域。 默认值为 ""。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.RequestInitializationTimeout">
      <summary>获取或设智请求初始化超时。</summary>
      <returns>请求初始化超时。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.Scheme">
      <summary>获取传输的 URI 方案。</summary>
      <returns>一个 <see cref="F:System.Uri.UriSchemeHttp" /> 对象，它表示传输的 URI 方案。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.ShouldSerializeExtendedProtectionPolicy">
      <summary>返回一个表明不可能对扩展保护策略进行 XAML 序列化的值。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.ShouldSerializeMessageHandlerFactory">
      <summary>确定消息处理工厂是否应该进行程序化。</summary>
      <returns>表示应对消息处理程序工厂进行序列化，则为 true，否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.ShouldSerializeWebSocketSettings">
      <summary>确定web套接设置是否应序列化。</summary>
      <returns>如果应序列化网络套接字设置，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出有关绑定的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>为协定将自定义 Web 服务描述语言 (WSDL) 元素写入到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个上下文，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>为终结点将自定义 Web 服务描述语言 (WSDL) 元素添加到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="endpointContext">一个终结点上下文，它提供从导出的 WSDL 元素到终结点说明的映射。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.TransferMode">
      <summary>获取或设置传输模式。</summary>
      <returns>
        <see cref="P:System.ServiceModel.Channels.HttpTransportBindingElement.TransferMode" /> 的下列成员值之一： Buffered Streamed StreamedRequest StreamedResponse</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.UnsafeConnectionNtlmAuthentication">
      <summary>获取或设置一个值，该值指示是否在服务器上启用不安全连接共享。 如果启用，将对每个 TCP 连接执行一次 NTLM 身份验证。</summary>
      <returns>如果启用不安全连接共享，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.UpdateAuthenticationSchemes(System.ServiceModel.Channels.BindingContext)">
      <summary>更新包含绑定上下文的传输身份验证方案。</summary>
      <param name="context">绑定上下文。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.UseDefaultWebProxy">
      <summary>获取或设置一个值，该值指示是否使用计算机范围的代理设置，而不使用用户特定的设置。</summary>
      <returns>如果使用计算机范围的代理设置，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.WebSocketSettings">
      <summary>获取或设置绑定元素的 Web 套接配置。</summary>
      <returns>网络套接字设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IAnonymousUriPrefixMatcher">
      <summary>实现此接口以注册自定义的匿名 URI 前缀。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IAnonymousUriPrefixMatcher.Register(System.Uri)">
      <summary>注册自定义的匿名 URI 前缀。</summary>
      <param name="anonymousUriPrefix">要注册的 URI 前缀。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IBindingDeliveryCapabilities">
      <summary>定义绑定为了描述和公布客户端与服务可能需要的功能而必须实现的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IBindingDeliveryCapabilities.AssuresOrderedDelivery">
      <summary>获取一个值，该值指示绑定是否可以支持按消息发送顺序传递消息的保证。</summary>
      <returns>如果消息必须按发送顺序传递，则为 true；如果消息可以不按此顺序传递，则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.IBindingDeliveryCapabilities.QueuedDelivery">
      <summary>获取一个值，该值指示绑定是否可以支持消息的排队传递。</summary>
      <returns>如果支持排队消息传递，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IBindingMulticastCapabilities">
      <summary>定义绑定可实现的可选接口，用于指定它所配置的服务是否具有多路广播功能。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IBindingMulticastCapabilities.IsMulticast">
      <summary>获取一个值，该值指示绑定是否将服务配置为具有多路广播功能。</summary>
      <returns>如果服务具有多路广播功能，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IBindingRuntimePreferences">
      <summary>定义可选的协定，绑定通过实现该协定，可以指定传入请求是由服务同步处理还是异步处理。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
      <summary>获取一个值，该值指示传入请求是由同步处理更加有效还是异步处理更加有效。</summary>
      <returns>如果同步处理请求更加有效，则为 true；否则为 false。 默认值为 false，即异步处理请求。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannel">
      <summary>定义所有通道对象都必须实现的基本接口。 它要求通道对象实现由所有通信对象共享的状态机接口，还要求通道对象实现从通道堆栈中检索对象的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannel.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory">
      <summary>定义必须由通道工厂实现来生成通道的接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory`1">
      <summary>定义必须由创建特定类型通道的通道工厂实现的接口。</summary>
      <typeparam name="TChannel">通道工厂创建的通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>创建到指定终结点地址的指定类型的通道。</summary>
      <returns>到指定终结点地址的类型为 <paramref name="TChannel" /> 的通道。</returns>
      <param name="to">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建指定类型的通道，该通道通向消息要发送到的指定终结点地址和传输地址。</summary>
      <returns>到指定终结点地址和传输地址的 <paramref name="TChannel" /> 类型的通道。</returns>
      <param name="to">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelListener">
      <summary>定义必须由通道侦听器实现来接受通道的接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener.BeginWaitForChannel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个等待通道到达的异步操作，此操作必须在指定时间间隔内完成。</summary>
      <returns>引用异步等待通道操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成等待通道操作的时间长度。</param>
      <param name="callback">接收异步等待通道操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步等待通道操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener.EndWaitForChannel(System.IAsyncResult)">
      <summary>完成一个等待通道到达的异步操作。</summary>
      <returns>如果消息已到达，则为 true；否则为 false。</returns>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.IChannelListener.EndWaitForChannel(System.IAsyncResult)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.IChannelListener.Uri">
      <summary>获取工厂生成的侦听器进行侦听的 URI。</summary>
      <returns>工厂生成的侦听器进行侦听的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener.WaitForChannel(System.TimeSpan)">
      <summary>等待通道到达。</summary>
      <returns>如果通道在 <paramref name="timeout" /> 指定的时间间隔内到达，则为 true；否则为 false。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成等待通道操作的时间长度。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelListener`1">
      <summary>定义一个接口，通道侦听器必须实现该接口才能接受类型特定的通道。</summary>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener`1.AcceptChannel">
      <summary>接受具有指定类型的通道以便与客户端进行通信。</summary>
      <returns>一个侦听器所接受的 <paramref name="TChannel" /> 类型的通道。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener`1.AcceptChannel(System.TimeSpan)">
      <summary>接受具有指定类型的通道以便在指定时间间隔内与客户端进行通信。</summary>
      <returns>一个侦听器所接受的 <paramref name="TChannel" /> 类型的通道。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成等待通道操作的时间长度。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener`1.BeginAcceptChannel(System.AsyncCallback,System.Object)">
      <summary>开始一个接受通道的异步操作。</summary>
      <returns>引用异步接受通道操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步接受通道操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步接受通道操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener`1.BeginAcceptChannel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内接受通道。</summary>
      <returns>引用异步接受通道操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前可用于完成等待通道操作的时间长度。</param>
      <param name="callback">接收异步接受通道操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步接受通道操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelListener`1.EndAcceptChannel(System.IAsyncResult)">
      <summary>完成一个接受通道的异步操作。</summary>
      <returns>一个侦听器所接受的 <paramref name="TChannel" /> 类型的通道。</returns>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IChannelListener`1.BeginAcceptChannel" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IContextBindingElement">
      <summary>为绑定元素定义支持上下文交换协议的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IContextManager">
      <summary>定义一个允许在通道上获取和设置上下文的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IContextManager.Enabled">
      <summary>获取或设置一个指示是否已启用上下文管理的值。</summary>
      <returns>如果启用了上下文，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IContextManager.GetContext">
      <summary>获取上下文。</summary>
      <returns>键/值对的 <see cref="T:System.Collections.Generic.IDictionary`2" />，包含上下文的命名空间和名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>设置上下文。</summary>
      <param name="context">键/值对的 <see cref="T:System.Collections.Generic.IDictionary`2" />，包含已设置的上下文命名空间和名称。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ICorrelationDataSource">
      <summary>提供一个属性，该属性返回通道可以提供的所有相关数据的说明。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ICorrelationDataSource.DataSources">
      <summary>获取一个集合，该集合包含通道可以提供的所有相关数据的说明。</summary>
      <returns>相关数据说明。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexChannel">
      <summary>定义通道为发送和接收消息而必须实现的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSession">
      <summary>定义会话接口，该接口在消息终结点之间的双向通信的两端实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作来终止出站会话。</summary>
      <returns>引用异步出站会话终止的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个 object，它包含该请求的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作来终止出站会话，此操作必须在指定超时内完成。</summary>
      <returns>引用异步出站会话终止的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">指定时间间隔的 <see cref="T:System.TimeSpan" />，操作必须在此时间间隔内完成。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个 object，它包含该请求的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession">
      <summary>终止出站会话，指示不能再在此会话的关联通道上从此终结点发送消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession(System.TimeSpan)">
      <summary>终止出站会话，指示在指定时间间隔内，不能再在此会话的关联通道上从此终结点发送消息。</summary>
      <param name="timeout">指定时间间隔的 <see cref="T:System.TimeSpan" />，操作必须在此时间间隔内完成。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.EndCloseOutputSession(System.IAsyncResult)">
      <summary>完成一个异步操作来终止出站会话，指示不能再在此会话的关联通道上从此终结点发送消息。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession" /> 方法之一返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSessionChannel">
      <summary>定义将双工通道与会话进行关联的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IHttpCookieContainerManager">
      <summary>表示 Cookie 容器管理器。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IHttpCookieContainerManager.CookieContainer">
      <summary>获取或设置 Cookie 容器。</summary>
      <returns>Cookie 容器。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputChannel">
      <summary>定义通道为接收消息而必须实现的接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>开始用于接收消息的异步操作，该操作具有关联的状态对象。</summary>
      <returns>引用异步消息接收的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始用于接收消息的异步操作，该操作具有指定的超时值和状态对象与之关联。</summary>
      <returns>引用异步接收操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定等待消息变为可用所用的时间间隔。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始用于接收消息的异步操作，该操作具有指定的超时值和状态对象与之关联。</summary>
      <returns>引用异步接收操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定等待消息变为可用所用的时间间隔。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步等待消息到达操作，该操作具有指定的超时值和状态对象与之关联。</summary>
      <returns>引用等待消息到达的异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定等待消息变为可用所用的时间间隔。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步操作相关联的状态信息。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
      <summary>完成用于接收消息的异步操作。</summary>
      <returns>接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> 方法之一返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
      <summary>完成用于接收消息的指定异步操作。</summary>
      <returns>如果在经历指定的时间间隔之前接收到消息，则为 true；否则为 false。</returns>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <param name="message">接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
      <summary>完成指定的异步等待消息操作。</summary>
      <returns>如果消息在超出 <paramref name="timeout" /> 之前送达，则为 true；否则为 false。</returns>
      <param name="result">
        <see cref="T:System.IAsyncResult" />，标识要完成的 <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> 操作，并且从它检索最终结果。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
      <summary>获取输入通道接收消息的地址。</summary>
      <returns>输入通道接收消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive">
      <summary>如果有可用消息，则返回接收到的消息。 如果没有可用消息，则在默认的时间间隔内阻塞。</summary>
      <returns>接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
      <summary>如果有可用消息，则返回接收到的消息。 如果没有可用消息，则在指定的时间间隔内阻塞。</summary>
      <returns>接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定接收操作的完成时限，在此时限之后操作将超时并引发 <see cref="T:System.TimeoutException" />。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
      <summary>尝试在指定的时间间隔内接收消息。</summary>
      <returns>如果在超出 <paramref name="timeout" /> 之前接收到消息，则为 true；否则为 false。</returns>
      <param name="timeout">通过调用 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> 方法之一返回的 <see cref="T:System.IAsyncResult" />。</param>
      <param name="message">接收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
      <summary>返回一个值，该值指示消息是否在指定的时间间隔内到达。</summary>
      <returns>如果消息在超出 <paramref name="timeout" /> 之前送达，则为 true；否则为 false。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" /> 指定在超时前等待消息到达所用的最大时间间隔。</param>
      <exception cref="T:System.TimeoutException">在操作完成前超出指定的 <paramref name="timeout" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的超时小于零。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSession">
      <summary>定义在消息传递终结点之间的单向通信的接收端实现的会话的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSessionChannel">
      <summary>定义将输入通道与会话进行关联的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IMessageProperty">
      <summary>定义一个接口，可实现该接口来描述消息的一组属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IMessageProperty.CreateCopy">
      <summary>创建当前实例的副本。</summary>
      <returns>作为当前实例副本的 <see cref="T:System.ServiceModel.Channels.IMessageProperty" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.InvalidChannelBindingException">
      <summary>在指定的绑定与服务的协定要求不相符时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.InvalidChannelBindingException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.InvalidChannelBindingException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.InvalidChannelBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.Channels.InvalidChannelBindingException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.InvalidChannelBindingException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.Channels.InvalidChannelBindingException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.InvalidChannelBindingException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.Channels.InvalidChannelBindingException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputChannel">
      <summary>定义通道为发送消息而必须实现的接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，向输出通道的目标传输一条消息。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">将在输出通道上发送的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步发送操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内向输出通道的目标传输消息。</summary>
      <returns>引用异步发送操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">将在输出通道上发送的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，接收异步操作完成发送的通知。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步发送操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)">
      <summary>完成一个异步操作，向输出通道的目标传输消息。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress">
      <summary>获取在输出通道上发出的消息将要到达的服务的目标。</summary>
      <returns>输出通道发送的消息将要到达的服务的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)">
      <summary>向输出通道的目标传输一条消息。</summary>
      <param name="message">将在输出通道上发送的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>在指定时间间隔内在当前输出通道上发送一条消息。</summary>
      <param name="message">将在输出通道上发送的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成发送操作的时间。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.Via">
      <summary>获取 URI，该 URI 包含输出通道发送消息的目标传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含输出通道发送消息的目标传输地址。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSession">
      <summary>定义会话接口，该接口在消息终结点之间的单向通信的发送端实现。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSessionChannel">
      <summary>定义将输出通道与会话进行关联的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IReceiveContextSettings">
      <summary>一个可用于设置接收上下文设置的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IReceiveContextSettings.Enabled">
      <summary>获取或设置一个值，该值指定是否启用接收上下文。</summary>
      <returns>如果启用接收上下文，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.IReceiveContextSettings.ValidityDuration">
      <summary>获取一个值，该值指定连接超时（在使用直接通道时）和消息锁定持续时间（在使用队列通道时）。</summary>
      <returns>超时值。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IReplyChannel">
      <summary>定义一个接口，通道必须实现该接口，才能成为消息传递终结点之间的请求-回复通信的接收端。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)">
      <summary>开始用于接收可用请求的异步操作，该操作具有默认的超时值。</summary>
      <returns>引用请求的异步接收的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，接收请求操作完成的异步接收的通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与请求操作的异步接收相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始用于接收可用请求的异步操作，该操作具有指定的超时值。</summary>
      <returns>引用请求的异步接收的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定等待接收可用请求的时间间隔。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，接收请求操作完成的异步接收的通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与请求操作的异步接收相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始用于接收请求消息的异步操作，该操作具有指定的超时值和状态对象与之关联。</summary>
      <returns>引用该异步接收请求操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定接收请求操作的完成时限，在此时限之后操作将超时并返回 false。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，接收请求操作完成的异步接收的通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与请求操作的异步接收相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始具有关联的指定超时值和状态对象的异步请求操作。</summary>
      <returns>引用等待请求消息到达的异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定等待接收可用请求的时间间隔。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，接收请求操作完成的异步接收的通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与请求操作的异步接收相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)">
      <summary>完成用于接收可用请求的异步操作。</summary>
      <returns>用于构造请求的回复的 <see cref="T:System.ServiceModel.Channels.RequestContext" />。</returns>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)">
      <summary>完成用于接收请求消息的指定异步操作。</summary>
      <returns>如果在经历指定的时间间隔之前接收到请求消息，则为 true；否则为 false。</returns>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <param name="context">接收到的 <see cref="T:System.ServiceModel.Channels.RequestContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)">
      <summary>完成指定的异步等待请求消息操作。</summary>
      <returns>如果在经历指定的时间间隔之前接收到请求，则为 true；否则为 false。</returns>
      <param name="result">
        <see cref="T:System.IAsyncResult" />，标识要完成的 <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> 操作，并且从它检索最终结果。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress">
      <summary>获取回复通道接收消息的地址。</summary>
      <returns>回复通道接收消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest">
      <summary>如果有可用的上下文，则返回接收到的请求的上下文。 如果没有可用的上下文，则等到有可用上下文为止。</summary>
      <returns>用于构造回复的 <see cref="T:System.ServiceModel.Channels.RequestContext" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)">
      <summary>如果有可用的上下文，则返回接收到的请求的上下文。 如果没有可用的上下文，则等到有可用上下文为止。</summary>
      <returns>用于构造回复的 <see cref="T:System.ServiceModel.Channels.RequestContext" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，指定接收请求操作的完成时限，在此时限之后操作将超时并返回 false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)">
      <summary>返回一个值，该值指示是否在经历指定的时间间隔之前接收到请求。</summary>
      <returns>如果在经历指定的时间间隔之前接收到请求消息，则为 true；否则为 false。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，指定接收请求操作的完成时限，在此时限之后操作将超时并返回 false。</param>
      <param name="context">接收到的 <see cref="T:System.ServiceModel.Channels.RequestContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)">
      <summary>返回一个值，该值指示是否在经历指定的时间间隔之前接收到请求消息。</summary>
      <returns>如果在经历指定的时间间隔之前接收到请求，则为 true；否则为 false。</returns>
      <param name="timeout">一个 <see cref="T:System.Timespan" />，指定请求操作的完成时限，在此时限之后操作将超时并返回 false。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IReplySessionChannel">
      <summary>定义将回复通道与会话进行关联的接口</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestChannel">
      <summary>定义一个协定，通道必须实现该协定，才能成为消息传递终结点之间的请求-答复通信的请求端。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，将请求消息传送到请求-回复消息交换的回复端。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，在指定时间间隔内将请求消息传送到请求-回复消息交换的回复端。</summary>
      <returns>引用异步消息传输的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">指定时间间隔的 <see cref="T:System.TimeSpan" />，在此时间间隔内必须收到响应。（有关默认值，请参见“备注”部分。）</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它接收传送请求消息的异步操作的完成通知。</param>
      <param name="state">一个由应用程序指定的对象，它包含与传送请求消息的异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)">
      <summary>完成异步操作以向传送的请求返回基于消息的响应。</summary>
      <returns>在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress">
      <summary>获取请求通道将消息发送到的远程地址。</summary>
      <returns>请求通道将消息发送到的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)">
      <summary>发送一个基于消息的请求，并返回相关的基于消息的响应。</summary>
      <returns>在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>发送一个基于消息的请求，并在指定的时间间隔内返回相关的基于消息的响应。</summary>
      <returns>在对请求的响应中收到的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">要传送的请求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">指定时间间隔的 <see cref="T:System.TimeSpan" />，在此时间间隔内必须收到响应。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.Via">
      <summary>获取发送请求的目标传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含要将消息发送至的传输地址。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestSessionChannel">
      <summary>定义将请求通道与会话进行关联的接口。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ISecurityCapabilities">
      <summary>定义用于指定绑定的安全功能的协定。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ISecurityCapabilities.SupportedRequestProtectionLevel">
      <summary>获取绑定支持的保护级别请求。</summary>
      <returns>指定绑定支持的保护级别请求的 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ISecurityCapabilities.SupportedResponseProtectionLevel">
      <summary>获取绑定支持的保护级别响应。</summary>
      <returns>指定绑定支持的保护级别响应的 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ISecurityCapabilities.SupportsClientAuthentication">
      <summary>获取一个值，该值指示绑定是否支持客户端身份验证。</summary>
      <returns>如果绑定可以支持客户端身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ISecurityCapabilities.SupportsClientWindowsIdentity">
      <summary>获取一个值，该值指示绑定是否支持客户端 Windows 标识。</summary>
      <returns>如果绑定可以支持客户端 Windows 标识，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ISecurityCapabilities.SupportsServerAuthentication">
      <summary>获取一个值，该值指示绑定是否支持服务器身份验证。</summary>
      <returns>如果绑定可以支持服务器身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ISession">
      <summary>通过提供通信会话的 ID，定义在交换消息的各方之间建立共享上下文的接口。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ISession.Id">
      <summary>获取用于唯一标识会话的 ID。</summary>
      <returns>用于唯一标识会话的 ID。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ISessionChannel`1">
      <summary>定义将通道与特定会话类型进行关联的接口。</summary>
      <typeparam name="TSession">与通道关联的 <see cref="T:System.ServiceModel.Channels.ISession" /> 类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ISessionChannel`1.Session">
      <summary>获取与此通道关联的会话类型。</summary>
      <returns>与此通道关联的 <see cref="T:System.ServiceModel.Channels.ISession" /> 类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ITransactedBindingElement">
      <summary>表示绑定元素应实现的一个接口，这些绑定元素要求调度程序在调度到服务方法之前创建一个事务。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ITransactedBindingElement.TransactedReceiveEnabled">
      <summary>获取一个布尔指，该值指定是否为接收操作启用了事务。</summary>
      <returns>如果为接收操作启用了事务，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ITransportTokenAssertionProvider">
      <summary>提供在策略导出时使用的传输令牌断言（例如，HTTPS 令牌断言）。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ITransportTokenAssertionProvider.GetTransportTokenAssertion">
      <summary>获取传输令牌断言。</summary>
      <returns>一个表示传输令牌断言的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IWebSocketCloseDetails">
      <summary>表示网络套接字连接的关闭状态的详细信息。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IWebSocketCloseDetails.InputCloseStatus">
      <summary>获取输入关闭细节的状态。</summary>
      <returns>输入关闭细节的状态。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.IWebSocketCloseDetails.InputCloseStatusDescription">
      <summary>获取关闭细节的状态说明。</summary>
      <returns>关闭细节的状态说明。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IWebSocketCloseDetails.SetOutputCloseStatus(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
      <summary>设置网络套接字的输出状态和关闭细节说明。</summary>
      <param name="closeStatus">输出关闭细节的状态。</param>
      <param name="closeStatusDescription">输出关闭细节的状态说明。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.LocalClientSecuritySettings">
      <summary>指定本地客户端安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.CacheCookies">
      <summary>获取或设置一个值，该值指示是否已缓存安全对话 Cookie。</summary>
      <returns>如果已缓存 Cookie，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.Clone">
      <summary>创建此类的新实例，它是当前实例的一个副本或复本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> 的新实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.CookieRenewalThresholdPercentage">
      <summary>获取或设置续订安全对话 Cookie 的阈值百分比。</summary>
      <returns>续订安全对话 Cookie 的阈值百分比。 默认值为 60%。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性使用 set 设置为一个小于 0 或大于 100 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.DetectReplays">
      <summary>获取或设置一个值，该值指示是否对客户端从服务接收的消息启用重播检测。</summary>
      <returns>如果启用重播检测，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.IdentityVerifier">
      <summary>获取或设置标识验证程序。</summary>
      <returns>抽象类 <see cref="T:System.ServiceModel.Security.IdentityVerifier" /> 的实现的实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.MaxClockSkew">
      <summary>获取或设置通信双方的系统时钟之间允许的最大时间差异。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示进行通信双方的系统时钟之间允许的最大时间差异。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.MaxCookieCachingTime">
      <summary>获取或设置安全会话 Cookie 的最大缓存时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示安全会话 Cookie 的最大缓存时间。 默认值为 10675199 天。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.NonceCache">
      <summary>获取或设置本地客户端安全设置的缓存。</summary>
      <returns>此本地客户端安全设置的缓存。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReconnectTransportOnFailure">
      <summary>获取或设置一个值，该值指示在传输失败后安全会话是否尝试重新连接。</summary>
      <returns>如果在传输失败后安全会话尝试重新连接，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReplayCacheSize">
      <summary>获取或设置用于重播检测的缓存 Nonce 的数目。</summary>
      <returns>用于重播检测的缓存 Nonce 的数目。 默认值为 900000。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReplayWindow">
      <summary>获取或设置消息 Nonce 有效的最长时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示消息 Nonce 有效的最长时间。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.SessionKeyRenewalInterval">
      <summary>获取或设置一个时间跨度，此时间之后发起方续订用于安全会话的密钥。</summary>
      <returns>一个表示时间跨度的 <see cref="T:System.TimeSpan" />，此时间之后发起方续订用于安全会话的密钥。 默认值为 10 小时。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.SessionKeyRolloverInterval">
      <summary>获取或设置一个时间间隔，这段时间间隔内上一个会话密钥在密钥续订期间对传入的消息有效。</summary>
      <returns>一个表示时间间隔的 <see cref="T:System.TimeSpan" />，这段时间间隔内上一个会话密钥在密钥续订后对传入的消息有效。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.TimestampValidityDuration">
      <summary>获取或设置消息在由客户端发送时的最长有效时间。 如果服务在此期间后收到消息，应丢弃该消息。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示消息在由客户端发送时的最长有效时间。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此属性使用 set 设置为一个小于 0 的值。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.LocalServiceSecuritySettings">
      <summary>提供可设置的本地服务安全属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalServiceSecuritySettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.LocalServiceSecuritySettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalServiceSecuritySettings.Clone">
      <summary>从当前实例创建此类的新实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.LocalServiceSecuritySettings" /> 的新实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.DetectReplays">
      <summary>获取或设置一个值，该值指示是否在服务上启用重播检测。</summary>
      <returns>如果对服务启用重放检测，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.InactivityTimeout">
      <summary>获取或设置通道因处于不活动状态而关闭前等待的时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示与客户端的安全会话因处于不活动状态而关闭前等待的时间。 默认值为 2 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime">
      <summary>获取或设置服务颁发给客户端的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> 的生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示新安全 Cookie 的生存期。 默认值为 10 小时。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.MaxCachedCookies">
      <summary>获取或设置服务允许一次缓存的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> 的最大数量。</summary>
      <returns>服务可以缓存的安全对话 Cookie 的最大数量。 达到此限制后，服务将移除缓存时间最久的安全对话 Cookie，为新安全对话 Cookie 腾出空间。 默认值为 1000。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.MaxClockSkew">
      <summary>获取或设置通信双方的系统时钟之间允许的最大时间差异。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示进行通信双方的系统时钟之间允许的最大时间差异。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.MaxPendingSessions">
      <summary>获取或设置已与服务器建立的并发安全会话的最大数目，该服务器已经为这些会话颁发会话令牌但尚未为这些会话发送任何应用程序消息。</summary>
      <returns>最大并发安全会话数。 默认值为 128。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations">
      <summary>获取或设置服务可参与的与客户端的最大并发安全协商数。</summary>
      <returns>服务可参与的与客户端的最大并发安全协商数。 默认值为 128。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.NegotiationTimeout">
      <summary>获取或设置客户端与服务之间的安全协商阶段的最长持续时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示客户端与服务之间的安全协商阶段的最长持续时间。 与服务的任何协商（例如消息级别 SPNego 或 SSL 身份验证期间）都必须在此时间内完成。 默认值为 1 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.NonceCache">
      <summary>获取或设置本地安全客户端安全设置的缓存。</summary>
      <returns>此本地服务安全设置的缓存。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure">
      <summary>获取或设置一个值，该值指示在传输失败后安全会话是否尝试重新连接。</summary>
      <returns>如果在传输失败后安全会话尝试重新连接，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.ReplayCacheSize">
      <summary>获取或设置用于重播检测的 Nonce 缓存大小。</summary>
      <returns>用于重播检测的 Nonce 缓存大小。 默认值为 900,000。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.ReplayWindow">
      <summary>获取或设置服务接受消息的最长时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示服务接受消息的最长时间。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval">
      <summary>获取或设置在安全会话中使用的密钥的生存期。 此时间间隔到期后，将自动续订密钥。</summary>
      <returns>时间跨度，此时间之后服务要求发起方续订用于安全会话的密钥。 如果发起方在此时间内不续订密钥，则服务将向发起方发送回错误。 默认值为 15 小时。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval">
      <summary>获取或设置密钥续订后的一个时间间隔，这段时间间隔内上一个会话密钥在密钥续订期间对传入的消息有效。</summary>
      <returns>时间间隔，这段时间间隔内上一个会话密钥在密钥续订后对传入的消息有效。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalServiceSecuritySettings.TimestampValidityDuration">
      <summary>获取或设置消息在由服务发送时的最长有效时间。 如果客户端在此期间后收到服务的消息，该客户端将丢弃该消息。</summary>
      <returns>消息在由服务发送时的最长有效时间。 默认值为 5 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性已设置为小于 0 的值。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Message">
      <summary>表示分布式环境中终结点之间的通信单元。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.Message" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.BeginWriteBodyContents(System.Xml.XmlDictionaryWriter,System.AsyncCallback,System.Object)">
      <summary>开始消息主体内容的异步写入。</summary>
      <returns>表示异步操作结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="writer">用于序列化消息正文的编写器。</param>
      <param name="callback">在操作完成时接收通知的委托方法。</param>
      <param name="state">表示操作状态的用户定义的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.BeginWriteMessage(System.Xml.XmlDictionaryWriter,System.AsyncCallback,System.Object)">
      <summary>开始整条消息的异步写入。</summary>
      <returns>表示异步操作结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="writer">用于序列化全部消息的编写器。</param>
      <param name="callback">在操作完成时接收通知的委托方法。</param>
      <param name="state">表示操作状态的用户定义的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.Close">
      <summary>关闭 <see cref="T:System.ServiceModel.Channels.Message" /> 并释放任何资源。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)">
      <summary>将整个 <see cref="T:System.ServiceModel.Channels.Message" /> 存储到内存缓冲区，以供日后访问。</summary>
      <returns>新创建的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />  对象。</returns>
      <param name="maxBufferSize">要创建的缓冲区的最大大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferSize " /> 小于零。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.MessageFault,System.String)">
      <summary>创建一个包含了 SOAP 错误、版本和操作的消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="fault">一个表示 SOAP 错误的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Version" />、<paramref name="fault" /> 或 <paramref name="action" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.ServiceModel.FaultCode,System.String,System.Object,System.String)">
      <summary>创建一个包含了 SOAP 错误、错误原因和详细信息、版本和操作的消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="faultCode">一个表示 SOAP 错误的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="detail">SOAP 错误的详细信息。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="fault" />、<paramref name="action" />、<paramref name="detail" /> 或 <paramref name="faultCode" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.ServiceModel.FaultCode,System.String,System.String)">
      <summary>创建一个包含了 SOAP 错误、错误原因、版本和操作的消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="faultCode">一个表示 SOAP 错误的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</param>
      <param name="reason">SOAP 错误的原因。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="fault" />、<paramref name="action" /> 或 <paramref name="faultCode" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String)">
      <summary>创建一个包含了版本和操作的消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 或 <paramref name="action" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object)">
      <summary>使用指定的版本、操作和正文创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">消息的正文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" /> 或 <paramref name="body" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的版本、操作、消息正文和序列化程序创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">消息的正文。</param>
      <param name="serializer">用于序列化该消息的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="fault" /> 或 <paramref name="action" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.ServiceModel.Channels.BodyWriter)">
      <summary>创建一个正文包含字节数组的消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">一个类型为 byte 的 <see cref="T:System.ServiceModel.Channels.BodyWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Version" />、<paramref name="action" /> 或 <paramref name="body" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlDictionaryReader)">
      <summary>使用指定的版本、操作和正文创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">消息的正文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" /> 或 <paramref name="body" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlReader)">
      <summary>使用指定的读取器、操作和版本创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <param name="action">有关应如何处理消息的说明。</param>
      <param name="body">要用于读取 SOAP 消息的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" /> 或 <paramref name="body" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.Xml.XmlDictionaryReader,System.Int32,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的读取器、操作和版本创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="envelopeReader">要用于读取 SOAP 消息的 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象。</param>
      <param name="maxSizeOfHeaders">标头的最大大小（以字节为单位）。</param>
      <param name="version">一个有效的 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 值，指定要用于消息的 SOAP 版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeReader" /> 或 <paramref name="version" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.Xml.XmlReader,System.Int32,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的读取器、操作和版本创建消息。</summary>
      <returns>所创建消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="envelopeReader">要用于读取 SOAP 消息的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <param name="maxSizeOfHeaders">标头的最大大小（以字节为单位）。</param>
      <param name="version">一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，指定要用于消息的 SOAP 版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeReader" /> 或 <paramref name="version" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.EndWriteBodyContents(System.IAsyncResult)">
      <summary>关闭消息主体内容的异步写入。</summary>
      <param name="result">表示异步操作结果的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.EndWriteMessage(System.IAsyncResult)">
      <summary>关闭整条消息的异步写入。</summary>
      <param name="result">表示异步操作结果的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1">
      <summary>检索此 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的正文。</summary>
      <returns>一个类型为 <paramref name="T" /> 的对象，其中包含此消息的正文。</returns>
      <typeparam name="T">消息的正文。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的序列化程序检索此 <see cref="T:System.ServiceModel.Channels.Message" /> 的正文。</summary>
      <returns>一个类型为 <paramref name="T" /> 的对象，其中包含此消息的正文。</returns>
      <param name="serializer">用于读取消息的正文的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 对象。</param>
      <typeparam name="T">消息的正文。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBodyAttribute(System.String,System.String)">
      <summary>检索消息正文的属性。</summary>
      <returns>消息正文的属性。</returns>
      <param name="localName">XML 节点的本地名称。 与此成员对应的元素的名称。 此字符串必须是有效的 XML 元素名称。</param>
      <param name="ns">此 XML 元素所属的命名空间。 与此成员对应的元素的命名空间 URI。 此系统不验证传输地址以外的任何 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> 或 <paramref name="ns" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetReaderAtBodyContents">
      <summary>获取访问此消息正文内容的 XML 字典读取器。</summary>
      <returns>访问此消息正文内容的 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">消息为空，或已复制、读取或写入。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Headers">
      <summary>在派生类中重写时，获取消息的标头。</summary>
      <returns>一个表示消息头的 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsDisposed">
      <summary>返回一个值，该值指示是否已释放 <see cref="T:System.ServiceModel.Channels.Message" />。</summary>
      <returns>如果已释放消息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsEmpty">
      <summary>返回一个值，该值指示 <see cref="T:System.ServiceModel.Channels.Message" /> 是否为空。</summary>
      <returns>如果消息为空，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsFault">
      <summary>获取一个值，该值指示此消息是否会生成任何 SOAP 错误。</summary>
      <returns>如果此消息生成了任何 SOAP 错误，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBeginWriteBodyContents(System.Xml.XmlDictionaryWriter,System.AsyncCallback,System.Object)">
      <summary>当消息开始写入消息正文的内容时引发事件。</summary>
      <returns>表示异步操作结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="writer">用于序列化消息正文内容的编写器。</param>
      <param name="callback">在操作完成时接收通知的委托方法。</param>
      <param name="state">表示操作状态的用户定义的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBeginWriteMessage(System.Xml.XmlDictionaryWriter,System.AsyncCallback,System.Object)">
      <summary>引发整个消息写入开始的事件。</summary>
      <returns>表示异步操作结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="writer">用于序列化全部消息的编写器。</param>
      <param name="callback">在操作完成时接收通知的委托方法。</param>
      <param name="state">表示操作状态的用户定义的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBodyToString(System.Xml.XmlDictionaryWriter)">
      <summary>消息正文转换成字符串时调用。</summary>
      <param name="writer">一个用于将消息正文转换成字符串的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnClose">
      <summary>在关闭消息时调用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnCreateBufferedCopy(System.Int32)">
      <summary>创建消息缓冲区来存储此消息时调用。</summary>
      <returns>用于新创建消息副本的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</returns>
      <param name="maxBufferSize">要创建的缓冲区的最大大小。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnEndWriteBodyContents(System.IAsyncResult)">
      <summary>当写入消息正文的内容结束时引发事件。</summary>
      <param name="result">表示异步操作结果的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnEndWriteMessage(System.IAsyncResult)">
      <summary>当整个消息的写入结束时引发事件。</summary>
      <param name="result">表示异步操作结果的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBody``1(System.Xml.XmlDictionaryReader)">
      <summary>检索消息正文时调用。</summary>
      <returns>表示消息正文的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</returns>
      <param name="reader">用于读取消息的正文的 <see cref="T:System.Xml.XmlDictionaryReader)" /> 对象。</param>
      <typeparam name="T">消息体的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBodyAttribute(System.String,System.String)">
      <summary>检索消息正文的属性时调用。</summary>
      <returns>消息正文的属性。</returns>
      <param name="localName">XML 节点的本地名称。 与此成员对应的元素的名称。 此字符串必须是有效的 XML 元素名称。</param>
      <param name="ns">此 XML 元素所属的命名空间。 与此成员对应的元素的命名空间 URI。 此系统不验证传输地址以外的任何 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents">
      <summary>当一个访问这条消息的征文内容的 XML 字典读取器被检索时，调用。</summary>
      <returns>访问此消息正文内容的 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>将消息正文写入 XML 文件时调用。</summary>
      <param name="writer">用于将此消息正文写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>将整个消息写入 XML 文件时调用。</summary>
      <param name="writer">用于将此消息写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>将开始正文写入 XML 文件时调用。</summary>
      <param name="writer">用于将开始正文写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>将开始信封写入 XML 文件时调用。</summary>
      <param name="writer">用于将开始信封写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartHeaders(System.Xml.XmlDictionaryWriter)">
      <summary>将开始标头写入 XML 文件时调用。</summary>
      <param name="writer">用于将开始标头写入 XML 文件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Properties">
      <summary>在派生类中重写时，获取消息的处理级别批注集。</summary>
      <returns>一个包含消息处理级别批注集的 <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.State">
      <summary>获取此 <see cref="T:System.ServiceModel.Channels.Message" /> 的当前状态。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MessageState" />，包含了此 <see cref="T:System.ServiceModel.Channels.Message" /> 的当前状态。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.System#IDisposable#Dispose">
      <summary>关闭此消息使用的所有资源。 不能继承此方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.ToString">
      <summary>返回表示当前 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的字符串。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Version">
      <summary>在派生类中重写时，获取消息的 SOAP 版本。</summary>
      <returns>一个表示 SOAP 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象。</returns>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入正文元素。</summary>
      <param name="writer">一个要用于写入正文元素的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 序列化消息正文。</summary>
      <param name="writer">要用于写入消息正文的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已释放。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化正文内容。</summary>
      <param name="writer">一个要用于写入正文元素的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化整个消息。</summary>
      <param name="writer">一个要用于写入消息的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 序列化整个消息。</summary>
      <param name="writer">要用于写入整个消息的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">消息已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已复制、读取或写入消息。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化消息的起始正文。</summary>
      <param name="writer">一个要用于写入开始正文的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化消息的起始正文。</summary>
      <param name="writer">要用于写入消息开始正文的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 序列化开始信封。</summary>
      <param name="writer">一个要用于写入开始信封的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageBuffer">
      <summary>表示一个内存缓冲区，该内存缓冲区存储了未来要使用的整个消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.BufferSize">
      <summary>获取此 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 使用的近似字节数。</summary>
      <returns>此 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 使用的近似字节数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.Close">
      <summary>缓冲区使用完毕。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateMessage">
      <summary>返回原始消息的副本。</summary>
      <returns>一个原始 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的相同副本，您先前将此实例提供给 <see cref="T:System.ServiceModel.Channels.Message" /> 实例的 <see cref="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)" /> 方法。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateNavigator">
      <summary>创建一个用于定位此对象的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。 不能继承此方法。</summary>
      <returns>用于定位此对象的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateNavigator(System.Int32)">
      <summary>使用位于指定节点上的导航器，创建一个用于定位此对象的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</summary>
      <returns>用于定位此对象的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</returns>
      <param name="nodeQuota">希望导航器最初定位的位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateNavigator(System.Int32,System.Xml.XmlSpace)">
      <summary>使用位于指定节点和 xml:space 范围的导航器，创建一个用于定位此对象的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</summary>
      <returns>用于定位此对象的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</returns>
      <param name="nodeQuota">希望导航器最初定位的位置。</param>
      <param name="space">一个有效的 <see cref="T:System.Xml.XmlSpace" /> 空间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateNavigator(System.Xml.XmlSpace)">
      <summary>使用指定的 xml:space 范围，创建一个用于定位此对象的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</summary>
      <returns>用于定位此对象的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</returns>
      <param name="space">一个有效的 <see cref="T:System.Xml.XmlSpace" /> 空间。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.MessageContentType">
      <summary>获取存储在此缓冲区中的消息内容的类型。</summary>
      <returns>存储在此缓冲区中的消息内容的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 占用的非托管资源，并可以选择释放托管资源。 不能继承此方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.WriteMessage(System.IO.Stream)">
      <summary>将此缓冲区中的整个内容写入指定的 IO 流。</summary>
      <param name="stream">一个 IO 流，此缓冲区中的整个内容都会写入此 IO 流。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoder">
      <summary>编码器是用于将消息写入到流中并从流中读取消息的组件。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.BeginWriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>为有指定的消息、流、恢复和状态的消息编码器，启动消息写入。</summary>
      <returns>异步操作的结果。</returns>
      <param name="message">消息。</param>
      <param name="stream">此流。</param>
      <param name="callback">回调。</param>
      <param name="state">状态。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
      <summary>在派生类中重写时，获取编码器使用的 MIME 内容类型。</summary>
      <returns>受消息编码器支持的内容类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.EndWriteMessage(System.IAsyncResult)">
      <summary>关闭消息编码器的消息写入。</summary>
      <param name="result">操作的结果。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T " />，如果不存在，则返回 null。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
      <summary>返回一个值，该值指示消息编码器是否支持指定的消息级内容类型值。</summary>
      <returns>如果支持指定的消息级内容类型，则为 true；否则为 false。</returns>
      <param name="contentType">所测试的消息级内容类型。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
      <summary>在派生类中重写时，获取编码器使用的媒体类型值。</summary>
      <returns>受消息编码器支持的媒体类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
      <summary>在派生类中重写时，获取编码器使用的消息版本值。</summary>
      <returns>编码器使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
      <summary>在派生类中重写时，从指定的缓冲区中读取一条消息。</summary>
      <returns>从指定的缓冲区中读取的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="buffer">一个类型为 <see cref="T:System.Byte" /> 的 <see cref="T:System.ArraySegment`1" />，它提供从中反序列化消息的缓冲区。</param>
      <param name="bufferManager">
        <see cref="T:System.ServiceModel.Channels.BufferManager" />，管理从中反序列化消息的缓冲区。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
      <summary>在派生类中重写时，从指定的流中读取一条消息。</summary>
      <returns>从指定的流中读取的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="buffer">一个类型为 <see cref="T:System.Byte" /> 的 <see cref="T:System.ArraySegment`1" />，它提供从中反序列化消息的缓冲区。</param>
      <param name="bufferManager">
        <see cref="T:System.ServiceModel.Channels.BufferManager" />，管理从中反序列化消息的缓冲区。</param>
      <param name="contentType">多用途 Internet 邮件扩展 (MIME) 消息级内容类型。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
      <summary>在派生类中重写时，从指定的流中读取一条消息。</summary>
      <returns>从指定的流中读取的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="stream">从中读取消息的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <param name="maxSizeOfHeaders">可从消息中读取的标头的最大大小。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
      <summary>在派生类中重写时，从指定的流中读取一条消息。</summary>
      <returns>从指定的流中读取的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="stream">从中读取消息的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <param name="maxSizeOfHeaders">可从消息中读取的标头的最大大小。</param>
      <param name="contentType">多用途 Internet 邮件扩展 (MIME) 消息级内容类型。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ToString">
      <summary>返回消息编码器使用的内容类型。</summary>
      <returns>消息编码器使用的内容类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
      <summary>将小于指定大小的消息写入字节数组缓冲区。</summary>
      <returns>一个类型为 byte 的 <see cref="T:System.ArraySegment`1" />，它提供将消息序列化到的缓冲区。</returns>
      <param name="message">要写入消息缓冲区的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxMessageSize">可写入的最大消息大小。</param>
      <param name="bufferManager">
        <see cref="T:System.ServiceModel.Channels.BufferManager" />，管理将消息写入到的缓冲区。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
      <summary>在派生类中重写时，将小于指定大小的消息按指定的偏移量写入字节数组缓冲区。</summary>
      <returns>一个类型为 byte 的 <see cref="T:System.ArraySegment`1" />，它提供将消息序列化到的缓冲区。</returns>
      <param name="message">要写入消息缓冲区的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxMessageSize">可写入的最大消息大小。</param>
      <param name="bufferManager">
        <see cref="T:System.ServiceModel.Channels.BufferManager" />，管理将消息写入到的缓冲区。</param>
      <param name="messageOffset">从提供缓冲区的字节数组开头开始的段的偏移量。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
      <summary>在派生类中重写时，将消息写入指定的流中。</summary>
      <param name="message">要写入 <paramref name="stream" /> 的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="stream">
        <paramref name="message" /> 要写入的 <see cref="T:System.IO.Stream" /> 对象。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoderFactory">
      <summary>一个抽象基类，表示用于生成消息编码器的工厂，消息编码器可从流中读取消息和将消息写入流以进行各种类型的消息编码。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.CreateSessionEncoder">
      <summary>返回一个消息编码器，可用于关联基于会话的交换中的消息。</summary>
      <returns>在基于会话的消息交换中使用的 <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.Encoder">
      <summary>在派生类中重写时，获取工厂生成的消息编码器。</summary>
      <returns>工厂使用的 <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.MessageVersion">
      <summary>在派生类中重写时，获取工厂生成用于编码消息的编码器所使用的消息版本。</summary>
      <returns>工厂使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncodingBindingElement">
      <summary>用于指定对消息进行编码时所用消息版本的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
      <summary>初始化从现有元素初始化的 <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的 <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>在派生类中重写时，创建工厂以生成消息编码器。</summary>
      <returns>用于生成消息编码器的 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从通道堆栈的适当层，返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <param name="context">当前绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncodingBindingElement.MessageVersion">
      <summary>在派生类中重写时，获取或设置可由消息编码器工厂所生成消息编码器处理的消息版本。</summary>
      <returns>由消息编码器工厂所生成编码器使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncodingBindingElementImporter">
      <summary>将基于 WSDL 的策略和消息编码协定转换为能够实现这些服务策略的绑定元素说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>定义一个方法，该方法可导入消息编码的自定义策略断言，并添加实现策略的绑定元素。</summary>
      <param name="importer">可导入元数据信息的 <see cref="T:System.ServiceModel.Description.MetadataImporter" />。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> 对象，其中既包含可以导入的策略断言，也包含可向其添加实现编码策略的自定义绑定元素的绑定元素集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="importer" /> 或 <paramref name="policyContext" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>在导入与编码关联的元数据文档之前调用。</summary>
      <param name="wsdlDocuments">描述服务的 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />。</param>
      <param name="xmlSchemas">包含 <paramref name="wsdlDocuments" /> 的架构的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <param name="policy">
        <see cref="T:System.Xml.XmlElement" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含策略元素。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>导入协定时调用。</summary>
      <param name="importer">协定导入程序。</param>
      <param name="context">导入上下文。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>将消息编码的自定义 WSDL 扩展映射到服务说明。</summary>
      <param name="importer">用于导入 WSDL 扩展的 <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="context">为映射提供上下文的 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageFault">
      <summary>表示 SOAP 错误在内存中的表示形式，该错误可以传递到 <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> 以创建包含错误的消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.#ctor">
      <summary>在派生类中调用时，初始化 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Actor">
      <summary>获取或设置操作者的值。</summary>
      <returns>操作者的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Code">
      <summary>获取 SOAP 错误代码。</summary>
      <returns>一个包含 SOAP 错误代码的 <see cref="T:System.ServiceModel.FaultCode" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>返回一个新 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象，该对象使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 和指定的消息缓冲区最大缓冲区大小。</summary>
      <returns>具有在参数中传递的初始值的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</returns>
      <param name="message">要用于创建 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象的指定 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxBufferSize">指定的消息缓冲区最大缓冲区大小</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.FaultCode,System.ServiceModel.FaultReason)">
      <summary>返回使用指定的 <see cref="T:System.ServiceModel.FaultCode" /> 和 <see cref="T:System.ServiceModel.FaultReason" /> 对象的新 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</summary>
      <returns>具有在参数中传递的初始值的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</returns>
      <param name="code">错误消息的错误代码。</param>
      <param name="reason">错误的原因。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.FaultCode,System.ServiceModel.FaultReason,System.Object)">
      <summary>返回使用指定的 <see cref="T:System.ServiceModel.FaultCode" />、<see cref="T:System.ServiceModel.FaultReason" /> 和详细信息对象的新 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</summary>
      <returns>具有在参数中传递的初始值的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</returns>
      <param name="code">错误消息的错误代码。</param>
      <param name="reason">错误的原因。</param>
      <param name="detail">错误详细信息对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.FaultCode,System.ServiceModel.FaultReason,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>返回使用指定的 <see cref="T:System.ServiceModel.FaultCode" />、<see cref="T:System.ServiceModel.FaultReason" />、详细信息对象和 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 对象的新 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</summary>
      <returns>具有在参数中传递的初始值的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</returns>
      <param name="code">错误消息的错误代码。</param>
      <param name="reason">错误的原因。</param>
      <param name="detail">错误详细信息对象。</param>
      <param name="serializer">在序列化详细信息对象时要使用的序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.FaultCode,System.ServiceModel.FaultReason,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.String)">
      <summary>返回使用指定的 <see cref="T:System.ServiceModel.FaultCode" />、<see cref="T:System.ServiceModel.FaultReason" />、详细信息对象、<see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 和操作者的新 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</summary>
      <returns>具有在参数中传递的初始值的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</returns>
      <param name="code">错误消息的错误代码。</param>
      <param name="reason">错误的原因。</param>
      <param name="detail">错误详细信息对象。</param>
      <param name="serializer">在序列化详细信息对象时要使用的序列化程序。</param>
      <param name="actor">操作者的值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.FaultCode,System.ServiceModel.FaultReason,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.String,System.String)">
      <summary>返回使用指定的 <see cref="T:System.ServiceModel.FaultCode" />、<see cref="T:System.ServiceModel.FaultReason" />、详细信息对象、<see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />、操作者和节点值的新 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</summary>
      <returns>具有在参数中传递的初始值的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</returns>
      <param name="code">错误消息的错误代码。</param>
      <param name="reason">错误的原因。</param>
      <param name="detail">错误详细信息对象。</param>
      <param name="serializer">在序列化详细信息对象时要使用的序列化程序。</param>
      <param name="actor">操作者的值。</param>
      <param name="node">节点的值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.FaultCode,System.String)">
      <summary>返回使用指定的 <see cref="T:System.ServiceModel.FaultCode" /> 和错误原因的新 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</summary>
      <returns>具有在参数中传递的初始值的 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 对象。</returns>
      <param name="code">错误消息的错误代码。</param>
      <param name="reason">错误的原因。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1">
      <summary>返回消息错误的详细信息对象。</summary>
      <returns>消息错误的详细信息对象。</returns>
      <typeparam name="T">详细信息对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>返回使用指定的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 的详细信息对象。</summary>
      <returns>包含在 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 中的详细信息对象。</returns>
      <param name="serializer">在反序列化详细信息对象时要使用的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">详细信息对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetReaderAtDetailContents">
      <summary>返回一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，该对象定位于 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 的详细信息对象。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，该对象定位于 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 的详细信息对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.HasDetail">
      <summary>获取一个值，该值指示 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 是否有详细信息对象。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 具有详细信息对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.IsMustUnderstandFault">
      <summary>获取一个值，该值指示此错误是否是由于识别 SOAP 标头失败而造成的。</summary>
      <returns>如果此错误是由于识别 SOAP 标头失败而造成的，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Node">
      <summary>获取该 SOAP 节点包含有关消息路径中哪个 SOAP 节点造成错误的信息。</summary>
      <returns>该 SOAP 节点包含有关消息路径中哪个 SOAP 节点造成错误的信息。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnGetReaderAtDetailContents">
      <summary>当在派生类中调用时，返回一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，该对象定位于 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 的详细信息对象。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，该对象定位于 <see cref="T:System.ServiceModel.Channels.MessageFault" /> 的详细信息对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>在写入详细内容之前调用。</summary>
      <param name="writer">用于写入详细信息元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">要写入的 SOAP 信封的版本。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetailContents(System.Xml.XmlDictionaryWriter)">
      <summary>在非抽象派生类中重写时，写入详细信息元素的内容。</summary>
      <param name="writer">用于写入详细信息元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteStartDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 和 SOAP 信封版本写入开始元素。</summary>
      <param name="writer">用于写入详细信息元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">要写入的 SOAP 信封的版本。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Reason">
      <summary>获取 SOAP 错误的文本说明。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.FaultReason" />，包含 SOAP 错误的文本说明。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.WasHeaderNotUnderstood(System.ServiceModel.Channels.MessageHeaders,System.String,System.String)">
      <summary>获取一个值，该值指示是否识别了 SOAP 消息头。</summary>
      <returns>如果识别了消息头，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="headers">SOAP 消息头。</param>
      <param name="name">标头元素的名称。</param>
      <param name="ns">标头元素的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.WriteTo(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>Writes the message fault that uses the specified <see cref="T:System.Xml.XmlDictionaryWriter" /> and SOAP envelope version.</summary>
      <param name="writer">用于写入消息错误的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">要写入的 SOAP 信封的版本。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.WriteTo(System.Xml.XmlWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>Writes the message fault that uses the specified <see cref="T:System.Xml.XmlWriter" /> and SOAP envelope version.</summary>
      <param name="writer">用于写入消息错误的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要写入的 SOAP 信封的版本。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeader">
      <summary>表示 SOAP 标头的内容。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Actor">
      <summary>获取或设置消息头的目标接收方。</summary>
      <returns>消息头的目标接收方。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String,System.Boolean)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
      <param name="relay">一个值，指示是否应该中继标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用 XmlFormatter 从要序列化的对象创建标头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String,System.Boolean)">
      <summary>创建具有指定数据的新消息头。</summary>
      <returns>一个具有指定数据的新 <see cref="T:System.ServiceModel.Channels.MessageHeader" /> 对象。</returns>
      <param name="name">标头 XML 元素的本地名称。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="value">要创建的标头的内容。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <param name="mustUnderstand">一个值，指示是否必须理解该标头。</param>
      <param name="actor">消息头的目标接收方。</param>
      <param name="relay">一个值，指示是否应该中继标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.IsMessageVersionSupported(System.ServiceModel.Channels.MessageVersion)">
      <summary>验证是否支持指定的消息版本。</summary>
      <returns>如果支持指定的消息版本，则为 true；否则为 false。</returns>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.IsReferenceParameter">
      <summary>获取一个值，该值指定此消息头是否包含终结点引用的引用参数。</summary>
      <returns>如果此消息头包含终结点引用的引用参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.MustUnderstand">
      <summary>获取或设置一个值，该值指示是否必须按照 SOAP 1.1/1.2 规范解释标头。</summary>
      <returns>如果必须理解标头，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>在使用指定的 XML 编写器序列化标头内容时调用。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化标头内容。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>在使用指定的 XML 编写器序列化开始标头时调用。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化开始标头。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Relay">
      <summary>获取一个值，该值指示是否应该中继标头。</summary>
      <returns>如果应该中继标头，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.ToString">
      <summary>返回该消息标头的字符串表示。</summary>
      <returns>该消息标头的字符串表示。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化标头。</summary>
      <param name="writer">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，用于序列化标头。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化标头。</summary>
      <param name="writer">一个 <see cref="T:System.Xml.XmlWriter" />，用于序列化标头。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderAttributes(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化标头特性。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化标头特性。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的 XML 编写器序列化标头内容。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于序列化标头内容。</param>
      <param name="messageVersion">包含与 SOAP 版本（与消息及其交换关联）相关的信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定 XML 编写器序列化开始标头。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化开始标头。</param>
      <param name="messageVersion">该对象包含与 SOAP 版本相关的信息，该版本与消息及其交换关联。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaderInfo">
      <summary>表示与 SOAP 消息头有关的系统信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaderInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Actor">
      <summary>获取或设置消息头的目标接收方。</summary>
      <returns>一个 URI，指示消息头的目标接收方。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.IsReferenceParameter">
      <summary>获取一个值，该值指定消息头是否表示终结点引用的引用参数。</summary>
      <returns>如果消息头表示终结点引用的引用参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.MustUnderstand">
      <summary>获取或设置一个值，该值指示对消息头的处理是强制的还是可选的。</summary>
      <returns>如果强制要求进行消息标头处理，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Name">
      <summary>获取消息头的名称。</summary>
      <returns>消息头的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Namespace">
      <summary>获取消息头的命名空间。</summary>
      <returns>消息头的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Relay">
      <summary>获取或设置一个值，该值指示消息头是否可中继。</summary>
      <returns>如果消息标头可中继，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaders">
      <summary>表示消息的消息头集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageHeaders)">
      <summary>使用指定的消息头集合初始化 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 类的新实例。</summary>
      <param name="collection">一个消息头集合。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的消息版本初始化 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 类的新实例。</summary>
      <param name="version">消息的 SOAP 版本。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion,System.Int32)">
      <summary>使用指定的消息版本和大小初始化 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 类的新实例。</summary>
      <param name="version">消息的 SOAP 版本。</param>
      <param name="initialSize">标头的大小。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Action">
      <summary>获取或设置应如何处理消息的说明。</summary>
      <returns>有关应如何处理消息的说明。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Add(System.ServiceModel.Channels.MessageHeader)">
      <summary>将指定的消息头添加到集合。</summary>
      <param name="header">将消息标头添加到集合中。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Clear">
      <summary>从集合中移除所有标头。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>将位于指定索引位置的标头内容从指定的消息复制到此实例。</summary>
      <param name="message">复制而来的标头中的消息。</param>
      <param name="headerIndex">从中复制内容的原始消息头位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.MessageHeaders,System.Int32)">
      <summary>将位于指定索引位置的标头内容从指定的消息头集合复制到此实例。</summary>
      <param name="collection">一个 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 集合对象。</param>
      <param name="headerIndex">从中复制内容的原始消息头位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.Message)">
      <summary>将所有标头的内容从指定的消息复制到此实例。</summary>
      <param name="message">复制而来的标头中的消息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.MessageHeaders)">
      <summary>将内容从指定的标头集合复制到此实例。</summary>
      <param name="collection">将标头复制到此实例中的 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 集合对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyTo(System.ServiceModel.Channels.MessageHeaderInfo[],System.Int32)">
      <summary>从某个数组的某个特定索引位置开始，将标头从此集合复制到该数组中。</summary>
      <param name="array">一个一维数组，它是从此实例复制的消息头对象的目标。 该数组必须具有从零开始的索引。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Count">
      <summary>获取此集合中的消息头数。</summary>
      <returns>此集合中的消息头数。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.FaultTo">
      <summary>获取或设置错误应发送到的节点地址。</summary>
      <returns>错误应发送到的节点的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String)">
      <summary>使用标头元素的指定 LocalName 和命名空间 URI 在此集合中查找消息头。</summary>
      <returns>如果找到，为在该集合中的信息标头的索引，如果指定的标头不存在则为 -1。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException">参数为 null。</exception>
      <exception cref="T:System.ServiceModel.MessageHeaderException">由参数指定的标题存在多次。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String,System.String[])">
      <summary>按标头元素的指定 LocalName、命名空间 URI 和操作者在此集合中查找消息头。</summary>
      <returns>如果找到，为在该集合中的信息标头的索引，如果指定的标头不存在则为 -1。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="actors">消息头的目标接收方。</param>
      <exception cref="T:System.ArgumentNullException">参数为 null。</exception>
      <exception cref="T:System.ServiceModel.MessageHeaderException">由参数指定的标题存在多次。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.From">
      <summary>获取或设置发送消息的节点的地址。</summary>
      <returns>发送消息的节点的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetEnumerator">
      <summary>返回迭代集合的一个枚举数。 不能继承此方法。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32)">
      <summary>在此集合中检索位于特定位置的消息头。</summary>
      <returns>指定索引处的消息标头。</returns>
      <param name="index">要获取的标头的从零开始的索引。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>在此集合中检索位于特定位置的消息头。</summary>
      <returns>指定索引处的消息标头。</returns>
      <param name="index">要获取的标头的从零开始的索引。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String)">
      <summary>使用标头元素的指定 LocalName 和命名空间 URI 在此集合中查找消息头。</summary>
      <returns>指定名称的消息标头。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>按指定 LocalName、命名空间 URI 和序列化程序在此集合中检索消息头。</summary>
      <returns>指定名称的消息标头。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="serializer">一个 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />，用于序列化标头。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.String[])">
      <summary>按标头元素的指定 LocalName、命名空间 URI 和操作者在此集合中检索消息头。</summary>
      <returns>指定名称的消息标头。</returns>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
      <param name="actors">消息头的目标接收方。</param>
      <typeparam name="T">消息头的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetReaderAtHeader(System.Int32)">
      <summary>获取一个 XML 字典读取器，该读取器使用位于集合中指定位置的消息头。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 对象，它使用位于集合中指定位置的消息头。</returns>
      <param name="headerIndex">要获取的标头的从零开始的索引。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood">
      <summary>验证是否已正确解释和处理了所有标记为 MustUnderstand 的消息头。</summary>
      <returns>如果 <paramref name="actors" /> 指定的接收方已正确解释并处理所有标记为 MustUnderstand 的消息头，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood(System.String[])">
      <summary>验证指定接收方是否已正确解释并处理所有标记为 MustUnderstand 的消息头。</summary>
      <returns>如果 <paramref name="actors" /> 指定的接收方已正确解释并处理所有标记为 MustUnderstand 的消息头，则为 true；否则为 false。</returns>
      <param name="actors">消息头的目标接收方。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Insert(System.Int32,System.ServiceModel.Channels.MessageHeader)">
      <summary>将消息头插入到集合中的指定索引位置。</summary>
      <param name="headerIndex">从零开始的索引，应在该位置插入 <paramref name="header" />。</param>
      <param name="header">要插入的消息头。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Item(System.Int32)">
      <summary>在给定的索引位置检索标头。</summary>
      <returns>集合中的 <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" />。 如果 <paramref name="index" /> 大于或等于列表中的标头数，则返回 null。</returns>
      <param name="index">列表中标头的从零开始的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageId">
      <summary>获取或设置消息的唯一 ID。</summary>
      <returns>消息的唯一 ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageVersion">
      <summary>获取消息的 SOAP 版本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 是消息的 SOAP 版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.RelatesTo">
      <summary>获取与此消息相关的消息的 ID。</summary>
      <returns>与此消息相关的消息的 ID。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAll(System.String,System.String)">
      <summary>从集合中移除具有指定名称和命名空间的所有标头。</summary>
      <param name="name">标头 XML 元素的 LocalName。</param>
      <param name="ns">标头 XML 元素的命名空间 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引位置的消息头。</summary>
      <param name="headerIndex">要移除的标头的从零开始的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.ReplyTo">
      <summary>获取或设置对请求的答复应发送到的节点的地址。</summary>
      <returns>对请求的答复应发送到的节点的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.SetAction(System.Xml.XmlDictionaryString)">
      <summary>设置标头的操作元素。</summary>
      <param name="action">有关应如何处理消息的说明。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回迭代集合的一个枚举数。 不能继承此方法。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.To">
      <summary>获取或设置消息的目标终结点。</summary>
      <returns>一个包含消息目标终结点的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.UnderstoodHeaders">
      <summary>获取必须按照 SOAP 1.1 和 1.2 规范解释的所有消息头。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.UnderstoodHeaders" /> 包含必须理解的消息标头。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>使用指定 XML 编写器从指定位置序列化标头。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，用于序列化标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>使用指定 XML 编写器从指定位置序列化标头。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">一个 <see cref="T:System.Xml.XmlWriter" />，用于序列化标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>使用指定 XML 编写器序列化指定的标头内容。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化标头内容。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlWriter)">
      <summary>使用指定 XML 编写器序列化指定的标头内容。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于序列化标头内容。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>使用指定 XML 编写器序列化开始标头。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 用于序列化开始标头。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>使用指定 XML 编写器序列化开始标头。</summary>
      <param name="headerIndex">要序列化的标头的从零开始的索引。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于序列化开始标头。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageProperties">
      <summary>表示消息的一组属性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor(System.ServiceModel.Channels.MessageProperties)">
      <summary>使用预设属性，初始化 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 类的新实例。</summary>
      <param name="properties">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Add(System.String,System.Object)">
      <summary>将具有指定名称和属性的元素添加到 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 集合中。</summary>
      <param name="name">要添加的元素的名称。</param>
      <param name="property">要添加的元素的值。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.AllowOutputBatching">
      <summary>获取或设置一个值，该值指定是否在传输消息之前对其进行存储。</summary>
      <returns>如果允许对传出消息进行批处理，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Clear">
      <summary>移除 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 集合中的所有元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 是否包含一个特定的名称、键或标识符。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含带有指定的 <paramref name="name" /> 的元素，则为 true；否则为 false。</returns>
      <param name="name">在 <see cref="T:System.ServiceModel.Channels.MessageProperties" />中要定位的名称、键或标识符。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.CopyProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>将指定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 的内容复制到此实例中。</summary>
      <param name="properties">复制而来的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 对象。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Count">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的属性总数。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的属性总数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Dispose">
      <summary>释放 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 类使用的所有资源。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Encoder">
      <summary>获取用于将消息写入流中并从流中读取消息的编码器。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MessageEncoder" />，用于将消息写入流中并从流中读取消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 的大小是否是固定的。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsReadOnly">
      <summary>获取一个值，该值指示此组属性是否为只读。</summary>
      <returns>如果此组属性为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Item(System.String)">
      <summary>检索具有指定名称、标识符或键值的属性。</summary>
      <returns>具有指定 <paramref name="name" /> 的属性，如果该属性不存在，则为 null。</returns>
      <param name="name">要从集合中获取的属性名称。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Keys">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的键。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Remove(System.String)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中移除具有指定名称的元素。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含具有指定 <paramref name="name" /> 的元素且可移除，则为 true；否则为 false。</returns>
      <param name="name">要移除的元素的名称。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Security">
      <summary>获取或设置消息的安全相关属性。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>将具有指定名称和属性的元素添加到 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中。</summary>
      <param name="pair">一个键/值对，包含要添加的元素的名称和值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>确定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 是否包含特定名称。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含具有指定的 <paramref name="pair" /> 中的名称和值的元素，则为 true；否则为 false。</returns>
      <param name="pair">一个键/值对，包含要在 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中查找的元素的名称和值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>从指定的索引开始，将指定的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 的内容复制到一个数组中。</summary>
      <param name="array">要将集合复制到的 <see cref="T:System.Array" />。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中移除具有指定名称的元素。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含具有 <paramref name="pair" /> 参数中的指定名称和值的元素且可移除，则为 true；否则为 false。</returns>
      <param name="pair">一个键/值对，包含要移除的元素的名称和值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回可循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.TryGetValue(System.String,System.Object@)">
      <summary>确定 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 是否包含特定名称，并检索其值。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 包含带有指定的 <paramref name="name" /> 的元素，则为 true；否则为 false。</returns>
      <param name="name">要查找的元素的名称。</param>
      <param name="value">所找到元素的值。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Values">
      <summary>获取包含 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 中的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Via">
      <summary>获取或设置用于发送消息的传输地址。</summary>
      <returns>一个 URI，包含用于发送消息的传输地址。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageState">
      <summary>指定消息的状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Closed">
      <summary>消息已关闭，无法再进行访问。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Copied">
      <summary>消息已复制。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Created">
      <summary>消息已创建。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Read">
      <summary>消息正在被读取。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Written">
      <summary>消息已写入。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageVersion">
      <summary>指定与消息及其交换相关联的 SOAP 和 WS-Addressing 的版本。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Addressing">
      <summary>获取或设置与当前消息版本关联的 WS-Addressing 版本。</summary>
      <returns>与当前消息版本关联的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion)">
      <summary>使用 WS-Addressing 1.0 和指定的 SOAP 版本创建消息版本对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageVersion" />，它使用指定版本的 SOAP 和 WS-Addressing 1.0。</returns>
      <param name="envelopeVersion">
        <see cref="T:System.ServiceModel.EnvelopeVersion" />，指示要使用的 SOAP 版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeVersion" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion,System.ServiceModel.Channels.AddressingVersion)">
      <summary>使用指定的 SOAP 和 WS-Addressing 版本创建消息版本对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageVersion" />，它使用指定版本的 WS-Addressing 和 SOAP。</returns>
      <param name="envelopeVersion">指示 SOAP 版本的 <see cref="T:System.ServiceModel.EnvelopeVersion" />。</param>
      <param name="addressingVersion">指示 WS-Addressing 版本的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeVersion" /> 或 <paramref name="addressingVersion" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Default">
      <summary>获取 Windows Communication Foundation (WCF) 所用的默认消息版本。</summary>
      <returns>使用 WS-Addressing 1.0 和 SOAP1.2 的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Envelope">
      <summary>获取与当前消息版本关联的 SOAP 版本。</summary>
      <returns>与当前消息版本关联的 <see cref="T:System.ServiceModel.EnvelopeVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.Equals(System.Object)">
      <summary>返回一个值，该值指示当前消息版本与指定对象是否相等。</summary>
      <returns>如果指定的对象等于当前的 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前消息版本进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.GetHashCode">
      <summary>获取当前消息版本的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 的唯一哈希代码。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.None">
      <summary>获取不使用 SOAP 或 WS-Addressing 的消息版本。</summary>
      <returns>不使用 SOAP 或 WS-Addressing 的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11">
      <summary>获取使用 SOAP 1.1 的消息版本。</summary>
      <returns>使用 SOAP 1.1 但无任何 WS-Addressing 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11WSAddressing10">
      <summary>获取使用 WS-Addressing 1.0 和 SOAP 1.1 的消息版本。</summary>
      <returns>使用 WS-Addressing 1.0 和 SOAP 1.1 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11WSAddressingAugust2004">
      <summary>通过使用 2004 年 8 月 10 日提交的 WS-Addressing 和 SOAP 1.1 来获取消息版本。</summary>
      <returns>使用 2004 年 8 月 10 日提交的 WS-Addressing 和 SOAP 1.1 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap12">
      <summary>获取使用 SOAP 1.2 的消息版本。</summary>
      <returns>使用 SOAP 1.2 但无任何 WS-Addressing 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10">
      <summary>获取使用 WS-Addressing 1.0 和 SOAP 1.2 的消息版本。</summary>
      <returns>使用 WS-Addressing 1.0 和 SOAP 1.2 版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressingAugust2004">
      <summary>获取消息版本，该消息版本使用 2004 年 8 月提交的 WS-Addressing 和 SOAP 1.2。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageVersion" />，它使用 2004 年 8 月 10 日提交的 WS-Addressing 和 SOAP 1.2 版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.ToString">
      <summary>返回当前消息版本的字符串表示形式。</summary>
      <returns>当前消息版本的字符串表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MsmqBindingElementBase">
      <summary>
        <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement" /> 和 <see cref="T:System.ServiceModel.Channels.MsmqTransportBindingElement" /> 的基类。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.CustomDeadLetterQueue">
      <summary>获取或设置一个标识自定义死信队列的 <see cref="T:System.Uri" />，过期消息或未能传递的消息将在该队列中进行发送。</summary>
      <returns>自定义死信队列的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.DeadLetterQueue">
      <summary>获取或设置此绑定的 <see cref="T:System.ServiceModel.DeadLetterQueue" /> 设置。</summary>
      <returns>要使用的死信队列（如果有的话）的类型。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不在 <see cref="T:System.ServiceModel.DeadLetterQueue" /> 中定义的值范围之内。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.Durable">
      <summary>获取或设置一个值，该值指定随此绑定发送的消息是持久的还是可变的。</summary>
      <returns>如果此绑定处理的消息是持久的，则为 true；如果这些消息是可变的，则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.ExactlyOnce">
      <summary>获取或设置一个值，该值指定随此绑定发送的消息是否具有一次性保证。</summary>
      <returns>如果随此绑定发送的消息具有一次性保证，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqBindingElementBase.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在派生类中重写时，为提供的绑定上下文检索指定类型的对象。</summary>
      <returns>类型 <paramref name="T" /> 的对象。</returns>
      <param name="context">绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">属性的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">上下文为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.MaxRetryCycles">
      <summary>获取或设置尝试向接收应用程序传递消息的最大重试周期数。</summary>
      <returns>一个值，指定将消息传输到病毒消息队列之前的重试周期数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.MsmqTransportSecurity">
      <summary>获取与此绑定元素关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" />。</summary>
      <returns>与此绑定元素关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.ReceiveContextEnabled">
      <summary>获取或设置一个指示是否请求接收上下文行为的值。</summary>
      <returns>如果此绑定支持接收上下文行为，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.ReceiveErrorHandling">
      <summary>获取或设置一个枚举值，该值指定如何处理病毒消息和其他无法调度的消息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.ReceiveErrorHandling" /> 值，指定如何处理病毒消息和其他无法调度的消息。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不在 <see cref="T:System.ServiceModel.ReceiveErrorHandling" /> 中定义的值范围之内。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.ReceiveRetryCount">
      <summary>获取或设置队列管理器在将消息传输到重试队列前可尝试发送该消息的最大次数。</summary>
      <returns>一个值，指定队列管理器在将消息传输到重试队列前应尝试发送该消息的最大次数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.RetryCycleDelay">
      <summary>获取或设置一个值，该值指定在尝试传递无法传递的消息时，尝试另一个重试周期之前应等待的时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在开始下一个尝试传递到接收应用程序的周期前等待的时间间隔。 默认值为 30（分钟）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqBindingElementBase.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出有关绑定的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqBindingElementBase.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>为协定将自定义 Web 服务描述语言 (WSDL) 元素写入到生成的 WSDL 中。</summary>
      <param name="exporter">导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqBindingElementBase.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>为终结点将自定义 Web 服务描述语言 (WSDL) 元素添加到生成的 WSDL 中。</summary>
      <param name="exporter">导出终结点信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="endpointContext">提供从导出的 WSDL 元素到终结点说明的映射。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.TimeToLive">
      <summary>获取或设置一个值，该值指定消息有效的时长。 过了这段时间之后，会根据 DeadLetterQueue 设置将消息放置到死信队列中。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，它指定消息有效的时长。 默认值为 24 小时。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.TransactedReceiveEnabled">
      <summary>获取一个值，该值指定是否需要使用事务来接收随此绑定发送的消息。</summary>
      <returns>如果绑定需要使用事务来进行接收操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.UseMsmqTracing">
      <summary>获取或设置一个值，该值启用或禁用消息队列 (MSMQ) 内置消息跟踪工具。</summary>
      <returns>如果应启用消息队列 (MSMQ) 内置消息跟踪，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.UseSourceJournal">
      <summary>获取或设置一个值，该值指示是否应将此绑定处理的消息副本存储到源日记队列中。</summary>
      <returns>如果将此绑定处理的消息复制到源日记队列中，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqBindingElementBase.ValidityDuration">
      <summary>获取或设置一个值，该值指定由接收上下文功能锁定消息的持续时间。</summary>
      <returns>将由接收上下文功能锁定消息的持续时间。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零或大于 Int32.MaxValue。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.MsmqMessageProperty">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MsmqMessageProperty" /> 类包装从队列中读取的消息的属性。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqMessageProperty.AbortCount">
      <summary>获取一个 <see cref="T:System.Int32" /> 值，该值指示消息参与已中止的事务的次数，即通道尝试数 – 1。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，指示通道尝试读取此消息的次数。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqMessageProperty.DeliveryFailure">
      <summary>从 <see cref="T:System.ServiceModel.Channels.DeliveryFailure" /> 枚举中获取一个值，该值指示消息传递失败的原因。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.DeliveryFailure" /> 枚举中的一个值，指示消息传递失败的原因。 可以为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqMessageProperty.DeliveryStatus">
      <summary>从 <see cref="T:System.ServiceModel.Channels.DeliveryStatus" /> 枚举中获取一个值，该值指示消息的传递状态。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.DeliveryStatus" /> 枚举中的一个值，指示消息的传递状态。 可以为 null。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqMessageProperty.Get(System.ServiceModel.Channels.Message)">
      <summary>获取指定 <see cref="T:System.ServiceModel.Channels.Message" /> 的 <see cref="T:System.ServiceModel.Channels.MsmqMessageProperty" />。</summary>
      <returns>指定 <see cref="T:System.ServiceModel.Channels.Message" /> 的 <see cref="T:System.ServiceModel.Channels.MsmqMessageProperty" />。</returns>
      <param name="message">将要检索其属性的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">该值为 null 或者消息的属性集合为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqMessageProperty.MoveCount">
      <summary>获取一个 <see cref="T:System.Int32" /> 值，该值指示消息从主队列移到子队列或从子队列移到主队列的次数。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，指示此消息移动的次数。</returns>
    </member>
    <member name="F:System.ServiceModel.Channels.MsmqMessageProperty.Name">
      <summary>获取包含字符串“MsmqMessageProperty”的 <see cref="T:System.String" />。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.MsmqTransportBindingElement">
      <summary>表示绑定元素，该绑定元素用于为使用本机消息队列 (MSMQ) 协议的 Windows Communication Foundation (WCF) 服务指定队列通信属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqTransportBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MsmqTransportBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>使用提供的上下文生成通道工厂。</summary>
      <returns>一个消息队列 (MSMQ) 通道工厂，用于创建可向现有消息队列应用程序发送消息的通道。</returns>
      <param name="context">用以生成通道工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">一个 <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> 类。</typeparam>
      <exception cref="T:System.ArgumentNullException">上下文值为 null。</exception>
      <exception cref="T:System.ArgumentException">TChannel 不为 IOutputChannel 或 IOutputSessionChannel。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>使用提供的上下文生成通道侦听器。</summary>
      <returns>一个消息队列 (MSMQ) 通道侦听器，用于创建可从现有 MSMQ 应用程序接收消息的通道。</returns>
      <param name="context">用以生成通道侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">用于生成通道侦听器的通道类型。 允许使用的通道类型为 <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IInputChannel" /> 类。</typeparam>
      <exception cref="T:System.ArgumentNullException">上下文值为 null。</exception>
      <exception cref="T:System.ArgumentException">TChannel 不为 IInputChannel 或 IInputSessionChannel。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个布尔值，该值指示是否能够使用提供的上下文生成通道工厂。</summary>
      <returns>如果利用所提供的上下文可生成通道工厂，则为 true；否则为 false。 仅当 <paramref name="TChannel" /> 为 <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" /> 时，绑定元素才返回 true。</returns>
      <param name="context">用以生成通道工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">用于生成通道侦听器的通道类型。 允许使用的通道类型为 <see cref="T:System.ServiceModel.Channels.IOutputSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> 类。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个布尔值，该值指示是否能够使用提供的上下文生成通道侦听器。</summary>
      <returns>如果利用所提供的上下文可生成通道侦听器，则为 true；否则为 false。 仅当 <paramref name="TChannel" /> 为 <see cref="T:System.ServiceModel.Channels.IInputChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" /> 时，绑定元素才返回 true。</returns>
      <param name="context">用以生成通道侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">用于生成通道侦听器的通道类型。 允许使用的通道类型为 <see cref="T:System.ServiceModel.Channels.IInputSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IInputChannel" /> 类。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MsmqTransportBindingElement.Clone">
      <summary>返回绑定元素的复本。</summary>
      <returns>绑定元素的复本。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqTransportBindingElement.MaxPoolSize">
      <summary>获取或设置一个整数，该整数指定包含内部消息队列 (MSMQ) 消息对象的池的最大大小。</summary>
      <returns>一个整数，它指定包含内部消息队列消息对象的池的最大大小。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqTransportBindingElement.QueueTransferProtocol">
      <summary>获取或设置一个枚举值，该值指示此绑定使用的排队通信通道传输。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.QueueTransferProtocol" /> 枚举值，该值指示在队列管理器之间用于消息传递的传输。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.QueueTransferProtocol" /> 值之一。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqTransportBindingElement.Scheme">
      <summary>返回一个 <see cref="T:System.String" />，它包含此传输绑定元素所用的寻址方案。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含此传输绑定元素所用的寻址方案。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MsmqTransportBindingElement.UseActiveDirectory">
      <summary>返回一个 Boolean 值，该值指示是否应该使用 Active Directory 转换队列地址。</summary>
      <returns>如果应该使用 Active Directory 转换队列地址，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MtomMessageEncodingBindingElement">
      <summary>指定消息传输优化机制 (MTOM) 消息所使用的编码和版本管理的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.MtomMessageEncodingBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion,System.Text.Encoding)">
      <summary>使用指定的消息版本和字符编码初始化 <see cref="T:System.ServiceModel.Channels.MtomMessageEncodingBindingElement" /> 类。</summary>
      <param name="messageVersion">用于 SOAP 消息的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</param>
      <param name="writeEncoding">用于格式化消息字符的 <see cref="T:System.Text.Encoding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageVersion" /> 或 <paramref name="encoding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">将 <paramref name="messageVersion" /> 设置为 <see cref="P:System.ServiceModel.Channels.MessageVersion.None" />。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在客户端上生成通道工厂堆栈，该通道工厂堆栈可为指定上下文创建指定类型的通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在客户端生成通道侦听器堆栈，该通道侦听器堆栈接受针对指定上下文的具有指定类型的通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />。</returns>
      <param name="context">侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示当前绑定是否可以为指定的通道类型和上下文生成工厂。</summary>
      <returns>如果可以在服务上生成指定的通道工厂堆栈，则为 true；否则为 false。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示当前绑定是否可以为指定的通道类型和上下文生成侦听器。</summary>
      <returns>如果可以在服务上生成指定的通道侦听器堆栈，则为 true；否则为 false。</returns>
      <param name="context">侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.Clone">
      <summary>创建一个从当前对象初始化的新 <see cref="T:System.ServiceModel.Channels.MtomMessageEncodingBindingElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MtomMessageEncodingBindingElement" /> 对象，其属性值等于当前元素的属性值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>创建对 MTOM 消息进行编码的消息编码器工厂。</summary>
      <returns>对 MTOM 消息进行编码的 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定元素堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T " />，如果不存在，则返回 null。</returns>
      <param name="context">绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.MaxBufferSize">
      <summary>获取或设置缓冲区的最大大小。</summary>
      <returns>缓冲区的最大大小。 默认值为 65536 (0x10000) 字节。</returns>
      <exception cref="T:System.ArgumentNullException">设置的值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.MaxReadPoolSize">
      <summary>获取或设置分配给池且可随时用于处理传入消息的 XML 读取器的最大数量。</summary>
      <returns>要保留在池中的读取器的最大数量。 默认值为 64 个读取器。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.MaxWritePoolSize">
      <summary>获取或设置分配给池且可随时用于处理传出消息的 XML 读取器的最大数量。</summary>
      <returns>要保留在池中的编写器的最大数量。 默认值为 16 个编写器。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.MessageVersion">
      <summary>获取或设置使用的或预期的 SOAP 消息和 WS-Addressing 版本。</summary>
      <returns>用于 SOAP 消息的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的值 <see cref="P:System.ServiceModel.Channels.MessageVersion.None" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定元素的终结点处理的 XML 消息的复杂性约束。</summary>
      <returns>为交换的 SOAP 消息指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。 下面的备注部分中提供了这些约束的默认值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.ShouldSerializeMessageVersion">
      <summary>返回是否应序列化 SOAP 消息结构版本。</summary>
      <returns>如果 SOAP 版本 属性应被序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.ShouldSerializeReaderQuotas">
      <summary>返回是否应序列化对 SOAP 消息结构的复杂性施加的限制。</summary>
      <returns>如果应对该 SOAP 消息约束进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.ShouldSerializeWriteEncoding">
      <summary>返回是否应序列化用于格式化消息字符的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>如果应序列化消息字符格式的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>策略断言生成之后会插入到 WSDL 中，指示 MTOM 编码正在使用中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="policyContext">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="policyContext" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>修改 MTOM 特定信息的 WSDL 协定。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>将 SOAP 消息版本放入 WSDL。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到终结点说明的映射。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MtomMessageEncodingBindingElement.WriteEncoding">
      <summary>获取或设置用于格式化文本消息中字符的编码。</summary>
      <returns>用于格式化文本消息中字符的 <see cref="T:System.Text.Encoding" />。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentException">该值不是有效的文本编码值。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.NamedPipeConnectionPoolSettings">
      <summary>表示控制命名管道连接池行为的设置。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.NamedPipeConnectionPoolSettings.GroupName">
      <summary>获取或设置客户端上的连接池组的组名称。</summary>
      <returns>客户端上的连接池组的名称。 默认名称为“default”。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.NamedPipeConnectionPoolSettings.IdleTimeout">
      <summary>获取或设置连接在断开前可在连接池中空闲的最长时间。</summary>
      <returns>返回一个 <see cref="T:System.TimeSpan" /> 结构，该结构指示连接在断开前可在连接池中空闲的最长时间。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.NamedPipeConnectionPoolSettings.MaxOutboundConnectionsPerEndpoint">
      <summary>获取或设置连接池中缓存的每个终结点的最大出站连接数。</summary>
      <returns>连接池中缓存的每个终结点所允许的最大出站连接数。 默认值为 10。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.NamedPipeSettings">
      <summary>指定命名管道设置。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.NamedPipeSettings.ApplicationContainerSettings">
      <summary>获取或设置命名管道设置的应用程序容器设置。</summary>
      <returns>命名管道设置的应用程序容器设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement">
      <summary>表示命名管道传输的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.NamedPipeTransportBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.NamedPipeTransportBindingElement.#ctor(System.ServiceModel.Channels.NamedPipeTransportBindingElement)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">
        <see cref="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement" /> 类的实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.NamedPipeTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的可用于创建通道的通道工厂。</summary>
      <returns>返回指定类型的通道工厂。</returns>
      <param name="context">一些成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">要创建的通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
      <exception cref="T:System.ArgumentException">传递的参数无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.NamedPipeTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的通道侦听器。</summary>
      <returns>返回指定类型的通道侦听器。</returns>
      <param name="context">一些成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">要创建的通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
      <exception cref="T:System.ArgumentException">传递的参数无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.NamedPipeTransportBindingElement.Clone">
      <summary>创建当前绑定元素的副本。</summary>
      <returns>返回当前绑定元素的副本。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.NamedPipeTransportBindingElement.ConnectionPoolSettings">
      <summary>获取连接池设置的集合。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.NamedPipeConnectionPoolSettings" /> 对象，包含与连接池相关的各种属性。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.NamedPipeTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中获取指定的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的指定对象；如果找不到该对象，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.NamedPipeTransportBindingElement.PipeSettings">
      <summary>获取命名管道传输绑定元素的管道设置。</summary>
      <returns>命名管道传输绑定元素的管道设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.NamedPipeTransportBindingElement.Scheme">
      <summary>返回传输的 URI 方案。</summary>
      <returns>返回传输的 URI 方案，即“net.pipe”。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.OneWayBindingElement">
      <summary>启用数据包路由和单向方法的使用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.OneWayBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>初始化通道工厂，用于生成绑定上下文中的单向通道。</summary>
      <returns>从 <paramref name="context" /> 中初始化的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">工厂生成的通道的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TChannel" /> 类型不是 <see cref="T:System.ServiceModel.Channels.IOutputChannel" />。</exception>
      <exception cref="T:System.InvalidOperationException">内部绑定元素不支持 <see cref="T:System.ServiceModel.Channels.IDuplexSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IRequestChannel" />。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>初始化通道侦听器，用于接受单向通道。</summary>
      <returns>从 <paramref name="context" /> 中初始化的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">生成侦听器以接受的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TChannel" /> 类型不是 <see cref="T:System.ServiceModel.Channels.IInputChannel" />。</exception>
      <exception cref="T:System.InvalidOperationException">内部绑定元素不支持 <see cref="T:System.ServiceModel.Channels.IDuplexSessionChannel" /> 或 <see cref="T:System.ServiceModel.Channels.IRequestChannel" />。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>获取一个值，该值指示是否可以生成指定类型的通道工厂。</summary>
      <returns>如果可以生成指定类型的通道工厂，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">要生成的通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>获取一个值，该值指示是否可以生成指定类型的通道侦听器。</summary>
      <returns>如果可以生成指定类型的通道侦听器，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">要生成的通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.OneWayBindingElement.ChannelPoolSettings">
      <summary>获取通道池设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.ChannelPoolSettings" /> 对象，包含与此绑定元素关联的通道池的属性。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.Clone">
      <summary>克隆此类的实例。</summary>
      <returns>此类的实例的一个克隆副本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定堆栈中获取属性（如果存在）。</summary>
      <returns>绑定堆栈中的一个 <paramref name="T" /> 对象（如果存在）。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">属性的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.OneWayBindingElement.MaxAcceptedChannels">
      <summary>获取或设置可以接受的最大通道数。</summary>
      <returns>可以接受的最大通道数。 默认值为 10。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.OneWayBindingElement.PacketRoutable">
      <summary>获取或设置一个值，该值指示是否启用数据包路由。</summary>
      <returns>如果启用数据包路由，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.ShouldSerializeChannelPoolSettings">
      <summary>返回与此绑定元素关联的通道池的属性是否应进行序列化。</summary>
      <returns>如果应序列化通道池设置，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出表示单向绑定元素的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exporter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exporter" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.OneWayBindingElementImporter">
      <summary>将 <see cref="T:System.ServiceModel.Channels.OneWayBindingElement" /> 中基于 WSDL 的策略转换为能够实现服务策略的绑定元素说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.OneWayBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.OneWayBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>定义一个可导入自定义策略断言和添加实现绑定元素的方法。</summary>
      <param name="importer">正在使用的 <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 对象。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，其中既包含可以导入的策略断言，也包含可向其添加实现绑定元素的绑定元素集合。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.PeerCustomResolverBindingElement">
      <summary>定义用于创建自定义对等解析程序的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.PeerCustomResolverBindingElement" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.#ctor(System.ServiceModel.Channels.BindingContext,System.ServiceModel.PeerResolvers.PeerCustomResolverSettings)">
      <summary>用提供的绑定上下文和解析程序设置初始化 <see cref="T:System.ServiceModel.Channels.PeerCustomResolverBindingElement" /> 类的新实例。</summary>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 对象，包含由此绑定创建的解析程序的绑定上下文。</param>
      <param name="settings">
        <see cref="T:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings" /> 对象，包含新绑定的特定设置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.#ctor(System.ServiceModel.Channels.PeerCustomResolverBindingElement)">
      <summary>通过克隆提供的自定义对等解析程序绑定初始化 <see cref="T:System.ServiceModel.Channels.PeerCustomResolverBindingElement" /> 类的新实例。</summary>
      <param name="other">
        <see cref="T:System.ServiceModel.Channels.PeerCustomResolverBindingElement" /> 实例，包含要为新绑定克隆的设置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.#ctor(System.ServiceModel.PeerResolvers.PeerCustomResolverSettings)">
      <summary>用提供的解析程序设置初始化 <see cref="T:System.ServiceModel.Channels.PeerCustomResolverBindingElement" /> 类的新实例。</summary>
      <param name="settings">
        <see cref="T:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings" /> 对象，包含新绑定的特定设置。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerCustomResolverBindingElement.Address">
      <summary>获取和设置对等节点的终结点地址，由此绑定创建的解析程序将在该对等节点上运行。</summary>
      <returns>包含对等节点的网络地址的 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象，由此绑定创建的解析程序将在该对等节点上运行。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerCustomResolverBindingElement.Binding">
      <summary>获取和设置用此绑定元素创建的解析程序所使用的网络绑定。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.Binding" />，指定用此绑定元素创建的解析程序所使用的网络绑定。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建一个通道工厂，该工厂可创建用于发送消息的通道。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelFactory" />，包含指定类型的新通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道工厂的绑定上下文。</param>
      <typeparam name="TChannel">要生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的用于接收消息的通道侦听器。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelListener" />，包含指定类型的新通道侦听器。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道侦听器的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定要生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果此绑定元素可以生成指定类型的通道工厂，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道工厂的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定要生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道侦听器。</summary>
      <returns>如果此绑定元素可以生成指定类型的通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道侦听器的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定通道侦听器的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.Clone">
      <summary>创建当前绑定元素的副本。</summary>
      <returns>包含当前绑定元素的副本的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.CreatePeerResolver">
      <summary>创建自定义对等解析程序的新实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolver" /> 对象，包含具有提供给此绑定元素的设置的新自定义对等解析程序。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerCustomResolverBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 对象返回一个属性。</summary>
      <returns>取自指定 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 的属性。</returns>
      <param name="context">指定绑定上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要从绑定上下文获取的特定属性。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerCustomResolverBindingElement.ReferralPolicy">
      <summary>获取和设置用此绑定元素创建的对等解析程序的引用策略。</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />，指定用此绑定元素创建的对等解析程序的引用策略。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.PeerResolverBindingElement">
      <summary>定义用于创建对等解析程序对象的绑定元素的抽象基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerResolverBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.PeerResolverBindingElement" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerResolverBindingElement.#ctor(System.ServiceModel.Channels.PeerResolverBindingElement)">
      <summary>通过复制所提供的 <see cref="T:System.ServiceModel.Channels.PeerResolverBindingElement" /> 对象初始化 <see cref="T:System.ServiceModel.Channels.PeerResolverBindingElement" /> 类的新实例。</summary>
      <param name="other">在创建此类实例时要复制的 <see cref="T:System.ServiceModel.Channels.PeerResolverBindingElement" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerResolverBindingElement.CreatePeerResolver">
      <summary>使用对此绑定元素定义的设置创建一个对等解析程序对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolver" /> 对象，用于执行名称到地址的对等解析。 对等解析程序的设置必须在绑定元素上定义。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerResolverBindingElement.ReferralPolicy">
      <summary>获取或设置对等解析程序的引用策略，这些对等解析程序是用此类的实现所创建的绑定元素创建的。</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" /> 枚举值，指定使用此绑定元素创建的对等解析程序的引用策略。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.PeerTransportBindingElement">
      <summary>定义用于创建对等消息传输通道的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.PeerTransportBindingElement" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建一个通道工厂，该工厂可创建用于发送消息的通道。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelFactory" />，包含指定类型的新通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道工厂的绑定上下文。</param>
      <typeparam name="TChannel">要生成的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在此通道工厂的绑定上下文中已指定手动寻址。</exception>
      <exception cref="T:System.ArgumentException">此绑定上下文指出的通道类型不受支持。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的用于接收消息的通道侦听器。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelListener" />，包含指定类型的新通道侦听器。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道侦听器的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定要生成的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 参数设置为 null。</exception>
      <exception cref="T:System.ArgumentException">此绑定上下文指出的通道类型不受支持。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果此绑定元素可以生成指定类型的通道工厂，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道工厂的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定要生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道侦听器。</summary>
      <returns>如果此绑定元素可以生成指定类型的通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道侦听器的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定通道侦听器的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.Clone">
      <summary>创建当前绑定元素的副本。</summary>
      <returns>包含当前绑定元素的副本的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 对象返回一个属性。</summary>
      <returns>取自指定 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 的属性。</returns>
      <param name="context">指定绑定上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要从绑定上下文获取的特定属性。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerTransportBindingElement.ListenIPAddress">
      <summary>获取和设置 IP 地址，此绑定元素创建的对等消息传输会在该 IP 地址上进行侦听。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" />，包含 IP 地址，此绑定元素创建的对等消息传输会在该 IP 地址上进行侦听。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerTransportBindingElement.MaxReceivedMessageSize">
      <summary>获取和设置指定发送到此绑定创建的传输通道的最大消息大小的值（以字节为单位）。</summary>
      <returns>指定通过此绑定元素创建的传输通道进行发送的消息的最大大小。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerTransportBindingElement.Port">
      <summary>获取和设置网络端口，此绑定元素创建的对等消息传输通道会在该端口上进行侦听。</summary>
      <returns>此绑定元素创建的对等消息传输会在其上进行侦听的网络端口。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerTransportBindingElement.Scheme">
      <summary>获取方案，用于指出此绑定元素创建的通道在传输消息时使用的协议。</summary>
      <returns>此绑定元素创建的通道在传输消息时使用的协议的方案。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.PeerTransportBindingElement.Security">
      <summary>获取此绑定元素创建的传输通道的特定安全设置。</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerSecuritySettings" />，指定此绑定元素创建的传输通道的特定安全设置。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>为终结点将自定义对等传输通道元素写入到生成的元数据中。</summary>
      <param name="exporter">可导出元数据信息的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>为协定将自定义对等传输通道元素写入到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PeerTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>为终结点将自定义对等传输通道元素写入到生成的 WSDL 中。</summary>
      <param name="exporter">导出终结点信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="endpointContext">一个 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到终结点说明的映射。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.PnrpPeerResolverBindingElement">
      <summary>定义用于创建对等名称解析协议 (PNRP) 对等解析程序的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.PnrpPeerResolverBindingElement" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.#ctor(System.ServiceModel.PeerResolvers.PeerReferralPolicy)">
      <summary>使用提供的对等引用策略初始化 <see cref="T:System.ServiceModel.Channels.PnrpPeerResolverBindingElement" /> 类的新实例。</summary>
      <param name="referralPolicy">为此对等解析程序指定引用策略的 <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建一个通道工厂，该工厂可创建用于发送消息的通道。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelFactory" />，包含指定类型的新通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道工厂的绑定上下文。</param>
      <typeparam name="TChannel">要生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的用于接收消息的通道侦听器。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelListener" />，包含指定类型的新通道侦听器。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道侦听器的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定要生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果此绑定元素可以生成指定类型的通道工厂，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道工厂的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定要生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道侦听器。</summary>
      <returns>如果此绑定元素可以生成指定类型的通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，指定通道侦听器的绑定上下文。</param>
      <typeparam name="TChannel">
        <see cref="T:System.ServiceModel.Channels.IChannel" />，指定通道侦听器的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.Clone">
      <summary>创建作为当前绑定元素的副本的新实例。</summary>
      <returns>包含当前绑定元素的副本的一个新的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.CreatePeerResolver">
      <summary>创建特定于 PNRP 的 <see cref="T:System.ServiceModel.PeerResolver" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.PeerResolver" /> 对象，包含此绑定元素创建的新 PNRP 解析程序。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 对象返回一个属性。</summary>
      <returns>取自指定 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 的属性。</returns>
      <param name="context">指定绑定上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要从绑定上下文获取的特定属性。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.PnrpPeerResolverBindingElement.ReferralPolicy">
      <summary>获取和设置此绑定元素创建的 PNRP 对等解析程序的引用策略。</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />，指定此绑定元素实例创建的解析程序的引用策略。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.PrivacyNoticeBindingElement">
      <summary>表示一个绑定元素，它包含 WS-Federation 绑定的隐私策略。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PrivacyNoticeBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.PrivacyNoticeBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PrivacyNoticeBindingElement.#ctor(System.ServiceModel.Channels.PrivacyNoticeBindingElement)">
      <summary>从现有元素初始化 <see cref="T:System.ServiceModel.Channels.PrivacyNoticeBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">用于初始化新元素的 <see cref="T:System.ServiceModel.Channels.PrivacyNoticeBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PrivacyNoticeBindingElement.Clone">
      <summary>创建当前绑定元素的副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" />，是当前元素的副本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PrivacyNoticeBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>对绑定元素堆栈进行查询，了解它是否支持特定的接口。</summary>
      <returns>正在测试其支持性的接口。</returns>
      <param name="context">当前绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">正在测试其支持性的接口。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.PrivacyNoticeBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>从包含策略的绑定元素中导出关于隐私声明的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，包含与策略相关的绑定断言和元素。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.PrivacyNoticeBindingElement.Url">
      <summary>获取或设置隐私声明所在的 URI。</summary>
      <returns>隐私声明所在的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.PrivacyNoticeBindingElement.Version">
      <summary>获取或设置绑定的隐私声明版本号。</summary>
      <returns>隐私声明的版本号。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.PrivacyNoticeBindingElementImporter">
      <summary>将基于 WSDL 的策略和隐私声明协定导入能够实现这些服务策略的绑定元素说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PrivacyNoticeBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.PrivacyNoticeBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PrivacyNoticeBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导入隐私声明的自定义策略断言，并添加实现策略的绑定元素。</summary>
      <param name="importer">可导入元数据信息的 <see cref="T:System.ServiceModel.Description.MetadataImporter" />。</param>
      <param name="policyContext">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> 对象，其中既包含可以导入的策略断言，也包含可向其添加实现编码策略的自定义绑定元素的绑定元素集合。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ReceiveContext">
      <summary>从此类派生以实现针对接收上下文功能的自定义状态机。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ReceiveContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.Abandon(System.Exception,System.TimeSpan)">
      <summary>使状态机转换到带指定的异常和超时值的放弃状态。</summary>
      <param name="exception">导致放弃操作的异常。</param>
      <param name="timeout">要完成的放弃操作的超时值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.Abandon(System.TimeSpan)">
      <summary>使状态机转换到带指定超时值的放弃状态。</summary>
      <param name="timeout">要完成的放弃操作的超时值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.BeginAbandon(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步放弃操作，该操作具有指定的异常、超时值、异步回调和用户定义的状态数据。</summary>
      <returns>一个引用异步放弃操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="exception">包含执行放弃操作的原因的异常。</param>
      <param name="timeout">要完成的放弃操作的超时值。</param>
      <param name="callback">可接收异步操作完成通知的异步回调委托。</param>
      <param name="state">用户定义的状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.BeginAbandon(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步放弃操作，该操作具有指定超时值、异步回调和用户定义的状态数据。</summary>
      <returns>一个引用异步放弃操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">要完成的放弃操作的超时值。</param>
      <param name="callback">可接收异步操作完成通知的异步回调委托。</param>
      <param name="state">用户定义的状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.BeginComplete(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步完成操作，该操作具有指定超时值、异步回调和用户定义的状态数据。</summary>
      <returns>一个引用异步完成操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">要完成的完成操作的超时值。</param>
      <param name="callback">可接收异步操作完成通知的异步回调委托。</param>
      <param name="state">用户定义的状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.Complete(System.TimeSpan)">
      <summary>使状态机转换到带指定超时值的完成状态。</summary>
      <param name="timeout">要完成的完成操作的超时值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.EndAbandon(System.IAsyncResult)">
      <summary>完成异步放弃操作。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Activities.WorkflowControlClient.BeginAbandon" /> 方法之一返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.EndComplete(System.IAsyncResult)">
      <summary>完成异步完成操作。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ReceiveContext.BeginComplete(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.Fault">
      <summary>使状态机转换到出错状态。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.ReceiveContext.Faulted">
      <summary>定义在消息传递的过程中发生异常时将要引发的事件。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ReceiveContext.Name">
      <summary>接收上下文的名称。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnAbandon(System.Exception,System.TimeSpan)">
      <summary>在状态机转换到带指定的异常和超时值的放弃状态时调用。</summary>
      <param name="exception">包含执行放弃操作的原因的异常。</param>
      <param name="timeout">要完成的放弃操作的超时值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnAbandon(System.TimeSpan)">
      <summary>在状态机转换到带指定超时值的放弃状态时调用。</summary>
      <param name="timeout">要完成的放弃操作的超时值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnBeginAbandon(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在状态机异步转换到带指定的异常、超时值、异步回调和状态数据的放弃状态时调用。</summary>
      <returns>一个引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="exception">包含执行放弃操作的原因的异常。</param>
      <param name="timeout">要完成的放弃操作的超时值。</param>
      <param name="callback">可接收异步操作完成通知的异步回调委托。</param>
      <param name="state">用户定义的状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnBeginAbandon(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在状态机异步转换到带指定的超时值、异步回调和状态数据的放弃状态时调用。</summary>
      <returns>一个引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">要完成的放弃操作的超时值。</param>
      <param name="callback">可接收异步操作完成通知的异步回调委托。</param>
      <param name="state">用户定义的状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnBeginComplete(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在状态机异步转换到带指定的超时值、异步回调和状态数据的完成状态时调用。</summary>
      <returns>一个引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">要完成的完成操作的超时值。</param>
      <param name="callback">可接收异步操作完成通知的异步回调委托。</param>
      <param name="state">用户定义的状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnComplete(System.TimeSpan)">
      <summary>在状态机转换到带指定超时值的完成状态时调用。</summary>
      <param name="timeout">要完成的完成操作的超时值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnEndAbandon(System.IAsyncResult)">
      <summary>在状态机异步转换到放弃状态时调用。</summary>
      <param name="result">通过调用 <see cref="Overload:System.ServiceModel.Channels.ReceiveContext.OnBeginAbandon" /> 方法之一返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnEndComplete(System.IAsyncResult)">
      <summary>在状态机异步转换到完成状态时调用。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Channels.ReceiveContext.OnBeginComplete(System.TimeSpan,System.AsyncCallback,System.Object)" /> 返回的 <see cref="T:System.IAsyncResult" /></param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.OnFaulted">
      <summary>在状态机转换到出错状态时调用。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ReceiveContext.State">
      <summary>获取或设置状态机的状态。</summary>
      <returns>状态机的当前接收上下文状态。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ReceiveContext.ThisLock">
      <summary>一个用于锁定 <see cref="T:System.ServiceModel.Channels.ReceiveContext" /> 实例的对象。</summary>
      <returns>
        <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.ReceiveContext@)">
      <summary>尝试从指定的消息获取接收上下文。</summary>
      <returns>如果成功检索到接收上下文，则为 true；否则为 false。</returns>
      <param name="message">消息。</param>
      <param name="property">接收上下文。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ReceiveContext.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Channels.ReceiveContext@)">
      <summary>尝试从指定的消息属性集合获取接收上下文。</summary>
      <returns>如果成功检索到接收上下文，则为 true；否则为 false。</returns>
      <param name="properties">消息属性集合。</param>
      <param name="property">接收上下文。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ReceiveContextState">
      <summary>表示接收上下文状态机的可能状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ReceiveContextState.Abandoned">
      <summary>表示已放弃状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ReceiveContextState.Abandoning">
      <summary>表示正在放弃状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ReceiveContextState.Completed">
      <summary>表示已完成状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ReceiveContextState.Completing">
      <summary>表示正在完成状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ReceiveContextState.Faulted">
      <summary>表示出错状态。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.ReceiveContextState.Received">
      <summary>表示已接收状态。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.RedirectionDuration">
      <summary>表示 SOAP 重定向有效的持续时间。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionDuration.Create(System.String,System.String)">
      <summary>使用指定的持续时间和命名空间创建一个新的 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 实例。</summary>
      <returns>重定向持续时间。</returns>
      <param name="duration">重定向持续时间。</param>
      <param name="ns">重定向命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionDuration.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前的 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 实例。</summary>
      <returns>如果指定的对象等于当前的 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" />，则为 true；否则为 false。</returns>
      <param name="obj">要与当前的 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 实例进行比较的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionDuration.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionDuration.Namespace">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 的命名空间。</summary>
      <returns>重定向持续时间的命名空间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionDuration.op_Equality(System.ServiceModel.Channels.RedirectionDuration,System.ServiceModel.Channels.RedirectionDuration)">
      <summary>返回一个值，该值指示 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 类型的两个实例是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值相等，则为 true；否则为 false。</returns>
      <param name="left">一个 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 实例。</param>
      <param name="right">一个 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionDuration.op_Inequality(System.ServiceModel.Channels.RedirectionDuration,System.ServiceModel.Channels.RedirectionDuration)">
      <summary>返回一个值，该值指示 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 类型的两个实例是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值不相等，则为 true；否则为 false。</returns>
      <param name="left">一个 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 实例。</param>
      <param name="right">一个 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 实例。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionDuration.Permanent">
      <summary>获取表示永久重定向的 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" />，其中包含表示永久重定向的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionDuration.Temporary">
      <summary>获取表示临时重定向的 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" />，其中包含表示临时重定向的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionDuration.ToString">
      <summary>将当前 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 对象的值的字符串表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionDuration.Value">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" /> 实例的值。</summary>
      <returns>重定向持续时间的值。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RedirectionException">
      <summary>表示在重定向处理时发生的错误。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.ServiceModel.Channel.RedirectionException" /> 类的新实例。</summary>
      <param name="info">序列化信息。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionException.#ctor(System.ServiceModel.Channels.RedirectionType,System.ServiceModel.Channels.RedirectionDuration,System.ServiceModel.Channels.RedirectionScope,System.Exception,System.ServiceModel.Channels.RedirectionLocation[])">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.RedirectionType" />、<see cref="T:System.ServiceModel.Channels.RedirectionDuration" />、<see cref="T:System.ServiceModel.Channels.RedirectionScope" />、内部异常和 <see cref="T:System.ServiceModel.Channels.RedirectionLocation" /> 对象数组，初始化 <see cref="T:System.ServiceModel.Channels.RedirectionException" /> 的新实例。</summary>
      <param name="type">重定向的类型。</param>
      <param name="duration">重定向的持续时间。</param>
      <param name="scope">重定向的范围。</param>
      <param name="innerException">内部异常。</param>
      <param name="locations">重定向的位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionException.#ctor(System.ServiceModel.Channels.RedirectionType,System.ServiceModel.Channels.RedirectionDuration,System.ServiceModel.Channels.RedirectionScope,System.ServiceModel.Channels.RedirectionLocation[])">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.RedirectionType" />、<see cref="T:System.ServiceModel.Channels.RedirectionDuration" />、<see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 和 <see cref="T:System.ServiceModel.Channels.RedirectionLocation" /> 对象数组，初始化 <see cref="T:System.ServiceModel.Channels.RedirectionException" /> 的新实例。</summary>
      <param name="type">重定向的类型。</param>
      <param name="duration">重定向的持续时间。</param>
      <param name="scope">重定向的范围。</param>
      <param name="locations">重定向的位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionException.#ctor(System.String,System.ServiceModel.Channels.RedirectionType,System.ServiceModel.Channels.RedirectionDuration,System.ServiceModel.Channels.RedirectionScope,System.Exception,System.ServiceModel.Channels.RedirectionLocation[])">
      <summary>使用指定的消息字符串、<see cref="T:System.ServiceModel.Channels.RedirectionType" />、<see cref="T:System.ServiceModel.Channels.RedirectionDuration" />、<see cref="T:System.ServiceModel.Channels.RedirectionScope" />、内部异常和 <see cref="T:System.ServiceModel.Channels.RedirectionLocation" /> 对象数组，初始化 <see cref="T:System.ServiceModel.Channels.RedirectionException" /> 的新实例。</summary>
      <param name="message">重定向消息。</param>
      <param name="type">重定向的类型。</param>
      <param name="duration">重定向的持续时间。</param>
      <param name="scope">重定向的范围。</param>
      <param name="innerException">内部异常。</param>
      <param name="locations">重定向的位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionException.#ctor(System.String,System.ServiceModel.Channels.RedirectionType,System.ServiceModel.Channels.RedirectionDuration,System.ServiceModel.Channels.RedirectionScope,System.ServiceModel.Channels.RedirectionLocation[])">
      <summary>使用指定的消息、<see cref="T:System.ServiceModel.Channels.RedirectionType" />、<see cref="T:System.ServiceModel.Channels.RedirectionDuration" />、<see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 和 <see cref="T:System.ServiceModel.Channels.RedirectionLocation" /> 对象数组，初始化 <see cref="T:System.ServiceModel.Channels.RedirectionException" /> 的新实例。</summary>
      <param name="message">描述当前异常的消息。</param>
      <param name="type">重定向的类型。</param>
      <param name="duration">重定向的持续时间。</param>
      <param name="scope">重定向的范围。</param>
      <param name="locations">重定向的位置。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionException.Duration">
      <summary>获取与当前 <see cref="T:System.ServiceModel.Channels.RedirectionException" /> 关联的 <see cref="T:System.ServiceModel.Channels.RedirectionDuration" />。</summary>
      <returns>与异常关联的重定向持续时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">序列化信息。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionException.Locations">
      <summary>获取与当前 <see cref="T:System.ServiceModel.Channels.RedirectionException" /> 关联的 <see cref="T:System.ServiceModel.Channels.RedirectionLocation" /> 对象的集合。</summary>
      <returns>重定向位置的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionException.Scope">
      <summary>获取与 <see cref="T:System.ServiceModel.Channels.RedirectionException" /> 关联的 <see cref="T:System.ServiceModel.Channels.RedirectionScope" />。</summary>
      <returns>与异常关联的重定向范围。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionException.Type">
      <summary>获取与 <see cref="T:System.ServiceModel.Channels.RedirectionException" /> 关联的 <see cref="T:System.ServiceModel.Channels.RedirectionType" />。</summary>
      <returns>与异常关联的重定向类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RedirectionLocation">
      <summary>表示应在其中重定向后续请求的地址。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionLocation.#ctor(System.Uri)">
      <summary>用指定的 <see cref="T:System.Uri" /> 初始化 <see cref="T:System.ServiceModel.Channels.RedirectionLocation" /> 的新实例。</summary>
      <param name="address">重定向的 URI。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionLocation.Address">
      <summary>获取重定向的 <see cref="T:System.Uri" />。</summary>
      <returns>应在其中重定向后续请求的地址。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RedirectionScope">
      <summary>表示重定向范围。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionScope.Create(System.String,System.String)">
      <summary>使用指定的范围和命名空间创建一个新的 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 实例。</summary>
      <returns>新的重定向范围实例。</returns>
      <param name="scope">重定向范围。</param>
      <param name="ns">重定向命名空间。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionScope.Endpoint">
      <summary>获取表示终结点重定向范围的 <see cref="T:System.ServiceModel.Channels.RedirectionScope" />。</summary>
      <returns>终结点重定向范围。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionScope.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前的 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 实例。</summary>
      <returns>如果指定的对象等于当前的 <see cref="T:System.ServiceModel.Channels.RedirectionScope" />，则为 true；否则为 false。</returns>
      <param name="obj">要与当前的 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 实例进行比较的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionScope.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionScope.Message">
      <summary>获取表示消息重定向范围的 <see cref="T:System.ServiceModel.Channels.RedirectionScope" />。</summary>
      <returns>消息重定向范围。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionScope.Namespace">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 的命名空间。</summary>
      <returns>重定向范围的命名空间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionScope.op_Equality(System.ServiceModel.Channels.RedirectionScope,System.ServiceModel.Channels.RedirectionScope)">
      <summary>返回一个值，该值指示 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 类型的两个实例是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值相等，则为 true；否则为 false。</returns>
      <param name="left">一个 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 实例。</param>
      <param name="right">一个 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionScope.op_Inequality(System.ServiceModel.Channels.RedirectionScope,System.ServiceModel.Channels.RedirectionScope)">
      <summary>返回一个值，该值指示 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 类型的两个实例是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值不相等，则为 true；否则为 false。</returns>
      <param name="left">一个 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 实例。</param>
      <param name="right">一个 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 实例。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionScope.Session">
      <summary>获取表示会话重定向范围的 <see cref="T:System.ServiceModel.Channels.RedirectionScope" />。</summary>
      <returns>会话重定向范围。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionScope.ToString">
      <summary>将当前 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 对象的值的字符串表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionScope.Value">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.RedirectionScope" /> 实例的值。</summary>
      <returns>重定向范围的值。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RedirectionType">
      <summary>一个表示重定向类型的类型。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionType.Cache">
      <summary>获取表示缓存重定向类型的 <see cref="T:System.ServiceModel.Channels.RedirectionType" />。</summary>
      <returns>缓存重定向类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionType.Create(System.String,System.String)">
      <summary>使用指定的重定向类型和重定向命名空间创建 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 类的新实例。</summary>
      <returns>重定向类型。</returns>
      <param name="type">重定向类型。</param>
      <param name="ns">重定向命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionType.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前的 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 实例。</summary>
      <returns>如果指定的对象等于当前的 <see cref="T:System.ServiceModel.Channels.RedirectionType" />，则为 true；否则为 false。</returns>
      <param name="obj">要与当前的 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 实例进行比较的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionType.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionType.Namespace">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 的命名空间。</summary>
      <returns>重定向类型的命名空间。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionType.op_Equality(System.ServiceModel.Channels.RedirectionType,System.ServiceModel.Channels.RedirectionType)">
      <summary>返回一个值，该值指示 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 类型的两个实例是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值相等，则为 true；否则为 false。</returns>
      <param name="left">一个 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 实例。</param>
      <param name="right">一个 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionType.op_Inequality(System.ServiceModel.Channels.RedirectionType,System.ServiceModel.Channels.RedirectionType)">
      <summary>返回一个值，该值指示 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 类型的两个实例是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值不相等，则为 true；否则为 false。</returns>
      <param name="left">一个 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 实例。</param>
      <param name="right">一个 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 实例。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionType.Resource">
      <summary>获取表示资源重定向类型的 <see cref="T:System.ServiceModel.Channels.RedirectionType" />。</summary>
      <returns>资源重定向类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RedirectionType.ToString">
      <summary>将当前 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 对象的值的字符串表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionType.UseIntermediary">
      <summary>获取表示使用中间重定向类型的 <see cref="T:System.ServiceModel.Channels.RedirectionType" />。</summary>
      <returns>资源重定向类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RedirectionType.Value">
      <summary>获取 <see cref="T:System.ServiceModel.Channels.RedirectionType" /> 的值。</summary>
      <returns>重定向类型的值。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ReliableSessionBindingElement">
      <summary>表示绑定元素，该绑定元素可生成终结点间可靠会话所需的发送和接收通道。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ReliableSessionBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ReliableSessionBindingElement" /> 类的新实例，用以指定消息传递是否必须保持与消息发送一致的顺序。</summary>
      <param name="ordered">如果消息必须按照发送时的顺序传递，则为 true；否则为 false。 默认值为 true。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval">
      <summary>获取或设置在向工厂所创建的可靠通道上的消息源发送确认之前目标等待的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在向消息源发送确认之前服务等待的时间间隔。 默认值为 2 秒。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于或等于零。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个工厂，该工厂可创建支持可靠会话的指定类型的通道。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />（从 <paramref name="context" /> 中初始化）。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，包含生成工厂所需的信息，这些工厂可生成类型为 <paramref name="TChannel" /> 的通道。</param>
      <typeparam name="TChannel">工厂生成的通道类型。</typeparam>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="TChannel" />。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个侦听器，该侦听器可接受支持可靠会话的指定类型的通道。</summary>
      <returns>从 <paramref name="context" /> 中初始化的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，包含生成侦听器所需的信息，这些侦听器可接受类型为 <paramref name="TChannel" /> 的通道。</param>
      <typeparam name="TChannel">生成侦听器后所要接受的 <see cref="T:System.ServiceModel.Channels.IChannel" />。</typeparam>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="TChannel" />。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示是否可以为能够支持可靠会话的通道和所提供的上下文生成通道工厂。</summary>
      <returns>如果可生成类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，包含生成工厂所需的信息，这些工厂可生成类型为 <paramref name="TChannel" /> 的通道。</param>
      <typeparam name="TChannel">工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示是否可以为能够支持可靠会话的通道和所提供的上下文生成通道侦听器。</summary>
      <returns>如果绑定元素可以生成能产生类型为 <paramref name="TChannel" /> 的 <see cref="T:System.ServiceModel.Channels.IChannel" /> 的 <see cref="T:System.ServiceModel.Channels.ChannelListenerBase`1" />，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，包含生成侦听器所需的信息，这些侦听器可接受类型为 <paramref name="TChannel" /> 的通道。</param>
      <typeparam name="TChannel">生成通道侦听器后所要接受的 <see cref="T:System.ServiceModel.Channels.IChanne" />l。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.Clone">
      <summary>创建当前可靠会话绑定元素的副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" />，它是当前绑定元素的克隆。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled">
      <summary>获取或设置一个值，该值指示可靠会话是否已启用流控制。</summary>
      <returns>如果可靠会话已启用流控制，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定上下文获取指定类型的属性。</summary>
      <returns>类型为 <paramref name="T" /> 且具有指定 <paramref name="context" /> 的属性，如果找不到类型为 <paramref name="T" /> 的属性，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />，包含检索 <paramref name="T" /> 类型通道时所需的信息。</param>
      <typeparam name="T">已检索的属性类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout">
      <summary>获取或设置服务在关闭之前保持非活动状态的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定服务在关闭之前保持非活动状态的时间间隔。 默认值为 10 分钟。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于或等于零，或者大于 <see cref="F:System.Int32.MaxValue" /> 或 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels">
      <summary>获取或设置在可靠会话期间可为挂起状态的最大通道数。</summary>
      <returns>可为挂起状态的最大通道数。 默认值为 4。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于或等于零，或者大于 16384。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount">
      <summary>获取或设置在可靠会话期间尝试传输消息的最大次数。</summary>
      <returns>尝试重新发送消息的最大次数。 最小值为 1；最大值为 <see cref="F:System.Int32.MaxValue" />；默认值为 8。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize">
      <summary>获取或设置在发送缓冲区或接收缓冲区中可存在的最大消息数。</summary>
      <returns>可进行缓冲处理的最大消息数。 最小值为 1；最大值为 4096；默认值为 32。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于或等于 1，或者大于 4096。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered">
      <summary>获取或设置一个值，该值指示消息传递是否必须保持与消息发送一致的顺序。</summary>
      <returns>如果消息必须按照发送时的顺序传递，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion">
      <summary>获取或设置绑定元素指定的 WS-ReliableMessaging 版本。</summary>
      <returns>一个派生自 <see cref="T:System.ServiceModel.ReliableMessagingVersion" /> 的实例，表示配置元素所使用的 WS-ReliableMessaging 协议的版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>将可靠会话绑定元素包含的信息，映射到可启用远程终结点以通过可靠会话访问服务的 WSDL 元素。</summary>
      <param name="exporter">将可靠会话绑定元素中的绑定信息导出到 WSDL 元素的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，提供从导出的 WSDL 元素到终结点说明的映射。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ReliableSessionBindingElementImporter">
      <summary>在可靠的会话绑定元素和元数据中其相应策略断言的表示形式之间进行映射。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.ReliableSessionBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ReliableSessionBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>将 WS-Reliable Message 策略断言转换为客户端绑定中的可靠会话绑定元素。</summary>
      <param name="importer">
        <see cref="T:System.ServiceModel.Description.MetadataImporter" />，将 WSDL 元数据导入到绑定元素中。</param>
      <param name="context">服务终结点的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，包含必须转换为绑定元素的绑定策略断言。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 或 <paramref name="importer" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Channels.InvalidChannelBindingException">读取的策略断言无效，因其与 WS-Reliable Messaging Policy 不符。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.RemoteEndpointMessageProperty">
      <summary>让与发送消息的远程终结点有关的客户端 IP 地址和端口号可用。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RemoteEndpointMessageProperty.#ctor(System.String,System.Int32)">
      <summary>针对用于识别发送消息的客户端的指定 IP 地址和端口号，初始化 <see cref="T:System.ServiceModel.Channels.RemoteEndpointMessageProperty" /> 类的新实例。</summary>
      <param name="address">与消息有关的远程终结点的 IP 地址。</param>
      <param name="port">与消息有关的远程终结点的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null 或为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号小于 0 或大于 65535 (0xffff)。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.RemoteEndpointMessageProperty.Address">
      <summary>获取发送消息的客户端的 IP 地址。</summary>
      <returns>发送消息的客户端的 IP 地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RemoteEndpointMessageProperty.Name">
      <summary>返回字符串“System.ServiceModel.Channels.RemoteEndpointMessageProperty”。</summary>
      <returns>“System.ServiceModel.Channels.RemoteEndpointMessageProperty”</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.RemoteEndpointMessageProperty.Port">
      <summary>获取发送消息的客户端的端口号。</summary>
      <returns>发送消息的客户端的端口号。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RequestContext">
      <summary>提供一个与传入请求关联的答复。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.RequestContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Abort">
      <summary>在派生类中重写时，中止处理与上下文关联的请求。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>在派生类中重写时，开始进行异步操作，以答复与当前上下文关联的请求。</summary>
      <returns>引用异步答复操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">包含请求的传入 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步答复操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步答复操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在派生类中重写时，开始进行异步操作，以在指定时间间隔内答复与当前上下文关联的请求。</summary>
      <returns>引用异步答复操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">包含请求的传入 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">指定等待答复可用请求的时间间隔的 <see cref="T:System.Timespan" />。</param>
      <param name="callback">接收异步答复操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步答复操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close">
      <summary>在派生类中重写时，关闭正答复与当前上下文关联的请求上下文的操作。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close(System.TimeSpan)">
      <summary>在派生类中重写时，关闭在指定时间间隔内正答复与当前上下文关联的请求上下文的操作。</summary>
      <param name="timeout">指定时间间隔的 <see cref="T:System.Timespan" />，与当前上下文关联的答复操作必须在此时间间隔内关闭。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Dispose(System.Boolean)">
      <summary>释放与上下文关联的资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.EndReply(System.IAsyncResult)">
      <summary>在派生类中重写时，完成一个答复请求消息的异步操作。</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.RequestContext.BeginReply" /> methods.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message)">
      <summary>在派生类中重写时，答复请求消息。</summary>
      <param name="message">包含请求的传入 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>在派生类中重写时，在指定时间间隔内答复请求消息。</summary>
      <param name="message">包含请求的传入 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">指定在答复请求之前要等待的时间间隔的 <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RequestContext.RequestMessage">
      <summary>在派生类中重写时，获取包含请求的消息。</summary>
      <returns>包含请求的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.System#IDisposable#Dispose">
      <summary>释放与上下文关联的托管资源和非托管资源。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.RetryException">
      <summary>表示一个重试异常，消息传递主机（如 <see cref="T:System.ServiceModel.Activities,WorkflowServiceHost" />）可使用此异常将对某个尝试的操作的任何取消传达到客户端。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RetryException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.RetryException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RetryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.ServiceModel.Channels.RetryException" /> 类的新实例。</summary>
      <param name="info">序列化信息。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RetryException.#ctor(System.String)">
      <summary>用指定消息初始化 <see cref="T:System.ServiceModel.Channels.RetryException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RetryException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.Channels.RetryException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.SecurityBindingElement">
      <summary>一个抽象类，在实现时表示支持通道 SOAP 消息安全的绑定元素。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.AllowInsecureTransport">
      <summary>获取或设置一个值，该值指示是否能通过不安全传输（如 HTTP）发送混合模式安全消息。</summary>
      <returns>如果能通过不安全传输发送混合模式安全消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>基于 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 设置和传入的绑定上下文创建通道工厂。 创建的通道工厂为 SOAP 消息安全通道工厂，其内部有到对应绑定上下文的通道工厂的引用（包括传输通道工厂）。</summary>
      <returns>基于 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 设置和传入的绑定上下文通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="TChannel" /> 类型的通道。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactoryCore``1(System.ServiceModel.Channels.BindingContext)">
      <summary>实现时创建指定类型的通道工厂。</summary>
      <returns>具有指定类型的通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="TChannel" /> 类型的通道。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>基于 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 设置和传入的绑定上下文创建通道侦听器。</summary>
      <returns>基于 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 设置和传入的绑定上下文通道侦听器。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="TChannel" /> 类型的通道。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelListenerCore``1(System.ServiceModel.Channels.BindingContext)">
      <summary>实现时创建指定类型的通道侦听器。</summary>
      <returns>指定类型的通道侦听器。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 对象。</param>
      <typeparam name="TChannel">通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不支持 <paramref name="TChannel" /> 类型的通道。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果可以生成指定类型的通道工厂，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道侦听器。</summary>
      <returns>如果可以生成指定类型的通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.serviceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateAnonymousForCertificateBindingElement">
      <summary>创建一个对称安全绑定元素，配置该元素以进行匿名客户端身份验证以及基于证书的服务器身份验证。</summary>
      <returns>容纳新绑定的 <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateCertificateOverTransportBindingElement">
      <summary>创建一个安全绑定元素，该元素期望客户端使用 SOAP 消息安全执行基于证书的身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateCertificateOverTransportBindingElement(System.ServiceModel.MessageSecurityVersion)">
      <summary>创建一个安全绑定元素，该元素期望客户端使用 SOAP 消息安全执行基于证书的身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 对象。</returns>
      <param name="version">此绑定的 <see cref="T:System.ServiceModel.MessageSecurityVersion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateCertificateSignatureBindingElement">
      <summary>创建使用证书签名消息的绑定元素。 此绑定元素仅可用于单向消息交换，且仅能签名消息。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters)">
      <summary>创建一个对称安全绑定元素，该元素配置为需要使用基于对称密钥的颁发令牌进行客户端身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
      <param name="issuedTokenParameters">
        <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> 表示基于对称密钥的颁发令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuedTokenParameters" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">密钥类型 <paramref name="issuedTokenParameters" /> 不对称。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForCertificateBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters)">
      <summary>创建一个对称安全绑定元素，该元素配置为需要基于已颁发令牌的客户端身份验证以及基于服务器证书的服务器身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
      <param name="issuedTokenParameters">
        <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> 表示基于对称密钥的颁发令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuedTokenParameters" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForSslBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters)">
      <summary>创建一个对称安全绑定元素，该元素配置为需要基于已颁发令牌的客户端身份验证以及基于服务器证书的服务器身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
      <param name="issuedTokenParameters">一个 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuedTokenParameters" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenForSslBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters,System.Boolean)">
      <summary>创建一个对称安全绑定元素，该元素配置为需要基于已颁发令牌的客户端身份验证以及基于服务器证书的服务器身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
      <param name="issuedTokenParameters">一个 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" />。</param>
      <param name="requireCancellation">如果需要取消，则为 true；否则为 false。 通过将其设置为 false，将能够启用在网络场方案中十分有用的安全上下文令牌，因为在此模式下，会话状态是在建立的安全上下文令牌内部编码的，而不是保留在服务器内存中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuedTokenParameters" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateIssuedTokenOverTransportBindingElement(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters)">
      <summary>创建一个对称安全绑定元素，该元素配置为需要使用颁发的令牌进行基于 SOAP 安全的客户端身份验证。 此绑定元素需要传输提供服务器身份验证和消息保护（例如 HTTPS）。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 对象。</returns>
      <param name="issuedTokenParameters">一个 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuedTokenParameters" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosBindingElement">
      <summary>创建一个对称安全绑定元素，该元素配置为需要进行基于客户端的 Kerberos 令牌进行客户端身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateKerberosOverTransportBindingElement">
      <summary>创建一个安全绑定元素，该元素配置为需要使用客户端 Kerberos 令牌进行基于 SOAP 安全的客户端身份验证。 此绑定元素需要传输提供服务器身份验证和消息保护（例如 HTTPS）。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateBindingElement">
      <summary>创建一个非对称安全绑定元素，该元素配置为需要基于证书的客户端身份验证以及基于证书的服务器身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateBindingElement(System.ServiceModel.MessageSecurityVersion)">
      <summary>创建一个非对称安全绑定元素，该元素配置为需要基于证书的客户端身份验证以及基于证书的服务器身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 对象。</returns>
      <param name="version">消息安全版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateBindingElement(System.ServiceModel.MessageSecurityVersion,System.Boolean)">
      <summary>创建一个非对称安全绑定元素，该元素配置为需要基于证书的客户端身份验证以及基于证书的服务器身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 对象。</returns>
      <param name="version">消息安全版本。</param>
      <param name="allowSerializedSigningTokenOnReply">在答复时允许序列化签名标记，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateDuplexBindingElement">
      <summary>创建一个非对称安全绑定元素，该元素配置为需要基于证书的客户端身份验证以及基于证书的服务器身份验证。 此身份验证模式可用于保护双工消息交换模式，它需要用带外客户端证书配置服务。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateMutualCertificateDuplexBindingElement(System.ServiceModel.MessageSecurityVersion)">
      <summary>创建一个非对称安全绑定元素，该元素配置为需要基于证书的客户端身份验证以及基于证书的服务器身份验证。 此身份验证模式可用于保护双工消息交换模式，它需要用带外客户端证书配置服务。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement" /> 对象。</returns>
      <param name="version">消息安全版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement(System.ServiceModel.Channels.SecurityBindingElement)">
      <summary>创建一个对称安全绑定元素，该元素配置为可在客户端和服务之间建立安全的对话。 在安全对话握手结束时颁发的安全上下文令牌用于保护消息的安全。 启动安全绑定元素指定如何保护安全对话握手消息。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 对象。</returns>
      <param name="bootstrapSecurity">
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 包含如何保护安全对话握手消息的规范。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bootstrapSecurity" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean)">
      <summary>创建一个对称安全绑定元素，该元素配置为可在客户端和服务之间建立安全的对话。 在安全对话握手结束时颁发的安全上下文令牌用于保护消息的安全。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 对象。</returns>
      <param name="bootstrapSecurity">
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 包含如何保护安全对话握手消息的规范。</param>
      <param name="requireCancellation">如果需要取消，则为 true；否则为 false。 将此参数设置为 false 可在网络场方案中启用有用的安全上下文令牌，因为在此模式下，会话状态是在建立的安全上下文令牌内部编码的，而不是保留在服务器内存中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bootstrapSecurity" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean,System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>创建一个对称安全绑定元素，该元素配置为可在客户端和服务之间建立安全的对话。 在安全对话握手结束时颁发的安全上下文令牌用于保护消息的安全。 启动安全绑定元素指定如何保护安全对话握手消息。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 对象。</returns>
      <param name="bootstrapSecurity">
        <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 包含如何保护安全对话握手消息的规范。</param>
      <param name="requireCancellation">如果需要取消，则为 true；否则为 false。 将此参数设置为 false 可在网络场方案中启用有用的安全上下文令牌，因为在此模式下，会话状态是在建立的安全上下文令牌内部编码的，而不是保留在服务器内存中。</param>
      <param name="bootstrapProtectionRequirements">指定通道保护的要求的 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bootstrapSecurity" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSslNegotiationBindingElement(System.Boolean)">
      <summary>创建一个对称安全绑定元素，该元素配置为可在客户端和服务器之间运行 SOAP 级别的 SSL 协商，并说明是否需要客户端证书。</summary>
      <returns>容纳新绑定的 <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" />。</returns>
      <param name="requireClientCertificate">如果在 SSL 协商的过程中需要客户端证书，则为 true。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSslNegotiationBindingElement(System.Boolean,System.Boolean)">
      <summary>创建一个对称安全绑定元素，该元素执行 SOAP SSL 协商，并说明是否需要客户端证书和取消。</summary>
      <returns>容纳新绑定的 <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" />。</returns>
      <param name="requireClientCertificate">如果在 SSL 协商的过程中需要客户端证书，则为 true。</param>
      <param name="requireCancellation">如果需要取消，则为 true。 通过将其设置为 false，将能够启用在网络场方案中十分有用的安全上下文令牌，因为在此模式下，会话状态是在建立的安全上下文令牌内部编码的，而不是保留在服务器内存中。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationBindingElement">
      <summary>创建一个对称安全绑定元素，该元素基于协商身份验证包执行 SOAP SSPI 协商。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationBindingElement(System.Boolean)">
      <summary>创建一个对称安全绑定元素，该元素基于协商身份验证包执行 SOAP SSPI 协商。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
      <param name="requireCancellation">指定是否需要取消。 通过将其设置为 false，将能够启用在网络场方案中十分有用的安全上下文令牌，因为在此模式下，会话状态是在建立的安全上下文令牌内部编码的，而不是保留在服务器内存中。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationOverTransportBindingElement">
      <summary>创建一个安全绑定元素，该元素配置为使用协商身份验证包基于 SOAP SSPI 协商进行客户端身份验证。 绑定元素需要传输提供服务器身份验证和消息保护（例如 HTTPS）。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateSspiNegotiationOverTransportBindingElement(System.Boolean)">
      <summary>创建一个安全绑定元素，该元素配置为使用协商身份验证包基于 SOAP SSPI 协商进行客户端身份验证。 绑定元素需要传输提供服务器身份验证和消息保护（例如 HTTPS）。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 对象。</returns>
      <param name="requireCancellation">指定是否需要取消。 通过将其设置为 false，将能够启用在网络场方案中十分有用的安全上下文令牌，因为在此模式下，会话状态是在建立的安全上下文令牌内部编码的，而不是保留在服务器内存中。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForCertificateBindingElement">
      <summary>创建一个对称安全绑定元素，该元素配置为需要基于用户名和密码的客户端身份验证以及基于证书的服务器身份验证。 在使用服务打开信道之前，创建的绑定元素需要使用带外服务证书配置客户端。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForSslBindingElement">
      <summary>创建一个对称安全绑定元素，该元素配置为需要基于用户名和密码的客户端身份验证以及基于证书的服务器身份验证。 客户端使用 SOAP 级别的 SSL 协议对服务器进行身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameForSslBindingElement(System.Boolean)">
      <summary>创建一个对称安全绑定元素，该元素配置为需要基于用户名和密码的客户端身份验证以及基于证书的服务器身份验证。 客户端使用 SOAP 级别的 SSL 协议对服务器进行身份验证。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 对象。</returns>
      <param name="requireCancellation">指定是否需要取消。 通过将其设置为 false，将能够启用在网络场方案中十分有用的安全上下文令牌，因为在此模式下，会话状态是在建立的安全上下文令牌内部编码的，而不是保留在服务器内存中。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement">
      <summary>创建一个安全绑定元素，该元素配置为基于作为 SOAP 消息的组成部分发送的用户名和密码对客户端进行身份验证。 绑定元素需要传输提供服务器身份验证和消息保护（例如 HTTPS）。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.DefaultAlgorithmSuite">
      <summary>获取或设置消息加密和密钥换行算法。</summary>
      <returns>表示消息加密和密钥包装算法的 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">值在 set 上为 Null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.EnableUnsecuredResponse">
      <summary>获取或设置一个值，该值指示 WCF 是否能发送和接收对安全请求的不安全响应。</summary>
      <returns>如果 WCF 能发送和接收对安全请求的不安全响应，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.EndpointSupportingTokenParameters">
      <summary>获取支持令牌参数的终结点。</summary>
      <returns>表示支持令牌参数的终点的 <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 获取指定对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的指定对象；如果找不到该对象，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的属性。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.IncludeTimestamp">
      <summary>获取或设置一个值，该值指示是否每条消息都包含时间戳。</summary>
      <returns>如果每条消息都包含时间戳，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.KeyEntropyMode">
      <summary>获取或设置用于创建密钥的熵的来源。</summary>
      <returns>用来创建键的 <see cref="T:System.serviceModel.Security.SecurityKeyEntropyMode" />。 默认值为 <see cref="F:System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.LocalClientSettings">
      <summary>获取由客户端使用的特定于本地安全设置的绑定属性。</summary>
      <returns>表示客户端所使用的本地安全设置的绑定属性的 <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.LocalServiceSettings">
      <summary>获取由客户端使用的特定于本地安全设置的绑定属性。</summary>
      <returns>表示服务所使用的本地安全设置的绑定属性的 <see cref="T:System.ServiceModel.Channels.LocalServiceSecuritySettings" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.MessageSecurityVersion">
      <summary>获取或设置消息安全版本。</summary>
      <returns>表示消息安全版本的 <see cref="T:System.ServiceModel.MessageSecurityVersion" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">带有 Null 值的 set。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.OperationSupportingTokenParameters">
      <summary>获取操作支持令牌参数的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" />，类型为 <see cref="T:System.String" />（键）和 <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" />（值）。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.OptionalEndpointSupportingTokenParameters">
      <summary>获取服务终结点的可选支持令牌参数。</summary>
      <returns>服务终结点的 <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.OptionalOperationSupportingTokenParameters">
      <summary>获取可选操作支持令牌参数的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" />，类型为 <see cref="T:System.String" />（键）和 <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" />（值）。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.ProtectTokens">
      <summary>获取或设置安全绑定元素是否保护令牌。</summary>
      <returns>如果安全绑定元素保护标记，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.SecurityHeaderLayout">
      <summary>获取或设置此绑定的安全头中的元素排序。</summary>
      <returns>表示此绑定的安全头中的元素排序的 <see cref="T:System.ServiceModel.Channels.SecurityHeaderLayout" />。 默认值为 <see cref="F:System.ServiceModel.Channels.SecurityHeaderLayout.Strict" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不是有效的 <see cref="T:System.ServiceModel.Channels.SecurityHeaderLayout" /> 值。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.SetIssuerBindingContextIfRequired(System.ServiceModel.Security.Tokens.SecurityTokenParameters,System.ServiceModel.Channels.BindingContext)">
      <summary>设置令牌要求属性的密钥，其值为用于和颁发方进行对话的 BindingContext（如果要求适用于已颁发的令牌）。</summary>
      <param name="parameters">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />。</param>
      <param name="issuerBindingContext">表示用于令牌要求属性（其值是用来与颁布方对话的 BindingContext ）的密钥的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.SetKeyDerivation(System.Boolean)">
      <summary>设置一个值，该值指示是否需要派生密钥。</summary>
      <param name="requireDerivedKeys">true 需要派生密钥；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.ToString">
      <summary>返回对此类的描述。</summary>
      <returns>对当前 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 实例的描述。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.SecurityBindingElementImporter">
      <summary>提供一个扩展点，用于扩展标准安全策略导入。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.SecurityBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElementImporter.MaxPolicyRedirections">
      <summary>获取所允许的最大策略重定向数。</summary>
      <returns>允许的最大策略重定向数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导入有关绑定的自定义策略断言。</summary>
      <param name="importer">可以用来修改导入过程的 <see cref="T:System.ServiceModel.Description.MetadataImporter" />。</param>
      <param name="policyContext">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.SecurityHeaderLayout">
      <summary>描述安全标头的布局。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.SecurityHeaderLayout.Lax">
      <summary>项以任何符合 WSS: SOAP 消息安全的顺序添加到安全标头中。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.SecurityHeaderLayout.LaxTimestampFirst">
      <summary>项以任何符合 WSS: SOAP 消息安全的顺序添加到安全头中，但安全头中的第一个元素必须是 wsse:Timestamp 元素。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.SecurityHeaderLayout.LaxTimestampLast">
      <summary>项以任何符合 WSS: SOAP 消息安全的顺序添加到安全头中，但安全头中的最后一个元素必须是 wsse:Timestamp 元素。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.SecurityHeaderLayout.Strict">
      <summary>项按照“先声明后使用”的一般原则添加到安全头中。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.SessionOpenNotification">
      <summary>表示打开会话通知用于更新消息属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SessionOpenNotification.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.SessionOpenNotification" /> 类的实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.SessionOpenNotification.IsEnabled">
      <summary>获取或设置一个值，该值指示是否启用通知。</summary>
      <returns>如果启用通知，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SessionOpenNotification.UpdateMessageProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>更新消息属性。</summary>
      <param name="inboundMessageProperties">要更新的消息属性。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.SslStreamSecurityBindingElement">
      <summary>表示一个自定义绑定元素，它支持使用 SSL 流的通道安全。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.SslStreamSecurityBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.#ctor(System.ServiceModel.Channels.SslStreamSecurityBindingElement)">
      <summary>使用其他 <see cref="T:System.ServiceModel.Channels.SslStreamSecurityBindingElement" /> 的值初始化 <see cref="T:System.ServiceModel.Channels.SslStreamSecurityBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的 <see cref="T:System.ServiceModel.Channels.SslStreamSecurityBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的通道工厂。</summary>
      <returns>一个 <see cref="T:System.serviceModel.Channels.IChannelFactory" /> 对象，表示 <paramref name="TChannel" /> 类型的通道工厂。</returns>
      <param name="context">
        <see cref="T:System.serviceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的通道侦听器。</summary>
      <returns>表示 <paramref name="TChannel" />类型的渠道侦听器的 <see cref="T:System.serviceModel.Channels.IChannelListener" /> 对象。</returns>
      <param name="context">
        <see cref="T:System.serviceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext)">
      <summary>基于提供的通道上下文在 <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的客户端上创建一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的一个实例。</returns>
      <param name="context">整个通道堆栈的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.BuildServerStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext)">
      <summary>基于提供的通道上下文在 <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的服务器上创建一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的一个实例。</returns>
      <param name="context">整个通道堆栈的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>获取一个值，该值指示是否可以生成指定类型的通道工厂。</summary>
      <returns>如果可以生成指定类型的通道工厂，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>获取一个值，该值指示是否可以生成指定类型的通道侦听器。</summary>
      <returns>如果可以生成指定类型的通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">
        <see cref="T:System.serviceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.Clone">
      <summary>创建作为当前实例副本的新实例。</summary>
      <returns>作为当前实例的副本的 <see cref="T:System.ServiceModel.Channels.SslStreamSecurityBindingElement" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中获取指定的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的 <paramref name="T" /> 类型的对象，或为 null （如果找不到该对象）。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.GetTransportTokenAssertion">
      <summary>获取表示安全绑定中使用的传输令牌的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlElement" />，表示安全绑定中使用的传输令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SslStreamSecurityBindingElement.IdentityVerifier">
      <summary>获取或设置此绑定的标识验证程序。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.IdentityVerifier" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">要设置的值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.SslStreamSecurityBindingElement.RequireClientCertificate">
      <summary>获取或设置一个值，该值指定此绑定是否需要客户端证书。</summary>
      <returns>如果此绑定需要客户端证书，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.ShouldSerializeIdentityVerifier">
      <summary>获取一个值，该值指示是否应序列化标识验证程序。</summary>
      <returns>如果应对标识验证程序进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SslStreamSecurityBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出有关绑定的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.StandardBindingImporter">
      <summary>提供一个扩展点，用于将 WSDL 协定和策略断言映射到 Windows Communication Foundation (WCF) 标准绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StandardBindingImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StandardBindingImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StandardBindingImporter.System#ServiceModel#Description#IWsdlImportExtension#BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>在导入与标准绑定关联的元数据文档之前调用。</summary>
      <param name="wsdlDocuments">描述服务的 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />。</param>
      <param name="xmlSchemas">描述 <see cref="wsdlDocuments" /> 的 <paramref name="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <param name="policy">
        <see cref="T:System.Xml.XmlElement" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含策略元素。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StandardBindingImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>提供一个扩展点，用于导入标准绑定的 WSDL 协定信息。</summary>
      <param name="importer">用于导入和解析 WSDL 元数据的 <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="context">用于为从 WSDL 到服务说明的转换提供上下文的 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StandardBindingImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>提供一个扩展点，用于将 WSDL 中定义的终结点映射到服务说明。</summary>
      <param name="importer">用于导入和解析 WSDL 元数据的 <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="endpointContext">用于转换的 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.StreamSecurityUpgradeAcceptor">
      <summary>若要实现自定义安全升级接受方，请从此 abstract 基类继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamSecurityUpgradeAcceptor.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamSecurityUpgradeAcceptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamSecurityUpgradeAcceptor.GetRemoteSecurity">
      <summary>获取流上提供的安全消息属性，用于基于安全上下文中提供的信息执行自定义安全协商。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.StreamSecurityUpgradeInitiator">
      <summary>若要实现安全升级发起方，请从此 abstract 基类继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamSecurityUpgradeInitiator.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamSecurityUpgradeInitiator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamSecurityUpgradeInitiator.GetRemoteSecurity">
      <summary>获取流上提供的安全消息属性，用于基于安全上下文中提供的信息执行自定义安全协商。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.StreamSecurityUpgradeProvider">
      <summary>实现自定义安全升级提供程序，继承自 abstract 基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamSecurityUpgradeProvider.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamSecurityUpgradeProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamSecurityUpgradeProvider.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamSecurityUpgradeProvider" /> 类的新实例。</summary>
      <param name="timeouts">默认通信超时值。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.StreamSecurityUpgradeProvider.Identity">
      <summary>获取用于安全升级的标识。</summary>
      <returns>返回请求安全升级的客户端的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.StreamUpgradeAcceptor">
      <summary>若要实现自定义升级接受方，请从此 abstract 基类继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeAcceptor.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamUpgradeAcceptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeAcceptor.AcceptUpgrade(System.IO.Stream)">
      <summary>升级传输流并返回升级后的流。</summary>
      <returns>返回升级后的流。</returns>
      <param name="stream">要升级的流。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeAcceptor.BeginAcceptUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>
        <see cref="M:System.ServiceModel.Channels.StreamUpgradeAcceptor.AcceptUpgrade(System.IO.Stream)" /> 的异步版本。</summary>
      <returns>返回传入 EndAcceptUpgrade 来访问升级后的流的结果代码。</returns>
      <param name="stream">要升级的流。</param>
      <param name="callback">当 AcceptUpgrade 调用完成后要调用的方法。</param>
      <param name="state">AcceptUpgrade 调用的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeAcceptor.CanUpgrade(System.String)">
      <summary>确定此升级接受方是否支持请求的升级。</summary>
      <returns>如果支持这种升级，则为 true；否则为 false。</returns>
      <param name="contentType">要检查的内容类型。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeAcceptor.EndAcceptUpgrade(System.IAsyncResult)">
      <summary>
        <see cref="M:System.ServiceModel.Channels.StreamUpgradeAcceptor.AcceptUpgrade(System.IO.Stream)" /> 的异步版本。</summary>
      <returns>返回升级后的流。</returns>
      <param name="result">从 BeginAcceptUpgrade 返回的 IAsyncResult。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.StreamUpgradeBindingElement">
      <summary>向自定义绑定添加一个自定义流升级提供程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamUpgradeBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeBindingElement.#ctor(System.ServiceModel.Channels.StreamUpgradeBindingElement)">
      <summary>从现有实例初始化 <see cref="T:System.ServiceModel.Channels.StreamUpgradeBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的此类的实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeBindingElement.BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext)">
      <summary>基于提供的通道上下文在 <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的客户端上创建一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的一个实例。</returns>
      <param name="context">整个通道堆栈的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeBindingElement.BuildServerStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext)">
      <summary>基于提供的通道上下文在 <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的服务器上创建一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的一个实例。</returns>
      <param name="context">整个通道堆栈的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.StreamUpgradeInitiator">
      <summary>若要实现自定义升级发起方，请从此 abstract 基类继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeInitiator.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamUpgradeInitiator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>可实现此 abstract 方法以进行发起升级的异步处理。</summary>
      <returns>返回要传入 <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(System.IAsyncResult)" /> 方法的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="stream">要升级的流。</param>
      <param name="callback">在 <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(System.IO.Stream)" /> 完成后要调用的方法。</param>
      <param name="state">有关异步调用状态的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(System.IAsyncResult)">
      <summary>此方法是在 <see cref="M:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)" /> 完成后调用的异步回调方法。</summary>
      <returns>返回升级后的流。</returns>
      <param name="result">从 M:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object) 方法返回的 <see cref="IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade">
      <summary>返回要执行的下一个升级的内容类型。</summary>
      <returns>返回下一个升级的内容类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(System.IO.Stream)">
      <summary>通过请求流连接的另一端升级通道传输层，启动流的升级。</summary>
      <returns>返回升级后的流。</returns>
      <param name="stream">要升级的流。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.StreamUpgradeProvider">
      <summary>实现自定义升级提供程序，从此 abstract 基类继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeProvider.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeProvider.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 类的新实例。</summary>
      <param name="timeouts">默认通信超时值。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeProvider.CreateUpgradeAcceptor">
      <summary>创建 <see cref="T:System.ServiceModel.Channels.StreamUpgradeAcceptor" /> 的实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Channels.StreamUpgradeAcceptor" /> 的实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeProvider.CreateUpgradeInitiator(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建 <see cref="T:System.ServiceModel.Channels.StreamUpgradeInitiator" /> 的实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Channels.StreamUpgradeInitiator" /> 的实例。</returns>
      <param name="remoteAddress">通道的终结点地址。</param>
      <param name="via">Via URI（一个中间 URI，通信可以通过它进行路由）的地址。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.StreamUpgradeProvider.DefaultCloseTimeout">
      <summary>获取 DefaultCloseTimeout。</summary>
      <returns>返回 DefaultCloseTimeout 的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.StreamUpgradeProvider.DefaultOpenTimeout">
      <summary>获取 DefaultOpenTimeout。</summary>
      <returns>返回 DefaultOpenTimeout 的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.StreamUpgradeProvider.GetProperty``1">
      <summary>在派生类中实现时，获取当前流的一个属性，该属性表示流升级的发起方。</summary>
      <returns>流升级的发起方。</returns>
      <typeparam name="T">当前流的类型。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.SupportedAddressingMode">
      <summary>指定服务是否支持仅向匿名地址或仅向非匿名地址发送响应，或二者都支持。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.SupportedAddressingMode.Anonymous">
      <summary>服务器仅支持匿名地址，客户端必须提供匿名响应地址。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.SupportedAddressingMode.Mixed">
      <summary>服务器同时支持匿名地址和非匿名地址，客户端可以选择使用其中一个或者全部。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous">
      <summary>服务器仅支持非匿名地址，客户端必须提供非匿名响应地址。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement">
      <summary>表示一个自定义绑定元素，它支持使用对称加密的通道安全。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SymmetricSecurityBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SymmetricSecurityBindingElement.#ctor(System.ServiceModel.Security.Tokens.SecurityTokenParameters)">
      <summary>使用指定的安全令牌参数初始化 <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 类的新实例。</summary>
      <param name="protectionTokenParameters">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SymmetricSecurityBindingElement.Clone">
      <summary>创建此类的新实例（从当前类初始化）。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象，其属性值等于当前实例的属性值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SymmetricSecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中获取指定的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中 <paramref name="T" /> 类型的指定对象，或 null （如果找不到该对象）。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的对象的类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.SymmetricSecurityBindingElement.MessageProtectionOrder">
      <summary>获取或设置此绑定的消息加密和签名的顺序。</summary>
      <returns>用于指定如何保护消息的 <see cref="T:System.ServiceModel.Security.MessageProtectionOrder" />。 默认值为 <see cref="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncrypt" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">未定义 set 和 value。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.SymmetricSecurityBindingElement.ProtectionTokenParameters">
      <summary>获取或设置保护令牌参数。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SymmetricSecurityBindingElement.RequireSignatureConfirmation">
      <summary>获取或设置一个值，该值指示是否必须确认消息签名。</summary>
      <returns>如果必须确认消息签名，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SymmetricSecurityBindingElement.SetKeyDerivation(System.Boolean)">
      <summary>设置一个值，该值指示是否需要派生密钥。</summary>
      <param name="requireDerivedKeys">如果指示需要派生密钥，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SymmetricSecurityBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出有关绑定的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.SymmetricSecurityBindingElement.ToString">
      <summary>返回一个字符串，它表示此 <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 实例。</summary>
      <returns>一个字符串，表示此 <see cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" /> 实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TcpConnectionPoolSettings">
      <summary>表示控制 TCP 连接池的行为的属性。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpConnectionPoolSettings.GroupName">
      <summary>获取或设置客户端上的连接池组的组名称。</summary>
      <returns>客户端上的连接池组的组名称。 默认名称为“default”。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpConnectionPoolSettings.IdleTimeout">
      <summary>获取或设置连接在断开前可在连接池中空闲的最长时间。</summary>
      <returns>返回一个 <see cref="T:System.TimeSpan" /> 结构，该结构指示连接在断开前可在连接池中空闲的最长时间。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpConnectionPoolSettings.LeaseTimeout">
      <summary>获取或设置在多长时间之后连接池中的连接将关闭。</summary>
      <returns>返回一个 <see cref="T:System.TimeSpan" /> 结构，该结构指示在多长时间之后从连接池中清除缓存的 TCP 连接。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不能小于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpConnectionPoolSettings.MaxOutboundConnectionsPerEndpoint">
      <summary>获取或设置连接池中缓存的每个终结点的最大出站连接数。</summary>
      <returns>连接池中缓存的每个终结点所允许的最大出站连接数。 默认值为 10。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TcpTransportBindingElement">
      <summary>表示 TCP 传输的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TcpTransportBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.TcpTransportBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TcpTransportBindingElement.#ctor(System.ServiceModel.Channels.TcpTransportBindingElement)">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.TcpTransportBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">
        <see cref="T:System.ServiceModel.Channels.TcpTransportBindingElement" /> 类的实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TcpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建可用于创建通道的通道工厂。</summary>
      <returns>返回指定类型的通道工厂。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
      <exception cref="T:System.ArgumentException">传递的参数无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TcpTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的通道侦听器。</summary>
      <returns>返回指定类型的通道侦听器。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
      <exception cref="T:System.ArgumentException">传递的参数无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TcpTransportBindingElement.Clone">
      <summary>创建当前绑定元素的副本。</summary>
      <returns>返回当前绑定元素的副本。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpTransportBindingElement.ConnectionPoolSettings">
      <summary>获取连接池设置的集合。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.TcpConnectionPoolSettings" /> 对象，包含与连接池相关的各种属性。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpTransportBindingElement.ExtendedProtectionPolicy">
      <summary>获取或设置当前的扩展保护策略。</summary>
      <returns>扩展保护策略。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TcpTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中获取指定的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的指定对象；如果找不到该对象，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpTransportBindingElement.ListenBacklog">
      <summary>获取或设置可挂起的最大排队连接请求数。</summary>
      <returns>返回可挂起的最大排队连接请求数。 默认值为 10。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不能小于 1。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpTransportBindingElement.PortSharingEnabled">
      <summary>获取或设置一个值，该值指示是否为此连接启用 TCP 端口共享。</summary>
      <returns>如果启用 TCP 端口共享，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpTransportBindingElement.Scheme">
      <summary>返回传输的 URI 方案。</summary>
      <returns>返回传输的 URI 方案，即“net.tcp”。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TcpTransportBindingElement.ShouldSerializeExtendedProtectionPolicy">
      <summary>返回一个表明扩展保护策略不可进行 XAML 序列化的指示。</summary>
      <returns>返回 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TcpTransportBindingElement.ShouldSerializeListenBacklog">
      <summary>指示 TCP 传输绑定元素是否应序列化侦听积压工作。</summary>
      <returns>如果 TCP 传输绑定元素应序列化侦听积压工作，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TcpTransportBindingElement.TeredoEnabled">
      <summary>获取或设置一个布尔值，该值指定是否启用 Teredo（一项用于对防火墙后的客户端进行寻址的技术）。</summary>
      <returns>如果启用了 Teredo，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement">
      <summary>绑定元素，指定用于基于文本的 SOAP 消息的字符编码与消息版本管理。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion,System.Text.Encoding)">
      <summary>使用指定的消息版本和编码初始化 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> 类的新实例。</summary>
      <param name="messageVersion">用于消息版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</param>
      <param name="writeEncoding">用于格式化消息字符的 <see cref="T:System.Text.Encoding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageVersion" /> 或 <paramref name="writeEncoding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> 值无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在客户端上生成通道工厂堆栈，该通道工厂堆栈可为指定上下文创建指定类型的通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道工厂生成的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>在服务上生成通道侦听器，以接受指定上下文的指定类型通道。</summary>
      <returns>指定上下文的 <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />。</returns>
      <param name="context">侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示当前绑定是否可以为指定的通道类型和上下文生成侦听器。</summary>
      <returns>如果可以在服务上生成指定的通道侦听器堆栈，则为 true；否则为 false。</returns>
      <param name="context">侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道侦听器接受的通道类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.Clone">
      <summary>创建一个从当前对象初始化的新 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> 对象，其属性值等于当前元素的属性值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>创建一个文本消息编码器工厂，该文本消息编码器利用由当前编码绑定元素指定的消息版本与字符编码。</summary>
      <returns>此工厂创建的 <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定元素堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <param name="context">绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MaxReadPoolSize">
      <summary>获取或设置读取器数量，该读取器会被分配到池中，并随时可以用于处理传入消息。</summary>
      <returns>池中的读取器数量。 默认值为 64 个读取器。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MaxWritePoolSize">
      <summary>获取或设置编写器数量，该编写器会被分配到池中，并随时可以用于处理传出消息。</summary>
      <returns>要保留在池中的编写器的最大数量。 默认值为 16 个编写器。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于或等于零。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MessageVersion">
      <summary>获取或设置用于格式化文本消息的 SOAP 和 WS-Addressing 版本。</summary>
      <returns>用于格式化消息的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。 默认值为 <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" />。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>为交换的 SOAP 消息指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。 下面的备注部分中提供了这些约束的默认值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.ShouldSerializeReaderQuotas">
      <summary>返回是否应序列化对 SOAP 消息结构的复杂性施加的限制。</summary>
      <returns>如果应对该 SOAP 消息约束进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.ShouldSerializeWriteEncoding">
      <summary>返回是否应序列化用于格式化消息字符的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>如果应序列化消息字符格式的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>从包含在绑定元素中的编码策略中生成 WSDL 协定信息。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>从包含在绑定元素中的编码策略中生成 WSDL 协定信息。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>从包含在绑定元素中的编码策略中生成 WSDL 协定信息。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">一个 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> 对象，该对象提供从导出的 WSDL 元素到终结点说明的映射。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.WriteEncoding">
      <summary>获取或设置用于格式化文本消息中字符的编码。</summary>
      <returns>用于格式化文本消息中字符的 <see cref="T:System.Text.Encoding" />。 默认文本编码为 UTF-8 格式。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> 值无效。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TransactionFlowBindingElement">
      <summary>表示配置元素，该元素指定对绑定的事务流支持。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.#ctor(System.ServiceModel.TransactionProtocol)">
      <summary>使用指定用于对事务进行流处理的协议初始化 <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" /> 类的新实例。</summary>
      <param name="transactionProtocol">一个 <see cref="T:System.ServiceModel.TransactionProtocol" /> 值，包含对事务进行流处理时使用的事务协议。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.TransactionFlowBindingElement.AllowWildcardAction">
      <summary>获取或设置是否将通配符操作设置为允许在要克隆的事务流绑定元素上使用。</summary>
      <returns>如果允许通配符操作，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>初始化通道工厂，用于生成绑定上下文中指定类型的通道。</summary>
      <returns>
        <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />（从 <paramref name="context" /> 中初始化）。</returns>
      <param name="context">应该用于生成通道工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">无法生成指定通道类型的通道工厂。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>初始化通道侦听器，用于接受绑定上下文中指定类型的通道。</summary>
      <returns>
        <paramref name="TChannel" /> 类型的 <see cref="T:System.ServiceModel.Channels.IChannelListener`1" />（从 <paramref name="context" /> 中初始化）。</returns>
      <param name="context">应该用于生成通道侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">无法生成指定通道类型的通道侦听器。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示指定绑定上下文是否可以生成用于生成指定类型通道的通道工厂。</summary>
      <returns>如果可以从 <paramref name="context" /> 生成指定通道类型的通道工厂，则为 true；否则为 false。</returns>
      <param name="context">应该用于确定是否可以生成通道工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示指定的绑定上下文是否可以生成用于接受指定类型通道的通道侦听器。</summary>
      <returns>如果可以从 <paramref name="context" /> 生成指定通道类型的通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">应该用于确定是否可以生成通道侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.Clone">
      <summary>创建此元素的一个副本。</summary>
      <returns>作为此元素副本的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定堆栈的适当层获取所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求的类型化对象 <paramref name="T" />；如果不存在，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。 。</param>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.ShouldSerializeTransactionProtocol">
      <summary>返回用于事务流的事务处理协议是否可以进行序列化。</summary>
      <returns>如果此事务处理协议可被序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出有关绑定的自定义策略断言。</summary>
      <param name="exporter">The <see cref="T:System.ServiceModel.Description.MetadataExporter" /> to be used when exporting the policy of this binding element.</param>
      <param name="context">The <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> to be used when exporting the policy of this binding element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransactionFlowBindingElement.TransactionProtocol">
      <summary>获取或设置对事务进行流处理时使用的事务协议。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TransactionProtocol" />，指定用于事务流的事务处理协议。 默认值为 <see cref="P:System.ServiceModel.TransactionProtocol.OleTransactions" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TransactionFlowBindingElementImporter">
      <summary>导入服务终结点事务策略（WS-Policy 断言），将实现绑定元素添加到客户端绑定中，并将事务流属性添加到服务代理上的适当操作中。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionFlowBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导入自定义策略断言并添加实现绑定元素。 不能继承此方法。</summary>
      <param name="importer">要使用的 <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 对象。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，其中既包含可以导入的策略断言，也包含可向其添加实现绑定元素的绑定元素集合。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.TransactionMessageProperty">
      <summary>允许使用专有事务流机制的自定义通道将其事务注入 Windows Communication Foundation (WCF) 框架。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransactionMessageProperty.Set(System.Transactions.Transaction,System.ServiceModel.Channels.Message)">
      <summary>设置将在执行服务方法时使用的事务。</summary>
      <param name="transaction">将在执行服务方法时使用的事务。</param>
      <param name="message">导致调用服务方法的传入消息。</param>
      <exception cref="T:System.ServiceModel.FaultException">
        <paramref name="message" /> 上已经设置了该属性。</exception>
      <exception cref="T:System.Transactions.TransactionException">
        <paramref name="transaction" /> 需要取消封送，并且该操作失败。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransactionMessageProperty.Transaction">
      <summary>获取将在执行服务方法时使用的事务。</summary>
      <returns>将在执行服务方法时使用的 <see cref="T:System.Transactions.Transaction" /> 实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TransferSession">
      <summary>确定从客户端到应用程序的消息传输协定是否需要会话，以及消息的传递是否必须保持与客户端调用操作一致的顺序。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.TransferSession.None">
      <summary>指定此协定上不要求使用会话与服务进行交互。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.TransferSession.Ordered">
      <summary>指定此协定上要求具有有序消息传递保证的会话与服务进行交互。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.TransferSession.Unordered">
      <summary>指定此协定上具有无序消息传递保证的会话已足以与服务进行交互。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportBindingElement">
      <summary>一个表示传输绑定元素的 abstract 基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor">
      <summary>创建此类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor(System.ServiceModel.Channels.TransportBindingElement)">
      <summary>从现有实例创建此类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 获取属性。</summary>
      <returns>取自指定 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 的属性。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的属性。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing">
      <summary>获取或设置一个值，该值指示是否要求对消息进行手动寻址。</summary>
      <returns>如果要求对消息进行手动寻址，则为 true；否则为  false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.MaxBufferPoolSize">
      <summary>获取或设置传输消息使用的任何缓冲池的最大字节大小。</summary>
      <returns>缓冲池的最大大小。 默认值为 524,288 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize">
      <summary>获取和设置允许接收的最大消息大小（以字节为单位）。</summary>
      <returns>允许接收的最大消息大小。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.Scheme">
      <summary>获取传输的 URI 方案。</summary>
      <returns>返回传输的 URI 方案，因实现此方法的派生类而异。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportBindingElementImporter">
      <summary>导入标准传输绑定元素，请参加附加策略表达式的文档的Web Services Description Language (WSDL)。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.TransportBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>从附加到 WSDL 绑定的策略导入一个 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> 实例。</summary>
      <param name="importer">可执行导入的 <see cref="T:System.ServiceModel.Description.MetadataImporter" />。</param>
      <param name="policyContext">协定绑定元素的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>将自定义策略断言添加到要导入的 WSDL 文档中的 WSDL 绑定。</summary>
      <param name="wsdlDocuments">要导入的 WSDL 文档的集合。</param>
      <param name="xmlSchemas">要导入的 XML 架构文档的集合。</param>
      <param name="policy">要导入的策略断言的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>此方法不执行任何操作。</summary>
      <param name="importer">可执行导入的 <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="context">协定绑定元素的 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>如果尚未从附加到 WSDL 的策略导入 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />，则从 WSDL 端口导入寻址信息，并从 SOAP 传输 URI 导入 <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> 或 <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" />。</summary>
      <param name="importer">可执行导入的 <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="context">协定绑定元素的 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportSecurityBindingElement">
      <summary>表示一个自定义绑定元素，它支持混合模式安全（如安全传输中优化的消息安全）。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> 类的实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.Clone">
      <summary>创建一个从当前类初始化的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 新对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象，其属性值等于当前实例的属性值。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 获取属性。</summary>
      <returns>指定的 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的属性，如果找不到对象，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的属性。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出有关绑定的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="policyContext">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.UnderstoodHeaders">
      <summary>表示已被理解的消息头集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.UnderstoodHeaders.Add(System.ServiceModel.Channels.MessageHeaderInfo)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> 添加到此集合。 这表示特定标头已被理解。</summary>
      <param name="headerInfo">包含有关消息头的其他信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.UnderstoodHeaders.Contains(System.ServiceModel.Channels.MessageHeaderInfo)">
      <summary>验证指定的 <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> 是否在此集合中。</summary>
      <returns>如果指定的 <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> 位于此集合中，则为 true；否则为 false。</returns>
      <param name="headerInfo">包含有关消息头的其他信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.UnderstoodHeaders.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.UnderstoodHeaders.Remove(System.ServiceModel.Channels.MessageHeaderInfo)">
      <summary>从此集合中移除指定的 <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" />。</summary>
      <param name="headerInfo">包含有关消息头的其他信息。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.UnderstoodHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.UseManagedPresentationBindingElement">
      <summary>一个绑定元素，用于与支持 WS-Trust infocard1 配置文件的 CardSpace 安全令牌服务进行通信。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.UseManagedPresentationBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.UseManagedPresentationBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.UseManagedPresentationBindingElement.Clone">
      <summary>复制当前绑定元素。</summary>
      <returns>作为当前元素副本的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.UseManagedPresentationBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从绑定堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则返回所请求的类型化对象 <paramref name="T" />，如果不存在，则返回 null。</returns>
      <param name="context">为绑定元素提供上下文的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要查询的对象类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.UseManagedPresentationBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>将绑定元素中的自定义策略断言导出到 WSDL 信息中。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.UseManagedPresentationBindingElementImporter">
      <summary>将 <see cref="T:System.ServiceModel.Channels.UseManagedPresentationBindingElement" /> 基于 WSDL 的策略转换为可对服务实现这些策略的绑定元素的说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.UseManagedPresentationBindingElementImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.UseManagedPresentationBindingElementImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.UseManagedPresentationBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>定义一个可导入自定义策略断言和添加实现绑定元素的方法。</summary>
      <param name="importer">正在使用的 <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 对象。</param>
      <param name="policyContext">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，其中既包含可以导入的策略断言，也包含可向其添加实现绑定元素的绑定元素集合。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.WebSocketMessageProperty">
      <summary>表示 Web 套接字消息属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.WebSocketMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.WebSocketMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketMessageProperty.MessageType">
      <summary>获取网络套接字消息类型。</summary>
      <returns>网络套接字消息类型。</returns>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketMessageProperty.Name">
      <summary>指定消息属性名。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketMessageProperty.OpeningHandshakeProperties">
      <summary>获取打开握手属性的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 中包含的打开握手属性的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketMessageProperty.SubProtocol">
      <summary>获取或设置子协议消息。</summary>
      <returns>子协议消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketMessageProperty.WebSocketContext">
      <summary>获取或设置 Web 套接上下文。</summary>
      <returns>Web 套接上下文。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.WebSocketTransportSettings">
      <summary>表示 Web 套接字传输设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.WebSocketTransportSettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.WebSocketTransportSettings" /> 类的新实例。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketTransportSettings.BinaryEncoderTransferModeHeader">
      <summary>为二进制编码器 invoke 模式指定该标头。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketTransportSettings.BinaryMessageReceivedAction">
      <summary>收到的网络套接字二进制消息时，指定操作。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketTransportSettings.ConnectionOpenedAction">
      <summary>打开的网络套接字连接时，指定操作。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketTransportSettings.CreateNotificationOnConnection">
      <summary>获取或设置连接期间的创建通知。</summary>
      <returns>在连接期间的创建通知。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketTransportSettings.DisablePayloadMasking">
      <summary>获取或设置一个值，该值指示是否禁用网络套接屏蔽。</summary>
      <returns>如果网络套接字掩没禁用，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.WebSocketTransportSettings.Equals(System.Object)">
      <summary>确定指定的对象是否等同于当前的对象。</summary>
      <returns>如果指定的对象等于当前的对象，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.WebSocketTransportSettings.Equals(System.ServiceModel.Channels.WebSocketTransportSettings)">
      <summary>确定指定的套接传输器对象与当前对象是否相等。</summary>
      <returns>如果指定的对象等于当前的对象，则为 true；否则为 false。</returns>
      <param name="other">用于和当前对象进行比较的网络套接字传输设置对象。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.WebSocketTransportSettings.GetHashCode">
      <summary>获取此对象的哈希代码值。</summary>
      <returns>此对象的哈希代码值。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketTransportSettings.KeepAliveInterval">
      <summary>获取或设置保持活动间隔的连接值。</summary>
      <returns>保持活动间隔的连接值。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketTransportSettings.MaxPendingConnections">
      <summary>获取或设置最大允许挂起连接数。</summary>
      <returns>最大允许挂起连接数。</returns>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketTransportSettings.SoapContentTypeHeader">
      <summary>指定简单访问对象内容的类型标头。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketTransportSettings.SubProtocol">
      <summary>获取或设置 Web 套接子协议。</summary>
      <returns>网络套接字 sub 协议。</returns>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketTransportSettings.TextMessageReceivedAction">
      <summary>收到的网络套接字文本消息时，指定操作。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.WebSocketTransportSettings.TransportUsage">
      <summary>获取或设置 Web 套接传输使用情况。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.WebSocketTransportUsage" /> 枚举的值之一。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.WebSocketTransportUsage">
      <summary>指定 WebSocket 传输用法的枚举。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketTransportUsage.Always">
      <summary>指示始终使用 WebSocket 传输。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketTransportUsage.Never">
      <summary>指示从不使用 WebSocket 传输。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.WebSocketTransportUsage.WhenDuplex">
      <summary>指示仅对双工服务协定使用 WebSocket 传输。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement">
      <summary>表示用于指定 Windows 流安全设置的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.#ctor(System.ServiceModel.Channels.WindowsStreamSecurityBindingElement)">
      <summary>从现有实例初始化 <see cref="T:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement" /> 类的新实例。</summary>
      <param name="elementToBeCloned">要克隆的此类的实例。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建可用于创建通道的通道工厂。</summary>
      <returns>返回指定类型的通道工厂。 此方法会将此类实例添加到 <see cref="P:System.ServiceModel.Channels.BindingContext.BindingParameters" /> 并委托给生成方法 <see cref="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelFactory``1" />。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道工厂所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道工厂的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>创建指定类型的通道侦听器。</summary>
      <returns>返回指定类型的通道侦听器。 此方法会将此类实例添加到 <see cref="P:System.ServiceModel.Channels.BindingContext.BindingParameters" /> 并委托给生成方法 <see cref="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelListener``1" />。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 成员，描述创建通道侦听器所需的绑定、行为、协定和其他信息。</param>
      <typeparam name="TChannel">通道侦听器的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 不能为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext)">
      <summary>基于提供的通道上下文在 <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的客户端上创建一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的一个实例。</returns>
      <param name="context">整个通道堆栈的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.BuildServerStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext)">
      <summary>基于提供的通道上下文在 <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的服务器上创建一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.StreamUpgradeProvider" /> 的一个实例。</returns>
      <param name="context">整个通道堆栈的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道工厂。</summary>
      <returns>如果可以生成通道工厂，则为 true；否则为 false。</returns>
      <param name="context">绑定上下文。</param>
      <typeparam name="TChannel">要检查的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>确定是否可生成指定类型的通道侦听器。</summary>
      <returns>如果可以生成通道侦听器，则为 true；否则为 false。</returns>
      <param name="context">通道的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">要检查的通道类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.Clone">
      <summary>从该类的此实例创建新的绑定元素。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElement" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从 <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中获取指定的对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> 中的指定对象；如果找不到该对象，则为 null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">要获取的对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.GetTransportTokenAssertion">
      <summary>获取表示安全绑定中使用的传输令牌的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlElement" />，表示用于此绑定所生成策略的传输令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.ProtectionLevel">
      <summary>获取或设置保护级别。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" />。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.EncryptAndSign" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.WindowsStreamSecurityBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>导出有关 Windows 流安全的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.WrappedOptions">
      <summary>包含使用 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 和 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" /> 基础结构执行架构导入所需的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.WrappedOptions.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.WrappedOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.WrappedOptions.WrappedFlag">
      <summary>获取或设置一个值，该值指示在未包装参数时，是否对 document-wrapped-literal 样式的文档使用特殊大小写。</summary>
      <returns>如果在未包装参数时对 document-wrapped-literal 样式的文档使用了特殊大小写，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.XmlSerializerImportOptions">
      <summary>包含使用 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 和 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" /> 基础结构执行架构导入所需的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.XmlSerializerImportOptions.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Channels.XmlSerializerImportOptions" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.XmlSerializerImportOptions.#ctor(System.CodeDom.CodeCompileUnit)">
      <summary>用指定的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 初始化 <see cref="T:System.ServiceModel.Channels.XmlSerializerImportOptions" /> 类的新实例。</summary>
      <param name="codeCompileUnit">一个对象，该对象提供了 <see cref="T:System.CodeDOM" /> 程序图容器。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.XmlSerializerImportOptions.ClrNamespace">
      <summary>获取或设置 <see cref="P:System.Runtime.Serialization.ClrNamespace" /> 属性，该属性包含要映射到 XML 命名空间的类型。</summary>
      <returns>一个包含要映射的类型的对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.XmlSerializerImportOptions.CodeCompileUnit">
      <summary>获取 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象，该对象提供了 <see cref="T:System.CodeDOM" /> 程序图容器。</summary>
      <returns>一个对象，该对象提供了程序图容器。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.XmlSerializerImportOptions.CodeProvider">
      <summary>获取或设置 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 对象，该对象将检查是否支持目标语言的特定选项。</summary>
      <returns>一个检查目标语言选项的对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.XmlSerializerImportOptions.WebReferenceOptions">
      <summary>获取或设置 <see cref="T:System.Web.Services.Description.WebReferenceOptions" /> 对象，该对象包含 XML 文本文件中指定的代码生成选项。</summary>
      <returns>一个包含代码生成选项的对象。</returns>
    </member>
    <member name="T:System.ServiceModel.ComIntegration.DllHostInitializer">
      <summary>该类提供 <see cref="T:System.EnterpriseServices.IProcessInitializer" /> 接口的实现，以便初始化 Windows Communication Foundation (WCF) COM+ 集成服务。 不应直接使用该类。</summary>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.DllHostInitializer.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ComIntegration.DllHostInitializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.DllHostInitializer.Shutdown">
      <summary>关闭所有通过调用 Startup 方法启动的 COM+ 服务宿主。</summary>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.DllHostInitializer.Startup(System.Object)">
      <summary>为当前 COM+ 应用程序启动 COM+ 服务宿主。</summary>
      <param name="punkProcessControl">总是传递 null。</param>
    </member>
    <member name="T:System.ServiceModel.ComIntegration.IChannelCredentials">
      <summary>一个接口，用于在服务代理上设置某些安全功能。</summary>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetClientCertificateFromFile(System.String,System.String,System.String)">
      <summary>从文件检索证书，并将其添加到客户端凭据。</summary>
      <param name="fileName">包含证书的文件名。</param>
      <param name="password">该文件要求的密码。</param>
      <param name="keyStorageFlags">证书的存储标志。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetClientCertificateFromStore(System.String,System.String,System.String,System.Object)">
      <summary>从证书存储区中检索证书，并将其添加到客户端凭据。</summary>
      <param name="storeLocation">证书存储区位置。</param>
      <param name="storeName">证书存储区名称。</param>
      <param name="findType">搜索类型。</param>
      <param name="findValue">搜索值。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetClientCertificateFromStoreByName(System.String,System.String,System.String)">
      <summary>按照名称从证书存储区中检索证书，并将其添加到客户端凭据。</summary>
      <param name="subjectName">证书主题名称。</param>
      <param name="storeLocation">证书存储区位置。</param>
      <param name="storeName">证书存储区名称。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetDefaultServiceCertificateFromFile(System.String,System.String,System.String)">
      <summary>从文件中检索证书，并将其作为默认证书添加到服务凭据。</summary>
      <param name="fileName">证书文件名。</param>
      <param name="password">证书文件的密码。</param>
      <param name="keyStorageFlags">证书的存储标志。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetDefaultServiceCertificateFromStore(System.String,System.String,System.String,System.Object)">
      <summary>从证书存储区中检索证书，并将其作为默认证书添加到服务凭据。</summary>
      <param name="storeLocation">证书存储区位置。</param>
      <param name="storeName">证书存储区名称。</param>
      <param name="findType">搜索类型。</param>
      <param name="findValue">搜索值。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetDefaultServiceCertificateFromStoreByName(System.String,System.String,System.String)">
      <summary>按照名称从证书存储区中检索证书，并将其作为默认证书添加到服务凭据。</summary>
      <param name="subjectName">证书主题名称。</param>
      <param name="storeLocation">证书存储区位置。</param>
      <param name="storeName">证书存储区名称。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetIssuedToken(System.String,System.String,System.String)">
      <summary>为已颁发的令牌设置参数。</summary>
      <param name="localIssuerAddres">终结点地址。</param>
      <param name="localIssuerBindingType">绑定类型。</param>
      <param name="localIssuerBinding">绑定名称。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetServiceCertificateAuthentication(System.String,System.String,System.String)">
      <summary>设置服务证书身份验证参数。</summary>
      <param name="storeLocation">存储区位置。</param>
      <param name="revocationMode">吊销模式。</param>
      <param name="certificationValidationMode">证书验证模式。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetUserNameCredential(System.String,System.String)">
      <summary>设置用户名凭据。</summary>
      <param name="userName">用户名。</param>
      <param name="password">密码。</param>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.IChannelCredentials.SetWindowsCredential(System.String,System.String,System.String,System.Int32,System.Boolean)">
      <summary>设置 Windows 凭据。</summary>
      <param name="domain">域。</param>
      <param name="userName">用户名。</param>
      <param name="password">密码。</param>
      <param name="impersonationLevel">模拟级别。</param>
      <param name="allowNtlm">允许使用 NTLM 身份验证方案。</param>
    </member>
    <member name="T:System.ServiceModel.ComIntegration.PersistStreamTypeWrapper">
      <summary>将实现 IPersistStream 的对象（例如 ADO 记录集）持久化到字节流。</summary>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.PersistStreamTypeWrapper.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ComIntegration.PersistStreamTypeWrapper" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.ComIntegration.PersistStreamTypeWrapper.ExtensionData">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.ComIntegration.PersistStreamTypeWrapper" /> 关联的 <see cref="T:System.Runtime.Serialization.ExtensionDataObject" />。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.ExtensionDataObject" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.PersistStreamTypeWrapper.GetObject``1(``0@)">
      <summary>使用对象的 IPersistStream 接口从字节流中反序列化对象。</summary>
      <param name="obj">一个要在其中放置反序列化对象的对象。</param>
      <typeparam name="T">对象类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.PersistStreamTypeWrapper.SetObject``1(``0)">
      <summary>使用该对象的 IPersistStream 接口将该对象序列化到字节流。</summary>
      <param name="obj">要持久化到字节流的对象。</param>
      <typeparam name="T">对象类型。</typeparam>
    </member>
    <member name="T:System.ServiceModel.ComIntegration.ServiceMoniker">
      <summary>该类为 COM 服务标记提供了支持实现，不应直接应用。</summary>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.ServiceMoniker.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ComIntegration.ServiceMoniker" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.ComIntegration.WasHostedComPlusFactory">
      <summary>为以 Web 为宿主的 COM+ 组件创建服务宿主。</summary>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.WasHostedComPlusFactory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.ComIntegration.WasHostedComPlusFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.ComIntegration.WasHostedComPlusFactory.CreateServiceHost(System.String,System.Uri[])">
      <summary>为指定的 URI 创建服务宿主。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.ServiceHostBase" /> 对象，包含指定 URI 的服务宿主。</returns>
      <param name="constructorString">一个包含 Web 宿主参数的字符串。</param>
      <param name="baseAddresses">要为其创建 <see cref="T:System.ServiceModel.ServiceHostBase" /> 对象的 URI 数组。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.AddressHeaderCollectionElement">
      <summary>表示包含地址标头集合的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.AddressHeaderCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.AddressHeaderCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.AddressHeaderCollectionElement.Headers">
      <summary>获取或设置一个地址标头集合。</summary>
      <returns>一个地址标头集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.AllowedAudienceUriElement">
      <summary>表示一个配置元素，该元素指定可以访问特定服务的受众的 URI。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.AllowedAudienceUriElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.AllowedAudienceUriElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.AllowedAudienceUriElement.AllowedAudienceUri">
      <summary>获取或设置一个字符串，该字符串指定可以访问特定服务的受众的 URI。</summary>
      <returns>一个字符串，指定可以访问特定服务的受众的 URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.AllowedAudienceUriElementCollection">
      <summary>表示 <see cref="System.ServiceModel.Configuration.AllowedAudienceUriElement" /> 集合，该集合是 <see cref="System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的目标 URI，只有在使用这些目标 URI 时，<see cref="System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例才会将该令牌视为有效令牌。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.AllowedAudienceUriElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.AllowedAudienceUriElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ApplicationContainerSettingsElement">
      <summary>指定应用程序容器设置元素的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ApplicationContainerSettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ApplicationContainerSettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ApplicationContainerSettingsElement.PackageFullName">
      <summary>获取或设置包的全名。</summary>
      <returns>包的全名。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ApplicationContainerSettingsElement.SessionId">
      <summary>获取或设置<see cref="T:System.ServiceModel.Configuration.ApplicationContainerSettingsElement" /> 的唯一会话标识符。</summary>
      <returns>唯一会话标识符。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.AuthenticationMode">
      <summary>指定用于消息交换的身份验证设置。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.AnonymousForCertificate">
      <summary>指定发起方是匿名的，并对响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.AnonymousForSslNegotiated">
      <summary>指定发起方是匿名的。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.CertificateOverTransport">
      <summary>指定使用 X.509 版本 3 证书对发起方进行身份验证，并使用 SSL over HTTPS 对响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.IssuedToken">
      <summary>指定使用 XML 对称密钥令牌对发起方和响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.IssuedTokenForCertificate">
      <summary>指定使用 XML 对称密钥令牌对发起方进行身份验证，并使用 X.509 版本 3 证书对响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.IssuedTokenForSslNegotiated">
      <summary>指定使用 XML 对称密钥令牌对发起方进行身份验证，并使用 SSL 的 SOAP 实现对响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.IssuedTokenOverTransport">
      <summary>指定使用 XML 对称密钥令牌对发起方进行身份验证，并使用 SSL over HTTPS 对响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.Kerberos">
      <summary>指定使用 Kerberos 协议对发起方和响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.KerberosOverTransport">
      <summary>指定使用 Kerberos 协议对发起方进行身份验证，并使用 SSL over HTTPS 对响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.MutualCertificate">
      <summary>指定使用 X.509 版本 3 证书对发起方和响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.MutualCertificateDuplex">
      <summary>指定使用 X.509 版本 3 证书对发起方和响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.MutualSslNegotiated">
      <summary>指定发起方和响应方使用 X509 版本 3 证书相互进行身份验证，并且可以从 SOAP SSL 协商得到响应方的证书。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.SecureConversation">
      <summary>指定使用 WS-SecureConversation 身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.SspiNegotiated">
      <summary>指定发起方和响应方使用安全服务提供程序接口 (SSPI) 获取共享的安全上下文。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.SspiNegotiatedOverTransport">
      <summary>指定使用安全服务提供程序接口 (SSPI) 通过安全上下文对发起方进行身份验证，并使用 SSL over HTTPS 对响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.UserNameForCertificate">
      <summary>指定使用用户名令牌对发起方进行身份验证，并且响应方的证书可由发起方在带外得到。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.UserNameForSslNegotiated">
      <summary>指定使用用户名令牌对发起方进行身份验证，并使用 SSL 的 SOAP 实现对响应方进行身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Configuration.AuthenticationMode.UserNameOverTransport">
      <summary>指定使用用户名令牌对发起方进行身份验证，并使用 SSL over HTTPS 对响应方进行身份验证。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.AuthorizationPolicyTypeElement">
      <summary>包含一个配置元素，该元素指定一个授权策略，可用来将一组输入声明转换为另一组声明。 可以根据该授权策略来授予或拒绝访问控制。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.AuthorizationPolicyTypeElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.AuthorizationPolicyTypeElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.AuthorizationPolicyTypeElement.#ctor(System.String)">
      <summary>使用指定的策略类型来初始化 <see cref="T:System.ServiceModel.Configuration.AuthorizationPolicyTypeElement" /> 类的新实例。</summary>
      <param name="policyType">要初始化的策略的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="policyType" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.AuthorizationPolicyTypeElement.PolicyType">
      <summary>获取或设置策略类型。</summary>
      <returns>策略类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.AuthorizationPolicyTypeElementCollection">
      <summary>包含 <see cref="T:System.ServiceModel.Configuration.AuthorizationPolicyTypeElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.AuthorizationPolicyTypeElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.AuthorizationPolicyTypeElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.BaseAddressElement">
      <summary>表示一个配置元素，该元素指定服务主机所使用的基址。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BaseAddressElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BaseAddressElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.BaseAddressElement.BaseAddress">
      <summary>获取或设置服务主机所使用的基址。</summary>
      <returns>服务主机所使用的基址。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BaseAddressElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.BaseAddressElement" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BaseAddressElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BaseAddressElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.BaseAddressPrefixFilterElement">
      <summary>表示一个指定传递筛选器的配置元素。传递筛选器提供了一种机制，使得在 IIS 中承载 Windows Communication Foundation (WCF) 应用程序时可选取适当的 IIS 绑定。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BaseAddressPrefixFilterElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor(System.Uri)">
      <summary>使用指定的 URI 初始化 <see cref="T:System.ServiceModel.Configuration.BaseAddressPrefixFilterElement" /> 类的新实例。</summary>
      <param name="prefix">一个引起服务侦听以此特定前缀开头的所有 URI 的筛选器。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Prefix">
      <summary>获取或设置用于与部分基址进行匹配的前缀。</summary>
      <returns>用于与基址的一部分进行匹配的 URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BaseAddressPrefixFilterElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.BaseAddressPrefixFilterElement" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BaseAddressPrefixFilterElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BaseAddressPrefixFilterElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpBindingCollectionElement">
      <summary>表示一个配置节，该配置节保存了一个 <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" /> 实例集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpBindingElement">
      <summary>表示一个指定绑定的 XML 元素，该绑定用于与符合 WS-I Basic Profile 1.1 的 Web 服务（例如基于 ASMX 的服务）通信，或者用于接受来自基于 ASMX 的客户端的消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpBindingElement.#ctor(System.String)">
      <summary>使用名称来初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定元素的名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpBindingElement.BindingElementType">
      <summary>获取绑定元素的类型。</summary>
      <returns>一个指定绑定元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定集合的内容来初始化此绑定配置元素。</summary>
      <param name="binding">一个绑定元素集合。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpBindingElement.MessageEncoding">
      <summary>获取或设置一个值，该值指示是使用 MTOM 还是文本/XML 对 SOAP 消息进行编码。</summary>
      <returns>
        <see cref="T:System.ServiceModel.WSMessageEncoding" /> 的值，指示是使用 MTOM 还是文本/XML 对 SOAP 消息进行编码。 默认值为 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将指定绑定集合的内容应用到此绑定配置元素时调用。</summary>
      <param name="binding">一个绑定元素集合。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此绑定配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此绑定配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpBindingElement.Security">
      <summary>获取或设置用于此绑定的安全类型。</summary>
      <returns>指定用于此绑定的安全类型的 <see cref="T:System.ServiceModel.Configuration.BasicHttpSecurityElement" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpContextBindingCollectionElement">
      <summary>表示一个保存 <see cref="T:System.ServiceModel.Configuration.BasicHttpContextBindingElement" /> 实例集合的配置节。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpContextBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpContextBindingCollectionElement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpContextBindingElement">
      <summary>表示一个指定绑定的 XML 元素，该绑定为将通过启用 HTTP Cookie 作为交换机制来进行交换的 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 提供上下文。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpContextBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpContextBindingElement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpContextBindingElement.#ctor(System.String)">
      <summary>初始化具有指定名称的 <see cref="T:System.ServiceModel.Configuration.BasicHttpContextBindingElement" /> 类的新实例。</summary>
      <param name="name">包含此绑定名称的字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpContextBindingElement.BindingElementType">
      <summary>获取绑定元素的类型。</summary>
      <returns>绑定元素的类型</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpContextBindingElement.ContextManagementEnabled">
      <summary>获取或设置一个指定是否已启用上下文管理的值。</summary>
      <returns>如果启用上下文管理，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpContextBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置节。</summary>
      <param name="binding">一个绑定元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpContextBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将指定绑定配置元素的内容应用到此绑定配置元素时调用。</summary>
      <param name="binding">一个绑定配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpContextBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此绑定配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此绑定配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpMessageSecurityElement">
      <summary>一个配置 HTTP 消息安全的 XML 元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpMessageSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpMessageSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpMessageSecurityElement.AlgorithmSuite">
      <summary>指定要与 <see cref="T:System.ServiceModel.Configuration.BasicHttpMessageSecurityElement" /> 类一起使用的算法。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpMessageSecurityElement.ClientCredentialType">
      <summary>指定要与 <see cref="T:System.ServiceModel.Configuration.BasicHttpMessageSecurityElement" /> 类一起使用的客户端凭据的类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.BasicHttpMessageCredentialType" />。 默认值为“UserName”。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpsBindingCollectionElement">
      <summary>指定基本 https 绑定集合元素的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpsBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpsBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpsBindingElement">
      <summary>指定基本 https 绑定元素的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpsBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpsBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpsBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpsBindingElement" /> 类的新实例。</summary>
      <param name="name">名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpsBindingElement.BindingElementType">
      <summary>获取绑定元素的类型。</summary>
      <returns>绑定元素的类型</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpsBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定的绑定来初始化绑定元素。</summary>
      <param name="binding">绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpsBindingElement.MessageEncoding">
      <summary>获取或设置绑定元素消息编码。</summary>
      <returns>绑定元素消息编码。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpsBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>引发应用配置事件。</summary>
      <param name="binding">绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpsBindingElement.Properties">
      <summary>获取绑定元素属性的集合。</summary>
      <returns>绑定元素属性的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpsBindingElement.Security">
      <summary>获取绑定元素安全。</summary>
      <returns>绑定元素安全。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpSecurityElement">
      <summary>表示一个为基本 HTTP 服务配置安全的 XML 元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpSecurityElement.Message">
      <summary>获取一个为基本 HTTP 服务配置消息安全的 XML 元素。</summary>
      <returns>一个为基本 HTTP 服务配置消息安全的 XML 元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpSecurityElement.Mode">
      <summary>获取或设置一个指定基本 HTTP 服务的安全模式的 XML 元素。</summary>
      <returns>一项基本的 HTTP 服务的安全模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpSecurityElement.Transport">
      <summary>获取一个为基本 HTTP 服务指定传输的 XML 元素。</summary>
      <returns>一个为基本 HTTP 服务指定传输的 XML 元素。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BasicHttpsSecurityElement">
      <summary>指定基本 https 安全元素的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BasicHttpsSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BasicHttpsSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpsSecurityElement.Message">
      <summary>获取基础 HTTPS 安全元素消息</summary>
      <returns>基本的 HTTPS 安全元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpsSecurityElement.Mode">
      <summary>获取或设置基础 HTTPS 安全模式。</summary>
      <returns>基本的 HTTPS 安全节点。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BasicHttpsSecurityElement.Transport">
      <summary>获取用于 HTTPS 基本安全元素的传输。</summary>
      <returns>传输使用。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BehaviorExtensionElement">
      <summary>表示一个包含子元素的配置元素，这些子元素指定使用户可以自定义服务或终结点行为的行为扩展。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BehaviorExtensionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.BehaviorExtensionElement.BehaviorType">
      <summary>获取行为的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BehaviorExtensionElement.CreateBehavior">
      <summary>基于当前配置设置来创建行为扩展。</summary>
      <returns>行为扩展。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BehaviorsSection">
      <summary>表示一个配置节，其中包含的子项是由其唯一 name 标识的 behavior 元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BehaviorsSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BehaviorsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.BehaviorsSection.EndpointBehaviors">
      <summary>获取由其唯一 name 标识的所有终结点行为元素子项。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.EndpointBehaviorElementCollection" />，包含由其唯一 name 标识的终结点行为元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BehaviorsSection.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BehaviorsSection.ServiceBehaviors">
      <summary>获取由其唯一 name 标识的所有服务行为元素子项。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ServiceBehaviorElementCollection" />，包含由其唯一 name 标识的服务行为元素。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BinaryMessageEncodingElement">
      <summary>表示一个在网络上以二进制形式对 Windows Communication Foundation (WCF) 消息进行编码的消息编码器。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BinaryMessageEncodingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BinaryMessageEncodingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BinaryMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置节。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BinaryMessageEncodingElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，包含此绑定元素的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BinaryMessageEncodingElement.CompressionFormat">
      <summary>获取或设置二进制消息编码元素中使用的压缩格式。</summary>
      <returns>已用的压缩格式。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BinaryMessageEncodingElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置节的内容复制到此配置节。</summary>
      <param name="from">要复制的配置节。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BinaryMessageEncodingElement.MaxReadPoolSize">
      <summary>获取或设置一个值，该值指定无需分配新读取器便可同时读取的最大消息数。</summary>
      <returns>无需分配新的读取器便可同时读取的最大消息数。 默认值为 64。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BinaryMessageEncodingElement.MaxSessionSize">
      <summary>获取或设置一个值，该值指定用于编码的缓冲区的大小（以字节为单位）。</summary>
      <returns>用于编码的缓冲区的大小（以字节为单位）。 默认值为 2048。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BinaryMessageEncodingElement.MaxWritePoolSize">
      <summary>获取或设置一个值，该值指定无需分配新编写器便可同时发送的最大消息数。</summary>
      <returns>无需分配新的编写器便可同时发送的最大消息数。 默认值为 16。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BinaryMessageEncodingElement.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.BindingCollectionElement">
      <summary>表示一个配置节，该配置节包含一个绑定元素集合，其中每个元素都描述了终结点与其他终结点通信的方式一个方面，这些描述被一致地内置到客户端上的通道工厂和服务上的通道侦听程序中。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingCollectionElement.BindingName">
      <summary>获取绑定的名称。</summary>
      <returns>绑定的唯一名称。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">没有找到当前配置集合名称。 - 或 - 没有找到配置节名称。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingCollectionElement.BindingType">
      <summary>获取绑定的类型。</summary>
      <returns>一个包含绑定的类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingCollectionElement.ConfiguredBindings">
      <summary>获取此集合中的所有绑定配置元素。</summary>
      <returns>此集合中的所有绑定配置元素。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingCollectionElement.ContainsKey(System.String)">
      <summary>确定使用指定名称的集合中是否存在绑定。</summary>
      <returns>如果集合包含具有指定 <paramref name="name" /> 的绑定，则为 true；否则为 false。</returns>
      <param name="name">要查找的绑定的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingCollectionElement.GetDefault">
      <summary>获取所使用的默认绑定。</summary>
      <returns>一个表示默认绑定的 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingCollectionElement.TryAdd(System.String,System.ServiceModel.Channels.Binding,System.Configuration.Configuration)">
      <summary>将指定的绑定添加到集合。</summary>
      <returns>如果操作成功完成，则为 true；否则为 false。</returns>
      <param name="name">要添加的绑定的名称。</param>
      <param name="binding">一个表示要添加的绑定的 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象。</param>
      <param name="config">此绑定的配置设置。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.BindingElementExtensionElement">
      <summary>为使用计算机或应用程序配置文件中的自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 实现提供支持。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingElementExtensionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BindingElementExtensionElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingElementExtensionElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElement" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingElementExtensionElement.BindingElementType">
      <summary>在派生类中重写时，获取表示自定义绑定元素的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个表示自定义绑定类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingElementExtensionElement.CreateBindingElement">
      <summary>在派生类中重写时，返回一个自定义绑定元素对象。</summary>
      <returns>一个自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingElementExtensionElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置节。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.BindingsSection">
      <summary>表示绑定元素的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingsSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.BindingsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.BasicHttpBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" /> 对象集合的配置元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingCollectionElement" /> 对象，用于定义包含 <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" /> 对象集合的配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.BasicHttpsBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.BasicHttpsBindingElement" /> 对象集合的配置元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.BasicHttpsBindingCollectionElement" /> 对象，用于定义包含 <see cref="T:System.ServiceModel.Configuration.BasicHttpsBindingElement" /> 对象集合的配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.BindingCollections">
      <summary>获取 <see cref="T:System.ServiceModel.Configuration.BindingCollectionElement" /> 实例的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Configuration.BindingCollectionElement" /> 实例的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.CustomBinding">
      <summary>获取对用户消息堆栈进行完全控制的配置节。</summary>
      <returns>一个包含自定义绑定元素的集合的 <see cref="T:System.ServiceModel.Configuration.CustomBindingCollectionElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.BindingsSection.GetSection(System.Configuration.Configuration)">
      <summary>从指定配置文件获取节的配置设置。</summary>
      <returns>一个具有从指定文件检索到的设置的 <see cref="T:System.ServiceModel.Configuration.BindingsSection" />。</returns>
      <param name="config">一个配置文件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="config" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.Item(System.String)">
      <summary>获取此配置节中的指定绑定。</summary>
      <returns>定义此配置节中的指定绑定的 <see cref="T:System.ServiceModel.Configuration.BindingCollectionElement" />。</returns>
      <param name="binding">要访问的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.MsmqIntegrationBinding">
      <summary>获取包含 MsmqIntegration 绑定元素集合的配置元素。</summary>
      <returns>一个包含 MsmqIntegration 绑定元素集合的 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationBindingCollectionElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.NetHttpBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingElement" /> 对象集合的配置元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingCollectionElement" /> 对象，用于定义包含 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingElement" /> 对象集合的配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.NetHttpsBinding">
      <summary>获取绑定使用的网络 HTTPS。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.NetHttpsBindingCollectionElement" /> 对象，用于定义包含 <see cref="T:System.ServiceModel.Configuration.NetHttpsBindingElement" /> 对象集合的配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.NetMsmqBinding">
      <summary>获取包含 netMsmqBinding 绑定元素集合的配置元素。</summary>
      <returns>一个包含 netMsmqBinding 绑定元素集合的 <see cref="T:System.ServiceModel.Configuration.NetMsmqBindingCollectionElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.NetNamedPipeBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingElement" /> 对象集合的配置元素。</summary>
      <returns>一个包含 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingElement" /> 对象集合的 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingCollectionElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.NetPeerTcpBinding">
      <summary>获取包含 netPeerTcpBinding 元素集合的配置元素。</summary>
      <returns>一个包含 <see cref="T:System.ServiceModel.Configuration.NetPeerTcpBindingElement" /> 元素集合的 <see cref="T:System.ServiceModel.Configuration.NetPeerTcpBindingCollectionElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.NetTcpBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.NetTcpBindingElement" /> 对象集合的配置元素。</summary>
      <returns>包含一个 <see cref="T:System.ServiceModel.Configuration.NetTcpBindingElement" /> 对象集合的 <see cref="T:System.ServiceModel.Configuration.NetTcpBindingCollectionElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.WS2007FederationHttpBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement" /> 对象集合的配置元素。</summary>
      <returns>包含 <see cref="T:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement" /> 对象集合的配置元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.WS2007HttpBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.WS2007HttpBindingElement" /> 对象集合的配置元素。</summary>
      <returns>包含 <see cref="T:System.ServiceModel.Configuration.WS2007HttpBindingElement" /> 对象集合的配置元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.WSDualHttpBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.WSDualHttpBindingElement" /> 对象集合的配置元素。</summary>
      <returns>包含一个 <see cref="T:System.ServiceModel.Configuration.WSDualHttpBindingElement" /> 对象集合的 <see cref="T:System.ServiceModel.Configuration.WSDualHttpBindingCollectionElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.WSFederationHttpBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpBindingElement" /> 对象集合的配置元素。</summary>
      <returns>包含一个 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpBindingElement" /> 对象集合的 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpBindingCollectionElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.BindingsSection.WSHttpBinding">
      <summary>获取包含 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" /> 对象集合的配置元素。</summary>
      <returns>包含一个 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" /> 对象集合的 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingCollectionElement" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.CallbackDebugElement">
      <summary>表示一个配置元素，该元素为 Windows Communication Foundation (WCF) 回调对象指定服务端调试。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CallbackDebugElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CallbackDebugElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.CallbackDebugElement.BehaviorType">
      <summary>获取此行为元素的类型。</summary>
      <returns>行为元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.CallbackDebugElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.CallbackDebugElement.IncludeExceptionDetailInFaults">
      <summary>获取或设置一个值，该值指定客户端回调对象是否向服务返回 SOAP 错误中的托管异常信息。</summary>
      <returns>如果 Windows Communication Foundation (WCF) 在双工通信中返回 SOAP 错误中的托管客户端回调异常信息，以便进行服务端调试，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.CallbackTimeoutsElement">
      <summary>表示一个配置元素，该元素指定客户端回调的超时值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CallbackTimeoutsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CallbackTimeoutsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.CallbackTimeoutsElement.BehaviorType">
      <summary>获取此行为元素的类型。</summary>
      <returns>此行为元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.CallbackTimeoutsElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.CallbackTimeoutsElement.TransactionTimeout">
      <summary>获取或设置事务必须在此期间完成的时间段。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 对象，表示一个时间段，事务必须在此期间完成，否则会自动中止。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.CertificateElement">
      <summary>表示一个配置元素，该元素指定用于身份验证的 X.509 证书。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CertificateElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CertificateElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.CertificateElement.EncodedValue">
      <summary>获取或设置一个值，该值指示由此证书编码的值。</summary>
      <returns>已编码的值。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.CertificateReferenceElement">
      <summary>表示用于验证 X.509 证书的配置设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CertificateReferenceElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CertificateReferenceElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.CertificateReferenceElement.FindValue">
      <summary>获取或设置一个字符串，该字符串指定要在 X.509 证书存储区中搜索的值。</summary>
      <returns>要在 X.509 证书存储区中搜索的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CertificateReferenceElement.IsChainIncluded">
      <summary>获取或设置一个布尔值，该值指定是否使用证书链来执行验证。</summary>
      <returns>如果在验证中使用证书链，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CertificateReferenceElement.StoreLocation">
      <summary>获取或设置一个值，该值指定客户端可用于验证服务器证书的证书存储区位置。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />，指定客户端可用于验证服务器证书的证书存储区位置。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CertificateReferenceElement.StoreName">
      <summary>获取或设置要打开的 X.509 证书存储区的名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />，包含要打开的 X.509 证书存储区的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CertificateReferenceElement.X509FindType">
      <summary>获取或设置要执行的 X.509 搜索的类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />，包含要执行的 X.509 搜索的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ChannelEndpointElement">
      <summary>提供用于配置通道终结点的协定、绑定和地址属性的选项，客户端使用这些属性与服务器上的服务终结点连接。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ChannelEndpointElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ChannelEndpointElement.#ctor(System.ServiceModel.EndpointAddress,System.String)">
      <summary>使用指定的终结点地址和协定类型初始化 <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" /> 类的新实例。</summary>
      <param name="address">指定终结点的地址。 默认值为空字符串。 该地址必须为绝对 URI。</param>
      <param name="contractType">一个字符串，指示此终结点公开了哪个协定。 程序集必须实现该协定类型。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.Address">
      <summary>指定终结点的地址。</summary>
      <returns>一个包含终结点地址的 URI。 该地址必须为绝对 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.BehaviorConfiguration">
      <summary>获取或设置要用来实例化终结点的行为的行为名。</summary>
      <returns>要用来实例化终结点的行为的行为名。 定义服务时，该行为名必须在作用域内。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.Binding">
      <summary>获取或设置要使用的绑定的类型。</summary>
      <returns>要使用的绑定的类型。 该类型必须具有一个已注册的配置节，才能加以引用。 该类型是按节名而不是绑定的类型名注册的。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.BindingConfiguration">
      <summary>获取或设置要在实例化终结点时使用的绑定的绑定名称。</summary>
      <returns>要在实例化终结点时使用的绑定的绑定名称。 定义终结点时，绑定名称必须在作用域内。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.Contract">
      <summary>获取或设置此终结点公开的协定。</summary>
      <returns>此终结点公开的协定。 程序集必须实现该协定类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.EndpointConfiguration">
      <summary>获取或设置由 <see cref="P:System.ServiceModel.Configuration.ChannelEndpointElement.Kind" /> 属性设置的标准终结点的名称，此名称引用此标准终结点的其他配置信息。 必须在 <see cref="T:System.ServiceModel.Configuration.StandardEndpointsSection" /> 中定义相同的名称。</summary>
      <returns>一个字符串，指定标准终结点的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.Headers">
      <summary>获取一个地址标头集合。</summary>
      <returns>一个包含地址标头集合的 <see cref="T:System.ServiceModel.Configuration.AddressHeaderCollectionElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.Identity">
      <summary>获取一个标识，与某个终结点交换消息的其他终结点可以使用此标识对该终结点进行身份验证。</summary>
      <returns>一个包含配置设置的 <see cref="T:System.ServiceModel.Configuration.IdentityElement" />，与某个终结点交换消息的其他终结点可以使用这些配置设置对该终结点进行身份验证。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.Kind">
      <summary>获取或设置应用的标准终结点的类型。 此类型必须在 &lt;extensions&gt; 节或 machine.config 中进行注册。 如果未指定任何值，则创建通用通道终结点。</summary>
      <returns>一个字符串，指示标准终结点的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelEndpointElement.Name">
      <summary>获取或设置给定协定的终结点的唯一标识符。</summary>
      <returns>给定协定的一个终结点。 默认值为空字符串。 使用此服务模型，用户可以为给定的协定类型定义多个客户端。 每个定义都必须用唯一的配置名称加以区分。 如果省略该属性，则会将相应的终结点用作与指定协定类型相关联的默认终结点。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ChannelEndpointElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ChannelEndpointElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ChannelPoolSettingsElement">
      <summary>定义自定义绑定的通道池设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ChannelPoolSettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ChannelPoolSettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelPoolSettingsElement.IdleTimeout">
      <summary>获取或设置连接在断开前可以空闲的最长时间。</summary>
      <returns>一个值为正的 <see cref="T:System.TimeSpan" />，指定连接在断开前可以空闲的最长时间。 默认值是 00:02:00。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelPoolSettingsElement.LeaseTimeout">
      <summary>获取或设置在关闭活动连接之前所要经过的时间。 默认值是 00:05:00。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在关闭活动连接之前所要经过的时间。 默认值是 00:05:00。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ChannelPoolSettingsElement.MaxOutboundChannelsPerEndpoint">
      <summary>获取或设置由服务启动的通往远程终结点的最大通道数。</summary>
      <returns>由服务启动的通往远程终结点的最大通道数。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ClaimTypeElement">
      <summary>表示一个包含声明类型的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClaimTypeElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ClaimTypeElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClaimTypeElement.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ClaimTypeElement" /> 类的新实例。</summary>
      <param name="claimType">一个指定声明类型的统一资源标识符 (URI)。 预定义的声明类型是以 <see cref="T:System.IdentityModel.Claims.ClaimTypes" /> 类的静态属性的形式提供的。</param>
      <param name="isOptional">一个布尔值，该值指定声明是否可选。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClaimTypeElement.ClaimType">
      <summary>获取或设置指定声明类型的统一资源标识符 (URI) 的字符串表示形式。</summary>
      <returns>一个指定声明类型的统一资源标识符 (URI)。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClaimTypeElement.IsOptional">
      <summary>获取或设置一个指定声明是否可选的布尔值。</summary>
      <returns>如果声明是可选的，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ClaimTypeElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.ClaimTypeElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClaimTypeElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ClaimTypeElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ClearBehaviorElement">
      <summary>表示一个要移除所有继承行为的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClearBehaviorElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ClearBehaviorElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClearBehaviorElement.BehaviorType">
      <summary>在派生类中实现时，获取行为的类型。</summary>
      <returns>行为类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ClientCredentialsElement">
      <summary>表示配置客户端凭据的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClientCredentialsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ClientCredentialsElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClientCredentialsElement.ApplyConfiguration(System.ServiceModel.Description.ClientCredentials)">
      <summary>将指定配置元素的内容应用于此配置元素。</summary>
      <param name="behavior">要应用的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.BehaviorType">
      <summary>获取此行为元素的类型。</summary>
      <returns>此行为元素的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.ClientCertificate">
      <summary>获取一个客户端证书，当可在带外使用客户端证书时，将使用该证书。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement" />，它指定一个客户端证书，当可在带外使用客户端证书时，将使用该证书。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClientCredentialsElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClientCredentialsElement.CreateBehavior">
      <summary>根据此配置元素的设置创建自定义行为。</summary>
      <returns>一个基于此配置元素的设置的自定义行为。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.HttpDigest">
      <summary>获取配置当前 HTTP 摘要式凭据的配置元素。</summary>
      <returns>一个配置当前 HTTP 摘要式凭据的 <see cref="T:System.ServiceModel.Configuration.HttpDigestClientElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.IssuedToken">
      <summary>获取配置当前已颁发令牌实例的配置元素。</summary>
      <returns>一个配置当前已颁发令牌的 <see cref="T:System.ServiceModel.Configuration.IssuedTokenClientElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.Peer">
      <summary>获取配置当前对等凭据的配置元素。</summary>
      <returns>一个配置当前对等凭据的 <see cref="T:System.ServiceModel.Configuration.PeerCredentialElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.ServiceCertificate">
      <summary>获取客户端发起的 X.509 证书。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.X509RecipientCertificateClientElement" />，它指定客户端发起的 X.509 证书。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.SupportInteractive">
      <summary>获取或设置一个布尔值，该值指定凭据是否支持交互式协商。</summary>
      <returns>如果凭据支持交换式协商，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.Type">
      <summary>获取此配置元素的类型。</summary>
      <returns>一个包含此配置元素的类型的字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.UseIdentityConfiguration">
      <summary>获取或设置客户端凭据是否使用标识配置。</summary>
      <returns>如果客户凭据使用标识配置，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientCredentialsElement.Windows">
      <summary>获取 Windows 凭据验证的设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.WindowsClientElement" />，它指定 Windows 凭据验证的设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ClientSection">
      <summary>表示配置文件的客户端节，该节定义客户端可以连接的终结点的列表。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClientSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ClientSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientSection.Endpoints">
      <summary>获取客户端可以连接的终结点的列表。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElementCollection" />，包含客户端可以连接的终结点的列表。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientSection.Metadata">
      <summary>获取用于处理元数据的配置设置。</summary>
      <returns>表示处理元数据的配置设置的 <see cref="T:System.ServiceModel.Configuration.MetadataElement" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ClientViaElement">
      <summary>表示指定消息应采用的路由的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClientViaElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ClientViaElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientViaElement.BehaviorType">
      <summary>获取此行为元素的类型。</summary>
      <returns>此行为元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ClientViaElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此实例中。</summary>
      <param name="from">一个配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ClientViaElement.ViaUri">
      <summary>获取或设置一个指定消息应采用的路由的 URI。</summary>
      <returns>一个指定消息应采用的路由的 URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComContractElement">
      <summary>指定 COM+ 集成服务协定。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComContractElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComContractElement.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> 类的新实例。</summary>
      <param name="contractType">一个包含协定类型的字符串。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComContractElement.Contract">
      <summary>获取或设置协定类型。</summary>
      <returns>协定类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComContractElement.ExposedMethods">
      <summary>获取在 COM+ 组件上的接口作为 Web 服务公开时所公开的 COM+ 方法的集合。</summary>
      <returns>一个在 COM+ 组件上的接口作为 Web 服务公开时所公开的 COM+ 方法的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComContractElement.Name">
      <summary>获取或设置协定名称。</summary>
      <returns>协定名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComContractElement.Namespace">
      <summary>获取或设置协定命名空间。</summary>
      <returns>协定命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComContractElement.PersistableTypes">
      <summary>获取所有持久类型。</summary>
      <returns>持久类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComContractElement.RequiresSession">
      <summary>获取或设置一个布尔值，该值指定是否只能对会话绑定使用该协定。</summary>
      <returns>如果只能在会话绑定上使用该协定，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComContractElement.UserDefinedTypes">
      <summary>获取要包括在服务协定中的用户定义类型 (UDT) 的集合。 此类不能被继承。</summary>
      <returns>用户定义类型 (UDT) 的集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComContractElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.ComContractElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComContractElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComContractElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComContractsSection">
      <summary>表示一个配置节，它包含用于指定 COM+ 集成协定的命名空间与协定名称的元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComContractsSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComContractsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComContractsSection.ComContracts">
      <summary>获取该节中指定的所有 COM+ 集成服务协定。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ComContractElementCollection" />，包含该节中指定的所有 COM+ 集成服务协定。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComMethodElement">
      <summary>表示一个在 COM+ 组件上的接口作为 Web 服务公开时公开的 COM+ 方法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComMethodElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComMethodElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComMethodElement.#ctor(System.String)">
      <summary>使用指定的方法初始化 <see cref="T:System.ServiceModel.Configuration.ComMethodElement" /> 类的新实例。</summary>
      <param name="method">一个被公开的 COM+ 方法。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComMethodElement.ExposedMethod">
      <summary>获取在 COM+ 组件上的接口作为 Web 服务公开时公开的 COM+ 方法。</summary>
      <returns>在 COM+ 组件上的接口作为 Web 服务公开时公开的 COM+ 方法的名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComMethodElementCollection">
      <summary>包含 <see cref="T:System.ServiceModel.Configuration.ComMethodElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComMethodElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComMethodElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.CommonBehaviorsSection">
      <summary>表示一个配置节，该配置节包含一个行为列表，其中所含的行为在 behaviors 节中的行为应用之前应用到计算机上的所有 Windows Communication Foundation (WCF) 服务。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CommonBehaviorsSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CommonBehaviorsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.CommonBehaviorsSection.EndpointBehaviors">
      <summary>获取由其唯一名称标识的所有 EndpointBehavior 元素子项。</summary>
      <returns>由其唯一名称标识的所有 EndpointBehavior 元素子项。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CommonBehaviorsSection.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CommonBehaviorsSection.ServiceBehaviors">
      <summary>获取由其唯一名称标识的所有 serviceBehavior 元素子项。</summary>
      <returns>由其唯一名称标识的所有 serviceBehavior 元素子项。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.CommonEndpointBehaviorElement">
      <summary>表示一个配置元素，该配置元素包含在应用 endpointBehaviors 节中的行为之前应用到计算机上所有 Windows Communication Foundation (WCF) 终结点的终结点行为的列表。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CommonEndpointBehaviorElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CommonEndpointBehaviorElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CommonEndpointBehaviorElement.Add(System.ServiceModel.Configuration.BehaviorExtensionElement)">
      <summary>将指定元素添加到此配置节。</summary>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">与 <paramref name="element" /> 相关联的类型无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.CommonEndpointBehaviorElement.CanAdd(System.ServiceModel.Configuration.BehaviorExtensionElement)">
      <summary>将一个新的行为元素添加到此节，并返回一个指示操作是否成功的值。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">与 <paramref name="element" /> 相关联的类型无效。</exception>
    </member>
    <member name="T:System.ServiceModel.Configuration.CommonServiceBehaviorElement">
      <summary>表示一个配置元素，该配置元素包含在应用 serviceBehaviors 节中的行为之前应用到计算机上所有 Windows Communication Foundation (WCF) 终结点的服务行为的列表。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CommonServiceBehaviorElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CommonServiceBehaviorElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CommonServiceBehaviorElement.Add(System.ServiceModel.Configuration.BehaviorExtensionElement)">
      <summary>将指定元素添加到此配置节。</summary>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">与 <paramref name="element" /> 相关联的类型无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.CommonServiceBehaviorElement.CanAdd(System.ServiceModel.Configuration.BehaviorExtensionElement)">
      <summary>将一个新的行为元素添加到此节，并返回一个指示操作是否成功的值。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">与 <paramref name="element" /> 相关联的类型无效。</exception>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComPersistableTypeElement">
      <summary>指定所有持久类型。不能继承此类。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComPersistableTypeElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComPersistableTypeElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComPersistableTypeElement.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComPersistableTypeElement" /> 类的新实例。</summary>
      <param name="ID">持久类型的唯一标识符。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComPersistableTypeElement.ID">
      <summary>获取或设置持久类型的唯一标识符。</summary>
      <returns>持久类型的唯一标识符。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComPersistableTypeElement.Name">
      <summary>获取或设置持久类型的名称。</summary>
      <returns>持久类型的名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComPersistableTypeElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.ComPersistableTypeElement" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComPersistableTypeElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComPersistableTypeElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.CompositeDuplexElement">
      <summary>表示一个配置元素，它供客户端在必须公开一个终结点以使服务可以通过 HTTP 发送消息时使用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CompositeDuplexElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CompositeDuplexElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CompositeDuplexElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置节。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.CompositeDuplexElement.BindingElementType">
      <summary>获取绑定元素的类型。</summary>
      <returns>绑定元素的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CompositeDuplexElement.ClientBaseAddress">
      <summary>获取或设置客户端的基址。</summary>
      <returns>一个包含客户端基址的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.CompositeDuplexElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComUdtElement">
      <summary>表示一个要包括到服务协定中的用户定义类型 (UDT)。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComUdtElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComUdtElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComUdtElement.#ctor(System.String)">
      <summary>使用指定的 GUID 字符串初始化 <see cref="T:System.ServiceModel.Configuration.ComUdtElement" /> 类的新实例。</summary>
      <param name="typeDefID">一个 GUID 字符串，标识已注册类型库中的特定 UDT 类型。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComUdtElement.Name">
      <summary>获取或设置可读取的类型名称。</summary>
      <returns>可读取的类型名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComUdtElement.TypeDefID">
      <summary>获取或设置一个 GUID 字符串，它标识已注册类型库中的特定 UDT 类型。</summary>
      <returns>已注册类型库中的特定 UDT 类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComUdtElement.TypeLibID">
      <summary>获取或设置一个 GUID 字符串，它标识定义该类型的已注册类型库。</summary>
      <returns>定义该类型的已注册类型库。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ComUdtElement.TypeLibVersion">
      <summary>获取或设置一个字符串，它标识定义该类型的类型库版本。</summary>
      <returns>定义该类型的类型库版本。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ComUdtElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.ComUdtElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ComUdtElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ComUdtElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ConfigurationChannelFactory`1">
      <summary>提供用于为特定类型创建通道配置元素的一般功能。</summary>
      <typeparam name="TChannel">要为创建的终结点元素指定的通信通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.ConfigurationChannelFactory`1.#ctor(System.String,System.Configuration.Configuration,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的终结点配置名称、<see cref="T:System.Configuration.Configuration" /> 对象和 <see cref="T:System.ServiceModel.EndpointAddress" /> 对象创建 <see cref="T:System.ServiceModel.Configuration.ConfigurationChannelFactory`1" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">终结点配置元素中的名称属性。</param>
      <param name="configuration">定义终结点元素中的信息的设置。</param>
      <param name="remoteAddress">客户端或服务器会话中的目标终结点的 IP 地址。 此参数可能会设置为 null 以指示应在 <paramref name="configuration" /> 参数中指定的配置元素获取终结点地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointConfigurationName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointConfigurationName" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Configuration.ConfigurationDuplexChannelFactory`1">
      <summary>提供创建和管理不同类型的双工通道的功能，这些通道可用于在服务终结点之间发送和接收消息。</summary>
      <typeparam name="TChannel">已创建的终结点元素的通信通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.ConfigurationDuplexChannelFactory`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress,System.Configuration.Configuration)">
      <summary>使用指定的回调对象、终结点配置名称、远程地址和配置设置创建 <see cref="T:System.ServiceModel.Configuration.ConfigurationDuplexChannelFactory`1" /> 类的新实例。</summary>
      <param name="callbackObject">用于响应来自客户端的消息的进程。</param>
      <param name="endpointConfigurationName">终结点配置元素中的名称属性。</param>
      <param name="remoteAddress">客户端或服务器会话中的目标终结点的 IP 地址。</param>
      <param name="configuration">用于定义终结点元素中显示的信息的设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackObject" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Configuration.ConnectionOrientedTransportElement">
      <summary>表示向面向连接的传输绑定元素（如 TCP 和命名管道）提供附加配置设置的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.ChannelInitializationTimeout">
      <summary>获取或设置通道在断开连接前可处于初始化状态的最长时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 结构，指定通道在断开连接前可处于初始化状态的最长时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.ConnectionBufferSize">
      <summary>获取或设置用于从客户端或服务传输网络上的部分序列化消息的缓冲区大小。</summary>
      <returns>用于从客户端或服务传输网络上的部分序列化消息的缓冲区大小。 默认值为 8K。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值，指示在将传入请求路由到终结点 URI 时是否包含主机名。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，这会在匹配中忽略主机名。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.MaxBufferSize">
      <summary>获取或设置要使用的缓冲区的最大大小。</summary>
      <returns>内存中用于对传入消息进行缓冲的最大字节数。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.MaxOutputDelay">
      <summary>获取或设置部分消息或完整消息在发出之前可以在内存中保持缓冲的最大时间间隔。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定部分消息或完整消息在发出之前可以在内存中保持缓冲的最大时间间隔。 默认值为 200 毫秒。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.MaxPendingAccepts">
      <summary>获取或设置可用于处理服务上的传入连接的最大挂起异步接受线程数。</summary>
      <returns>服务可以接受的最大挂起消息数。 默认值为 1。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.MaxPendingConnections">
      <summary>获取或设置最大挂起连接数。</summary>
      <returns>最大挂起连接数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ConnectionOrientedTransportElement.TransferMode">
      <summary>获取或设置一个值，该值指定通过面向连接的传输对消息进行缓冲还是流处理。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.TransferMode" /> 值，指定通道是使用消息传输的流处理模式还是缓冲模式。 默认值为 <see cref="F:System.ServiceModel.TransferMode.Buffered" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ContextBindingElementExtensionElement">
      <summary>表示一个配置元素，该元素支持使用自定义 <see cref="T:System.ServiceModel.Channels.ContextBindingElement" /> 实现。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.ContextBindingElementExtensionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ContextBindingElementExtensionElement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.ContextBindingElementExtensionElement.BindingElementType">
      <summary>获取表示绑定元素的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个表示绑定元素的 <see cref="T:System.Type" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.ContextBindingElementExtensionElement.ClientCallbackAddress">
      <summary>获取或设置绑定元素的客户端回调地址。</summary>
      <returns>一个 <see cref="T:System.Uri" />，其中包含客户端回调地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ContextBindingElementExtensionElement.ContextExchangeMechanism">
      <summary>获取或设置指定用于交换绑定元素上下文的机制的值。</summary>
      <returns>用于交换绑定元素的交换上下文的机制。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.ContextBindingElementExtensionElement.ContextManagementEnabled">
      <summary>获取或设置一个指定是否已启用上下文管理的值。</summary>
      <returns>如果启用上下文管理，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ContextBindingElementExtensionElement.CreateBindingElement">
      <summary>创建一个新的绑定元素对象，其属性将从此配置元素的设置中复制。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" />，它的属性复制自此配置元素中的设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ContextBindingElementExtensionElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ContextBindingElementExtensionElement.ProtectionLevel">
      <summary>获取或设置此配置元素的保护级别。</summary>
      <returns>此配置元素的保护级别。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ServiceModel.Configuration.CustomBindingCollectionElement">
      <summary>表示一个 customBinding 配置元素集合，该集合中的元素提供了对用户消息堆栈的完全控制。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CustomBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.CustomBindingCollectionElement.Bindings">
      <summary>获取此节中定义的绑定。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.CustomBindingElementCollection" />，包含此节中定义的所有绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CustomBindingCollectionElement.BindingType">
      <summary>获取此绑定的类型。</summary>
      <returns>一个包含绑定的类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CustomBindingCollectionElement.ConfiguredBindings">
      <summary>获取此元素中包含的所有绑定配置元素。</summary>
      <returns>此元素中包含的所有绑定配置元素的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingCollectionElement.ContainsKey(System.String)">
      <summary>确定使用指定名称的集合中是否存在特定绑定。</summary>
      <returns>如果集合包含具有指定 <paramref name="name" /> 的绑定，则为 true；否则为 false。</returns>
      <param name="name">要查找的绑定的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.CustomBindingElement">
      <summary>表示一个配置节，该配置节提供对用户消息堆栈的完全控制。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CustomBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.CustomBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定元素的唯一名称。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingElement.Add(System.ServiceModel.Configuration.BindingElementExtensionElement)">
      <summary>将指定元素添加到此配置节。</summary>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BindingElementExtensionElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null 或为空。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">绑定中已存在消息编码配置元素。 - 或 - 绑定中已存在流升级元素。 - 或 - 绑定中已存在传输元素。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingElement.ApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>将指定绑定的内容应用于此绑定配置元素。 不能继承此方法。</summary>
      <param name="binding">一个绑定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null 或为空。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="binding" /> 指定的类型无效。 - 或 - 绑定中已存在流升级元素。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingElement.CanAdd(System.ServiceModel.Configuration.BindingElementExtensionElement)">
      <summary>将一个新的行为元素添加到此节，并返回一个指示操作是否成功的值。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BindingElementExtensionElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.CustomBindingElement.CloseTimeout">
      <summary>获取或设置为完成关闭操作而提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成关闭操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将指定绑定元素的内容应用于此绑定配置元素时调用。</summary>
      <param name="binding">一个绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.CustomBindingElement.OpenTimeout">
      <summary>获取或设置为完成打开操作而提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CustomBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CustomBindingElement.ReceiveTimeout">
      <summary>获取或设置为完成接收操作提供的时间间隔。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在超时前必须完成接收操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.CustomBindingElement.SendTimeout">
      <summary>获取或设置为完成发送操作提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成发送操作的时间。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.CustomBindingElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.CustomBindingElement" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.CustomBindingElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.CustomBindingElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.DataContractSerializerElement">
      <summary>表示一个配置元素，它指定要使用的 <see cref="T:System.Runtime.Serialization.DataContractSerializer" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DataContractSerializerElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.DataContractSerializerElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.DataContractSerializerElement.BehaviorType">
      <summary>获取此行为元素的类型。</summary>
      <returns>行为元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.DataContractSerializerElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素中的值复制到此配置元素。</summary>
      <param name="from">要从中进行复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.DataContractSerializerElement.IgnoreExtensionDataObject">
      <summary>获取或设置一个值，该值指定在对类进行序列化或反序列化时，是否忽略由该类的扩展提供的数据。</summary>
      <returns>如果要省略扩展数据，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.DataContractSerializerElement.MaxItemsInObjectGraph">
      <summary>获取或设置要序列化或反序列化的最大项数。</summary>
      <returns>要序列化或反序列化的最大项数。 默认值为 65536。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.DefaultPortElement">
      <summary>表示一个配置元素，该元素为通信终结点定义默认设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DefaultPortElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.DefaultPortElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DefaultPortElement.#ctor(System.ServiceModel.Configuration.DefaultPortElement)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Configuration.DefaultPortElement" /> 创建 <see cref="T:System.ServiceModel.Configuration.DefaultPortElement" /> 类的新实例。</summary>
      <param name="other">默认端口元素，它提供当前默认端口元素的设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.DefaultPortElement.Port">
      <summary>获取或设置默认通信端口号。</summary>
      <returns>通信端口。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.DefaultPortElement.Scheme">
      <summary>获取或设置与通信端口关联的协议设置组。</summary>
      <returns>通信协议设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.DefaultPortElementCollection">
      <summary>表示默认端口配置元素的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DefaultPortElementCollection.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.DefaultPortElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.DelegatingHandlerElement">
      <summary>表示委托处理程序元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DelegatingHandlerElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.DelegatingHandlerElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.DelegatingHandlerElement.Type">
      <summary>获取或设置处理程序元素类型。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.DelegatingHandlerElementCollection">
      <summary>表示 DelegatingHandlerElementCollection for DelegatingHandlers。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DelegatingHandlerElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.DelegatingHandlerElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.DiagnosticSection">
      <summary>表示一个配置节，该配置节定义管理员可以用来进行运行时检查和控制的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DiagnosticSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.DiagnosticSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.DiagnosticSection.EndToEndTracing">
      <summary>获取 <see cref="T:System.ServiceModel.Configuration.EndToEndTracingElement" /> 实例中指定的端对端跟踪配置设置。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Configuration.EndToEndTracingElement" />，其中包含端对端跟踪配置设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.DiagnosticSection.EtwProviderId">
      <summary>获取将事件写入 ETW 会话的事件跟踪提供程序的标识符。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.DiagnosticSection.MessageLogging">
      <summary>描述 Windows Communication Foundation (WCF) 消息日志记录的设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.MessageLoggingElement" />，描述 WCF 消息日志记录的设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.DiagnosticSection.PerformanceCounters">
      <summary>获取或设置一个值，该值指定是否启用程序集的性能计数器。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Diagnostics.PerformanceCounterScope" /> 值，指定为程序集启用哪种性能计数器。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.DiagnosticSection.WmiProviderEnabled">
      <summary>获取或设置一个值，该值指定是否启用程序集的 WMI 提供程序。</summary>
      <returns>如果启用程序集的 WMI 提供程序，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.DispatcherSynchronizationElement">
      <summary>将调度程序同步行为添加到调度程序配置元素，以便 WCF 服务程序可以向客户端应用程序异步发送消息答复。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DispatcherSynchronizationElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.DispatcherSynchronizationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.DispatcherSynchronizationElement.AsynchronousSendEnabled">
      <summary>获取或设置是否启用异步消息发送。</summary>
      <returns>如果启用了异步发送，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.DispatcherSynchronizationElement.BehaviorType">
      <summary>获取 <see cref="T:System.ServiceModel.Configuration.DispatcherSynchronizationElement" /> 行为扩展的类型。</summary>
      <returns>一个类型对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.DispatcherSynchronizationElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将一个定义调度程序行为扩展的子元素从指定的配置 <see cref="System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 复制到当前的 <see cref="T:System.ServiceModel.Configuration.DispatcherSynchronizationElement" /> 中。</summary>
      <param name="from">一个 <see cref="System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 对象，提供同步子元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.DispatcherSynchronizationElement.MaxPendingReceives">
      <summary>获取或设置可由调度程序缓存的已接收消息的最大数量。</summary>
      <returns>一个表示消息数量的数字。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.DnsElement">
      <summary>表示一个配置元素，该元素指定 DNS 请求的 URI。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.DnsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.DnsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.DnsElement.Value">
      <summary>获取或设置此配置元素所表示的值。</summary>
      <returns>此配置元素所表示的值。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.EndpointAddressElementBase">
      <summary>一个 XML 元素，包含客户端用来与服务终结点进行通信的唯一的网络地址。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointAddressElementBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.EndpointAddressElementBase" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndpointAddressElementBase.Address">
      <summary>获取或设置终结点的 URI。</summary>
      <returns>标识终结点的网络位置的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointAddressElementBase.Copy(System.ServiceModel.Configuration.EndpointAddressElementBase)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="source">要复制过去的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 或为空。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndpointAddressElementBase.Headers">
      <summary>获取生成器可以创建的终结点的地址标头的集合。</summary>
      <returns>包含终结点地址信息的 <see cref="T:System.ServiceModel.Configuration.AddressHeaderCollectionElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndpointAddressElementBase.Identity">
      <summary>获取终结点的标识。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.IdentityElement" />，提供一个标识，终结点在相互交换消息时可使用该标识对对方进行身份验证。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointAddressElementBase.InitializeFrom(System.ServiceModel.EndpointAddress)">
      <summary>使用指定终结点地址的内容初始化此终结点地址。</summary>
      <param name="endpointAddress">一个终结点地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointAddress" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndpointAddressElementBase.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.EndpointBehaviorElement">
      <summary>表示一个配置元素，该配置元素包含应用到计算机上所有 Windows Communication Foundation (WCF) 终结点的终结点行为的列表。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointBehaviorElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.EndpointBehaviorElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointBehaviorElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.EndpointBehaviorElement" /> 类的新实例。</summary>
      <param name="name">行为元素的唯一名称。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointBehaviorElement.Add(System.ServiceModel.Configuration.BehaviorExtensionElement)">
      <summary>将一个新的行为元素添加到此节。</summary>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The type specified by <paramref name="element" /> is invalid.</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointBehaviorElement.CanAdd(System.ServiceModel.Configuration.BehaviorExtensionElement)">
      <summary>将一个新的行为元素添加到此节，并返回一个指示操作是否成功的值。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.EndpointBehaviorElementCollection">
      <summary>包含 <see cref="T:System.ServiceModel.Configuration.EndpointBehaviorElement" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointBehaviorElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.EndpointBehaviorElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.EndpointCollectionElement">
      <summary>管理配置文件中的服务终结点的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointCollectionElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.EndpointCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndpointCollectionElement.ConfiguredEndpoints">
      <summary>在派生类中实现时，提供 <see cref="T:System.ServiceModel.Configuration.StandardEndpointElement" /> 方法和属性的只读集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Configuration.StandardEndpointElement" /> 方法和属性的只读集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointCollectionElement.ContainsKey(System.String)">
      <summary>确定配置文件中的服务元素是否包含具有与指定的字符串同名的终结点元素。</summary>
      <returns>true （如果指定的字符串包含一个指定的元素名称）；否则为false.</returns>
      <param name="name">键/值对中的键名称，表示终结点元素名称和值。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndpointCollectionElement.EndpointName">
      <summary>在派生类中实现时，获取服务终结点元素的 name 特性的值。</summary>
      <returns>服务终结点元素中的 name 特性的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndpointCollectionElement.EndpointType">
      <summary>在派生类中实现时，获取服务终结点的类型。</summary>
      <returns>服务终结点类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointCollectionElement.GetDefaultStandardEndpointElement">
      <summary>在派生类中实现时，返回默认的 <see cref="T:System.ServiceModel.Configuration.StandardEndpointElement" />。</summary>
      <returns>服务模型标准终结点元素。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndpointCollectionElement.TryAdd(System.String,System.ServiceModel.Description.ServiceEndpoint,System.Configuration.Configuration)">
      <summary>在派生类中实现时，将指定的终结点添加到配置文件中的服务终结点的集合中。</summary>
      <returns>如果将终结点添加到配置文件中的集合，则为 true；否则为 false。</returns>
      <param name="name">包含此终结点集合的服务终结点的名称。</param>
      <param name="endpoint">要添加到集合的服务终结点元素。</param>
      <param name="config">接收服务终结点的配置文件。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.EndToEndTracingElement">
      <summary>处理配置文件元素设置，这些设置可启用或禁用服务应用程序运行过程中的端对端跟踪的不同方面。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.EndToEndTracingElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.EndToEndTracingElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndToEndTracingElement.ActivityTracing">
      <summary>获取一个值，该值指示是否启用活动跟踪。</summary>
      <returns>如果已启用活动跟踪，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndToEndTracingElement.MessageFlowTracing">
      <summary>获取一个值，该值指示是否启用消息流跟踪。</summary>
      <returns>如果启用消息流跟踪，则为 etrue；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.EndToEndTracingElement.PropagateActivity">
      <summary>获取一个值，该值指示是否将传播特性设置为 true。</summary>
      <returns>如果将传播活动特性设置为 true，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ExtensionElement">
      <summary>表示一个配置元素，该元素定义一个扩展，该扩展使用户能够创建用户定义的绑定、行为等。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ExtensionElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionElement.#ctor(System.String)">
      <summary>初始化具有指定名称的 <see cref="T:System.ServiceModel.Configuration.ExtensionElement" /> 类的新实例。</summary>
      <param name="name">此配置元素的唯一名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或为空。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionElement.#ctor(System.String,System.String)">
      <summary>使用指定的名称和类型初始化 <see cref="T:System.ServiceModel.Configuration.ExtensionElement" /> 类的新实例。</summary>
      <param name="name">此配置元素的唯一名称。</param>
      <param name="type">此配置元素的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null 或为空。 - 或 - <paramref name="name" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionElement.Name">
      <summary>获取或设置此配置元素的唯一名称。</summary>
      <returns>此配置元素的唯一名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionElement.Type">
      <summary>获取或设置此配置元素的类型。</summary>
      <returns>此配置元素的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ExtensionElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.ExtensionElement" /> 实例的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ExtensionElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>向 <see cref="T:System.ServiceModel.Configuration.ExtensionElementCollection" /> 添加配置元素。</summary>
      <param name="element">要相加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">集合中已存在与 <paramref name="element" /> 具有相同名称或类型的扩展。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)">
      <summary>将配置元素添加到 <see cref="T:System.ServiceModel.Configuration.ExtensionElementCollection" /> 的指定位置。</summary>
      <param name="index">要添加 <paramref name="element" /> 的索引位置。</param>
      <param name="element">要相加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">集合中已存在与 <paramref name="element" /> 具有相同名称或类型的扩展。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>获取指定配置元素的元素键。</summary>
      <returns>一个 <see cref="T:System.Object" />，用作指定配置元素的键。</returns>
      <param name="element">要为其返回键的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionElementCollection.ThrowOnDuplicate">
      <summary>获取一个值，该值指示尝试向 <see cref="T:System.ServiceModel.Configuration.ExtensionElementCollection" /> 添加重复的 <see cref="T:System.Configuration.ConfigurationElement" /> 是否会导致引发异常。</summary>
      <returns>如果尝试向 <see cref="T:System.ServiceModel.Configuration.ExtensionElementCollection" /> 中添加重复的 <see cref="T:System.Configuration.ConfigurationElement" /> 会导致引发异常，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ExtensionsSection">
      <summary>表示一个包含所有扩展定义的配置节。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionsSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ExtensionsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionsSection.BehaviorExtensions">
      <summary>获取在该节定义的所有行为扩展。</summary>
      <returns>终行为扩展的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionsSection.BindingElementExtensions">
      <summary>获取在该节定义的所有绑定元素扩展。</summary>
      <returns>绑定元素扩展的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionsSection.BindingExtensions">
      <summary>获取在该节定义的所有绑定扩展。</summary>
      <returns>绑定扩展的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionsSection.EndpointExtensions">
      <summary>获取一个 <see cref="T:System.ServiceModel.Configuration.ExtensionElementCollection" /> 对象，该对象包含指定的终结点扩展。</summary>
      <returns>终结点扩展的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtensionsSection.InitializeDefault">
      <summary>为该配置节初始化一组默认值。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ExtensionsSection.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement">
      <summary>表示一个配置元素，该配置元素配置在联合身份验证中使用 HTTP 发送的消息的安全性。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.AlgorithmSuite">
      <summary>获取或设置消息加密和密钥换行算法。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 值。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.ClaimTypeRequirements">
      <summary>获取此绑定的声明类型集。</summary>
      <returns>请求的类型的集合。 默认值为空集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.EstablishSecurityContext">
      <summary>获取或设置一个值，该值指示是否使用安全上下文令牌建立安全对话。</summary>
      <returns>如果使用安全上下文令牌建立安全对话，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.IssuedKeyType">
      <summary>获取或设置要颁发的密钥的类型。</summary>
      <returns>要颁发的键类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.IssuedTokenType">
      <summary>获取或设置一个 URI，该 URI 指定要颁发的令牌的类型。</summary>
      <returns>一个 URI，指定要颁发的令牌的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.Issuer">
      <summary>获取颁发者地址。</summary>
      <returns>颁发者地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.IssuerMetadata">
      <summary>获取颁发者的终结点地址。</summary>
      <returns>颁发者的终结点地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.NegotiateServiceCredential">
      <summary>获取或设置一个值，该值指定服务凭据是否作为协商的部分交换。</summary>
      <returns>如果对服务凭据进行协商，则为 true；如果服务凭据可在带外使用，则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement.TokenRequestParameters">
      <summary>获取配置元素的集合，这些元素指定请求令牌时要在消息正文中发送至安全令牌服务的其他 XML 元素。</summary>
      <returns>配置元素的集合，这些元素指定请求令牌时要在消息正文中发送至安全令牌服务的其他 XML 元素。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.HostElement">
      <summary>表示一个指定服务主机设置的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HostElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.HostElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.HostElement.BaseAddresses">
      <summary>获取服务主机所使用的基址。</summary>
      <returns>基址的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HostElement.Timeouts">
      <summary>获取一个配置元素，该元素指定允许服务主机打开或关闭的时间间隔。</summary>
      <returns>一个配置元素，指定为打开或关闭服务主机预留的时间间隔。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.HostTimeoutsElement">
      <summary>表示一个配置元素，该元素指定为打开或关闭服务主机预留的时间间隔。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HostTimeoutsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.HostTimeoutsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.HostTimeoutsElement.CloseTimeout">
      <summary>获取或设置允许服务主机关闭的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定允许服务主机关闭的时间间隔。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HostTimeoutsElement.OpenTimeout">
      <summary>获取或设置允许服务主机打开的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定允许服务主机打开的时间间隔。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.HttpBindingBaseElement">
      <summary>表示 HttpBindingBase 的 HttpBindingBaseElement。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpBindingBaseElement.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.HttpBindingBaseElement" /> 类的新实例。</summary>
      <param name="name">绑定的名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.AllowCookies">
      <summary>获取或设置一个值，该值指示客户端是否接收 Cookie。</summary>
      <returns>如果客户端接受 Cookie，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.BypassProxyOnLocal">
      <summary>获取或设置一个值，该值指示是否对本地地址不使用代理服务器。</summary>
      <returns>如果对本地地址不使用代理服务器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.HostNameComparisonMode">
      <summary>获取或设置用于分析 URI 的 HTTP 主机名比较模式。</summary>
      <returns>用于分析 URI 的 HTTP 主机名比较模式。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpBindingBaseElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置节。</summary>
      <param name="binding">一个绑定元素集合。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.MaxBufferPoolSize">
      <summary>获取或设置由绑定处理的缓冲池的最大大小。</summary>
      <returns>绑定处理的缓冲池的最大大小。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.MaxBufferSize">
      <summary>获取或设置要使用的缓冲区的最大大小。</summary>
      <returns>要使用的缓冲区最大大小。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.MaxReceivedMessageSize">
      <summary>获取或设置绑定可处理的消息的最大大小。</summary>
      <returns>绑定可处理的消息的最大大小。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpBindingBaseElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>将指定的绑定应用于此实例。</summary>
      <param name="binding">要应用的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.Properties">
      <summary>获取绑定的属性。</summary>
      <returns>绑定的属性。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.ProxyAddress">
      <summary>获取或设置 HTTP 代理的 URI 地址。</summary>
      <returns>HTTP 代理的 URI 地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.ReaderQuotas">
      <summary>获取可由用此绑定配置的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>复杂性约束。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.TextEncoding">
      <summary>获取或设置要用于在绑定上发出消息的字符集编码。</summary>
      <returns>要用来在绑定上发出消息的字符集编码。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.TransferMode">
      <summary>获取或设置传输模式。</summary>
      <returns>传输模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpBindingBaseElement.UseDefaultWebProxy">
      <summary>获取或设置一个值，该值指示是否使用系统自动配置 HTTP 代理。</summary>
      <returns>如果使用系统的自动配置 HTTP 代理，则为 true；否则为 。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.HttpDigestClientElement">
      <summary>表示 clientCredential 元素中的当前 HTTP 摘要式凭据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpDigestClientElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.HttpDigestClientElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpDigestClientElement.Copy(System.ServiceModel.Configuration.HttpDigestClientElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null 或为空。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpDigestClientElement.ImpersonationLevel">
      <summary>获取或设置客户端用于与服务器进行通信的模拟首选项。</summary>
      <returns>一个有效的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。 默认值为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement">
      <summary>表示 HttpMessageHandlerFactory 的 HttpMessageHandlerFactoryElement。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement.Handlers">
      <summary>获取或设置来自配置的处理程序集。</summary>
      <returns>配置中处理程序的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement.Type">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement" /> 对象的类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Configuration.HttpMessageHandlerFactoryElement" /> 对象的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.HttpsTransportElement">
      <summary>表示为传输 SOAP 消息指定 HTTPS 传输的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpsTransportElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.HttpsTransportElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpsTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的设置应用到此配置元素。</summary>
      <param name="bindingElement">要将其设置应用到此配置元素的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpsTransportElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpsTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 的设置复制到此配置元素。</summary>
      <param name="from">要将其设置复制到此配置元素的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpsTransportElement.CreateDefaultBindingElement">
      <summary>根据此配置元素中的设置创建绑定元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />，它的属性复制自此配置元素中的设置。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpsTransportElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpsTransportElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpsTransportElement.RequireClientCertificate">
      <summary>获取或设置一个布尔值，该值指定服务器是否要求客户端提供一个客户端证书作为 HTTPS 握手的一部分。</summary>
      <returns>如果需要 SSL 客户端身份验证，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.HttpTransportElement">
      <summary>表示为传输 SOAP 消息指定 HTTP 传输的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpTransportElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.HttpTransportElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.AllowCookies">
      <summary>获取或设置一个值，该值指示客户端是否接受 Cookie 并且对今后的请求传播它们。</summary>
      <returns>如果接受 Cookie，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将新配置应用于此元素。</summary>
      <param name="bindingElement">要用于此配置的绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.AuthenticationScheme">
      <summary>获取或设置身份验证方案，该方案用于验证 HTTP 侦听器所处理的客户端请求。</summary>
      <returns>指定用于客户端身份验证的协议的 <see cref="T:System.Net.AuthenticationSchemes" /> 对象。 默认值为 Anonymous。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.BindingElementType">
      <summary>获取绑定的类型。</summary>
      <returns>绑定的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.BypassProxyOnLocal">
      <summary>获取或设置一个值，该值指示是否为本地地址忽略代理。</summary>
      <returns>如果为本地地址忽略代理，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>从指定的源复制配置元素。</summary>
      <param name="from">包含要复制的元素的源。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpTransportElement.CreateDefaultBindingElement">
      <summary>从该实例创建新的事务绑定元素。</summary>
      <returns>新创建的 <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.DecompressionEnabled">
      <summary>获取或设置一个值，该值指示是否为此传输启用针对 SOAP 消息的数据解压缩。</summary>
      <returns>如果为此传输启用 SOAP 消息的数据解压缩，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.ExtendedProtectionPolicy">
      <summary>获取一个 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 实例，其中包含用于会话的扩展保护的配置设置。</summary>
      <returns>包含用于会话的扩展保护的配置设置的 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指定在对 URI 进行匹配时如何使用主机名来访问服务。</summary>
      <returns>指定如何在传入的请求路到终结点 URI 时包含主机名的 <see cref="T:System.ServiceModel.HostNameComparisonMode" /> 值。 默认值为 StrongWildcard，表示在匹配过程中忽略主机名。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpTransportElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定的绑定元素来初始化此实例。</summary>
      <param name="bindingElement">要用于初始化的绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.KeepAliveEnabled">
      <summary>获取或设置指示是否与 Internet 资源建立持久性连接的 Boolean 值。</summary>
      <returns>如果保持与 Internet 资源的持久性连接，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.MaxBufferSize">
      <summary>获取或设置缓冲池的最大大小。</summary>
      <returns>缓冲池的最大大小。 默认值为 524,288 字节 (512 * 1024)。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.MaxPendingAccepts">
      <summary>获取或设置可用于处理服务上的传入连接的最大挂起异步接受操作数。</summary>
      <returns>可用于处理服务上的传入连接的最大挂起异步接受操作数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.MessageHandlerFactory">
      <summary>获取或设置消息处理程序工厂。</summary>
      <returns>消息处理程序工厂。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.ProxyAddress">
      <summary>获取或设置一个 URI，包含要用于 HTTP 请求的代理地址。</summary>
      <returns>包含代理地址的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.ProxyAuthenticationScheme">
      <summary>获取或设置用于对 HTTP 代理所处理的客户端请求进行身份验证的身份验证方案。</summary>
      <returns>指定用于代理上的客户端身份验证的协议的 <see cref="T:System.Net.AuthenticationSchemes" /> 对象。 默认值为 Anonymous。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.Realm">
      <summary>获取或设置身份验证领域。</summary>
      <returns>一个包含身份验证领域的字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.RequestInitializationTimeout">
      <summary>获取或设置指定在超时前可用于完成请求初始化的时间间隔。</summary>
      <returns>一个时间跨度，在其之后的请求初始化超时。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.TransferMode">
      <summary>获取或设置一个值，该值指定对消息进行缓冲处理还是流式处理，或者指定消息是请求还是响应。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.TransferMode" /> 值，该值指定对消息进行缓冲处理还是流式处理，或者指定消息是请求还是响应。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.UnsafeConnectionNtlmAuthentication">
      <summary>获取或设置一个值，该值指示是否在服务器上启用不安全连接共享。</summary>
      <returns>如果启用不安全的连接共享，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.UseDefaultWebProxy">
      <summary>获取或设置一个值，该值指示是否使用计算机范围的代理设置，而不使用用户特定的设置。</summary>
      <returns>如果使用 <see cref="T:System.Net" /> 默认代理设置，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportElement.WebSocketSettings">
      <summary>获取或设置网络套接字设置。</summary>
      <returns>网络套接字设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.HttpTransportSecurityElement">
      <summary>表示一个用于控制 HTTP 传输的身份验证参数的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.HttpTransportSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.HttpTransportSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportSecurityElement.ClientCredentialType">
      <summary>获取或设置要用于身份验证的客户端凭据的类型。</summary>
      <returns>要用于身份验证的客户端凭据的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportSecurityElement.ExtendedProtectionPolicy">
      <summary>获取或设置 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 实例，其中包含用于会话的扩展保护的配置设置。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 实例，其中包含用于会话的扩展保护的配置设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportSecurityElement.ProxyCredentialType">
      <summary>获取或设置要用于针对代理进行身份验证的客户端凭据的类型。</summary>
      <returns>要用于针对代理进行身份验证的客户端凭据的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.HttpTransportSecurityElement.Realm">
      <summary>获取或设置摘要式或基本身份验证的身份验证领域。</summary>
      <returns>身份验证领域。 默认值为 ""。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.IBindingConfigurationElement">
      <summary>提供绑定元素的基本配置设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.IBindingConfigurationElement.ApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>将指定绑定的内容应用到此绑定配置节。</summary>
      <param name="binding">一个绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.IBindingConfigurationElement.CloseTimeout">
      <summary>获取为完成关闭操作提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成关闭操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IBindingConfigurationElement.Name">
      <summary>获取绑定的名称。</summary>
      <returns>绑定的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IBindingConfigurationElement.OpenTimeout">
      <summary>获取为完成打开操作提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IBindingConfigurationElement.ReceiveTimeout">
      <summary>获取为完成接收操作提供的时间间隔。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在超时前必须完成接收操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IBindingConfigurationElement.SendTimeout">
      <summary>获取为完成发送操作提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成发送操作的时间。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.IdentityElement">
      <summary>表示一个配置元素，该配置元素使其他终结点在与该终结点交换消息时可以对其进行身份验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.IdentityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.IdentityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.IdentityElement.Certificate">
      <summary>获取 X.509 证书的配置设置。</summary>
      <returns>X.509 证书的配置设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IdentityElement.CertificateReference">
      <summary>获取 X.509 证书验证的配置设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.CertificateReferenceElement" />，定义 X.509 证书验证的配置设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IdentityElement.Dns">
      <summary>获取一个 DNS 标识。</summary>
      <returns>DNS 标识。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.IdentityElement.InitializeFrom(System.ServiceModel.EndpointIdentity)">
      <summary>使用指定对象的内容初始化此配置元素。</summary>
      <param name="identity">终结点标识。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.IdentityElement.Rsa">
      <summary>获取一个 RSA 标识。</summary>
      <returns>一个 RSA 标识。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IdentityElement.ServicePrincipalName">
      <summary>获取一个服务器主体名称 (SPN) 标识。</summary>
      <returns>一个服务器主体名称 (SPN) 标识。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IdentityElement.UserPrincipalName">
      <summary>获取一个用户主体名称 (UPN) 标识。</summary>
      <returns>一个用户主体名称 (UPN) 标识。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement">
      <summary>表示为客户端凭据指定当前颁发的令牌的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement.BehaviorConfiguration">
      <summary>获取或设置应用此配置的行为。</summary>
      <returns>应用此配置的行为的名称。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement.IssuerAddress">
      <summary>获取或设置令牌颁发者的地址。</summary>
      <returns>令牌颁发者的地址。 默认值为空字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.IssuedTokenClientBehaviorsElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.IssuedTokenClientElement">
      <summary>表示一个配置元素，该元素将颁发的令牌指定为客户端凭据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.IssuedTokenClientElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.IssuedTokenClientElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientElement.CacheIssuedTokens">
      <summary>获取或设置一个值，该值指定是否要缓存已颁发的标记。</summary>
      <returns>如果要缓存令牌，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.IssuedTokenClientElement.Copy(System.ServiceModel.Configuration.IssuedTokenClientElement)">
      <summary>将指定配置元素的内容复制到此 <see cref="T:System.ServiceModel.Configuration.IssuedTokenClientElement" />。</summary>
      <param name="from">一个配置节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null 或为空。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientElement.DefaultKeyEntropyMode">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Security.SecurityKeyEntropyMode" /> 的默认值。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Security.SecurityKeyEntropyMode" /> 值。 默认值为 <see cref="F:System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientElement.IssuedTokenRenewalThresholdPercentage">
      <summary>获取或设置已颁发令牌的续订阈值百分比。</summary>
      <returns>已颁发令牌的续订阈值百分比。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientElement.IssuerChannelBehaviors">
      <summary>获取一个配置元素集合，其中的元素定义颁发者通道行为。</summary>
      <returns>一个配置元素集合，其中的元素定义颁发者通道行为。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientElement.LocalIssuer">
      <summary>获取一个配置元素，该元素定义本地颁发者的地址。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement" />，它指定本地颁发者的地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientElement.LocalIssuerChannelBehaviors">
      <summary>获取或设置本地颁发者通道行为的集合。</summary>
      <returns>本地颁发者通道行为的集合。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenClientElement.MaxIssuedTokenCachingTime">
      <summary>获取或设置已颁发令牌的最大缓存时间。</summary>
      <returns>一个 <see cref="T:System.Timespan" />，表示已颁发令牌的最大缓存时间。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.IssuedTokenParametersElement">
      <summary>表示指定已颁发令牌的其他设置的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.IssuedTokenParametersElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.IssuedTokenParametersElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.AdditionalRequestParameters">
      <summary>获取指定附加信息的配置元素的集合。</summary>
      <returns>指定附加信息的配置元素的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.ClaimTypeRequirements">
      <summary>获取所需声明类型的集合。</summary>
      <returns>所需的声明类型的集合。 该集合中的每个元素都是一个 <see cref="T:System.ServiceModel.Configuration.ClaimTypeElement" /> 实例，该实例的 <see cref="P:System.ServiceModel.Configuration.ClaimTypeElement.ClaimType" /> 属性已设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.DefaultMessageSecurityVersion">
      <summary>获取或设置要用于此绑定的默认消息安全版本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.MessageSecurityVersion" />，可提供有关安全规范（WS-Security、WS-Trust、WS-Secure Conversation 和 WS-Security Policy）版本的信息，绑定必须支持这些安全规范。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.Issuer">
      <summary>获取一个配置元素，该元素可指定颁发当前令牌的终结点。</summary>
      <returns>一个用于指定颁发当前令牌的终结点的配置元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.IssuerMetadata">
      <summary>获取一个指定令牌颁发者附加信息的配置元素。</summary>
      <returns>一个配置元素，指定令牌颁发者附加信息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.KeySize">
      <summary>获取或设置颁发密钥的大小。</summary>
      <returns>颁发密钥的大小。 默认值为 256。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.KeyType">
      <summary>获取或设置要颁发的密钥的类型。</summary>
      <returns>一个有效的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyType" /> 值，可指定要颁发密钥的类型。 默认值为 <see cref="F:System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.TokenType">
      <summary>获取或设置要用于颁发的令牌的类型。</summary>
      <returns>要用于颁发的令牌的类型。 默认值为 http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAML。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersElement.UseStrTransform">
      <summary>获取或设置指示颁发的令牌参数是否使用 STR 转换的值。</summary>
      <returns>如果发布的标记参数使用 STR 转换，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement">
      <summary>表示一个配置元素，该元素指定颁发安全令牌的终结点。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement.Binding">
      <summary>获取或设置要使用的绑定的类型。</summary>
      <returns>要使用的绑定的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenParametersEndpointAddressElement.BindingConfiguration">
      <summary>获取或设置要在实例化终结点时使用的绑定配置的名称。 定义终结点时，绑定配置必须在作用域内。</summary>
      <returns>要在实例化终结点时使用的绑定配置的名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.IssuedTokenServiceElement">
      <summary>表示一个配置元素，该元素将颁发的令牌指定为服务凭据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.IssuedTokenServiceElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.IssuedTokenServiceElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.AllowedAudienceUris">
      <summary>获取元素中允许的受众 URI 的集合。</summary>
      <returns>元素中允许的用户 URI 的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.AllowUntrustedRsaIssuers">
      <summary>获取或设置一个值，该值指定是否允许不可信的 RSA 证书颁发者。</summary>
      <returns>如果接受不可信的 RSA 证书颁发者，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.AudienceUriMode">
      <summary>获取或设置一个值，该值指定是否应验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" /> 的一个有效值，该值指定是否应验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.CertificateValidationMode">
      <summary>获取或设置证书验证模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" /> 的有效值。 如果设置为 <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.Custom" />，则还必须提供 customCertificateValidator。 默认值为 <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.IssuedTokenServiceElement.Copy(System.ServiceModel.Configuration.IssuedTokenServiceElement)">
      <summary>将指定配置元素的内容复制到此 <see cref="T:System.ServiceModel.Configuration.IssuedTokenServiceElement" />。</summary>
      <param name="from">要复制其内容的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null 或为空。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.CustomCertificateValidatorType">
      <summary>获取或设置用于验证自定义类型的类型和程序集。</summary>
      <returns>用于验证自定义类型的类型和程序集。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.KnownCertificates">
      <summary>获取一个配置元素集合，其中的元素指定由可信颁发者颁发的证书。</summary>
      <returns>一个配置元素集合，其中的元素指定由可信颁发者颁发的证书。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.RevocationMode">
      <summary>获取或设置吊销模式，该模式指定是否进行吊销检查，以及是联机执行还是脱机执行。</summary>
      <returns>吊销模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.SamlSerializerType">
      <summary>获取或设置用于服务凭据的 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> 的类型。</summary>
      <returns>用于服务凭据的 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> 的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.IssuedTokenServiceElement.TrustedStoreLocation">
      <summary>获取或设置 X.509 证书存储区的位置。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 的有效值。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement">
      <summary>配置本地客户端的安全设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.CacheCookies">
      <summary>获取或设置一个布尔值，该值指定是否启用 Cookie 缓存。</summary>
      <returns>如果启用 Cookie 缓存，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.CookieRenewalThresholdPercentage">
      <summary>获取或设置可以续订的 Cookie 的最大百分比。</summary>
      <returns>一个介于 0 和 100 之间的值（包括 0 和 100）。 默认值为 90。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.DetectReplays">
      <summary>获取或设置一个布尔值，该值指定是否自动检测和处理针对通道的重播攻击。</summary>
      <returns>如果自动检测和处理针对通道的重播攻击，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.MaxClockSkew">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定通信双方的系统时钟之间的最大时间差异。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定通信双方的系统时钟之间的最大时间差异。 默认值为“00:05:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.MaxCookieCachingTime">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定 Cookie 的最长生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定 Cookie 的最长生存期。 默认值为“10675199.02:48:05.4775807”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.ReconnectTransportOnFailure">
      <summary>获取或设置一个布尔值，该值指定使用 WS-Reliable 消息的连接在发生传输故障后是否尝试重新连接。</summary>
      <returns>如果使用 WS-Reliable 消息的连接在发生传输故障后尝试重新连接，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.ReplayCacheSize">
      <summary>获取或设置一个值，该值指定用于重播检测的缓存 Nonce 的数目。</summary>
      <returns>用于重播检测的缓存 Nonce 的数目。 默认值为 500000。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.ReplayWindow">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定单个消息 Nonce 有效的持续时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定单个消息 Nonce 有效的持续时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.SessionKeyRenewalInterval">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定一个持续时间，发起方将在此段时间之后续订安全会话的密钥。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定一个持续时间，发起方将在此段时间之后续订安全会话的密钥。 默认值为“10:00:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.SessionKeyRolloverInterval">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定在密钥续订期间，上一个会话密钥对于传入消息有效的时间间隔。 默认值为“00:05:00”。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在密钥续订期间，上一个会话密钥对于传入消息有效的持续时间。 默认值为“00:05:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalClientSecuritySettingsElement.TimestampValidityDuration">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定时间戳有效的持续时间。</summary>
      <returns>一个值为正的 <see cref="T:System.TimeSpan" />，指定时间戳有效的持续时间。 默认值为“00:15:00”。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement">
      <summary>配置本地服务的安全设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.DetectReplays">
      <summary>获取或设置一个布尔值，该值指定是否自动检测和处理针对通道的重播攻击。</summary>
      <returns>如果自动检测和处理针对通道的重播攻击，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.InactivityTimeout">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定通道在超时之前等待的无活动持续时间。</summary>
      <returns>一个正的 <see cref="T:System.TimeSpan" />，指定通道在超时之前等待的无活动持续时间。 默认值为“01:00:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.IssuedCookieLifetime">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定颁发给所有新安全 Cookie 的生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定颁发给所有新安全 Cookie 的生存期。 默认值为“10:00:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.MaxCachedCookies">
      <summary>获取或设置一个值，该值指定可以缓存的最大 Cookie 数。</summary>
      <returns>可以缓存的最大 Cookie 数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.MaxClockSkew">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定通信双方的系统时钟之间的最大时间差异。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定通信双方的系统时钟之间的最大时间差异。 默认值为“00:05:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.MaxPendingSessions">
      <summary>获取或设置一个值，该值指定服务支持的最大挂起安全会话数。</summary>
      <returns>服务支持的最大挂起安全会话数。 默认值为 1000。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.MaxStatefulNegotiations">
      <summary>获取或设置一个值，该值指定可以同时处于活动状态的最大安全协商数。</summary>
      <returns>可以同时处于活动状态的安全协商数。 默认值为 1024。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.NegotiationTimeout">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定服务器和客户端之间安全协商阶段的最长持续时间。</summary>
      <returns>一个正的 <see cref="T:System.TimeSpan" /> 值，指定服务器和客户端之间安全协商阶段的最长持续时间。 默认值为“00:02:00”</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.ReconnectTransportOnFailure">
      <summary>获取或设置一个布尔值，该值指定使用 WS-Reliable 消息的连接在发生传输故障后是否尝试重新连接。</summary>
      <returns>如果使用 WS-Reliable 消息的连接在发生传输故障后尝试重新连接，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.ReplayCacheSize">
      <summary>获取或设置一个值，该值指定用于重播检测的缓存 Nonce 的数目。</summary>
      <returns>用于重播检测的缓存 Nonce 的数目。 默认值为 500000。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.ReplayWindow">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定单个消息 Nonce 有效的持续时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定单个消息 Nonce 有效的持续时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.SessionKeyRenewalInterval">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定一个持续时间，发起方将在此段时间之后续订安全会话的密钥。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定一个持续时间，发起方将在此段时间之后续订安全会话的密钥。 默认值为“10:00:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.SessionKeyRolloverInterval">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定在密钥续订期间，上一个会话密钥对于传入消息有效的时间间隔。 默认值为“00:05:00”。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在密钥续订期间，上一个会话密钥对于传入消息有效的持续时间。 默认值为“00:05:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.LocalServiceSecuritySettingsElement.TimestampValidityDuration">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指定时间戳有效的持续时间。</summary>
      <returns>一个值为正的 <see cref="T:System.TimeSpan" />，指定时间戳有效的持续时间。 默认值为“00:15:00”。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MessageLoggingElement">
      <summary>表示一个 XML 元素，该元素定义 Windows Communication Foundation (WCF) 的消息日志记录功能的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MessageLoggingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MessageLoggingElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageLoggingElement.Filters">
      <summary>获取用于消息日志记录的 XPathFilter 对象。</summary>
      <returns>一个 XPathFilter 对象的集合，用于记录消息日志。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageLoggingElement.LogEntireMessage">
      <summary>获取或设置一个值，该值指定是否记录整个消息（消息头和正文）。</summary>
      <returns>如果记录整个消息（消息头和正文），则为 true；否则为 false。 默认值为 false，这意味着仅记录消息头。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageLoggingElement.LogKnownPii">
      <summary>获取或设置一个值，该值指示是否记录已知的 Pii 标识符。</summary>
      <returns>如果记录已知的 Pii，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageLoggingElement.LogMalformedMessages">
      <summary>获取或设置一个值，该值指定是否记录格式不正确的消息。</summary>
      <returns>如果记录格式不正确的消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageLoggingElement.LogMessagesAtServiceLevel">
      <summary>获取或设置一个值，该值指定是否在服务级别跟踪消息（在与加密和传输有关的转换之前）。</summary>
      <returns>如果在服务级别跟踪消息（在与加密和传输有关的转换之前），则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageLoggingElement.LogMessagesAtTransportLevel">
      <summary>获取或设置一个值，该值指定是否在传输级别跟踪消息。</summary>
      <returns>如果在传输级别跟踪消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageLoggingElement.MaxMessagesToLog">
      <summary>获取或设置一个值，该值指定要记录的最大消息数。</summary>
      <returns>要记录的最大消息数。 默认值为 1000。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageLoggingElement.MaxSizeOfMessageToLog">
      <summary>获取或设置一个值，该值指定要记录的消息的最大大小（以字节为单位）。</summary>
      <returns>要记录的消息的最大大小（以字节为单位）。 大小超出限制的消息不会被记录。 此设置会影响所有跟踪级别。 默认值为 Int32.MaxValue。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MessageSecurityOverHttpElement">
      <summary>为使用 HTTP 发送的消息定义安全配置设置。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageSecurityOverHttpElement.AlgorithmSuite">
      <summary>获取或设置用于保护 HTTP 消息的消息加密和密钥包装算法。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 值，该值指定用于保护 HTTP 消息的消息加密和密钥包装算法。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageSecurityOverHttpElement.ClientCredentialType">
      <summary>指定要在使用基于消息的安全或 TransportWithMessageCredential 执行客户端身份验证时使用的凭据类型。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.MessageCredentialType" /> 值，该值指定要在使用基于消息的安全或 TransportWithMessageCredential 执行客户端身份验证时使用的凭据类型。 默认值为 <see cref="F:System.ServiceModel.MessageCredentialType.Windows" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageSecurityOverHttpElement.NegotiateServiceCredential">
      <summary>获取或设置一个布尔值，该布尔值指定是在客户端带外设置服务凭据，还是通过协商过程由客户端从服务获取服务凭据。</summary>
      <returns>如果在客户端带外设置服务凭据，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageSecurityOverHttpElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MessageSecurityOverMsmqElement">
      <summary>可用来设置 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定上的消息级安全属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MessageSecurityOverMsmqElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MessageSecurityOverMsmqElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageSecurityOverMsmqElement.AlgorithmSuite">
      <summary>指定用于 SOAP 级安全消息的算法组。</summary>
      <returns>通过 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定发送的消息的 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageSecurityOverMsmqElement.ClientCredentialType">
      <summary>获取或设置通过 MSMQ 传输发送的消息的 <see cref="T:System.ServiceModel.MessageCredentialType" /> 安全设置。</summary>
      <returns>通过 MSMQ 传输发送的消息的 <see cref="T:System.ServiceModel.MessageCredentialType" /> 安全设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MessageSecurityOverTcpElement">
      <summary>为使用 TCP 发送的消息的安全性定义配置设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MessageSecurityOverTcpElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MessageSecurityOverTcpElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageSecurityOverTcpElement.AlgorithmSuite">
      <summary>获取或设置用于保护 TCP 消息的消息加密和密钥包装算法。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 值，该值指定用于保护 TCP 消息的消息加密和密钥包装算法。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MessageSecurityOverTcpElement.ClientCredentialType">
      <summary>指定要在使用基于消息的安全或 TransportWithMessageCredential 执行客户端身份验证时使用的凭据类型。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.MessageCredentialType" /> 值，该值指定要在使用基于消息的安全或 TransportWithMessageCredential 执行客户端身份验证时使用的凭据类型。 默认值为 <see cref="F:System.ServiceModel.MessageCredentialType.Windows" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MetadataElement">
      <summary>表示一个配置元素，它指定如何处理服务元数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MetadataElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MetadataElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MetadataElement.LoadPolicyImportExtensions">
      <summary>加载一个 <see cref="T:System.ServiceModel.Description.IPolicyImportExtension" /> 对象集合，该集合用于导入有关绑定的自定义策略断言。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.IPolicyImportExtension" /> 对象集合，该集合用于导入有关绑定的自定义策略断言。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MetadataElement.LoadWsdlImportExtensions">
      <summary>加载一个 <see cref="T:System.ServiceModel.Description.IWsdlImportExtension" /> 对象集合，该集合用于导入自定义 WSDL 信息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.IWsdlImportExtension" /> 对象集合，该集合用于导入自定义 WSDL 信息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MetadataElement.PolicyImporters">
      <summary>获取一个策略导入程序集合，该集合指定有关绑定的自定义策略断言的导入。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.PolicyImporterElementCollection" />，指定有关绑定的自定义策略断言的导入。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MetadataElement.WsdlImporters">
      <summary>获取一个 WSDL 导入程序集合，该集合导入带有 WS-Policy 附件的 Web Services 描述语言 (WSDL) 1.1 元数据。</summary>
      <returns>一个 WSDL 导入程序集合，该集合导入带有 WS-Policy 附件的 Web Services 描述语言 (WSDL) 1.1 元数据。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexBindingBindingCollectionElement`2">
      <summary>表示 MEX 绑定配置元素的集合。</summary>
      <typeparam name="TStandardBinding">一个标准绑定元素。</typeparam>
      <typeparam name="TBindingConfiguration">一个绑定配置元素。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexBindingBindingCollectionElement`2.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexBindingBindingCollectionElement`2" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexBindingBindingCollectionElement`2.TryAdd(System.String,System.ServiceModel.Channels.Binding,System.Configuration.Configuration)">
      <summary>将指定的绑定添加到集合。</summary>
      <returns>如果绑定可以添加到此集合，则为 true；否则为 false。</returns>
      <param name="name">要添加的绑定的名称。</param>
      <param name="binding">一个表示要添加的绑定的 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象。</param>
      <param name="config">此绑定的配置设置。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexBindingElement`1">
      <summary>表示一个基本配置元素，该元素指定用于 WS-MetadataExchange (WS-MEX) 消息交换的绑定的设置。</summary>
      <typeparam name="TStandardBinding">一个标准绑定元素。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexBindingElement`1.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.MexBindingElement`1" /> 类的新实例。</summary>
      <param name="name">绑定的名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MexBindingElement`1.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexBindingElement`1.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将指定绑定配置元素的内容应用到此绑定配置元素时调用。</summary>
      <param name="binding">一个绑定配置元素。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexHttpBindingCollectionElement">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.MexHttpBindingElement" /> 实例的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexHttpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexHttpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexHttpBindingCollectionElement.GetDefault">
      <summary>检索配置元素的默认值。</summary>
      <returns>默认绑定。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexHttpBindingElement">
      <summary>表示一个配置元素，该元素指定用于通过 HTTP 进行的 WS-MetadataExchange (WS-MEX) 消息交换的绑定的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexHttpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexHttpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexHttpBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.MexHttpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexHttpsBindingCollectionElement">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.MexHttpsBindingElement" /> 实例的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexHttpsBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexHttpsBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexHttpsBindingCollectionElement.GetDefault">
      <summary>检索配置元素的默认值。</summary>
      <returns>默认绑定。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexHttpsBindingElement">
      <summary>表示一个配置元素，该配置元素指定 HTTPS 上的 WS-MetadataExchange (WS-MEX) 消息交换所使用的绑定设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexHttpsBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexHttpsBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexHttpsBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.MexHttpsBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexNamedPipeBindingCollectionElement">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.MexNamedPipeBindingElement" /> 实例的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexNamedPipeBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexNamedPipeBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexNamedPipeBindingCollectionElement.GetDefault">
      <summary>检索配置元素的默认值。</summary>
      <returns>默认绑定。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexNamedPipeBindingElement">
      <summary>表示一个配置元素，该元素指定用于通过命名管道进行的 WS-MetadataExchange (WS-MEX) 消息交换的绑定的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexNamedPipeBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexNamedPipeBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexNamedPipeBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.MexNamedPipeBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexTcpBindingCollectionElement">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.MexTcpBindingElement" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexTcpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexTcpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexTcpBindingCollectionElement.GetDefault">
      <summary>获取此集合的默认绑定元素。</summary>
      <returns>默认绑定。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MexTcpBindingElement">
      <summary>表示一个配置元素，该元素指定用于通过 TCP 进行的 WS-MetadataExchange (WS-MEX) 消息交换的绑定的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexTcpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MexTcpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MexTcpBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.MexTcpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.MsmqBindingElementBase">
      <summary>提供一个基类，该基类具有 <see cref="T:System.ServiceModel.Configuration.NetMsmqBindingElement" /> 和 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationBindingElement" /> 类共有的成员。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqBindingElementBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MsmqBindingElementBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqBindingElementBase.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.MsmqBindingElementBase" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 由于此值用于标识此特定绑定，因此应是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.CustomDeadLetterQueue">
      <summary>获取或设置一个标识自定义死信队列的 <see cref="T:System.Uri" />，过期消息或未能传递的消息将在该队列中进行发送。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 实例，它包含自定义死信队列的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.DeadLetterQueue">
      <summary>获取或设置此绑定的 <see cref="T:System.ServiceModel.DeadLetterQueue" /> 设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.DeadLetterQueue" /> 值，指定要使用的死信队列（如果有）的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.Durable">
      <summary>获取或设置一个值，该值指定随此绑定发送的消息是持久的还是可变的。</summary>
      <returns>如果此绑定处理的消息是持久的，则为 true；如果这些消息是可变的，则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.ExactlyOnce">
      <summary>获取或设置一个值，该值指定随此绑定发送的消息是否具有一次性保证。</summary>
      <returns>如果随此绑定发送的消息具有一次性保证，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqBindingElementBase.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定的内容初始化此绑定。</summary>
      <param name="binding">一个绑定，包含用于初始化此绑定的设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.MaxReceivedMessageSize">
      <summary>获取或设置一个值，该值指示允许的最大消息大小（以字节为单位）。</summary>
      <returns>允许随此绑定发送或接收的消息的最大大小。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.MaxRetryCycles">
      <summary>获取或设置尝试向接收应用程序传递消息的最大重试周期数。</summary>
      <returns>将消息传输到病毒消息队列之前要尝试的最大重试周期数。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqBindingElementBase.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将此绑定的内容应用到指定绑定时调用。</summary>
      <param name="binding">一个绑定，包含要应用的设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此绑定配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.ReceiveContextEnabled">
      <summary>获取或设置一个值，该值指定是否启用为处理队列中消息的接收上下文。</summary>
      <returns>如果启用接收上下文来处理队列中的消息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.ReceiveErrorHandling">
      <summary>获取或设置一个枚举值，该值指定如何处理病毒消息和无法调度的消息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.ReceiveErrorHandling" /> 值，指定如何处理病毒消息和无法调度的消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.ReceiveRetryCount">
      <summary>获取或设置在应用程序队列到应用程序的消息传输失败时，队列管理器最多可尝试的立即重试次数。</summary>
      <returns>队列管理器在将消息传输到重试队列前应该尝试发送该消息的最大次数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.RetryCycleDelay">
      <summary>获取或设置一个值，该值指定在尝试传递无法传递的消息时，尝试另一个重试周期之前应等待的时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在开始下一个尝试传递到接收应用程序的周期前等待的时间间隔。 默认值为 30（分钟）。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.TimeToLive">
      <summary>获取或设置一个值，该值指定消息有效的时长。 过了这段时间之后，消息会放置到死信队列（如果有）中。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，它指定消息有效的时长。 默认值为 24 小时。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.UseMsmqTracing">
      <summary>获取或设置一个值，该值指示是否使用“消息队列”（也称为 MSMQ）内置消息跟踪工具。</summary>
      <returns>如果应使用消息队列 (MSMQ) 内置消息跟踪设备，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.UseSourceJournal">
      <summary>获取或设置一个值，该值指示是否应将此绑定处理的消息副本存储到源日记队列中。</summary>
      <returns>如果将此绑定处理的消息复制到源日记队列中，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqBindingElementBase.ValidityDuration">
      <summary>获取或设置一个值，该值指示在使用排队通道时的连接超时。</summary>
      <returns>与排队通道一起使用时，连接超时。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MsmqElementBase">
      <summary>提供一个基类，该基类具有 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationElement" /> 和 <see cref="T:System.ServiceModel.Configuration.MsmqTransportElement" /> 共有的成员。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqElementBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MsmqElementBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqElementBase.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将此绑定元素的设置应用于指定绑定元素。</summary>
      <param name="bindingElement">一个包含要应用的设置的绑定元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqElementBase.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 中的设置复制到此绑定元素。</summary>
      <param name="from">包含要复制的值的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.CustomDeadLetterQueue">
      <summary>获取或设置一个 URI，该 URI 包含每个应用程序的死信队列（该队列用于放置已过期的消息以及传输或传递失败的消息）的位置。</summary>
      <returns>一个 <see cref="T:System.Uri" />，包含每个应用程序的死信队列的位置。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.DeadLetterQueue">
      <summary>获取或设置一个枚举值，该值指示要使用的死信队列的类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.DeadLetterQueue" /> 枚举值，指示要使用的死信队列的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.Durable">
      <summary>获取或设置一个值，该值指定此绑定处理的消息是持久的还是可变的。</summary>
      <returns>如果此绑定处理的消息是持久的，则为 true；如果这些消息是可变的，则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.ExactlyOnce">
      <summary>获取或设置一个布尔值，该值指示此绑定处理的消息是否将只接收一次。</summary>
      <returns>如果此绑定处理的消息将只接收一次，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqElementBase.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容初始化此绑定元素。</summary>
      <param name="bindingElement">一个绑定元素，包含用于初始化此绑定元素的设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.MaxRetryCycles">
      <summary>获取或设置尝试向接收应用程序传递消息的最大重试周期数。</summary>
      <returns>一个整数，指示尝试向接收应用程序传递消息的最大重试周期数。 默认值为 2。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.MsmqTransportSecurity">
      <summary>获取一个 <see cref="T:System.ServiceModel.Configuration.MsmqTransportSecurityElement" /> 实例，该实例封装绑定的传输安全设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.MsmqTransportSecurityElement" /> 实例，该实例封装绑定的传输安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此绑定配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.ReceiveContextEnabled">
      <summary>获取或设置一个值，该值指定是否启用接收上下文来处理队列中的消息。</summary>
      <returns>如果启用接收上下文来处理队列中的消息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.ReceiveErrorHandling">
      <summary>获取或设置一个枚举值，该值指定如何处理病毒消息和不可调度的消息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.ReceiveErrorHandling" /> 值，指定如何处理病毒消息和不可调度的消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.ReceiveRetryCount">
      <summary>获取或设置队列管理器在将消息传输到重试队列前可尝试发送该消息的最大次数。</summary>
      <returns>一个 32 位有符号整数，它指定队列管理器在将消息传输到重试队列前可尝试发送该消息的最大次数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.RetryCycleDelay">
      <summary>获取或设置一个值，该值指示尝试传递无法立即传递的消息时，各个重试周期之间的时间延迟。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在开始下一个尝试传递到接收应用程序的周期前等待的时间间隔。 默认值为“00:10:00”。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.TimeToLive">
      <summary>获取或设置一个时间间隔，该时间间隔指示此绑定处理的消息在过期之前可以保留在队列中的时间长度。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指示消息在过期之前可以保留在队列中的时间长度。 默认值为一天 (01:00:00:00)。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.UseMsmqTracing">
      <summary>获取或设置一个布尔值，该值指示是否应跟踪由此绑定处理的消息。</summary>
      <returns>如果应跟踪由此绑定处理的消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.UseSourceJournal">
      <summary>获取或设置一个布尔值，该值指示是否应将由此绑定处理的消息的副本存储在源日志队列中。</summary>
      <returns>如果应将此绑定处理的消息副本存储在源日记队列中，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqElementBase.ValidityDuration">
      <summary>获取或设置一个值，该值指示在使用排队通道时的连接超时。</summary>
      <returns>与排队通道一起使用时，连接超时。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MsmqIntegrationBindingCollectionElement">
      <summary>表示 MsmqIntegrationBindingElement 的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationBindingCollectionElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationBindingCollectionElement" /> 的一个新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.MsmqIntegrationBindingElement">
      <summary>Windows Communication Foundation (WCF) 应用程序可利用此绑定元素，向现有的使用 COM、MSMQ 本机 API 或 <see cref="N:System.Messaging" /> 中的 API 的 MSMQ 应用程序发送消息，或从这些应用程序接收消息。 使用此类可以向基于 MSMQ 的消息应用程序发送消息，或从这些应用程序接收消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationBindingElement.#ctor(System.String)">
      <summary>使用指定的绑定名称初始化 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationBindingElement" /> 类的新实例。</summary>
      <param name="name">要使用的绑定名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqIntegrationBindingElement.BindingElementType">
      <summary>获取绑定元素的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示与此配置元素相关联的绑定元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象的属性初始化 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationBindingElement" /> 对象的属性。</summary>
      <param name="binding">用于初始化 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationBindingElement" /> 对象的属性的 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将此绑定的内容应用到指定绑定时调用。</summary>
      <param name="binding">应用这些设置的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqIntegrationBindingElement.Properties">
      <summary>获取与此配置元素相关联的配置属性集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，包含一组与此配置元素相关联的属性。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqIntegrationBindingElement.Security">
      <summary>获取用于此绑定的安全类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationSecurityElement" />，指定用于此绑定的安全类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqIntegrationBindingElement.SerializationFormat">
      <summary>获取或设置要在序列化 MSMQ 消息时使用的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" />。</summary>
      <returns>要在序列化 MSMQ 消息时使用的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MsmqIntegrationElement">
      <summary>表示配置元素，该配置元素指定与消息队列 (MSMQ) 发送方或接收方进行交互所需的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将此配置元素的设置应用到指定的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</summary>
      <param name="bindingElement">将要应用这些设置的绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqIntegrationElement.BindingElementType">
      <summary>获取与此配置元素相关联的绑定类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示与此配置元素相关联的绑定元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 的设置复制到此配置元素。</summary>
      <param name="from">要将其设置复制到此配置元素的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqIntegrationElement.SerializationFormat">
      <summary>获取或设置要在序列化消息队列 (MSMQ) 消息时使用的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" />。</summary>
      <returns>要在序列化 MSMQ 消息时使用的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MsmqIntegrationSecurityElement">
      <summary>包装消息队列 (MSMQ) 集成通道的传输安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqIntegrationSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MsmqIntegrationSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqIntegrationSecurityElement.Mode">
      <summary>获取或设置与消息队列集成通道相关联的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" />。</summary>
      <returns>与消息队列集成通道相关联的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqIntegrationSecurityElement.Transport">
      <summary>获取与消息队列 (MSMQ) 集成通道相关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" />。</summary>
      <returns>与消息队列集成通道相关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MsmqTransportElement">
      <summary>表示绑定元素，该绑定元素用于为使用本机 MSMQ 协议的 Windows Communication Foundation (WCF) 服务指定队列通信属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqTransportElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MsmqTransportElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将此配置元素的设置应用到指定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 绑定元素。</summary>
      <param name="bindingElement">对其应用设置的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqTransportElement.BindingElementType">
      <summary>获取绑定类型。</summary>
      <returns>一个表示绑定类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 的设置复制到此配置元素。</summary>
      <param name="from">要从中复制设置的元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqTransportElement.MaxPoolSize">
      <summary>获取或设置一个整数，它指定包含内部 MSMQ 消息对象的池的最大大小。</summary>
      <returns>一个整数，它指定包含内部 MSMQ 消息对象的池的最大大小。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqTransportElement.QueueTransferProtocol">
      <summary>获取或设置一个枚举值，该值指示此绑定使用的排队通信通道传输。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.QueueTransferProtocol" /> 枚举值，该值指示在队列管理器之间用于消息传递的传输。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqTransportElement.UseActiveDirectory">
      <summary>返回一个 Boolean 值，该值指示是否应该使用 Active Directory 转换队列地址。</summary>
      <returns>如果应该使用 Active Directory 转换队列地址，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MsmqTransportSecurityElement">
      <summary>
        <see cref="T:System.ServiceModel.Configuration.MsmqTransportSecurityElement" /> 类包装排队传输的传输安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MsmqTransportSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MsmqTransportSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqTransportSecurityElement.MsmqAuthenticationMode">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqAuthenticationMode" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqAuthenticationMode" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqTransportSecurityElement.MsmqEncryptionAlgorithm">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqEncryptionAlgorithm" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqEncryptionAlgorithm" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqTransportSecurityElement.MsmqProtectionLevel">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.Configuration.MsmqTransportSecurityElement" /> 类的此实例相关联的 <see cref="T:System.Net.Security.ProtectionLevel" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MsmqTransportSecurityElement.MsmqSecureHashAlgorithm">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.Configuration.MsmqTransportSecurityElement" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqSecureHashAlgorithm" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 类的此实例相关联的 <see cref="T:System.ServiceModel.MsmqSecureHashAlgorithm" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.MtomMessageEncodingElement">
      <summary>表示一个配置节，该配置节指定基于 SOAP 消息传输优化机制 (MTOM) 的消息所使用的编码和消息版本管理。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MtomMessageEncodingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.MtomMessageEncodingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.MtomMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此配置节。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MtomMessageEncodingElement.BindingElementType">
      <summary>获取此配置元素的 <see cref="T:System.Type" />。</summary>
      <returns>此配置元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.MtomMessageEncodingElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置节的内容复制到此绑定元素。</summary>
      <param name="from">要复制过来的配置节。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.MtomMessageEncodingElement.MaxBufferSize">
      <summary>获取或设置要使用的缓冲区的最大大小。</summary>
      <returns>用于缓冲消息的最大字节数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MtomMessageEncodingElement.MaxReadPoolSize">
      <summary>获取或设置一个值，该值指定无需分配新读取器便可同时读取的最大消息数。</summary>
      <returns>无需分配新的读取器便可同时读取的最大消息数。 默认值为 64。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MtomMessageEncodingElement.MaxWritePoolSize">
      <summary>获取或设置一个值，该值指定无需分配新编写器便可同时发送的最大消息数。</summary>
      <returns>无需分配新的编写器便可同时发送的最大消息数。 默认值为 16。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MtomMessageEncodingElement.MessageVersion">
      <summary>获取或设置使用此绑定发送的消息的 SOAP 版本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 值，指定使用此绑定发送的消息的 SOAP 版本。 默认值为 <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MtomMessageEncodingElement.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.MtomMessageEncodingElement.WriteEncoding">
      <summary>获取或设置要用于在绑定上发出消息的字符集编码。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" /> 值，指定要用来在绑定上发出消息的字符集编码。 默认值为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement">
      <summary>表示一个配置元素，该元素为命名管道传输指定附加连接池设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement.GroupName">
      <summary>获取或设置一个字符串，该字符串定义用于传出通道的连接池的名称。</summary>
      <returns>一个字符串，定义用于传出通道的连接池的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement.IdleTimeout">
      <summary>获取或设置连接在断开前可以空闲的最长时间。</summary>
      <returns>一个值为正的 <see cref="T:System.TimeSpan" />，指定连接在断开前可以空闲的最长时间。 默认值是 00:02:00。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement.MaxOutboundConnectionsPerEndpoint">
      <summary>获取或设置由服务启动的通往远程终结点的最大连接数。</summary>
      <returns>一个正整数，指定由服务启动的与远程终结点的最大连接数。 默认值为 10。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NamedPipeSettingsElement">
      <summary>表示已命名管设置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NamedPipeSettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NamedPipeSettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedPipeSettingsElement.ApplicationContainerSettings">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Configuration.NamedPipeSettingsElement" /> 中使用的应用程序容器设置。</summary>
      <returns>应用程序容器设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NamedPipeTransportElement">
      <summary>表示一个配置元素，该配置元素指定一个通道，该通道在被包括到自定义绑定中时使用命名管道传输消息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NamedPipeTransportElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NamedPipeTransportElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NamedPipeTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定配置元素的内容应用到此配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedPipeTransportElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedPipeTransportElement.ConnectionPoolSettings">
      <summary>获取或设置其他连接池设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.NamedPipeConnectionPoolSettingsElement" />，指定此绑定的其他连接池设置。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NamedPipeTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedPipeTransportElement.PipeSettings">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Configuration.NamedPipeTransportElement" /> 中使用的管道设置。</summary>
      <returns>使用的管道设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NamedPipeTransportSecurityElement">
      <summary>为命名管道指定传输安全。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NamedPipeTransportSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NamedPipeTransportSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedPipeTransportSecurityElement.ProtectionLevel">
      <summary>为此命名管道指定保护。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" />。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.EncryptAndSign" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NamedServiceModelExtensionCollectionElement`1">
      <summary>包含一个 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 实例集合。</summary>
      <typeparam name="TServiceModelExtensionElement">ServiceModel 扩展元素。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedServiceModelExtensionCollectionElement`1.Name">
      <summary>获取或设置此集合的名称。</summary>
      <returns>此集合的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NamedServiceModelExtensionCollectionElement`1.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetHttpBindingCollectionElement">
      <summary>表示网络 http 绑定集合元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetHttpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetHttpBindingElement">
      <summary>表示网络 HTTP 绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetHttpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetHttpBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingElement" /> 类的新实例。</summary>
      <param name="name">名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpBindingElement.MessageEncoding">
      <summary>获取或设置用于 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingElement" /> 的消息编码。</summary>
      <returns>消息编码用于。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpBindingElement.ReliableSession">
      <summary>获取为 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingElement" /> 建立的可靠会话。</summary>
      <returns>已建立的可靠会话。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpBindingElement.Security">
      <summary>获取绑定元素的安全绑定。</summary>
      <returns>用于绑定元素的安全绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpBindingElement.WebSocketSettings">
      <summary>获取或设置用于 <see cref="T:System.ServiceModel.Configuration.NetHttpBindingElement" /> 的 Web 套接设置。</summary>
      <returns>使用的网络套接字设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetHttpsBindingCollectionElement">
      <summary>表示网络 https 绑定集合元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetHttpsBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetHttpsBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetHttpsBindingElement">
      <summary>表示网络 HTTP 绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetHttpsBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetHttpsBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetHttpsBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.NetHttpsBindingElement" /> 类的新实例。</summary>
      <param name="name">名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpsBindingElement.MessageEncoding">
      <summary>获取或设置用于 <see cref="T:System.ServiceModel.Configuration.NetHttpsBindingElement" /> 的消息编码。</summary>
      <returns>消息编码用于。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpsBindingElement.ReliableSession">
      <summary>为获取<see cref="T:System.ServiceModel.Configuration.NetHttpsBindingElement" /> 建立可靠的会话。</summary>
      <returns>已建立的可靠会话。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpsBindingElement.Security">
      <summary>获取绑定元素的安全绑定。</summary>
      <returns>用于绑定元素的安全绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpsBindingElement.WebSocketSettings">
      <summary>获取或设置用于<see cref="T:System.ServiceModel.Configuration.NetHttpsBindingElement" /> 的网络套接字设置。</summary>
      <returns>使用的网络套接字设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetHttpWebSocketTransportSettingsElement">
      <summary>表示 WebSocketTransportSettings 的 NetHttpWebSocketTransportSettingsElement。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetHttpWebSocketTransportSettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetHttpWebSocketTransportSettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpWebSocketTransportSettingsElement.SubProtocol">
      <summary>获取或设置 Web 套接子协议。</summary>
      <returns>网络套接字 sub 协议。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetHttpWebSocketTransportSettingsElement.TransportUsage">
      <summary>获取或设置传输用法。</summary>
      <returns>传输用法。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetMsmqBindingCollectionElement">
      <summary>表示一个配置节，该配置节保存了一个 <see cref="T:System.ServiceModel.Configuration.NetMsmqBindingElement" /> 实例集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetMsmqBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetMsmqBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetMsmqBindingElement">
      <summary>表示适用于跨计算机通信的排队绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetMsmqBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetMsmqBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetMsmqBindingElement.#ctor(System.String)">
      <summary>使用指定配置绑定元素的设置来初始化 <see cref="T:System.ServiceModel.Configuration.NetMsmqBindingElement" /> 类的新实例。</summary>
      <param name="name">name 属性的值，该值标识其设置被用于初始化绑定的 binding 元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqBindingElement.BindingElementType">
      <summary>获取此绑定的 <see cref="T:System.Type" />。</summary>
      <returns>此绑定的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetMsmqBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置节。</summary>
      <param name="binding">要用于初始化此绑定配置节的绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqBindingElement.MaxBufferPoolSize">
      <summary>获取或设置为从通道接收消息的消息缓冲区管理器分配并供其使用的最大内存量。</summary>
      <returns>可供消息缓冲区管理器使用的最大内存量（以字节为单位）。 默认值为 524288 (0x80000) 字节。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetMsmqBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>将指定的绑定应用于配置元素。</summary>
      <param name="binding">一个要应用于配置元素的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqBindingElement.Properties">
      <summary>获取与此绑定相关联的 <see cref="T:System.Configuration.ConfigurationPropertyCollection" />。</summary>
      <returns>与此绑定关联的 <see cref="T:System.Configuration.ConfigurationPropertyCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqBindingElement.QueueTransferProtocol">
      <summary>获取或设置一个枚举值，该值指示此绑定使用的排队通信通道传输。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.QueueTransferProtocol" /> 枚举值，该值指示此绑定使用的队列管理器之间的传输。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqBindingElement.ReaderQuotas">
      <summary>获取或设置与此绑定相关联的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 对象。</summary>
      <returns>与此绑定相关联的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqBindingElement.Security">
      <summary>获取与此绑定相关联的 <see cref="T:System.ServiceModel.NetMsmqSecurity" />。</summary>
      <returns>与此绑定关联的 <see cref="T:System.ServiceModel.NetMsmqSecurity" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqBindingElement.UseActiveDirectory">
      <summary>返回一个 Boolean 值，该值指示是否应该使用 Active Directory 转换队列地址。</summary>
      <returns>如果应该使用 Active Directory 转换队列地址，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetMsmqSecurityElement">
      <summary>
        <see cref="T:System.ServiceModel.Configuration.NetMsmqSecurityElement" /> 类包装了在使用 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定时可用的 MSMQ 安全功能。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetMsmqSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetMsmqSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqSecurityElement.Message">
      <summary>获取与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.MessageSecurityOverMsmq" /> 实例。</summary>
      <returns>与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.MessageSecurityOverMsmq" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqSecurityElement.Mode">
      <summary>获取或设置与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.NetMsmqSecurityMode" /> 实例。</summary>
      <returns>与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.NetMsmqSecurityMode" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetMsmqSecurityElement.Transport">
      <summary>获取与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.Configuration.MsmqTransportSecurityElement" /> 元素。</summary>
      <returns>与 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" /> 实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetNamedPipeBindingCollectionElement">
      <summary>表示一个包含 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingElement" /> 实例集合的配置节。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetNamedPipeBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetNamedPipeBindingElement">
      <summary>表示一个配置元素，该元素定义对于计算机上跨进程通信而言安全、可靠且经过优化的绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetNamedPipeBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetNamedPipeBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.BindingElementType">
      <summary>获取此配置元素的类型。</summary>
      <returns>此配置元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>
        <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值，该值指定在将传入的请求路由到终结点 URI 时，是否包含主机名。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，表示在匹配过程中忽略主机名。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetNamedPipeBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定配置设置的内容初始化此绑定配置。</summary>
      <param name="binding">绑定配置设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.MaxBufferPoolSize">
      <summary>获取或设置默认缓冲池的最大大小（以字节为单位）。</summary>
      <returns>缓冲池的最大大小。 默认值为 524,288 字节 (512 * 1024)。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.MaxBufferSize">
      <summary>获取或设置一个值，该值指定内存中用于存储消息的缓冲区的最大大小（以字节为单位）。</summary>
      <returns>内存中用于对传入消息进行缓冲的最大字节数。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.MaxConnections">
      <summary>获取或设置一个值，该值指定服务能够分别创建和接受的最大出站和入站连接数。</summary>
      <returns>服务能够分别创建和接受的最大出站和入站连接数。 默认值为 10。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.MaxReceivedMessageSize">
      <summary>获取和设置在配置有此绑定的通道上允许接收的最大消息大小（以字节为单位）。</summary>
      <returns>此绑定所处理的最大可允许消息大小。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetNamedPipeBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the specified binding to this <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingElement" /> instance.</summary>
      <param name="binding">要应用的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.Security">
      <summary>获取用于此绑定的安全设置类型。</summary>
      <returns>指定用于此绑定的安全设置类型的 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeSecurityElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.TransactionFlow">
      <summary>获取或设置一个布尔值，该值指定绑定是否支持流动 WS-Transactions。</summary>
      <returns>如果绑定支持流动 WS-Transactions，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.TransactionProtocol">
      <summary>获取或设置用于此绑定的事务处理协议。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TransactionProtocol" />，指定用于此绑定的事务处理协议。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeBindingElement.TransferMode">
      <summary>获取或设置一个值，该值指定对消息进行缓冲处理还是流式处理，或者指定消息是请求还是响应。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.TransferMode" /> 值，该值指定对消息进行缓冲处理还是流式处理，或者指定消息是请求还是响应。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetNamedPipeSecurityElement">
      <summary>表示一个配置元素，该元素为命名管道绑定指定安全设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetNamedPipeSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetNamedPipeSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeSecurityElement.Mode">
      <summary>获取或设置应用于此绑定的安全类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.NetNamedPipeSecurityMode" />，指定应用于此绑定的安全类型。 默认值为 <see cref="F:System.ServiceModel.NetNamedPipeSecurityMode.Transport" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetNamedPipeSecurityElement.Transport">
      <summary>获取传输的安全设置。</summary>
      <returns>传输的安全设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetPeerTcpBindingCollectionElement">
      <summary>表示一个配置元素，该元素包含特定于对等通道 TCP 消息绑定的元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetPeerTcpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetPeerTcpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetPeerTcpBindingElement">
      <summary>表示一个 XML 元素，该元素为对等通道特定的 TCP 消息指定绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetPeerTcpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetPeerTcpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetPeerTcpBindingElement.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetPeerTcpBindingElement" /> 类的新实例。</summary>
      <param name="name">指定要与此绑定元素关联的名称的 <see cref="T:System.String" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.BindingElementType">
      <summary>获取绑定元素的 <see cref="T:System.Type" />。</summary>
      <returns>绑定元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetPeerTcpBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用所提供的网络绑定中的信息来初始化配置元素设置。</summary>
      <param name="binding">一个 <see cref="T:System.ServiceModel.Channels.Binding" />，包含特定的网络绑定，此配置元素应从该绑定中获取新设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.ListenIPAddress">
      <summary>获取或设置一个 IP 地址，对等节点将在该地址上侦听 TCP 消息。</summary>
      <returns>指定 IP 地址（IPv4 或 IPv6）的 <see cref="T:System.String" />，对等通道绑定将在该地址上侦听 TCP 消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.MaxBufferPoolSize">
      <summary>获取或设置缓冲池允许的最大字节大小，该缓冲池用于存储由绑定处理的消息。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，该值指定由绑定处理的缓冲池的最大大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.MaxReceivedMessageSize">
      <summary>获取和设置配置有此元素的对等 TCP 绑定所接收的消息的最大大小（以字节为单位）。</summary>
      <returns>一个 <see cref="T:System.Int32" />，指定配置了此元素的对等 TCP 绑定所接收的消息的最大大小。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetPeerTcpBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在引发配置事件时，使用所提供的网络绑定中的信息来初始化配置元素设置。</summary>
      <param name="binding">一个 <see cref="T:System.ServiceModel.Channels.Binding" />，包含特定的网络绑定，当引发配置应用程序事件时，此配置元素应从该绑定中获取新设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.Port">
      <summary>获取或设置一个网络接口端口，此绑定将在该端口上处理对等通道 TCP 消息。</summary>
      <returns>指定网络端口的 <see cref="T:System.Int32" />，此绑定将在该端口上处理对等通道 TCP 消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.Properties">
      <summary>获取此绑定元素的配置属性集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" />，包含此绑定元素的配置属性集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.ReaderQuotas">
      <summary>获取配置了此元素的绑定的读取器配额的配置元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement" />，指定配置了此元素的绑定的读取器配额的配置元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.Resolver">
      <summary>获取与此绑定配置关联的对等解析程序的配置元素。</summary>
      <returns>指定对等解析程序的配置的 <see cref="T:System.ServiceModel.Configuration.PeerResolverElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetPeerTcpBindingElement.Security">
      <summary>获取此绑定配置的安全配置元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.PeerSecurityElement" />，包含此绑定配置的安全配置元素。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetTcpBindingCollectionElement">
      <summary>表示一个包含 <see cref="T:System.ServiceModel.Configuration.NetTcpBindingElement" /> 实例集合的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetTcpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetTcpBindingElement">
      <summary>表示一个 XML 元素，该元素为对等通道特定的 TCP 消息传递指定绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetTcpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpBindingElement.#ctor(System.String)">
      <summary>使用指定配置名称初始化 <see cref="T:System.ServiceModel.Configuration.NetTcpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.BindingElementType">
      <summary>获取此配置元素的类型。</summary>
      <returns>此配置元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.HostNameComparisonMode">
      <summary>获取或设置一个值，该值指示在对 URI 进行匹配时，是否使用主机名来访问服务。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值，该值指定在对 URI 进行匹配时，是否使用主机名来访问服务。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，表示在匹配过程中忽略主机名。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定的内容来初始化此绑定配置。</summary>
      <param name="binding">一个绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.ListenBacklog">
      <summary>获取或设置一个值，该值指定侦听器上可等待接受的最大通道数。</summary>
      <returns>侦听器上可等待接受的最大通道数。 默认值为 10。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.MaxBufferPoolSize">
      <summary>获取或设置缓冲池允许的最大字节大小，该缓冲池用于存储由绑定处理的消息。</summary>
      <returns>内存中用于缓冲传入消息的空间的最大大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.MaxBufferSize">
      <summary>获取或设置一个值，该值指定内存中用于存储消息的缓冲区的最大大小（以字节为单位）。</summary>
      <returns>内存中用于存储消息的缓冲区的最大大小（以字节为单位）。 默认值为 65536。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.MaxConnections">
      <summary>获取或设置一个值，该值指定服务能够分别创建和接受的最大出站和入站连接数。</summary>
      <returns>服务能够分别创建和接受的最大出站和入站连接数。 默认值为 10。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.MaxReceivedMessageSize">
      <summary>获取或设置配置了此绑定配置的通道上可以接收的消息的最大字节大小。</summary>
      <returns>此绑定所处理的消息的最大大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the specified binding to this <see cref="T:System.ServiceModel.Configuration.NetNamedPipeBindingElement" /> instance.</summary>
      <param name="binding">要应用的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.PortSharingEnabled">
      <summary>获取或设置一个布尔值，该值指定是否为此连接启用 TCP 端口共享。</summary>
      <returns>如果为此连接启用 TCP 端口共享，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.ReaderQuotas">
      <summary>获取可由用此绑定配置的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.ReliableSession">
      <summary>获取一个配置元素，该元素指定是否在通道终结点之间建立可靠会话。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ReliableSessionElement" />，指定是否启用可靠会话。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.Security">
      <summary>获取用于此绑定的安全类型。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.Configuration.NetTcpSecurityElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.TransactionFlow">
      <summary>获取或设置一个布尔值，该值指定绑定是否支持流动 WS-Transactions。</summary>
      <returns>如果绑定支持流动 WS-Transactions，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.TransactionProtocol">
      <summary>获取或设置用于此绑定的事务处理协议。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TransactionProtocol" />，指定用于此绑定的事务处理协议。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpBindingElement.TransferMode">
      <summary>获取或设置一个值，该值指定对消息进行缓冲处理还是流式处理，或者指定消息是请求还是响应。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.TransferMode" /> 值，该值指定对消息进行缓冲处理还是流式处理，或者指定消息是请求还是响应。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetTcpContextBindingCollectionElement">
      <summary>表示一个配置节，该配置节保存了一个 <see cref="T:System.ServiceModel.Configuration.NetTcpContextBindingElement" /> 实例集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpContextBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetTcpContextBindingCollectionElement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetTcpContextBindingElement">
      <summary>表示一个与 <see cref="T:System.ServiceModel.NetTcpContextBinding" /> 绑定相对应的配置元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpContextBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetTcpContextBindingElement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpContextBindingElement.#ctor(System.String)">
      <summary>使用指定的配置名称初始化 <see cref="T:System.ServiceModel.Configuration.NetTcpContextBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">具有指定 <paramref name="name" /> 的配置元素不存在。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpContextBindingElement.BindingElementType">
      <summary>获取与配置元素 System.ServiceModel.NetTcpContextBinding 关联的标准绑定的 CLR 类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，指定与配置元素 System.ServiceModel.NetTcpContextBinding 关联的标准绑定的 CLR 类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpContextBindingElement.ClientCallbackAddress">
      <summary>获取或设置绑定元素的客户端回调地址。</summary>
      <returns>返回 <see cref="T:System.Uri" />，其中包含客户端回调地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpContextBindingElement.ContextManagementEnabled">
      <summary>获取或设置一个指定是否已启用上下文管理的值。</summary>
      <returns>如果启用上下文管理，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpContextBindingElement.ContextProtectionLevel">
      <summary>获取或设置用于传播上下文信息的 SOAP 标头的所需保护级别。 默认值为 ProtectionLevel.Sign。</summary>
      <returns>一个有效的 <see cref="T:System.Net.Security.ProtectionLevel" /> 值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpContextBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>根据指定绑定的配置来初始化此绑定配置元素。 提供的绑定对象的类型必须为 <see cref="T:System.ServiceModel.NetTcpContextBinding" />。</summary>
      <param name="binding">包含用于初始化类的内容和上下文保护级别的绑定。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpContextBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>将此配置元素的配置应用到指定的绑定实例。 提供的绑定实例的类型必须为 <see cref="T:System.ServiceModel.NetTcpContextBinding" />。</summary>
      <param name="binding">要应用的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpContextBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NetTcpSecurityElement">
      <summary>定义 netTcpBinding 绑定的安全设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NetTcpSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NetTcpSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpSecurityElement.Message">
      <summary>获取消息的安全设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.MessageSecurityOverTcpElement" />，指定消息的安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpSecurityElement.Mode">
      <summary>获取或设置所应用的安全类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.SecurityMode" />，指定所应用的安全类型。 默认值为 Transport。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.NetTcpSecurityElement.Transport">
      <summary>获取传输的安全设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.TcpTransportSecurityElement" />，指定传输的安全设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.NonDualMessageSecurityOverHttpElement">
      <summary>表示使用非双工服务协定 HTTP 发送的消息的安全配置设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.NonDualMessageSecurityOverHttpElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.NonDualMessageSecurityOverHttpElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.NonDualMessageSecurityOverHttpElement.EstablishSecurityContext">
      <summary>获取或设置一个布尔值，该值指定是否建立安全上下文。</summary>
      <returns>如果建立安全上下文，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.OneWayElement">
      <summary>表示一个启用数据包路由的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.OneWayElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.OneWayElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.OneWayElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定的绑定元素的内容应用到此配置元素。</summary>
      <param name="bindingElement">要应用的绑定配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.OneWayElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.OneWayElement.ChannelPoolSettings">
      <summary>获取通道池设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ChannelPoolSettingsElement" /> 对象，包含当前通道的通道池的属性。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.OneWayElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.OneWayElement.MaxAcceptedChannels">
      <summary>获取或设置可以接受的最大通道数。</summary>
      <returns>可以接受的最大通道数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.OneWayElement.PacketRoutable">
      <summary>获取或设置一个值，该值指示是否启用数据包路由。</summary>
      <returns>如果启用数据包路由，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PeerCredentialElement">
      <summary>表示一个配置元素，该配置元素配置对等凭据。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerCredentialElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PeerCredentialElement" /> 类的一个新的默认元素。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCredentialElement.Certificate">
      <summary>从对等凭据配置元素中获取 X509 证书的元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.X509PeerCertificateElement" />，包含与当前对等凭据配置元素相关联的 X509 证书的配置元素。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerCredentialElement.Copy(System.ServiceModel.Configuration.PeerCredentialElement)">
      <summary>从提供的对等凭据配置元素中复制配置设置。</summary>
      <param name="from">要从中复制配置设置的 <see cref="T:System.ServiceModel.Configuration.PeerCredentialElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCredentialElement.MessageSenderAuthentication">
      <summary>获取一个元素，该元素描述对等凭据配置中的关联 X509 对等证书的消息发送方身份验证属性。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement" />，描述关联 X509 对等证书的消息发送方身份验证属性。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCredentialElement.PeerAuthentication">
      <summary>获取一个元素，该元素描述对等凭据配置中的关联 X509 对等证书的身份验证属性。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement" />，描述关联 X509 对等证书的身份验证属性。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PeerCustomResolverElement">
      <summary>表示自定义对等解析程序的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerCustomResolverElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PeerCustomResolverElement" /> 类的新默认实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCustomResolverElement.Address">
      <summary>包含用于自定义对等解析程序配置 XML 的架构的 URI。</summary>
      <returns>用于自定义对等解析程序配置 XML 的架构 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCustomResolverElement.Binding">
      <summary>获取或设置一个字符串绑定的名称，该绑定用于自定义对等解析程序。</summary>
      <returns>用于自定义对等解析程序的字符串绑定的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCustomResolverElement.BindingConfiguration">
      <summary>获取或设置自定义对等解析程序的绑定配置字符串。</summary>
      <returns>自定义对等解析程序的绑定配置字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCustomResolverElement.Headers">
      <summary>获取一个配置元素，该配置元素定义一个集合，该集合包含由自定义对等解析程序处理的 SOAP 消息所使用的标头。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Configuration.AddressHeaderCollectionElement" />，它定义一个集合，该集合包含由自定义对等解析程序处理的 SOAP 消息所使用的标头。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCustomResolverElement.Identity">
      <summary>获取配置了此元素的自定义对等解析程序的标识。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Configuration.IdentityElement" />，它包含配置了此元素的自定义对等解析程序的标识。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerCustomResolverElement.ResolverType">
      <summary>获取或设置一个字符串值，该值包含自定义对等解析程序的“类型”。</summary>
      <returns>一个字符串值，该值包含自定义对等解析程序的“类型”。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PeerResolverElement">
      <summary>定义对等解析程序的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerResolverElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PeerResolverElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerResolverElement.Custom">
      <summary>如果此对等解析程序为自定义对等解析程序实现，则获取它的配置元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.PeerCustomResolverElement" />：如果此对等解析程序为自定义对等解析程序实现，则包含它的配置元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerResolverElement.Mode">
      <summary>获取和设置此配置元素所表示的对等解析程序的类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.PeerResolvers.PeerResolverMode" /> 枚举值，指定此配置元素所表示的对等解析程序的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerResolverElement.ReferralPolicy">
      <summary>获取和设置配置了此元素的对等解析程序的引用策略。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />，指定配置了此元素的对等解析程序的引用策略。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PeerSecurityElement">
      <summary>定义对等方的安全设置的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PeerSecurityElement" /> 类的新默认实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerSecurityElement.Mode">
      <summary>获取和设置配置了此元素的对等方所使用的安全类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.SecurityMode" /> 枚举值，该值指定配置了此元素的对等方所使用的安全类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerSecurityElement.Transport">
      <summary>获取配置了此元素的对等方所发送的安全消息的传输类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Configuration.PeerTransportSecurityElement" />，指定配置了此元素的对等方所发送的安全消息的传输类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PeerTransportElement">
      <summary>指定一个配置元素，该配置元素如果包括在某个自定义绑定中，则会促使某个通道在对等传输上传输消息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerTransportElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PeerTransportElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的设置应用到此配置元素。</summary>
      <param name="bindingElement">要将其设置应用到此配置元素的 <see cref="T:System.ServiceMode.Channels.BindingElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerTransportElement.BindingElementType">
      <summary>获取表示自定义绑定元素的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个表示自定义绑定元素的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素中的设置复制到此配置元素。</summary>
      <param name="from">一个 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />，其中包含要将其设置复制到此配置元素节的配置元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerTransportElement.CreateBindingElement">
      <summary>根据此配置元素中的设置创建绑定元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.BindingElement" />，它的属性复制自此配置元素中的设置。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerTransportElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容来初始化此对等传输绑定配置节。</summary>
      <param name="bindingElement">用于初始化此绑定配置实例的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerTransportElement.ListenIPAddress">
      <summary>获取和设置配置元素，该配置元素指定对等传输侦听的 IP 地址。</summary>
      <returns>一个 <see cref="T:System.Net.IPAdress" />，其中包含对等传输侦听的 IP 地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerTransportElement.MaxBufferPoolSize">
      <summary>获取和设置一个配置元素，该配置元素指定 TCP 消息缓冲池的最大大小（以字节为单位）。</summary>
      <returns>一个 <see cref="T:System.Int64" />，指定 TCP 消息缓冲池的最大大小（以字节为单位）。 默认值为 524,288 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerTransportElement.MaxReceivedMessageSize">
      <summary>获取和设置一个配置元素，该配置元素指定对等绑定接收的 TCP 消息的最大大小（以字节为单位）。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定通过此绑定创建的对等通道接收的 TCP 消息的最大大小（以字节为单位）。 默认值为 65,536 (64 KB)。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerTransportElement.Port">
      <summary>获取和设置配置元素，该配置元素为对等传输绑定指定端口。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，该值为对等传输绑定指定端口。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerTransportElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerTransportElement.Security">
      <summary>获取和设置配置元素，此配置元素指定要对此绑定创建的对等通道设置的安全性。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.PeerSecuritySettings" /> 枚举值，指示要对此绑定创建的对等通道设置的安全性。 安全性可以是特定于消息的，也可以是特定于传输的。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PeerTransportSecurityElement">
      <summary>为对等方发送的消息的安全传输定义一个配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PeerTransportSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PeerTransportSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.PeerTransportSecurityElement.CredentialType">
      <summary>获取和设置特定类型的凭据的配置，这些凭据用于验证通过对等传输发送的消息。</summary>
      <returns>包含特定类型凭据的 <see cref="T:System.ServiceModel.PeerTransportCredentialType" /> 枚举值，这些凭据用于验证通过对等传输发送的消息。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PnrpPeerResolverElement">
      <summary>为对等名称解析协议 (PNRP) 名称解析服务指定一个配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PnrpPeerResolverElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PnrpPeerResolverElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.PnrpPeerResolverElement.BindingElementType">
      <summary>获取表示自定义绑定元素的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个表示自定义绑定元素的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PnrpPeerResolverElement.CreateBindingElement">
      <summary>创建一个新的自定义绑定元素对象，其属性将从此配置元素的设置中复制。</summary>
      <returns>一个自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PolicyImporterElement">
      <summary>表示一个配置元素，该配置元素指定与绑定有关的自定义策略断言的导入。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PolicyImporterElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PolicyImporterElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PolicyImporterElement.#ctor(System.String)">
      <summary>用特定策略类型初始化 <see cref="T:System.ServiceModel.Configuration.PolicyImporterElement" /> 类的新实例。</summary>
      <param name="type">策略类型。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.PolicyImporterElement.#ctor(System.Type)">
      <summary>用特定策略类型初始化 <see cref="T:System.ServiceModel.Configuration.PolicyImporterElement" /> 类的新实例。</summary>
      <param name="type">策略类型。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PolicyImporterElement.Type">
      <summary>获取或设置此配置元素的类型。</summary>
      <returns>此配置元素的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.PolicyImporterElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.PolicyImporterElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PolicyImporterElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PolicyImporterElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.PrivacyNoticeElement">
      <summary>表示一个配置元素，该元素指定 wsFederationHttp 绑定中使用的隐私声明。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PrivacyNoticeElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.PrivacyNoticeElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PrivacyNoticeElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PrivacyNoticeElement.BindingElementType">
      <summary>获取一个 <see cref="T:System.Type" /> 对象，该对象表示此自定义绑定元素。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示此自定义绑定类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PrivacyNoticeElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.PrivacyNoticeElement.CreateBindingElement">
      <summary>根据此配置元素的设置，创建一个新的自定义绑定元素对象。</summary>
      <returns>一个自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象，该对象的属性基于此配置元素的设置。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PrivacyNoticeElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PrivacyNoticeElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PrivacyNoticeElement.Url">
      <summary>获取或设置隐私声明所在的 URI。</summary>
      <returns>隐私声明所在的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.PrivacyNoticeElement.Version">
      <summary>获取或设置此隐私声明的版本。</summary>
      <returns>一个整数，指定此隐私声明的版本。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ProtocolMappingElement">
      <summary>提供创建协议映射元素的功能。 此类为密封类。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ProtocolMappingElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.ProtocolMappingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ProtocolMappingElement.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的方案类型、绑定和绑定配置创建 <see cref="T:System.ServiceModel.Configuration.ProtocolMappingElement" /> 类的新实例。</summary>
      <param name="schemeType">通信协议方案。</param>
      <param name="binding">通信协议消息格式样式。</param>
      <param name="bindingConfiguration">协议映射元素的配置的绑定设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ProtocolMappingElement.Binding">
      <summary>获取或设置通信协议消息格式的设置。</summary>
      <returns>通信协议消息格式信息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ProtocolMappingElement.BindingConfiguration">
      <summary>获取或设置协议映射配置元素的绑定设置。</summary>
      <returns>绑定配置元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ProtocolMappingElement.Scheme">
      <summary>获取或设置通信协议类型。</summary>
      <returns>命名通信协议。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ProtocolMappingElementCollection">
      <summary>提供用于从协议映射元素集合中提取指定的通信协议映射信息的功能。 此类为密封类。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ProtocolMappingElementCollection.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.ProtocolMappingElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ProtocolMappingSection">
      <summary>定义一个协议映射集合。 此类为密封类。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ProtocolMappingSection.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.ProtocolMappingSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ProtocolMappingSection.ProtocolMappingCollection">
      <summary>获取协议映射元素的集合的名称。</summary>
      <returns>一个协议映射元素的集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ReliableSessionElement">
      <summary>表示 WS-Reliable Messaging 的配置设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ReliableSessionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ReliableSessionElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.AcknowledgementInterval">
      <summary>获取或设置在向工厂所创建的可靠通道上的消息源发送确认之前目标等待的时间间隔。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，用于指定在向消息源发送确认之前服务等待的时间间隔。 默认值为 2 秒。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ReliableSessionElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置节。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ReliableSessionElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置节的内容复制到此配置节。</summary>
      <param name="from">要复制的配置节。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.FlowControlEnabled">
      <summary>获取或设置一个值，该值指示是否激活高级流控制（一个特定于 Microsoft 的 WS-ReliableMessaging 流控制实现）。</summary>
      <returns>如果激活高级流控制（特定于 Microsoft 的 WS-ReliableMessaging 流控制实现），则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.InactivityTimeout">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" /> 值，该值指定通道出错之前，该通道允许其他通信方不发送任何消息的最长持续时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，指定通道出错之前，通道允许其他通信方不发送任何消息的最大持续时间。 默认值是 00:10:00。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.MaxPendingChannels">
      <summary>获取或设置侦听器上可等待接受的最大通道数。</summary>
      <returns>侦听器上可等待接受的最大通道数。 默认值为 128。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.MaxRetryCount">
      <summary>获取或设置可靠通道未收到消息确认时，通过在其基础通道上调用 Send 来尝试重新传输该消息的最大次数。</summary>
      <returns>可靠通道未收到消息确认时，通过在其基础通道上调用 Send 来尝试重新传输该消息的最大次数。 最小值为 1；最大值为 20；默认值为 8。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.MaxTransferWindowSize">
      <summary>获取或设置缓冲区的最大大小。</summary>
      <returns>缓冲区的最大大小。 有效值介于 1 和 4096 之间（包括这两个值）。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.Ordered">
      <summary>获取或设置一个值，该值指定是否保证消息以其发送顺序送达。</summary>
      <returns>如果保证消息以其发送顺序送达，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ReliableSessionElement.ReliableMessagingVersion">
      <summary>获取或设置配置元素所指定的 WS-ReliableMessaging 的版本。</summary>
      <returns>一个派生自 <see cref="T:System.ServiceModel.ReliableMessagingVersion" /> 的实例，表示配置元素所使用的 WS-ReliableMessaging 协议的版本。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.RemoveBehaviorElement">
      <summary>一个用于移除特定服务或终结点行为的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.RemoveBehaviorElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.RemoveBehaviorElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.RemoveBehaviorElement.BehaviorType">
      <summary>获取或设置所移除的行为的类型。</summary>
      <returns>行为类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.RemoveBehaviorElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.ServiceModelExtensionElement" /> 的内容复制到当前的 <see cref="T:System.ServiceModel.Configuration.RemoveBehaviorElement" /> 对象。</summary>
      <param name="from">提供内容的服务模型扩展元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.RemoveBehaviorElement.Name">
      <summary>获取或设置移除行为的配置元素的名称。</summary>
      <returns>元素名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.RsaElement">
      <summary>表示 RSA 标识的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.RsaElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.RsaElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.RsaElement.Value">
      <summary>获取或设置此标识加密的值。</summary>
      <returns>此标识加密的值。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.SecureConversationServiceElement">
      <summary>表示一个配置元素，它指定安全对话服务的设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecureConversationServiceElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.SecureConversationServiceElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecureConversationServiceElement.Copy(System.ServiceModel.Configuration.SecureConversationServiceElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null 或为空。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecureConversationServiceElement.SecurityStateEncoderType">
      <summary>获取或设置要使用的 <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> 的类型。</summary>
      <returns>要使用的 <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> 的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.SecurityElement">
      <summary>表示一个配置元素，它指定自定义绑定的安全选项。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.SecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此 <see cref="T:System.ServiceModel.Configuration.SecurityElement" /> 实例。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElement.SecureConversationBootstrap">
      <summary>获取一个配置元素，该元素指定用于启动安全对话服务的默认值。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.SecurityElementBase" /> 对象，指定用于启动安全对话服务的默认值。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.SecurityElementBase">
      <summary>表示一个基类，其成员为用于配置安全设置的元素所共有。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.AddBindingTemplate(System.Collections.Generic.Dictionary{System.ServiceModel.Configuration.AuthenticationMode,System.ServiceModel.Channels.SecurityBindingElement},System.ServiceModel.Configuration.AuthenticationMode)">
      <summary>将指定的配置模板应用到此实例。</summary>
      <param name="bindingTemplates">由一种身份验证模式和一个绑定元素组成的对。</param>
      <param name="mode">用于消息交换的身份验证模式。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.AddBindingTemplates(System.Collections.Generic.Dictionary{System.ServiceModel.Configuration.AuthenticationMode,System.ServiceModel.Channels.SecurityBindingElement})">
      <summary>将指定的配置模板应用到此实例。</summary>
      <param name="bindingTemplates">由一种身份验证模式和一个绑定元素组成的对。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.AllowInsecureTransport">
      <summary>获取或设置一个值，该值指示是否允许不安全的传输。</summary>
      <returns>如果允许不安全的传输，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.AllowSerializedSigningTokenOnReply">
      <summary>获取或设置一个布尔值，该值指定是否可以在答复时使用序列化令牌。</summary>
      <returns>如果可以在答复时使用序列化令牌，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.AuthenticationMode">
      <summary>获取或设置用于消息交换的身份验证设置。</summary>
      <returns>用于消息交换的身份验证设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.CanRenewSecurityContextToken">
      <summary>获取或设置一个值，该值指示是否可以续订安全上下文令牌。</summary>
      <returns>如果可以续订安全上下文，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.CreateBindingElement">
      <summary>根据此实例的设置创建一个自定义绑定元素对象。</summary>
      <returns>一个自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.CreateBindingElement(System.Boolean)">
      <summary>根据此实例的设置创建一个自定义绑定元素对象。</summary>
      <returns>一个自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象。</returns>
      <param name="createTemplateOnly">仅创建模板，则为 true，否则为 false。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.DefaultAlgorithmSuite">
      <summary>获取或设置此绑定的默认算法组。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />，指定此绑定的默认算法组。 默认值为 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.EnableUnsecuredResponse">
      <summary>获取或设置一个值，该值指示是否允许不安全的响应。</summary>
      <returns>如果允许不安全的响应，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.IncludeTimestamp">
      <summary>获取或设置一个布尔值，该值指定是否每条消息都包含时间戳。</summary>
      <returns>如果消息包含时间戳，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.InitializeNestedTokenParameterSettings(System.ServiceModel.Security.Tokens.SecurityTokenParameters,System.Boolean)">
      <summary>将指定的安全令牌设置应用到此实例。</summary>
      <param name="sp">指定的安全令牌参数。</param>
      <param name="initializeNestedBindings">如果指定是否使用 <paramref name="sp" /> 所指定的值来更新所有嵌套绑定，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.IssuedTokenParameters">
      <summary>获取指定当前颁发令牌的配置元素。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.IssuedTokenParametersElement" />，指定当前颁发令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.KeyEntropyMode">
      <summary>获取或设置用于创建密钥的熵的来源。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Security.SecurityKeyEntropyMode" /> 值，该值指定用于创建密钥的熵的来源。 默认值为 <see cref="F:System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.LocalClientSettings">
      <summary>获取此绑定的本地客户端安全设置。</summary>
      <returns>此绑定的本地客户端安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.LocalServiceSettings">
      <summary>获取此绑定的本地服务安全设置。</summary>
      <returns>此绑定的本地服务安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.MessageProtectionOrder">
      <summary>获取或设置此绑定的消息加密和签名的顺序。</summary>
      <returns>一个指定如何保护消息的 <see cref="T:System.ServiceModel.Security.MessageProtectionOrder" />。 默认值为 <see cref="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncrypt" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.MessageSecurityVersion">
      <summary>获取或设置用于消息安全的版本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.MessageSecurityVersion" />，指定用于消息安全的版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.ProtectTokens">
      <summary>获取或设置指示安全元素基是否保护令牌的值。</summary>
      <returns>如果安全元素基本保护标记，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.RequireDerivedKeys">
      <summary>获取或设置一个布尔值，该值指定是否需要派生密钥。</summary>
      <returns>如果需要派生密钥，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.RequireSecurityContextCancellation">
      <summary>获取或设置一个布尔值，该值指定当不再需要安全上下文时，是否应将其取消和终止。</summary>
      <returns>如果当不再需要安全上下文时应将其取消和终止，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.RequireSignatureConfirmation">
      <summary>获取或设置一个布尔值，该值指定是否必须确认消息签名。</summary>
      <returns>如果必须确认消息签名，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.SecurityElementBase.SecurityHeaderLayout">
      <summary>获取或设置此绑定的安全标头中的元素顺序。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.SecurityHeaderLayout" />，指定此绑定的安全标头中的元素顺序。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>当在派生类中实现后，将此配置元素的内容写入配置文件。</summary>
      <returns>如果任何数据被实际序列化，则为 true；否则为 false。</returns>
      <param name="writer">写入配置文件的 XML 编写器。</param>
      <param name="serializeCollectionKey">为 true，则只序列化集合的键属性；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
      <summary>将此配置元素的外部标记写入配置文件。</summary>
      <returns>如果序列化成功，则为 true；否则为 false。</returns>
      <param name="writer">用于写入配置文件的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="elementName">要写入的 <see cref="T:System.Configuration.ConfigurationElement" /> 的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.SecurityElementBase.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>请修改此配置元素以移除所有不应该保存的值。</summary>
      <param name="sourceElement">当前级别上的一个包含属性合并视图的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <param name="parentElement">父级 <see cref="T:System.Configuration.ConfigurationElement" /> 对象或 null（如果该级别为顶级）。</param>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 对象，确定要包括哪些属性值。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceActivationElement">
      <summary>管理与服务应用程序的激活相关的配置元素内容。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceActivationElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.ServiceActivationElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceActivationElement.#ctor(System.String)">
      <summary>配置 <see cref="T:System.ServiceModel.Configuration.ServiceActivationElement" /> 类的新实例，该类包含一个相对于基 URL 的服务激活文件目录位置。</summary>
      <param name="relativeAddress">要求从基 URL 引用的文件目录位置。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceActivationElement.#ctor(System.String,System.String)">
      <summary>配置 <see cref="T:System.ServiceModel.Configuration.ServiceActivationElement" /> 类的新实例，该类包含要激活的指定服务及其相对地址。</summary>
      <param name="relativeAddress">要求从基地址引用的 URL 位置。</param>
      <param name="service">已激活的服务应用程序。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceActivationElement.#ctor(System.String,System.String,System.String)">
      <summary>使用要激活的指定服务、它的相对地址以及生成服务激活元素的工厂的系统路径名称来配置 <see cref="T:System.ServiceModel.Configuration.ServiceActivationElement" /> 类的新实例。</summary>
      <param name="relativeAddress">要求从基地址引用的 URL 位置。</param>
      <param name="service">要激活的服务应用程序。</param>
      <param name="factory">生成服务激活元素的工厂的 CLR 类型名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceActivationElement.Factory">
      <summary>获取或设置一个配置字符串，其中包含生成服务激活元素的工厂的 CLR 类型名称。</summary>
      <returns>配置字符串，其中包含工厂的 CLR 类型名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceActivationElement.RelativeAddress">
      <summary>获取或设置服务激活文件的相对地址。</summary>
      <returns>服务激活文件的相对地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceActivationElement.Service">
      <summary>获取或设置服务应用程序的名称。</summary>
      <returns>服务应用程序的名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceActivationElementCollection">
      <summary>处理一个配置元素的集合，这些配置元素将激活服务并可在配置文件的层次结构中进行合并。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceActivationElementCollection.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.ServiceActivationElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceAuthenticationElement">
      <summary>提供一个工作流配置元素，该元素在服务级别建立传输、消息或发起方的有效性。 这是一个密封类。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceAuthenticationElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.ServiceAuthenticationElement" /> 类的新实例</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthenticationElement.AuthenticationSchemes">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Configuration.ServiceAuthenticationElement" /> 中使用的身份验证方案。</summary>
      <returns>所使用的身份验证方案。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthenticationElement.BehaviorType">
      <summary>获取当前 <see cref="T:System.ServiceModel.Configuration.ServiceAuthenticationElement" /> 中的身份验证行为扩展的类型。</summary>
      <returns>一个类型对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthenticationElement.ServiceAuthenticationManagerType">
      <summary>获取或设置当前 <see cref="T:System.ServiceModel.Configuration.ServiceAuthenticationElement" /> 的身份验证策略的类型。</summary>
      <returns>一个包含身份验策略名称的字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceAuthorizationElement">
      <summary>表示一个配置元素，该元素定义服务级别上的安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceAuthorizationElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceAuthorizationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.AuthorizationPolicies">
      <summary>获取一个授权策略类型集合。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.AuthorizationPolicyTypeElementCollection" />，包含一个授权策略类型集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.BehaviorType">
      <summary>获取此行为配置元素的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceAuthorizationElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.ImpersonateCallerForAllOperations">
      <summary>获取或设置一个布尔值，该值指定是否服务中的所有操作都模拟调用方。</summary>
      <returns>如果服务中的所有操作都模拟调用方，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.ImpersonateOnSerializingReply">
      <summary>获取或设置指示 <see cref="T:System.ServiceModel.Configuration.ServiceAuthorizationElement" /> 是否模拟序列化回复的值。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Configuration.ServiceAuthorizationElement" /> 在序列化回复时进行模拟，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.PrincipalPermissionMode">
      <summary>获取或设置用于在服务器上执行操作的主体。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Description.PrincipalPermissionMode" /> 值，指定用于在服务器上执行操作的主体。 默认值为 <see cref="F:System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.RoleProviderName">
      <summary>获取或设置为 Windows Communication Foundation (WCF) 应用程序提供角色信息的角色提供程序的名称。</summary>
      <returns>角色提供程序的名称。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceAuthorizationElement.ServiceAuthorizationManagerType">
      <summary>获取或设置所使用的服务授权管理器的类型。</summary>
      <returns>一个字符串，该字符串指定服务授权管理器的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceBehaviorElement">
      <summary>表示一个配置元素，该配置元素包含应用到计算机上所有 Windows Communication Foundation (WCF) 服务的服务行为的列表。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceBehaviorElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceBehaviorElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceBehaviorElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.ServiceBehaviorElement" /> 类的新实例。</summary>
      <param name="name">行为元素的唯一名称。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceBehaviorElement.Add(System.ServiceModel.Configuration.BehaviorExtensionElement)">
      <summary>将一个新的行为元素添加到此节。</summary>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The type specified by <paramref name="element" /> is invalid.</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceBehaviorElement.CanAdd(System.ServiceModel.Configuration.BehaviorExtensionElement)">
      <summary>将一个新的行为元素添加到此节，并返回一个指示操作是否成功的值。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The type specified by <paramref name="element" /> is invalid.</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceBehaviorElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
      <summary>读取配置文件中的 XML。</summary>
      <param name="reader">从配置文件中读取数据的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="serializeCollectionKey">为 true，则只序列化集合的键属性；否则为 false。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceBehaviorElementCollection">
      <summary>包含 <see cref="T:System.ServiceModel.Configuration.ServiceBehaviorElement" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceBehaviorElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceBehaviorElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceCredentialsElement">
      <summary>表示一个配置元素，该元素指定要用于对服务进行身份验证的凭据以及与客户端凭据验证相关的设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceCredentialsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceCredentialsElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceCredentialsElement.ApplyConfiguration(System.ServiceModel.Description.ServiceCredentials)">
      <summary>将指定配置元素的内容应用于此配置元素。</summary>
      <param name="behavior">要应用的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.BehaviorType">
      <summary>获取此行为配置元素的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.ClientCertificate">
      <summary>获取一个客户端证书，当可在带外使用客户端证书时，将使用该证书。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement" />，指定一个客户端证书，当可在带外使用客户端证书时，将使用该证书。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceCredentialsElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceCredentialsElement.CreateBehavior">
      <summary>根据此配置元素的设置创建自定义行为。</summary>
      <returns>一个基于此配置元素的设置的自定义行为。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.IdentityConfiguration">
      <summary>获取或设置配置在 <see cref="T:System.ServiceModel.Configuration.ServiceCredentialsElement" /> 中使用的标识配置。</summary>
      <returns>使用的标识配置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.IssuedTokenAuthentication">
      <summary>获取此服务的当前颁发令牌。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.IssuedTokenServiceElement" />，指定此服务的当前颁发令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.Peer">
      <summary>获取对等节点的当前凭据。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.PeerCredentialElement" />，指定对等节点的当前凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.SecureConversationAuthentication">
      <summary>获取安全对话的当前凭据。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.SecureConversationServiceElement" />，指定安全对话的当前凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.ServiceCertificate">
      <summary>获取客户端发起的 X.509 证书。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement" />，指定客户端发起的 X.509 证书。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.Type">
      <summary>获取或设置此配置的类型。</summary>
      <returns>此配置的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.UseIdentityConfiguration">
      <summary>获取或设置指示服务凭据元素是否使用标识配置的值。</summary>
      <returns>如果服务凭据元素使用标识配置，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.UserNameAuthentication">
      <summary>获取用户名和密码验证的设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.UserNameServiceElement" />，指定用户名和密码验证的设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceCredentialsElement.WindowsAuthentication">
      <summary>获取 Windows 凭据验证的设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.WindowsServiceElement" />，指定 Windows 凭据验证的设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceDebugElement">
      <summary>表示一个配置元素，该元素指定 Windows Communication Foundation (WCF) 服务的调试和帮助信息功能。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceDebugElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceDebugElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.BehaviorType">
      <summary>获取此行为元素的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceDebugElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpHelpPageBinding">
      <summary>获取或设置一个字符串值，指定利用 HTTP 访问服务帮助页时使用绑定。</summary>
      <returns>指定利用 HTTP 访问服务帮助页时使用绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpHelpPageBindingConfiguration">
      <summary>获取或设置一个指向 XML 节的字符串，该 XML 节定义 <see cref="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpHelpPageBinding" /> 中指定的绑定的附加配置信息。</summary>
      <returns>一个 XML 节定义 <see cref="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpHelpPageBinding" /> 中指定的绑定的附加配置信息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpHelpPageEnabled">
      <summary>获取或设置一个值，该值指示 Windows Communication Foundation (WCF) 是否在由 <see cref="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpHelpPageUrl" /> 属性指定的地址发布 HTML 帮助页。</summary>
      <returns>如果 WCF 发布 HTML 帮助页，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpHelpPageUrl">
      <summary>获取或设置发布 HTML 帮助文件的位置。</summary>
      <returns>在使用 HTML 浏览器查看终结点时，用户所见自定义 HTML 帮助文件的基于 HTTP 的相对或绝对 URL。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpsHelpPageBinding">
      <summary>获取或设置一个字符串值，指定利用 HTTPS 访问服务帮助页时使用绑定。</summary>
      <returns>指定利用 HTTPS 访问服务帮助页时使用绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpsHelpPageBindingConfiguration">
      <summary>获取或设置一个指向 XML 节的字符串，该 XML 节定义 <see cref="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpsHelpPageBinding" /> 中指定的绑定的附加配置信息。</summary>
      <returns>一个 XML 节定义 <see cref="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpsHelpPageBinding" /> 中指定的绑定的附加配置信息。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpsHelpPageEnabled">
      <summary>获取或设置一个值，该值指定是否在由 <see cref="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpsHelpPageUrl" /> 属性控制的地址处通过 HTTPS 返回 Windows Communication Foundation (WCF)。</summary>
      <returns>如果将 HTML 帮助文件返回到发出 HTTPS/GET 请求的客户端（例如，从 HTML 浏览器），则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.HttpsHelpPageUrl">
      <summary>获取或设置发布 HTML 帮助文件以便使用 HTTPS 进行帮助的位置。</summary>
      <returns>在使用 HTML 浏览器查看终结点时，用户所见自定义 HTML 帮助文件的基于 HTTPS 的相对或绝对 URL。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceDebugElement.IncludeExceptionDetailInFaults">
      <summary>获取或设置一个值，该值指定在返回客户端以供调试的 SOAP 错误详细信息中是否包含托管异常信息。</summary>
      <returns>如果 Windows Communication Foundation (WCF) 在 SOAP 错误中返回托管异常信息以供客户端调试，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceElement">
      <summary>表示一个 XML 元素，该元素包含 Windows Communication Foundation (WCF) 服务的设置以及公开该服务的终结点。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceElement.#ctor(System.String)">
      <summary>使用要实例化的服务的类型来初始化 <see cref="T:System.ServiceModel.Configuration.ServiceElement" /> 类的新实例。</summary>
      <param name="serviceName">要实例化的服务的类型。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceElement.BehaviorConfiguration">
      <summary>获取或设置一个字符串，其中包含要用来实例化服务的行为的行为名。</summary>
      <returns>要用来实例化服务的行为的行为名。 定义服务时，该行为名必须在作用域内。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceElement.Endpoints">
      <summary>获取此服务公开的终结点的集合。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElementCollection" />，包含此服务公开的一个或多个终结点。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceElement.Host">
      <summary>获取一个指定此服务实例的主机的配置元素。</summary>
      <returns>一个指定此服务实例的主机的 <see cref="T:System.ServiceModel.Configuration.HostElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceElement.Name">
      <summary>获取或设置此服务的唯一名称。</summary>
      <returns>此服务的唯一名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.ServiceElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceEndpointElement">
      <summary>表示一个配置元素，该配置元素为用于公开服务的服务终结点的绑定、协定和地址属性提供设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceEndpointElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceEndpointElement.#ctor(System.Uri,System.String)">
      <summary>使用指定的终结点地址和协定类型初始化 <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElement" /> 类的新实例。</summary>
      <param name="address">一个包含终结点地址的 URI。</param>
      <param name="contractType">此终结点公开的协定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.Address">
      <summary>获取或设置包含终结点地址的 URI。</summary>
      <returns>一个包含终结点地址的 URI。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.BehaviorConfiguration">
      <summary>获取或设置一个字符串，其中包含要用于终结点的行为的名称。</summary>
      <returns>要用于终结点的行为的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.Binding">
      <summary>获取或设置一个字符串，该字符串指定要使用的绑定的类型。</summary>
      <returns>要使用的绑定的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.BindingConfiguration">
      <summary>获取或设置一个字符串，该字符串包含实例化终结点时所使用的绑定的绑定名称。</summary>
      <returns>要在实例化终结点时使用的绑定的绑定名称。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.BindingName">
      <summary>获取或设置一个字符串，该字符串定义绑定的限定名称，用于通过 WSDL 进行的定义导出。</summary>
      <returns>绑定的限定名称，用于通过 WSDL 进行的定义导出。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.BindingNamespace">
      <summary>获取或设置一个字符串，该字符串定义绑定的命名空间的限定名称，用于通过 WSDL 进行的定义导出。</summary>
      <returns>绑定的命名空间的限定名称，用于通过 WSDL 进行的定义导出。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.Contract">
      <summary>获取或设置一个字符串，该字符串指定终结点公开哪个协定。</summary>
      <returns>此终结点公开的协定。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.EndpointConfiguration">
      <summary>获取或设置由 <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.Kind" /> 属性设置的标准终结点的名称，此名称引用此标准终结点的其他配置信息。 必须在 <see cref="T:System.ServiceModel.Configuration.StandardEndpointsSection" /> 中定义相同的名称。</summary>
      <returns>由 <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.Kind" /> 设置的标准终点的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.Headers">
      <summary>获取一个地址标头集合。</summary>
      <returns>一个地址标头集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.Identity">
      <summary>获取一个配置元素，该配置元素指定与某终结点交换消息的其他终结点对该终结点的身份验证。</summary>
      <returns>与某个终结点交换消息的其他终结点可以使用该标识对该终结点进行身份验证。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.IsSystemEndpoint">
      <summary>获取或设置一个值，该值指示此服务终结点是否为基础结构终结点。</summary>
      <returns>如果此服务终结点是基础结构终结点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.Kind">
      <summary>获取或设置应用的标准终结点的类型。 此类型必须在 &lt;extensions&gt; 节或 machine.config 中进行注册。 如果未指定任何值，则创建常规服务终结点。</summary>
      <returns>应用的标准终结点的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.ListenUri">
      <summary>获取或设置服务终结点侦听的 URI。</summary>
      <returns>服务终结点侦听的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.ListenUriMode">
      <summary>获取或设置一个值，该值指定传输如何处理供服务侦听的 <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.ListenUri" />。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Description.ListenUriMode" /> 值，该值指定传输如何处理供服务侦听的 <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.ListenUri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceEndpointElement.Name">
      <summary>获取或设置此配置元素的名称。</summary>
      <returns>此配置元素的名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceEndpointElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceEndpointElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection">
      <summary>表示一个配置节，该配置节定义服务宿主环境为特定传输实例化的类型。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection.AspNetCompatibilityEnabled">
      <summary>获取或设置一个布尔值，该值指定是否已为当前应用程序启用了 ASP.NET 兼容模式。</summary>
      <returns>如果已为当前应用程序启用 ASP.NET 兼容模式，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection.BaseAddressPrefixFilters">
      <summary>获取一个配置元素集合，这些元素指定服务主机所使用的基址的前缀筛选器。</summary>
      <returns>一个配置元素集合，这些元素指定服务主机所使用的基址的前缀筛选器。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection.CloseIdleServicesAtLowMemory">
      <summary>获取或设置指示 <see cref="T:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection" /> 是否在内存低时关闭空闲服务的值。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection" /> 因内存不足而关闭空闲服务，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection.MinFreeMemoryPercentageToActivateService">
      <summary>获取或设置一个整数，它指定在激活 Windows Communication Foundation (WCF) 服务之前，系统应该具有的最小可用内存量。</summary>
      <returns>一个整数，指定在可以激活 WCF 服务之前，系统应该具有的最小可用内存量。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection.MultipleSiteBindingsEnabled">
      <summary>获取或设置一个值，该值指定是否对每个站点启用多个 IIS 绑定。</summary>
      <returns>如果对每个站点启用多个 IIS 绑定，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection.ServiceActivations">
      <summary>获取一个配置元素的集合，这些配置元素将激活服务并可在配置文件的层次结构中进行合并。</summary>
      <returns>一个配置元素的集合，这些配置元素将激活服务并可在配置文件的层次结构中进行合并。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceHostingEnvironmentSection.TransportConfigurationTypes">
      <summary>获取实现特定传输的类型的集合。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.TransportConfigurationTypeElementCollection" />，包含实现特定传输的所有类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceMetadataEndpointCollectionElement">
      <summary>表示服务配置文件中包含 <see cref="T:System.ServiceModel.Description.ServiceMetadataEndpoint" /> 对象的集合元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataEndpointCollectionElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.ServiceMetadataEndpointCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceMetadataEndpointElement">
      <summary>通过将 <see cref="T:System.ServiceModel.Description.ServiceMetadataEndpoint" /> 添加到服务配置元素中，可在服务器环境中准备好元数据并用于后续的分发和部署。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataEndpointElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.ServiceMetadataEndpointElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataEndpointElement.CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription)">
      <summary>使用指定的协定说明创建新的服务终结点。</summary>
      <returns>服务终结点。</returns>
      <param name="contractDescription">服务应用程序发布的有关位置和绑定信息的字母数字说明，以便客户端应用程序可以访问它。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataEndpointElement.EndpointType">
      <summary>获取当前 <see cref="T:System.ServiceModel.Description.ServiceMetadataEndpoint" /> 的类型。</summary>
      <returns>元数据服务终结点类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>未实现。</summary>
      <param name="endpoint">未实现。</param>
      <param name="serviceEndpointElement">未实现。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>未实现。</summary>
      <param name="endpoint">未实现。</param>
      <param name="serviceEndpointElement">未实现。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>初始化并验证指定通道终结点元素的格式，并将其配置为包括元数据交换内容。</summary>
      <param name="channelEndpointElement">元数据交换内容配置设置将应用到的通道终结点。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>初始化并验证指定服务终结点元素的格式，并将其配置为包括元数据交换内容。</summary>
      <param name="serviceEndpointElement">元数据交换内容配置设置将应用到的服务终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceMetadataPublishingElement">
      <summary>表示控制服务元数据和相关信息发布的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceMetadataPublishingElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.BehaviorType">
      <summary>获取此行为配置元素的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，其值为 <see cref="T:System.ServiceModel.Description.ServiceMetadataBehavior" /> 类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.ExternalMetadataLocation">
      <summary>获取或设置一个包含服务元数据位置的字符串。</summary>
      <returns>一个指定 WSDL 文件位置的 URI，为了响应 WSDL 和 MEX 请求，会将此 URI 而不是自动生成的 WSDL 返回给用户。 默认值为 null URI 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpGetBinding">
      <summary>一个字符串值，指定用于在 HTTP GET 方案中进行元数据检索的绑定名称。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpGetBindingConfiguration">
      <summary>获取或设置一个指向 XML 节的字符串，该 XML 节定义 <see cref="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpGetBinding" /> 中指定的绑定的附加配置信息。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpGetEnabled">
      <summary>获取或设置一个值，该值指示是否发布服务元数据以便使用 HTTP/GET 请求进行检索。</summary>
      <returns>如果发布服务元数据以使用 HTTP/Get 请求进行检索，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpGetUrl">
      <summary>获取或设置一个 URI，它指定发布元数据以使用 HTTP/Get 请求进行检索的地址。</summary>
      <returns>一个 URI，它指定发布元数据的地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpsGetBinding">
      <summary>一个字符串值，指定用于在 HTTP GET 方案中进行元数据检索的绑定名称。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpsGetBindingConfiguration">
      <summary>获取或设置一个指向 XML 节的字符串，该 XML 节定义 <see cref="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement..HttpsGetBinding" /> 中指定的绑定的附加配置信息。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpsGetEnabled">
      <summary>获取或设置一个值，该值指示是否发布服务元数据以便使用 HTTPS/Get 请求进行检索。</summary>
      <returns>如果发布服务元数据以使用 HTTP/Get 请求进行检索，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.HttpsGetUrl">
      <summary>获取或设置一个 URI，它指定发布元数据以使用 HTTPS/Get 请求进行检索的地址。</summary>
      <returns>一个 URI，指定发布元数据的地址以便使用 HTTPS/Get 请求进行检索。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceMetadataPublishingElement.PolicyVersion">
      <summary>获取或设置一个值，该值指定所使用的 WS-Policy 规范的版本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.PolicyVersion" /> 的有效值，该值指定所使用的 WS-Policy 规范的版本。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceModelConfigurationElement">
      <summary>表示服务模型配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceModelConfigurationElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue``1(System.String,``0)">
      <summary>如果值不是默认值，为配置元素设置属性值。</summary>
      <param name="propertyName">属性的名称。</param>
      <param name="value">待设置的属性值 。</param>
      <typeparam name="T">属性值。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1">
      <summary>表示在 <see cref="N:System.ServiceModel.Configuration" /> 命名空间内使用的 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的抽象基类。</summary>
      <typeparam name="ConfigurationElementType">此配置元素的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.Add(`0)">
      <summary>将指定的配置元素添加到此集合。</summary>
      <param name="element">要添加的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null 或为空。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>将指定的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象添加到此集合。</summary>
      <param name="element">要添加的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null 或为空。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件包含的某个现有元素与 <paramref name="element" /> 相同。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.Clear">
      <summary>从此集合中移除所有配置元素。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.CollectionType">
      <summary>获取配置集合的类型。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationElementCollectionType" />，指定配置集合的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.ContainsKey(System.Object)">
      <summary>返回一个布尔值，该值指示此集合是否包含具有指定键的配置元素。</summary>
      <returns>如果集合包含具有指定键的配置元素，则为 true；否则为 false。</returns>
      <param name="key">要在集合中搜索的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null 或为空。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.CopyTo(`0[],System.Int32)">
      <summary>从 <see cref="T:System.Array" /> 中的指定索引位置开始，将此集合中存储的配置元素复制到 <see cref="T:System.Array" /> 对象。</summary>
      <param name="array">复制配置元素的目标 <see cref="T:System.Array" />。</param>
      <param name="start">
        <paramref name="array" /> 中从零开始的相对索引，从此位置开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> 包含无效值。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.CreateNewElement">
      <summary>创建一个 <paramref name="ConfigurationElementType" /> 类型的新 <see cref="T:System.Configuration.ConfigurationElement" /> 实例。</summary>
      <returns>类型 <paramref name="ConfigurationElementType" /> 的一个新的 <see cref="T:System.Configuration.ConfigurationElement" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.ElementName">
      <summary>获取用于在配置文件中标识此元素集合的名称。</summary>
      <returns>用于标识配置文件中的此元素集合的名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.IndexOf(`0)">
      <summary>返回配置元素在此集合中的第一个匹配项的从零开始的索引。</summary>
      <returns>如果在集合中找到，则为 <paramref name="element" /> 的索引；否则为 -1。</returns>
      <param name="element">要在集合中查找的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.Item(System.Int32)">
      <summary>获取或设置具有指定索引的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的属性、特性或子元素。</summary>
      <returns>集合中位于指定索引处的项。</returns>
      <param name="index">要访问的元素的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.Item(System.Object)">
      <summary>获取或设置具有指定键的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的属性、特性或子元素。</summary>
      <returns>集合中位于指定指定键的项。</returns>
      <param name="key">要访问的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">未找到 <paramref name="key" />。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.Remove(`0)">
      <summary>从集合中移除特定配置元素的第一个匹配项。</summary>
      <param name="element">要从集合中移除的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。 －和－ 配置文件是只读的。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.RemoveAt(System.Int32)">
      <summary>移除此集合中指定索引处的配置元素。</summary>
      <param name="index">要移除的配置元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 为 null。 －和－ 配置文件是只读的。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelConfigurationElementCollection`1.RemoveAt(System.Object)">
      <summary>移除此集合中指定键处的配置元素。</summary>
      <param name="key">要移除配置元素的指定键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。 －和－ 配置文件是只读的。</exception>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection`1">
      <summary>
        <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的一个抽象基类，该基类查找与 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" /> 类似的合并语义，该语义允许存在重复项，但在同一配置范围（例如同一个配置文件）中找到重复项时，将引发异常。</summary>
      <typeparam name="TConfigurationElement">一个配置元素。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection`1.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>将 <see cref="T:System.Configuration.ConfigurationElement" /> 添加到此集合中。</summary>
      <param name="element">要相加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelEnhancedConfigurationElementCollection`1.ThrowOnDuplicate">
      <summary>获取一个布尔值，该值指示尝试向此集合添加重复的 <see cref="T:System.Configuration.ConfigurationElement" /> 是否会导致引发异常。</summary>
      <returns>如果尝试向此集合添加重复的 <see cref="T:System.Configuration.ConfigurationElement" /> 会导致引发异常，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1">
      <summary>
        <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 对象集合的抽象基类。</summary>
      <typeparam name="TServiceModelExtensionElement">ServiceModel 扩展元素。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Add(`0)">
      <summary>将指定元素添加到此配置节。</summary>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> 已存在于集合中。 - 或 - 不允许使用 <paramref name="element" /> 指定的元素类型。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.CanAdd(`0)">
      <summary>将一个新的行为元素添加到此节，并返回一个指示操作是否成功的值。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="element">一个要添加的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Clear">
      <summary>删除此集合中的所有元素。 不能继承此方法。</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Contains(`0)">
      <summary>返回一个值，该值指示该集合是否包含特定元素。 不能继承此方法。</summary>
      <returns>如果集合包含指定的元素，则为 true；否则为 false。</returns>
      <param name="element">要查找的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.ContainsKey(System.String)">
      <summary>确定该集合是否包含具有指定名称的元素。</summary>
      <returns>如果该集合包含指定名称的元素，则为 true；否则为 false。</returns>
      <param name="elementName">要搜索的元素的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.ContainsKey(System.Type)">
      <summary>确定该集合是否包含具有指定类型的元素。</summary>
      <returns>如果该集合包含指定类型的元素，则为 true；否则为 false。</returns>
      <param name="elementType">要搜索的元素的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个集合复制到兼容的一维数组。 不能继承此方法。</summary>
      <param name="elements">作为从集合中复制的元素的目标的一维数组。 该数组必须具有从零开始的索引</param>
      <param name="start">
        <paramref name="elements" /> 数组中从零开始的索引，将从该索引处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> 无效。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Count">
      <summary>获取此集合中的项数。</summary>
      <returns>此集合中项的数量。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
      <summary>读取配置文件中的 XML。</summary>
      <param name="reader">在配置文件中进行读取操作的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="serializeCollectionKey">为 true，则只序列化集合的键属性；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.GetEnumerator">
      <summary>返回可遍历集合的 <see cref="T:System.Collections.IEnumerator" />。 不能继承此方法。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.IsModified">
      <summary>指示此配置元素自上次被保存或加载后，直到在派生类中被实现时，是否已经更改。</summary>
      <returns>如果元素已修改，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Item(System.Int32)">
      <summary>获取集合中指定索引处的项。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />，表示位于集合内指定索引处的项。</returns>
      <param name="index">要检索的项在集合中的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Item(System.Type)">
      <summary>获取集合中指定类型的项。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />，表示位于集合内指定索引处的项。</returns>
      <param name="extensionType">要在集合中检索的项的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extensionType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="extensionType" /> 无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>获取一个值，该值指示反序列化过程中是否遇到未知元素。</summary>
      <returns>如果反序列化过程中遇到未知元素，则为 true；否则为 false。</returns>
      <param name="elementName">未知子元素的名称。</param>
      <param name="reader">用于反序列化的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Remove(`0)">
      <summary>从集合中移除指定的元素。 不能继承此方法。</summary>
      <returns>如果成功找到并移除该元素，则为 true；否则为 false。 如果在集合中找不到该元素，此方法将返回 false。</returns>
      <param name="element">要从集合中移除的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Reset(System.Configuration.ConfigurationElement)">
      <summary>在派生类中重写时，会将此集合重置为其未修改时的状态。</summary>
      <param name="parentElement">当前元素的父 <see cref="T:System.Configuration.ConfigurationElement" /> 对象；如果当前元素为顶层，则为 null。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.ResetModified">
      <summary>在派生的类中重写时，将 <see cref="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.IsModified" /> 属性的值重置为 false。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.SetIsModified">
      <summary>为此集合设置 <see cref="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.IsModified" /> 属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.SetReadOnly">
      <summary>为此集合和所有子元素设置内部 IsReadOnly 属性。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示此 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可遍历集合的 <see cref="T:System.Collections.IEnumerator" />。 不能继承此方法。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionCollectionElement`1.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>反转从配置层次结构的不同级别合并配置信息的效果。</summary>
      <param name="sourceElement">当前级别上的一个包含属性合并视图的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <param name="parentElement">当前元素的父 <see cref="T:System.Configuration.ConfigurationElement" /> 对象；如果当前元素为顶层，则为 null。</param>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 枚举值，该值可确定要包含哪些属性值。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceModelExtensionElement">
      <summary>包含一个异类子元素动态集合的配置元素的抽象基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelExtensionElement.ConfigurationElementName">
      <summary>获取此配置元素的名称。</summary>
      <returns>此配置元素的唯一名称。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置扩展集合不存在。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionElement.IsModified">
      <summary>获取一个值，该值指定此配置元素是否已修改。</summary>
      <returns>如果此配置元素已修改，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionElement.Reset(System.Configuration.ConfigurationElement)">
      <summary>重置此配置元素对象的内部状态（包括锁定和属性集合）。</summary>
      <param name="parentElement">此配置元素的父节点。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelExtensionElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>将此配置元素的内容写入配置文件。</summary>
      <returns>如果任何数据被实际序列化，则为 true；否则为 false。</returns>
      <param name="writer">用于写入配置文件的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="serializeCollectionKey">为 true，则只序列化集合的键属性；否则为 false。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceModelSectionGroup">
      <summary>表示的 Windows Communication Foundation (WCF) 的主配置节。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceModelSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.Behaviors">
      <summary>获取包含行为元素子项的配置节。</summary>
      <returns>包含行为元素子项的配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.Bindings">
      <summary>获取包含所有绑定的配置节。</summary>
      <returns>包含所有绑定的配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.Client">
      <summary>获取一个配置节，该配置节包含客户端用来连接到服务的终结点的列表。</summary>
      <returns>一个配置节，该配置节包含客户端用来连接到服务的终结点的列表。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.ComContracts">
      <summary>获取一个配置节，该配置节定义 COM+ 互操作性中所用服务协定的命名空间与协定名称。</summary>
      <returns>一个配置节，该配置节定义 COM+ 互操作性中所用服务协定的命名空间与协定名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.CommonBehaviors">
      <summary>获取一个配置节，该配置节包含一个行为列表，其中所含的行为在 behaviors 节中的行为应用之前应用到计算机上的所有 WCF 服务。</summary>
      <returns>一个配置节，该配置节包含一个行为列表，其中所含的行为在 behaviors 节中的行为应用之前应用到计算机上的所有 WCF 服务。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.Diagnostic">
      <summary>获取 WCF 的诊断功能的配置节。</summary>
      <returns>WCF 的诊断功能的配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.Extensions">
      <summary>获取定义所有扩展的配置节。</summary>
      <returns>一个配置节，定义所有扩展。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceModelSectionGroup.GetSectionGroup(System.Configuration.Configuration)">
      <summary>从指定的配置文件中获取 system.ServiceModel 配置节组。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ServiceModelSectionGroup" />，表示配置中的 system.ServiceModel 设置。</returns>
      <param name="config">表示配置文件的 <see cref="T:System.Configuration.Configuration" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="config" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.ProtocolMapping">
      <summary>获取一个定义通信协议的终结点配置节。</summary>
      <returns>一个定义通信协议的终结点配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.ServiceHostingEnvironment">
      <summary>获取一个配置节，该配置节定义服务宿主环境要为特定传输实例化哪个类型。</summary>
      <returns>一个配置节，该配置节定义服务宿主环境要为特定传输实例化哪个类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.Services">
      <summary>获取定义服务集合的配置节。</summary>
      <returns>定义服务集合的配置节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceModelSectionGroup.StandardEndpoints">
      <summary>获取标准终结点的配置节。</summary>
      <returns>标准终结点节元素对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServicePrincipalNameElement">
      <summary>表示一个配置元素，该元素指定客户端用来唯一标识一个服务实例的主体名称。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServicePrincipalNameElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServicePrincipalNameElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServicePrincipalNameElement.Value">
      <summary>获取或设置由此配置元素包装的服务实体名称。</summary>
      <returns>由此配置元素包装的服务实体名称。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceSecurityAuditElement">
      <summary>表示一个配置元素，该元素定义行为的与审核相关的配置设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceSecurityAuditElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceSecurityAuditElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceSecurityAuditElement.AuditLogLocation">
      <summary>获取或设置审核日志的位置。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.AuditLogLocation" /> 值，该值指定审核日志的位置。 默认值为 <see cref="F:System.ServiceModel.AuditLogLocation.Default" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceSecurityAuditElement.BehaviorType">
      <summary>获取此行为配置元素的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceSecurityAuditElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此 <see cref="T:System.ServiceModel.Configuration.ServiceSecurityAuditElement" /> 对象。</summary>
      <param name="from">一个表示要复制的配置元素的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceSecurityAuditElement.MessageAuthenticationAuditLevel">
      <summary>获取或设置用于记录审核事件的消息身份验证级别的类型。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.AuditLevel" /> 值，指定用于记录审核事件的消息身份验证级别的类型。 默认值为 <see cref="F:System.ServiceModel.AuditLevel.None" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceSecurityAuditElement.ServiceAuthorizationAuditLevel">
      <summary>获取或设置审核日志中记录的授权事件的类型。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.AuditLevel" /> 值，指定审核日志中记录的授权事件的类型。 默认值为 <see cref="F:System.ServiceModel.AuditLevel.None" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceSecurityAuditElement.SuppressAuditFailure">
      <summary>获取或设置一个布尔值，该值指定用于取消对审核日志的写入错误的行为。</summary>
      <returns>如果除 <see cref="T:System.OutOfMemoryException" />、<see cref="T:System.StackOverflowException" />、<see cref="T:System.Threading.ThreadAbortException" /> 和 <see cref="T:System.ArgumentException" /> 以外的由于试图写入审核事件而引发的异常由系统进行处理且不传播到应用程序，则为 true；如果由于试图写入审核事件而引发的所有异常都向上传递给应用程序，则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServicesSection">
      <summary>表示包含服务的配置节。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServicesSection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServicesSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServicesSection.Services">
      <summary>获取此节中配置的所有服务。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ServiceElementCollection" />，包含此节中配置的所有服务。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceThrottlingElement">
      <summary>表示一个配置元素，该配置元素指定 Windows Communication Foundation (WCF) 的遏制机制。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceThrottlingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceThrottlingElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceThrottlingElement.BehaviorType">
      <summary>获取此行为配置元素的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceThrottlingElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceThrottlingElement.MaxConcurrentCalls">
      <summary>获取或设置一个值，该值指定对单个服务实例进行并发调用的最大数量。</summary>
      <returns>对单个服务实例进行的最大并发调用数。 默认值为 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceThrottlingElement.MaxConcurrentInstances">
      <summary>获取或设置一个值，该值指定并发服务实例的最大数量。</summary>
      <returns>并发服务实例的最大数量。 默认值为 26。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceThrottlingElement.MaxConcurrentSessions">
      <summary>获取或设置一个值，该值指定通往单个服务的并发连接的最大数量。</summary>
      <returns>通往单个服务的并发连接的最大数量。 默认值为 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ServiceTimeoutsElement">
      <summary>表示一个指定服务超时值的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceTimeoutsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.ServiceTimeoutsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceTimeoutsElement.BehaviorType">
      <summary>获取此行为元素的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ServiceTimeoutsElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ServiceTimeoutsElement.TransactionTimeout">
      <summary>获取或设置事务必须在此期间完成的时间段。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 对象，表示一个时间段，事务必须在此期间完成，否则会自动中止。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.SslStreamSecurityElement">
      <summary>表示一个配置元素，该元素为 SSL 流绑定指定安全设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.SslStreamSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.SslStreamSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.SslStreamSecurityElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.SslStreamSecurityElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.SslStreamSecurityElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.SslStreamSecurityElement.RequireClientCertificate">
      <summary>获取或设置一个布尔值，该值指定此绑定是否需要客户端证书。</summary>
      <returns>如果此绑定需要客户端证书，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardBindingCollectionElement`2">
      <summary>提供配置节的基类，这些基类指定 Windows Communication Foundation (WCF) 提供的预定义绑定。</summary>
      <typeparam name="TStandardBinding">一个标准绑定元素。</typeparam>
      <typeparam name="TBindingConfiguration">一个绑定配置元素。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingCollectionElement`2.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.StandardBindingCollectionElement`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingCollectionElement`2.Bindings">
      <summary>获取此配置节中定义的所有标准绑定。</summary>
      <returns>此配置节中定义的所有标准绑定的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingCollectionElement`2.BindingType">
      <summary>获取此绑定的类型。</summary>
      <returns>此绑定的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingCollectionElement`2.ConfiguredBindings">
      <summary>获取所配置的绑定对象的集合。</summary>
      <returns>所配置的绑定对象的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingCollectionElement`2.ContainsKey(System.String)">
      <summary>确定使用指定名称的集合中是否存在绑定。</summary>
      <returns>如果集合包含具有指定 <paramref name="name" /> 的绑定，则为 true；否则为 false。</returns>
      <param name="name">要查找的绑定的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingCollectionElement`2.GetDefault">
      <summary>获取所使用的默认绑定。</summary>
      <returns>一个表示默认绑定的 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingCollectionElement`2.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingCollectionElement`2.TryAdd(System.String,System.ServiceModel.Channels.Binding,System.Configuration.Configuration)">
      <summary>将指定的绑定添加到集合。</summary>
      <returns>如果绑定可以添加到此集合，则为 true；否则为 false。</returns>
      <param name="name">要添加的绑定的名称。</param>
      <param name="binding">一个表示要添加的绑定的 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象。</param>
      <param name="config">此绑定的配置设置。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardBindingElement">
      <summary>提供配置元素的基类，这些元素可指定 Windows Communication Foundation (WCF) 所提供的预定义绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.StandardBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.StandardBindingElement" /> 类的新实例。</summary>
      <param name="name">用于唯一标识此配置元素的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingElement.ApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>将指定绑定的内容应用于此绑定配置元素。</summary>
      <param name="binding">一个绑定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">此绑定元素的类型与 <paramref name="binding" /> 指定的类型不同。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingElement.BindingElementType">
      <summary>在派生类中重写时，获取表示自定义绑定元素的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个表示自定义绑定类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingElement.CloseTimeout">
      <summary>获取或设置为完成关闭操作而提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成关闭操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定的内容初始化此绑定配置元素。</summary>
      <param name="binding">一个绑定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">此绑定元素的类型与 <paramref name="binding" /> 指定的类型不同。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingElement.Name">
      <summary>获取或设置绑定的名称。</summary>
      <returns>绑定的名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将指定绑定元素的内容应用于此绑定配置元素时调用。</summary>
      <param name="binding">一个绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingElement.OpenTimeout">
      <summary>获取或设置为完成打开操作而提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成打开操作的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingElement.ReceiveTimeout">
      <summary>获取或设置为完成接收操作提供的时间间隔。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，指定在超时前必须完成接收操作的时间。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingElement.Reset(System.Configuration.ConfigurationElement)">
      <summary>重置此配置元素对象的内部状态（包括锁定和属性集合）。</summary>
      <param name="parentElement">此配置元素的父节点。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingElement.SendTimeout">
      <summary>获取或设置为完成发送操作提供的时间间隔。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成发送操作的时间。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardBindingElementCollection`1">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.StandardBindingElement" /> 对象的集合。 此类不能被继承。</summary>
      <typeparam name="TBindingConfiguration">一个绑定配置元素。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingElementCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.StandardBindingElementCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement">
      <summary>表示标准绑定中定义的 WS-ReliableMessaging 的可选配置设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement.ApplyConfiguration(System.ServiceModel.OptionalReliableSession)">
      <summary>将指定绑定元素的内容应用到此配置节。</summary>
      <param name="optionalReliableSession">要应用的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="optionalReliableSession" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement.Enabled">
      <summary>获取或设置一个布尔值，该值指定是否为此绑定启用可靠会话。</summary>
      <returns>如果为此绑定启用可靠会话，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement.InitializeFrom(System.ServiceModel.OptionalReliableSession)">
      <summary>使用指定配置元素的内容初始化此配置元素的设置。</summary>
      <param name="optionalReliableSession">要复制其设置的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="optionalReliableSession" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardBindingReliableSessionElement">
      <summary>表示标准绑定中定义的 WS-ReliableMessaging 的配置设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingReliableSessionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.StandardBindingReliableSessionElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingReliableSessionElement.ApplyConfiguration(System.ServiceModel.ReliableSession)">
      <summary>将指定绑定元素的内容应用到此配置节。</summary>
      <param name="reliableSession">要应用的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reliableSession" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingReliableSessionElement.InactivityTimeout">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" /> 值，该值指定通道出错之前，该通道允许其他通信方不发送任何消息的最长持续时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，指定通道出错之前，通道允许其他通信方不发送任何消息的最大持续时间。 默认值是 00:10:00。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardBindingReliableSessionElement.InitializeFrom(System.ServiceModel.ReliableSession)">
      <summary>使用指定节中的值初始化此配置元素。</summary>
      <param name="reliableSession">要通过其进行初始化的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reliableSession" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingReliableSessionElement.Ordered">
      <summary>获取或设置一个布尔值，该值指定是否保证消息以其发送顺序到达。</summary>
      <returns>如果保证消息以其发送顺序送达，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardBindingReliableSessionElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2">
      <summary>处理配置文件中的标准终结点元素的默认集合。</summary>
      <typeparam name="TStandardEndpoint">标准终结点的类型。</typeparam>
      <typeparam name="TEndpointConfiguration">终结点配置的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2.ConfiguredEndpoints">
      <summary>获取当前标准终结点元素的集合的只读版本。</summary>
      <returns>终结点元素的只读集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2.ContainsKey(System.String)">
      <summary>确定标准终结点元素的集合中是否已存在具有指定名称的元素。</summary>
      <returns>如果元素的终结点集合包含指定元素名称的匹配项，则为 true；否则为 false。</returns>
      <param name="name">终结点元素的名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2.Endpoints">
      <summary>获取标准终结点元素的默认集合。</summary>
      <returns>终结点元素的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2.EndpointType">
      <summary>获取集合中的标准终结点的类型。</summary>
      <returns>服务终结点类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2.GetDefaultStandardEndpointElement">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.StandardEndpointElement" /> 类的本地实例。</summary>
      <returns>一个标准终结点元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2.Properties">
      <summary>存储 Endpoints 属性的属性。</summary>
      <returns>配置属性的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointCollectionElement`2.TryAdd(System.String,System.ServiceModel.Description.ServiceEndpoint,System.Configuration.Configuration)">
      <summary>尝试将终结点元素添加到标准终结点元素的集合。</summary>
      <returns>如果已将该元素添加到集合中，则为 true；否则为 false。</returns>
      <param name="name">要添加到集合中的元素的标识符。</param>
      <param name="endpoint">要添加的终结点元素。</param>
      <param name="config">配置文件 – 未实现。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardEndpointElement">
      <summary>管理服务应用程序配置文件的标准终结点元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.StandardEndpointElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.ApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>将特定服务终结点的内容应用到当前的通道终结点元素。</summary>
      <param name="endpoint">一个终结点，它使客户端能够查找服务并与之进行通信。</param>
      <param name="channelEndpointElement">一个终结点元素，它定义在客户端与服务之间来回传递的消息的物理传输。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.ApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>将指定服务终结点的内容应用到当前的服务终结点元素。</summary>
      <param name="endpoint">一个终结点，它使客户端能够查找服务并与之进行通信。</param>
      <param name="serviceEndpointElement">一个终结点元素，它定义客户端如何查找服务并与之进行通信。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription)">
      <summary>在派生类中实现时，利用指定的协定说明中包含的消息信息创建服务终结点。</summary>
      <returns>服务终结点。</returns>
      <param name="contractDescription">有关从终结点发送的消息中包含哪些内容的信息。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointElement.EndpointType">
      <summary>未实现。</summary>
      <returns>
        <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.InitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>初始化并验证服务应用程序配置文件中的指定通道终结点的格式。</summary>
      <param name="channelEndpointElement">一个终结点元素，它定义在客户端与服务之间来回传递的消息的物理传输。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.InitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>初始化并验证服务应用程序配置文件中的指定服务终结点的格式。</summary>
      <param name="serviceEndpointElement">一个终结点元素，它使客户端能够查找服务并与之进行通信。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.InitializeFrom(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>确保指定的服务终结点不为 null，并且其类型与当前的终结点类型匹配。</summary>
      <param name="endpoint">一个终结点，它使客户端能够查找服务并与之进行通信。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointElement.Name">
      <summary>获取或设置来自该元素的配置字符串列表的当前终结点元素的名称。</summary>
      <returns>终结点元素的名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>当从派生类中调用时，从配置文件加载服务说明信息，并将其应用于正在构造的运行时。</summary>
      <param name="endpoint">一个终结点，它使客户端能够查找服务并与之进行通信。</param>
      <param name="channelEndpointElement">一个终结点元素，它定义在客户端与服务之间来回传递的消息的物理传输。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>当从派生类中调用时，从配置文件加载服务说明信息，并将其应用于正在构造的运行时。</summary>
      <param name="endpoint">一个终结点，它使客户端能够查找服务并与之进行通信。</param>
      <param name="serviceEndpointElement">服务应用程序的服务终结点元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>当从派生类中调用时，初始化并验证服务应用程序配置文件中的指定服务终结点的格式。</summary>
      <param name="channelEndpointElement">一个终结点元素，它定义在客户端与服务之间来回传递的消息的物理传输。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>当从派生类中调用时，初始化并验证服务应用程序配置文件中的指定服务终结点的格式。</summary>
      <param name="serviceEndpointElement">一个服务终结点元素，它使客户端能够查找服务并与之进行通信。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointElement.Properties">
      <summary>获取当前终结点元素的属性集合。</summary>
      <returns>配置元素属性的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElement.Reset(System.Configuration.ConfigurationElement)">
      <summary>重置 <see cref="T:System.Configuration.Element.ConfigurationElement" /> 对象的内部状态，包括锁和属性集合。</summary>
      <param name="parentElement">具有子元素的配置元素的顶级。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardEndpointElementCollection`1">
      <summary>表示标准终结点元素的泛型集合，这些标准终结点元素属于标准类型或可从中指定标准类型的类型。</summary>
      <typeparam name="TEndpointConfiguration">集合中的终结点元素的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointElementCollection`1.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.StandardEndpointElementCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.StandardEndpointsSection">
      <summary>表示标准终结点的配置节。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointsSection.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Configuration.StandardEndpointsSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointsSection.EndpointCollections">
      <summary>返回标准终结点的集合。</summary>
      <returns>一个泛型列表。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.StandardEndpointsSection.GetSection(System.Configuration.Configuration)">
      <summary>从指定的配置文件中返回标准终结点节。</summary>
      <returns>标准终结点配置节。</returns>
      <param name="config">一个对象，其中包含配置设置的一个或多个 XML 节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="config" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointsSection.Item(System.String)">
      <summary>返回包含指定终结点的终结点元素集合。</summary>
      <returns>终结点集合元素。</returns>
      <param name="endpoint">终结点名称。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.StandardEndpointsSection.MexEndpoint">
      <summary>返回包含元数据交换终结点的集合元素。</summary>
      <returns>元数据交换集合元素。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.SynchronousReceiveElement">
      <summary>表示一个配置元素，该元素用于指定服务或客户端应用程序中用来接收消息的运行时行为。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.SynchronousReceiveElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.SynchronousReceiveElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.SynchronousReceiveElement.BehaviorType">
      <summary>获取此行为配置元素的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement">
      <summary>表示一个配置元素，该元素为 TCP 传输指定附加连接池设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement.GroupName">
      <summary>获取或设置一个字符串，该字符串定义用于传出通道的连接池的名称。</summary>
      <returns>用于传出通道的连接池的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement.IdleTimeout">
      <summary>获取或设置连接在断开前可以空闲的最长时间。</summary>
      <returns>一个值为正的 <see cref="T:System.TimeSpan" />，指定连接在断开前可以空闲的最长时间。 默认值是 00:02:00。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement.LeaseTimeout">
      <summary>获取或设置关闭活动连接之前所要经过的持续时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 结构，指示关闭 TCP 连接之前所要经过的持续时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpConnectionPoolSettingsElement.MaxOutboundConnectionsPerEndpoint">
      <summary>获取或设置由服务启动的通往远程终结点的最大连接数。</summary>
      <returns>由服务启动的通往远程终结点的最大连接数。 默认值为 10。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.TcpTransportElement">
      <summary>指定一个配置元素，该配置元素如果包括在某个自定义绑定中，则会促使某个通道在 TCP 传输上传输消息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TcpTransportElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TcpTransportElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TcpTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的设置应用到此配置元素。</summary>
      <param name="bindingElement">要将其设置应用到此配置元素的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportElement.BindingElementType">
      <summary>获取表示自定义绑定元素的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个表示自定义绑定元素的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportElement.ConnectionPoolSettings">
      <summary>获取或设置指定其他连接设置的配置元素。</summary>
      <returns>一个配置元素，指定其他连接设置。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.TcpTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素中的设置复制到此配置元素。</summary>
      <param name="from">要将其设置复制到此配置元素节的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportElement.ExtendedProtectionPolicy">
      <summary>获取或设置一个 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 实例，其中包含用于会话的扩展保护的配置设置。</summary>
      <returns>用于会话的扩展保护的配置设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportElement.ListenBacklog">
      <summary>获取或设置侦听器上可等待接受的最大通道数。</summary>
      <returns>侦听器上可等待接受的最大通道数。 默认值为 10。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportElement.PortSharingEnabled">
      <summary>获取或设置一个值，该值指定是否为此连接启用 TCP 端口共享。</summary>
      <returns>如果启用了 TCP 端口共享，则为 true；如果每个绑定都使用自己的独占端口，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportElement.TeredoEnabled">
      <summary>获取或设置一个值，该值指定是否启用 Teredo（一项用于对防火墙后的客户端进行寻址的技术）。</summary>
      <returns>如果启用了 Teredo，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.TcpTransportSecurityElement">
      <summary>一个 XML 元素，该元素定义 TcpTransport 绑定的安全设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TcpTransportSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TcpTransportSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportSecurityElement.ClientCredentialType">
      <summary>获取或设置用于身份验证的客户端凭据的类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TcpClientCredentialType" />，它指定用于身份验证的客户端凭据的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportSecurityElement.ExtendedProtectionPolicy">
      <summary>获取一个 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 实例，其中包含用于会话的扩展保护的配置设置。</summary>
      <returns>返回 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TcpTransportSecurityElement.ProtectionLevel">
      <summary>获取或设置一个值，该值在命名管道级别定义消息级别安全。</summary>
      <returns>一个 <see cref="P:System.ServiceModel.TcpTransportSecurity.ProtectionLevel" /> 值，该值在命名管道级别定义消息级别安全。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.TextMessageEncodingElement">
      <summary>表示一个配置元素，该配置元素指定用于基于文本的 XML 消息的字符编码和消息版本管理。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TextMessageEncodingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TextMessageEncodingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TextMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置节。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.TextMessageEncodingElement.BindingElementType">
      <summary>获取此配置元素的 <see cref="T:System.Type" />。</summary>
      <returns>此配置元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.TextMessageEncodingElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置节的内容复制到此元素。</summary>
      <param name="from">要复制的配置节。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.TextMessageEncodingElement.MaxReadPoolSize">
      <summary>获取或设置一个值，该值指定无需分配新读取器便可同时读取的最大消息数。</summary>
      <returns>无需分配新的读取器便可同时读取的最大消息数。 默认值为 64。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TextMessageEncodingElement.MaxWritePoolSize">
      <summary>获取或设置一个值，该值指定无需分配新编写器便可同时发送的最大消息数。</summary>
      <returns>无需分配新的编写器便可同时发送的最大消息数。 默认值为 16。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TextMessageEncodingElement.MessageVersion">
      <summary>获取或设置用于对使用此绑定发送的文本消息进行格式设置的 SOAP 和 WS-Addressing 版本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 值，指定使用此绑定发送的消息的 SOAP 版本。 默认值为 <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TextMessageEncodingElement.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TextMessageEncodingElement.WriteEncoding">
      <summary>获取或设置要用于在绑定上发出消息的字符集编码。</summary>
      <returns>一个有效的 <see cref="T:System.Text.Encoding" /> 值，该值指定要用于在绑定上发出消息的字符集编码。 默认值为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.TransactedBatchingElement">
      <summary>表示指定接收操作是否支持事务批处理的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransactedBatchingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TransactedBatchingElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransactedBatchingElement.BehaviorType">
      <summary>获取此行为配置元素的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransactedBatchingElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransactedBatchingElement.MaxBatchSize">
      <summary>获取或设置可成批归入一个事务中的最大接收操作数。</summary>
      <returns>可成批归入一个事务中的最大接收操作数。 默认值为 0。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.TransactionFlowElement">
      <summary>表示配置元素，该元素指定对绑定的事务流支持。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransactionFlowElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TransactionFlowElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransactionFlowElement.AllowWildcardAction">
      <summary>获取或设置一个值，该值指示是否允许通配符操作。</summary>
      <returns>如果批准通配符操作，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransactionFlowElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将此绑定配置节的内容应用到指定事务流绑定元素。</summary>
      <param name="bindingElement">
        <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" /> 类型的绑定元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindingElement" /> 并不属于类型 <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransactionFlowElement.BindingElementType">
      <summary>获取表示此配置元素类型的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>此配置元素的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransactionFlowElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置节的内容复制到此配置节。</summary>
      <param name="from">要复制的配置节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransactionFlowElement.CreateBindingElement">
      <summary>返回一个 <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" /> 对象，该对象已启用事务流，并使用与当前元素相同的 <see cref="T:System.ServiceModel.TransactionProtocol" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" /> 对象，该对象已启用事务流，并使用与当前元素相同的 <see cref="T:System.ServiceModel.TransactionProtocol" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransactionFlowElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置节。</summary>
      <param name="bindingElement">
        <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" /> 类型的绑定元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindingElement" /> 并不属于类型 <see cref="T:System.ServiceModel.Channels.TransactionFlowBindingElement" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransactionFlowElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransactionFlowElement.TransactionProtocol">
      <summary>获取或设置要使用的事务处理协议。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.TransactionProtocol" />，指定用于事务流的事务处理协议。 默认值为 <see cref="P:System.ServiceModel.TransactionProtocol.OleTransactions" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.TransportConfigurationTypeElement">
      <summary>一个 XML 元素，标识特定传输的类型。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportConfigurationTypeElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TransportConfigurationTypeElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportConfigurationTypeElement.#ctor(System.String)">
      <summary>使用唯一的名称初始化 <see cref="T:System.ServiceModel.Configuration.TransportConfigurationTypeElement" /> 类的新实例。</summary>
      <param name="name">一个唯一标识传输类型的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportConfigurationTypeElement.#ctor(System.String,System.String)">
      <summary>使用一个唯一的名称和实现特定传输的类型初始化 <see cref="T:System.ServiceModel.Configuration.TransportConfigurationTypeElement" /> 类的新实例。</summary>
      <param name="name">一个唯一标识传输类型的字符串。</param>
      <param name="transportConfigurationTypeName">实现特定传输的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="transportConfigurationTypeName" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransportConfigurationTypeElement.Name">
      <summary>获取或设置一个唯一标识传输类型的名称。</summary>
      <returns>唯一标识传输类型的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransportConfigurationTypeElement.TransportConfigurationType">
      <summary>获取或设置一个包含实现特定传输的类型的字符串。</summary>
      <returns>实现特定传输的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.TransportConfigurationTypeElementCollection">
      <summary>
        <see cref="T:System.ServiceModel.Configuration.TransportConfigurationTypeElement" /> 元素的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportConfigurationTypeElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TransportConfigurationTypeElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.TransportElement">
      <summary>提供一个表示传输绑定配置元素的基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.TransportElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 的设置应用到此配置元素。</summary>
      <param name="bindingElement">要应用到此配置元素的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素中的设置复制到此配置元素。</summary>
      <param name="from">要将其设置复制到此配置元素的配置元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportElement.CreateBindingElement">
      <summary>创建一个新的自定义绑定元素对象，其属性将从此配置元素的设置中复制。</summary>
      <returns>一个自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportElement.CreateDefaultBindingElement">
      <summary>返回一个具有默认值的自定义绑定元素对象。</summary>
      <returns>一个具有默认值的自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.TransportElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransportElement.ManualAddressing">
      <summary>获取或设置一个布尔值，该值指定用户是否控制消息寻址。</summary>
      <returns>如果用户可以逐个为每条消息寻址，则为 true；如果默认的 WCF 寻址机制自动为所有消息创建地址，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransportElement.MaxBufferPoolSize">
      <summary>获取或设置默认缓冲池的最大大小（以字节为单位）。</summary>
      <returns>缓冲池的最大大小。 默认值为 524,288 字节 (512 * 1024)。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransportElement.MaxReceivedMessageSize">
      <summary>获取或设置能接收的最大可允许消息大小（以字节为单位）。</summary>
      <returns>允许接收的最大消息大小。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.TransportElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.UseManagedPresentationElement">
      <summary>表示用于管理表示形式的绑定元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.UseManagedPresentationElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.UseManagedPresentationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.UseManagedPresentationElement.BindingElementType">
      <summary>获取表示绑定元素的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个表示绑定元素的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.UseManagedPresentationElement.CreateBindingElement">
      <summary>创建一个新的自定义绑定元素对象，其属性将从此配置元素的设置中复制。</summary>
      <returns>一个自定义 <see cref="T:System.ServiceModel.Channels.BindingElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.UseRequestHeadersForMetadataAddressElement">
      <summary>启用从请求消息头中检索元数据地址信息以便在配置元素中使用。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.UseRequestHeadersForMetadataAddressElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.UseRequestHeadersForMetadataAddressElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.UseRequestHeadersForMetadataAddressElement.BehaviorType">
      <summary>获取当前 <see cref="T:System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior" /> 的类型。</summary>
      <returns>行为的类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.UseRequestHeadersForMetadataAddressElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将请求头信息从指定的 <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> 复制到当前的 <see cref="T:System.ServiceModel.Configuration.UseRequestHeadersForMetadataAddressElement" />。</summary>
      <param name="from">要从中检索请求头信息的服务模型扩展元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.UseRequestHeadersForMetadataAddressElement.DefaultPorts">
      <summary>获取 <see cref="T:System.ServiceModel.Configuration.DefaultPortElement" /> 对象的集合。</summary>
      <returns>一个元素集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.UserNameServiceElement">
      <summary>表示一个配置元素，该元素指定基于用户名和密码的服务凭据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.UserNameServiceElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.UserNameServiceElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.UserNameServiceElement.CachedLogonTokenLifetime">
      <summary>获取或设置缓存令牌的最大时间长度。</summary>
      <returns>一个 <see cref="T:System.Timespan" />.，表示缓存令牌的最大时间长度。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.UserNameServiceElement.CacheLogonTokens">
      <summary>获取或设置一个值，该值指示是否缓存登录令牌。</summary>
      <returns>如果缓存登录令牌，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.UserNameServiceElement.Copy(System.ServiceModel.Configuration.UserNameServiceElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.UserNameServiceElement.CustomUserNamePasswordValidatorType">
      <summary>获取或设置所使用的自定义用户名密码验证程序的类型。</summary>
      <returns>所使用的自定义用户名密码验证程序的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.UserNameServiceElement.IncludeWindowsGroups">
      <summary>获取或设置一个值，该值指示 Windows 组是否包含在安全上下文中。</summary>
      <returns>如果 Windows 组包含在安全上下文中，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.UserNameServiceElement.MaxCachedLogonTokens">
      <summary>获取或设置要缓存的登录令牌的最大数目。</summary>
      <returns>要缓存的登录令牌的最大数目。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.UserNameServiceElement.MembershipProviderName">
      <summary>获取或设置一个字符串，该字符串指定能够提供密码验证逻辑的成员提供程序的名称。</summary>
      <returns>能够提供密码验证逻辑的成员提供程序的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.UserNameServiceElement.UserNamePasswordValidationMode">
      <summary>获取或设置对用户名密码进行验证的方式。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.Security.UserNamePasswordValidationMode" /> 值。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.UserPrincipalNameElement">
      <summary>表示指定用户主要名称的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.UserPrincipalNameElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.UserPrincipalNameElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.UserPrincipalNameElement.Value">
      <summary>获取或设置为此配置元素设置的值。</summary>
      <returns>一个指定用户帐户名（有时称为用户登录名）和用于标识用户帐户所在域的域名的字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WebSocketTransportSettingsElement">
      <summary>表示 WebSocketTransportSettings 的 WebSocketTransportSettingsElement。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WebSocketTransportSettingsElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.ApplyConfiguration(System.ServiceModel.Channels.WebSocketTransportSettings)">
      <summary>将新配置应用于此元素。</summary>
      <param name="settings">网络套接字传输设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.CreateNotificationOnConnection">
      <summary>获取或设置一个值，该值指示是否在连接上创建通知。</summary>
      <returns>如果创建通知，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.DisablePayloadMasking">
      <summary>获取或设置一个值，该值指示是否禁用负载屏蔽。</summary>
      <returns>true 是禁用有效负载蒙板，否则，为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.InitializeFrom(System.ServiceModel.Channels.WebSocketTransportSettings)">
      <summary>从指定的设置初始化网络套接字。</summary>
      <param name="settings">网络套接字传输设置。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.KeepAliveInterval">
      <summary>获取或设置保持活动间隔。</summary>
      <returns>保持活动状态的间隔。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.MaxPendingConnections">
      <summary>获取或设置此设置的最大挂起连接数。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.Properties">
      <summary>获取配置属性的集合。</summary>
      <returns>配置属性。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.SubProtocol">
      <summary>获取或设置 Web 套接子协议。</summary>
      <returns>网络套接字 sub 协议。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WebSocketTransportSettingsElement.TransportUsage">
      <summary>获取或设置 Web 套接传输使用情况。</summary>
      <returns>网络套接字传输用法。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WindowsClientElement">
      <summary>表示一个配置元素，该元素指定用于表示客户端的 Windows 凭据的设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WindowsClientElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WindowsClientElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.WindowsClientElement.AllowedImpersonationLevel">
      <summary>获取或设置允许的模拟级别。</summary>
      <returns>一个有效的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指定允许的模拟级别。 默认值为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WindowsClientElement.AllowNtlm">
      <summary>获取或设置一个布尔值，该值指定是否允许进行 NTLM 身份验证。</summary>
      <returns>如果工作组方案中启用了 Windows 安全，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WindowsClientElement.Copy(System.ServiceModel.Configuration.WindowsClientElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="T:System.ServiceModel.Configuration.WindowsServiceElement">
      <summary>表示一个配置元素，该元素指定 Windows 服务凭据的设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WindowsServiceElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WindowsServiceElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.WindowsServiceElement.AllowAnonymousLogons">
      <summary>获取或设置一个布尔值，该值指定匿名用户是否可以登录。</summary>
      <returns>如果匿名用户可以登录，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WindowsServiceElement.Copy(System.ServiceModel.Configuration.WindowsServiceElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.WindowsServiceElement.IncludeWindowsGroups">
      <summary>获取或设置一个值，该值指示 Windows 组是否包含在安全上下文中。</summary>
      <returns>如果 Windows 组包含在安全上下文中，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WindowsStreamSecurityElement">
      <summary>表示一个配置元素，它用于为绑定指定 Windows 流安全的设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WindowsStreamSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WindowsStreamSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WindowsStreamSecurityElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>将指定绑定元素的内容应用到此绑定配置元素。</summary>
      <param name="bindingElement">一个绑定元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WindowsStreamSecurityElement.BindingElementType">
      <summary>获取表示绑定元素的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>一个表示绑定类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WindowsStreamSecurityElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WindowsStreamSecurityElement.ProtectionLevel">
      <summary>获取或设置所使用的消息级安全。</summary>
      <returns>一个 <see cref="T:System.Net.Security.ProtectionLevel" />，指定所使用的消息级安全。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.EncryptAndSign" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WS2007FederationHttpBindingCollectionElement">
      <summary>表示一个包含 <see cref="T:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement" /> 实例集合的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WS2007FederationHttpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WS2007FederationHttpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement">
      <summary>表示定义 <see cref="T:System.ServiceModel.WS2007FederationHttpBinding" /> 绑定的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement.#ctor(System.String)">
      <summary>使用指定配置名称初始化 <see cref="T:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WS2007FederationHttpBindingElement.BindingElementType">
      <summary>获取 <see cref="T:System.ServiceModel.WS2007FederationHttpBinding" /> 类的类型。</summary>
      <returns>此绑定元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WS2007HttpBindingCollectionElement">
      <summary>表示一个配置元素，该元素包含的子元素可指定有关使用 <see cref="T:System.ServiceModel.WS2007HttpBinding" /> 绑定的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WS2007HttpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WS2007HttpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.WS2007HttpBindingElement">
      <summary>表示派生自 <see cref="T:System.ServiceModel.WSHttpBinding" /> 的互操作绑定，并对 <see cref="P:System.ServiceModel.WSHttpBinding.Security" />、<see cref="T:System.ServiceModel.ReliableSession" /> 和 <see cref="P:System.ServiceModel.WSHttpBindingBase.TransactionFlow" /> 绑定元素的正确版本提供支持。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WS2007HttpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WS2007HttpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WS2007HttpBindingElement.#ctor(System.String)">
      <summary>使用指定绑定初始化 <see cref="T:System.ServiceModel.Configuration.WS2007HttpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WS2007HttpBindingElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WsdlImporterElement">
      <summary>表示一个配置元素，该元素指定带有 WS-Policy 附件的 Web 服务描述语言 (WSDL) 1.1 元数据的导入。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WsdlImporterElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WsdlImporterElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WsdlImporterElement.#ctor(System.String)">
      <summary>使用指定的类型初始化 <see cref="T:System.ServiceModel.Configuration.WsdlImporterElement" /> 类的新实例。</summary>
      <param name="type">指定的类型。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.WsdlImporterElement.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.ServiceModel.Configuration.WsdlImporterElement" /> 类的新实例。</summary>
      <param name="type">指定的类型。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WsdlImporterElement.Type">
      <summary>获取或设置此配置元素的类型。</summary>
      <returns>此配置元素的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WsdlImporterElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.WsdlImporterElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WsdlImporterElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WsdlImporterElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSDualHttpBindingCollectionElement">
      <summary>表示一个包含 <see cref="T:System.ServiceModel.Configuration.WSDualHttpBindingElement" /> 实例集合的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSDualHttpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSDualHttpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSDualHttpBindingElement">
      <summary>表示安全且可互操作的绑定的配置元素，该绑定适合于双工服务协定或通过 SOAP 媒介进行的通信。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSDualHttpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSDualHttpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSDualHttpBindingElement.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.ServiceModel.Configuration.WSDualHttpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.BypassProxyOnLocal">
      <summary>获取或设置一个布尔值，该值指定对本地地址是否不使用代理服务器。</summary>
      <returns>如果对本地地址不使用代理服务器，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.ClientBaseAddress">
      <summary>获取或设置一个 URI，该 URI 指定客户端为接收来自服务的响应消息而侦听的基址。</summary>
      <returns>一个 URI，指定客户端为接收来自服务的响应消息而侦听的基址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode">
      <summary>获取或设置用于分析 URI 的 HTTP 主机名比较模式。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值，该值指定在对 URI 进行匹配时，是否使用主机名来访问服务。 默认值为 <see cref="F:System.ServiceModel.HostnameComparisonMode.StrongWildcard" />，表示在匹配过程中忽略主机名。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSDualHttpBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定集合的内容来初始化此绑定配置节。</summary>
      <param name="binding">一个绑定元素集合。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.MaxBufferPoolSize">
      <summary>获取或设置可为特定消息缓冲区管理器（该管理器在配置了此绑定的终结点接收消息）分配的最大内存量（以字节为单位）。</summary>
      <returns>配置了此绑定的终结点所使用的缓冲池的最大大小（以字节为单位）。 默认值为 524288 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.MaxReceivedMessageSize">
      <summary>获取或设置配置了此绑定配置的通道上可以接收的消息的最大大小（以字节为单位）。</summary>
      <returns>绑定可处理的最大消息大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.MessageEncoding">
      <summary>获取或设置用于对消息进行编码的编码器。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.WSMessageEncoding" /> 值，它指定用于对消息进行编码的编码器。 默认值为 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSDualHttpBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将指定绑定集合的内容应用到此绑定配置元素时调用。</summary>
      <param name="binding">要应用的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.ProxyAddress">
      <summary>获取或设置一个指定 HTTP 代理的地址的 URI。</summary>
      <returns>一个指定 HTTP 代理地址的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.ReliableSession">
      <summary>获取一个配置元素，该元素指定是否为配置了此绑定的终结点启用可靠会话。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.ReliableSessionElement" />，指定是否为配置了此绑定的终结点启用可靠会话。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.Security">
      <summary>获取用于此绑定的安全类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.WSDualHttpSecurityElement" />，指定用于此绑定的安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.TextEncoding">
      <summary>获取或设置要用于在绑定上发出消息的字符集编码。</summary>
      <returns>一个有效的 <see cref="T:System.Text.Encoding" /> 值，该值指定要用于在绑定上发出消息的字符集编码。 默认值为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.TransactionFlow">
      <summary>获取或设置一个布尔值，该值指定绑定是否支持流动 WS-Transactions。</summary>
      <returns>如果绑定支持流动 WS-Transactions，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.UseDefaultWebProxy">
      <summary>获取或设置一个布尔值，该值指定是否使用系统的自动配置 HTTP 代理。</summary>
      <returns>如果使用系统的自动配置 HTTP 代理，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSDualHttpSecurityElement">
      <summary>表示一个 XML 元素，该元素定义 wsDualHttpBinding 绑定的安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSDualHttpSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSDualHttpSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpSecurityElement.Message">
      <summary>获取消息的安全设置。</summary>
      <returns>消息的安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSDualHttpSecurityElement.Mode">
      <summary>获取或设置应用于此绑定的安全类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.WSDualHttpSecurityMode" />，指定应用于此绑定的安全类型。默认值为 <see cref="P:System.ServiceModel.Configuration.WSDualHttpSecurityElement.Message" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSFederationHttpBindingCollectionElement">
      <summary>表示一个包含 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpBindingElement" /> 实例集合的配置元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSFederationHttpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSFederationHttpBindingElement">
      <summary>表示一个配置元素，该元素定义一个支持 WS-Federation 的绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSFederationHttpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSFederationHttpBindingElement.#ctor(System.String)">
      <summary>使用指定配置名称初始化 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSFederationHttpBindingElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSFederationHttpBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定集合的内容初始化此绑定配置节。</summary>
      <param name="binding">一个绑定元素集合。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSFederationHttpBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将指定绑定集合的内容应用到此绑定配置元素时调用。</summary>
      <param name="binding">一个绑定元素集合。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSFederationHttpBindingElement.PrivacyNoticeAt">
      <summary>获取或设置隐私声明所在的 URI。</summary>
      <returns>隐私声明所在的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSFederationHttpBindingElement.PrivacyNoticeVersion">
      <summary>获取或设置一个整数，该整数指定当前隐私声明的版本。</summary>
      <returns>一个整数，指定当前隐私声明的版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSFederationHttpBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSFederationHttpBindingElement.Security">
      <summary>获取用于此绑定的安全类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpSecurityElement" />，定义用于此绑定的安全。 默认值为 <see cref="F:System.ServiceModel.SecurityMode.Message" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSFederationHttpSecurityElement">
      <summary>表示一个 XML 元素，该元素定义 wsFederationHttp 绑定的安全设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSFederationHttpSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSFederationHttpSecurityElement.Message">
      <summary>获取消息的安全设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.FederatedMessageSecurityOverHttpElement" />，指定消息的安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSFederationHttpSecurityElement.Mode">
      <summary>获取或设置应用于此绑定的安全类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.WSFederationHttpSecurityMode" />，指定应用于此绑定的安全类型。 默认值为 <see cref="P:System.ServiceModel.Configuration.WSFederationHttpSecurityElement.Message" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSHttpBindingBaseElement">
      <summary>提供一个基类，该基类具有 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" /> 和 <see cref="T:System.ServiceModel.Configuration.WSFederationHttpBindingElement" /> 共有的成员。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingBaseElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingBaseElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingBaseElement.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingBaseElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.BypassProxyOnLocal">
      <summary>获取或设置一个布尔值，该值指定对本地地址是否不使用代理服务器。</summary>
      <returns>如果对本地地址不使用代理服务器，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.HostNameComparisonMode">
      <summary>获取或设置用于分析 URI 的 HTTP 主机名比较模式。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.HostnameComparisonMode" /> 值，指定用于分析 URI 的 HTTP 主机名比较模式。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingBaseElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置节。</summary>
      <param name="binding">一个绑定元素集合。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.MaxBufferPoolSize">
      <summary>获取或设置缓冲池允许的最大字节大小，该缓冲池用于存储由绑定处理的消息。</summary>
      <returns>绑定处理的缓冲池的最大大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.MaxReceivedMessageSize">
      <summary>获取或设置绑定可处理的消息的最大大小（以字节为单位）。</summary>
      <returns>绑定可处理的最大消息大小（以字节为单位）。 默认值为 65,536 个字节。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.MessageEncoding">
      <summary>获取或设置用于对消息进行编码的编码器。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.WSMessageEncoding" /> 值，它指定用于对消息进行编码的编码器。 默认值为 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingBaseElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the specified binding to this <see cref="T:System.ServiceModel.Configuration.WsDualHttpBindingElement" /> instance.</summary>
      <param name="binding">要应用的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.ProxyAddress">
      <summary>获取或设置一个指定 HTTP 代理的地址的 URI。</summary>
      <returns>一个指定 HTTP 代理地址的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.ReaderQuotas">
      <summary>获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。</summary>
      <returns>指定复杂性约束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.ReliableSession">
      <summary>获取一个配置元素，该元素指定是否为配置了此绑定的终结点启用可靠会话。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement" />，指定是否为配置了此绑定的终结点启用可靠会话。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.TextEncoding">
      <summary>获取或设置要用于在绑定上发出消息的字符集编码。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" /> 值，指定要用来在绑定上发出消息的字符集编码。 默认值为 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.TransactionFlow">
      <summary>获取或设置一个布尔值，该值指定绑定是否支持流动 WS-Transactions。</summary>
      <returns>如果绑定支持流动 WS-Transactions，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingBaseElement.UseDefaultWebProxy">
      <summary>获取或设置一个布尔值，该值指定是否使用系统的自动配置 HTTP 代理。</summary>
      <returns>如果使用系统的自动配置 HTTP 代理，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSHttpBindingCollectionElement">
      <summary>表示一个配置元素，该元素包含的子元素指定有关使用 wsHttpBinding 绑定的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingCollectionElement" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSHttpBindingElement">
      <summary>表示一个可互操作的绑定，该绑定支持分布式事务和安全、可靠的会话。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingElement.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingElement.AllowCookies">
      <summary>获取或设置一个无论 WCF 客户端是否将自动存储并通过单个网页服务重新发送任何 cookie 的值。</summary>
      <returns>True 如果需要自动 cookie 操作；否则，false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingElement.BindingElementType">
      <summary>获取此绑定元素的类型。</summary>
      <returns>此绑定元素的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>使用指定绑定元素的内容来初始化此绑定配置元素。</summary>
      <param name="binding">一个绑定元素。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>在将指定绑定集合的内容应用到此绑定配置元素时调用。</summary>
      <param name="binding">一个绑定元素集合。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpBindingElement.Security">
      <summary>获取用于此绑定的安全类型。</summary>
      <returns>与此绑定一起使用的 <see cref="T:System.ServiceModel.Configuration.WSHttpSecurityElement" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSHttpContextBindingCollectionElement">
      <summary>表示对象的 <see cref="T:System.ServiceModel.Configuration.WSHttpContextBindingElement" /> 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpContextBindingCollectionElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpContextBindingCollectionElement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSHttpContextBindingElement">
      <summary>表示一个与 <see cref="T:System.ServiceModel.WSHttpContextBinding" /> 绑定相对应的配置元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpContextBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpContextBindingElement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpContextBindingElement.#ctor(System.String)">
      <summary>使用指定的配置名称初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpContextBindingElement" /> 类的新实例。</summary>
      <param name="name">绑定的配置名称。 因为此值用作绑定的标识，所以它应该是唯一的。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpContextBindingElement.BindingElementType">
      <summary>获取与此配置元素： <see cref="T:System.ServiceModel.WSHttpContextBinding" /> 关联的标准绑定的 CLR 类型。</summary>
      <returns>与配置元素关联的标准绑定的 CLR 类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpContextBindingElement.ClientCallbackAddress">
      <summary>获取或设置绑定元素的客户端回调地址。</summary>
      <returns>绑定元素的客户端回调地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpContextBindingElement.ContextManagementEnabled">
      <summary>获取或设置一个指定是否已启用上下文管理的值。</summary>
      <returns>如果启用上下文管理，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpContextBindingElement.ContextProtectionLevel">
      <summary>获取或设置用于传播上下文信息的 SOAP 标头的上下文保护级别。</summary>
      <returns>用于传播上下文信息的 SOAP 标头的上下文保护级别。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.Sign" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpContextBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>根据指定绑定的配置来初始化此绑定配置元素。 提供的绑定对象的类型必须为 <see cref="T:System.ServiceModel.WSHttpContextBinding" />。</summary>
      <param name="binding">包含用于初始化类的内容、上下文保护级别和内容交换机制的绑定。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpContextBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>将此配置元素的配置应用到指定的绑定实例。 指定的绑定实例的类型必须为 <see cref="T:System.ServiceModel.WSHttpContextBinding" />。</summary>
      <param name="binding">包含用于配置类的内容、上下文保护级别和内容交换机制的绑定。</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpContextBindingElement.Properties">
      <summary>获取一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 实例，该实例包含一个 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象集合，这些对象可以是此配置元素的特性或 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSHttpSecurityElement">
      <summary>一个 XML 元素，该元素定义 wsHttpBinding 绑定的安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpSecurityElement.Message">
      <summary>获取消息的安全设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.MessageSecurityOverHttpElement" />，它指定消息的安全设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpSecurityElement.Mode">
      <summary>指定所应用的安全类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.SecurityMode" /> 值，它指定所应用的安全类型。 默认值为 <see cref="F:System.ServiceModel.SecurityMode.Message" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpSecurityElement.Transport">
      <summary>获取传输的安全设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Configuration.HttpTransportSecurityElement" />，它指定传输的安全设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.WSHttpTransportSecurityElement">
      <summary>表示一个配置元素，该元素定义 HTTP 传输的身份验证设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.WSHttpTransportSecurityElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.WSHttpTransportSecurityElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpTransportSecurityElement.ClientCredentialType">
      <summary>获取或设置用于向服务证明客户端身份的凭据。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.HttpClientCredentialType" /> 值，该值指定用于向服务证明客户端身份的凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpTransportSecurityElement.ExtendedProtectionPolicy">
      <summary>获取一个 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 实例，其中包含用于会话的扩展保护的配置设置。</summary>
      <returns>返回 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpTransportSecurityElement.ProxyCredentialType">
      <summary>获取或设置用于向域代理证明客户端身份的凭据。</summary>
      <returns>一个有效的 <see cref="T:System.ServiceModel.HttpProxyCredentialType" /> 值，该值指定用于向域代理证明客户端身份的凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WSHttpTransportSecurityElement.Realm">
      <summary>获取或设置一个字符串，它指定摘要式或基本身份验证的身份验证领域。</summary>
      <returns>一个字符串，指定摘要式或基本身份验证的身份验证领域。 默认值为空字符串。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement">
      <summary>表示一个配置元素，该元素指定由可信颁发者颁发的证书。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement.Copy(System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement.FindValue">
      <summary>获取或设置一个字符串，该字符串指定要在 X.509 证书存储区中搜索的值。</summary>
      <returns>要在 X.509 证书存储区中搜索的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement.StoreLocation">
      <summary>获取或设置一个值，该值指定客户端可用于验证服务器证书的证书存储区位置。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />，指定客户端可用于验证服务器证书的证书存储区位置。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement.StoreName">
      <summary>获取或设置要打开的 X.509 证书存储区的名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />，包含要打开的 X.509 证书存储区的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement.X509FindType">
      <summary>获取或设置要执行的 X.509 搜索的类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />，指定要执行的 X.509 搜索的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElementCollection">
      <summary>包含 <see cref="T:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509CertificateTrustedIssuerElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement">
      <summary>表示一个配置元素，该配置元素指定客户端证书的身份验证设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement.CertificateValidationMode">
      <summary>获取或设置证书验证模式。</summary>
      <returns>证书验证模式。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement.Copy(System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement.CustomCertificateValidatorType">
      <summary>获取或设置所使用的自定义客户端证书验证程序的类型。</summary>
      <returns>要使用的 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement.IncludeWindowsGroups">
      <summary>获取或设置一个值，该值指示 Windows 组是否包含在安全上下文中。</summary>
      <returns>如果 Windows 组包含在安全上下文中，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement.MapClientCertificateToWindowsAccount">
      <summary>获取或设置一个值，该值指示是否将证书映射到 Windows 帐户。</summary>
      <returns>如果将证书映射到 Windows 帐户，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement.RevocationMode">
      <summary>获取或设置证书吊销模式。</summary>
      <returns>证书吊销模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateAuthenticationElement.TrustedStoreLocation">
      <summary>获取或设置用来验证客户端证书的受信任存储区位置。</summary>
      <returns>受信任的存储区位置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement">
      <summary>表示一个配置元素，该元素指定客户端所使用的证书。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement.Copy(System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement.FindValue">
      <summary>获取或设置一个字符串，该字符串指定要在 X.509 证书存储区中搜索的值。</summary>
      <returns>要在 X.509 证书存储区中搜索的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement.StoreLocation">
      <summary>获取或设置一个值，该值指定服务可用于验证客户端证书的证书存储区位置。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement.StoreName">
      <summary>获取或设置要打开的 X.509 证书存储区的名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />，包含要打开的 X.509 证书存储区的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ClientCertificateCredentialsElement.X509FindType">
      <summary>获取或设置要执行的 X.509 搜索的类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />，指定要执行的 X.509 搜索的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509DefaultServiceCertificateElement">
      <summary>表示一个配置元素，该元素指定服务所使用的默认证书。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509DefaultServiceCertificateElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509DefaultServiceCertificateElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509DefaultServiceCertificateElement.Copy(System.ServiceModel.Configuration.X509DefaultServiceCertificateElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509DefaultServiceCertificateElement.FindValue">
      <summary>获取或设置一个字符串，该字符串指定要在 X.509 证书存储区中搜索的值。</summary>
      <returns>要在 X.509 证书存储区中搜索的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509DefaultServiceCertificateElement.StoreLocation">
      <summary>获取或设置一个值，该值指定客户端可用于验证服务器证书的证书存储区位置。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />，指定客户端可用于验证服务器证书的证书存储区位置。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509DefaultServiceCertificateElement.StoreName">
      <summary>获取或设置要打开的 X.509 证书存储区的名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />，包含要打开的 X.509 证书存储区的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509DefaultServiceCertificateElement.X509FindType">
      <summary>获取或设置要执行的 X.509 搜索的类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />，指定要执行的 X.509 搜索的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement">
      <summary>表示一个配置元素，该元素指定客户端用来标识自身的证书。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement.Copy(System.ServiceModel.Configuration.X509InitiatorCertificateClientElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement.FindValue">
      <summary>获取或设置一个字符串，该字符串指定要在 X.509 证书存储区中搜索的值。</summary>
      <returns>要在 X.509 证书存储区中搜索的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement.StoreLocation">
      <summary>获取或设置一个值，该值指定客户端可用于验证服务器证书的证书存储区位置。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />，指定客户端可用于验证服务器证书的证书存储区位置。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement.StoreName">
      <summary>获取或设置要打开的 X.509 证书存储区的名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />，包含要打开的 X.509 证书存储区的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509InitiatorCertificateClientElement.X509FindType">
      <summary>获取或设置要执行的 X.509 搜索的类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />，指定要执行的 X.509 搜索的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement">
      <summary>表示一个配置元素，该元素指定发送方对接收方在答复发送方时使用的 X.509 证书的要求。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement.Authentication">
      <summary>获取用于身份验证的客户端证书。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.X509ClientCertificateAuthentication" />，包含用于身份验证的客户端证书。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement.Certificate">
      <summary>获取在向客户端反馈时用于表示服务的证书。</summary>
      <returns>一个在向客户端反馈时用于表示服务的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement.Copy(System.ServiceModel.Configuration.X509InitiatorCertificateServiceElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement">
      <summary>表示一个配置元素，它指定对等证书的身份验证设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement.CertificateValidationMode">
      <summary>获取证书验证模式。</summary>
      <returns>证书验证模式。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement.Copy(System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement.CustomCertificateValidatorType">
      <summary>获取或设置要使用的自定义对等证书验证程序的类型。</summary>
      <returns>要使用的 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement.RevocationMode">
      <summary>获取或设置证书吊销模式。</summary>
      <returns>证书吊销模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509PeerCertificateAuthenticationElement.TrustedStoreLocation">
      <summary>获取或设置用来验证对等证书的受信任存储区位置。</summary>
      <returns>用来验证对等证书的受信任存储区位置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509PeerCertificateElement">
      <summary>表示一个配置元素，该元素指定对等方所使用的证书。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509PeerCertificateElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509PeerCertificateElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509PeerCertificateElement.Copy(System.ServiceModel.Configuration.X509PeerCertificateElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509PeerCertificateElement.FindValue">
      <summary>获取或设置一个字符串，该字符串指定要在 X.509 证书存储区中搜索的值。</summary>
      <returns>要在 X.509 证书存储区中搜索的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509PeerCertificateElement.StoreLocation">
      <summary>获取或设置一个值，该值指定客户端可用于验证对等证书的证书存储区位置。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509PeerCertificateElement.StoreName">
      <summary>获取或设置要打开的 X.509 证书存储区的名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />，包含要打开的 X.509 证书存储区的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509PeerCertificateElement.X509FindType">
      <summary>获取或设置要执行的 X.509 搜索的类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />，指定要执行的 X.509 搜索的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509RecipientCertificateClientElement">
      <summary>表示一个配置元素，该元素指定接收方对发送方要使用的 X.509 证书的要求。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509RecipientCertificateClientElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509RecipientCertificateClientElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509RecipientCertificateClientElement.Authentication">
      <summary>获取用于身份验证的证书。</summary>
      <returns>用于身份验证的证书。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509RecipientCertificateClientElement.Copy(System.ServiceModel.Configuration.X509RecipientCertificateClientElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509RecipientCertificateClientElement.DefaultCertificate">
      <summary>获取在向客户端反馈时用于表示服务的默认证书。</summary>
      <returns>一个在向客户端反馈时用于表示服务的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509RecipientCertificateClientElement.ScopedCertificates">
      <summary>获取在向客户端反馈时用于表示服务的作用域证书。</summary>
      <returns>一个在向客户端反馈时用于表示服务的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509RecipientCertificateClientElement.SslCertificateAuthentication">
      <summary>获取用于安全套接字层 (SSL) 证书的身份验证设置。</summary>
      <returns>SSL 证书的身份验证设置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement">
      <summary>表示一个配置元素，该元素指定服务用来标识自身的证书。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement.Copy(System.ServiceModel.Configuration.X509RecipientCertificateServiceElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement.FindValue">
      <summary>获取或设置一个字符串，该字符串指定要在 X.509 证书存储区中搜索的值。</summary>
      <returns>要在 X.509 证书存储区中搜索的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement.StoreLocation">
      <summary>获取或设置一个值，该值指定客户端可用于验证服务器证书的证书存储区位置。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />，指定客户端可用于验证服务器证书的证书存储区位置。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement.StoreName">
      <summary>获取或设置要打开的 X.509 证书存储区的名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />，包含要打开的 X.509 证书存储区的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509RecipientCertificateServiceElement.X509FindType">
      <summary>获取或设置要执行的 X.509 搜索的类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />，指定要执行的 X.509 搜索的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement">
      <summary>表示指定服务证书的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement.Copy(System.ServiceModel.Configuration.X509ScopedServiceCertificateElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement.FindValue">
      <summary>获取或设置一个字符串，该字符串指定要在 X.509 证书存储区中搜索的值。</summary>
      <returns>要在 X.509 证书存储区中搜索的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement.StoreLocation">
      <summary>获取或设置一个值，该值指定客户端可用于验证服务器证书的证书存储区位置。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement.StoreName">
      <summary>获取或设置要打开的 X.509 证书存储区的名称。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />，包含要打开的 X.509 证书存储区的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement.TargetUri">
      <summary>获取或设置此证书的 URI。</summary>
      <returns>一个 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement.X509FindType">
      <summary>获取或设置要执行的 X.509 搜索的类型。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />，指定要执行的 X.509 搜索的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509ScopedServiceCertificateElementCollection">
      <summary>包含 <see cref="T:System.ServiceModel.Configuration.X509ScopedServiceCertificateElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ScopedServiceCertificateElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509ScopedServiceCertificateElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement">
      <summary>表示一个配置元素，它指定服务证书的身份验证设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement.CertificateValidationMode">
      <summary>获取或设置证书验证模式。</summary>
      <returns>证书验证模式。</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement.Copy(System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement)">
      <summary>将指定配置元素的内容复制到此配置元素。</summary>
      <param name="from">要复制的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement.CustomCertificateValidatorType">
      <summary>获取或设置要使用的自定义服务证书验证程序的类型。</summary>
      <returns>要使用的 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement.RevocationMode">
      <summary>获取或设置证书吊销模式。</summary>
      <returns>证书吊销模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.X509ServiceCertificateAuthenticationElement.TrustedStoreLocation">
      <summary>获取或设置用来验证服务证书的受信任存储区位置。</summary>
      <returns>用来验证服务证书的受信任存储区位置。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement">
      <summary>表示一个配置元素，该配置元素针对可由配置了绑定的终结点处理的 SOAP 消息的复杂性定义了一些约束。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement.MaxArrayLength">
      <summary>获取并设置允许的最大数组长度。</summary>
      <returns>允许的最大数组长度。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement.MaxBytesPerRead">
      <summary>获取并设置允许每次读取返回的最大字节数。</summary>
      <returns>允许为每次读取返回的最大字节数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement.MaxDepth">
      <summary>获取或设置每次读操作的最大嵌套节点深度。</summary>
      <returns>每次读取的最大嵌套节点深度。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement.MaxNameTableCharCount">
      <summary>获取并设置表名称中允许的最大字符数。</summary>
      <returns>表名称中允许的最大字符数。</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement.MaxStringContentLength">
      <summary>获取或设置 XML 元素内容中最多可包含的字符数。</summary>
      <returns>XML 元素内容中允许包含的最大字符数。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.XmlElementElement">
      <summary>表示 XML 元素的配置设置。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XmlElementElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.XmlElementElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XmlElementElement.#ctor(System.Xml.XmlElement)">
      <summary>使用指定 XML 元素来初始化 <see cref="T:System.ServiceModel.Configuration.XmlElementElement" /> 类的新实例。</summary>
      <param name="element">用来初始化此实例的 <see cref="T:System.Xml.XmlElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.XmlElementElement.Copy(System.ServiceModel.Configuration.XmlElementElement)">
      <summary>将指定 <see cref="T:System.Xml.XmlElement" /> 的内容复制到此实例中。</summary>
      <param name="source">要复制自的 <see cref="T:System.Xml.XmlElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置文件是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.XmlElementElement.XmlElement">
      <summary>获取或设置此类包装的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>此类封装的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.XmlElementElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.XmlElementElement" /> 实例的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XmlElementElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.XmlElementElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="T:System.ServiceModel.Configuration.XPathMessageFilterElement">
      <summary>表示消息记录中所使用的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XPathMessageFilterElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Configuration.XPathMessageFilterElement.Filter">
      <summary>获取或设置所定义的 XPath 筛选器。</summary>
      <returns>定义 XPath 筛选器。</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.XPathMessageFilterElementCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElement" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XPathMessageFilterElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XPathMessageFilterElementCollection.ContainsKey(System.Object)">
      <summary>确定 <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElementCollection" /> 是否包含具有指定键的元素。</summary>
      <returns>如果该键存在于此集合中，则为 true；否则为 false。</returns>
      <param name="key">要在集合中查找的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">与 <paramref name="key" /> 相关联的类型无效。</exception>
    </member>
    <member name="P:System.ServiceModel.Configuration.XPathMessageFilterElementCollection.Item(System.Object)">
      <summary>获取集合中具有指定键的项。</summary>
      <returns>与集合中的指定 <paramref name="key" /> 相关联的 <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElement" />。</returns>
      <param name="key">要在集合中查找的键。</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.XPathMessageFilterElementComparer">
      <summary>提供对两个 <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElement" /> 实例进行比较的功能。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XPathMessageFilterElementComparer.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElementComparer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.XPathMessageFilterElementComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>比较两个 <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElement" /> 实例。</summary>
      <returns>下表列出了可能的值。 值 Condition -1 <paramref name="x" /> 小于 <paramref name="y" />。 0<paramref name="x" /> 等于 <paramref name="y" />。 1<paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">
        <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElement" />。</param>
      <param name="y">
        <see cref="T:System.ServiceModel.Configuration.XPathMessageFilterElement" />。</param>
      <exception cref="T:System.InvalidOperationException">无法分析 <paramref name="x" /> 或 <paramref name="y" /> 所指定的 XPath 筛选器。</exception>
      <exception cref="T:System.IndexOutOfRangeException">找不到 <paramref name="x" /> 或 <paramref name="y" /> 所指定的 XPath 命名空间前缀。</exception>
    </member>
    <member name="T:System.ServiceModel.Description.CallbackDebugBehavior">
      <summary>启用 Windows Communication Foundation (WCF) 回调对象的服务调试。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.CallbackDebugBehavior.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.CallbackDebugBehavior" /> 类的新实例。</summary>
      <param name="includeExceptionDetailInFaults">控制 WCF 回调对象是否在发送回服务的 SOAP 错误详细信息中包括托管异常信息。</param>
    </member>
    <member name="P:System.ServiceModel.Description.CallbackDebugBehavior.IncludeExceptionDetailInFaults">
      <summary>获取或设置一个值，该值控制客户端回调对象是否将 SOAP 错误中的托管异常信息返回到服务。</summary>
      <returns>如果 WCF 在双工通信中返回 SOAP 错误中的托管客户端回调异常信息，以便进行服务调试，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.CallbackDebugBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>实现 <see cref="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" /> 方法以支持该行为。</summary>
      <param name="serviceEndpoint">要修改的终结点。</param>
      <param name="bindingParameters">绑定元素支持该行为所需的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.CallbackDebugBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>实现 <see cref="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" /> 以支持该行为。</summary>
      <param name="serviceEndpoint">要自定义的终结点。</param>
      <param name="behavior">要自定义的客户端运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.CallbackDebugBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>实现 <see cref="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" /> 以支持该行为。</summary>
      <param name="serviceEndpoint">公开协定的终结点。</param>
      <param name="endpointDispatcher">要修改或扩展的终结点调度程序。</param>
    </member>
    <member name="M:System.ServiceModel.Description.CallbackDebugBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>实现 <see cref="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" /> 以支持该行为。</summary>
      <param name="serviceEndpoint">要验证的终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Description.ClientCredentials">
      <summary>使用户能够配置客户端和服务凭据以及服务凭据身份验证设置，以用于通信的客户端。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor(System.ServiceModel.Description.ClientCredentials)">
      <summary>此为复制构造函数。</summary>
      <param name="other">
        <see cref="T:System.ServiceModel.Description.ClientCredentials" />。 新构造的实例的所有属性反映了此参数的值。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>将指定客户端行为应用于终结点。</summary>
      <param name="serviceEndpoint">将应用指定客户端行为的终结点。</param>
      <param name="behavior">将应用于指定终结点的客户端行为。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceEndpoint" /> 或 <paramref name=" behavior" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.ClientCertificate">
      <summary>获取一个对象，您可以使用该对象来提供客户端用于通过到服务的验证的 X.509 证书。</summary>
      <returns>一个表示客户端证书的 <see cref="T:System.ServiceModel.Security.X509CertificateInitiatorClientCredential" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.Clone">
      <summary>创建此 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例的新副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.CloneCore">
      <summary>创建此 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例的新副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.CreateSecurityTokenManager">
      <summary>为此实例创建安全令牌管理器。 此方法很少显式调用；它主要用于扩展方案，由系统自已调用。</summary>
      <returns>此 <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 实例的一个 <see cref="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.GetInfoCardSecurityToken(System.Boolean,System.IdentityModel.Selectors.CardSpacePolicyElement[],System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>使用 CardSpace 系统和指定的策略链和令牌序列化程序生成和返回安全令牌。</summary>
      <returns>表示所生成的安全令牌的 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" />。 如果 <paramref name="requiresInfoCard" /> 为 false，则返回 null。</returns>
      <param name="requiresInfoCard">一个确定是否需要 CardSpace 的值。</param>
      <param name="chain">
        <see cref="T:System.IdentityModel.Selectors.CardSpacePolicyElement" /> 的数组，它描述了客户端需要使用最终令牌才能展开的联合安全链。</param>
      <param name="tokenSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够读取 KeyInfo 子句。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.HttpDigest">
      <summary>获取当前 HTTP Digest 凭据。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.HttpDigestClientCredential" />，表示客户端用于在选择 HTTP Digest 认证方法时通过到服务的认证的凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.IssuedToken">
      <summary>使用此属性可指定在联系本地安全令牌服务时要使用的终结点地址和绑定。 某服务需要使用已颁发令牌的身份验证，但该服务的策略（表示为客户端上的绑定）未显式指定如何和在什么位置获取已颁发的令牌时，会使用此信息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.IssuedTokenClientCredential" />，指定用于从本地安全令牌服务获取令牌的参数。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.Peer">
      <summary>控制对等节点用于使自身通过到网格中的其他节点的认证的凭据，以及对等节点用于认证其他对等节点的对等节点。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.PeerCredential" />，表示当前的对等凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.SecurityTokenHandlerCollectionManager">
      <summary>获取或设置用于客户端凭据的安全令牌处理程序。</summary>
      <returns>用于客户凭据的安全令牌处理程序。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.ServiceCertificate">
      <summary>获取用于指定服务的 X.509 证书的对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.X509CertificateRecipientClientCredential" />，表示要用于某特定服务的证书。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.SupportInteractive">
      <summary>获取或设置指示是否允许系统在必要时交互式提示用户输入凭据。 例如，在中间层方案中，可能需要将其设置为 false。</summary>
      <returns>如果凭据支持交互模式，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>将此类的此实例添加到绑定参数集合。</summary>
      <param name="serviceEndpoint">要相加的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <param name="bindingParameters">绑定参数的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>在终结点范围内实现服务的修改或扩展。</summary>
      <param name="serviceEndpoint">公开协定的终结点。</param>
      <param name="endpointDispatcher">要修改或扩展的终结点调度程序。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>保留供将来使用。</summary>
      <param name="serviceEndpoint">要验证的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.UseIdentityConfiguration">
      <summary>获取或设置客户端凭据是否使用标识配置。</summary>
      <returns>如果客户凭据使用标识配置，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.UserName">
      <summary>获取一个凭据对象，您可以使用该对象来设置客户端用于使自身通过到服务的身份验证的用户名和密码。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.UserNamePasswordClientCredential" />，表示当前的 UserName 凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.Windows">
      <summary>获取用于控制客户端用于使自身通过到服务的身份认证的 Windows 凭据的对象。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.WindowsClientCredential" />，表示当前的 Windows 凭据。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ClientViaBehavior">
      <summary>客户端使用 <see cref="T:System.ServiceModel.Description.ClientViaBehavior" /> 来指定应为其创建传输通道的 URI。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientViaBehavior.#ctor(System.Uri)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ClientViaBehavior" /> 类的新实例。</summary>
      <param name="uri">应为其创建传输通道的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientViaBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>未实现。</summary>
      <param name="serviceEndpoint">服务终结点。</param>
      <param name="bindingParameters">要应用于服务终结点的绑定参数。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientViaBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>将 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.Via" /> 设置为应为其创建传输通道的 URI。</summary>
      <param name="serviceEndpoint">服务终结点。</param>
      <param name="behavior">要为其应用客户端行为的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientViaBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>在终结点范围内实现服务的修改或扩展。</summary>
      <param name="serviceEndpoint">公开协定的服务终结点。</param>
      <param name="endpointDispatcher">要修改的终结点调度程序。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientViaBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>未实现。</summary>
      <param name="serviceEndpoint">公开协定的服务终结点。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ClientViaBehavior.Uri">
      <summary>获取或设置应为其创建传输通道的 URI。</summary>
      <returns>应为其创建传输通道的 URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ContractDescription">
      <summary>描述指定终结点向外部传递的信息的 Windows Communication Foundation (WCF) 协定。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String)">
      <summary>初始化具有指定名称的 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 类的新实例。</summary>
      <param name="name">协定的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> 为空。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)">
      <summary>使用指定的命名空间限定名称初始化 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 类的新实例。</summary>
      <param name="name">协定的名称。</param>
      <param name="ns">包含协定的名称的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> 为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Behaviors">
      <summary>获取与协定说明关联的行为。</summary>
      <returns>与协定说明关联的 <see cref="T:System.ServiceModel.Description.IContractBehavior" /> 类型的 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.CallbackContractType">
      <summary>获取或设置协定说明指定的回调协定的类型。</summary>
      <returns>协定说明指定的回调协定的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ConfigurationName">
      <summary>获取或设置协定说明的配置名称。</summary>
      <returns>协定的配置名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractBehaviors">
      <summary>获取协定的行为的集合。</summary>
      <returns>协定的行为的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractType">
      <summary>获取或设置协定说明指定的协定类型。</summary>
      <returns>协定说明指定的协定的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.GetContract(System.Type)">
      <summary>返回指定类型的协定的协定说明。</summary>
      <returns>指定类型的协定的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
      <param name="contractType">协定的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.GetContract(System.Type,System.Object)">
      <summary>返回指定类型的协定和服务实现的协定说明。</summary>
      <returns>指定类型的协定和服务实现的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
      <param name="contractType">协定的 <see cref="T:System.Type" />。</param>
      <param name="serviceImplementation">实现服务的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.GetContract(System.Type,System.Type)">
      <summary>返回指定类型的协定和指定类型的服务的协定说明。</summary>
      <returns>指定类型的协定和指定类型的服务的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
      <param name="contractType">协定的 <see cref="T:System.Type" />。</param>
      <param name="serviceType">服务的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.GetInheritedContracts">
      <summary>返回当前协定说明所继承的协定说明的集合。</summary>
      <returns>当前协定说明所继承的类型为 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.HasProtectionLevel">
      <summary>获取一个值，该值指示协定是否已经设置了保护级别。</summary>
      <returns>如果已经设置了保护级别，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Name">
      <summary>获取或设置协定的名称。</summary>
      <returns>协定说明的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Namespace">
      <summary>获取或设置协定的命名空间。</summary>
      <returns>协定的命名空间。</returns>
      <exception cref="T:System.ArgumentNullException">所设置的值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Operations">
      <summary>获取与协定关联的操作说明的集合。</summary>
      <returns>包含与协定说明关联的操作说明的 <see cref="T:System.ServiceModel.Description.OperationDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ProtectionLevel">
      <summary>获取或设置与协定关联的安全保护的级别。</summary>
      <returns>操作的 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.SessionMode">
      <summary>获取或设置一个值，该值指示协定是否要求会话。</summary>
      <returns>可为协定要求或支持的可靠会话指定支持的 <see cref="T:System.ServiceModel.SessionMode" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.ShouldSerializeProtectionLevel">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.Description.ContractDescription.ProtectionLevel" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.Description.ContractDescription.ProtectionLevel" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.DataContractSerializerMessageContractImporter">
      <summary>从 WSDL 文档处理数据协定消息的导入。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerMessageContractImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.DataContractSerializerMessageContractImporter" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerMessageContractImporter.Enabled">
      <summary>获取或设置一个值，该值指定是否启用消息导入。</summary>
      <returns>如果启用导入，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerMessageContractImporter.System#ServiceModel#Description#IWsdlImportExtension#BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>指定要在导入一组 WSDL 文档时使用的服务说明和架构集。</summary>
      <param name="wsdlDocuments">一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />，表示要检查的 WSDL 文档。</param>
      <param name="xmlSchemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，表示要在转换消息时使用的架构。</param>
      <param name="policy">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含要在导入消息时使用的策略文档。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerMessageContractImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>从 WSDL 文档导入消息协定。</summary>
      <param name="importer">要在导入时使用的 <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="contractContext">一个表示协定上下文的 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerMessageContractImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>从指定的终结点中转换 WSDL 文档。</summary>
      <param name="importer">要在导入时使用的 <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="endpointContext">用于定义终结点的 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior">
      <summary>表示 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 的运行时行为。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
      <summary>使用指定的操作说明初始化 <see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" /> 类的新实例。</summary>
      <param name="operation">一个表示操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.DataContractFormatAttribute)">
      <summary>使用指定的操作说明和数据协定格式初始化 <see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" /> 类的新实例。</summary>
      <param name="operation">一个表示操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="dataContractFormatAttribute">用于控制序列化过程的 <see cref="T:System.ServiceModel.DataContractFormatAttribute" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
      <summary>创建类的一个实例，该类从序列化和反序列化过程的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 中继承。</summary>
      <returns>继承自 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 类的一个类的实例。</returns>
      <param name="type">要为其创建序列化程序的 <see cref="T:System.Type" />。</param>
      <param name="name">生成类型的名称。</param>
      <param name="ns">生成类型的命名空间。</param>
      <param name="knownTypes">包含已知类型的 <see cref="T:System.Type" /> 的 <see cref="T:System.Collections.Generic.IList`1" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
      <summary>创建类的一个实例，该类从序列化和反序列化过程（其 <see cref="T:System.Xml.XmlDictionaryString" /> 包含命名空间）的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 中继承。</summary>
      <returns>继承自 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 类的一个类的实例。</returns>
      <param name="type">要序列化或反序列化的类型。</param>
      <param name="name">序列化类型的名称。</param>
      <param name="ns">包含序列化类型的命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="knownTypes">包含已知类型的 <see cref="T:System.Type" /> 的 <see cref="T:System.Collections.Generic.IList`1" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerOperationBehavior.DataContractFormatAttribute">
      <summary>获取与操作关联的 <see cref="T:System.ServiceModel.DataContractFormatAttribute" />。</summary>
      <returns>与操作关联的 <see cref="T:System.ServiceModel.DataContractFormatAttribute" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerOperationBehavior.DataContractResolver">
      <summary>获取或设置 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 的实现，用于在序列化和反序列化过程中动态映射类型。</summary>
      <returns>类型：<see cref="T:System.Runtime.Serialization.DataContractResolver" /> 将 xsi:type 映射到已知数据协定类型的类。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerOperationBehavior.DataContractSurrogate">
      <summary>获取或设置要在序列化和反序列化过程中使用的代理项。</summary>
      <returns>一个用作替换序列化程序的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerOperationBehavior.IgnoreExtensionDataObject">
      <summary>获取或设置一个值，该值指定是否忽略由某类型（因此不是数据协定类型）的扩展提供的数据。</summary>
      <returns>如果忽略该数据，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerOperationBehavior.MaxItemsInObjectGraph">
      <summary>获取或设置对象图中要序列化或反序列化的最大项数。</summary>
      <returns>对象图中要序列化或反序列化的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>将参数集合添加到行为。</summary>
      <param name="description">要为其添加参数的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="parameters">包含要添加的参数的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>将客户端行为附加到操作。</summary>
      <param name="description">表示操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="proxy">一个表示客户端的 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>将行为应用于操作。</summary>
      <param name="description">一个表示操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="dispatch">要为其附加行为的 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>验证操作。</summary>
      <param name="description">一个表示要验证的操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>导出操作的 WSDL 表示形式。</summary>
      <param name="exporter">要用于导出的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="contractContext">WSDL 的 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>以 WSDL 文档形式导出终结点说明。</summary>
      <param name="exporter">要用于导出的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="endpointContext">WSDL 的 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.DispatcherSynchronizationBehavior">
      <summary>允许 WCF 服务异步发送答复的终结点行为。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DispatcherSynchronizationBehavior.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.DispatcherSynchronizationBehavior" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DispatcherSynchronizationBehavior.#ctor(System.Boolean,System.Int32)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.DispatcherSynchronizationBehavior" /> 类的新实例。</summary>
      <param name="asynchronousSendEnabled">一个指定是否启用异步发送行为的值。</param>
      <param name="maxPendingReceives">一个指定挂起接收的最大数量的值。</param>
    </member>
    <member name="P:System.ServiceModel.Description.DispatcherSynchronizationBehavior.AsynchronousSendEnabled">
      <summary>获取或设置一个值，该值指示是否启用异步发送行为。</summary>
      <returns>如果启用了异步发送行为，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DispatcherSynchronizationBehavior.MaxPendingReceives">
      <summary>获取或设置一次可执行的最大接收数量。</summary>
      <returns>一次可执行的最大接收数量。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.DispatcherSynchronizationBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在运行时传递数据，以使绑定支持异步发送行为。</summary>
      <param name="serviceEndpoint">要修改的终结点。</param>
      <param name="parameters">要实现该行为，绑定元素所需的参数。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DispatcherSynchronizationBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>在启用异步发送行为的终结点上实现客户端的修改或扩展。</summary>
      <param name="serviceEndpoint">要修改的终结点。</param>
      <param name="behavior">要修改的客户端运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DispatcherSynchronizationBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>在启用异步发送行为的终结点上实现服务的修改或扩展。</summary>
      <param name="serviceEndpoint">公开协定的终结点。</param>
      <param name="endpointDispatcher">要修改或扩展的终结点调度程序。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DispatcherSynchronizationBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>验证终结点是否满足启用异步发送行为所需的条件。</summary>
      <param name="serviceEndpoint">要验证的终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescription">
      <summary>表示 SOAP 错误。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescription.#ctor(System.String)">
      <summary>使用指定的操作值初始化 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 类的新实例。</summary>
      <param name="action">SOAP 错误消息的操作。</param>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Action">
      <summary>SOAP 错误消息中的操作的值。</summary>
      <returns>SOAP 错误的操作。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.DetailType">
      <summary>SOAP 错误详细信息的类型。</summary>
      <returns>可序列化的详细信息对象的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.HasProtectionLevel">
      <summary>获取指示错误消息是否已分配保护级别的值。</summary>
      <returns>如果错误消息具有保护级别，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Name">
      <summary>获取或设置 SOAP 错误的名称。</summary>
      <returns>SOAP 错误的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Namespace">
      <summary>获取或设置 SOAP 错误的命名空间。</summary>
      <returns>SOAP 错误的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.ProtectionLevel">
      <summary>指定 SOAP 错误要求的绑定的保护级别。</summary>
      <returns>
        <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescription.ShouldSerializeProtectionLevel">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.Description.FaultDescription.ProtectionLevel" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.Description.FaultDescription.ProtectionLevel" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescriptionCollection">
      <summary>表示可用于获取协定中 SOAP 错误的相关信息的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescriptionCollection.Find(System.String)">
      <summary>返回拥有指定操作值的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象。</summary>
      <returns>拥有指定操作的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象或 null。 如果有多个 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象拥有相同的操作，则返回集合中的第一个对象。</returns>
      <param name="action">SOAP 错误操作的值。</param>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescriptionCollection.FindAll(System.String)">
      <summary>返回拥有指定操作值的所有 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象。</summary>
      <returns>拥有指定操作的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象集合。 如果没有 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象拥有该操作，则返回空集合。</returns>
      <param name="action">SOAP 错误操作的值。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IContractBehavior">
      <summary>实现可用于扩展服务或客户端应用程序中的协定的运行时行为的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>配置所有绑定元素以支持协定行为。</summary>
      <param name="contractDescription">要修改的协定说明。</param>
      <param name="endpoint">要修改的终结点。</param>
      <param name="bindingParameters">绑定元素支持该行为所需的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>在协定范围内执行客户端的修改或扩展。</summary>
      <param name="contractDescription">要实现扩展的协定说明。</param>
      <param name="endpoint">终结点。</param>
      <param name="clientRuntime">客户端运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <summary>在协定范围内执行客户端的修改或扩展。</summary>
      <param name="contractDescription">要修改的协定说明。</param>
      <param name="endpoint">公开协定的终结点。</param>
      <param name="dispatchRuntime">控制服务执行的调度运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>实现此方法可以确认协定和终结点是否支持协定行为。</summary>
      <param name="contractDescription">要验证的协定。</param>
      <param name="endpoint">要验证的终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IContractBehaviorAttribute">
      <summary>指定其实现 <see cref="T:System.ServiceModel.Description.IContractBehavior" /> 接口的属性处于活动状态的协定。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract">
      <summary>获取可用该协定行为的协定的类型。</summary>
      <returns>适用于该协定行为的协定。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.IEndpointBehavior">
      <summary>实现可用于扩展服务或客户端应用程序中的终结点的运行时行为的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>实现此方法可以在运行时将数据传递给绑定，从而支持自定义行为。</summary>
      <param name="endpoint">要修改的终结点。</param>
      <param name="bindingParameters">绑定元素支持该行为所需的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>在终结点范围内实现客户端的修改或扩展。</summary>
      <param name="endpoint">要自定义的终结点。</param>
      <param name="clientRuntime">要自定义的客户端运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>在终结点范围内实现服务的修改或扩展。</summary>
      <param name="endpoint">公开协定的终结点。</param>
      <param name="endpointDispatcher">要修改或扩展的终结点调度程序。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>实现此方法可以确认终结点是否满足某些设定条件。</summary>
      <param name="endpoint">要验证的终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IMetadataExchange">
      <summary>公开用于返回有关服务的元数据的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IMetadataExchange.BeginGet(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>开始元数据的异步检索。</summary>
      <returns>一个 <see cref="T:System.IAsyncResult" />，可传递给 <see cref="M:System.ServiceModel.Description.IMetadataExchange.EndGet(System.IAsyncResult)" /> 方法。</returns>
      <param name="request">应处理以确定要返回的元数据的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">指向将处理元数据的方法的 <see cref="T:System.AsyncCallback" />。</param>
      <param name="state">允许调用方确定要返回的异步调用的任意数据。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IMetadataExchange.EndGet(System.IAsyncResult)">
      <summary>指示元数据的检索。</summary>
      <returns>包含已处理元数据的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">一个 <see cref="T:System.IAsyncResult" />，包含用于进一步处理元数据的数据。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IMetadataExchange.Get(System.ServiceModel.Channels.Message)">
      <summary>返回服务元数据。</summary>
      <returns>包含元数据的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="request">包含元数据的请求的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IOperationBehavior">
      <summary>实现可用于扩展服务或客户端应用程序中的操作的运行时行为的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>实现此方法可以在运行时将数据传递给绑定，从而支持自定义行为。</summary>
      <param name="operationDescription">正在检查的操作。 仅用于检查。 如果修改了操作说明，则结果将不确定。</param>
      <param name="bindingParameters">绑定元素支持该行为所需的对象的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>在操作范围内执行客户端的修改或扩展。</summary>
      <param name="operationDescription">正在检查的操作。 仅用于检查。 如果修改了操作说明，则结果将不确定。</param>
      <param name="clientOperation">公开 <paramref name="operationDescription" /> 所描述的操作的自定义属性的运行时对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>在操作范围内执行服务的修改或扩展。</summary>
      <param name="operationDescription">正在检查的操作。 仅用于检查。 如果修改了操作说明，则结果将不确定。</param>
      <param name="dispatchOperation">公开 <paramref name="operationDescription" /> 所描述的操作的自定义属性的运行时对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>实现此方法可以确定操作是否满足某些设定条件。</summary>
      <param name="operationDescription">正在检查的操作。 仅用于检查。 如果修改了操作说明，则结果将不确定。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IOperationContractGenerationExtension">
      <summary>定义协定生成期间调用的方法，这些方法可用于修改为操作生成的代码。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationContractGenerationExtension.GenerateOperation(System.ServiceModel.Description.OperationContractGenerationContext)">
      <summary>实现此方法可以在开始协定生成过程之前修改代码文档项目模型。</summary>
      <param name="context">包含修改所生成的操作时必须要用到的 <see cref="N:System.CodeDom" /> 类型的工作上下文。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IPolicyExportExtension">
      <summary>实现 <see cref="T:System.ServiceModel.Description.IPolicyExportExtension" /> 可以在 Web Services 描述语言 (WSDL) 信息中插入自定义绑定策略断言。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>实现此方法可以导出有关绑定的自定义策略断言。</summary>
      <param name="exporter">可以用来修改导出过程的 <see cref="T:System.ServiceModel.Description.MetadataExporter" />。</param>
      <param name="context">可以用来插入您的自定义策略断言的 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IPolicyImportExtension">
      <summary>为可导入有关绑定的自定义策略断言的对象定义一个方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>定义一个可导入自定义策略断言和添加实现绑定元素的方法。</summary>
      <param name="importer">正在使用的 <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 对象。</param>
      <param name="context">
        <see cref="T:System.ServiceModel.Description.PolicyConversionContext" />，其中既包含可以导入的策略断言，也包含可向其添加实现绑定元素的绑定元素集合。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IServiceBehavior">
      <summary>提供一种在整个服务内修改或插入自定义扩展的机制，包括 <see cref="T:System.ServiceModel.ServiceHostBase" />。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>用于向绑定元素传递自定义数据，以支持协定实现。</summary>
      <param name="serviceDescription">服务的服务说明。</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">服务终结点。</param>
      <param name="bindingParameters">绑定元素可访问的自定义对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>用于更改运行时属性值或插入自定义扩展对象（例如错误处理程序、消息或参数拦截器、安全扩展以及其他自定义扩展对象）。</summary>
      <param name="serviceDescription">服务说明。</param>
      <param name="serviceHostBase">当前正在生成的宿主。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>用于检查服务宿主和服务说明，从而确定服务是否可成功运行。</summary>
      <param name="serviceDescription">服务说明。</param>
      <param name="serviceHostBase">当前正在构建的服务宿主。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IServiceContractGenerationExtension">
      <summary>定义协定生成期间调用的方法，这些方法可用于修改为服务协定生成的代码。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IServiceContractGenerationExtension.GenerateContract(System.ServiceModel.Description.ServiceContractGenerationContext)">
      <summary>实现此方法可以在开始协定生成过程之前修改代码文档项目模型。</summary>
      <param name="context">代码生成要使用的上下文，以在生成之前修改代码文档。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IWsdlExportExtension">
      <summary>定义可导出自定义元数据的终结点或协定行为。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IWsdlExportExtension.ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>为协定将自定义 Web 服务描述语言 (WSDL) 元素写入到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>为终结点将自定义 Web 服务描述语言 (WSDL) 元素添加到生成的 WSDL 中。</summary>
      <param name="exporter">导出终结点信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">提供从导出的 WSDL 元素到终结点说明的映射。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IWsdlImportExtension">
      <summary>实现并附加到 <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 对象，可以对导入程序将 Web Services 描述语言 (WSDL) 部分映射到 <see cref="T:System.Web.Services.Description.ServiceDescription" /> 对象的 Web Services 描述语言 (WSDL) 部分进行控制。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>在导入元数据文档前调用。</summary>
      <param name="wsdlDocuments">修改的服务说明。</param>
      <param name="xmlSchemas">导入时要使用的架构集合。</param>
      <param name="policy">导入时要使用的策略断言。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IWsdlImportExtension.ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>导入协定时调用。</summary>
      <param name="importer">导入程序。</param>
      <param name="context">要修改的导入上下文。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>导入终结点时调用。</summary>
      <param name="importer">导入程序。</param>
      <param name="context">修改的导入上下文。</param>
    </member>
    <member name="T:System.ServiceModel.Description.ListenUriMode">
      <summary>指示传输是否必须保证提供给服务的供服务侦听的 URI 是唯一的，或者不对该 URI 进行任何修改，就原样使用。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ListenUriMode.Explicit">
      <summary>完全原样使用 <see cref="P:System.ServiceModel.Description.ServiceEndpoint.ListenUri" />。 这是默认值。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ListenUriMode.Unique">
      <summary>指定传输是否应使用特定传输机制，以确保 <see cref="P:System.ServiceModel.Description.ServiceEndpoint.ListenUri" /> 是唯一的。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessageBodyDescription">
      <summary>表示 SOAP 消息的正文。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageBodyDescription.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MessageBodyDescription" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.Parts">
      <summary>获取 SOAP 消息的正文部分。</summary>
      <returns>您可以检查或修改的正文部分。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.ReturnValue">
      <summary>获取或设置包含返回值的 SOAP 消息的部分。</summary>
      <returns>返回值（如果有）。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperName">
      <summary>获取或设置 SOAP 正文元素内的包装元素的名称（如果有）。</summary>
      <returns>包装元素（如果有一个）。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperNamespace">
      <summary>获取或设置 SOAP 正文中的包装元素的命名空间（如果有）。</summary>
      <returns>包装元素的命名空间（如果有）。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescription">
      <summary>表示消息的说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescription.#ctor(System.String,System.ServiceModel.Description.MessageDirection)">
      <summary>用指定的操作和方向初始化 <see cref="T:System.ServiceModel.Description.MessageDescription" /> 类的新实例。</summary>
      <param name="action">标识消息意图的 SOAP 消息的操作参数。</param>
      <param name="direction">如果该消息为传入消息，则为 <see cref="F:System.ServiceModel.Description.MessageDirection.Input" />；如果该消息为传出消息，则为 <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 既不是 <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> 也不是 <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Action">
      <summary>获取或设置标识消息意图的 SOAP 消息的操作参数。</summary>
      <returns>一个包含操作 URI 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Body">
      <summary>获取 SOAP 消息的正文。</summary>
      <returns>包含消息正文的 <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Direction">
      <summary>获取指示消息是传入消息还是传出消息的方向。</summary>
      <returns>指示消息是传入服务还是从服务传出的 <see cref="T:System.ServiceModel.Description.MessageDirection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.HasProtectionLevel">
      <summary>获取一个值，该值指示是否已设置 <see cref="P:System.ServiceModel.Description.MessageDescription.ProtectionLevel" />。</summary>
      <returns>如果 <see cref="P:System.ServiceModel.Description.MessageDescription.ProtectionLevel" /> 已设置，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Headers">
      <summary>获取 SOAP 消息的标头的说明。</summary>
      <returns>包含 SOAP 消息头的说明的 <see cref="T:System.ServiceModel.Description.MessageHeaderDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.MessageType">
      <summary>获取或设置标识消息协定类型的类型。</summary>
      <returns>标识消息协定类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Properties">
      <summary>获取 SOAP 消息属性的说明。</summary>
      <returns>包含 SOAP 消息属性的说明的 <see cref="T:System.ServiceModel.Description.MessagePropertyDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.ProtectionLevel">
      <summary>获取或设置消息所需的安全服务。</summary>
      <returns>指定消息所需的安全服务的 <see cref="T:System.Net.Security.ProtectionLevel" /> 的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所设置的值对于 <see cref="T:System.Net.Security.ProtectionLevel" /> 而言不是有效值。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescription.ShouldSerializeProtectionLevel">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.Description.MessageDescription.ProtectionLevel" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.Description.MessageDescription.ProtectionLevel" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescriptionCollection">
      <summary>提供用于存储消息说明的集合，其中消息为组成协定所属操作的消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.Find(System.String)">
      <summary>查找并返回消息集合中其消息具有指定操作的第一条消息说明。</summary>
      <returns>从集合中返回的具有指定 <paramref name="action" /> 的第一条 <see cref="T:System.ServiceModel.Description.MessageDescription" />，如果找不到匹配的 <paramref name="action" />，则返回 null。</returns>
      <param name="action">正在查找的消息的操作。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.FindAll(System.String)">
      <summary>查找并返回集合中其消息具有指定操作的所有消息说明。</summary>
      <returns>从当前集合返回的包含集合消息说明的 <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" />，这些消息说明的消息具有指定的 <paramref name="action" />。 如果找不到匹配的 <see cref="T:System.ServiceModel.Description.MessageDescription" /> 对象，则返回空集合。</returns>
      <param name="action">正在查找的消息的操作。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDirection">
      <summary>指定消息的方向。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Input">
      <summary>消息是传入的。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Output">
      <summary>消息是传出的。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessageHeaderDescription">
      <summary>表示 SOAP 消息头。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageHeaderDescription.#ctor(System.String,System.String)">
      <summary>利用指定的受限制名称初始化 <see cref="T:System.ServiceModel.Description.MessageHeaderDescription" /> 类的新实例。</summary>
      <param name="name">消息头的名称。</param>
      <param name="ns">消息头的命名空间。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessageHeaderDescription.Actor">
      <summary>获取或设置消息头的目标接收方。</summary>
      <returns>一个 URI，指示消息头的目标接收方。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageHeaderDescription.MustUnderstand">
      <summary>获取或设置一个值，该值指示是否必须按照 SOAP 1.1 和 1.2 规范解释标头。</summary>
      <returns>如果强制要求进行消息标头处理，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageHeaderDescription.Relay">
      <summary>获取一个值，该值指示是否应该中继标头。</summary>
      <returns>如果消息标头可中继，则为 true；否则为 false。 根据 SOAP 1.1 规范，默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageHeaderDescription.TypedHeader">
      <summary>获取或设置一个值，该值指示消息标头是否为消息协定标头。</summary>
      <returns>如果消息头为消息协定标头，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageHeaderDescriptionCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Description.MessageHeaderDescription" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageHeaderDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessageHeaderDescription)">
      <summary>当被派生类调用时，返回消息头的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
      <returns>消息头的 <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
      <param name="item">要定位的 <see cref="T:System.ServiceModel.Description.MessageHeaderDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescription">
      <summary>表示 SOAP 消息部分的说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescription.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> 类的新实例。</summary>
      <param name="name">消息部分的 XML 名称。</param>
      <param name="ns">消息部分的 XML 命名空间。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.HasProtectionLevel">
      <summary>获取一个值，该值指示消息部分是否具有 <see cref="P:System.ServiceModel.Description.MessagePartDescription.ProtectionLevel" /> 属性的值。</summary>
      <returns>如果已经为此消息部分设置了 <see cref="T:System.Net.Security.ProtectionLevel" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Index">
      <summary>获取或设置消息部分的索引。</summary>
      <returns>消息部分的索引。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.MemberInfo">
      <summary>获取或设置消息部分的成员信息。</summary>
      <returns>此消息部分的成员信息。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Multiple">
      <summary>获取或设置一个值，该值控制消息部分是否可在消息中出现多次。</summary>
      <returns>如果可以出现多次，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Name">
      <summary>获取或设置消息部分的名称。</summary>
      <returns>消息部分的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Namespace">
      <summary>获取或设置消息部分的命名空间。</summary>
      <returns>消息部分的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.ProtectionLevel">
      <summary>获取或设置消息部分的 <see cref="T:System.Net.Security.ProtectionLevel" />。</summary>
      <returns>消息部分的 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Type">
      <summary>获取或设置消息部分的类型。</summary>
      <returns>消息部分的类型。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescriptionCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePartDescription)">
      <summary>当被派生类调用时，返回 <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
      <param name="item">要定位的 <see cref="T:System.ServiceModel.Description.MessagePartDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePropertyDescription">
      <summary>表示 <see cref="T:System.ServiceModel.MessagePropertyAttribute" /> 指定的消息属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePropertyDescription.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" /> 类的新实例。</summary>
      <param name="name">属性的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePropertyDescriptionCollection">
      <summary>表示 <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePropertyDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePropertyDescription)">
      <summary>返回 <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
      <param name="item">要定位的 <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataConversionError">
      <summary>表示使用 <see cref="T:System.ServiceModel.Description.MetadataExporter" /> 或 <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 时发生的错误或警报事件。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataConversionError.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 类的新实例。</summary>
      <param name="message">错误或警报消息。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataConversionError.#ctor(System.String,System.Boolean)">
      <summary>使用指定的消息和 <paramref name="isWarning" /> 值初始化 <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 类的新实例。</summary>
      <param name="message">警报或错误消息。</param>
      <param name="isWarning">
        <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 可为错误或警报。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataConversionError.Equals(System.Object)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 对象的值是否相等。</summary>
      <returns>如果两个 <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 对象的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此对象进行比较的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataConversionError.GetHashCode">
      <summary>返回一个用作 <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 对象的哈希函数的值。</summary>
      <returns>一个适用于哈希算法和诸如哈希表之类的数据结构的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataConversionError.IsWarning">
      <summary>获取一个值，该值指示 <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 是警告还是错误。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 将被视为警报，则为 true；否则，为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataConversionError.Message">
      <summary>获取错误或警报消息。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 的消息。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataExchangeBindings">
      <summary>用于通过使用 <see cref="T:System.ServiceModel.Description.IMetadataExchange" /> 协定，为 WS-Transfer 元数据交换创建系统提供的绑定。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeBindings.CreateMexHttpBinding">
      <summary>返回安全性已禁用的 <see cref="T:System.ServiceModel.WSHttpBinding" />。</summary>
      <returns>安全性已禁用的 <see cref="T:System.ServiceModel.WSHttpBinding" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeBindings.CreateMexHttpsBinding">
      <summary>返回支持传输级安全性的 <see cref="T:System.ServiceModel.WSHttpBinding" />。</summary>
      <returns>一个支持传输级安全性的 <see cref="T:System.ServiceModel.WSHttpBinding" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeBindings.CreateMexNamedPipeBinding">
      <summary>返回带有 <see cref="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement" /> 的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</summary>
      <returns>带有 <see cref="T:System.ServiceModel.Channels.NamedPipeTransportBindingElement" /> 的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeBindings.CreateMexTcpBinding">
      <summary>返回带有 <see cref="T:System.ServiceModel.Channels.TcpTransportBindingElement" /> 的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</summary>
      <returns>带有 <see cref="T:System.ServiceModel.Channels.TcpTransportBindingElement" /> 的 <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataExchangeClient">
      <summary>下载服务元数据。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>使用指定的绑定初始化 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 类的新实例。</summary>
      <param name="mexBinding">使用 WS-Transfer 检索元数据时要使用的绑定。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 类的新实例。</summary>
      <param name="address">元数据地址。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">下载元数据时要使用的终结点配置信息的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.#ctor(System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 类的新实例。</summary>
      <param name="address">元数据的地址。</param>
      <param name="mode">下载元数据时要使用的模式。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.BeginGetMetadata(System.AsyncCallback,System.Object)">
      <summary>开始可返回 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 的异步方法调用。</summary>
      <returns>元数据。</returns>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.BeginGetMetadata(System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)">
      <summary>开始可使用指定地址、回调和异步状态返回 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 的异步方法调用。</summary>
      <returns>从指定的 <paramref name="address" /> 获取的元数据。</returns>
      <param name="address">元数据的地址。</param>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.BeginGetMetadata(System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)">
      <summary>开始可使用指定地址、回调、异步状态和下载机制返回 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 的异步方法调用。</summary>
      <returns>从指定的 <paramref name="address" /> 获取的元数据。</returns>
      <param name="address">元数据的地址。</param>
      <param name="mode">下载元数据时要使用的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 值。</param>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.EndGetMetadata(System.IAsyncResult)">
      <summary>结束可返回 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 的异步方法调用。</summary>
      <returns>包含已下载的元数据的 <see cref="T:System.ServiceModel.Description.MetadataSet" />。</returns>
      <param name="result">从对 <see cref="Overload:System.ServiceModel.Description.MetadataExchangeClient.BeginGetMetadata" /> 方法的调用中接收的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetChannelFactory(System.ServiceModel.EndpointAddress,System.String,System.String)">
      <summary>当在派生类中重写时，返回用于发出 WS-Transfer 元数据请求的通道工厂。</summary>
      <returns>发出 WS-Transfer 元数据请求的 <see cref="T:System.ServiceModel.Channels.IRequestChannel" /> 类型的 <see cref="T:System.ServiceModel.ChannelFactory`1" />。</returns>
      <param name="metadataAddress">元数据地址。</param>
      <param name="dialect">元数据的方言。</param>
      <param name="identifier">元数据的标识符。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetMetadata">
      <summary>返回一个 <see cref="T:System.ServiceModel.Description.MetadataSet" />。</summary>
      <returns>包含已下载的元数据的 <see cref="T:System.ServiceModel.Description.MetadataSet" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetMetadata(System.ServiceModel.EndpointAddress)">
      <summary>从指定的地址返回一个 <see cref="T:System.ServiceModel.Description.MetadataSet" />。</summary>
      <returns>位于 <paramref name="address" /> 的元数据。</returns>
      <param name="address">要从其下载元数据的地址。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetMetadata(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>从指定的地址和指定的路由返回 <see cref="T:System.ServiceModel.Description.MetadataSet" />。</summary>
      <returns>已下载的元数据。</returns>
      <param name="address">要从其下载元数据的地址。</param>
      <param name="via">表示用于获取消息的路由的 URI 地址。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetMetadata(System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)">
      <summary>使用指定的下载模式从指定的地址返回一个 <see cref="T:System.ServiceModel.Description.MetadataSet" />。</summary>
      <returns>已下载的元数据。</returns>
      <param name="address">要从其下载元数据的地址。</param>
      <param name="mode">要使用的下载机制。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetMetadataAsync">
      <summary>返回已设置的异步元数据。</summary>
      <returns>已设置的异步元数据。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetMetadataAsync(System.ServiceModel.EndpointAddress)">
      <summary>从指定的地址返回已设置的异步元数据。</summary>
      <returns>位于地址处的异步元数据。</returns>
      <param name="address">要异步从其下载元数据的地址</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetMetadataAsync(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>从指定的地址和指定的路由返回已设置的异步元数据。</summary>
      <returns>已下载的元数据。</returns>
      <param name="address">要从其下载元数据的地址。</param>
      <param name="via">表示用于获取消息的路由的 URI 地址。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetMetadataAsync(System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)">
      <summary>使用指定的下载模式从指定的地址返回已设置的异步元数据</summary>
      <returns>已下载的元数据。</returns>
      <param name="address">要从其下载元数据的地址。</param>
      <param name="mode">要使用的下载机制。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExchangeClient.GetWebRequest(System.Uri,System.String,System.String)">
      <summary>当在派生类中重写时，返回用于发出 HTTP/GET 元数据请求的 <see cref="T:System.Net.HttpWebRequest" />。</summary>
      <returns>用于发出 HTTP GET 元数据请求的内部 <see cref="T:System.Net.HttpWebRequest" />。</returns>
      <param name="location">元数据的位置。</param>
      <param name="dialect">元数据的方言。</param>
      <param name="identifier">元数据的标识符。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataExchangeClient.HttpCredentials">
      <summary>获取或设置用于发出 HTTP/GET 请求的凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 对象用于建立申请凭据。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataExchangeClient.MaximumResolvedReferences">
      <summary>获取或设置对 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 下载的元数据的引用的最大数目。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" /> 解析的元数据引用的数目。 默认值为 10。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataExchangeClient.OperationTimeout">
      <summary>获取或设置一个时间段，必须在引发异常之前的此时间段内下载元数据。</summary>
      <returns>必须在其内下载元数据的时间段；默认值为 1 分钟。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataExchangeClient.ResolveMetadataReferences">
      <summary>获取或设置一个值，该值控制是否解析对元数据的引用。</summary>
      <returns>如果解析对元数据的引用，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataExchangeClient.SoapCredentials">
      <summary>获取或设置用于发出 WS-Transfer 元数据请求的客户端安全凭据。</summary>
      <returns>用于发出 WS-Transfer 元数据请求的客户端安全凭据。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataExchangeClientMode">
      <summary>指定用于获取元数据的交换模式。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MetadataExchangeClientMode.HttpGet">
      <summary>使用 HTTP GET 请求。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MetadataExchangeClientMode.MetadataExchange">
      <summary>使用 WS-Transfer Get 请求。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataExporter">
      <summary>将服务说明信息导出到元数据中。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataExporter.Errors">
      <summary>获取元数据导出过程中发生的错误的集合。</summary>
      <returns>发生的导出错误。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExporter.ExportContract(System.ServiceModel.Description.ContractDescription)">
      <summary>当在派生类中重写时，将协定描述导出到元数据中。</summary>
      <param name="contract">要导出的协定。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExporter.ExportEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>当在派生类中重写时，将终结点转换为元数据。</summary>
      <param name="endpoint">要转换的终结点。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExporter.ExportPolicy(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>将策略断言转换为 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> 对象。</summary>
      <returns>包含终结点的策略断言信息的一个对象。 然后策略断言可嵌入到元数据文档中。</returns>
      <param name="endpoint">从中提取策略断言的终结点。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataExporter.GetGeneratedMetadata">
      <summary>当在派生类中重写时，返回由对 <see cref="M:System.ServiceModel.Description.MetadataExporter.ExportContract(System.ServiceModel.Description.ContractDescription)" />, <see cref="M:System.ServiceModel.Description.MetadataExporter.ExportEndpoint(System.ServiceModel.Description.ServiceEndpoint)" /> 或 <see cref="M:System.ServiceModel.Description.MetadataExporter.ExportPolicy(System.ServiceModel.Description.ServiceEndpoint)" /> 的调用生成的元数据。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MetadataSection" /> 对象的可枚举集合，这些对象包含导出的元数据。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataExporter.PolicyVersion">
      <summary>指定正在使用的 WS-Policy 规范的版本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.PolicyVersion" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataExporter.State">
      <summary>获取在元数据的导出中使用的对象的词典。</summary>
      <returns>导入程序用于导出协定和终结点的对象的字典。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataImporter">
      <summary>将元数据导入 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataImporter.Errors">
      <summary>获取指示是否在导入元数据时出现错误的值。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 对象的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataImporter.ImportAllContracts">
      <summary>在派生类中重写时，会返回从元数据导入的协定的集合。</summary>
      <returns>从元数据导入的协定。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints">
      <summary>在派生类中重写时，会返回元数据中的所有终结点。</summary>
      <returns>由服务发布的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataImporter.KnownContracts">
      <summary>获取按导入程序了解的名称排列的协定字典。</summary>
      <returns>按 XML 限定名称列出的协定字典。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions">
      <summary>获取导入程序调用的用于处理策略断言的策略导入程序的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 用于处理策略断言的策略导入程序的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataImporter.State">
      <summary>获取或设置在导入元数据过程中使用的对象的集合。</summary>
      <returns>类型键控的对象字典。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataImporterQuotas">
      <summary>指定派生自 <see cref="T:System.ServiceModel.Description.MetadataImporter" /> 类的元数据导入程序的配额。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataImporterQuotas.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Description.MetadataImporterQuotas" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataImporterQuotas.Defaults">
      <summary>获取元数据导入程序的一组默认配额。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Description.MetadataImporterQuotas" />，它包含元数据导入程序的一组默认配额。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataImporterQuotas.Max">
      <summary>获取元数据导入程序的最大配额值。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Description.MetadataImporterQuotas" />，它包含元数据导入程序的最大配额值。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataLocation">
      <summary>表示元数据文档的地址。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataLocation.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MetadataLocation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataLocation.#ctor(System.String)">
      <summary>初始化可向 <see cref="P:System.ServiceModel.Description.MetadataLocation.Location" /> 属性分配所指定元数据位置的 <see cref="T:System.ServiceModel.Description.MetadataLocation" /> 类的新实例，</summary>
      <param name="location">元数据文档的地址。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataLocation.Location">
      <summary>获取或设置元数据文档的地址。</summary>
      <returns>元数据文档的地址。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataReference">
      <summary>表示对从元数据交换终结点返回的元数据文档的引用。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataReference.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MetadataReference" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataReference.#ctor(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.AddressingVersion)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MetadataReference" /> 类的一个新实例，并指定终结点的网络地址和地址版本。</summary>
      <param name="address">一个包含终结点 URI 的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="addressVersion">一个包含由终结点实现的 WS-Addressing 版本的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataReference.Address">
      <summary>获取或设置返回元数据的服务的网络地址。</summary>
      <returns>返回元数据的终结点。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataReference.AddressVersion">
      <summary>获取或设置在终结点中实现或由终结点使用的版本。</summary>
      <returns>一个表示在终结点中实现或由终结点使用的版本的 <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataReference.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>返回元数据引用终结点的 XML 架构文档。</summary>
      <returns>一个表示元数据终结点引用的 XML 架构文档 (XSD) 的 <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataReference.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>使用提供的读取器对象读取。</summary>
      <param name="reader">用于读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataReference.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>使用指定的编写器对象写入 XML 流。</summary>
      <param name="writer">用于写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataResolver">
      <summary>将元数据作为 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象进行检索和导入。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)">
      <summary>使用指定地址和异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的异步调用。</summary>
      <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="contracts">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
      <exception cref="T:System.ArgumentNullException">地址、协定或回调为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contracts" /> 为空，<paramref name="contracts" /> 至少有一个成员为 null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)">
      <summary>使用指定的地址、<see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />、异步状态和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的异步调用。</summary>
      <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="contracts">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="client">用于解析元数据的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
      <exception cref="T:System.ArgumentNullException">地址、协定、客户端或回调为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)">
      <summary>使用指定地址、<see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 值和异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的异步调用。</summary>
      <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="contracts">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="mode">检索的模式。</param>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
      <exception cref="T:System.ArgumentNullException">地址、协定或回调为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)">
      <summary>使用指定地址、<see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />、<see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" />、异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的异步调用。</summary>
      <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="contracts">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="mode">检索的模式。</param>
      <param name="client">用于解析元数据的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
      <exception cref="T:System.ArgumentNullException">地址、协定或回调为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)">
      <summary>使用指定地址和异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的异步调用。</summary>
      <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="contract">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
      <exception cref="T:System.ArgumentNullException">地址、协定或回调为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)">
      <summary>使用指定地址、<see cref="T:System.ServiceModel.Description.MetadataExchangeClientMode" /> 和异步语句和委托，开始一个可将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的异步调用。</summary>
      <returns>引用异步解析操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="contract">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="mode">检索的模式。</param>
      <param name="callback">在调用完成时调用的异步回调委托。</param>
      <param name="asyncState">与异步调用关联的状态。</param>
      <exception cref="T:System.ArgumentNullException">地址、协定或回调为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.EndResolve(System.IAsyncResult)">
      <summary>完成异步调用可将元数据解析为终结点的集合。</summary>
      <returns>元数据中包含的终结点的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
      <param name="result">从对 <see cref="Overload:System.ServiceModel.Description.MetadataResolver.BeginResolve" /> 方法的调用中接收的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress)">
      <summary>使用指定元数据地址，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
      <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
      <param name="contracts">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <exception cref="T:System.ArgumentNullException">地址或协定集合为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient)">
      <summary>使用指定元数据地址和 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
      <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
      <param name="contracts">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="client">用于解析元数据的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
      <exception cref="T:System.ArgumentNullException">地址、协定集合或客户端为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)">
      <summary>使用指定地址和传输模式，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
      <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
      <param name="contracts">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="mode">检索的模式。</param>
      <exception cref="T:System.ArgumentNullException">地址或协定集合为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient)">
      <summary>使用指定地址、传输模式和传输客户端，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
      <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
      <param name="contracts">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="mode">检索的模式。</param>
      <param name="client">用于解析元数据的 <see cref="T:System.ServiceModel.Description.MetadataExchangeClient" />。</param>
      <exception cref="T:System.ArgumentNullException">地址、协定集合或客户端为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contracts" /> 为空，<paramref name="contracts" /> 的至少一个成员为 null，或者 <paramref name="contracts" /> 包含多个具有相同名称和命名空间的协定。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.ServiceModel.EndpointAddress)">
      <summary>下载元数据地址并将其解析为指定地址处的指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</summary>
      <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
      <param name="contract">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <exception cref="T:System.ArgumentNullException">地址或协定为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)">
      <summary>使用指定地址和传输模式，将元数据地址解析为指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</summary>
      <returns>指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象的集合。</returns>
      <param name="contract">要为其下载和解析元数据的协定。</param>
      <param name="address">元数据地址。</param>
      <param name="mode">检索的模式。</param>
      <exception cref="T:System.ArgumentNullException">地址或协定为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataSection">
      <summary>表示 XML 元数据或对 XML 元数据的引用。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSection.#ctor">
      <summary>在不使用方言、标识符或 XML 元数据的情况下初始化 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSection.#ctor(System.String,System.String,System.Object)">
      <summary>使用指定的方言、标识符和 XML 元数据初始化 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 类的一个新实例。</summary>
      <param name="dialect">元数据的方言。</param>
      <param name="identifier">元数据的标识符。</param>
      <param name="metadata">XML 元数据。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSection.Attributes">
      <summary>获取 XML 属性的集合，您可以使用这些属性添加或移除元数据中的属性扩展。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MetadataSection" /> 的 XML 属性集合。 默认集合为空。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSection.CreateFromPolicy(System.Xml.XmlElement,System.String)">
      <summary>从指定的策略信息创建 <see cref="T:System.ServiceModel.Description.MetadataSection" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.MetadataSection" />，其中包含具有指定标识符的指定策略表达式。</returns>
      <param name="policy">WS-Policy 中定义的策略的 XML 表示形式。</param>
      <param name="identifier">策略的标识符。</param>
      <exception cref="T:System.ArgumentException">XML 元素不是策略元素。</exception>
      <exception cref="T:System.ArgumentNullException">该策略为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSection.CreateFromSchema(System.Xml.Schema.XmlSchema)">
      <summary>从指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象创建 <see cref="T:System.ServiceModel.Description.MetadataSection" />。</summary>
      <returns>包含指定 XML 架构的 <see cref="T:System.ServiceModel.Description.MetadataSection" />。</returns>
      <param name="schema">XML 架构文档。</param>
      <exception cref="T:System.ArgumentNullException">架构为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSection.CreateFromServiceDescription(System.Web.Services.Description.ServiceDescription)">
      <summary>返回一个 <see cref="T:System.ServiceModel.Description.MetadataSection" />，其中包含指定的 <see cref="T:System.Web.Services.Description.ServiceDescription" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.MetadataSection" />，其中包含指定的 <see cref="T:System.Web.Services.Description.ServiceDescription" />。</returns>
      <param name="serviceDescription">用于创建 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 对象的 <see cref="T:System.Web.Services.Description.ServiceDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceDescription" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSection.Dialect">
      <summary>获取或设置一个指示元数据类型的值。</summary>
      <returns>元数据的方言。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSection.Identifier">
      <summary>获取或设置元数据的标识符。</summary>
      <returns>元数据的标识符。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSection.Metadata">
      <summary>获取或设置包含的元数据对象。</summary>
      <returns>此 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 的元数据内容。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSection.MetadataExchangeDialect">
      <summary>包含元数据交换方言的值。</summary>
      <returns>WS-Metadata Exchange 文档的方言。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSection.PolicyDialect">
      <summary>包含 WS-Policy 方言的值。</summary>
      <returns>WS-Policy 策略表达式的方言。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSection.ServiceDescriptionDialect">
      <summary>包含 Web 服务描述语言 (WSDL) 方言的值。</summary>
      <returns>WSDL 文档的方言。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSection.XmlSchemaDialect">
      <summary>包含 XML 架构方言的值。</summary>
      <returns>XML 架构文档的方言。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MetadataSet">
      <summary>表示 XML 格式的服务元数据的可序列化集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSet.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSet.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.MetadataSection})">
      <summary>初始化包含指定的 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 对象集合的 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 类的一个新实例。</summary>
      <param name="sections">
        <see cref="T:System.ServiceModel.Description.MetadataSet" /> 将包含的元数据值。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSet.Attributes">
      <summary>获取以 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 的序列化格式出现的 <see cref="T:System.Xml.XmlAttribute" /> 对象的集合。</summary>
      <returns>以 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 的序列化格式出现的 <see cref="T:System.Xml.XmlAttribute" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MetadataSet.MetadataSections">
      <summary>获取表示元数据的 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 对象的集合。</summary>
      <returns>表示元数据的 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 对象的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSet.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 对象返回一个 <see cref="T:System.ServiceModel.Description.MetadataSet" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.MetadataSet" />，其中包含 XML 流中存在的所有元数据。</returns>
      <param name="reader">要读入 XML 的读取器。</param>
      <exception cref="T:System.ArgumentNullException">读取器为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> 方法以提供序列化支持。</summary>
      <returns>返回 <see cref="T:System.Xml.Schema.XmlSchema" />。 返回 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象，该对象描述由 <see cref="M:System.ServiceModel.Description.MetadataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.ServiceModel.Description.MetadataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法访问的对象的 XML 表示形式。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法以支持从 XML 反序列化。</summary>
      <param name="reader">读取 XML 时要使用的读取器。</param>
      <exception cref="T:System.ArgumentNullException">读取器为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法以支持到 XML 的序列化。</summary>
      <param name="writer">写入 XML 时要使用的编写器。</param>
      <exception cref="T:System.ArgumentNullException">编写器为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.MetadataSet.WriteTo(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 将 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 写入 XML。</summary>
      <param name="writer">用于写入 XML 的编写器。</param>
      <exception cref="T:System.ArgumentNullException">编写器为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Description.MustUnderstandBehavior">
      <summary>指示 Windows Communication Foundation (WCF) 不在 <see cref="P:System.ServiceModel.Channels.MessageHeaders.UnderstoodHeaders" /> 集合中禁用标头的强制处理，根据 SOAP 1.1 和 1.2 规范，必须了解该集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MustUnderstandBehavior.#ctor(System.Boolean)">
      <summary>使用指定的值初始化 <see cref="T:System.ServiceModel.Description.MustUnderstandBehavior" /> 类的新实例。</summary>
      <param name="validate">一个值，指定是否强制执行 mustUnderstand 头的验证。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MustUnderstandBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>支持行为功能。</summary>
      <param name="serviceEndpoint">该行为所应用到的终结点。</param>
      <param name="bindingParameters">该行为的绑定参数。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MustUnderstandBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>将 <see cref="P:System.ServiceModel.Description.MustUnderstandBehavior.ValidateMustUnderstand" /> 的值分配给 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.ValidateMustUnderstand" /> 属性。</summary>
      <param name="serviceEndpoint">该行为所应用到的终结点。</param>
      <param name="behavior">要设置的客户端运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MustUnderstandBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>将 <see cref="P:System.ServiceModel.Description.MustUnderstandBehavior.ValidateMustUnderstand" /> 的值分配给 <see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.ValidateMustUnderstand" /> 属性。</summary>
      <param name="serviceEndpoint">该行为所应用到的终结点。</param>
      <param name="endpointDispatcher">要设置的调度程序。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MustUnderstandBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>支持行为功能。</summary>
      <param name="serviceEndpoint">要验证的终结点。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MustUnderstandBehavior.ValidateMustUnderstand">
      <summary>获取或设置一个值，该值指定是否确保按照 SOAP 1.1 和 1.2 规范解释标头。</summary>
      <returns>如果必须正确处理标头否则会引发错误，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationContractGenerationContext">
      <summary>传递给 <see cref="M:System.ServiceModel.Description.IOperationContractGenerationExtension.GenerateOperation(System.ServiceModel.Description.OperationContractGenerationContext)" /> 方法可以在生成代码之前修改操作协定及其上下文。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationContractGenerationContext.#ctor(System.ServiceModel.Description.ServiceContractGenerator,System.ServiceModel.Description.ServiceContractGenerationContext,System.ServiceModel.Description.OperationDescription,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod)">
      <summary>使用指定的协定生成器、协定上下文、操作说明、代码类型声明、同步方法和任务方法初始化 <see cref="T:System.ServiceModel.Description.OperationContractGenerationContext" /> 类的新实例。</summary>
      <param name="serviceContractGenerator">生成代码的服务协定生成器。</param>
      <param name="contract">协定及其生成上下文。</param>
      <param name="operation">要生成的操作的操作说明。</param>
      <param name="declaringType">声明代码类型。</param>
      <param name="method">要生成的方法。</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationContractGenerationContext.#ctor(System.ServiceModel.Description.ServiceContractGenerator,System.ServiceModel.Description.ServiceContractGenerationContext,System.ServiceModel.Description.OperationDescription,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod)">
      <summary>使用指定的协定生成器、协定上下文、操作说明、代码类型声明和方法初始化 <see cref="T:System.ServiceModel.Description.OperationContractGenerationContext" /> 类的新实例。</summary>
      <param name="serviceContractGenerator">生成代码的服务协定生成器。</param>
      <param name="contract">协定及其生成上下文。</param>
      <param name="operation">要生成的操作的操作说明。</param>
      <param name="declaringType">声明代码类型。</param>
      <param name="syncMethod">待生成的同步方法。</param>
      <param name="taskMethod">使用的目标方法。</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationContractGenerationContext.#ctor(System.ServiceModel.Description.ServiceContractGenerator,System.ServiceModel.Description.ServiceContractGenerationContext,System.ServiceModel.Description.OperationDescription,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.OperationContractGenerationContext" /> 类的新实例。</summary>
      <param name="serviceContractGenerator">生成代码的服务协定生成器。</param>
      <param name="contract">协定及其生成上下文。</param>
      <param name="operation">要生成的操作的操作说明。</param>
      <param name="declaringType">声明代码类型。</param>
      <param name="syncMethod">同步方法。</param>
      <param name="beginMethod">异步开始方法。</param>
      <param name="endMethod">异步结束方法。</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationContractGenerationContext.#ctor(System.ServiceModel.Description.ServiceContractGenerator,System.ServiceModel.Description.ServiceContractGenerationContext,System.ServiceModel.Description.OperationDescription,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod)">
      <summary>使用指定的协定生成器、协定上下文、操作说明、代码类型声明、同步方法、开始方法和方法初始化 <see cref="T:System.ServiceModel.Description.OperationContractGenerationContext" /> 类的新实例。</summary>
      <param name="serviceContractGenerator">生成代码的服务协定生成器。</param>
      <param name="contract">协定及其生成上下文。</param>
      <param name="operation">要生成的操作的操作说明。</param>
      <param name="declaringType">声明代码类型。</param>
      <param name="syncMethod">待生成的同步方法。</param>
      <param name="beginMethod">异步开始方法。</param>
      <param name="endMethod">异步结束方法。</param>
      <param name="taskMethod">使用的目标方法。</param>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.BeginMethod">
      <summary>获取异步开始操作的 <see cref="T:System.CodeDom.CodeMemberMethod" />。</summary>
      <returns>异步开始操作的 <see cref="T:System.CodeDom.CodeMemberMethod" />。 如果该操作是同步操作，则返回 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.Contract">
      <summary>获取服务协定的代码生成上下文。</summary>
      <returns>当前操作的 <see cref="T:System.ServiceModel.Description.ServiceContractGenerationContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.DeclaringType">
      <summary>获取当前操作的声明类型。</summary>
      <returns>当前操作的声明类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.EndMethod">
      <summary>获取异步结束操作声明。</summary>
      <returns>异步结束操作。 如果该操作是同步操作，则返回 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.IsAsync">
      <summary>获取一个值，该值指示是否为当前操作生成异步方法。</summary>
      <returns>如果该操作是异步操作，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.IsTask">
      <summary>获取一个值，该值指示是否为当前操作生成一个任务。</summary>
      <returns>如果已为当前操作生成任务，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.Operation">
      <summary>获取当前操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</summary>
      <returns>当前操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.ServiceContractGenerator">
      <summary>获取生成当前操作的 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" />。</summary>
      <returns>生成当前操作的 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.SyncMethod">
      <summary>获取同步操作的 <see cref="T:System.CodeDom.CodeMemberMethod" />。</summary>
      <returns>同步操作的 <see cref="T:System.CodeDom.CodeMemberMethod" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationContractGenerationContext.TaskMethod">
      <summary>获取任务操作的 <see cref="T:System.CodeDom.CodeMemberMethod" />。</summary>
      <returns>任务操作的 <see cref="T:System.CodeDom.CodeMemberMethod" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescription">
      <summary>表示协定操作的说明，该协定操作可提供组成操作的消息的说明。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescription.#ctor(System.String,System.ServiceModel.Description.ContractDescription)">
      <summary>使用指定的名称和协定说明初始化 <see cref="T:System.ServiceModel.Description.OperationDescription" /> 类的新实例。</summary>
      <param name="name">操作说明的名称。</param>
      <param name="declaringContract">用于初始化操作说明的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.BeginMethod">
      <summary>获取或设置操作的开始方法。</summary>
      <returns>可用于访问该方法的属性和元数据的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Behaviors">
      <summary>获取或设置与此操作关联的操作行为。</summary>
      <returns>一个包含与此操作关联的 <see cref="T:System.ServiceModel.Description.IOperationBehavior" /> 对象的 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.DeclaringContract">
      <summary>获取或设置该操作所属的协定。</summary>
      <returns>操作的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.EndMethod">
      <summary>获取或设置操作的结束方法。</summary>
      <returns>可用于访问该方法的属性和元数据的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Faults">
      <summary>获取与操作说明关联的错误的说明。</summary>
      <returns>包含与操作说明关联的错误的详细信息的 <see cref="T:System.ServiceModel.Description.FaultDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.HasProtectionLevel">
      <summary>获取一个值，该值指示操作是否已设置保护级别。</summary>
      <returns>如果已经设置了保护级别，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsInitiating">
      <summary>获取或设置一个值，该值指示方法是否实现可在服务器上启动会话（如果存在会话）的操作。</summary>
      <returns>如果允许操作启动服务器上的会话，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsOneWay">
      <summary>获取或设置一个值，该值指示操作是否返回答复消息。</summary>
      <returns>如果此方法收到请求消息，但未返回任何答复消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsTerminating">
      <summary>获取或设置一个值，该值指示服务操作在发送答复消息（如果存在）后，是否会导致服务器关闭会话。</summary>
      <returns>如果该操作会导致服务器关闭会话，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.KnownTypes">
      <summary>获取与操作说明关联的已知类型。</summary>
      <returns>与操作说明关联的已知类型的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Messages">
      <summary>获取或设置组成操作的消息的说明。</summary>
      <returns>包含组成操作的消息的说明的 <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Name">
      <summary>获取或设置操作说明的名称。</summary>
      <returns>操作说明的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.OperationBehaviors">
      <summary>获取操作的行为集。</summary>
      <returns>操作的行为集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.ProtectionLevel">
      <summary>获取或设置操作的保护级别。</summary>
      <returns>操作的 <see cref="T:System.Net.Security.ProtectionLevel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescription.ShouldSerializeProtectionLevel">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.Description.OperationDescription.ProtectionLevel" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.Description.OperationDescription.ProtectionLevel" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.SyncMethod">
      <summary>获取或设置操作说明的服务同步方法。</summary>
      <returns>可访问该方法的属性和元数据的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.TaskMethod">
      <summary>获取或设置用于任务操作的方法。</summary>
      <returns>用于任务操作的方法。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescriptionCollection">
      <summary>表示包含操作说明的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.Find(System.String)">
      <summary>从操作说明集合返回带有指定名称的操作说明。</summary>
      <returns>带有指定名称的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</returns>
      <param name="name">操作的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.FindAll(System.String)">
      <summary>从操作说明集合中返回所有具有指定名称的操作说明的集合。</summary>
      <returns>包含带有指定名称的操作说明的类型为 <see cref="T:System.ServiceModel.Description.OperationDescription" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
      <param name="name">操作的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.InsertItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>将元素插入操作说明集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.SetItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>替换操作说明集合中的指定索引处的元素。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要设置的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Description.ParameterXPathQueryGenerator">
      <summary>允许从数据协定创建 XPath。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ParameterXPathQueryGenerator.CreateFromDataContractSerializer(System.Xml.Linq.XName,System.String,System.String,System.Boolean,System.Type,System.Reflection.MemberInfo[],System.Xml.XmlNamespaceManager@)">
      <summary>使用指定的操作名称、参数名称和数据协定信息创建 XPath。</summary>
      <returns>使用指定的操作名称、参数名称和数据协定信息生成的 XPath。</returns>
      <param name="serviceContractName">包含服务协定命名空间的服务协定 XML 元素的名称。</param>
      <param name="operationName">服务操作的名称。</param>
      <param name="parameterName">服务操作参数的名称。</param>
      <param name="isReply">如果服务操作为响应；则为 true；否则为 false。</param>
      <param name="type">数据协定。</param>
      <param name="pathToMember">使用 <see cref="T:System.Type" /> 类的 <see cref="M:System.Type.GetMember(System.String)" /> 方法生成的元数据，指向用于生成查询的特定数据成员。</param>
      <param name="namespaces">返回此方法时，包含在数据协定中找到的 XML 命名空间及其前缀。 在此方法中传递此参数之前，对其进行实例化。</param>
    </member>
    <member name="T:System.ServiceModel.Description.PolicyAssertionCollection">
      <summary>包含策略断言。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.PolicyAssertionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlElement})">
      <summary>使用指定的 <see cref="T:System.Xml.XmlElement" /> 对象初始化 <see cref="T:System.ServiceModel.Description.PolicyAssertionCollection" /> 类。</summary>
      <param name="elements">将包含到集合中的策略断言。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.Contains(System.String,System.String)">
      <summary>返回一个指示集合是否包含指定策略断言的值。</summary>
      <returns>如果集合包含指定的策略断言，则为 true；否则为 false。</returns>
      <param name="localName">策略断言的名称。</param>
      <param name="namespaceUri">策略断言的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.Find(System.String,System.String)">
      <summary>返回指定的策略断言。</summary>
      <returns>指定的策略断言，如果找不到断言，则为 null。</returns>
      <param name="localName">策略断言的本地名称。</param>
      <param name="namespaceUri">策略断言的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.FindAll(System.String,System.String)">
      <summary>返回所有指定的策略断言。</summary>
      <returns>与规范匹配的所有策略断言的集合，或空集合。</returns>
      <param name="localName">策略断言的本地名称。</param>
      <param name="namespaceUri">策略断言的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.InsertItem(System.Int32,System.Xml.XmlElement)">
      <summary>将指定策略断言插入到集合中的指定索引处。</summary>
      <param name="index">要插入 <paramref name="item" /> 的位置的索引。</param>
      <param name="item">要在 <paramref name="index" /> 处插入的策略断言。 该断言不能为空。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.Remove(System.String,System.String)">
      <summary>从该集合中移除指定的策略断言。</summary>
      <returns>从该集合移除的策略断言；或者，如果策略断言不在该集合中，则为 null。</returns>
      <param name="localName">策略断言的本地名称。</param>
      <param name="namespaceUri">策略断言的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.RemoveAll(System.String,System.String)">
      <summary>移除与指定名称和命名空间匹配的所有策略断言。</summary>
      <returns>所有移除的策略断言的集合；或者，如果未找到与指定名称和命名空间匹配的断言，则为空集合。</returns>
      <param name="localName">策略断言的本地名称。</param>
      <param name="namespaceUri">策略断言的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyAssertionCollection.SetItem(System.Int32,System.Xml.XmlElement)">
      <summary>用指定的策略断言替换指定索引处的策略断言。</summary>
      <param name="index">包含要替换的断言的索引。</param>
      <param name="item">要替换 <paramref name="index" /> 处已有断言的策略断言。 该断言不能为空。</param>
    </member>
    <member name="T:System.ServiceModel.Description.PolicyConversionContext">
      <summary>定义用于检索元数据中的绑定断言并在适当范围内附加实现绑定元素的类。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyConversionContext.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>使用指定的终点初始化 <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> 类的新实例。</summary>
      <param name="endpoint">策略上下文的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.PolicyConversionContext.BindingElements">
      <summary>获取实现策略断言的自定义绑定元素所要添加到的绑定元素的集合。</summary>
      <returns>一个包含终结点的绑定元素的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.PolicyConversionContext.Contract">
      <summary>获取终结点的协定。</summary>
      <returns>终结点的联系人。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions">
      <summary>从元数据获取策略断言的集合。</summary>
      <returns>一个包含绑定策略断言的类型为 <see cref="T:System.Xml.XmlElement" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyConversionContext.GetFaultBindingAssertions(System.ServiceModel.Description.FaultDescription)">
      <summary>返回指定 SOAP 错误的策略断言的集合。</summary>
      <returns>指定 SOAP 错误的策略断言的集合。</returns>
      <param name="fault">为其添加策略断言或为其配置绑定的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions(System.ServiceModel.Description.MessageDescription)">
      <summary>获取消息的策略断言的集合。</summary>
      <returns>指定消息的策略断言的集合。</returns>
      <param name="message">拥有绑定断言的 <see cref="T:System.ServiceModel.Description.MessageDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions(System.ServiceModel.Description.OperationDescription)">
      <summary>返回指定操作的策略断言的集合。</summary>
      <returns>操作的策略断言。</returns>
      <param name="operation">为其添加策略断言或为其配置绑定的 <see cref="T:System.ServiceModel.Description.OperationDescription" /> 对象。</param>
    </member>
    <member name="T:System.ServiceModel.Description.PolicyVersion">
      <summary>一个类，用于指定使用的 WS-Policy 规范的版本。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.PolicyVersion.Default">
      <summary>获取默认 WS-Policy 版本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.PolicyVersion" /> 实例，指定默认策略版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.PolicyVersion.Namespace">
      <summary>获取策略版本的命名空间。</summary>
      <returns>一个包含 WS-Policy 命名空间的字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.PolicyVersion.Policy12">
      <summary>获取表示 WS-Policy 1.2 的一个 <see cref="T:System.ServiceModel.Description.PolicyVersion" /> 实例。</summary>
      <returns>表示 WS-Policy 1.2 的一个 <see cref="T:System.ServiceModel.Description.PolicyVersion" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.PolicyVersion.Policy15">
      <summary>获取表示 WS-Policy 1.5 的一个 <see cref="T:System.ServiceModel.Description.PolicyVersion" /> 实例。</summary>
      <returns>表示 WS-Policy 1.5 的一个 <see cref="T:System.ServiceModel.Description.PolicyVersion" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.PolicyVersion.ToString">
      <summary>将 <see cref="T:System.ServiceModel.Description.PolicyVersion" /> 实例转换为字符串表示形式。</summary>
      <returns>正在使用的 WS-Policy 版本的命名空间。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.PrincipalPermissionMode">
      <summary>设置使用 <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute" /> 对方法访问进行控制时所执行的授权检查的模式。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.PrincipalPermissionMode.Always">
      <summary>始终允许用户为 <see cref="P:System.Threading.Thread.CurrentPrincipal" /> 指定 <see cref="T:System.Security.Principal.IPrincipal" /> 类。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.PrincipalPermissionMode.Custom">
      <summary>使用户能够为 <see cref="P:System.Threading.Thread.CurrentPrincipal" /> 指定自定义 <see cref="T:System.Security.Principal.IPrincipal" /> 类。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.PrincipalPermissionMode.None">
      <summary>未设置 <see cref="P:System.Threading.Thread.CurrentPrincipal" />。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles">
      <summary>
        <see cref="P:System.Threading.Thread.CurrentPrincipal" /> 的设置是基于 ASP.NET 角色提供程序 (<see cref="T:System.Web.Security.RoleProvider" />) 进行的。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups">
      <summary>
        <see cref="P:System.Threading.Thread.CurrentPrincipal" /> 的设置是基于 Windows (<see cref="T:System.Security.Principal.WindowsPrincipal" />) 进行的。 如果用户标识不与 Windows 帐户关联，则将使用匿名 Windows 用户。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceAuthenticationBehavior">
      <summary>描述服务的身份验证行为。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthenticationBehavior.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Description.ServiceAuthenticationBehavior" /> 的一个新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceAuthenticationBehavior.AuthenticationSchemes">
      <summary>获取或设置表示服务使用的身份验证方案的值。</summary>
      <returns>服务所使用的身份验证方案。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceAuthenticationBehavior.ServiceAuthenticationManager">
      <summary>获取与此行为关联的 <see cref="T:System.ServiceModel.ServiceAuthenticationManager" />。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.ServiceAuthenticationManager" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthenticationBehavior.ShouldSerializeAuthenticationSchemes">
      <summary>返回是否服务应序列化身份验证方案。</summary>
      <returns>如果此项服务序列化身份验证方案，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthenticationBehavior.ShouldSerializeServiceAuthenticationManager">
      <summary>如果应序列化 <see cref="T:System.ServiceModel.ServiceAuthenticationManager" />，则为 true；否则为 false。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthenticationBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>
        <see cref="T:System.ServiceModel.Description.IServiceBehavior. AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> 方法的实现。</summary>
      <param name="description">服务的服务说明。</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">服务终结点。</param>
      <param name="parameters">绑定元素可访问的自定义对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthenticationBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>
        <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> 方法的实现。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">当前正在生成的宿主。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthenticationBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>
        <see cref="M:System.ServiceModel.Description.ServiceAuthenticationBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> 方法的实现。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">当前正在构建的服务宿主。</param>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceAuthorizationBehavior">
      <summary>提供与服务授权行为相关的属性。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthorizationBehavior.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceAuthorizationBehavior" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies">
      <summary>获取或设置外部授权策略的集合。</summary>
      <returns>外部授权策略的集合。</returns>
      <exception cref="T:System.InvalidOperationException">行为是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations">
      <summary>获取或设置一个值，该值指示服务是否模拟它所支持的所有操作。</summary>
      <returns>如果服务模拟它支持的所有操作，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">行为是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateOnSerializingReply">
      <summary>获取或设置指示服务是否对序列化回复执行模拟的值。</summary>
      <returns>如果服务执行序列化答复的模拟，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode">
      <summary>获取或设置主体权限模式。</summary>
      <returns>主体权限模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider">
      <summary>获取或设置自定义角色提供程序。</summary>
      <returns>一个自定义角色提供程序。</returns>
      <exception cref="T:System.InvalidOperationException">行为是只读的。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager">
      <summary>获取或设置服务授权管理器。</summary>
      <returns>该服务授权管理器。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies">
      <summary>Returns a value that indicates whether the <see cref="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies" /> property has changed from its default value and should be serialized.</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager">
      <summary>返回一个值，该值指示 <see cref="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager" /> 属性是否已更改，不再是默认值且应对其进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>用于向绑定元素传递自定义数据，以支持协定实现。</summary>
      <param name="description">服务的服务说明。</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">服务终结点。</param>
      <param name="parameters">绑定元素可访问的自定义对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>定义一个显式接口实现，添加调度行为以配置绑定。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">当前正在生成的宿主。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>用于检查服务宿主和服务说明，从而确定服务是否可成功运行。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">当前正在构建的服务宿主。</param>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceContractGenerationContext">
      <summary>传递给 <see cref="M:System.ServiceModel.Description.IServiceContractGenerationExtension.GenerateContract(System.ServiceModel.Description.ServiceContractGenerationContext)" /> 方法，以能在生成代码之前对服务协定及其上下文进行修改。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerationContext.#ctor(System.ServiceModel.Description.ServiceContractGenerator,System.ServiceModel.Description.ContractDescription,System.CodeDom.CodeTypeDeclaration)">
      <summary>使用指定的协定生成器、协定说明和协定代码类型声明初始化 <see cref="T:System.ServiceModel.Description.ServiceContractGenerationContext" /> 类的新实例。</summary>
      <param name="serviceContractGenerator">可为协定生成代码的生成器。</param>
      <param name="contract">要生成的协定的协定说明。</param>
      <param name="contractType">要生成的协定代码的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerationContext.#ctor(System.ServiceModel.Description.ServiceContractGenerator,System.ServiceModel.Description.ContractDescription,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeDeclaration)">
      <summary>使用指定的协定生成器、协定说明和协定代码类型声明初始化 <see cref="T:System.ServiceModel.Description.ServiceContractGenerationContext" /> 类的新实例。</summary>
      <param name="serviceContractGenerator">可为协定生成代码的生成器。</param>
      <param name="contract">要生成的协定的协定说明。</param>
      <param name="contractType">要生成的协定代码的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <param name="duplexCallbackType">要生成的双向协定代码的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerationContext.Contract">
      <summary>获取当前协定的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</summary>
      <returns>当前协定的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerationContext.ContractType">
      <summary>获取当前协定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</summary>
      <returns>当前协定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerationContext.DuplexCallbackType">
      <summary>获取服务协定上的双向回调协定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</summary>
      <returns>服务协定上的双向回调协定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerationContext.Operations">
      <summary>获取表示协定操作的 <see cref="T:System.ServiceModel.Description.OperationContractGenerationContext" /> 对象的集合。</summary>
      <returns>表示协定操作的 <see cref="T:System.ServiceModel.Description.OperationContractGenerationContext" /> 对象的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerationContext.ServiceContractGenerator">
      <summary>获取要生成协定的 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" />。</summary>
      <returns>要生成协定的 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceContractGenerationOptions">
      <summary>表示使用 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" /> 时可用的协定生成选项。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceContractGenerationOptions.AsynchronousMethods">
      <summary>除了同步版本外，为操作生成异步方法。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceContractGenerationOptions.ChannelInterface">
      <summary>生成可从协定接口和 <see cref="T:System.ServiceModel.IClientChannel" /> 派生的接口。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceContractGenerationOptions.ClientClass">
      <summary>生成扩展 <see cref="T:System.ServiceModel.ClientBase`1" /> 的 Windows Communication Foundation (WCF) 客户端类。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceContractGenerationOptions.EventBasedAsynchronousMethods">
      <summary>除了同步版本外，还为操作生成基于事件的异步方法。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceContractGenerationOptions.InternalTypes">
      <summary>导致所有类型标记为内部类型标记。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceContractGenerationOptions.None">
      <summary>没有指定选项。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceContractGenerationOptions.TaskBasedAsynchronousMethod">
      <summary>除了同步版本外，还为操作生成基于任务的异步方法。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceContractGenerationOptions.TypedMessages">
      <summary>生成消息协定。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceContractGenerator">
      <summary>
        <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" /> 类型可以从 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 说明对象生成服务协定代码和绑定配置。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerator.#ctor">
      <summary>利用新 <see cref="T:System.CodeDom.CodeCompileUnit" /> 实例初始化 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerator.#ctor(System.CodeDom.CodeCompileUnit)">
      <summary>用指定的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 实例初始化 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" /> 类的新实例。</summary>
      <param name="targetCompileUnit">用以生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerator.#ctor(System.CodeDom.CodeCompileUnit,System.Configuration.Configuration)">
      <summary>利用指定的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 实例和 <see cref="T:System.Configuration.Configuration" /> 实例初始化 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" /> 类的新实例。</summary>
      <param name="targetCompileUnit">用以生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 实例。</param>
      <param name="targetConfig">用以生成绑定配置的 <see cref="T:System.Configuration.Configuration" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerator.#ctor(System.Configuration.Configuration)">
      <summary>用指定的 <see cref="T:System.Configuration.Configuration" /> 实例初始化 <see cref="T:System.ServiceModel.Description.ServiceContractGenerator" /> 类的新实例。</summary>
      <param name="targetConfig">用以生成绑定配置的 <see cref="T:System.Configuration.Configuration" /> 实例。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerator.Configuration">
      <summary>获取包含所生成的绑定配置的 <see cref="T:System.Configuration.Configuration" /> 实例。</summary>
      <returns>包含所生成的终结点配置的 <see cref="T:System.Configuration.Configuration" /> 的实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerator.Errors">
      <summary>获取生成服务协定代码和终结点配置时生成的 <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MetadataConversionError" /> 对象的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerator.GenerateBinding(System.ServiceModel.Channels.Binding,System.String@,System.String@)">
      <summary>为指定的 <see cref="T:System.ServiceModel.Channels.Binding" /> 实例生成绑定配置。</summary>
      <param name="binding">用以生成绑定配置的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="bindingSectionName">所生成的绑定节的名称。</param>
      <param name="configurationName">所生成的绑定配置的名称。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerator.GenerateServiceContractType(System.ServiceModel.Description.ContractDescription)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 实例生成服务协定类型。</summary>
      <returns>所生成的协定类型的 <see cref="T:System.CodeDom.CodeTypeReference" /> 实例。</returns>
      <param name="contractDescription">用以生成协定类型的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceContractGenerator.GenerateServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement@)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 实例生成服务协定类型和终结点配置。</summary>
      <returns>所生成的协定类型的 <see cref="T:System.CodeDom.CodeTypeReference" /> 实例。</returns>
      <param name="endpoint">用以生成协定类型的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <param name="channelElement">所生成的终结点配置。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerator.NamespaceMappings">
      <summary>获取生成代码时使用的从协定说明命名空间到托管命名空间的映射。</summary>
      <returns>从协定说明命名空间到托管命名空间的映射。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerator.Options">
      <summary>获取或设置服务协定代码的生成选项。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.ServiceContractGenerationOptions" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerator.ReferencedTypes">
      <summary>获取从协定说明到引用协定类型的映射。</summary>
      <returns>从协定说明到所引用协定类型的映射。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceContractGenerator.TargetCompileUnit">
      <summary>为生成服务协定代码获取目标 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceCredentials">
      <summary>配置服务凭据。 使用此类可指定服务的凭据，如 X.509 证书。 此外，使用此类还可指定各种客户端凭据的验证模式，如用户名和密码验证。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceCredentials.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceCredentials.#ctor(System.ServiceModel.Description.ServiceCredentials)">
      <summary>从指定 <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> 初始化 <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> 的新实例。</summary>
      <param name="other">用于初始化新实例的 <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> 实例。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.ClientCertificate">
      <summary>获取此服务的当前客户端证书身份验证和配置设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceCredentials.Clone">
      <summary>创建当前实例的副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceCredentials.CloneCore">
      <summary>复制当前实例的必要成员。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceCredentials.CreateSecurityTokenManager">
      <summary>为此服务创建令牌管理器。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.ExceptionMapper">
      <summary>获取或设置与服务凭据关联的异常映射器。</summary>
      <returns>异常映射与服务凭据相关。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.IdentityConfiguration">
      <summary>获取或设置服务的标识配置。</summary>
      <returns>服务的标识配置。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.IssuedTokenAuthentication">
      <summary>获取此服务的当前颁发的令牌（例如，SAML）身份验证设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.IssuedTokenServiceCredential" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.Peer">
      <summary>获取要由服务上配置的对等传输终结点使用的当前凭据身份验证和配置设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.PeerCredential" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.SecureConversationAuthentication">
      <summary>获取要由安全对话使用的当前设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.SecureConversationServiceCredential" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.ServiceCertificate">
      <summary>获取与此服务关联的当前证书。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.X509CertificateRecipientServiceCredential" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceCredentials.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>将此实例添加到绑定参数集合。 这是一个基础结构方法，不要直接调用此方法。</summary>
      <param name="description">服务的说明。</param>
      <param name="serviceHostBase">服务主机基。</param>
      <param name="endpoints">服务终结点的集合。</param>
      <param name="parameters">参数的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceCredentials.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>应用调度行为。 这是一个基础结构方法，不要直接调用此方法。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务主机基。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceCredentials.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>验证服务说明。 这是一个基础结构方法，不要直接调用此方法。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务主机基。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.UseIdentityConfiguration">
      <summary>获取或设置服务凭据是否使用标识配置。</summary>
      <returns>如果服务凭据使用标识配置，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.UserNameAuthentication">
      <summary>获取此服务的当前用户名/密码身份验证设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.UserNamePasswordServiceCredential" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceCredentials.WindowsAuthentication">
      <summary>获取此服务的当前 Windows 身份验证设置。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.WindowsServiceCredential" /> 实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceDebugBehavior">
      <summary>启用 Windows Communication Foundation (WCF) 服务的调试和帮助信息功能。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceDebugBehavior.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceDebugBehavior" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDebugBehavior.HttpHelpPageBinding">
      <summary>获取或设置对绑定定义的高级别访问。</summary>
      <returns>通道绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDebugBehavior.HttpHelpPageEnabled">
      <summary>获取或设置一个值，该值控制 Windows Communication Foundation (WCF) 是否在由 <see cref="P:System.ServiceModel.Description.ServiceDebugBehavior.HttpHelpPageUrl" /> 属性控制的地址发布 HTML 帮助页。</summary>
      <returns>如果 WCF 发布 HTML 帮助页，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDebugBehavior.HttpHelpPageUrl">
      <summary>获取或设置发布 HTML 帮助文件的位置。</summary>
      <returns>在使用 HTML 浏览器查看终结点时，用户看到的自定义 HTML 帮助文件基于 HTTP 的相对或绝对 URL。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDebugBehavior.HttpsHelpPageBinding">
      <summary>获取或设置对绑定定义的高级别访问。</summary>
      <returns>通道绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDebugBehavior.HttpsHelpPageEnabled">
      <summary>获取或设置一个值，该值指定 Windows Communication Foundation (WCF) 是否通过 HTTPS 在由 <see cref="P:System.ServiceModel.Description.ServiceDebugBehavior.HttpsHelpPageUrl" /> 属性控制的地址返回 HTML 帮助文件。</summary>
      <returns>如果将 HTML 帮助文件返回到发出 HTTPS/GET 请求（如 HTML 浏览器的请求）的客户端，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDebugBehavior.HttpsHelpPageUrl">
      <summary>获取或设置发布 HTML 文件以便使用 HTTPS 进行检索的位置。</summary>
      <returns>在使用 HTML 浏览器查看终结点时，用户看到的自定义 HTML 帮助文件基于 HTTPS 的相对或绝对 URL。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults">
      <summary>获取或设置一个值，该值指定在返回客户端以供调试的 SOAP 错误详细信息中是否包含托管异常信息。</summary>
      <returns>如果 Windows Communication Foundation (WCF) 在 SOAP 错误中返回托管异常信息以供客户端调试，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceDebugBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>实现 <see cref="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> 方法以支持该行为。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务主机。</param>
      <param name="endpoints">服务的终结点。</param>
      <param name="parameters">支持修改绑定的绑定参数。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceDebugBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method to support the behavior.</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务主机。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceDebugBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method to support the behavior.</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务主机。</param>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceDescription">
      <summary>表示一个完整的服务的内存中说明，包括服务的所有终结点及其各自地址、绑定、协定和行为的规范。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceDescription.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceDescription" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceDescription.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ServiceEndpoint})">
      <summary>从服务终结点的指定枚举初始化 <see cref="T:System.ServiceModel.Description.ServiceDescription" /> 类的新实例。</summary>
      <param name="endpoints">用于初始化服务说明的类型为 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoints" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDescription.Behaviors">
      <summary>获取与该服务关联的行为。</summary>
      <returns>包含服务关联行为的类型为 <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> 的 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDescription.ConfigurationName">
      <summary>获取或设置 service 配置元素的名称。</summary>
      <returns>用于配置服务的 &lt;service&gt; 配置元素的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDescription.Endpoints">
      <summary>从服务说明获取终结点的集合。</summary>
      <returns>包含为服务定义的终结点的 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceDescription.GetService(System.Object)">
      <summary>返回利用指定服务对象初始化了的服务说明。</summary>
      <returns>所提供的服务对象的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</returns>
      <param name="serviceImplementation">实现服务的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceImplementation" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceDescription.GetService(System.Type)">
      <summary>返回利用指定服务类型初始化的服务说明。</summary>
      <returns>所提供的服务类型的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</returns>
      <param name="serviceType">服务的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDescription.Name">
      <summary>获取或设置服务的名称。</summary>
      <returns>服务的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDescription.Namespace">
      <summary>获取或设置服务的命名空间。</summary>
      <returns>服务的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceDescription.ServiceType">
      <summary>获取服务的类型。</summary>
      <returns>实现服务的 <see cref="T:System.Type" /> 的实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceEndpoint">
      <summary>表示允许服务的客户端查找并与服务通信的服务的终结点。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription)">
      <summary>初始化指定协定的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 类的新实例。</summary>
      <param name="contract">服务终结点的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的协定、绑定和地址初始化 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 类的新实例。</summary>
      <param name="contract">服务终结点的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
      <param name="binding">指定服务终结点的通信方式的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">服务终结点的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Address">
      <summary>获取或设置服务终结点的终结点地址。</summary>
      <returns>指定服务终结点的位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Behaviors">
      <summary>获取服务终结点的行为。</summary>
      <returns>包含为服务终结点指定的行为的类型为 <see cref="T:System.ServiceModel.Description.IEndpointBehavior" /> 的 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Binding">
      <summary>获取或设置服务终结点的绑定。</summary>
      <returns>服务终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Contract">
      <summary>获取服务终结点的协定。</summary>
      <returns>指定服务终结点的协定的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.EndpointBehaviors">
      <summary>获取服务的终点行为。</summary>
      <returns>服务的终点行为集。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.IsSystemEndpoint">
      <summary>获取或设置是否由系统生成服务终结点而不由用户定义服务终结点。</summary>
      <returns>如果该服务终结点是由此系统生成的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.ListenUri">
      <summary>获取或设置服务终结点侦听的 URI。</summary>
      <returns>服务终结点侦听的 <see cref="T:System.Uri" />。 默认值由 <see cref="P:System.ServiceModel.Description.ServiceEndpoint.Address" /> 返回的 <see cref="T:System.ServiceModel.EndpointAddress" /> 的 <see cref="P:System.ServiceModel.EndpointAddress.Uri" /> 提供。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.ListenUriMode">
      <summary>获取或设置传输处理提供给服务的供其侦听的 URI 的方式。</summary>
      <returns>服务终结点的 <see cref="T:System.ServiceModel.Description.ListenUriMode" />。 默认值为 <see cref="F:System.ServiceModel.Description.ListenUriMode.Explicit" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Name">
      <summary>获取或设置服务终结点的名称。</summary>
      <returns>服务终结点的名称。 默认值为绑定名称和协定说明名称的串联。 例如，<see cref="P:System.ServiceModel.Channels.Binding.Name" /> +'_' + <see cref="P:System.ServiceModel.Description.ContractDescription.Name" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceEndpointCollection">
      <summary>一个包含服务的终结点的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.Find(System.Type)">
      <summary>返回从服务终结点集合中找到的第一个满足指定协定类型的服务终结点。</summary>
      <returns>第一个满足指定协定类型条件的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />，如果找不到，则为 null。</returns>
      <param name="contractType">服务终结点的协定的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractType" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.Find(System.Type,System.Xml.XmlQualifiedName)">
      <summary>返回服务终结点集合中的一个满足指定协定类型条件且带有指定绑定命名和命名空间的服务终结点。</summary>
      <returns>第一个满足指定协定类型条件且带有指定绑定命名和命名空间的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />，如果找不到，则为 null。</returns>
      <param name="contractType">服务终结点的协定的 <see cref="T:System.Type" />。</param>
      <param name="bindingName">服务的绑定的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractType" /> 或 <paramref name="bindingName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.Find(System.Uri)">
      <summary>返回服务终结点集合的一个带有指定地址的服务终结点。</summary>
      <returns>第一个满足指定地址条件的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />，如果找不到，则为 null。</returns>
      <param name="address">服务终结点的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.Find(System.Xml.XmlQualifiedName)">
      <summary>返回服务终结点集合中的一个带有指定命名空间和协定名称的服务终结点。</summary>
      <returns>第一个满足指定命名空间和协定名称条件的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />，如果找不到，则为 null。</returns>
      <param name="contractName">服务的协定的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.Find(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>返回在服务终结点集合中找到的第一个带有指定的协定名称、协定命名空间、绑定命名和绑定命名空间的服务终结点。</summary>
      <returns>具有指定绑定、协定名称和命名空间的第一个 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <param name="contractName">服务的协定的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="bindingName">服务的绑定的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 或 <paramref name="bindingName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.FindAll(System.Type)">
      <summary>返回指定服务类型的所有服务终结点的集合。</summary>
      <returns>包含指定类型的服务终结点的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 类型的 <see cref="T:System.Collections.ObjectModel.Collection`1" />；如果找不到，则为空集合。</returns>
      <param name="contractType">服务终结点的协定的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractType" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.FindAll(System.Xml.XmlQualifiedName)">
      <summary>返回满足指定服务名称条件的所有服务终结点的集合。</summary>
      <returns>包含指定协定名称和命名空间的服务终结点的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 类型的 <see cref="T:System.Collections.ObjectModel.Collection`1" />；如果找不到，则为空集合。</returns>
      <param name="contractName">服务的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.InsertItem(System.Int32,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>将一项插入集合中指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入项。</param>
      <param name="item">应在指定 <paramref name="index" /> 处插入的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 大于集合中所包含的项的数目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpointCollection.SetItem(System.Int32,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>替换集合中指定索引处的元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">指定 <paramref name="index" /> 处的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 项的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。 - 或 - <paramref name="index" /> 大于集合中所包含的项的数目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceMetadataBehavior">
      <summary>控制服务元数据和相关信息的发布。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataBehavior.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceMetadataBehavior" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataBehavior.ExternalMetadataLocation">
      <summary>获取或设置作为服务元数据的位置的值。</summary>
      <returns>服务元数据的位置。</returns>
      <exception cref="T:System.ArgumentException">该值为绝对值，且架构既不是 http，也不是 https。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetBinding">
      <summary>获取或设置当传输为 HTTP 时用于配置元数据检索的绑定。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.Binding" />，可用于通过 HTTP 协议检索元数据。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetEnabled">
      <summary>获取或设置一个值，该值指示是否发布服务元数据以便使用 HTTP/GET 请求进行检索。</summary>
      <returns>如果发布 WSDL，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpGetUrl">
      <summary>获取或设置进行 HTTP/GET 请求的元数据发布的位置。</summary>
      <returns>元数据的绝对位置或相对位置。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetBinding">
      <summary>获取或设置当传输为 HTTPS 时用于配置元数据检索的绑定。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.Binding" />，可用于通过 HTTPS 协议检索元数据。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetEnabled">
      <summary>获取或设置一个值，该值指示是否发布服务元数据以便使用 HTTPS/GET 请求进行检索。</summary>
      <returns>如果发布 WSDL，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl">
      <summary>获取或设置进行 HTTPS/GET 请求的元数据发布的位置。</summary>
      <returns>HTTPS 元数据的地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataBehavior.MetadataExporter">
      <summary>获取或设置用于发布服务元数据的内部 <see cref="T:System.ServiceModel.Description.MetadataExporter" /> 对象。</summary>
      <returns>内部 <see cref="T:System.ServiceModel.Description.MetadataExporter" /> 对象。</returns>
    </member>
    <member name="F:System.ServiceModel.Description.ServiceMetadataBehavior.MexContractName">
      <summary>返回字符串 IMetadataContract。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>配置基础绑定以支持该行为的 <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> 的实现。</summary>
      <param name="description">要配置的服务说明。</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">要配置的终结点。</param>
      <param name="parameters">要配置的绑定参数。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>配置基础绑定以支持服务行为的 <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> 的实现。</summary>
      <param name="description">要修改的服务说明。</param>
      <param name="serviceHostBase">The host of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="description" /> 或 <paramref name="serviceHostBase" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="serviceHostBase" /> 的目标地址为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>验证服务说明是否可以支持该行为的 <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> 的实现。</summary>
      <param name="description">要验证的服务说明。</param>
      <param name="serviceHostBase">The host of the service.</param>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceMetadataContractBehavior">
      <summary>使您能够指定是否为给定终结点发布元数据的协定行为。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataContractBehavior.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceMetadataContractBehavior" /> 的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataContractBehavior.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceMetadataContractBehavior" /> 的新实例。</summary>
      <param name="metadataGenerationDisabled">指定是否对终结点禁用元数据生成。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataContractBehavior.MetadataGenerationDisabled">
      <summary>获取或设置一个值，该值指定是否应对终结点禁用元数据生成。</summary>
      <returns>如果应禁用元数据生成，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataContractBehavior.System#ServiceModel#Description#IContractBehavior#AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>配置绑定元素以支持协定行为。</summary>
      <param name="description">要修改的协定说明。</param>
      <param name="endpoint">要修改的终结点。</param>
      <param name="parameters">绑定元素支持该行为所需的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataContractBehavior.System#ServiceModel#Description#IContractBehavior#ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>在协定范围内实现客户端的修改。</summary>
      <param name="description">要实现扩展的协定说明。</param>
      <param name="endpoint">公开协定的终结点。</param>
      <param name="proxy">客户端运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataContractBehavior.System#ServiceModel#Description#IContractBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <summary>在协定范围内实现服务运行时的修改。</summary>
      <param name="description">要修改的协定说明。</param>
      <param name="endpoint">公开协定的终结点。</param>
      <param name="dispatch">控制服务执行的调度运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataContractBehavior.System#ServiceModel#Description#IContractBehavior#Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>确认协定和终结点是否支持协定行为。</summary>
      <param name="description">要验证的协定。</param>
      <param name="endpoint">要验证的终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceMetadataEndpoint">
      <summary>具有固定协定 (<see cref="T:System.ServiceModel.Description.IMetadataExchange" />) 和默认 HTTP 绑定的标准终结点，用于公开元数据。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataEndpoint.#ctor">
      <summary>创建并初始化 <see cref="T:System.ServiceModel.Description.ServiceMetadataEndpoint" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataEndpoint.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的绑定和终结点地址创建并初始化 <see cref="T:System.ServiceModel.Description.ServiceMetadataEndpoint" /> 类的新实例。</summary>
      <param name="binding">用于服务元数据终结点的绑定。</param>
      <param name="address">终结点地址。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataEndpoint.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>使用指定的终结点地址创建并初始化 <see cref="T:System.ServiceModel.Description.ServiceMetadataEndpoint" /> 类的新实例。</summary>
      <param name="address">终结点地址。</param>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceMetadataExtension">
      <summary>提供元数据发布协议的实现。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataExtension.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Description.ServiceMetadataExtension" /> 对象的实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataExtension.Metadata">
      <summary>在运行时获取服务的元数据。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.MetadataSet" /> 对象，其中包含在运行时服务的元数据。 返回的集合中的更改会反映在服务元数据的后续请求中。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceMetadataExtension.SingleWsdl">
      <summary>获取由服务使用的单个 WSDL。</summary>
      <returns>被该服务使用的单个 WSDL。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataExtension.System#ServiceModel#IExtension{T}#Attach(System.ServiceModel.ServiceHostBase)">
      <summary>使对象能够参与自定义行为。 当运行时将扩展附加到 <see cref="T:System.ServiceModel.ServiceHostBase" /> 类的一个实例时调用。仅供内部使用。</summary>
      <param name="owner">
        <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceMetadataExtension.System#ServiceModel#IExtension{T}#Detach(System.ServiceModel.ServiceHostBase)">
      <summary>使对象能够参与自定义行为。 当运行时从 <see cref="T:System.ServiceModel.InstanceContext" /> 类的一个实例中分离扩展时调用。仅供内部使用。</summary>
      <param name="owner">
        <see cref="T:System.ServiceModel.InstanceContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceSecurityAuditBehavior">
      <summary>指定安全性事件的审核行为。 通常，安全性事件包含身份验证事件（如传输、消息或协商身份验证）和授权事件。 For more information, see<see cref="T:System.ServiceModel.ServiceAuthorizationManager" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceSecurityAuditBehavior.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceSecurityAuditBehavior" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceSecurityAuditBehavior.AuditLogLocation">
      <summary>获取或设置与安全相关的事件日志的写入位置。</summary>
      <returns>
        <see cref="T:System.ServiceModel.AuditLogLocation" />。 默认值为 <see cref="F:System.ServiceModel.AuditLogLocation.Default" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">set 和 value 均不是 <see cref="T:System.ServiceModel.AuditLogLocation" /> 的有效成员。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceSecurityAuditBehavior.MessageAuthenticationAuditLevel">
      <summary>获取或设置要在消息级别审核的身份验证事件的类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.AuditLevel" /> 枚举值之一。 默认值为 <see cref="F:System.ServiceModel.AuditLevel.None" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">set 和 value 均不是 <see cref="T:System.ServiceModel.AuditLevel" /> 的有效成员。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceSecurityAuditBehavior.ServiceAuthorizationAuditLevel">
      <summary>获取或设置要在服务级别审核的授权事件的类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.AuditLevel" /> 枚举值之一。 默认值为 None。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">set 和 value 均不是 <see cref="T:System.ServiceModel.AuditLevel" /> 的有效成员。 默认值为 <see cref="F:System.ServiceModel.AuditLevel.None" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceSecurityAuditBehavior.SuppressAuditFailure">
      <summary>获取或设置一个值，该值指示审核失败是否会影响应用程序。</summary>
      <returns>如果审核失败不会影响应用程序，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceSecurityAuditBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>向绑定元素传递自定义数据，以支持协定实现。</summary>
      <param name="description">服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">服务终结点。</param>
      <param name="parameters">
        <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">set 和 <paramref name="parameters" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceSecurityAuditBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>用于更改运行时属性值或插入自定义扩展对象（例如错误处理程序、消息或参数拦截器、安全扩展以及其他自定义扩展对象）。</summary>
      <param name="description">服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</param>
      <param name="serviceHostBase">The host of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="description" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="description" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceSecurityAuditBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>未实现。</summary>
      <param name="description">服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</param>
      <param name="serviceHostBase">The host of the service.</param>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceThrottlingBehavior">
      <summary>配置运行时吞吐量设置，这些设置可以让您优化服务性能。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceThrottlingBehavior.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.ServiceThrottlingBehavior" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentCalls">
      <summary>获取或设置一个值，该值指定整个 <see cref="T:System.ServiceModel.ServiceHost" /> 中正在处理的最多消息数。</summary>
      <returns>服务中活动消息的上限。 默认为处理器计数的 16 倍。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentInstances">
      <summary>获取或设置一个值，该值指定服务中可以一次执行的最多 <see cref="T:System.ServiceModel.InstanceContext" /> 对象数。</summary>
      <returns>服务中一次可执行的最大 <see cref="T:System.ServiceModel.InstanceContext" /> 对象数。 默认为 <see cref="P:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions" /> 的值和 <see cref="P:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentCalls" /> 值的总和。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions">
      <summary>获取或设置一个指定 <see cref="T:System.ServiceModel.ServiceHost" /> 对象可一次接受的最大会话数的值。</summary>
      <returns>服务主机可接受的最大会话数。 默认为处理器计数的 100 倍。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceThrottlingBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>对绑定进行配置以支持服务行为。</summary>
      <param name="description">服务说明。</param>
      <param name="serviceHostBase">服务的宿主。</param>
      <param name="endpoints">由服务公开的终结点。</param>
      <param name="parameters">要进行配置以支持服务行为的绑定参数。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceThrottlingBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>对服务进行配置以支持服务行为。</summary>
      <param name="description">要配置的服务说明。</param>
      <param name="serviceHostBase">服务的宿主。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceThrottlingBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>验证服务和主机能否支持服务行为。</summary>
      <param name="description">要由服务行为验证的服务说明。</param>
      <param name="serviceHostBase">要由服务行为验证的服务主机。</param>
    </member>
    <member name="T:System.ServiceModel.Description.SynchronousReceiveBehavior">
      <summary>控制通道以同步还是异步方式进行侦听。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.SynchronousReceiveBehavior.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Description.SynchronousReceiveBehavior" /> 类的实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.SynchronousReceiveBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>在此类中未实现。</summary>
      <param name="serviceEndpoint">要修改的终结点。</param>
      <param name="parameters">绑定元素支持该行为所需的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Description.SynchronousReceiveBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>在此类中未实现。</summary>
      <param name="serviceEndpoint">要自定义的终结点。</param>
      <param name="behavior">要自定义的客户端运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Description.SynchronousReceiveBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>将 <see cref="P:System.ServiceModel.Dispatcher.ChannelDispatcher.ReceiveSynchronously" /> 属性设置为 true。</summary>
      <param name="serviceEndpoint">公开协定的终结点。</param>
      <param name="endpointDispatcher">要修改或扩展的终结点调度程序。</param>
    </member>
    <member name="M:System.ServiceModel.Description.SynchronousReceiveBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>在此类中未实现。</summary>
      <param name="serviceEndpoint">要验证的终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Description.TransactedBatchingBehavior">
      <summary>表示一个行为，它可优化支持事务性接收的传输的接收操作。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.TransactedBatchingBehavior.#ctor(System.Int32)">
      <summary>使用指定的批次大小初始化 <see cref="T:System.ServiceModel.Description.TransactedBatchingBehavior" /> 类的新实例。</summary>
      <param name="maxBatchSize">可成批归入的最大接收操作数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="MaxBatchSize" /> 小于 0。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.TransactedBatchingBehavior.MaxBatchSize">
      <summary>获取或设置可成批归入一个事务中的最大接收操作数。</summary>
      <returns>可成批归入一个事务中的最大接收操作数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="MaxBatchSize" /> 小于 0。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.TransactedBatchingBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>将绑定设置应用于指定服务终结点。 不能继承此方法。</summary>
      <param name="serviceEndpoint">将在其中应用行为设置的服务终结点。</param>
      <param name="bindingParameters">一个绑定参数的集合，这些参数存储由绑定元素用来生成工厂的信息。</param>
    </member>
    <member name="M:System.ServiceModel.Description.TransactedBatchingBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>将事务批处理行为设置应用于指定服务终结点。 不能继承此方法。</summary>
      <param name="serviceEndpoint">将在其中应用行为设置的服务终结点。</param>
      <param name="behavior">包含事务批处理行为。</param>
    </member>
    <member name="M:System.ServiceModel.Description.TransactedBatchingBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>将终结点调度程序与指定服务终结点相关联。 不能继承此方法。</summary>
      <param name="serviceEndpoint">将在其中应用行为设置的服务终结点。</param>
      <param name="endpointDispatcher">用于调度消息的终结点调度</param>
    </member>
    <member name="M:System.ServiceModel.Description.TransactedBatchingBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>确保事务批处理仅可应用于支持事务接收操作的绑定。 不能继承此方法。</summary>
      <param name="serviceEndpoint">验证批处理行为的服务终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Description.TypedMessageConverter">
      <summary>将类型化的消息转换为非类型化的消息，或将非类型化的消息转换为类型化的消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.Create(System.Type,System.String)">
      <summary>表示返回 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例的静态方法。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例。</returns>
      <param name="messageContract">一个使用 <see cref="T:System.ServiceModel.MessageContractAttribute" /> 批注过的 <see cref="T:System.Type" /> 消息协定类型。</param>
      <param name="action">一个操作字符串。</param>
      <exception cref="T:System.ArgumentNullException">参数是 null</exception>
      <exception cref="T:System.ArgumentException">指定消息协定类型不具有应用的 MessageContractAttribute。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.Create(System.Type,System.String,System.ServiceModel.DataContractFormatAttribute)">
      <summary>表示返回 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例的静态方法。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例。</returns>
      <param name="messageContract">一个使用 <see cref="T:System.ServiceModel.MessageContractAttribute" /> 批注过的 <see cref="T:System.Type" /> 消息协定类型。</param>
      <param name="action">一个操作字符串。</param>
      <param name="formatterAttribute">一个指定要使用的格式化程序的 <see cref="T:System.ServiceModel.DataContractFormatAttribute" />。</param>
      <exception cref="T:System.ArgumentNullException">参数是 null</exception>
      <exception cref="T:System.ArgumentException">指定消息协定类型不具有应用的 MessageContractAttribute。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.Create(System.Type,System.String,System.ServiceModel.XmlSerializerFormatAttribute)">
      <summary>表示返回 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例的静态方法。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例。</returns>
      <param name="messageContract">一个使用 <see cref="T:System.ServiceModel.MessageContractAttribute" /> 批注过的 <see cref="T:System.Type" /> 消息协定类型。</param>
      <param name="action">一个操作字符串。</param>
      <param name="formatterAttribute">一个指定要使用的格式化程序的 <see cref="T:System.ServiceModel.XmlSerializerFormatAttribute" />。</param>
      <exception cref="T:System.ArgumentNullException">参数是 null</exception>
      <exception cref="T:System.ArgumentException">指定消息协定类型不具有应用的 MessageContractAttribute。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.Create(System.Type,System.String,System.String)">
      <summary>表示返回 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例的静态方法。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例。</returns>
      <param name="messageContract">一个使用 <see cref="T:System.ServiceModel.MessageContractAttribute" /> 批注过的 <see cref="T:System.Type" /> 消息协定类型。</param>
      <param name="action">一个操作字符串。</param>
      <param name="defaultNamespace">一个命名空间。</param>
      <exception cref="T:System.ArgumentNullException">参数是 null</exception>
      <exception cref="T:System.ArgumentException">指定消息协定类型不具有应用的 MessageContractAttribute。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.Create(System.Type,System.String,System.String,System.ServiceModel.DataContractFormatAttribute)">
      <summary>表示返回 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例的静态方法。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例。</returns>
      <param name="messageContract">一个使用 <see cref="T:System.ServiceModel.MessageContractAttribute" /> 批注过的 <see cref="T:System.Type" /> 消息协定类型。</param>
      <param name="action">一个操作字符串。</param>
      <param name="defaultNamespace">一个命名空间。</param>
      <param name="formatterAttribute">一个指定要使用的格式化程序的 <see cref="T:System.ServiceModel.DataContractFormatAttribute" />。</param>
      <exception cref="T:System.ArgumentNullException">参数是 null</exception>
      <exception cref="T:System.ArgumentException">指定消息协定类型不具有应用的 MessageContractAttribute。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.Create(System.Type,System.String,System.String,System.ServiceModel.XmlSerializerFormatAttribute)">
      <summary>表示返回 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例的静态方法。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.TypedMessageConverter" /> 实例。</returns>
      <param name="messageContract">一个使用 <see cref="T:System.ServiceModel.MessageContractAttribute" /> 批注过的 <see cref="T:System.Type" /> 消息协定类型。</param>
      <param name="action">一个操作字符串。</param>
      <param name="defaultNamespace">一个命名空间。</param>
      <param name="formatterAttribute">一个指定要使用的格式化程序的 <see cref="T:System.ServiceModel.XmlSerializerFormatAttribute" />。</param>
      <exception cref="T:System.ArgumentNullException">参数是 null</exception>
      <exception cref="T:System.ArgumentException">指定消息协定类型不具有应用的 MessageContractAttribute。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.FromMessage(System.ServiceModel.Channels.Message)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 实例创建一个类型化的消息。</summary>
      <returns>一个为类型化的消息的对象。</returns>
      <param name="message">一个非类型化的消息。</param>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.ToMessage(System.Object)">
      <summary>从指定的类型化消息创建一个 <see cref="T:System.ServiceModel.Channels.Message" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.Message" /> 实例。</returns>
      <param name="typedMessage">一个类型化的消息。</param>
    </member>
    <member name="M:System.ServiceModel.Description.TypedMessageConverter.ToMessage(System.Object,System.ServiceModel.Channels.MessageVersion)">
      <summary>使用指定的版本，从指定的类型化消息创建一个 <see cref="T:System.ServiceModel.Channels.Message" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.Message" /> 实例。</returns>
      <param name="typedMessage">一个类型化的消息。</param>
      <param name="version">一个指定与消息关联的 SOAP 和 WS-Addressing 的版本的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior">
      <summary>为 Windows Communication Foundation (WCF) 服务启用从请求消息标头中检索元数据地址信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior.DefaultPortsByScheme">
      <summary>获取由地址方案键控的默认端口的字典。</summary>
      <returns>由地址方案键控的默认端口的字典。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>未实现。</summary>
      <param name="serviceDescription">未实现。</param>
      <param name="serviceHostBase">未实现。</param>
      <param name="endpoints">未实现。</param>
      <param name="bindingParameters">未实现。</param>
    </member>
    <member name="M:System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>未实现。</summary>
      <param name="serviceDescription">未实现。</param>
      <param name="serviceHostBase">未实现。</param>
    </member>
    <member name="M:System.ServiceModel.Description.UseRequestHeadersForMetadataAddressBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>未实现。</summary>
      <param name="serviceDescription">未实现。</param>
      <param name="serviceHostBase">未实现。</param>
    </member>
    <member name="T:System.ServiceModel.Description.WsdlContractConversionContext">
      <summary>传递给自定义 WSDL 导出程序和导入程序，从而为协定自定义元数据导出过程和导入过程。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlContractConversionContext.Contract">
      <summary>获取正在被导出或导入的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</summary>
      <returns>正在被导出或导入的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlContractConversionContext.GetFaultDescription(System.Web.Services.Description.OperationFault)">
      <summary>返回指定错误的错误说明。</summary>
      <returns>指定错误的错误说明。</returns>
      <param name="operationFault">请求的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 的 <see cref="T:System.Web.Services.Description.OperationFault" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">未找到值。</exception>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlContractConversionContext.GetMessageDescription(System.Web.Services.Description.OperationMessage)">
      <summary>返回指定消息的消息说明。</summary>
      <returns>指定消息的消息说明。</returns>
      <param name="operationMessage">请求的 <see cref="T:System.ServiceModel.Description.MessageDescription" /> 的 <see cref="T:System.Web.Services.Description.OperationMessage" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">未找到值。</exception>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlContractConversionContext.GetOperation(System.ServiceModel.Description.OperationDescription)">
      <summary>返回指定操作说明的操作。</summary>
      <returns>指定操作说明的操作。</returns>
      <param name="operation">请求的 <see cref="T:System.Web.Services.Description.Operation" /> 的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">未找到值。</exception>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlContractConversionContext.GetOperationDescription(System.Web.Services.Description.Operation)">
      <summary>返回与该操作关联的操作说明。</summary>
      <returns>与该操作关联的操作说明。</returns>
      <param name="operation">请求的 <see cref="T:System.ServiceModel.Description.OperationDescription" /> 的 <see cref="T:System.Web.Services.Description.Operation" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">未找到值。</exception>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlContractConversionContext.GetOperationFault(System.ServiceModel.Description.FaultDescription)">
      <summary>返回所请求的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 的 <see cref="T:System.Web.Services.Description.OperationFault" />。</summary>
      <returns>请求的 <see cref="T:System.ServiceModel.Description.FaultDescription" /> 的 <see cref="T:System.Web.Services.Description.OperationFault" />。</returns>
      <param name="fault">请求的 <see cref="T:System.Web.Services.Description.OperationFault" /> 的 <see cref="T:System.ServiceModel.Description.FaultDescription" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">未找到值。</exception>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlContractConversionContext.GetOperationMessage(System.ServiceModel.Description.MessageDescription)">
      <summary>获取指定 <paramref name="message" /> 的 <see cref="T:System.Web.Services.Description.OperationMessage" /> 对象，该对象表示 XML Web services 的操作所传递的消息类型。</summary>
      <returns>一个表示消息类型的 <see cref="T:System.Web.Services.Description.OperationMessage" /> 对象，该消息类型是 XML Web services 的操作传递的。</returns>
      <param name="message">请求的 <see cref="T:System.Web.Services.Description.OperationMessage" /> 的 <see cref="T:System.ServiceModel.Description.MessageDescription" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">未找到值。</exception>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlContractConversionContext.WsdlPortType">
      <summary>获取表示协定的 <see cref="T:System.Web.Services.Description.PortType" />。</summary>
      <returns>表示协定的 <see cref="T:System.Web.Services.Description.PortType" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.WsdlEndpointConversionContext">
      <summary>传递给自定义 WSDL 导出程序和导入程序，可以为 WSDL 终结点自定义元数据导出过程和导入过程。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlEndpointConversionContext.ContractConversionContext">
      <summary>获取正在被导出或导入的 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />。</summary>
      <returns>正在被导出或导入的 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlEndpointConversionContext.Endpoint">
      <summary>获取正在被导出或导入的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</summary>
      <returns>正在被导出或导入的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlEndpointConversionContext.GetFaultBinding(System.ServiceModel.Description.FaultDescription)">
      <summary>获取与该错误关联的 WSDL 绑定。</summary>
      <returns>与错误关联的 WSDL <see cref="T:System.Web.Services.Description.FaultBinding" />。</returns>
      <param name="fault">与 WSDL 绑定关联的错误的 <see cref="T:System.ServiceModel.Description.FaultDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlEndpointConversionContext.GetFaultDescription(System.Web.Services.Description.FaultBinding)">
      <summary>获取与 WSDL 错误绑定关联的错误的说明。</summary>
      <returns>与 WSDL 绑定关联的错误的 <see cref="T:System.ServiceModel.Description.FaultDescription" />。</returns>
      <param name="faultBinding">与 WSDL 错误绑定关联的 <see cref="T:System.Web.Services.Description.FaultBinding" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlEndpointConversionContext.GetMessageBinding(System.ServiceModel.Description.MessageDescription)">
      <summary>获取由该说明指定的消息的 WSDL 绑定。</summary>
      <returns>由该说明指定的消息的 <see cref="T:System.Web.Services.Description.MessageBinding" />。</returns>
      <param name="message">与该说明关联的 <see cref="T:System.ServiceModel.Description.MessageDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlEndpointConversionContext.GetMessageDescription(System.Web.Services.Description.MessageBinding)">
      <summary>获取由 WSDL 绑定指定的消息的消息说明。</summary>
      <returns>由该绑定指定的消息的 <see cref="T:System.ServiceModel.Description.MessageDescription" />。</returns>
      <param name="messageBinding">与该消息关联的 <see cref="T:System.Web.Services.Description.MessageBinding" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlEndpointConversionContext.GetOperationBinding(System.ServiceModel.Description.OperationDescription)">
      <summary>获取由该说明指定的操作的 WSDL 绑定。</summary>
      <returns>由该说明指定的操作的 <see cref="T:System.Web.Services.Description.OperationBinding" />。</returns>
      <param name="operation">与该绑定关联的操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlEndpointConversionContext.GetOperationDescription(System.Web.Services.Description.OperationBinding)">
      <summary>返回与 WSDL 绑定关联的操作的操作说明。</summary>
      <returns>与该绑定关联的操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</returns>
      <param name="operationBinding">与该说明关联的 <see cref="T:System.Web.Services.Description.OperationBinding" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlEndpointConversionContext.WsdlBinding">
      <summary>获取 WSDL 终结点的 <see cref="T:System.Web.Services.Description.Binding" />。</summary>
      <returns>WSDL 终结点的 <see cref="T:System.Web.Services.Description.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlEndpointConversionContext.WsdlPort">
      <summary>Gets the <see cref="T:System.Web.Services.Description.Port" /> for the WSDL endpoint.</summary>
      <returns>The <see cref="T:System.Web.Services.Description.Port" /> for the WSDL endpoint.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.WsdlExporter">
      <summary>将服务、协定和终结点信息转换为元数据文档。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlExporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.WsdlExporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlExporter.ExportContract(System.ServiceModel.Description.ContractDescription)">
      <summary>导出仅描述指定协定说明中的协定信息的元数据。</summary>
      <param name="contract">用于从其中生成元数据的 <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
      <exception cref="T:System.InvalidOperationException">导出程序遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">协定为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlExporter.ExportEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>生成有关指定终结点的元数据。</summary>
      <param name="endpoint">要返回其元数据的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <exception cref="T:System.InvalidOperationException">导出程序遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoint" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">绑定为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlExporter.ExportEndpoints(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ServiceEndpoint},System.Xml.XmlQualifiedName)">
      <summary>从指定服务生成终结点组的元数据。</summary>
      <param name="endpoints">要生成其元数据的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象。</param>
      <param name="wsdlServiceQName">服务的名称。</param>
      <exception cref="T:System.InvalidOperationException">导出程序遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoints" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoints" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">绑定为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlExporter.GeneratedWsdlDocuments">
      <summary>调用一个导出方法后，获取 <see cref="T:System.Web.Services.Description.ServiceDescription" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Web.Services.Description.ServiceDescription" /> 对象的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlExporter.GeneratedXmlSchemas">
      <summary>调用一个导出方法后，获取一组 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</summary>
      <returns>一组 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlExporter.GetGeneratedMetadata">
      <summary>返回所生成的 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 对象的可枚举集合。</summary>
      <returns>所生成的 <see cref="T:System.ServiceModel.Description.MetadataSection" /> 对象的可枚举集合，表示生成为调用 <see cref="M:System.ServiceModel.Description.WsdlExporter.ExportContract(System.ServiceModel.Description.ContractDescription)" />、<see cref="M:System.ServiceModel.Description.WsdlExporter.ExportEndpoint(System.ServiceModel.Description.ServiceEndpoint)" /> 或 <see cref="M:System.ServiceModel.Description.WsdlExporter.ExportEndpoints(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ServiceEndpoint},System.Xml.XmlQualifiedName)" /> 的结果的元数据。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.WsdlImporter">
      <summary>与 WS-Policy 附件一起导入 Web Services 描述语言 (WSDL) 1.1 元数据。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.#ctor(System.ServiceModel.Description.MetadataSet)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 类的新实例。</summary>
      <param name="metadata">元数据文档的集合，可从该集合中提取协定、终结点和绑定信息。</param>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.#ctor(System.ServiceModel.Description.MetadataSet,System.Collections.Generic.IEnumerable{System.ServiceModel.Description.IPolicyImportExtension},System.Collections.Generic.IEnumerable{System.ServiceModel.Description.IWsdlImportExtension})">
      <summary>从指定的元数据、自定义策略导入程序和自定义 WSDL 导入程序创建一个 <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 对象。</summary>
      <param name="metadata">已下载的元数据。</param>
      <param name="policyImportExtensions">用于导入自定义策略语句的自定义策略导入程序。</param>
      <param name="wsdlImportExtensions">用于导入自定义 WSDL 元素的自定义 WSDL 导入程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.#ctor(System.ServiceModel.Description.MetadataSet,System.Collections.Generic.IEnumerable{System.ServiceModel.Description.IPolicyImportExtension},System.Collections.Generic.IEnumerable{System.ServiceModel.Description.IWsdlImportExtension},System.ServiceModel.Description.MetadataImporterQuotas)">
      <summary>从指定的元数据、自定义策略导入程序和自定义 WSDL 导入程序创建一个 <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 对象。</summary>
      <param name="metadata">已下载的元数据。</param>
      <param name="policyImportExtensions">用于导入自定义策略语句的自定义策略导入程序。</param>
      <param name="wsdlImportExtensions">用于导入自定义 WSDL 元素的自定义 WSDL 导入程序。</param>
      <param name="quotas">要同时检索的元数据的数量</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportAllBindings">
      <summary>返回从元数据文档导入的一组 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象。</summary>
      <returns>从元数据文档导入的一组 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportAllContracts">
      <summary>返回表示元数据文档中端口类型信息的一组 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 对象。</summary>
      <returns>表示元数据文档中端口类型信息的一组 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportAllEndpoints">
      <summary>返回一个表示 WSDL 文档中的终结点的 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />，表示 WSDL 文档中的终结点。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportBinding(System.Web.Services.Description.Binding)">
      <summary>返回一个 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象，该对象表示一组元数据文档中的绑定信息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Channels.Binding" /> 对象，表示一组元数据文档中的绑定信息。</returns>
      <param name="wsdlBinding">一个 <see cref="T:System.Web.Services.Description.Binding" /> 对象，表示元数据文件中的绑定信息。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wsdlBinding" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportContract(System.Web.Services.Description.PortType)">
      <summary>返回一个 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 对象，该对象表示由指定端口类型信息找到的元数据。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ContractDescription" /> 对象，表示由指定端口类型信息找到的元数据。</returns>
      <param name="wsdlPortType">一个表示所需端口类型的 <see cref="T:System.Web.Services.Description.PortType" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">端口类型为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportEndpoint(System.Web.Services.Description.Port)">
      <summary>从一组元数据文档中返回 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />，该组文档使用指定 <see cref="T:System.Web.Services.Description.Port" /> 对象中的信息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> 对象，表示元数据文档中的特定 WSDL 端口信息。</returns>
      <param name="wsdlPort">一个表示所需 WSDL 端口信息的 <see cref="T:System.Web.Services.Description.Port" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wsdlPort" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportEndpoints(System.Web.Services.Description.Binding)">
      <summary>返回一个 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />，它表示使用指定 <see cref="T:System.Web.Services.Description.Binding" /> 的所有 WSDL 端口类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />，表示使用指定 <see cref="T:System.Web.Services.Description.Binding" /> 的所有 WSDL 端口类型。</returns>
      <param name="wsdlBinding">WSDL 端口中使用的一个 <see cref="T:System.Web.Services.Description.Binding" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wsdlBinding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportEndpoints(System.Web.Services.Description.PortType)">
      <summary>返回一个 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />，它表示与指定 <see cref="T:System.Web.Services.Description.PortType" /> 关联的所有 WSDL 端口类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />，表示与指定 <see cref="T:System.Web.Services.Description.PortType" /> 关联的所有 WSDL 端口类型。</returns>
      <param name="wsdlPortType">用于查找关联 WSDL 端口信息的 <see cref="T:System.Web.Services.Description.PortType" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wsdlBinding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wsdlBinding" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.WsdlImporter.ImportEndpoints(System.Web.Services.Description.Service)">
      <summary>返回一个 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />，它表示指定 <see cref="T:System.Web.Services.Description.Service" /> 中的所有 WSDL 端口类型。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Description.ServiceEndpointCollection" />，表示指定 <see cref="T:System.Web.Services.Description.Service" /> 中的所有 WSDL 端口类型。</returns>
      <param name="wsdlService">在其中搜索 WSDL 端口信息的 <see cref="T:System.Web.Services.Description.Service" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Description.WsdlImporter" /> 遇到错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wsdlService" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlImporter.WsdlDocuments">
      <summary>获取用于描述元数据文档中的协定信息的一组 <see cref="T:System.Web.Services.Description.ServiceDescription" /> 对象。</summary>
      <returns>用于描述元数据文档中的协定信息的 <see cref="T:System.Web.Services.Description.ServiceDescription" /> 对象的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions">
      <summary>获取一组 <see cref="T:System.ServiceModel.Description.IWsdlImportExtension" /> 对象，该组对象用于导入自定义 WSDL 信息。</summary>
      <returns>用于导入自定义 WSDL 信息的一组 <see cref="T:System.ServiceModel.Description.IWsdlImportExtension" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.WsdlImporter.XmlSchemas">
      <summary>获取用于描述元数据中的类型的一组 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</summary>
      <returns>用于描述元数据中的类型的一组 <see cref="T:System.Xml.Schema.XmlSchema" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.XmlSerializerMessageContractImporter">
      <summary>使用 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 从 WSDL 文档处理消息的导入。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerMessageContractImporter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.XmlSerializerMessageContractImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerMessageContractImporter.System#ServiceModel#Description#IWsdlImportExtension#BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>指定要在导入一组 WSDL 文档时使用的服务说明和架构集。</summary>
      <param name="wsdlDocuments">一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />，表示要检查的 WSDL 文档。</param>
      <param name="xmlSchemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，表示要在转换消息时使用的架构。</param>
      <param name="policy">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含要在导入消息时使用的策略文档。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerMessageContractImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>导入协定。</summary>
      <param name="importer">要用于导入的 <see cref="T:System.ServiceModel.Description.WsdlImporter" />。</param>
      <param name="contractContext">
        <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />，表示要使用的上下文。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerMessageContractImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>导入特定终结点。</summary>
      <param name="importer">一个 <see cref="T:System.ServiceModel.Description.WsdlImporter" />，表示要使用的导入程序。</param>
      <param name="endpointContext">一个 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" />，表示要导入的终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Description.XmlSerializerOperationBehavior">
      <summary>控制与操作相关联的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 的运行时行为。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
      <summary>使用特定操作初始化 <see cref="T:System.ServiceModel.Description.XmlSerializerOperationBehavior" /> 类的新实例。</summary>
      <param name="operation">要导出或序列化的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.XmlSerializerFormatAttribute)">
      <summary>初始化 <see cref="T:System.ServiceModel.Description.XmlSerializerOperationBehavior" /> 类的新实例。</summary>
      <param name="operation">要导出或序列化的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="attribute">一个 <see cref="T:System.ServiceModel.XmlSerializerFormatAttribute" />，用于保存 SOAP 使用和格式选项。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.GetXmlMappings">
      <summary>获取 XML 架构元素和 CLR 数据类型之间的映射集合。</summary>
      <returns>一个包含映射的 <see cref="T:System.Xml.Serialization.XmlMapping" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>将一组参数添加到操作说明。</summary>
      <param name="description">目标 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="parameters">一个包含参数的 <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>将客户端的行为应用于操作。</summary>
      <param name="description">一个表示操作的 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="proxy">一个表示客户端操作的 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>将调度行为应用于操作。</summary>
      <param name="description">目标 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="dispatch">要应用的 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>验证操作。</summary>
      <param name="description">要验证的目标 <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>以 WSDL 文档形式导出操作数据。</summary>
      <param name="exporter">要用于导出的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="contractContext">要导出的 <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.XmlSerializerOperationBehavior.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>以 WSDL 文档形式导出终结点数据。</summary>
      <param name="exporter">要用于导出的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="endpointContext">要导出的 <see cref="T:System.ServiceModel.Description.WsdlEndpointConversionContext" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.XmlSerializerOperationBehavior.XmlSerializerFormatAttribute">
      <summary>获取保存 SOAP 使用和格式选项的对象。</summary>
      <returns>一个保存 SOAP 使用和格式选项的 <see cref="T:System.ServiceModel.XmlSerializerFormatAttribute" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Diagnostics.PerformanceCounterScope">
      <summary>指定是否启用程序集的性能计数器。</summary>
    </member>
    <member name="F:System.ServiceModel.Diagnostics.PerformanceCounterScope.All">
      <summary>可以在运行时查看性能计数器。</summary>
    </member>
    <member name="F:System.ServiceModel.Diagnostics.PerformanceCounterScope.Default">
      <summary>创建单个性能计数器实例 _WCF_Admin。 此实例用于启用基础结构所使用的 SQM 数据的集合。 此实例的计数器值均未进行更新，因此将保持为零。 这是当不存在 Windows Communication Foundation (WCF) 的配置时的默认值。</summary>
    </member>
    <member name="F:System.ServiceModel.Diagnostics.PerformanceCounterScope.Off">
      <summary>性能计数器被禁用。 这是默认值。</summary>
    </member>
    <member name="F:System.ServiceModel.Diagnostics.PerformanceCounterScope.ServiceOnly">
      <summary>只启用与此服务相关的性能计数器。</summary>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ActionMessageFilter">
      <summary>表示一个查询，该查询可以测试消息的操作是否为指定操作集合中的操作。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ActionMessageFilter.#ctor(System.String[])">
      <summary>利用此类测试的操作的集合来初始化此类的新实例。</summary>
      <param name="actions">包含筛选器测试的操作的集合的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actions" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name=" actions" /> 数组为空。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ActionMessageFilter.Actions">
      <summary>获取此 <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> 测试的操作字符串的只读副本。</summary>
      <returns>包含此 <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> 测试的操作字符串的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ActionMessageFilter.CreateFilterTable``1">
      <summary>创建一个可以有效地测试消息操作的新筛选器表。</summary>
      <returns>可向其中添加 <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> 和关联的 <paramref name="FilterData" /> 的 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> 对象。</returns>
      <typeparam name="FilterData">与表中的筛选器关联的数据。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ActionMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>测试消息的操作是否与此 <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> 中指定的操作之一相匹配。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.Message" /> 操作标头与指定的操作之一相匹配，则为 true；否则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ActionMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>测试缓冲消息的操作标头是否与此 <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> 中指定的操作之一相匹配。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 操作标头与指定的操作之一相匹配，则为 true；否则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ChannelDispatcher">
      <summary>接受通道以及将通道与服务相关联的组件。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.#ctor(System.ServiceModel.Channels.IChannelListener)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcher" /> 类的新实例。</summary>
      <param name="listener">通道调度程序的 <see cref="T:System.ServiceModel.Channels.IChannelListener" />。</param>
      <exception cref="T:system.ArgumentNullException">
        <paramref name="listener" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.#ctor(System.ServiceModel.Channels.IChannelListener,System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcher" /> 类的新实例。</summary>
      <param name="listener">通道调度程序的 <see cref="T:System.ServiceModel.Channels.IChannelListener" />。</param>
      <param name="bindingName">用于配置服务的绑定的名称。</param>
      <exception cref="T:system.ArgumentNullException">
        <paramref name="listener" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.#ctor(System.ServiceModel.Channels.IChannelListener,System.String,System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcher" /> 类的新实例。</summary>
      <param name="listener">The <see cref="T:System.ServiceModel.Channels.IChannelListener" /> for the service.</param>
      <param name="bindingName">用于配置服务的绑定的名称。</param>
      <param name="timeouts">服务的 <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
      <exception cref="T:system.ArgumentNullException">
        <paramref name="listener" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.AsynchronousTransactedAcceptEnabled">
      <summary>获取一个值，该值指示侦听程序上的事务处理接受方法调用是否为异步。</summary>
      <returns>如果在侦听程序上异步调用事务的接受方法，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.Attach(System.ServiceModel.ServiceHostBase)">
      <summary>将通道调度程序附加到宿主。</summary>
      <param name="host">服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.BindingName">
      <summary>获取用于配置服务的绑定的名称。</summary>
      <returns>服务的绑定名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.ChannelInitializers">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.IChannelInitializer" /> 对象的集合，在首次创建通道时您可以使用这些对象来检查通道以及向通道添加状态。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IChannelInitializer" /> 对象类型的 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.CloseInput">
      <summary>阻止侦听程序接受新通道。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.DefaultCloseTimeout">
      <summary>获取为关闭通道调度程序预留的默认时间间隔。</summary>
      <returns>指定为关闭通道调度程序预留的默认时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.DefaultOpenTimeout">
      <summary>获取为打开通道调度程序预留的默认时间间隔。</summary>
      <returns>指定为关闭通道调度程序预留的默认时间间隔的 <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.Detach(System.ServiceModel.ServiceHostBase)">
      <summary>将服务宿主与通道调度程序分离。</summary>
      <param name="host">服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="host" /> 不是通道调度程序的宿主。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="host" /> 不是通道调度程序的宿主。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.Endpoints">
      <summary>获取将消息转发到通道终结点的终结点调度程序。</summary>
      <returns>将消息转发到通道终结点的 <see cref="T:System.ServiceModel.Dispatcher.EndpointDispatcher" /> 的 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.IErrorHandler" /> 对象的集合，这些对象可用于插入终结点的自定义错误处理功能。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Dispatcher.IErrorHandler" /> 对象的 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.Host">
      <summary>获取与调度程序关联的服务的宿主。</summary>
      <returns>与调度程序关联的服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.IncludeExceptionDetailInFaults">
      <summary>获取或设置一个值，该值指示是否在错误中包含有关异常的详细信息。</summary>
      <returns>如果在错误中包含有关异常的详细信息，则为 true，否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.IsTransactedAccept">
      <summary>获取一个值，该值指示对侦听程序的接受方法调用是否在事务中完成。</summary>
      <returns>如果对侦听程序的接受方法调用是在事务中完成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.IsTransactedReceive">
      <summary>获取一个值，该值指示对侦听程序的接收方法调用是否在事务中完成。</summary>
      <returns>如果对侦听程序的接收方法调用是在事务中完成，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.Listener">
      <summary>获取与通道调度程序关联的侦听程序。</summary>
      <returns>与通道调度程序关联的 <see cref="T:System.ServiceModel.Channels.IChannelListener" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.ManualAddressing">
      <summary>获取或设置一个值，该值指示通道调度程序是否将寻址标头添加到请求-回复消息。</summary>
      <returns>如果代理不添加任何寻址标头，则为 true；否则为 false。 默认值为 false。 请参见“备注”。</returns>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.MaxPendingReceives">
      <summary>获取或设置每个通道的最大挂起消息数。</summary>
      <returns>一个表示最大消息数的整数。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.MaxTransactedBatchSize">
      <summary>获取或设置事务处理批处理的最大大小。</summary>
      <returns>事务处理批处理的最大大小。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值小于零。</exception>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.MessageVersion">
      <summary>获取或设置使用的或预期的 SOAP 消息和 WS-Addressing 版本。</summary>
      <returns>使用的或预期的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnAbort">
      <summary>中止与调度程序关联的侦听程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始必须在指定时间间隔内完成的异步操作，来关闭调度程序的通道侦听程序。</summary>
      <returns>引用关闭调度程序的通道侦听程序的异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收关闭操作的异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始必须在指定时间间隔内完成的异步操作，来打开调度程序的通道侦听程序。</summary>
      <returns>引用打开调度程序的通道侦听程序的异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" />，指定在超时前必须完成打开操作的时间。</param>
      <param name="callback">接收打开操作的异步完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步打开操作相关联的状态信息。</param>
      <exception cref="T:System.InvalidOperationException">宿主或消息版本为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnClose(System.TimeSpan)">
      <summary>在指定的时间间隔内关闭与调度程序关联的通道侦听程序。</summary>
      <param name="timeout">指定为关闭侦听程序预留的时间间隔的 <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnClosed">
      <summary>提供对关闭与通道调度程序关联的终结点调度程序的跟踪。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnEndClose(System.IAsyncResult)">
      <summary>完成异步操作来关闭调度程序的通道侦听程序。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnEndOpen(System.IAsyncResult)">
      <summary>完成异步操作来打开调度程序的通道侦听程序。</summary>
      <param name="result">通过调用 <see cref="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpen(System.TimeSpan)">
      <summary>打开与通道调度程序关联的侦听程序。</summary>
      <param name="timeout">指定为打开侦听程序预留的时间间隔的 <see cref="T:System.Timespan" />。</param>
      <exception cref="T:System.InvalidOperationException">宿主或消息版本为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpened">
      <summary>填充和验证用于调度到终结点的筛选器表。</summary>
      <exception cref="T:System.InvalidOperationException">宿主为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcher.OnOpening">
      <summary>检查通道调度程序是否附加到宿主。</summary>
      <exception cref="T:System.InvalidOperationException">宿主为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.ReceiveContextEnabled">
      <summary>获取或设置是否启用 ReceiveContext。</summary>
      <returns>如果启用接收上下文，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.ReceiveSynchronously">
      <summary>获取或设置一个值，该值指定调度程序是否使用同步调用从通道读取消息。</summary>
      <returns>如果调度程序使用同步方法从通道读取消息，则为 true，否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.SendAsynchronously">
      <summary>获取或设置是否异步发送消息。</summary>
      <returns>如果异步发送消息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.ServiceThrottle">
      <summary>获取或设置与通道调度程序关联的服务的服务控制器。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.ServiceThrottle" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.TransactionIsolationLevel">
      <summary>获取或设置事务的默认隔离级别。</summary>
      <returns>
        <see cref="T:System.Transactions.IsolationLevel" /> 值之一。 默认值为 <see cref="F:System.Transactions.IsolationLevel.Unspecified" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">隔离级别设置未定义。</exception>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcher.TransactionTimeout">
      <summary>获取或设置由代表该服务的调度程序创建的新事务的默认超时值。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，表示事务的默认超时时段。 默认值为 <see cref="F:System.TimeSpan.Zero" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值的设置小于零或过大。</exception>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase">
      <summary>接受通道并可将通道与服务相关联的通道调度程序的抽象基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcherBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)">
      <summary>在派生类中重写时，将通道调度程序附加到特定主机。</summary>
      <param name="host">服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态，或者主机已设置。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput">
      <summary>在派生类中重写时，移除与通道调度程序关联的终结点调度程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)">
      <summary>在派生类中重写时，将通道调度程序与特定主机分离。</summary>
      <param name="host">
        <see cref="T:System.ServiceModel.ServiceHostBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状态，或者主机已设置。</exception>
      <exception cref="T:System.ObjectDisposedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 或 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信对象处于 <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状态。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host">
      <summary>在派生类中重写时，获取与通道调度程序关联的服务主机。</summary>
      <returns>与调度程序关联的服务的 <see cref="T:System.ServiceModel.ServiceHostBase" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener">
      <summary>在派生类中重写时，获取与通道调度程序关联的通道侦听程序。</summary>
      <returns>与通道调度程序关联的 <see cref="T:System.ServiceModel.Channels.IChannelListener" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ChannelDispatcherCollection">
      <summary>提供包含通道调度程序的线程安全集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcherCollection.ClearItems">
      <summary>从集合中移除所有通道调度程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcherCollection.InsertItem(System.Int32,System.ServiceModel.Dispatcher.ChannelDispatcherBase)">
      <summary>将通道调度程序插入到集合中的指定索引位置。</summary>
      <param name="index">要从集合中检索的通道调度程序的从零开始的索引。</param>
      <param name="item">要作为元素插入到集合中的通道调度程序。</param>
      <exception cref="T:System.ObjectDisposedException">与通道调度程序集合关联的服务宿主被关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
      <exception cref="T:System.InvalidOperationException">通信对象没有处于任何状态</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcherCollection.RemoveItem(System.Int32)">
      <summary>将通道调度程序从集合中的指定索引位置移除。</summary>
      <param name="index">要从集合中移除的通道调度程序的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ChannelDispatcherCollection.SetItem(System.Int32,System.ServiceModel.Dispatcher.ChannelDispatcherBase)">
      <summary>将指定索引位置的通道调度程序替换为其他项。</summary>
      <param name="index">要替换的通道调度程序的从零开始的索引。</param>
      <param name="item">要替换的通道调度程序</param>
      <exception cref="T:System.ObjectDisposedException">与通道调度程序的此集合关联的服务处于 <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状态。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 小于零或大于集合中的项数。</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientOperation">
      <summary>用于在客户端对象或客户端通道对象中修改或扩展特定协定操作的执行行为。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />、名称和操作值来初始化 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 类的新实例。</summary>
      <param name="parent">包含的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象。</param>
      <param name="name">操作的名称。</param>
      <param name="action">操作 (operation) 的操作 (action)。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />、名称、操作以及答复操作值来初始化 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 类的新实例。</summary>
      <param name="parent">包含的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象。</param>
      <param name="name">操作的名称。</param>
      <param name="action">操作 (operation) 的操作 (action)。</param>
      <param name="replyAction">回复消息的操作。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Action">
      <summary>获取操作 (operation) 的操作 (action)。</summary>
      <returns>操作 (operation) 的操作 (action)。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod">
      <summary>获取或设置与异步操作关联的方法。</summary>
      <returns>表示处理异步方法对的开头部分的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象；如果操作不是异步方法对的一部分，则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ClientParameterInspectors">
      <summary>获取用于查看或修改在客户调用前后参数的参数检查对象的集合。</summary>
      <returns>用于查看或修改客户端之前或之后的参数的参数审查器对象的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply">
      <summary>获取或设置一个值，该值指示 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> 属性值是否用于反序列化答复消息。</summary>
      <returns>如果返回类型不是 <see cref="T:System.ServiceModel.Channels.Message" />，则为 true ；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod">
      <summary>获取或设置实现操作的异步结束方法的方法。</summary>
      <returns>表示操作的结束方法的 <see cref="T:System.Reflection.MethodInfo" />；如果操作不是异步的，则为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.FaultContractInfos">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.FaultContractInfo" /> 对象的集合，这些对象表示此操作的指定的 SOAP 错误。</summary>
      <returns>为操作指定的 SOAP 错误的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter">
      <summary>获取或设置将对象序列化到消息，以及将消息反序列化到对象的格式化程序。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IClientMessageFormatter" /> 实现。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsInitiating">
      <summary>获取或设置一个值，该值指示会话是否可以通过向操作发送消息来启动。</summary>
      <returns>如果可以通过向操作发送消息来启动会话，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay">
      <summary>获取或设置一个值，该值指示操作是否为单向操作。</summary>
      <returns>如果 indigo2 客户端不预期回复，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsTerminating">
      <summary>获取或设置一个值，该值指示此操作是否为会话中最后一个操作。</summary>
      <returns>如果在调用该操作后关闭关联的会话，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Name">
      <summary>获取操作的名称。</summary>
      <returns>操作的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Dispatcher.IParameterInspector" /> 对象的集合，这些对象可以检查和修改特定的客户端方法的入站和出站对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IParameterInspector" /> 实现的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Parent">
      <summary>获取包含的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象。</summary>
      <returns>包含的 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ReplyAction">
      <summary>获取此操作 (operation) 的答复消息的操作 (action)。</summary>
      <returns>答复的操作。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest">
      <summary>获取或设置一个值，该值指定 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> 对象是否序列化出站消息。</summary>
      <returns>如果 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> 属性将返回值序列化为答复消息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SyncMethod">
      <summary>获取或设置与此操作关联的方法。</summary>
      <returns>表示实现该操作的方法的 <see cref="T:System.Reflection.MethodInfo" />。 如果操作是异步的，则此值为 null，并且实现的方法存储在 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod" /> 和 <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod" /> 属性中。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.TaskMethod">
      <summary>获取或设置与任务关联的方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示与任务关联的方法。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.TaskTResult">
      <summary>获取或设置与任务关联的方法的结果的类型。</summary>
      <returns>与任务相关联的方法的结果的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientOperationCompatBase">
      <summary>表示客户端运行时 compat 基。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperationCompatBase.ParameterInspectors">
      <summary>获取参数审查器的集合。</summary>
      <returns>参数审查器的集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientRuntime">
      <summary>表示类的插入点，这些类可以扩展客户端应用程序处理的所有消息的 Windows Communication Foundation (WCF) 客户端对象的功能。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.CallbackClientType">
      <summary>获取或设置与双工客户端关联的回调协定的类型。</summary>
      <returns>表示与双工客户端关联的回调协定的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime">
      <summary>获取调度服务启动的操作的调度运行时。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 对象。 如果协定是双工协定，则调度行为包含服务启动的操作；否则调度行为不包含任何操作。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ChannelInitializers">
      <summary>获取通道初始值设定项对象的集合，这些对象用于自定义与客户端关联的通道。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IChannelInitializer" /> 实现的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ClientMessageInspectors">
      <summary>获取用于查看或修改特殊服务操作消息的消息检查对象的集合。</summary>
      <returns>用于查看或修改特定服务操作消息的消息检查器对象的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ClientOperations">
      <summary>获取用于关联扩展对象的客户操作对象和某种特殊服务操作行为的集合，其中的扩展对象检查和修改消息。</summary>
      <returns>用于附加扩展对象的客户操作对象的集合，这些扩展对象可以检查或修改消息和特定服务操作的行为。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractClientType">
      <summary>获取或设置与客户端关联的协定的类型。</summary>
      <returns>表示与此客户端关联的协定的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractName">
      <summary>获取与客户端关联的协定的名称。</summary>
      <returns>客户端的协定名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractNamespace">
      <summary>获取与客户端关联的协定的命名空间。</summary>
      <returns>与客户端关联的协定的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers">
      <summary>获取交互式信道初始化软件的集合。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> 的同步集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing">
      <summary>获取或设置一个值，该值指示客户端是否将寻址标头添加到请求-答复消息。</summary>
      <returns>如果客户端不添加任何寻址标头，则为 true；否则为 false。 默认值为 false。 请参见“备注”。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize">
      <summary>获取或设置错误的最大大小。</summary>
      <returns>一个表示错误的最大大小的整数。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors">
      <summary>获取客户端的消息检查器实现的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector" /> 实现的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageVersionNoneFaultsEnabled">
      <summary>获取或设置一个值，该值指示是否设置 MessageVersionNoneFaultsEnabled 属性。</summary>
      <returns>如果 MessageVersionNoneFaultsEnabled 属性已设置；则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations">
      <summary>获取客户端的客户端操作的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 对象的同步集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector">
      <summary>获取或设置可用于选择 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 的一个 <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> 实现。</summary>
      <returns>用于选择 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 的 <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation">
      <summary>获取在 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations" /> 集合中不具有相应的 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> 的方法的客户端操作。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />，它表示当操作选择器找不到与消息匹配的操作时，当前消息内容被路由到的方法。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ValidateMustUnderstand">
      <summary>获取或设置一个值，该值指定是由系统还是由应用程序强制执行 SOAP MustUnderstand 标头处理。</summary>
      <returns>如果由系统执行 SOAP 标头 MustUnderstand 处理，则为 true，否则为 false，这表示由应用程序执行此处理。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Via">
      <summary>获取或设置用于通过客户端发送消息的传输地址。</summary>
      <returns>
        <see cref="T:System.Uri" />，它是传输的目标地址。 默认值为客户端的 <see cref="P:System.ServiceModel.EndpointAddress.Uri" /> 值。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientRuntimeCompatBase">
      <summary>表示客户端运行时 compat 基。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntimeCompatBase.MessageInspectors">
      <summary>获取客户端的消息检查器实现的集合。</summary>
      <returns>客户端的消息检查器实现的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntimeCompatBase.Operations">
      <summary>获取客户端的客户端操作的集合。</summary>
      <returns>客户操作的集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DispatchOperation">
      <summary>用于修改或扩展服务终结点中的特定服务操作的执行行为。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DispatchOperation.#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String)">
      <summary>使用指定的调用运行时、名称以及操作值初始化 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> 类的新实例。</summary>
      <param name="parent">关联的 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 对象。</param>
      <param name="name">调度操作的名称。该名称用作 <see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations" /> 集合的键。</param>
      <param name="action">正在为其创建调度操作的消息操作。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DispatchOperation.#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String,System.String)">
      <summary>使用指定的调用运行时、名称、操作以及回复操作值初始化 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> 类的新实例。</summary>
      <param name="parent">关联的 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 对象。</param>
      <param name="name">调度操作的名称。</param>
      <param name="action">正在为其创建调度操作的 SOAP 消息操作。</param>
      <param name="replyAction">与此调度操作关联的回复操作。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Action">
      <summary>获取此操作 (operation) 的操作 (action) 的值。</summary>
      <returns>此操作 (operation) 的操作 (action) 的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.AutoDisposeParameters">
      <summary>获取或设置是否自动释放参数。</summary>
      <returns>如果自动释放参数，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers">
      <summary>定义方法的 <see cref="T:System.ServiceModel.Dispatcher.ICallContextInitializer" /> 对象的集合，通过这些方法，可以使用调用用户代码的线程来初始化和回收本地线程存储。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.ICallContextInitializer" /> 对象的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.DeserializeRequest">
      <summary>获取或设置一个值，该值指示 <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> 属性值是否用于反序列化请求消息。</summary>
      <returns>如果返回类型是 <see cref="T:System.ServiceModel.Channels.Message" /> 类型并且没有 out 参数，则为 false；否则为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.FaultContractInfos">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.FaultContractInfo" /> 对象的集合，这些对象表示此操作的指定的 SOAP 错误。</summary>
      <returns>为操作指定的 SOAP 错误的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter">
      <summary>获取或设置将消息反序列化到对象，以及将对象序列化到消息的格式化程序。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageFormatter" /> 实现。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Impersonation">
      <summary>获取或设置一个值，该值指示该操作所需要的模拟程度。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ImpersonationOption" /> 值之一。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Invoker">
      <summary>获取或设置调用用户定义的方法的 <see cref="T:System.ServiceModel.Dispatcher.IOperationInvoker" /> 对象。</summary>
      <returns>调用用户定义的方法的 <see cref="T:System.ServiceModel.Dispatcher.IOperationInvoker" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.IsInsideTransactedReceiveScope">
      <summary>获取或设置操作的范围是否位于事务处理接收活动内部。</summary>
      <returns>如果该范围位于事务处理接收活动内部，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.IsOneWay">
      <summary>获取一个值，该值指示操作是否为单向操作。</summary>
      <returns>如果该操作只有输入，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.IsTerminating">
      <summary>获取或设置一个值，该值指示此操作是否为会话中最后一个操作。</summary>
      <returns>如果在调用该操作后关闭关联的会话，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Name">
      <summary>获取操作的名称。</summary>
      <returns>操作的名称。 该名称可以用作 <see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations" /> 集合的键。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Dispatcher.IParameterInspector" /> 对象的集合，这些对象可以检查和修改特定代理方法的入站对象和出站对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IParameterInspector" /> 实现的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Parent">
      <summary>获取关联的 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 对象。</summary>
      <returns>关联的 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.ReleaseInstanceAfterCall">
      <summary>获取或设置一个值，该值指定是否在调用后回收服务对象。</summary>
      <returns>如果在调用完成后释放实例，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.ReleaseInstanceBeforeCall">
      <summary>获取或设置一个值，该值指定是否在调度调用前回收服务对象。</summary>
      <returns>如果在调度该调用前释放实例并创建新实例，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.ReplyAction">
      <summary>获取该操作 (operation) 的回复消息的操作 (action)。</summary>
      <returns>该操作 (operation) 的回复消息的操作 (action)。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply">
      <summary>获取或设置一个值，该值指定 <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> 对象是否序列化答复消息。</summary>
      <returns>如果 <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> 属性将返回值序列化为答复消息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.TransactionAutoComplete">
      <summary>获取或设置一个值，该值指定当操作成功返回时是否自动完成当前事务。</summary>
      <returns>如果在成功返回时自动完成操作，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.TransactionRequired">
      <summary>获取或设置一个值，该值指定是否必须在事务中执行操作。</summary>
      <returns>如果必须在事务范围内执行操作，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DispatchRuntime">
      <summary>公开某些属性，这些属性用于修改默认服务行为以及附加自定义对象，而这些对象可修改将传入消息转换为对象和调度到操作的方式。 此类不能被继承。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.AutomaticInputSessionShutdown">
      <summary>获取或设置一个值，该值指定当客户端关闭输出会话时，服务是否关闭输入会话。</summary>
      <returns>如果客户端关闭输出会话时服务关闭输入会话，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象，该对象表示对双工回调终结点的出站调用的 Windows Communication Foundation (WCF) 扩展安装点。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> 对象，该对象为双工协定中运行时客户端自定义项的安装点。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ChannelDispatcher">
      <summary>获取此调度运行时对象的 <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcher" />。</summary>
      <returns>调度运行时对象的通道调度程序。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ConcurrencyMode">
      <summary>获取或设置服务的实例是依次还是同时处理消息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.ConcurrencyMode" /> 对象，该对象控制服务的实例是依次还是同时处理消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.EndpointDispatcher">
      <summary>获取此调度运行时的 <see cref="T:System.ServiceModel.Dispatcher.EndpointDispatcher" />。</summary>
      <returns>此调度运行时的 <see cref="T:System.ServiceModel.Dispatcher.EndpointDispatcher" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.EnsureOrderedDispatch">
      <summary>获取或设置一个值，该值指示消息是否以其发送顺序进行调度。</summary>
      <returns>如果消息按照发送时的顺序调度，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ExternalAuthorizationPolicies">
      <summary>获取或设置外部授权策略，这些策略可通过给定的声明集，定义一组用于对用户进行授权的规则。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 对象的一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，这些对象可通过给定的声明集，定义一组用于对用户进行授权的规则。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.IgnoreTransactionMessageProperty">
      <summary>获取或设置一个值，该值指示是否忽略 <see cref="T:System.ServiceModel.Channels.TransactionMessageProperty" />。</summary>
      <returns>如果在执行服务方法时忽略 <see cref="T:System.ServiceModel.Channels.TransactionMessageProperty" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ImpersonateCallerForAllOperations">
      <summary>获取或设置一个值，该值控制服务是否尝试使用传入消息所提供的凭据进行模拟。</summary>
      <returns>如果当操作的 <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Impersonation" /> 属性值为 <see cref="F:System.ServiceModel.ImpersonationOption.Required" /> 或 <see cref="F:System.ServiceModel.ImpersonationOption.Allowed" /> 时，服务尝试根据消息凭据进行模拟，则为 true；如果仅当操作的 <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Impersonation" /> 属性值为 <see cref="F:System.ServiceModel.ImpersonationOption.Required" /> 时服务才尝试进行模拟，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ImpersonateOnSerializingReply">
      <summary>获取指示模拟是否被用在序列化回复操作上的值。</summary>
      <returns>如果将模拟用于序列化答复操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.InputSessionShutdownHandlers">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.IInputSessionShutdown" /> 对象的集合，这些对象可用于添加自定义处理程序以控制如何关闭输入会话。</summary>
      <returns>类型为 <see cref="T:System.ServiceModel.Dispatcher.IInputSessionShutdown" /> 的对象的 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceContextInitializers">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.IInstanceContextInitializer" /> 对象的集合，这些对象可用于在首次创建 <see cref="T:System.ServiceModel.InstanceContext" /> 对象时对其进行检查或修改。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IInstanceContextInitializer" /> 类型的一个 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceContextProvider">
      <summary>获取或设置要由 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 使用的 <see cref="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />。</summary>
      <returns>要由 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 使用的 <see cref="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider">
      <summary>获取或设置一个 <see cref="T:System.ServiceModel.Dispatcher.IInstanceProvider" /> 对象，可使用该对象控制服务对象的创建和析构。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Dispatcher.IInstanceProvider" /> 对象，该对象可控制与 <see cref="T:System.ServiceModel.InstanceContext" /> 对象关联的服务对象的创建和析构。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.MessageAuthenticationAuditLevel">
      <summary>获取或设置一个值，该值指定是否将成功的消息身份验证事件写入由 <see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.SecurityAuditLogLocation" /> 指定的事件日志。</summary>
      <returns>
        <see cref="T:System.ServiceModel.AuditLevel" /> 值之一。 默认值为 <see cref="F:System.ServiceModel.AuditLevel.None" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" /> 对象的集合，这些对象可用于在终结点中为所有传入消息和传出消息附加自定义消息检查器。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" /> 类型的一个 <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> 对象的集合，这些对象可用于控制特定操作的执行行为。</summary>
      <returns>类型为 <see cref="T:System.String" /> 和 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> 的对象的 <see cref="T:System.Collections.Generic.SynchronizedKeyedCollection`2" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.OperationSelector">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Dispatcher.IDispatchOperationSelector" /> 对象，该对象可控制对特定消息的目标 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> 的选择。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IDispatchOperationSelector" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.PreserveMessage">
      <summary>获取或设置是否保留消息。</summary>
      <returns>如果消息被保留，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.PrincipalPermissionMode">
      <summary>获取或设置一个值，该值指定如何设置 <see cref="P:System.Threading.Thread.CurrentPrincipal" /> 属性。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.PrincipalPermissionMode" /> 值之一，默认值为 <see cref="F:System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ReleaseServiceInstanceOnTransactionComplete">
      <summary>获取或设置一个值，该值指定在成功完成事务后是否回收服务对象。</summary>
      <returns>如果在成功完成事务后回收服务对象，则为 true；否则为 false。 默认值是 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete" /> 值。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.RoleProvider">
      <summary>获取或设置由 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 使用的自定义 <see cref="T:System.Web.Security.RoleProvider" />。</summary>
      <returns>由 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 使用的自定义 <see cref="T:System.Web.Security.RoleProvider" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.SecurityAuditLogLocation">
      <summary>获取或设置审核日志的位置。</summary>
      <returns>
        <see cref="T:System.ServiceModel.AuditLogLocation" /> 值之一。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthenticationManager">
      <summary>获取或设置用于管理服务操作的身份验证过程的对象。</summary>
      <returns>身份验证管理对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationAuditLevel">
      <summary>获取或设置一个值，该值控制对哪些服务授权事件进行审核。</summary>
      <returns>
        <see cref="T:System.ServiceModel.AuditLevel" /> 值之一。 默认值为 <see cref="F:System.ServiceModel.AuditLevel.None" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager">
      <summary>获取 <see cref="T:System.ServiceModel.ServiceAuthorizationManager" />，以提供对 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 的授权检查。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.ServiceAuthorizationManager" />，用于提供对 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 的授权检查。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.SingletonInstanceContext">
      <summary>获取或设置要由 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 使用的单一实例 <see cref="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />。</summary>
      <returns>要由 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 使用的单一实例 <see cref="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.SuppressAuditFailure">
      <summary>获取或设置一个值，该值指定是否要取消显示记录过程中出现的非关键异常。</summary>
      <returns>如果取消显示记录过程中出现的非关键异常，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.SynchronizationContext">
      <summary>获取或设置用于调用服务操作的同步上下文。</summary>
      <returns>用于确定对哪个线程调用服务操作的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.TransactionAutoCompleteOnSessionClose">
      <summary>获取或设置一个值，该值指定当会话关闭时是否自动完成当前事务。</summary>
      <returns>如果会话关闭时自动完成事务，则为 true；否则为 false。 默认值为由 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose" /> 指定的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.Type">
      <summary>获取或设置协定类型。</summary>
      <returns>协定的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.UnhandledDispatchOperation">
      <summary>获取或设置将无法识别的消息调度到的操作。</summary>
      <returns>将无法识别的消息调度到的 <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.ValidateMustUnderstand">
      <summary>获取或设置 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ValidateMustUnderstand" /> 的值。</summary>
      <returns>
        <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ValidateMustUnderstand" /> 的值。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter">
      <summary>表示用于测试消息是否满足指定终结点地址的要求的查询。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>利用用以测试消息的指定地址初始化 <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> 类的新实例。</summary>
      <param name="address">用以测试消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> 类的新实例。</summary>
      <param name="address">用以测试消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="includeHostNameInComparison">如果主机名称包含在终结点地址比较中，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Address">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> 用以测试消息的地址。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> 用以测试消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.CreateFilterTable``1">
      <summary>创建一个可同时利用多个终结点地址对一个消息进行测试的新筛选器表。</summary>
      <returns>实现 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> 接口的对象，该接口包含带有关联 <paramref name="FilterData" /> 的 <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" />。</returns>
      <typeparam name="FilterData">与表中的筛选器关联的数据。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.IncludeHostNameInComparison">
      <summary>获取一个值，该值指示在终结点地址比较中是否包含主机名称。</summary>
      <returns>如果主机名称包含在终结点地址比较中，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>测试消息是否满足指定的终结点地址。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.Message" /> 对象满足筛选器中指定的终结点地址，则为 true；否则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>测试缓冲消息是否满足指定的终结点地址。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象满足终结点地址，则为 true；否则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.EndpointDispatcher">
      <summary>表示公开属性的运行时对象，使用这些属性可以在服务应用程序中插入运行时扩展或修改消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointDispatcher.#ctor(System.ServiceModel.EndpointAddress,System.String,System.String)">
      <summary>使用指定的地址、协定名称和协定命名空间初始化 <see cref="T:System.ServiceModel.Dispatcher.EndpointDispatcher" /> 类的新实例。</summary>
      <param name="address">终结点地址。</param>
      <param name="contractName">终结点协定的名称。</param>
      <param name="contractNamespace">终结点协定的命名空间。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointDispatcher.#ctor(System.ServiceModel.EndpointAddress,System.String,System.String,System.Boolean)">
      <summary>使用指定的地址、协定名称、协定命名空间初始化 <see cref="T:System.ServiceModel.Dispatcher.EndpointDispatcher" /> 类的新实例，并指定终结点是否为公用的系统终结点。</summary>
      <param name="address">终结点地址。</param>
      <param name="contractName">终结点协定的名称。</param>
      <param name="contractNamespace">终结点协定的命名空间。</param>
      <param name="isSystemEndpoint">如果由服务器而非用户内部创建终结点，则为 true，否则为 false。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象，该对象用于确定是否将特定的消息发送到终结点地址。</summary>
      <returns>用于将消息路由到适当的终结点的地址筛选器。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.ChannelDispatcher">
      <summary>获取关联的 <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcher" /> 对象，该对象可以用于检查或修改其他与通道相关的值和行为。</summary>
      <returns>通道调度程序，该对象可以用于检查或修改其他与通道相关的值和行为。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象，该对象用于确定是否将消息发送到此协定。</summary>
      <returns>用于将消息路由到适当的协定的筛选器。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractName">
      <summary>获取终结点协定名称。</summary>
      <returns>终结点协定的名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractNamespace">
      <summary>获取终结点协定的命名空间。</summary>
      <returns>终结点协定的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.DispatchRuntime">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> 对象，该对象用于在整个服务终结点或客户端回调终结点中检查、修改或扩展运行时行为。</summary>
      <returns>用于在整个服务终结点或客户端回调终结点中检查、修改或扩展运行时行为的 <see cref="P:System.ServiceModel.Dispatcher.EndpointDispatcher.DispatchRuntime" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.EndpointAddress">
      <summary>获取终结点的地址。</summary>
      <returns>终结点的地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.FilterPriority">
      <summary>当 <see cref="P:System.ServiceModel.Dispatcher.EndpointDispatcher.ChannelDispatcher" /> 选择终结点时，获取或设置 <see cref="P:System.ServiceModel.Dispatcher.EndpointDispatcher.ContractFilter" /> 和 <see cref="P:System.ServiceModel.Dispatcher.EndpointDispatcher.AddressFilter" /> 组合的优先级。</summary>
      <returns>筛选器的优先级。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.EndpointDispatcher.IsSystemEndpoint">
      <summary>获取一个值，该值指示终结点是否由服务器而非用户在内部创建。</summary>
      <returns>如果系统已生成终结点，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ExceptionHandler">
      <summary>扩展 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 类可以为 Windows Communication Foundation (WCF) 运行时内出现的未经处理的异常创建异常处理程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle">
      <summary>获取处理所有异常的 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 的实例。</summary>
      <returns>返回所有异常的 true 的 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler">
      <summary>获取或设置应用程序域的当前 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 实现。</summary>
      <returns>分配一个自定义 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 对象，该对象接收异步 Windows Communication Foundation (WCF) 线程上发生的未经处理的异常。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)">
      <summary>当在派生类中重写时，如果已经处理了异常，则返回 true；或者，如果重新引发异常并且应用程序终止，则返回 false。</summary>
      <returns>如果已处理异常，则为 true；否则为 false。</returns>
      <param name="exception">Windows Communication Foundation (WCF) 运行时内发生并且可能会终止应用程序的异常。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler">
      <summary>获取或设置应用程序域的当前传输 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 实现。</summary>
      <returns>一个自定义 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 对象，该对象接收全局 Windows Communication Foundation (WCF) 传输内发生的未经处理的异常。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.FaultContractInfo">
      <summary>表示有关在 <see cref="T:System.ServiceModel.FaultContractAttribute" /> 属性中指定的 SOAP 错误的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FaultContractInfo.#ctor(System.String,System.Type)">
      <summary>初始化使用指定操作和详细信息类型的 <see cref="T:System.ServiceModel.Dispatcher.FaultContractInfo" /> 类的新实例。</summary>
      <param name="action">SOAP 错误的操作。</param>
      <param name="detail">序列化为 SOAP 错误详细信息的详细信息类型。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Action">
      <summary>获取 SOAP 错误操作的值。</summary>
      <returns>SOAP 错误操作的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Detail">
      <summary>序列化为 SOAP 错误详细信息的对象的类型。</summary>
      <returns>表示序列化的 SOAP 错误详细信息的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException">
      <summary>筛选器或筛选器表试图访问未缓存的消息的正文时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>利用指定流的源和目标的数据以及序列化异常所需的信息来初始化 <see cref="T:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException.#ctor(System.String,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>利用指定的错误消息和试图检查消息正文的筛选器初始化 <see cref="T:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="filters">试图检查消息正文的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及导致当前异常的内部异常来初始化 <see cref="T:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException.#ctor(System.String,System.Exception,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>利用指定的错误消息、导致当前异常的内部异常和包含试图检查正文的筛选器的集合来初始化 <see cref="T:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
      <param name="filters">包含试图检查消息正文的筛选器的类型 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FilterInvalidBodyAccessException.Filters">
      <summary>获取包含导致引发异常的筛选器的筛选器集合。</summary>
      <returns>包含导致引发异常的筛选器的类型 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ICallContextInitializer">
      <summary>定义方法，通过该方法可以使用调用用户代码的线程来初始化和回收本地线程存储。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)">
      <summary>实现它来参与清理调用该操作的线程。</summary>
      <param name="correlationState">从 <see cref="M:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)" /> 方法返回的关联对象。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)">
      <summary>实现它来参与初始化操作线程。</summary>
      <returns>作为 <see cref="M:System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)" /> 方法的参数传回的关联对象。</returns>
      <param name="instanceContext">操作的服务实例。</param>
      <param name="channel">客户端通道。</param>
      <param name="message">传入消息。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IChannelInitializer">
      <summary>定义当创建通道时通知服务或客户端的接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IChannelInitializer.Initialize(System.ServiceModel.IClientChannel)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.IClientChannel" /> 来初始化 <see cref="T:System.ServiceModel.Dispatcher.IChannelInitializer" /> 类。</summary>
      <param name="channel">用于初始化 <see cref="T:System.ServiceModel.Dispatcher.IChannelInitializer" /> 的 <see cref="T:System.ServiceModel.IClientChannel" />。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageFormatter">
      <summary>定义用于控制客户端应用程序的消息与对象之间的转换的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.DeserializeReply(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>将消息转换为将传回给调用操作的返回值和 out 参数。</summary>
      <returns>操作的返回值。</returns>
      <param name="message">入站消息。</param>
      <param name="parameters">任何 out 值。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.SerializeRequest(System.ServiceModel.Channels.MessageVersion,System.Object[])">
      <summary>将 <see cref="T:System.Object" /> 数组转换为出站 <see cref="T:System.ServiceModel.Channels.Message" />。</summary>
      <returns>发送到服务操作的 SOAP 消息。</returns>
      <param name="messageVersion">要使用的 SOAP 消息版本。</param>
      <param name="parameters">要传递到 WCF 客户端操作的参数。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
      <summary>定义一个消息检查器对象，该对象可以添加到 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> 集合来查看或修改消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
      <summary>在收到答复消息之后将它传递回客户端应用程序之前，启用消息的检查或修改。</summary>
      <param name="reply">要转换为类型并交回给客户端应用程序的消息。</param>
      <param name="correlationState">关联状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
      <summary>在将请求消息发送到服务之前，启用消息的检查或修改。</summary>
      <returns>作为 <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> 方法的 <paramref name="correlationState " />参数返回的对象。 如果不使用相关状态，则为 null。 最佳做法是将它设置为 <see cref="T:System.Guid" />，以确保没有两个相同的 <paramref name="correlationState" /> 对象。</returns>
      <param name="request">要发送给服务的消息。</param>
      <param name="channel">WCF 客户端对象通道。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientOperationSelector">
      <summary>定义操作选择器的协定。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IClientOperationSelector.AreParametersRequiredForSelection">
      <summary>获取一个值，指示是否需要参数来确定选择。</summary>
      <returns>如果需要参数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientOperationSelector.SelectOperation(System.Reflection.MethodBase,System.Object[])">
      <summary>返回选择的操作。</summary>
      <returns>自定义操作选择器选择的操作。</returns>
      <param name="method">调用的方法。</param>
      <param name="parameters">传递给该方法的参数。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IDispatchMessageFormatter">
      <summary>定义服务应用程序中用于反序列化请求消息和序列化响应消息的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.DeserializeRequest(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>将消息反序列化为参数数组。</summary>
      <param name="message">传入消息。</param>
      <param name="parameters">作为参数传递到操作的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.SerializeReply(System.ServiceModel.Channels.MessageVersion,System.Object[],System.Object)">
      <summary>从指定的消息版本、参数数组和返回值序列化答复消息。</summary>
      <returns>已序列化的答复消息。</returns>
      <param name="messageVersion">SOAP 消息版本。</param>
      <param name="parameters">out 参数。</param>
      <param name="result">返回值。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector">
      <summary>定义一些方法，通过这些方法，可以在服务应用程序中对入站和出站应用程序消息进行自定义检查或修改。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
      <summary>在已接收入站消息后将消息调度到应发送到的操作之前调用。</summary>
      <returns>用于关联状态的对象。 该对象将在 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> 方法中传回。</returns>
      <param name="request">请求消息。</param>
      <param name="channel">传入通道。</param>
      <param name="instanceContext">当前服务实例。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
      <summary>在操作已返回后发送回复消息之前调用。</summary>
      <param name="reply">回复消息。 如果操作是单向的，则此值为 null。</param>
      <param name="correlationState">从 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> 方法返回的关联对象。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IDispatchOperationSelector">
      <summary>定义协定，该协定将传入消息与本地操作相关联，来自定义服务执行行为。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchOperationSelector.SelectOperation(System.ServiceModel.Channels.Message@)">
      <summary>将本地操作与传入的方法相关联。</summary>
      <returns>要与 <paramref name="message" /> 相关联的操作的名称。</returns>
      <param name="message">要与操作相关联的传入的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IErrorHandler">
      <summary>允许实施者对返回给调用方的错误消息进行控制，还可以选择执行自定义错误处理，例如日志记录。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
      <summary>启用错误相关处理并返回一个值，该值指示调度程序在某些情况下是否中止会话和实例上下文。</summary>
      <returns>如果 Windows Communication Foundation (WCF) 不应中止会话（如果有一个）和实例上下文（如果实例上下文不是 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />），则为 true；否则为 false。 默认值为 false。</returns>
      <param name="error">处理过程中引发的异常。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
      <summary>启用创建从服务方法过程中的异常返回的自定义 <see cref="T:System.ServiceModel.FaultException`1" />。</summary>
      <param name="error">服务操作过程中引发的 <see cref="T:System.Exception" /> 对象。</param>
      <param name="version">消息的 SOAP 版本。</param>
      <param name="fault">双工情况下，返回到客户端或服务的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IInputSessionShutdown">
      <summary>定义关闭输入会话所必须实现的协定。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInputSessionShutdown.ChannelFaulted(System.ServiceModel.IDuplexContextChannel)">
      <summary>指示通道出错。</summary>
      <param name="channel">出错的 <see cref="T:System.ServiceModel.IDuplexContextChannel" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInputSessionShutdown.DoneReceiving(System.ServiceModel.IDuplexContextChannel)">
      <summary>指示客户端通道完成作为双工消息交换的一部分的消息接收的时间。</summary>
      <param name="channel">已完成接收的 <see cref="T:System.ServiceModel.Channels.IDuplexSessionChannel" />。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IInstanceContextInitializer">
      <summary>如果需要，定义检查或修改 <see cref="T:System.ServiceModel.InstanceContext" /> 对象的创建所需的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceContextInitializer.Initialize(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
      <summary>用于修改新创建的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</summary>
      <param name="instanceContext">系统提供的实例上下文。</param>
      <param name="message">触发实例上下文的创建的消息。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
      <summary>实现以参与创建或选择 <see cref="T:System.ServiceModel.InstanceContext" /> 对象，特别是启用共享会话。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
      <summary>接收新消息时调用。</summary>
      <returns>用于处理消息的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象；返回 null，以命令 WCF 创建新的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</returns>
      <param name="message">传入消息。</param>
      <param name="channel">接收消息的通道。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
      <summary>当 null 从 <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> 方法返回时调用。</summary>
      <param name="instanceContext">新的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</param>
      <param name="message">传入消息。</param>
      <param name="channel">接收消息的通道。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
      <summary>当 <see cref="T:System.ServiceModel.InstanceContext" /> 活动完成时调用，以使实施者能阻止 <see cref="T:System.ServiceModel.InstanceContext" /> 的回收。</summary>
      <returns>如果要关闭 Windows Communication Foundation (WCF)，并回收 <see cref="T:System.ServiceModel.InstanceContext" /> 对象，且要调整 <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /> 的值，则为 true；否则为 false。</returns>
      <param name="instanceContext">被视为空闲的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
      <summary>当 <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> 方法返回 false 时调用，以使实施者能提供回调，从而通知 WCF<see cref="T:System.ServiceModel.InstanceContext" /> 对象的完成时间。</summary>
      <param name="callback">通知 WCF<see cref="T:System.ServiceModel.InstanceContext" /> 对象的关闭和回收时间的 <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> 对象。</param>
      <param name="instanceContext">当前 <see cref="T:System.ServiceModel.InstanceContext" />。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IInstanceProvider">
      <summary>声明一些方法，以便为 Windows Communication Foundation (WCF) 服务提供服务对象，或回收该服务的服务对象。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
      <summary>如果给出指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象，则返回服务对象。</summary>
      <returns>用户定义的服务对象。</returns>
      <param name="instanceContext">当前的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
      <summary>如果给出指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象，则返回服务对象。</summary>
      <returns>服务对象。</returns>
      <param name="instanceContext">当前的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</param>
      <param name="message">触发服务对象的创建的消息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
      <summary>在 <see cref="T:System.ServiceModel.InstanceContext" /> 对象回收服务对象时调用。</summary>
      <param name="instanceContext">服务的实例上下文。</param>
      <param name="instance">要回收的服务对象。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer">
      <summary>定义方法，客户端应用程序可以使用这些方法来显示用户界面，以便在创建通道前收集标识信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)">
      <summary>要开始使用用户接口获取凭据信息的异步调用。</summary>
      <returns>处理完成时用于回调的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="channel">客户端通道。</param>
      <param name="callback">回调对象。</param>
      <param name="state">任何状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>当 <see cref="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)" /> 已完成时调用。</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1">
      <summary>定义协定的 interface，筛选器表必须实现它，从而使用从一个或多个筛选器派生的查询条件来检查消息。</summary>
      <typeparam name="TFilterData">与表中每个筛选器关联的数据的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>返回一个值，该值指示指定的消息是否正好满足表中的一个筛选器的匹配条件，然后在 out 参数中返回该筛选器。</summary>
      <returns>如果 <paramref name="message" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="filter">存储 <paramref name="message" /> 符合的筛选器的 out 参数。 如果找不到筛选器，该参数将设置为默认值。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>返回一个值，该值指示指定的消息或缓冲消息是否正好满足表中的一个筛选器的匹配条件，然后在 out 参数中返回该筛选器。</summary>
      <returns>如果 <paramref name="messageBuffer" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="filter">存储 <paramref name="message" /> 符合的筛选器的 out 参数。 如果找不到筛选器，该参数将设置为默认值。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>返回一个值，该值指示指定的消息是否满足表中筛选器的匹配条件，然后将匹配筛选器添加到集合。</summary>
      <returns>如果 <paramref name="message" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="results">存储 <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt; 中匹配的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象的引用参数。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>返回一个值，该值指示指定的缓冲消息是否满足表中筛选器的匹配条件，然后将匹配筛选器添加到集合。</summary>
      <returns>如果 <paramref name="messageBuffer" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="results">存储 <see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt; 中匹配的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象的引用参数。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)">
      <summary>返回一个值，该值指示指定的消息是否正好满足表中的一个筛选器的匹配条件，然后将匹配筛选数据添加到集合。</summary>
      <returns>如果消息正好满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="value">存储与 <paramref name="message" /> 相匹配的 <paramref name="FilterData" /> 的 out 参数。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)">
      <summary>返回一个值，该值指示指定的缓冲消息是否正好满足表中的一个筛选器的匹配条件，然后将匹配筛选数据添加到集合。</summary>
      <returns>如果消息正好满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="value">存储与 <paramref name="messageBuffer" /> 相匹配的 <paramref name="FilterData" /> 的 out 参数。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})">
      <summary>返回一个值，该值指示指定的消息是否满足表中至少一个筛选器的匹配条件，然后将匹配筛选器的 <paramref name="FilterData" /> 添加到集合。</summary>
      <returns>如果 <paramref name="message" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="results">在通用集合中存储匹配筛选器的筛选数据的引用参数。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})">
      <summary>返回一个值，该值指示指定的缓冲消息是否满足表中至少一个筛选器的匹配条件，然后将匹配筛选器的 <paramref name="FilterData" /> 添加到集合。</summary>
      <returns>如果 <paramref name="messageBuffer" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="results">在通用 <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt; 中存储匹配筛选器的筛选数据的引用参数。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback">
      <summary>表示当 <see cref="T:System.ServiceModel.InstanceContext" /> 对象已完成处理时调用的方法。</summary>
      <param name="instanceContext">完成处理的实例上下文。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">
      <summary>异常的 abstract 基类，如果试图访问消息的正文但不允许访问，则会引发该异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.InvalidBodyAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化和上下文信息来初始化 <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.InvalidBodyAccessException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.InvalidBodyAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IOperationInvoker">
      <summary>声明方法，这些方法使用从消息提取的对象以及参数数组，并利用这些参数对该对象调用方法，然后返回该方法的返回值和输出参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs">
      <summary>返回参数对象的 <see cref="T:System.Array" />。</summary>
      <returns>要用作操作的实参的形参。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
      <summary>从一个实例和输入对象的集合返回一个对象和输出对象的集合。</summary>
      <returns>返回值。</returns>
      <param name="instance">要调用的对象。</param>
      <param name="inputs">方法的输入。</param>
      <param name="outputs">方法的输出。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
      <summary>An asynchronous implementation of the <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /> method.</summary>
      <returns>用来完成异步调用的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="instance">要调用的对象。</param>
      <param name="inputs">方法的输入。</param>
      <param name="callback">异步回调对象。</param>
      <param name="state">关联的状态数据。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
      <summary>异步结束方法。</summary>
      <returns>返回值。</returns>
      <param name="instance">调用的对象。</param>
      <param name="outputs">方法的输出。</param>
      <param name="result">
        <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous">
      <summary>获取一个值，该值指定调度程序是调用 <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /> 方法还是调用 <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)" /> 方法。</summary>
      <returns>如果调度程序调用同步操作，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IParameterInspector">
      <summary>定义自定义参数检查器实现的协定，有了该协定，就可在客户端或服务进行调用之前或紧接着其调用，检查或修改信息。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
      <summary>在客户端调用返回之后、服务响应发送之前调用。</summary>
      <param name="operationName">所调用的操作的名称。</param>
      <param name="outputs">任何输出对象。</param>
      <param name="returnValue">操作的返回值。</param>
      <param name="correlationState">从 <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> 方法返回的任何关联状态，或 null。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
      <summary>在发送客户端调用之前、服务响应返回之后调用。</summary>
      <returns>
        <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" /> 中，作为 <paramref name="correlationState" /> 参数返回的相关状态。 如果您不打算使用相关状态，则返回 null。</returns>
      <param name="operationName">操作的名称。</param>
      <param name="inputs">客户端传递到方法的对象。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MatchAllMessageFilter">
      <summary>表示其所测试的所有非 null 消息都满足其条件的查询。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchAllMessageFilter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MatchAllMessageFilter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchAllMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>此方法可为所有非 null 消息返回 true。</summary>
      <returns>返回 true。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchAllMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>
        <see cref="M:System.ServiceModel.Dispatcher.MatchAllMessageFilter.Match(System.ServiceModel.MessageBuffer)" /> 方法可为所有非 null 消息返回 true。</summary>
      <returns>返回 true。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MatchNoneMessageFilter">
      <summary>表示其所测试的所有消息都不能满足其条件的查询。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchNoneMessageFilter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MatchNoneMessageFilter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchNoneMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>此方法可为所有非 null 消息返回 false。</summary>
      <returns>返回 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MatchNoneMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>此方法可为所有非 null 消息返回 false。</summary>
      <returns>返回 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageFilter">
      <summary>用于查询消息的筛选器的不同的类的 abstract 基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor">
      <summary>在派生类中调用时，初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1">
      <summary>创建与指定类型的数据相关联的筛选器的筛选器表。</summary>
      <returns>与 <paramref name="FilterData" /> 关联的筛选器可以添加到的 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> 对象。</returns>
      <typeparam name="FilterData">与表中的筛选器关联的数据。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>在派生类中被重写时，测试消息是否满足筛选器的条件。 无法检查正文。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.Message" /> 对象满足筛选器的条件，则为 true；否则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>在派生类中被重写时，测试缓冲的消息是否满足筛选器的条件。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象满足筛选器的条件，则为 true；否则为 false。</returns>
      <param name="buffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageFilterException">
      <summary>当筛选器检查的节点的配额超出时，引发的异常的基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> 类的新实例。</summary>
      <param name="info">包含反序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> 类的新实例。</summary>
      <param name="message">伴随异常的消息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.String,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>使用指定的错误消息和超出节点的配额的筛选器的集合来初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="filters">超出节点的配额的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及导致当前异常的内部异常来初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterException.#ctor(System.String,System.Exception,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilterException" /> 类的新实例，导致当前异常的内部异常，以及超出节点的配额的筛选器的集合。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
      <param name="filters">超出节点的配额的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的集合。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterException.Filters">
      <summary>获取超出节点的配额的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的集合。</summary>
      <returns>超出节点的配额的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageFilterTable`1">
      <summary>提供筛选器表的通用实现。</summary>
      <typeparam name="TFilterData">与筛选器关联的 <paramref name="FilterData" /> 的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor">
      <summary>初始化默认优先级为 0 的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilterTable`1" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor(System.Int32)">
      <summary>初始化具有指定初始默认优先级的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilterTable`1" /> 类的一个新实例。</summary>
      <param name="defaultPriority">筛选器表的默认优先级。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>将 filter/<paramref name="FilterData" />（键/值）对添加到筛选器表。</summary>
      <param name="item">添加到表中的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt;。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0)">
      <summary>将筛选器及其关联的 <paramref name="FilterData" /> 添加到筛选器表。</summary>
      <param name="filter">用作所添加对的键的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
      <param name="data">与筛选器关联的、用作所添加对的值的 <paramref name="FilterData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filter" /> 在表中已存在。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0,System.Int32)">
      <summary>将筛选器及其关联的 <paramref name="FilterData" /> 添加到具有指定优先级的操作筛选器表中。</summary>
      <param name="filter">用作所添加对的键的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
      <param name="data">与筛选器关联的、用作所添加对的值的 <paramref name="FilterData" />。</param>
      <param name="priority">所添加筛选器的优先级。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 不能为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filter" /> 在表中已存在。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="filter" /> 类型与表类型不匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Clear">
      <summary>从筛选器表中移除所有筛选器及其关联的数据。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>确定筛选器表是否包含指定的筛选器及其关联的 <paramref name="FilterData" />。</summary>
      <returns>如果筛选器表中包含 <paramref name="filter" />/<paramref name="FilterData" /> 对，则为 true；否则为 false。</returns>
      <param name="item">要在表中查找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;<see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />, <paramref name="FilterData" />&gt;。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>确定筛选器表是否包含指定的筛选器。</summary>
      <returns>如果筛选器表中包含 <paramref name="filter" />，则为 true；否则为 false。</returns>
      <param name="filter">正在进行测试的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0}[],System.Int32)">
      <summary>将 filter/<paramref name="FilterData" /> 对复制到从指定索引开始的数组。</summary>
      <param name="array">这些对所复制到的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 筛选器, <paramref name="FilterData" /> 类型的从零开始的数组。</param>
      <param name="arrayIndex">开始复制的索引位置。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.Count">
      <summary>获取筛选器表中 filter/<paramref name="FilterData" /> 对的数目。</summary>
      <returns>获取筛选器表中 filter/<paramref name="FilterData" /> 对项的数目。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.CreateFilterTable(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>为指定类型的筛选器实例化筛选器表。</summary>
      <returns>所创建的包含指定筛选器的 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" />。</returns>
      <param name="filter">将包含在所创建筛选器表中的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.DefaultPriority">
      <summary>获取或设置筛选器表的默认优先级。</summary>
      <returns>当筛选器添加到筛选器表时分配的默认优先级。 默认优先级的默认值为 0。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetEnumerator">
      <summary>返回一个循环访问筛选器表的枚举数。</summary>
      <returns>一个可用于循环访问筛选器表的 <see cref="T:System.Collections.Generic.IEnumerator`1" />&lt;KeyValuePair&lt;Filter, <paramref name="FilterData" />&gt;&gt;。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>返回一个值，该值指示指定的消息是否正好满足表中的一个筛选器的匹配标准，然后在 out 参数中返回该筛选器。</summary>
      <returns>如果消息满足表中一个 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="filter">out 参数，该参数存储 <paramref name="message" /> 符合的筛选器。 如果找不到筛选器，该参数将设置为默认值。</param>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个 <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> 与 <paramref name="messageBuffer" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>返回一个值，该值指示指定的消息是否正好满足表中的一个筛选器的匹配标准，然后在 out 参数中返回该筛选器。</summary>
      <returns>如果消息正好满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="buffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="filter">out 参数，该参数存储 <paramref name="messageBuffer" /> 符合的筛选器。</param>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个 <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> 与 <paramref name="messageBuffer" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>返回一个值，该值指示指定的消息是否满足表中 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的匹配条件，然后将匹配筛选器添加到集合。</summary>
      <returns>如果 <paramref name="message" /> 满足表中至少一个 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="results">存储与<see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt; 匹配的  <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">筛选器试图检查消息正文的内容。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>返回一个值，该值指示指定的缓冲消息是否满足表中至少一个筛选器的匹配条件，然后将最高优先级筛选器组（其中至少存在一个匹配项）中的匹配筛选器添加到集合。</summary>
      <returns>如果 <paramref name="message" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="buffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="results">存储与<see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt; 匹配的  <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)">
      <summary>返回一个值，该值指示指定的消息是否正好满足表中的一个 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的匹配条件，然后将匹配筛选数据添加到集合。</summary>
      <returns>如果消息满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="data">存储与 <paramref name="message" /> 相匹配的 <paramref name="FilterData" /> 的 out 参数。</param>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="message" /> 相匹配。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">筛选器试图检查消息正文的内容。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)">
      <summary>返回一个值，该值指示指定的缓冲消息是否正好满足表中的一个筛选器的匹配条件，然后将匹配筛选数据添加到集合。</summary>
      <returns>如果缓冲消息满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="buffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="data">存储与 <paramref name="messageBuffer" /> 相匹配的 <paramref name="FilterData" /> 的 out 参数。</param>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="messageBuffer" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})">
      <summary>返回一个值，该值指示指定的消息或缓冲消息是否满足表中至少一个筛选器的匹配条件，然后将匹配筛选器的 <paramref name="FilterData" /> 添加到集合。</summary>
      <returns>如果消息正好满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="results">在泛型 <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt;中存储匹配操作筛选器的 <paramref name="FilterData" /> 的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">筛选器试图检查消息正文的内容。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})">
      <summary>返回一个值，该值指示指定的消息缓冲区是否正好满足表中一个筛选器的匹配条件，以及是否将匹配筛选器的 <paramref name="FilterData" /> 添加到 <paramref name="results" /> 集合中。</summary>
      <returns>如果缓冲消息正好满足表中一个 <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> 的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="buffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="results">存储 <paramref name="messageBuffer" /> 满足的筛选器的筛选数据的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="results" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.GetPriority(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>返回表中给定筛选器的优先级。</summary>
      <returns>
        <paramref name="filter" /> 的优先级。</returns>
      <param name="filter">所创建的筛选器表中包含的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
      <exception cref="T:System.InvalidOperationException">筛选器表中不存在指定的筛选器。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.IsReadOnly">
      <summary>获取指示筛选器表是否为只读的值。</summary>
      <returns>对于所有筛选器表均为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.Item(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>获取或设置与指定的 <paramref name="filter" /> 关联的筛选数据。</summary>
      <returns>与 <paramref name="filter" /> 关联的筛选数据。 如果找不到指定的 <paramref name="filter" />，get 操作会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个以指定的 <paramref name="filter" /> 作为键的新筛选数据元素。</returns>
      <param name="filter">与要获取或设置的筛选数据关联的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性，并且 <paramref name="filter" /> 不在表中。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.Keys">
      <summary>获取筛选器表中包含的所有筛选器的集合。</summary>
      <returns>筛选器表中包含的所有筛选器的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>从筛选器表中移除指定的 filter/<paramref name="FilterData" /> 对。</summary>
      <returns>如果找到了 filter/<paramref name="FilterData" /> 对并将其移除，则为 true；如果未找到，则为 false。</returns>
      <param name="item">要从表中移除的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt;。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>从筛选器表中移除筛选器及其关联的 <paramref name="FilterData" />。</summary>
      <returns>如果找到了筛选器并将其移除，则为 true；如果未找到筛选器，则为 false。</returns>
      <param name="filter">要移除的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问筛选器表的枚举数。</summary>
      <returns>可用于循环访问筛选器表的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageFilterTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageFilter,`0@)">
      <summary>检查筛选器是否存储在筛选器表中。</summary>
      <returns>如果筛选器表中存在具有关联数据的筛选器，则为 true；否则为 false。</returns>
      <param name="filter">用作键以检索数据的 <paramref name="filter" />。</param>
      <param name="data">与 <paramref name="filter" /> 关联的 <paramref name="data" />。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageFilterTable`1.Values">
      <summary>获取筛选器表中包含的所有 <paramref name="FilterData" /> 的集合。</summary>
      <returns>筛选器表中包含的所有 <paramref name="FilterData" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageQuery">
      <summary>定义类的核心行为，这些类用于搜索消息中特定的相关数据。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQuery.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageQuery" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQuery.CreateMessageQueryCollection">
      <summary>创建一个查询集合，该集合返回与其关联的特定数据类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />，与数据类型关联的查询的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>在派生类中重写时，对消息运行一个查询并返回一个结果。 无法查询正文。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />满足查询的结果的可枚举集合。</returns>
      <param name="message">要查询的消息。</param>
      <typeparam name="TResult">要返回的值的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>在派生类中重写时，对消息运行一个查询并返回一个结果。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />满足查询的结果的可枚举集合。</returns>
      <param name="buffer">要查询的消息。</param>
      <typeparam name="TResult">要返回的对象的类型。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageQueryCollection">
      <summary>消息查询对象的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryCollection.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>对消息运行查询并返回一个结果。 无法查询正文。</summary>
      <returns>查询的结果。 该类型由泛型 <paramref name="TResult" /> 参数确定。</returns>
      <param name="message">要对其运行查询的消息。</param>
      <typeparam name="TResult">查询的结果的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryCollection.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>对消息运行查询并返回一个结果。</summary>
      <returns>查询的结果。 该类型由泛型 <paramref name="TResult" /> 参数确定。</returns>
      <param name="buffer">要对其运行查询的消息。</param>
      <typeparam name="TResult">要返回的对象的类型。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MessageQueryTable`1">
      <summary>管理消息查询对象集合。</summary>
      <typeparam name="TItem">由查询返回的值的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageQueryTable`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})">
      <summary>添加定义为键/值对的项。</summary>
      <param name="item">要添加的泛型 <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.ServiceModel.Dispatcher.MessageQuery,`0)">
      <summary>将项添加到使用键/值系统的集合中。</summary>
      <param name="key">用作键的 <see cref="T:System.ServiceModel.Dispatcher.MessageQuery" />。</param>
      <param name="value">要添加的值，此值与键关联。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear">
      <summary>从集合中移除所有成员。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})">
      <summary>确定集合是否包含格式化为键/值结构的特定项。</summary>
      <returns>
        <see cref="T:System.Boolean" />如果在集合中找到该项，为 true；否则为 false。</returns>
      <param name="item">要查找的对象的键。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>确定集合是否包含具有指定键的元素。</summary>
      <returns>
        <see cref="T:System.Boolean" />如果集合中包含具有键的元素，则为 true；否则为 false。</returns>
      <param name="key">要定位的键。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)">
      <summary>从指定索引位置开始将集合中的元素复制到 <see cref="T:System.Array" />。</summary>
      <param name="array">作为集合中元素的复制目标位置的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.Count">
      <summary>获取表中查询/数据对的数目。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>对消息运行查询并返回一个结果集合。 无法查询正文。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />结果的可枚举集合。</returns>
      <param name="message">要查询的消息。</param>
      <typeparam name="TResult">要返回的结果的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>对消息运行查询并返回相应结果。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />查询的结果。 可以枚举多个结果。</returns>
      <param name="buffer">要查询的消息。</param>
      <typeparam name="TResult">要返回的结果的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />可用于循环访问集合的枚举器对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly">
      <summary>获取一个指示表是否为只读的值。</summary>
      <returns>
        <see cref="T:System.Boolean" />对于所有表格均为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.Item(System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>获取或设置与数据类型关联的查询对象。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
      <param name="key">要获取或设置的查询对象。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys">
      <summary>返回表中包含的所有集合键的集合。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />表中包含的所有查询对象的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})">
      <summary>从集合中移除指定对象的第一个匹配项。</summary>
      <returns>
        <see cref="T:System.Boolean" />如果从集合中成功移除了项，则为 true；否则为 false。 如果在集合中找不到该项，此方法也会返回 false。</returns>
      <param name="item">要从集合中移除的 <see cref="T:System.Collections.Generic.KeyValuePair" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>从集合中移除与指定键关联的项。</summary>
      <returns>
        <see cref="T:System.Boolean" />如果找到了项并将其移除，则为 true；如果未找到项，则为 false。</returns>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可用于循环访问集合的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)">
      <summary>检查匹配查询是否存储在表中。</summary>
      <returns>
        <see cref="T:System.Boolean" />如果表中存在匹配查询（在 out<paramref name="value" /> 参数中找到了与查询关联的值），则为 true；否则为 false。</returns>
      <param name="key">用作键以检索数据的查询。</param>
      <param name="value">与查询关联的值。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MessageQueryTable`1.Values">
      <summary>获取表中包含的结果值的集合。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />表中包含的所有结果值。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">
      <summary>只需要一个筛选器但却有多个筛选器匹配时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.String,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>利用指定的错误消息和筛选器集合初始化 <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="filters">消息筛选器集合。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.#ctor(System.String,System.Exception,System.Collections.ObjectModel.Collection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>利用指定的错误消息、异常和筛选器集合初始化 <see cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
      <param name="filters">消息筛选器集合。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.MultipleFilterMatchesException.Filters">
      <summary>获取导致引发异常的筛选器的集合。</summary>
      <returns>包含导致引发异常的筛选器的类型 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException">
      <summary>当定向 <see cref="T:System.Xml.XPath.XPathNavigator" /> 来检查未缓冲的消息的正文时，将引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定流的源和目标的数据以及序列化异常所需的信息来初始化 <see cref="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及导致当前异常的内部异常来初始化 <see cref="T:System.ServiceModel.Dispatcher.NavigatorInvalidBodyAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter">
      <summary>表示一个查询，该查询使用 URI 组件的“最长前缀匹配”来测试消息是否与 EndpointAddress 相匹配。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 类的新实例。</summary>
      <param name="address">用以测试消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 类的新实例。</summary>
      <param name="address">用以测试消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="includeHostNameInComparison">如果主机名称包含在终结点地址比较中，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 用以测试消息的终结点地址。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 用以测试消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1">
      <summary>创建一个可同时利用多个终结点地址对一个消息进行测试的新筛选器表。</summary>
      <returns>实现 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> 接口的对象，它可以包含 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 以及相关的 <paramref name="FilterData" />。</returns>
      <typeparam name="FilterData">与表中的筛选器关联的数据。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison">
      <summary>获取一个值，该值指示在终结点地址比较中是否包含主机名称。</summary>
      <returns>如果主机名称包含在终结点地址比较中，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>测试消息是否满足指定的终结点地址。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.Message" /> 对象满足筛选器中指定的终结点地址，则为 true；否则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>测试缓冲消息是否满足指定的终结点地址。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象满足终结点地址，则为 true；否则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator">
      <summary>提供对 XML 文档中包含的数据的随机只读访问，并可以实现对指定的节点进行有效查询。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.ComparePosition(System.Int64,System.Int64)">
      <summary>在派生类中重写时，返回描述两个指定位置的文档顺序的值。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeOrder" /> 值之一，用于描述文档中 <paramref name="firstPosition" /> 与 <paramref name="secondPosition" /> 的关系。</returns>
      <param name="firstPosition">进行比较的第一个位置。</param>
      <param name="secondPosition">进行比较的第二个位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPosition" /> 或 <paramref name="secondPosition" /> 无效。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.SeekableXPathNavigator.CurrentPosition">
      <summary>在派生类中重写时，获取或设置与 XPath 导航器所在的数据节点关联的值。</summary>
      <returns>与导航器当前位置关联的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetLocalName(System.Int64)">
      <summary>在派生类中重写时，返回位于指定位置的节点的本地名称。</summary>
      <returns>The local name of the node at the specified position. 如果该节点没有本地名称（例如当前位置引用了一个文本节点），则返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="nodePosition">正在检索其本地名称的节点的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> 无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetName(System.Int64)">
      <summary>在派生类中重写时，返回位于指定位置的节点的名称。</summary>
      <returns>位于 <paramref name="nodePosition" /> 的节点的名称。 如果该节点没有名称，则返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="nodePosition">正在检索其名称的节点的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> 无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetNamespace(System.Int64)">
      <summary>在派生类中重写时，返回位于指定位置的节点的命名空间。</summary>
      <returns>位于 <paramref name="nodePosition" /> 的节点的命名空间。 如果该节点没有命名空间，则返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="nodePosition">正在检索其命名空间的节点的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> 无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetNodeType(System.Int64)">
      <summary>在派生类中重写时，返回位于指定位置的节点的类型。</summary>
      <returns>指示 XML 节点的类型的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 值之一。</returns>
      <param name="nodePosition">正在检索其节点类型的节点的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> 无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetValue(System.Int64)">
      <summary>在派生类中重写时，返回位于指定位置的节点的文本值。</summary>
      <returns>位于 <paramref name="nodePosition" /> 的节点的文本值。 如果该节点没有文本值，则返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="nodePosition">正在检索其文本值的节点的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="nodePosition" /> 无效。</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ServiceThrottle">
      <summary>控制服务的吞吐量以优化可用性和性能。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls">
      <summary>获取或设置 <see cref="T:System.ServiceModel.ServiceHost" /> 中所有调度程序对象的最大活动处理消息数。</summary>
      <returns>服务中活动消息的上限。 默认值为 16 * 计算机中的处理器数。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances">
      <summary>获取或设置一次可执行的最大服务对象数。</summary>
      <returns>服务中一次可执行的最大 <see cref="T:System.ServiceModel.InstanceContext" /> 对象数。 默认值等于最大并发调用数 + 最大并发会话数。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions">
      <summary>获取或设置一个指定 <see cref="T:System.ServiceModel.ServiceHost" /> 对象可一次接受的最大会话数的值。</summary>
      <returns>服务主机可接受的最大会话数。 默认值为 100 * 计算机中的处理器数。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathMessageContext">
      <summary>定义利用 SOAP 文档计算 XPath 表达式时经常要使用的多个 XPath 函数和命名空间映射。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> 的实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.#ctor(System.Xml.NameTable)">
      <summary>用指定的 <see cref="T:System.Xml.NameTable" /> 初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> 类的新实例。</summary>
      <param name="table">内部用于存储字符串的 <see cref="T:System.Xml.NameTable" /> 类。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.CompareDocument(System.String,System.String)">
      <summary>根据 XSLT 处理器加载文档的顺序对两个文档的基统一资源标识符 (URI) 进行比较。</summary>
      <returns>始终返回 0。</returns>
      <param name="baseUri">要比较的第一个文档的基 URI。</param>
      <param name="nextBaseUri">要比较的第二个文档的基 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>计算是要保留空白节点还是针对给定上下文将它们抽出。</summary>
      <returns>始终返回 false。</returns>
      <param name="node">在当前上下文中要保留或抽出的空白节点。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>解析函数引用并返回表示该函数的 T: System.Xml.Xsl.IXsltContextFunction。</summary>
      <returns>表示该函数的 T: System.Xml.Xsl.IXsltContextFunction。</returns>
      <param name="prefix">在 XPath 表达式中显示的函数的前缀。</param>
      <param name="name">函数名。</param>
      <param name="argTypes">正在被解析的函数的参数类型的数组。 这使您能够在同名称的方法（例如，重载方法）中进行选择。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argTypes" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageContext.ResolveVariable(System.String,System.String)">
      <summary>解析变量引用并返回一个表示该变量的 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />。</summary>
      <returns>一个表示运行时变量 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />。</returns>
      <param name="prefix">在 XPath 表达式中显示的变量的前缀。</param>
      <param name="name">变量的名称。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageContext.Whitespace">
      <summary>获取一个值，该值指示是否在输出中包含空白节点。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathMessageFilter">
      <summary>表示对由 XPath 1.0 表达式定义的 XML 文档的查询。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor">
      <summary>初始化与所有格式良好的 XML 文档相匹配的 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.String)">
      <summary>使用 XPath 表达式初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 类的一个新实例以指定筛选器的查询条件。</summary>
      <param name="xpath">一个包含 XPath 1.0 表达式的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xpath" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.String,System.Xml.XmlNamespaceManager)">
      <summary>使用指定的 XPath 表达式和命名空间管理器初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 类的一个新实例。</summary>
      <param name="xpath">XPath 1.0 表达式。</param>
      <param name="namespaces">一个可解析 <paramref name="xpath" /> 中任何命名空间前缀的 <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xpath" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.String,System.Xml.Xsl.XsltContext)">
      <summary>使用指定的 XPath 表达式和 <see cref="T:System.Xml.Xsl.XsltContext" /> 初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 类的一个新实例。</summary>
      <param name="xpath">筛选器的 XPath 1.0 表达式。</param>
      <param name="context">一个可解析 <paramref name="xpath" /> 中任何命名空间前缀、自定义函数或变量的 <see cref="T:System.Xml.Xsl.XsltContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.Xml.XmlReader)">
      <summary>通过使用指定的 XML 读取器读取流式 XPath 来初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 类的一个新实例。</summary>
      <param name="reader">用于读取流式 XPath 表达式的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.Xml.XmlReader,System.Xml.XmlNamespaceManager)">
      <summary>通过使用指定的 XML 读取器读取流式 XPath 以及使用指定的命名空间管理器来初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 类的一个新实例。</summary>
      <param name="reader">用于读取流式 XPath 表达式的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="namespaces">一个可解析来自 <paramref name="reader" /> 的 XPath 表达式中的任何命名空间前缀的 <see cref="T:System.Xml.XmlNamespaceManager" />。 它也可以是可定义自定义函数或变量的 <see cref="T:System.Xml.Xsl.XsltContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 未定位在开始元素上。</exception>
      <exception cref="T:System.InvalidOperationException">发现读取方言属性、命名空间 URI 或重复属性问题。</exception>
      <exception cref="T:System.InvalidOperationException">发现读取方言属性、命名空间 URI 或重复属性问题。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.#ctor(System.Xml.XmlReader,System.Xml.Xsl.XsltContext)">
      <summary>通过使用指定的 XML 读取器读取流式 XPath 以及使用 <see cref="T:System.Xml.Xsl.XsltContext" /> 解析命名空间、自定义函数和变量来初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 类的一个新实例。</summary>
      <param name="reader">用于读取流式 XPath 表达式的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="context">一个可解析来自 <paramref name="reader" /> 的 XPath 表达式中的任何命名空间前缀、函数和变量的 <see cref="T:System.Xml.Xsl.XsltContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.CreateFilterTable``1">
      <summary>创建具有与其关联的指定类型的数据的 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" />。</summary>
      <returns>与 <paramref name="FilterData" /> 关联的筛选器可以添加到的 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> 对象。</returns>
      <typeparam name="FilterData">与表中的筛选器关联的数据。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>测试指定的消息是否满足 XPath 筛选器的标准。 此格式不允许访问消息的正文。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Channels.Message" /> 满足筛选条件，则为 true；否则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">XPath 评估尝试检查消息的正文。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">发生了编译器错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>确定缓冲消息是否满足 XPath 筛选器的查询条件。</summary>
      <returns>如果 <see cref="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.ServiceModel.MessageBuffer)" /> 满足筛选条件，则为 true；否则为  false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">发生了编译器错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.ServiceModel.Dispatcher.SeekableXPathNavigator)">
      <summary>确定由指定的优化 XPath 导航器提供的 XML 文档是否满足 XPath 筛选器的查询条件。</summary>
      <returns>如果 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> 中的数据满足筛选条件，则为 true；否则为 false。</returns>
      <param name="navigator">提供要进行测试的数据的 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">发生了编译器错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.Match(System.Xml.XPath.XPathNavigator)">
      <summary>通过指定的 XPath 导航器评估筛选器。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的数据满足筛选条件，则为 true；否则为 false。</returns>
      <param name="navigator">提供要进行测试的数据的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">发生了编译器错误。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilter.Namespaces">
      <summary>获取可解析用于定义筛选器的 XPath 表达式中的命名空间前缀的管理器。</summary>
      <returns>当前 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的 <see cref="T:System.Xml.XmlNamespaceManager" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilter.NodeQuota">
      <summary>获取或设置筛选器评估期间应查看的最大节点数。</summary>
      <returns>筛选器评估期间应查看的最大节点数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">配额为零或负数。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.OnGetSchema">
      <summary>获取当前 XML 文档的架构。</summary>
      <returns>用于表示当前文档的 <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.OnReadXml(System.Xml.XmlReader)">
      <summary>读取当前 XML 节点。</summary>
      <param name="reader">用于读取 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 未定位在开始元素上。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 未定位在开始元素上。</exception>
      <exception cref="T:System.InvalidOperationException">节点的内容无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.OnWriteXml(System.Xml.XmlWriter)">
      <summary>使用 <paramref name="writer" /> 编写节点。</summary>
      <param name="writer">用于编写节点的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.ReadXPath(System.Xml.XmlReader,System.Xml.XmlNamespaceManager)">
      <summary>通过使用指定的命名空间管理器从指定的 XML 读取器获得的 XPath 来初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的当前实例。</summary>
      <param name="reader">用于反序列化 XPath 筛选器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="namespaces">用于管理从其读取的命名空间的 <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.StaticGetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>获取用于序列化 XPath 筛选器的 XML 架构的类型。</summary>
      <returns>用于序列化 XPath 筛选器的 <see cref="T:System.Xml.Schema.XmLSchemaType" />。</returns>
      <param name="schemas">包含 XML 架构定义语言 (XSD) 架构的缓存的 <see cref="T:System.Xml.Schema.XmLSchemaSet" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>获取当前架构的显式接口实现。</summary>
      <returns>用于表示当前文档的 <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>读取当前 XML 节点的显式接口实现。</summary>
      <param name="reader">用于读取 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>使用 <paramref name="writer" /> 编写 XML 节点的显式接口实现。</summary>
      <param name="writer">用于编写节点的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.TrimToSize">
      <summary>压缩 XPath 筛选器，释放所有未使用的内存。</summary>
      <exception cref="T:System.NotImplementedException">在所有情况下。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.WriteXPath(System.Xml.XmlWriter,System.Xml.IXmlNamespaceResolver)">
      <summary>将 XPath 筛选器序列化到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">用于序列化 XPath 筛选器的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver">用于解决 XPath 筛选器的任何命名空间冲突 <see cref="T:System.Xml.IXmlNamespaceResolver" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilter.WriteXPathTo(System.Xml.XmlWriter,System.String,System.String,System.String,System.Boolean)">
      <summary>使用指定的 XML 编写器编写 XML XPath 元素。</summary>
      <param name="writer">用于编写 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="prefix">XPath XML 元素的命名空间前缀。</param>
      <param name="localName">XPath XML 元素的本地名称。</param>
      <param name="ns">要与 XML 元素关联的命名空间 URI。</param>
      <param name="writeNamespaces">如果命名空间应作为属性被单独序列化，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 的长度等于 = 0。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilter.XPath">
      <summary>获取可定义筛选器的查询条件的 XPath 表达式。</summary>
      <returns>筛选器的 XPath 表达式。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1">
      <summary>保存筛选器/数据对以进行高效匹配。</summary>
      <typeparam name="TFilterData">与表中每个筛选器关联的筛选数据的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> 类的新实例。</summary>
      <param name="capacity">表的初始容量。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>将 filter/<paramref name="FilterData" />（键/值）对添加到 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" />。</summary>
      <param name="item">要添加到表中的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt;。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">发生了编译器错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0)">
      <summary>将筛选器/数据对添加到筛选器表中。</summary>
      <param name="filter">用作所添加对的键的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。 必须为 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的实例。</param>
      <param name="data">与筛选器关联的、用作所添加对的值的 <paramref name="FilterData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="filter" /> 不是 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">发生了编译器错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Add(System.ServiceModel.Dispatcher.XPathMessageFilter,`0)">
      <summary>将筛选器/数据对添加到筛选器表中。</summary>
      <param name="filter">用作所添加对的键的 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />。</param>
      <param name="data">与筛选器关联的、用作所添加对的值的 <paramref name="FilterData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">发生了编译器错误。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Clear">
      <summary>从筛选器表中移除所有的筛选器/数据对。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>确定筛选器表是否包含指定的筛选器及其关联的 <paramref name="FilterData" />。</summary>
      <returns>如果筛选器表中包含 filter/FilterData 对，则为 true；否则为 false。</returns>
      <param name="item">要在表中查找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;<see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />, <paramref name="FilterData" />&gt;。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>确定筛选器表是否包含指定的筛选器。</summary>
      <returns>如果筛选器表中包含 <paramref name="filter" />，则为 true；否则为 false。</returns>
      <param name="filter">正在进行测试的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0}[],System.Int32)">
      <summary>将 filter/<paramref name="FilterData" /> 对复制到从指定索引开始的数组。</summary>
      <param name="array">此对所复制到的类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt; 的数组。</param>
      <param name="arrayIndex">开始复制的索引位置。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Count">
      <summary>获取当前筛选器表中筛选器/数据对的数目。</summary>
      <returns>当前筛选器表中筛选器/数据对的数目。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetEnumerator">
      <summary>返回一个可循环访问筛选器表的枚举数。</summary>
      <returns>一个可用于循环访问筛选器表的 <see cref="T:System.Collections.Generic.IEnumerator`1" />&lt;KeyValuePair&lt;Filter, FilterData&gt;&gt;。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>返回一个值，该值指示指定的消息是否正好满足表中的一个筛选器的匹配标准，然后在 out 参数中返回该筛选器。</summary>
      <returns>消息满足其查询条件的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />；如果未找到任何匹配的筛选器，则返回 null。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="filter">out 参数，该参数存储 <paramref name="message" /> 符合的筛选器。 如果找不到筛选器，该参数将设置为默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="message" /> 相匹配。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">筛选器试图检查消息正文的内容。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>返回一个值，该值指示指定的消息或缓冲消息是否正好满足表中的一个筛选器的匹配条件，然后在 out 参数中返回该筛选器。</summary>
      <returns>缓冲消息满足其查询条件的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />；如果未找到任何匹配的筛选器，则返回 null。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="filter">out 参数，该参数存储 <paramref name="message" /> 符合的筛选器。 如果找不到筛选器，该参数将设置为默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBuffer" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="messageBuffer" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Dispatcher.SeekableXPathNavigator,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>返回一个值，该值指示指定的消息或缓冲消息是否正好满足表中的一个 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> 的匹配条件，然后在 out 参数中返回该筛选器。</summary>
      <returns>缓冲消息满足其查询条件的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />；如果未找到任何匹配的筛选器，则返回 null。</returns>
      <param name="navigator">要测试的 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" />。</param>
      <param name="filter">out 参数，该参数存储 <paramref name="message" /> 符合的筛选器。 如果找不到筛选器，该参数将设置为默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="navigator" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilter(System.Xml.XPath.XPathNavigator,System.ServiceModel.Dispatcher.MessageFilter@)">
      <summary>返回一个值，该值指示指定的消息或缓冲消息是否正好满足表中的一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的匹配条件，然后在 out 参数中返回该筛选器。</summary>
      <returns>缓冲消息满足其查询条件的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />；如果未找到任何匹配的筛选器，则返回 null。</returns>
      <param name="navigator">要测试的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="filter">out 参数，该参数存储 <paramref name="navigator" /> 符合的筛选器。 如果找不到筛选器，该参数将设置为默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="navigator" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>返回一个值，该值指示指定的消息是否满足表中至少一个 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的匹配条件，然后将匹配筛选器添加到集合。</summary>
      <returns>如果 <paramref name="message" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="results">存储与<see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt; 匹配的  <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">筛选器试图检查消息正文的内容。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>返回一个值，该值指示指定的缓冲消息是否满足表中至少一个 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的匹配条件，然后将匹配筛选器添加到集合。</summary>
      <returns>如果 <paramref name="messageBuffer" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="results">存储与<see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt; 匹配的  <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Dispatcher.SeekableXPathNavigator,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>返回一个值，该值指示指定的缓冲消息是否满足表中至少一个 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> 的匹配条件，然后将匹配筛选器添加到集合。</summary>
      <returns>如果 <paramref name="messageBuffer" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="navigator">要测试的 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" />。</param>
      <param name="results">存储与<see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt; 匹配的  <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingFilters(System.Xml.XPath.XPathNavigator,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})">
      <summary>返回一个值，该值指示指定的缓冲消息是否满足表中至少一个 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的匹配条件，然后将匹配筛选器添加到集合。</summary>
      <returns>如果 <paramref name="messageBuffer" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="navigator">要测试的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="results">存储与<see cref="T:System.Collections.Generic.ICollection`1" />&lt;Filter&gt; 匹配的  <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 对象的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)">
      <summary>返回一个值，该值指示指定的消息是否正好满足表中的一个 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的匹配条件，然后返回匹配的筛选数据。</summary>
      <returns>如果消息满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="data">存储与 <paramref name="message" /> 匹配的筛选器的 <paramref name="FilterData" /> 的 out 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="message" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)">
      <summary>返回一个值，该值指示指定的缓冲消息是否正好满足表中的一个 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的匹配条件，然后返回匹配的筛选数据。</summary>
      <returns>如果缓冲消息满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="data">存储与 <paramref name="messageBuffer" /> 匹配的筛选器的 <paramref name="FilterData" /> 的 out 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="messageBuffer" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValue(System.ServiceModel.Dispatcher.SeekableXPathNavigator,`0@)">
      <summary>返回一个值，该值指示 <paramref name="navigator" /> 是否正好满足表中的一个 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> 的匹配条件，然后在 out 参数中返回匹配筛选器的筛选数据。</summary>
      <returns>如果 <paramref name="navigator" /> 正好满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="navigator">要测试的 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" />。</param>
      <param name="data">存储与 <paramref name="navigator" /> 相匹配的 <paramref name="FilterData" /> 的 out 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="navigator" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValue(System.Xml.XPath.XPathNavigator,`0@)">
      <summary>返回一个值，该值指示 <paramref name="navigator" /> 是否正好满足表中的一个 <see cref="T:System.Xml.Xpath.XPathNavigator" /> 的匹配条件，然后在 out 参数中返回匹配筛选器的筛选数据。</summary>
      <returns>如果 <paramref name="navigator" /> 正好满足表中一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="navigator">要测试的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="data">存储与 <paramref name="navigator" /> 相匹配的 <paramref name="FilterData" /> 的 out 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.MultipleFilterMatchesException">多个筛选器与 <paramref name="navigator" /> 相匹配。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})">
      <summary>返回一个值，该值指示指定的消息是否满足表中至少一个筛选器的匹配条件，然后将匹配筛选器的筛选数据添加到集合。</summary>
      <returns>如果 <paramref name="message" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="results">在泛型 <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt; 中存储匹配筛选器的筛选数据的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException">筛选器试图检查消息正文的内容。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})">
      <summary>返回一个值，该值指示指定的缓冲消息是否满足表中至少一个筛选器的匹配条件，然后将匹配筛选器的筛选数据添加到集合。</summary>
      <returns>如果 <paramref name="message" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="messageBuffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</param>
      <param name="results">在泛型 <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt; 中存储匹配筛选器的筛选数据的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValues(System.ServiceModel.Dispatcher.SeekableXPathNavigator,System.Collections.Generic.ICollection{`0})">
      <summary>返回一个值，该值指示 <paramref name="navigator" /> 是否满足表中至少一个 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> 的匹配条件，然后将匹配筛选器的筛选数据添加到集合。</summary>
      <returns>如果 <paramref name="navigator" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="navigator">要测试的 <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" />。</param>
      <param name="results">在泛型 <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt; 中存储匹配筛选器的筛选数据的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.GetMatchingValues(System.Xml.XPath.XPathNavigator,System.Collections.Generic.ICollection{`0})">
      <summary>返回一个值，该值指示 <paramref name="navigator" /> 是否满足表中至少一个 <see cref="T:System.Xml.Xpath.XPathNavigator" /> 的匹配条件，然后将匹配筛选器的筛选数据添加到集合。</summary>
      <returns>如果 <paramref name="navigator" /> 满足表中至少一个筛选器的匹配条件，则为 true；如果不满足任何筛选器，则为 false。</returns>
      <param name="navigator">要测试的 <see cref="T:System.Xml.Xpath.XPathNavigator" />。</param>
      <param name="results">在泛型 <see cref="T:System.Collections.Generic.ICollection`1" />&lt;<paramref name="FilterData" />&gt; 中存储匹配筛选器的筛选数据的引用参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.IsReadOnly">
      <summary>
        <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> 不是只读的。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Item(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>获取或设置与指定的 <paramref name="filter" /> 关联的筛选数据。</summary>
      <returns>与 <paramref name="filter" /> 关联的筛选数据。 如果找不到指定的 <paramref name="filter" />，get 操作会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个以指定的 <paramref name="filter" /> 作为键的新筛选数据元素。</returns>
      <param name="filter">与要获取或设置的筛选数据关联的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">发生了编译器错误。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性，并且 <paramref name="filter" /> 不在表中。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Keys">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> 中包含的所有筛选器的集合。</summary>
      <returns>筛选器表中包含的所有 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.NodeQuota">
      <summary>获取或设置 XML 文档节点的最大数目，这些文档节点在单一调用 Match 方法期间可由单个筛选器检查。 此值适用于每个筛选器。</summary>
      <returns>可检查的节点数。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})">
      <summary>从筛选器表中移除筛选器及其关联的筛选数据。</summary>
      <returns>如果找到了 filter/<paramref name="FilterData" /> 对并将其移除，则为 true；如果未找到，则为 false。</returns>
      <param name="item">要从表中移除的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> &lt;Filter, <paramref name="FilterData" />&gt;。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>从筛选器表中移除筛选器及其关联的筛选数据。</summary>
      <returns>如果找到了筛选器并将其移除，则为 true；否则为 false。</returns>
      <param name="filter">要移除的 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="filter" /> 不是 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.XPathMessageFilter)">
      <summary>从筛选器表中移除 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 及其关联的筛选数据。</summary>
      <returns>如果找到了 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> 并将其移除，则为 true；否则为 false。</returns>
      <param name="filter">要移除的 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="filter" /> 不是 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" />。</exception>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个可循环访问筛选器表的枚举数。</summary>
      <returns>一个可用于循环访问筛选器表的 <see cref="T:System.Collections.Generic.IEnumerator`1" />&lt;KeyValuePair&lt;Filter, FilterData&gt;&gt;。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.TrimToSize">
      <summary>压缩筛选器表，清除任何过多的分配或缓冲区。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageFilter,`0@)">
      <summary>检查筛选器是否存储在筛选器表中。</summary>
      <returns>如果筛选器表中存在 <paramref name="filter" />，则为 true；否则为 false。</returns>
      <param name="filter">用于检索数据的键。</param>
      <param name="data">当此方法返回 true 时，则返回与 <paramref name="filter" /> 关联的 <paramref name="data" />；否则，将返回 <paramref name="data" /> 参数的类型的默认值。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1.Values">
      <summary>获取 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilterTable`1" /> 中包含的所有 <paramref name="FilterData" /> 的集合。</summary>
      <returns>筛选器表中包含的所有 <paramref name="FilterData" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathMessageQueryCollection">
      <summary>包含 <see cref="T:System.ServiceModel.XPathMessageQuery" /> 对象集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageQueryCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.Evaluate``1(System.ServiceModel.Channels.Message)">
      <summary>对消息运行查询。 无法查询正文。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />满足查询的结果的可枚举集合。</returns>
      <param name="message">要查询的消息。</param>
      <typeparam name="TResult">要返回的对象的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)">
      <summary>对消息运行 XPath 查询。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />满足查询的结果的可枚举集合。</returns>
      <param name="buffer">要查询的消息。</param>
      <typeparam name="TResult">要返回的结果的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.InsertItem(System.Int32,System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>将 XPath 查询对象插入到集合中的指定索引处。</summary>
      <param name="index">集合中要插入该项的位置。</param>
      <param name="item">要插入的 XPath 查询对象。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.RemoveItem(System.Int32)">
      <summary>从集合中移除位于指定索引处的项。</summary>
      <param name="index">要从中移除该项的位置。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathMessageQueryCollection.SetItem(System.Int32,System.ServiceModel.Dispatcher.MessageQuery)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">位于指定索引处的元素的新值。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathNavigatorException">
      <summary>当允许 XPathNavigator 检查的节点的配额超出时，将引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathNavigatorException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathNavigatorException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathNavigatorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定流的源和目标的数据以及序列化异常所需的信息来初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathNavigatorException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathNavigatorException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathNavigatorException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathNavigatorException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及导致当前异常的内部异常来初始化 <see cref="T:System.ServiceModel.Dispatcher.XPathNavigatorException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.XPathResult">
      <summary>包含由 XPath 查询返回的值。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.Dispose">
      <summary>释放该对象拥有的所有资源。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsBoolean">
      <summary>将 XPath 查询的结果作为布尔值返回。</summary>
      <returns>
        <see cref="T:System.Boolean" />
      </returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsNodeset">
      <summary>将 XPath 查询的结果作为节点的可枚举集返回。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />可循环访问的 XPath 节点的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsNumber">
      <summary>将 XPath 查询的结果作为数字返回。</summary>
      <returns>
        <see cref="T:System.Double" />
      </returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsString">
      <summary>将 XPath 查询的结果作为字符串返回。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.XPathResult.ResultType">
      <summary>返回由 XPath 查询返回的值的类型。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" />枚举值之一。 若要获取实际结果，请使用相应的方法。 例如，如果该值为 <see cref="M:System.Xml.XPath.XPathResultType.Number" />，请使用 <see cref="M:System.ServiceModel.Dispatcher.XPathResult.GetResultAsNumber" /> 方法。</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding">
      <summary>
        <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> 类将 Microsoft 消息队列 (MSMQ) 消息映射到 Windows Communication Foundation (WCF) 消息。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.#ctor(System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" /> 初始化 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> 类的新实例。</summary>
      <param name="securityMode">消息队列 (MSMQ) 集成通道支持的安全模式</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">值不在 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" /> 值的范围内。</exception>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.#ctor(System.String)">
      <summary>从指定配置绑定元素的设置中初始化 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> 类的新实例。</summary>
      <param name="configurationName">configurationName 属性的值，该值标识其设置用于初始化绑定的 binding 元素。</param>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.CreateBindingElements">
      <summary>返回基本配置文件堆栈中的绑定元素。</summary>
      <returns>包含基本配置文件堆栈中的绑定元素堆栈的 <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.Security">
      <summary>获取与此绑定相关联的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity" />。</summary>
      <returns>与此绑定关联的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.SerializationFormat">
      <summary>获取或设置要用于序列化或反序列化消息的序列化格式。</summary>
      <returns>表示要使用的序列化类型的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding.ShouldSerializeSecurity">
      <summary>获取一个值，该值指定是否应序列化安全信息。</summary>
      <returns>如果应对安全信息进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement">
      <summary>Windows Communication Foundation (WCF) 应用程序可利用此绑定元素，向现有的使用 COM、MSMQ 本机 API 或 <see cref="N:System.Messaging" /> 中的 API 的 MSMQ 应用程序发送消息，或从这些应用程序接收消息。 使用此类可以向基于 MSMQ 的消息应用程序发送消息，或从这些应用程序接收消息。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>使用提供的上下文生成通道工厂。</summary>
      <returns>一个 MSMQ 集成通道工厂，可用于创建可向现有 MSMQ 应用程序发送消息的通道。</returns>
      <param name="context">用以生成通道工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">上下文值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TChannel" /> 不为IOutputChannel。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="ExactlyOnce" /> 为 true 且 <paramref name="Durable" /> 为 false。</exception>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>使用提供的上下文生成通道侦听器。</summary>
      <returns>一个 MSMQ 集成通道侦听器，可用于创建可从现有 MSMQ 应用程序接收消息的通道。</returns>
      <param name="context">用以生成通道侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">上下文值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TChannel" /> 不为IInputChannel。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
      <exception cref="T:System.InvalidOperationException">ExactlyOnce 为 true，而 Durable 为 false。</exception>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示是否能够使用提供的上下文生成通道工厂。</summary>
      <returns>如果利用所提供的上下文可生成通道工厂，则为 true；否则为 false。 仅当 <paramref name="TChannel" /> 为 <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> 时，此方法才返回 true。</returns>
      <param name="context">用以生成通道工厂的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>返回一个值，该值指示是否能够使用提供的上下文生成通道侦听器。</summary>
      <returns>如果利用所提供的上下文可生成通道侦听器，则为 true；否则为 false。 仅当 <paramref name="TChannel" /> 为 <see cref="T:System.ServiceModel.Channels.IInputChannel" /> 时，此方法才返回 true。</returns>
      <param name="context">用以生成通道侦听器的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">通道的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.Clone">
      <summary>返回绑定元素的复本。</summary>
      <returns>绑定元素的复本。</returns>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>从指定的 BindingContext 获取请求类型的属性。</summary>
      <returns>
        <paramref name="T" /> 类型的对象。</returns>
      <param name="context">绑定上下文。</param>
      <typeparam name="T">属性的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">上下文为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.Scheme">
      <summary>获取一个 <see cref="T:System.String" />，它包含绑定元素所使用的方案。</summary>
      <returns>包含绑定元素使用的方案的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.SerializationFormat">
      <summary>获取或设置要在序列化 MSMQ 消息时使用的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" />。</summary>
      <returns>要在序列化 MSMQ 消息时使用的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值不在 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat" /> 值的范围内。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationBindingElement.TargetSerializationTypes">
      <summary>获取或设置 <see cref="T:System.Type" /> 对象的数组，这些对象包含消息反序列化的目标类型。</summary>
      <returns>包含消息反序列化的目标类型的 <see cref="T:System.Type" /> 的数组。</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty">
      <summary>表示消息的消息队列 (MSMQ) 集成属性。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.AcknowledgeType">
      <summary>获取或设置要返回给发送应用程序的确认类型。</summary>
      <returns>要返回给发送应用程序的确认类型。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Acknowledgment">
      <summary>获取消息队列 (MSMQ) 生成的确认消息。</summary>
      <returns>消息队列生成的确认消息。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.AdministrationQueue">
      <summary>获取或设置接收消息队列 (MSMQ) 生成的确认消息的队列。</summary>
      <returns>接收消息队列生成的确认消息的队列。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.AppSpecific">
      <summary>指定应用程序特定的附加信息。</summary>
      <returns>一个表示应用程序特定的附加信息的 integer 值。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.ArrivedTime">
      <summary>获取或设置消息到达目标队列的时间。</summary>
      <returns>消息到达目标队列的时间。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Authenticated">
      <summary>获取或设置消息是否已验证。</summary>
      <returns>如果消息已验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Body">
      <summary>获取或设置消息的内容。</summary>
      <returns>MSMQ 消息正文的内容。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.BodyType">
      <summary>获取或设置消息体所含数据的类型。</summary>
      <returns>消息正文所包含的数据的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.CorrelationId">
      <summary>获取或设置确认、报告和响应消息用来引用原始消息的消息标识符。</summary>
      <returns>确认、报告和响应消息用以引用原始消息的消息标识符。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.DestinationQueue">
      <summary>获取或设置消息的预期目标队列。</summary>
      <returns>消息的预期目标队列。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Extension">
      <summary>获取或设置与消息关联的、应用程序定义的附加信息。</summary>
      <returns>包含与消息关联、应用程序定义的附加信息的字节数组。</returns>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Get(System.ServiceModel.Channels.Message)">
      <summary>获取给定消息的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty" />。</summary>
      <returns>一个包含指定消息的消息队列集成属性的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty" /> 对象。</returns>
      <param name="message">要检索其消息队列 (MSMQ) 集成消息属性的消息。</param>
      <exception cref="T:System.ArgumentNullException">该消息可为 null。</exception>
      <exception cref="T:System.ArgumentNullException">该消息可为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Id">
      <summary>获取消息的标识符。</summary>
      <returns>消息的标识符。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Label">
      <summary>获取或设置描述消息的、应用程序定义的 Unicode 字符串。</summary>
      <returns>描述消息的应用程序定义的 Unicode 字符串。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.MessageType">
      <summary>获取消息类型： Normal、Acknowledgment 或 Report。</summary>
      <returns>消息类型：Normal、Acknowledgment 或 Report。</returns>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Name">
      <summary>常数值“MsmqIntegrationMessageProperty”。</summary>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.Priority">
      <summary>获取或设置消息优先级，该优先级确定消息在队列中的位置。</summary>
      <returns>消息优先级。 这些值由 <see cref="T:System.Messaging.MessagePriority" /> 定义。</returns>
      <exception cref="T:System.ArgumentNullException">该值不能为 null，并且不可在 <see cref="T:System.Messaging.MessagePriority" /> 值的范围之内。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.ResponseQueue">
      <summary>获取或设置接收应用程序生成的响应消息的队列。</summary>
      <returns>接收应用程序生成的响应消息的队列的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.SenderId">
      <summary>获取发送用户的标识符。</summary>
      <returns>发送用户的标识符。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.SentTime">
      <summary>获取发送计算机上源队列管理器发送消息的日期和时间。</summary>
      <returns>发送计算机上的源队列管理器发送消息的日期和时间。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationMessageProperty.TimeToReachQueue">
      <summary>获取或设置消息到达队列所用的最长时间。</summary>
      <returns>消息到达队列所用的最长时间。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不可为 null，也不可小于零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不可为 null，也不可小于零。</exception>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity">
      <summary>
        <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity" /> 类可封装消息队列 (MSMQ) 集成通道的传输安全设置。</summary>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity" /> 的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity.Mode">
      <summary>获取或设置与消息队列 (MSMQ) 集成通道相关联的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" />。</summary>
      <returns>与消息队列集成通道相关联的 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurity.Transport">
      <summary>获取与消息队列 (MSMQ) 集成通道相关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" />。</summary>
      <returns>与消息队列集成通道相关联的 <see cref="T:System.ServiceModel.MsmqTransportSecurity" />。</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode">
      <summary>
        <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode" /> 为指定 MSMQ 集成通道支持的安全模式的枚举。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode.None">
      <summary>无安全性。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqIntegrationSecurityMode.Transport">
      <summary>使用 MSMQ 传输安全。</summary>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqMessage`1">
      <summary>
        <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessage`1" /> 类可对通过消息队列集成通道，发送往现有消息队列应用程序的消息队列 (MSMQ) 消息和从现有消息队列应用程序接收的消息队列 (MSMQ) 消息进行封装。</summary>
      <typeparam name="T">表示消息正文。</typeparam>
      <exception cref="T:System.ArgumentNullException">消息正文为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.MsmqIntegration.MsmqMessage`1.#ctor(`0)">
      <summary>利用所提供的消息正文初始化 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessage`1" /> 类的新实例。</summary>
      <param name="body">用以初始化 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqMessage`1" /> 类的新实例的消息正文。</param>
      <exception cref="T:System.ArgumentNullException">消息正文为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.AcknowledgeType">
      <summary>获取或设置与此消息关联的 <see cref="T:System.Messaging.AcknowledgeTypes" />。</summary>
      <returns>与此消息关联的 <see cref="T:System.Messaging.AcknowledgeTypes" />。 可以为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Acknowledgment">
      <summary>获取与此消息关联的 <see cref="T:System.Messaging.Acknowledgment" />。</summary>
      <returns>与此消息关联的 <see cref="T:System.Messaging.Acknowledgment" />。 默认值是 Acknowledgement.None。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.AdministrationQueue">
      <summary>获取或设置与此消息关联的管理队列的 <see cref="T:System.Uri" />。</summary>
      <returns>与此消息关联的管理队列的 <see cref="T:System.Uri" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.AppSpecific">
      <summary>获取或设置一个 <see cref="T:System.Int32" /> 值，该值可表示与此消息关联的应用程序特定的任何附加信息。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，该值可表示与此消息关联的应用程序特定的任何附加信息。 发送应用程序访问时，默认值是 null；接收应用程序访问时，默认值是 0。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.ArrivedTime">
      <summary>获取或设置一个 <see cref="T:System.DateTime" />，它指示消息到达目标队列的时间。</summary>
      <returns>一个指示消息到达目标队列的时间的 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Authenticated">
      <summary>获取一个布尔值，该值指示消息是否已验证。</summary>
      <returns>如果消息已验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Body">
      <summary>获取或设置消息的正文。</summary>
      <returns>消息的正文。</returns>
      <exception cref="T:System.ArgumentNullException">消息正文为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.BodyType">
      <summary>获取或设置一个指示消息正文的类型的 <see cref="T:System.Int32" /> 值。</summary>
      <returns>一个指示消息正文的类型的 <see cref="T:System.Int32" /> 值。 可以为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.CorrelationId">
      <summary>获取或设置一个 <see cref="T:System.String" />，它包含此消息的相关标识符。</summary>
      <returns>一个包含此消息的相关标识符的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.DestinationQueue">
      <summary>获取此消息的目标队列的 <see cref="T:System.Uri" />。</summary>
      <returns>此消息的目标队列的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Extension">
      <summary>获取或设置 <see cref="T:System.Byte" /> 的数组，其中包含有与此消息关联的应用程序定义的附加信息。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 的数组，其中包含有与此消息关联的应用程序定义的附加信息。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Id">
      <summary>获取一个 <see cref="T:System.String" />，它包含此消息的消息标识符。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含此消息的消息标识符。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Label">
      <summary>获取或设置包含消息标签的 <see cref="T:System.String" />。</summary>
      <returns>包含消息标签的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.MessageType">
      <summary>获取与此消息关联的 <see cref="T:System.Messaging.MessageType" />。</summary>
      <returns>与此消息关联的 <see cref="T:System.Messaging.MessageType" />。 可以为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.Priority">
      <summary>获取或设置与此消息关联的 <see cref="T:System.Messaging.MessagePriority" />。</summary>
      <returns>与此消息关联的 <see cref="T:System.Messaging.MessagePriority" />。 可以为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.ResponseQueue">
      <summary>获取或设置从接收应用程序接收响应消息的消息队列的 <see cref="T:System.Uri" />。</summary>
      <returns>此属性的默认值为 null。 此属性可标识接收应用程序返回给发送应用程序的响应消息的队列。 发送应用程序会在向接收应用程序发送消息时指定响应队列。 发送应用程序可以指定任何可用的队列为响应队列。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.SenderId">
      <summary>获取一个 <see cref="T:System.Byte" /> 的数组，其中包含有发送应用程序的发送方标识符。</summary>
      <returns>一个包含发送应用程序的发送方标识符的 <see cref="T:System.Byte" /> 的数组。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.SentTime">
      <summary>获取一个 <see cref="T:System.DateTime" />，它指示发送应用程序计算机的队列管理器发送该消息的时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，它指示发送应用程序计算机的队列管理器发送该消息的时间。 可以为 null。</returns>
    </member>
    <member name="P:System.ServiceModel.MsmqIntegration.MsmqMessage`1.TimeToReachQueue">
      <summary>获取或设置一个 <see cref="T:System.TimeSpan" />，它指示所允许的消息到达目标队列的最长时间。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，它指示所允许的消息到达目标队列的最长时间。 可以为 null。</returns>
    </member>
    <member name="T:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat">
      <summary>指示用于序列化作为 MSMQ 消息正文发送的对象的格式化程序。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.ActiveX">
      <summary>ActiveX 格式化程序用于序列化对象。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Binary">
      <summary>
        <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> 用于序列化对象。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.ByteArray">
      <summary>将对象序列化为字节数组。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Stream">
      <summary>将对象序列化为流。</summary>
    </member>
    <member name="F:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat.Xml">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 用于序列化对象。</summary>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.CustomPeerResolverService">
      <summary>提供自定义对等解析程序服务的基本实现。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.CustomPeerResolverService" /> 类的新默认实例。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.CleanupInterval">
      <summary>获取或设置循环时间长度，过了此时间间隔后，无效项将会被从对等解析程序服务的注册查找表中删除。</summary>
      <returns>指定时间间隔的 <see cref="T:System.TimeSpan" />，过了此时间间隔后，无效项将会被从对等解析程序服务的注册查找表中删除。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该时间间隔既可为零，也可大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">在调用 <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" /> 后，尝试设置该属性。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Close">
      <summary>关闭对等解析程序服务。</summary>
      <exception cref="T:System.InvalidOperationException">该服务已经被此方法的以前调用关闭。</exception>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.ControlShape">
      <summary>获取或设置对等解析程序服务是否共享引用。</summary>
      <returns>如果对等解析程序服务共享引用，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.GetServiceSettings">
      <summary>获取对等解析程序服务的特定响应设置。</summary>
      <returns>包含自定义对等解析程序服务的特定响应设置的 <see cref="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo" />，其中包括清除和刷新的时间间隔设置。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open">
      <summary>打开对等解析程序服务。</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.CleanupInterval" /> 或 <see cref="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.RefreshInterval" /> 可以设置为 0 时间段间隔。</exception>
      <exception cref="T:System.InvalidOperationException">该服务已经被此方法的以前调用启动。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Refresh(System.ServiceModel.PeerResolvers.RefreshInfo)">
      <summary>刷新对等解析程序服务的注册查找表中的项的过期时间。</summary>
      <returns>包含新刷新的注册项的 <see cref="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo" />。</returns>
      <param name="refreshInfo">包含项的网络 ID 和注册 ID 的 <see cref="T:System.ServiceModel.PeerResolvers.RefreshInfo" /> 对象，该项为对等解析程序注册查找表中的要刷新的项。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="refreshInfo" /> 可以设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" /> 的以前调用没有启动自定义对等解析程序服务。</exception>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.CustomPeerResolverService.RefreshInterval">
      <summary>获取或设置时间长度，在此时间段内，项将在对等解析程序服务的注册查找表中有效。</summary>
      <returns>指定时间长度的 <see cref="T:System.TimeSpan" />，在此时间段内，项将在对等解析程序服务的注册查找表中有效。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该时间间隔既可为零，也可大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">在调用 <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" /> 后，尝试设置该属性。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Register(System.Guid,System.String,System.ServiceModel.PeerNodeAddress)">
      <summary>向对等解析程序服务的注册查找表中添加新项。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" />，包含添加到对等解析程序服务的注册查找表中的项的复本。</returns>
      <param name="clientId">一个 <see cref="T:System.Guid" />，为要利用对等解析程序服务进行注册的注册项指定一个唯一标识符。</param>
      <param name="meshId">一个 <see cref="T:System.String" />，指定注册项所在对等网络的网络 ID。</param>
      <param name="address">一个包含注册项的终结点地址的 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</param>
      <exception cref="T:System.InvalidOperationException">查找表中已经存在使用相同 GUID 的注册项，或者以前对 <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" /> 的调用没有启动自定义对等解析程序服务。</exception>
      <exception cref="T:System.ArgumentException">提供给此方法的 <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" /> 对象为空或格式不正确。</exception>
      <exception cref="T:System.ArgumentNullException">提供给 <paramref name="refreshInfo" /> 参数的对象的 MeshId 和/或 RegistrationId 属性为空。</exception>
      <exception cref="T:System.NullReferenceException">提供给 <paramref name="refreshInfo" /> 参数的对象的 MeshId 属性为未知属性。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Register(System.ServiceModel.PeerResolvers.RegisterInfo)">
      <summary>向对等解析程序服务的注册查找表中添加新项。</summary>
      <returns>包含添加到对等解析程序服务的注册查找表中的项的复本的 <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" />。</returns>
      <param name="registerInfo">包含要利用对等解析程序服务进行注册的注册项的相关信息的 <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" />。</param>
      <exception cref="T:System.InvalidOperationException">查找表中已经存在使用相同 GUID 的注册项，或者以前对 <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" /> 的调用没有启动自定义对等解析程序服务。</exception>
      <exception cref="T:System.ArgumentException">提供给此方法的 <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" /> 对象为空或格式不正确。</exception>
      <exception cref="T:System.NullReferenceException">提供给 <paramref name="registerInfo" /> 参数的对象的 AddressInfo 属性为空。</exception>
      <exception cref="T:System.ArgumentNullException">提供给此方法的 <paramref name="meshId" /> 值可设置为空。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Resolve(System.ServiceModel.PeerResolvers.ResolveInfo)">
      <summary>返回注册项的未知终结点的列表。</summary>
      <returns>包含查找表中的注册项的终结点的 <see cref="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo" />，该注册项与 <paramref name="resolveInfo" /> 参数中所提供的信息相匹配。</returns>
      <param name="resolveInfo">包含注册项的相关信息的 <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" />，该注册项的终结点（如果已知）为对等解析程序服务要查找的终结点。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" /> 对象为空，或格式不正确。</exception>
      <exception cref="T:System.InvalidOperationException">查找表中已经存在使用相同 GUID 的注册项，或者以前对 <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" /> 的调用没有启动自定义对等解析程序服务。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Unregister(System.ServiceModel.PeerResolvers.UnregisterInfo)">
      <summary>从对等解析程序服务的注册查找表中移除特定项。</summary>
      <param name="unregisterInfo">包含用于唯一标识要从注册查找表中移除的注册项的信息的 <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" />。</param>
      <exception cref="T:System.ArgumentException">无法找到指定注册项的项，或者所提供的 <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" /> 对象为空或格式不正确。</exception>
      <exception cref="T:System.InvalidOperationException">查找表中已经存在使用相同 GUID 的注册项，或者以前对 <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" /> 的调用没有启动自定义对等解析程序服务。</exception>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Update(System.ServiceModel.PeerResolvers.UpdateInfo)">
      <summary>更新对等解析程序服务的注册查找表中的现有注册项。</summary>
      <returns>包含已更新注册项的复本的 <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" />。</returns>
      <param name="updateInfo">唯一标识特定注册项并为其提供已更新信息的 <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" />。</param>
      <exception cref="T:System.ArgumentException">无法找到指定注册项的项，或者所提供的 <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> 对象的格式不正确。</exception>
      <exception cref="T:System.InvalidOperationException">查找表中已经存在使用相同 GUID 的注册项，或者以前对 <see cref="M:System.ServiceModel.PeerResolvers.CustomPeerResolverService.Open" /> 的调用没有启动自定义对等解析程序服务。</exception>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.IPeerResolverContract">
      <summary>为对等解析程序服务的基本操作定义协定。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.GetServiceSettings">
      <summary>获取对等解析程序服务的设置。</summary>
      <returns>包含有关对等解析程序服务的信息的 <see cref="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo" />。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Refresh(System.ServiceModel.PeerResolvers.RefreshInfo)">
      <summary>刷新对等解析程序服务的注册查找表中的项的过期时间。</summary>
      <returns>包含新刷新的注册项的 <see cref="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo" />。</returns>
      <param name="refreshInfo">包含项的网络 ID 和注册 ID 的 <see cref="T:System.ServiceModel.PeerResolvers.RefreshInfo" /> 对象，该项为对等解析程序注册查找表中的要刷新的项。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Register(System.ServiceModel.PeerResolvers.RegisterInfo)">
      <summary>利用自定义对等解析程序服务注册对等节点。</summary>
      <returns>包含添加到对等解析程序服务的注册查找表中的项的复本的 <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" />。</returns>
      <param name="registerInfo">包含要利用对等解析程序服务进行注册的对等节点的相关信息的 <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Resolve(System.ServiceModel.PeerResolvers.ResolveInfo)">
      <summary>返回注册项的未知终结点的列表。</summary>
      <returns>包含查找表中的注册项的终结点的 <see cref="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo" />，该注册项与 <paramref name="resolveInfo" /> 参数中所提供的信息相匹配。</returns>
      <param name="resolveInfo">包含对等节点的相关信息的 <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" />，该对等节点的终结点（如果已知）为对等解析程序服务要查找的终结点。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Unregister(System.ServiceModel.PeerResolvers.UnregisterInfo)">
      <summary>从对等解析程序服务的查找表中移除注册。</summary>
      <param name="unregisterInfo">包含用于唯一标识要从注册查找表中移除的对等节点的信息的 <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.IPeerResolverContract.Update(System.ServiceModel.PeerResolvers.UpdateInfo)">
      <summary>更新对等解析程序服务的查找表中的特定对等节点的项。</summary>
      <returns>包含已更新对等终结点项的复本的 <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" />。</returns>
      <param name="updateInfo">唯一标识特定对等节点项并为其提供已更新信息的 <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" />。</param>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings">
      <summary>包含自定义对等解析程序服务的实例的特定设置。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Address">
      <summary>获取或设置自定义对等解析程序服务所在的对等节点的终结点地址。</summary>
      <returns>包含运行自定义对等解析程序服务的对等节点的终结点地址 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Binding">
      <summary>获取或设置自定义对等解析程序服务所使用的通道绑定。</summary>
      <returns>包含此服务的设置的 <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.IsBindingSpecified">
      <summary>获取是否已设置 <see cref="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Binding" /> 属性。</summary>
      <returns>如果已设置 <see cref="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Binding" /> 属性，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings.Resolver">
      <summary>获取或设置此服务的自定义对等解析程序实例。</summary>
      <returns>服务所使用的 <see cref="T:System.ServiceModel.PeerResolver" /> 实例。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy">
      <summary>指定在对等解析程序服务间的引用共享策略。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerReferralPolicy.DoNotShare">
      <summary>不共享引用。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerReferralPolicy.Service">
      <summary>引用策略由解析程序服务确定。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerReferralPolicy.Share">
      <summary>共享引用。</summary>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.PeerResolverMode">
      <summary>确定正在使用的对等解析程序的类型。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerResolverMode.Auto">
      <summary>利用绑定上所设置的信息，自动确定要使用的解析程序的类型。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerResolverMode.Custom">
      <summary>使用自定义解析程序。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.PeerResolverMode.Pnrp">
      <summary>使用 PNRP 解析程序。</summary>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.PeerResolverSettings">
      <summary>定义对等解析程序服务的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.PeerResolverSettings.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.PeerResolverSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerResolverSettings.Custom">
      <summary>获取自定义对等解析程序的特定设置。</summary>
      <returns>包含相关联的自定义对等解析程序服务的设置和解析程序实例的 <see cref="T:System.ServiceModel.PeerResolvers.PeerCustomResolverSettings" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerResolverSettings.Mode">
      <summary>获取或设置与此服务关联的对等解析程序实例特定于 PNRP，还是为自定义解析程序，或者自动确定。</summary>
      <returns>指定对等解析程序服务的模式的 <see cref="T:System.ServiceModel.PeerResolvers.PeerResolverMode" /> 枚举值。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.PeerResolverSettings.ReferralPolicy">
      <summary>获取或设置对等解析程序服务所使用的特定引用策略。</summary>
      <returns>指定是否共享对等引用的 <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RefreshInfo">
      <summary>定义对等解析程序服务进行注册项刷新时要使用的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.RefreshInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshInfo.#ctor(System.String,System.Guid)">
      <summary>利用所提供的网络 ID 和唯一注册 ID 初始化 <see cref="T:System.ServiceModel.PeerResolvers.RefreshInfo" /> 类的新实例。</summary>
      <param name="meshId">一个指定对等节点所在网络的 <see cref="T:System.String" />。</param>
      <param name="regId">一个唯一标识对等节点的注册项的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方（服务客户端）发送的刷新信息消息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RefreshInfo.MeshId">
      <summary>获取要刷新的注册项的网络 ID。</summary>
      <returns>包含要在对等解析程序注册查找表中进行刷新的注册项的网络 ID 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RefreshInfo.RegistrationId">
      <summary>获取要刷新的注册项的唯一注册 ID。</summary>
      <returns>包含要在对等解析程序注册查找表中对其项进行刷新的对等节点的注册 ID 的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo">
      <summary>包含作为对等解析程序上的注册查找表刷新操作的结果而返回的响应信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshResponseInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshResponseInfo.#ctor(System.TimeSpan,System.ServiceModel.PeerResolvers.RefreshResult)">
      <summary>利用所提供的注册生存期和刷新结果初始化 <see cref="T:System.ServiceModel.PeerResolvers.RefreshResponseInfo" /> 类的新实例。</summary>
      <param name="registrationLifetime">指定对等解析程序的注册的新生存期的 <see cref="T:System.TimeSpan" />。</param>
      <param name="result">指定刷新结果的 <see cref="T:System.ServiceModel.PeerResolvers.RefreshResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RefreshResponseInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方发送的刷新响应信息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RefreshResponseInfo.RegistrationLifetime">
      <summary>获取或设置到注册过期并被解析程序服务移除为止的时间。</summary>
      <returns>指定到注册过期并被解析程序服务移除为止的新时间的 <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RefreshResponseInfo.Result">
      <summary>获取或设置刷新操作的结果。</summary>
      <returns>指示对等解析程序上的刷新操作的结果的 <see cref="T:System.ServiceModel.PeerResolvers.RefreshResult" /> 枚举值。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RefreshResult">
      <summary>指定在正在运行的对等解析程序服务中尝试更新注册项的过期日期的结果。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.RefreshResult.RegistrationNotFound">
      <summary>未找到注册项。</summary>
    </member>
    <member name="F:System.ServiceModel.PeerResolvers.RefreshResult.Success">
      <summary>成功刷新注册项。</summary>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RegisterInfo">
      <summary>定义要提供给对等解析程序服务的对等注册信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterInfo.#ctor(System.Guid,System.String,System.ServiceModel.PeerNodeAddress)">
      <summary>利用所提供的客户端 ID、网络 ID 和终结点地址初始化 <see cref="T:System.ServiceModel.PeerResolvers.RegisterInfo" /> 类的新实例。</summary>
      <param name="client">唯一标识要注册的对等节点的 <see cref="T:System.Guid" />。</param>
      <param name="meshId">指定对等节点所在网络的 ID 的 <see cref="T:System.String" />。</param>
      <param name="address">指定要注册的对等节点的终结点地址的 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterInfo.ClientId">
      <summary>获取唯一标识对等节点的注册项的 <see cref="T:System.Guid" />。</summary>
      <returns>唯一标识对等节点的注册项的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方发送的注册信息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterInfo.MeshId">
      <summary>获取与注册项关联的网络 ID。</summary>
      <returns>包含与注册项关联的网络 ID（或网络名称）的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterInfo.NodeAddress">
      <summary>获取终结点地址，以将其关联到将要利用解析程序服务进行注册的节点。</summary>
      <returns>包含要关联到将要利用解析程序服务进行注册的节点的终结点地址的 <see cref="T:System.ServiceModel.PeerNodeAddress" />。 此实例中所包含的地址可用于在网络内连接对等节点。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo">
      <summary>包含对等解析程序返回的作为注册操作的结果的响应信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterResponseInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterResponseInfo.#ctor(System.Guid,System.TimeSpan)">
      <summary>利用所提供的注册 ID 和生存期初始化 <see cref="T:System.ServiceModel.PeerResolvers.RegisterResponseInfo" /> 类的新实例。</summary>
      <param name="registrationId">唯一标识新注册的对等解析程序的 <see cref="T:System.Guid" />。</param>
      <param name="registrationLifetime">指定对等解析程序的注册的生存期的 <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.RegisterResponseInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方发送的注册响应信息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterResponseInfo.RegistrationId">
      <summary>获取或设置唯一标识新注册的对等解析程序的 GUID。</summary>
      <returns>唯一标识新注册的对等解析程序的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.RegisterResponseInfo.RegistrationLifetime">
      <summary>获取或设置到注册过期并被解析程序服务移除为止的时间。</summary>
      <returns>指定对等解析程序的注册的生存期的 <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.ResolveInfo">
      <summary>定义对等解析程序服务进行注册项的终结点解析时要使用的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveInfo.#ctor(System.Guid,System.String,System.Int32)">
      <summary>利用所提供的客户端 ID 和网络 ID、返回的终结点地址的最大数目初始化 <see cref="T:System.ServiceModel.PeerResolvers.ResolveInfo" /> 类的新实例。</summary>
      <param name="clientId">包含终结点要解析到的客户端的唯一 ID 的 <see cref="T:System.Guid" />。</param>
      <param name="meshId">包含客户端要加入的网络的 ID 的 <see cref="T:System.String" />。</param>
      <param name="maxAddresses">包含解析操作要返回的客户端终结点地址的最大数目的 <see cref="T:System.Int32" />。</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ResolveInfo.ClientId">
      <summary>获取要解析的注册项的 ID。</summary>
      <returns>包含注册项的唯一 ID 的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方（服务客户端）发送的解析请求信息消息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ResolveInfo.MaxAddresses">
      <summary>获取解析操作要返回的客户端终结点地址的最大数目。</summary>
      <returns>包含解析操作要返回的客户端终结点地址的最大数目的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ResolveInfo.MeshId">
      <summary>获取将要解析其终结点地址的项的网络 ID。</summary>
      <returns>包含客户端要加入的网络的 ID 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo">
      <summary>包含作为对等解析程序上的对等终结点解析操作的结果而返回的响应信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveResponseInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveResponseInfo.#ctor(System.ServiceModel.PeerNodeAddress[])">
      <summary>利用所提供的对等终结点地址初始化 <see cref="T:System.ServiceModel.PeerResolvers.ResolveResponseInfo" /> 类的新实例。</summary>
      <param name="addresses">包含终结点地址的 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 对象的数组，这些终结点地址为已注册到先前解析操作中请求了其终结点的对等解析程序的终结点地址。</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ResolveResponseInfo.Addresses">
      <summary>获取或设置对等节点地址的集合。</summary>
      <returns>包含终结点地址的 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 对象的通用列表 &lt;IList&gt;，这些终结点地址为已注册到先前解析操作中请求了其终结点的对等解析程序的终结点地址。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ResolveResponseInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方发送的解析响应信息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo">
      <summary>包含对等解析程序请求对等解析程序服务的设置时返回的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo.#ctor(System.Boolean)">
      <summary>利用所提供的引用策略值初始化 <see cref="T:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo" /> 类的新实例。</summary>
      <param name="control">指示解析程序服务是否传递引用的 <see cref="T:System.Boolean" />。</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo.ControlMeshShape">
      <summary>获取或设置解析程序服务是否传递引用。</summary>
      <returns>如果传递来自网络中的对等解析程序的引用，则为 true；如果忽略这些引用，则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.ServiceSettingsResponseInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方发送的服务设置响应信息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.UnregisterInfo">
      <summary>包含用于从对等解析程序服务移除注册项的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UnregisterInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UnregisterInfo.#ctor(System.String,System.Guid)">
      <summary>利用要从解析程序服务的注册查找表中移除的对等项的网络和注册 ID 初始化 <see cref="T:System.ServiceModel.PeerResolvers.UnregisterInfo" /> 类的新实例。</summary>
      <param name="meshId">指定要移除其项的对等项的网络 ID 的 <see cref="T:System.String" />。</param>
      <param name="registrationId">唯一标识要从解析程序服务的查找表中移除的项的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UnregisterInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方发送的注册移除信息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UnregisterInfo.MeshId">
      <summary>获取要移除其项的对等项的网络 ID。</summary>
      <returns>指定要移除其项的对等项的网络 ID 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UnregisterInfo.RegistrationId">
      <summary>获取要从解析程序服务的查找表中移除的项的唯一 ID。</summary>
      <returns>唯一标识要从解析程序服务的查找表中移除的项的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.ServiceModel.PeerResolvers.UpdateInfo">
      <summary>包含用于更新对等解析程序服务查找表中的特定注册项的终结点地址的信息。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UpdateInfo.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UpdateInfo.#ctor(System.Guid,System.Guid,System.String,System.ServiceModel.PeerNodeAddress)">
      <summary>利用所提供的对等客户端 ID、注册 ID、对等网络 ID 和对等终结点地址初始化 <see cref="T:System.ServiceModel.PeerResolvers.UpdateInfo" /> 类的新实例。</summary>
      <param name="registrationId">指定要更新的注册项的唯一 ID 的 <see cref="T:System.Guid" />。</param>
      <param name="client">指定提交了已更新注册项信息的对等客户端的唯一 ID 的 <see cref="T:System.Guid" />。</param>
      <param name="meshId">包含项的网络 ID 的 <see cref="T:System.String" />。</param>
      <param name="address">包含要更新的注册项的终结点地址的 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</param>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UpdateInfo.ClientId">
      <summary>获取提交了已更新注册项信息的对等客户端的唯一 ID。</summary>
      <returns>指定提交了已更新注册项信息的对等客户端的唯一 ID 的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="M:System.ServiceModel.PeerResolvers.UpdateInfo.HasBody">
      <summary>指示包含此类型的序列化实例的消息其正文格式是否正确。</summary>
      <returns>如果发送方发送的注册更新信息的正文格式正确，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UpdateInfo.MeshId">
      <summary>获取注册项的网络 ID。</summary>
      <returns>包含已更新注册项的网络 ID 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UpdateInfo.NodeAddress">
      <summary>获取要更新的注册项的终结点地址。</summary>
      <returns>包含要更新的注册项的终结点地址的 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.PeerResolvers.UpdateInfo.RegistrationId">
      <summary>获取要更新的注册项的唯一 ID。</summary>
      <returns>指定要更新的注册项的唯一 ID 的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite">
      <summary>基本的 128 位安全算法组。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.#ctor">
      <summary>创建和初始化 <see cref="T:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite" /> 的实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>获取默认的非对称密钥换行算法 RsaOaepKeyWrap。</summary>
      <returns>默认的非对称密钥换行算法 RsaOaepKeyWrap。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>获取默认的非对称签名算法 RsaSha1Signature。</summary>
      <returns>默认的非对称签名算法 RsaSha1Signature。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>获取默认的规范化算法 ExclusiveC14n。</summary>
      <returns>默认的规范化算法 ExclusiveC14n。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>获取默认摘要算法 Sha1Digest。</summary>
      <returns>默认的摘要算法 Sha1Digest。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>获取默认的摘要算法 Aes128Encryption。</summary>
      <returns>默认的摘要算法 Aes128Encryption。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>获取默认的加密密钥派生长度 128。</summary>
      <returns>默认的加密密钥派生长度 128。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>获取默认的签名密钥派生长度 128。</summary>
      <returns>默认的签名密钥派生长度 128。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>获取默认的对称密钥长度 128。</summary>
      <returns>默认的对称密钥长度 128。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>获取默认的对称密钥换行算法 Aes128KeyWrap。</summary>
      <returns>默认的对称密钥换行算法 Aes128KeyWrap。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>获取默认的对称签名算法 HmacSha1Signature。</summary>
      <returns>默认的对称签名算法 HmacSha1Signature。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>如果支持指定的非对称密钥长度，则返回 true；否则返回 false。 有效长度范围为 1024 到 4096。</summary>
      <returns>如果支持指定的非对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">非对称密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>如果支持指定的对称密钥长度，则返回 true；否则返回 false。 有效长度范围为 128 到 256。</summary>
      <returns>如果支持指定的对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">对称密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite.ToString">
      <summary>返回 <see cref="T:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Basic128SecurityAlgorithmSuite" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite">
      <summary>基本的 192 位安全算法组。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.#ctor">
      <summary>创建和初始化 <see cref="T:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite" /> 的实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>获取默认的非对称密钥换行算法 RsaOaepKeyWrap。</summary>
      <returns>默认的非对称密钥换行算法 RsaOaepKeyWrap。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>获取默认的非对称签名算法 RsaSha1Signature。</summary>
      <returns>默认的非对称签名算法 RsaSha1Signature。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>获取默认的规范化算法 ExclusiveC14n。</summary>
      <returns>默认的规范化算法 ExclusiveC14n。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>获取默认摘要算法 Sha1Digest。</summary>
      <returns>默认的摘要算法 Sha1Digest。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>获取默认的摘要算法 Aes192Encryption。</summary>
      <returns>默认的摘要算法 Aes192Encryption。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>获取默认的加密密钥派生长度 192。</summary>
      <returns>默认的加密密钥派生长度 192。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>获取默认的签名密钥派生长度 192。</summary>
      <returns>默认的签名密钥派生长度 192。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>获取默认的对称密钥长度 192。</summary>
      <returns>默认的对称密钥长度 192。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>获取默认的对称密钥换行算法 Aes192KeyWrap。</summary>
      <returns>默认的对称密钥换行算法 Aes192KeyWrap。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>获取默认的对称签名算法 HmacSha1Signature。</summary>
      <returns>默认的对称签名算法 HmacSha1Signature。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>如果支持指定的非对称密钥长度，则返回 true；否则返回 false。 有效长度为 1024 到 4096。</summary>
      <returns>如果支持指定的非对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">非对称密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>如果支持指定的对称密钥长度，则返回 true；否则返回 false。 有效长度范围为 192 到 256。</summary>
      <returns>如果支持指定的对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">对称密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite.ToString">
      <summary>返回 <see cref="T:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Basic192SecurityAlgorithmSuite" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite">
      <summary>基本的 256 位安全算法组。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.#ctor">
      <summary>创建和初始化 <see cref="T:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite" /> 的实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>获取默认的非对称密钥换行算法 RsaOaepKeyWrap。</summary>
      <returns>默认的非对称密钥换行算法 RsaOaepKeyWrap。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>获取默认的非对称签名算法 RsaSha1Signature。</summary>
      <returns>默认的非对称签名算法 RsaSha1Signature。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>获取默认的规范化算法 ExclusiveC14n。</summary>
      <returns>默认的规范化算法 ExclusiveC14n。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>获取默认摘要算法 Sha1Digest。</summary>
      <returns>默认的摘要算法 Sha1Digest。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>获取默认的摘要算法 Aes256Encryption。</summary>
      <returns>默认的摘要算法 Aes256Encryption。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>获取默认的加密密钥派生长度 256。</summary>
      <returns>默认的加密密钥派生长度 256。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>获取默认的签名密钥派生长度 192。</summary>
      <returns>默认的签名密钥派生长度 192。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>获取默认的对称密钥长度 256。</summary>
      <returns>默认的对称密钥长度 256。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>获取默认的对称密钥换行算法 Aes256KeyWrap。</summary>
      <returns>默认的对称密钥换行算法 Aes256KeyWrap。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>获取默认的对称签名算法 HmacSha1Signature。</summary>
      <returns>默认的对称签名算法 HmacSha1Signature。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>如果支持指定的非对称密钥长度，则返回 true；否则返回 false。 有效长度范围为 1024 到 4096。</summary>
      <returns>如果支持指定的非对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">非对称密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>如果支持指定的对称密钥长度，则返回 true；否则返回 false。 唯一有效的长度为 256。</summary>
      <returns>如果支持指定的对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">对称密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite.ToString">
      <summary>返回 <see cref="T:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Basic256SecurityAlgorithmSuite" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.BasicSecurityProfileVersion">
      <summary>提供与基本安全配置文件规范相对应的消息版本。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.BasicSecurityProfileVersion.BasicSecurityProfile10">
      <summary>提供与基本安全配置文件规范相对应的消息版本。</summary>
      <returns>一种类，具有以文本格式返回版本的 ToString 方法。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.ChannelProtectionRequirements">
      <summary>描述应用于该通道中所传输消息的不同部分的加密和签名需求。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.#ctor(System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>使用 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> 类的一个实例初始化另一个新实例。</summary>
      <param name="other">
        <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> 的另一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.Add(System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> 中的部分集合添加到此类的当前实例中。</summary>
      <param name="protectionRequirements">指定的 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.Add(System.ServiceModel.Security.ChannelProtectionRequirements,System.Boolean)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" /> 中的各个部分集合添加到此类的当前实例中。</summary>
      <param name="protectionRequirements">指定的 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />。</param>
      <param name="channelScopeOnly">指定范围是否为仅通道。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.CreateInverse">
      <summary>反转传入和传出部分，创建该类的新实例。</summary>
      <returns>该类的一个新实例，反转了传入和传出部分。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.IncomingEncryptionParts">
      <summary>获取消息部分的集合，这些消息部分经过加密，属于从客户端到服务器的消息。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> 集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.IncomingSignatureParts">
      <summary>获取消息部分的集合，已为从客户端到服务器的消息对它们进行了签名。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> 集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.IsReadOnly">
      <summary>获取一个值，该值指示该类实例是否为只读。</summary>
      <returns>如果该类实例为只读，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.ChannelProtectionRequirements.MakeReadOnly">
      <summary>将该类及其部分集合设置为只读。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.OutgoingEncryptionParts">
      <summary>获取消息部分的集合，已为从服务器到客户端的消息对它们进行了加密。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> 集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ChannelProtectionRequirements.OutgoingSignatureParts">
      <summary>获取消息部分的集合，已为从服务器到客户端的消息对它们进行了签名。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> 集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder">
      <summary>使用 Windows DataProtection API 功能提供安全状态的编码和解码机制。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.#ctor">
      <summary>初始化此类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.#ctor(System.Boolean)">
      <summary>初始化此类的新实例。</summary>
      <param name="useCurrentUserProtectionScope">指示是否使用当前用户保护范围。</param>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.#ctor(System.Boolean,System.Byte[])">
      <summary>初始化此类的新实例。</summary>
      <param name="useCurrentUserProtectionScope">指示是否使用当前用户保护范围。</param>
      <param name="entropy">一个指定平均信息量的 byte 数组，它指示编码器可用于编码安全状态的其他随机性。</param>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.DecodeSecurityState(System.Byte[])">
      <summary>解码安全状态。</summary>
      <returns>一个表示已解码安全状态的 byte 数组。</returns>
      <param name="data">一个表示已编码安全状态的 byte 数组。</param>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.EncodeSecurityState(System.Byte[])">
      <summary>编码安全状态。</summary>
      <returns>一个表示已编码安全状态的 byte 数组。</returns>
      <param name="data">一个表示已解码安全状态的 byte 数组。</param>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.GetEntropy">
      <summary>指示此编码器的随机性。</summary>
      <returns>
        <see cref="T:System.Byte" /> 类型数组。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.ToString">
      <summary>返回表示当前 <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /> 实例的字符串。</summary>
      <returns>一个表示当前 <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /> 实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.DataProtectionSecurityStateEncoder.UseCurrentUserProtectionScope">
      <summary>获取一个值，该值指示是否使用当前用户保护范围。</summary>
      <returns>如果将使用当前用户保护范围，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.DispatchContext">
      <summary>定义输入和输出到 <see cref="M:System.ServiceModel.Security.WSTrustServiceContract.DispatchRequest(System.ServiceModel.Security.DispatchContext)" /> 的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.DispatchContext.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.DispatchContext" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.DispatchContext.Principal">
      <summary>获取或设置请求者的标识。</summary>
      <returns>请求者的标识。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.DispatchContext.RequestAction">
      <summary>获取或设置请求消息的 WS-Addressing 操作。</summary>
      <returns>WS-Addressing 操作的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.DispatchContext.RequestMessage">
      <summary>获取或设置请求消息。</summary>
      <returns>请求消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.DispatchContext.ResponseAction">
      <summary>获取或设置请求响应消息的合适 WS-Addressing 操作。</summary>
      <returns>WS-Addressing 操作的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.DispatchContext.ResponseMessage">
      <summary>获取或设置响应消息。</summary>
      <returns>响应消息。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.DispatchContext.SecurityTokenService">
      <summary>获取或设置应处理请求消息的 <see cref="T:System.IdentityModel.SecurityTokenService" />。</summary>
      <returns>应处理请求的 STS。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.DispatchContext.TrustNamespace">
      <summary>WS-Trust 命名空间 URI 定义请求和响应消息。</summary>
      <returns>命名空间 URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.ExpiredSecurityTokenException">
      <summary>当 CardSpace 安全令牌过期时引发的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ExpiredSecurityTokenException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ExpiredSecurityTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException" /> 类的新实例。</summary>
      <param name="info">异常的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">异常的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ExpiredSecurityTokenException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException" /> 类的新实例。</summary>
      <param name="message">要显示的消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ExpiredSecurityTokenException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.ExpiredSecurityTokenException" /> 类的新实例。</summary>
      <param name="message">要显示的消息。</param>
      <param name="innerException">此实例的内部 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.HttpDigestClientCredential">
      <summary>用于 HTTP 客户端的摘要式身份验证。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel">
      <summary>使用提供的客户端凭据，获取或设置客户端允许的模拟级别。</summary>
      <returns>客户端授予服务器作为 HTTP 摘要式身份验证一部分的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential">
      <summary>获取或设置将用于基于摘要的身份验证的网络凭据。</summary>
      <returns>将用于基于摘要的身份验证的 <see cref="T:System.Net.NetworkCredential" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.IdentityVerifier">
      <summary>一个 abstract 基类，可以实现它以根据表示远程终结点的授权上下文验证所需标识，或从终结点地址创建标识。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IdentityVerifier.#ctor">
      <summary>创建此类的实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IdentityVerifier.CheckAccess(System.ServiceModel.EndpointIdentity,System.IdentityModel.Policy.AuthorizationContext)">
      <summary>实现要验证标识的方法。</summary>
      <returns>如果验证了标识，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="identity">The <see cref="T:System.ServiceModel.EndpointIdentity" /> to verify.</param>
      <param name="authContext">测试 <paramref name="identity" /> 所依据的 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IdentityVerifier.CreateDefault">
      <summary>创建此类的默认实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.IdentityVerifier" /> 的默认实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.IdentityVerifier.TryGetIdentity(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointIdentity@)">
      <summary>尝试从终结点创建标识。</summary>
      <returns>如果返回了标识，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="reference">用于创建标识的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="identity">返回的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.IEndpointIdentityProvider">
      <summary>提供终结点的标识。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IEndpointIdentityProvider.GetIdentityOfSelf(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>基于传入的安全令牌要求，获取当前终结点的标识。</summary>
      <returns>当前终结点的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
      <param name="tokenRequirement">描述安全令牌要求的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty">
      <summary>当序列化回复消息的主体时，启用模拟的帮助器类。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.CreateCopy">
      <summary>创建消息属性的副本。</summary>
      <returns>消息属性的副本。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.Name">
      <summary>获取信息属性的名称。</summary>
      <returns>消息属性的名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.StartImpersonation(System.IDisposable@,System.Security.Principal.IPrincipal@,System.Boolean@)">
      <summary>用调用方的上下文开始模拟，如果模拟在此项服务已启用并根据服务配置设置在线程的相应实体。</summary>
      <param name="impersonationContext">此方法返回时，包含该模拟上下文 。 该参数未经初始化即被处理。</param>
      <param name="originalPrincipal">当此方法返回时，调用此方法前，包含线程上的原始主体。 该参数未经初始化即被处理。</param>
      <param name="isThreadPrincipalSet">当此方法返回时，包含指示主体是否设置在由此方法调用的线程上的值。 如果操作上下文在模拟中不可用，则此参数返回 false 。 该参数未经初始化即被处理。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.StopImpersonation(System.IDisposable,System.Security.Principal.IPrincipal,System.Boolean)">
      <summary>还原模拟并在线程设置指定原始主体。</summary>
      <param name="impersonationContext">要还原的模拟上下文。</param>
      <param name="originalPrincipal">在线程中要设置的原始主体。</param>
      <param name="isThreadPrincipalSet">指示是否在模拟期间已设置线程用户的值。 如果设置了主体，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty@)">
      <summary>使用指定消息从 <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" /> 中获取属性。</summary>
      <returns>如果找到该属性，则为 true；否则，为 false。</returns>
      <param name="message">从中提取属性的消息。</param>
      <param name="property">此方法返回时，包含从消息中提取的 <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" /> 属性。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty@)">
      <summary>从指定的 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 对象中获取 <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" /> 属性。</summary>
      <returns>如果找到该属性，则为 true；否则，为 false。</returns>
      <param name="properties">从中提取属性的消息属性对象。</param>
      <param name="property">此方法返回时，包含从消息中提取的 <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" /> 属性。</param>
    </member>
    <member name="T:System.ServiceModel.Security.InfocardInteractiveChannelInitializer">
      <summary>初始化 CardSpace 交互式通道。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.InfocardInteractiveChannelInitializer.#ctor(System.ServiceModel.Description.ClientCredentials,System.ServiceModel.Channels.Binding)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.InfocardInteractiveChannelInitializer" /> 类的新实例。</summary>
      <param name="credentials">从中调用此方法的 <see cref="T:System.ServiceModel.Description.ClientCredentials" />。</param>
      <param name="binding">服务终结点上的绑定。</param>
    </member>
    <member name="M:System.ServiceModel.Security.InfocardInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)">
      <summary>开始异步方法以显示初始化用户界面 (UI)。</summary>
      <returns>此方法的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="channel">通道。</param>
      <param name="callback">在完成此方法时调用的异步回调方法。</param>
      <param name="state">保持当前状态。</param>
    </member>
    <member name="P:System.ServiceModel.Security.InfocardInteractiveChannelInitializer.Binding">
      <summary>获取服务终结点上的绑定。</summary>
      <returns>服务终结点上的 <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.InfocardInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>与显示初始化用户界面 (UI) 相关的异步回调方法。</summary>
      <param name="result">相应 Begin 方法的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.ISecureConversationSession">
      <summary>表示一个安全对话安全会话。 通信方使用由服务器颁发的作为建立会话一部分的 SecurityContextToken 保护会话中所有消息的安全。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ISecureConversationSession.TryReadSessionTokenIdentifier(System.Xml.XmlReader)">
      <summary>尝试读取 XML 读取器所指向的会话令牌标识符。</summary>
      <returns>如果 XML 读取器所指向的 XML 与匹配安全会话令牌的 SecurityKeyIdentifierClause 相对应，则为 true；否则为 false。</returns>
      <param name="reader">用于尝试读取令牌的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ISecureConversationSession.WriteSessionTokenIdentifier(System.Xml.XmlDictionaryWriter)">
      <summary>尝试写入与安全会话令牌相对应的 SecurityKeyIdentifierClause。 此方法对于一些会话（如建立在安全会话顶部的 WS-RM 会话）很有用，并引用安全会话令牌的标识符作为其会话建立协议的一部分。</summary>
      <param name="writer">用于尝试写入令牌的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.ISecuritySession">
      <summary>表示一种 ISession，它强制在会话中交换的所有消息的要求介于建立该会话的相同通信方之间。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.ISecuritySession.RemoteIdentity">
      <summary>获取远程主体的标识。</summary>
      <returns>远程主体的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.IssuedTokenClientCredential">
      <summary>表示用于从安全令牌服务获取已颁发令牌的信息。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.CacheIssuedTokens">
      <summary>获取或设置一个布尔值，该值指定是否要由通道缓存已颁发的令牌。</summary>
      <returns>如果要缓存令牌，则为 true；否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.InvalidOperationException">试图设置只读凭据。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.DefaultKeyEntropyMode">
      <summary>获取或设置 <see cref="T:System.ServiceModel.Security.SecurityKeyEntropyMode" /> 的默认值。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.SecurityKeyEntropyMode" /> 的值。 默认值为 <see cref="F:System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy" />。</returns>
      <exception cref="T:System.InvalidOperationException">试图设置只读凭据。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.IssuedTokenRenewalThresholdPercentage">
      <summary>获取或设置已颁发令牌的续订阈值百分比。</summary>
      <returns>已颁发令牌的续订阈值百分比。 默认值为 60。</returns>
      <exception cref="T:System.InvalidOperationException">试图设置只读凭据。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.IssuerChannelBehaviors">
      <summary>获取颁发者通道行为的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.IEndpointBehavior" /> 的一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.LocalIssuerAddress">
      <summary>获取或设置本地颁发者的地址。</summary>
      <returns>本地颁发者的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <exception cref="T:System.InvalidOperationException">试图设置只读凭据。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.LocalIssuerBinding">
      <summary>获取或设置本地颁发者的绑定。</summary>
      <returns>本地颁发者的 <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
      <exception cref="T:System.InvalidOperationException">试图设置只读凭据。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.LocalIssuerChannelBehaviors">
      <summary>获取本地颁发者通道行为的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.IEndpointBehavior" /> 的一个 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenClientCredential.MaxIssuedTokenCachingTime">
      <summary>获取或设置已颁发令牌的最大缓存时间。</summary>
      <returns>一个 <see cref="T:System.Timespan" />，表示已颁发令牌的最大缓存时间。 默认值为 <see cref="F:System.TimeSpan.MaxValue" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">set 的值小于零。</exception>
      <exception cref="T:System.InvalidOperationException">试图设置只读凭据。</exception>
    </member>
    <member name="T:System.ServiceModel.Security.IssuedTokenServiceCredential">
      <summary>允许服务配置与客户端出示的联合凭据相关联的属性。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.AllowedAudienceUris">
      <summary>获取一个指定服务的命名用户的字符串的集合。</summary>
      <returns>一个 URI 泛型列表。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.AllowUntrustedRsaIssuers">
      <summary>获取或设置一个值，该值指示是否允许不受信任的 RSA 令牌颁发者。</summary>
      <returns>如果允许不受信任的 RSA 令牌颁发者，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">尝试更改只读令牌。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.AudienceUriMode">
      <summary>获取一个枚举值，该值指示是否应验证受众限制条件。</summary>
      <returns>一个枚举值，指示是否应验证受众限制条件。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.CertificateValidationMode">
      <summary>获取或设置证书验证模式。</summary>
      <returns>一个指定如何验证证书的 <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" /> 枚举项。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.CustomCertificateValidator">
      <summary>获取或设置一个自定义的 X.509 证书验证程序。</summary>
      <returns>自定义 X.509 证书验证程序。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.KnownCertificates">
      <summary>获取已知证书的列表。</summary>
      <returns>已知证书的列表。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.RevocationMode">
      <summary>获取或设置吊销模式。</summary>
      <returns>吊销模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.SamlSerializer">
      <summary>获取或设置已颁发服务凭据的自定义 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />。</summary>
      <returns>此服务的自定义 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />。</returns>
      <exception cref="T:System.InvalidOperationException">试图设置只读凭据。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.IssuedTokenServiceCredential.TrustedStoreLocation">
      <summary>获取或设置受信任的存储区位置。</summary>
      <returns>受信任的存储区位置。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.IWSTrust13AsyncContract">
      <summary>定义 WS-Trust 1.3 协议的异步服务合约接口。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13Cancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义WS-Trust 1.3 协议的异步取消方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13CancelResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义WS-Trust 1.3 协议的异步RSTR/取消方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13Issue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义WS-Trust 1.3 协议的异步问题方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13IssueResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义WS-Trust 1.3 协议的异步RSTR/问题方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13Renew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义WS-Trust 1.3 协议的取消续订方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13RenewResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义WS-Trust 1.3 协议的异步 RSTR/续订方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13Validate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义WS-Trust 1.3 协议的异步验证方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13ValidateResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义WS-Trust 1.3 协议的异步RSTR/验证方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.EndTrust13Cancel(System.IAsyncResult)">
      <summary>完成异步取消方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13Cancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.EndTrust13CancelResponse(System.IAsyncResult)">
      <summary>完成异步 RSTR/取消方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13CancelResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.EndTrust13Issue(System.IAsyncResult)">
      <summary>完成异步发布方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13Issue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.EndTrust13IssueResponse(System.IAsyncResult)">
      <summary>完成异步 RSTR/发布方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13IssueResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.EndTrust13Renew(System.IAsyncResult)">
      <summary>完成异步续订方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13Renew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.EndTrust13RenewResponse(System.IAsyncResult)">
      <summary>完成异步 RSTR/续订方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13RenewResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.EndTrust13Validate(System.IAsyncResult)">
      <summary>完成异步验证方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13Validate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13AsyncContract.EndTrust13ValidateResponse(System.IAsyncResult)">
      <summary>完成异步 RSTR/验证方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrust13AsyncContract.BeginTrust13ValidateResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.IWSTrust13SyncContract">
      <summary>定义 WS-Trust 1.3 协议的服务合约。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13SyncContract.ProcessTrust13Cancel(System.ServiceModel.Channels.Message)">
      <summary>定义 WS-Trust 1.3 协议的 RST/取消方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13SyncContract.ProcessTrust13CancelResponse(System.ServiceModel.Channels.Message)">
      <summary>定义 WS-Trust 1.3 协议的 RSTR/取消方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13SyncContract.ProcessTrust13Issue(System.ServiceModel.Channels.Message)">
      <summary>定义 WS-Trust 1.3 协议的RST/问题方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13SyncContract.ProcessTrust13IssueResponse(System.ServiceModel.Channels.Message)">
      <summary>定义 WS-Trust 1.3 协议的 RST/发布方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13SyncContract.ProcessTrust13Renew(System.ServiceModel.Channels.Message)">
      <summary>定义 WS-Trust 1.3 协议的RST/更新方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13SyncContract.ProcessTrust13RenewResponse(System.ServiceModel.Channels.Message)">
      <summary>定义 WS-Trust 1.3 协议的 RST/续订方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13SyncContract.ProcessTrust13Validate(System.ServiceModel.Channels.Message)">
      <summary>定义WS-Trust 1.3 协议的异步验证方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrust13SyncContract.ProcessTrust13ValidateResponse(System.ServiceModel.Channels.Message)">
      <summary>定义 WS-Trust 1.3 协议的 RSTR/验证方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.IWSTrustChannelContract">
      <summary>由 <see cref="T:System.IdentityModel.Protocols.WSTrust.IWSTrustContract" />公开面向消息操作协定定义方法包装的服务合约。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.BeginCancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>异步发送终结点的 WS 信任取消消息。</summary>
      <returns>表示异步发送（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="callback">可选的 <see cref="T:System.AsyncCallback" /> 委托，在完成发送时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步发送请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.BeginIssue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>异步发送终结点的 WS 信任更新消息。</summary>
      <returns>表示异步发送（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="callback">可选的 <see cref="T:System.AsyncCallback" /> 委托，在完成发送时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步发送请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.BeginRenew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>异步发送终结点的 WS 信任更新消息。</summary>
      <returns>表示异步发送（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="callback">可选的 <see cref="T:System.AsyncCallback" /> 委托，在完成发送时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步发送请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.BeginValidate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>异步发送终结点的 WS 信任验证消息。</summary>
      <returns>表示异步发送（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="callback">可选的 <see cref="T:System.AsyncCallback" /> 委托，在完成发送时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步发送请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.Cancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>发送 WS-Trust 取消消息到终点。</summary>
      <returns>表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.EndCancel(System.IAsyncResult,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>完成异步操作发送由 <see cref="M:System.ServiceModel.Security.IWSTrustChannelContract.BeginCancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 的调用启动的操作。</summary>
      <param name="result">对未完成的异步发送请求的引用。</param>
      <param name="response">表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.EndIssue(System.IAsyncResult,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>完成调用 <see cref="M:System.ServiceModel.Security.IWSTrustChannelContract.BeginIssue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 发起的异步发送操作。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示 STS 颁发的令牌。</returns>
      <param name="result">对未完成的异步发送请求的引用。</param>
      <param name="response">表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.EndRenew(System.IAsyncResult,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>完成调用 <see cref="M:System.ServiceModel.Security.IWSTrustChannelContract.BeginRenew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 发起的异步发送操作。</summary>
      <param name="result">对未完成的异步发送请求的引用。</param>
      <param name="response">表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.EndValidate(System.IAsyncResult,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>完成调用 <see cref="M:System.ServiceModel.Security.IWSTrustChannelContract.BeginValidate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 发起的异步发送操作。</summary>
      <param name="result">对未完成的异步发送请求的引用。</param>
      <param name="response">表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.Issue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>将 WS-Trust 问题消息发送给终端 STS。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示 STS 颁发的令牌。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.Issue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>将 WS-Trust 问题消息发送给终端 STS。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示 STS 颁发的令牌。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="response">表示来自 STS 的响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.Renew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>发送 WS 续订消息到终点。</summary>
      <returns>表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustChannelContract.Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>发送 WS-Trust 验证消息到终点。</summary>
      <returns>表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="request">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.IWSTrustContract">
      <summary>定义发送 ws-discovery 信任信息到 STS 的服务协议。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.BeginCancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>WS-Trust 取消绑定的异步开始方法。</summary>
      <returns>表示异步发送（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">可选的 <see cref="T:System.AsyncCallback" /> 委托，在完成发送时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步发送请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.BeginIssue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>WS-Trust 发布绑定的异步开始方法。</summary>
      <returns>表示异步发送（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">可选的 <see cref="T:System.AsyncCallback" /> 委托，在完成发送时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步发送请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.BeginRenew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>WS-Trust 续订绑定的异步开始方法。</summary>
      <returns>表示异步发送（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">可选的 <see cref="T:System.AsyncCallback" /> 委托，在完成发送时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步发送请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.BeginValidate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>WS-Trust 验证绑定的异步开始方法。</summary>
      <returns>表示异步发送（可能仍处于挂起状态）的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">可选的 <see cref="T:System.AsyncCallback" /> 委托，在完成发送时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步发送请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.Cancel(System.ServiceModel.Channels.Message)">
      <summary>WS-Trust “取消”绑定的方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.EndCancel(System.IAsyncResult)">
      <summary>WS-Trust 取消绑定的异步结束方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="asyncResult">对未完成的异步发送请求的引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.EndIssue(System.IAsyncResult)">
      <summary>WS-Trust 发布绑定的异步结束方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="asyncResult">对未完成的异步发送请求的引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.EndRenew(System.IAsyncResult)">
      <summary>WS-Trust 续订绑定的异步结束方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="asyncResult">对未完成的异步发送请求的引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.EndValidate(System.IAsyncResult)">
      <summary>WS-Trust 验证绑定的异步结束方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="asyncResult">对未完成的异步发送请求的引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.Issue(System.ServiceModel.Channels.Message)">
      <summary>WS-Trust “发布”绑定的方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.Renew(System.ServiceModel.Channels.Message)">
      <summary>WS-Trust “更新”绑定的方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustContract.Validate(System.ServiceModel.Channels.Message)">
      <summary>WS-Trust “验证”绑定的方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract">
      <summary>定义 WS-Trust 2005 年二月的异步服务合约接口协议。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005Cancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义2005 年2月WS-Trust 协议的异步取消方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义2005 年2月 WS-Trust 协议的异步 RSTR/取消方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005Issue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义2005年2月 WS-Trust 协议的异步问题方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义2005年2月 WS-Trust 协议的异步问题方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005Renew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义2005年2月 WS-Trust 协议的异步续订方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义2005年2月 WS-Trust 1.3 协议的异步RSTR/续订方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005Validate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义2005年2月 WS-Trust 协议的异步验证方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>定义2005年2月 WS-Trust 协议的异步RSTR/验证方法。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="request">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.EndTrustFeb2005Cancel(System.IAsyncResult)">
      <summary>完成异步取消方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005Cancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.EndTrustFeb2005CancelResponse(System.IAsyncResult)">
      <summary>完成异步 RSTR/取消方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.EndTrustFeb2005Issue(System.IAsyncResult)">
      <summary>完成异步发布方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005Issue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.EndTrustFeb2005IssueResponse(System.IAsyncResult)">
      <summary>完成异步 RSTR/发布方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.EndTrustFeb2005Renew(System.IAsyncResult)">
      <summary>完成异步续订方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005Renew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.EndTrustFeb2005RenewResponse(System.IAsyncResult)">
      <summary>完成异步 RSTR/续订方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.EndTrustFeb2005Validate(System.IAsyncResult)">
      <summary>完成异步验证方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005Validate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.EndTrustFeb2005ValidateResponse(System.IAsyncResult)">
      <summary>完成异步 RSTR/验证方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="ar">由对 <see cref="M:System.ServiceModel.Security.IWSTrustFeb2005AsyncContract.BeginTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.IWSTrustFeb2005SyncContract">
      <summary>定义2005年2月 WS-Trust 协议的服务合约。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005SyncContract.ProcessTrustFeb2005Cancel(System.ServiceModel.Channels.Message)">
      <summary>定义2005年2月 WS-Trust 协议的取消方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005SyncContract.ProcessTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message)">
      <summary>定义2005年2月 WS-Trust 协议的RSTR/取消方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005SyncContract.ProcessTrustFeb2005Issue(System.ServiceModel.Channels.Message)">
      <summary>定义2005年2月 WS-Trust 协议的问题方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005SyncContract.ProcessTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message)">
      <summary>定义2005年2月 WS-Trust 协议的RSTR/问题方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005SyncContract.ProcessTrustFeb2005Renew(System.ServiceModel.Channels.Message)">
      <summary>定义2005年2月 WS-Trust 协议的更新方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005SyncContract.ProcessTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message)">
      <summary>定义2005年2月 WS-Trust 协议的RSTR/更新方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005SyncContract.ProcessTrustFeb2005Validate(System.ServiceModel.Channels.Message)">
      <summary>定义2005年2月 WS-Trust 协议的RSTR/验证方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.IWSTrustFeb2005SyncContract.ProcessTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message)">
      <summary>定义WS-Trust 2005 协议的RSTR/验证方法。</summary>
      <returns>表示包含 RSTR 的响应消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">表示包含 RST 的请求消息的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.MessagePartSpecification">
      <summary>指定在消息中包含哪些部分。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.#ctor">
      <summary>初始化空的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean)">
      <summary>初始化新的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> 并指定是否包含消息正文。</summary>
      <param name="isBodyIncluded">初始化规范中是否包含消息正文。</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean,System.Xml.XmlQualifiedName[])">
      <summary>使用消息头数组初始化新的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。</summary>
      <param name="isBodyIncluded">初始化规范中是否包含消息正文。</param>
      <param name="headerTypes">要使用的标头类型数组。</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>使用消息头数组初始化新的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。</summary>
      <param name="headerTypes">要使用的标头类型数组。</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.Clear">
      <summary>清除该规范中的标头列表。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> 为只读。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.MessagePartSpecification.HeaderTypes">
      <summary>获取该规范的标头类型。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，保存该消息规范的标头类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded">
      <summary>获取和设置一个值，该值指示该规范中是否包含消息正文。</summary>
      <returns>如果消息正文包含在该规范中，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> 为只读。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.MessagePartSpecification.IsReadOnly">
      <summary>获取一个值，该值指示规范是否为只读。</summary>
      <returns>如果该规范是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly">
      <summary>将规范设置为只读。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.MessagePartSpecification.NoParts">
      <summary>获取此类的空实例。</summary>
      <returns>此类的一个空实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.MessagePartSpecification.Union(System.ServiceModel.Security.MessagePartSpecification)">
      <summary>合并两个消息部分的规范。</summary>
      <param name="specification">要合并的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。</param>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> 为只读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="specification" /> 为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Security.MessageProtectionOrder">
      <summary>指定保护消息的运算顺序。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.MessageProtectionOrder.EncryptBeforeSign">
      <summary>指定先加密 SOAP 消息，再为其生成数字签名。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncrypt">
      <summary>指定先为 SOAP 消息生成数字签名，再加密 SOAP 消息的所有部分，但不加密数字签名。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncryptAndEncryptSignature">
      <summary>指定先为 SOAP 消息生成数字签名，再加密 SOAP 消息的所有部分，并且加密数字签名。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.MessageSecurityException">
      <summary>表示当应用到消息的安全出现错误时发生的异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> 类的空实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的指定实例初始化 <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含序列化新 <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> 实例关联的序列化流的源。</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String)">
      <summary>使用错误字符串初始化 <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> 类的新实例。</summary>
      <param name="message">错误消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String,System.Exception)">
      <summary>使用错误字符串和对导致此异常的内部异常的引用来初始化 <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> 类的新实例。</summary>
      <param name="message">错误消息。</param>
      <param name="innerException">内部异常引用。</param>
    </member>
    <member name="T:System.ServiceModel.Security.NonceCache">
      <summary>表示 Nonce 缓存的抽象基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.NonceCache.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.ServiceModel.Security.NonceCache" /> 类。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.NonceCache.CacheSize">
      <summary>获取或设置指定为缓存可包含的 nonce 数量的最大缓存大小。</summary>
      <returns>作为该缓存能够容纳的 Nonces 的数目的指定缓存的最大大小。。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">尝试设置一个小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.NonceCache.CachingTimeSpan">
      <summary>获取或设置将从缓存中删除 nonce 的最大时间跨度。</summary>
      <returns>Nonce 从缓存中删除之后的最大时间跨度。 此值至少应将最大时钟值差添加到重播窗口大小两次。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">尝试设置一个小于 <see cref="F:System.TimeSpan.Zero" /> 的值。 - 或 - 尝试设置一个大于允许的最大值的值。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.NonceCache.CheckNonce(System.Byte[])">
      <summary>当在派生类中重写时，返回一个指示指定 nouce 是否已经在缓存中的值。</summary>
      <returns>如果指定的 Nonce 已在缓存列中，则为 true；否则为 false。</returns>
      <param name="nonce">要检查的 Nonce。</param>
    </member>
    <member name="M:System.ServiceModel.Security.NonceCache.TryAddNonce(System.Byte[])">
      <summary>在派生类中重写时，尝试向缓存添加指定 nouce。</summary>
      <returns>如果成功地向缓存添加了 nonce，则为 true；否则为 false。</returns>
      <param name="nonce">要添加到缓存中的 Nonce。</param>
    </member>
    <member name="T:System.ServiceModel.Security.PeerCredential">
      <summary>包含在验证对等网格内的某个对等节点的身份时使用的凭据。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.PeerCredential.Certificate">
      <summary>获取或设置对等方的 X509 证书。</summary>
      <returns>对等类的 X509 证书。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.PeerCredential.MeshPassword">
      <summary>获取或设置对等方用于向对等网格进行身份验证的密码。</summary>
      <returns>对等方用于向对等网格进行身份验证的密码。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.PeerCredential.MessageSenderAuthentication">
      <summary>获取或设置消息发送方身份验证验证程序。</summary>
      <returns>消息发送方身份验证验证程序。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.PeerCredential.PeerAuthentication">
      <summary>获取或设置对等身份验证对象。</summary>
      <returns>对等身份验证对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.PeerCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>用特定的搜索条件设置证书。</summary>
      <param name="storeLocation">证书存储区的位置。</param>
      <param name="storeName">证书存储区名称。</param>
      <param name="findType">搜索条件。</param>
      <param name="findValue">搜索的值。</param>
    </member>
    <member name="M:System.ServiceModel.Security.PeerCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>设置证书。</summary>
      <param name="subjectName">证书的主题名称。</param>
      <param name="storeLocation">证书存储区的位置。</param>
      <param name="storeName">证书存储区名称。</param>
    </member>
    <member name="T:System.ServiceModel.Security.ScopedMessagePartSpecification">
      <summary>指定在消息中包含哪些部分。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.#ctor(System.ServiceModel.Security.ScopedMessagePartSpecification)">
      <summary>使用 <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" /> 类的一个实例初始化另一个新实例。</summary>
      <param name="other">另一个 <see cref="T:System.ServiceModel.Security.ScopedMessagePartSpecification" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.ScopedMessagePartSpecification.Actions">
      <summary>获取操作键的集合。</summary>
      <returns>一个 <see cref="T:System.String" /> 类型的 <see cref="T:System.Collections.Generic.ICollection`1" />，包含操作部分集合的键。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.AddParts(System.ServiceModel.Security.MessagePartSpecification)">
      <summary>将通道消息部分添加到此类实例的集合中。</summary>
      <param name="parts">包含要添加部分的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parts" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> 为只读。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.AddParts(System.ServiceModel.Security.MessagePartSpecification,System.String)">
      <summary>将消息部分添加到与指定操作相对应的 MessagePartSpecification 中。</summary>
      <param name="parts">包含要添加部分的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。</param>
      <param name="action">要匹配的操作键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parts" /> 或 <paramref name="action" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.Security.MessagePartSpecification" /> 为只读。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.ScopedMessagePartSpecification.ChannelParts">
      <summary>获取包含通道部分的消息部分规范。</summary>
      <returns>一个包含通道部分的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.ScopedMessagePartSpecification.IsReadOnly">
      <summary>指示规范是否为只读。</summary>
      <returns>如果规范为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.MakeReadOnly">
      <summary>将规范设置为只读。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.TryGetParts(System.String,System.Boolean,System.ServiceModel.Security.MessagePartSpecification@)">
      <summary>检查是否存在与给定操作键匹配的部分。</summary>
      <returns>如果找到了匹配部分，则为 true；否则为 false。</returns>
      <param name="action">操作键。</param>
      <param name="excludeChannelScope">如果为 true，将限制当前通道的部分。</param>
      <param name="parts">此方法返回时，将包含一个包含已找到部分的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ScopedMessagePartSpecification.TryGetParts(System.String,System.ServiceModel.Security.MessagePartSpecification@)">
      <summary>检查是否存在与给定操作键匹配的部分。</summary>
      <returns>如果找到了匹配部分，则为 true；否则为 false。</returns>
      <param name="action">操作键。</param>
      <param name="parts">此方法返回时，将包含一个包含已找到部分的 <see cref="T:System.ServiceModel.Security.MessagePartSpecification" />。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecureConversationServiceCredential">
      <summary>提供安全对话服务的凭据设置。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes">
      <summary>获取用于 Cookie 序列化的 <see cref="T:System.Type" /> 声明的集合。</summary>
      <returns>用于 Cookie 序列化的 <see cref="T:System.Type" /> 声明的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
      <summary>获取或设置用于对 Cookie 序列化进行编码和解码的自定义 <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> 对象，它是自定义的 <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecureConversationVersion">
      <summary>包含受支持的 WS-SecureConversation 版本集合。 这是一个抽象类。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.Default">
      <summary>获取默认版本。</summary>
      <returns>默认版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.Namespace">
      <summary>获取此 WS-SecureConversation 版本的命名空间。</summary>
      <returns>此 WS-SecureConversation 版本的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.Prefix">
      <summary>获取 WS-SecureConversation 版本的前缀。</summary>
      <returns>WS-SecureConversation 版本的前缀。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.WSSecureConversation13">
      <summary>获取 WS-SecureConversation 1.3 版。</summary>
      <returns>WS-SecureConversation 的 1.3 版。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecureConversationVersion.WSSecureConversationFeb2005">
      <summary>获取 WS-SecureConversation 的 2005 年 2 月版本。</summary>
      <returns>WS-SecureConversation 的 2005 年 2 月版。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAccessDeniedException">
      <summary>表示安全授权请求失败时引发的安全异常。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和上下文对象初始化 <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> 类的新实例。</summary>
      <param name="info">与反序列化进程相关的信息。</param>
      <param name="context">反序列化进程的上下文。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> 类的新实例。</summary>
      <param name="message">错误条件的说明。</param>
      <param name="innerException">要使用的内部异常。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAlgorithmSuite">
      <summary>指定算法的属性。 这是一个 abstract 类。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128">
      <summary>获取 Basic128 算法组。</summary>
      <returns>128 位 Basic <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Rsa15">
      <summary>获取一个算法组，该算法组使用 RSA15 作为密钥换行算法，并使用 128 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 RSA15 作为密钥换行算法，并使用 128 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256">
      <summary>获取一个算法组，该算法组使用 SHA256 作为签名摘要算法，并使用 128 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 SHA256 作为签名摘要算法，并使用 128 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256Rsa15">
      <summary>获取一个算法组，该算法组使用 RSA15 作为密钥换行算法，使用 SHA256 作为签名摘要算法，并使用 128 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 RSA15 作为密钥换行算法，使用 SHA256 作为签名摘要算法，并使用 128 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192">
      <summary>获取一个算法组，该算法组使用 192 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 192 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Rsa15">
      <summary>获取一个算法组，该算法组使用 RSA15 作为密钥换行算法，并使用 192 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 RSA15 作为密钥换行算法，并使用 192 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Sha256">
      <summary>获取一个算法组，该算法组使用 SHA256 作为签名摘要算法，并使用 192 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 SHA256 作为签名摘要算法，并使用 192 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Sha256Rsa15">
      <summary>获取一个算法组，该算法组使用 RSA15 作为密钥换行算法，使用 SHA256 作为签名摘要算法，并使用 192 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 RSA15 作为密钥换行算法，使用 SHA256 作为签名摘要算法，并使用 192 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256">
      <summary>获取一个算法组，该算法组使用 256 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 256 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Rsa15">
      <summary>获取一个算法组，该算法组使用 RSA15 作为密钥换行算法，并使用 256 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 RSA15 作为密钥换行算法，并使用 256 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Sha256">
      <summary>获取一个算法组，该算法组使用 SHA256 作为签名摘要算法，并使用 256 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 SHA256 作为签名摘要算法，并使用 256 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Sha256Rsa15">
      <summary>获取一个算法组，该算法组使用 RSA15 作为密钥换行算法，使用 SHA256 作为签名摘要算法，并使用 128 位 Basic 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 RSA15 作为密钥换行算法，使用 SHA256 作为签名摘要算法，并使用 128 位 Basic 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Default">
      <summary>获取默认算法组。</summary>
      <returns>默认 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 是 <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />，它指定 256 位高级加密标准 (AES) 作为对称加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>获取默认的非对称密钥换行算法作为字符串。</summary>
      <returns>默认的非对称密钥换行算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>获取默认的非对称签名算法作为字符串。</summary>
      <returns>默认的非对称签名算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>获取默认的规范化算法作为字符串。</summary>
      <returns>默认规范化算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>获取默认摘要算法作为字符串。</summary>
      <returns>默认摘要算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>获取默认加密算法作为字符串。</summary>
      <returns>默认加密算法为。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>获取默认加密密钥派生长度，作为 <see cref="T:System.Int32" /> 值。</summary>
      <returns>默认的加密密钥派生长度。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>获取默认签名密钥派生长度，作为 <see cref="T:System.Int32" /> 值。</summary>
      <returns>默认的签名密钥派生长度。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>获取默认对称密钥长度，作为 <see cref="T:System.Int32" /> 值。</summary>
      <returns>默认的对称密钥长度。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>获取默认对称密钥换行算法作为字符串。</summary>
      <returns>默认的对称密钥换行算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>获取默认的对称签名算法作为字符串。</summary>
      <returns>默认的对称签名算法。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>指示非对称算法是否支持特定的密钥长度。</summary>
      <returns>如果非对称算法支持密钥长度，则为 true；否则为 false。</returns>
      <param name="length">要检查的密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported(System.String)">
      <summary>指示是否支持非对称密钥换行算法。</summary>
      <returns>如果支持非对称密钥换行算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported(System.String)">
      <summary>指示是否支持非对称签名算法。</summary>
      <returns>如果支持非对称签名算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported(System.String)">
      <summary>指示是否支持规范化算法。</summary>
      <returns>如果支持规范化算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsDigestAlgorithmSupported(System.String)">
      <summary>指示是否支持摘要算法。</summary>
      <returns>如果支持摘要算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported(System.String)">
      <summary>指示是否支持加密算法。</summary>
      <returns>如果支持加密算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsEncryptionKeyDerivationAlgorithmSupported(System.String)">
      <summary>指示是否支持加密密钥派生算法。</summary>
      <returns>如果支持加密密钥派生算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSignatureKeyDerivationAlgorithmSupported(System.String)">
      <summary>指示是否支持签名密钥派生算法。</summary>
      <returns>如果支持签名密钥派生算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>在派生类中重写时，指示是否支持特定的对称密钥长度。</summary>
      <returns>如果支持对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">要检查的密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricKeyWrapAlgorithmSupported(System.String)">
      <summary>指示是否支持对称密钥换行算法。</summary>
      <returns>如果支持对称密钥换行算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported(System.String)">
      <summary>指示是否支持对称签名算法。</summary>
      <returns>如果支持对称签名算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法名称。</param>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDes">
      <summary>获取三重数据加密标准 (DES) 算法组。</summary>
      <returns>三重 DES <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesRsa15">
      <summary>获取一个算法组，该算法组使用 RSA15 作为密钥换行算法，并使用 192 位三重数据加密标准 (DES) 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 RSA15 作为密钥换行算法，并使用 192 位三重数据加密标准 (DES) 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesSha256">
      <summary>获取一个算法组，该算法组使用 SHA256 作为签名摘要算法，并使用 192 位三重数据加密标准 (DES) 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 SHA256 作为签名摘要算法，并使用 192 位三重数据加密标准 (DES) 作为消息加密算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesSha256Rsa15">
      <summary>获取一个算法组，该算法组使用 RSA15 作为密钥换行算法，使用 SHA256 作为签名摘要算法，并使用 192 位三重数据加密标准 (DES) 作为消息加密算法。</summary>
      <returns>一个算法组，该算法组使用 RSA15 作为密钥换行算法，使用 SHA256 作为签名摘要算法，并使用 192 位三重数据加密标准 (DES) 作为消息加密算法。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityCredentialsManager">
      <summary>指定 abstract 类，实现时表示安全凭据管理器。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityCredentialsManager.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SecurityCredentialsManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityCredentialsManager.CreateSecurityTokenManager">
      <summary>当在派生的类中重写时，创建一个新的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" />。</summary>
      <returns>新创建的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityKeyEntropyMode">
      <summary>描述用于密钥生成的平均信息量来源。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityKeyEntropyMode.ClientEntropy">
      <summary>该客户端提供用于已颁发令牌的密钥。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityKeyEntropyMode.CombinedEntropy">
      <summary>客户端和服务器都提供使用 P-SHA1 函数组合的平均信息量，以派生已颁发令牌的密钥。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityKeyEntropyMode.ServerEntropy">
      <summary>该服务器提供已颁发令牌的密钥。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityMessageProperty">
      <summary>包含与安全相关的属性且附加到消息上。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityMessageProperty.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityMessageProperty.CreateCopy">
      <summary>克隆此类的当前实例。</summary>
      <returns>从此类的当前实例中克隆的 <see cref="T:System.ServiceModel.Channels.IMessageProperty" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityMessageProperty.Dispose">
      <summary>释放此类的当前实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.ExternalAuthorizationPolicies">
      <summary>获取或设置外部授权策略的集合。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 类型的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityMessageProperty.GetOrCreate(System.ServiceModel.Channels.Message)">
      <summary>从指定消息中获取或创建此类的实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" /> 的一个实例。</returns>
      <param name="message">
        <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.HasIncomingSupportingTokens">
      <summary>指示传入消息是否至少包含一个支持安全令牌。</summary>
      <returns>如果 <see cref="P:System.ServiceModel.Security.SecurityMessageProperty.IncomingSupportingTokens" /> 至少包含一项，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.IncomingSupportingTokens">
      <summary>获取或设置传入支持令牌的集合。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.SupportingTokenSpecification" /> 类型的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.InitiatorToken">
      <summary>为此消息获取或设置 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 发起方令牌。</summary>
      <returns>此消息的 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 发起方令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.OutgoingSupportingTokens">
      <summary>获取传出 <see cref="T:System.ServiceModel.Security.SupportingTokenSpecification" /> 对象的集合。</summary>
      <returns>传出支持令牌的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.ProtectionToken">
      <summary>为此消息获取或设置 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 保护令牌。</summary>
      <returns>此消息的 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 保护令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.RecipientToken">
      <summary>为此消息获取或设置 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 接收方令牌。</summary>
      <returns>此消息的 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 接收方令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.SenderIdPrefix">
      <summary>获取或设置此消息的发送方 ID 前缀。</summary>
      <returns>此消息的发送方 ID 前缀。</returns>
      <exception cref="T:System.ArgumentNullException">属性值为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">属性值的长度为 0。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">属性值的长度为 0。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">属性值的长度为 0。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.ServiceSecurityContext">
      <summary>获取或设置此消息的 <see cref="T:System.ServiceModel.ServiceSecurityContext" />。</summary>
      <returns>此消息的 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityMessageProperty.TransportToken">
      <summary>获取或设置此消息的 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 传输令牌。</summary>
      <returns>此消息的 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 传输令牌。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityNegotiationException">
      <summary>指示协商消息的安全上下文时发生错误。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityNegotiationException.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SecurityNegotiationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityNegotiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.ServiceModel.Security.SecurityNegotiationException" /> 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">指定流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityNegotiationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ServiceModel.Security.SecurityNegotiationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityNegotiationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的序列化信息和内部异常初始化 <see cref="T:System.ServiceModel.Security.SecurityNegotiationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致引发当前异常的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityPolicyVersion">
      <summary>包含受支持的 WS-SecurityPolicy 版本集合。 这是一个抽象类。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityPolicyVersion.Namespace">
      <summary>获取此 WS-SecurityPolicy 版本的命名空间。</summary>
      <returns>此 WS-SecurityPolicy 版本的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityPolicyVersion.Prefix">
      <summary>获取前缀。</summary>
      <returns>前缀。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityPolicyVersion.WSSecurityPolicy11">
      <summary>获取 WS-SecurityPolicy 1.1 版。</summary>
      <returns>WS-SecurityPolicy 的 1.1 版。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityPolicyVersion.WSSecurityPolicy12">
      <summary>获取 WS-SecurityPolicy 1.2 版。</summary>
      <returns>WS-SecurityPolicy 的 1.2 版。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityStateEncoder">
      <summary>一个抽象类，可以实现此类以便对安全状态进行编码。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityStateEncoder.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityStateEncoder.DecodeSecurityState(System.Byte[])">
      <summary>解码安全状态。</summary>
      <returns>一个表示安全状态的字节数组。</returns>
      <param name="data">安全数据。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityStateEncoder.EncodeSecurityState(System.Byte[])">
      <summary>编码安全状态。</summary>
      <returns>一个通过编码安全状态生成的字节数组。</returns>
      <param name="data">安全状态数据。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityTokenAttachmentMode">
      <summary>一种枚举，列出了附加安全令牌的方法。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityTokenAttachmentMode.Endorsing">
      <summary>该令牌用于签发消息签名。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityTokenAttachmentMode.Signed">
      <summary>该令牌包含在消息签名中。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityTokenAttachmentMode.SignedEncrypted">
      <summary>该令牌包含在消息签名中且已加密。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.SecurityTokenAttachmentMode.SignedEndorsing">
      <summary>该令牌包含在消息签名中且用于签发消息签名。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityTokenSpecification">
      <summary>表示安全令牌及其授权策略。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityTokenSpecification.#ctor(System.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>使用指定的标记和标记策略初始化 <see cref="T:System.ServiceModel.Security.SecurityTokenSpecification" /> 类的新实例。</summary>
      <param name="token">安全令牌。</param>
      <param name="tokenPolicies">安全令牌策略的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenPolicies" /> 为 null。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityTokenSpecification.SecurityToken">
      <summary>获取安全令牌。</summary>
      <returns>安全令牌。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityTokenSpecification.SecurityTokenPolicies">
      <summary>获取安全令牌策略的集合。</summary>
      <returns>安全令牌策略的集合。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityVersion">
      <summary>包含受支持的 WS-Security 版本集合。 这是一个抽象类。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityVersion.WSSecurity10">
      <summary>获取 WS-Security 1.0 版。</summary>
      <returns>WS-Security 的 1.0 版。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityVersion.WSSecurity11">
      <summary>获取 WS-Security 1.1 版。</summary>
      <returns>WS-Security 的 1.1 版。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager">
      <summary>表示 <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" /> 实现，可基于在服务上配置的 <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> 提供安全令牌序列化程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.#ctor(System.ServiceModel.Description.ServiceCredentials)">
      <summary>基于传入的 <see cref="T:System.ServiceModel.Description.ServiceCredentials" /> 初始化 <see cref="T:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager" /> 类的新实例。</summary>
      <param name="parent">服务凭据。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecureConversationTokenAuthenticator(System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement,System.Boolean,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <summary>基于传入的属性要求创建安全对话令牌身份验证器。</summary>
      <returns>安全令牌身份验证器。</returns>
      <param name="recipientRequirement">表示特定于侦听器的安全属性要求。</param>
      <param name="preserveBootstrapTokens">如果应保留启动令牌，则为 true；否则为 false。</param>
      <param name="sctResolver">一个安全令牌解析程序对象，该对象可以在您具有密钥标识符或密钥标识符子句时检索安全令牌或密钥。</param>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <summary>基于 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 创建安全令牌身份验证器。</summary>
      <returns>安全令牌身份验证器。</returns>
      <param name="tokenRequirement">安全令牌要求。</param>
      <param name="outOfBandTokenResolver">此方法返回时，包含 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenRequirement" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">无法为传入的<paramref name=" tokenRequirement" /> 创建安全令牌身份验证器。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>基于 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 创建安全令牌提供程序。</summary>
      <returns>安全令牌提供程序。</returns>
      <param name="requirement">安全令牌要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requirement" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">无法为传入的 <paramref name="requirement" /> 创建安全令牌提供程序。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)">
      <summary>基于传入的安全令牌版本创建安全令牌序列化程序。</summary>
      <returns>安全令牌序列化程序。</returns>
      <param name="version">安全令牌的版本。</param>
      <exception cref="T:System.NotSupportedException">无法为传入的 <paramref name="version" /> 创建安全令牌序列化程序。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.GetIdentityOfSelf(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>基于安全令牌要求获取 <see cref="T:System.ServiceModel.EndpointIdentity" />。</summary>
      <returns>对应于 <paramref name="tokenRequirement" /> 的终结点标识。 如果无法从 <paramref name="tokenRequirement" /> 创建标识，则返回 null。</returns>
      <param name="tokenRequirement">安全令牌要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenRequirement" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.IsIssuedSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>确定安全令牌要求是否适用于已颁发的令牌。</summary>
      <returns>如果安全令牌要求适用于已颁发的令牌，则为 true；否则为 false。</returns>
      <param name="requirement">安全令牌要求。</param>
    </member>
    <member name="P:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.ServiceCredentials">
      <summary>获取用于构造此类实例的服务凭据。</summary>
      <returns>服务凭据。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SimpleSecurityTokenProvider">
      <summary>表示安全标记提供程序，其可生成安全表其，将其作为联合绑定的已发布标记。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SimpleSecurityTokenProvider.#ctor(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>使用指定安全标记和标记绑定需求初始化 <see cref="T:System.ServiceModel.Security.SimpleSecurityTokenProvider" /> 类的新实例。</summary>
      <param name="token">表示要提供的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <param name="tokenRequirement">包含将使用指定标识来保护消息的绑定介绍的要求的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.SimpleSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>根据指定超时创建成安全标记。</summary>
      <param name="timeout">一个包含超时期限的 <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SspiSecurityTokenProvider">
      <summary>表示提供 SSPI 安全令牌的安全令牌提供程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SspiSecurityTokenProvider.#ctor(System.Net.NetworkCredential,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SspiSecurityTokenProvider" /> 类的新实例。</summary>
      <param name="credential">表示服务器标识的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="extractGroupsForWindowsAccounts">如果扩展用户以包含 Windows 组，则为 true，否则为 false。</param>
      <param name="allowUnauthenticatedCallers">允许未经过身份验证的调用方，则为 true，否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SspiSecurityTokenProvider.#ctor(System.Net.NetworkCredential,System.Boolean,System.Security.Principal.TokenImpersonationLevel)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SspiSecurityTokenProvider" /> 类的新实例。</summary>
      <param name="credential">表示客户端标识的 <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="allowNtlm">允许 NTLM 验证，则为 true；否则为 false。</param>
      <param name="impersonationLevel">授予服务器的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SspiSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>获取安全令牌。</summary>
      <returns>安全令牌。</returns>
      <param name="timeout">一个表示超时间隔的 <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SupportingTokenSpecification">
      <summary>表示支持安全令牌及其授权策略。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SupportingTokenSpecification.#ctor(System.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.ServiceModel.Security.SecurityTokenAttachmentMode)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SupportingTokenSpecification" /> 类的新实例。</summary>
      <param name="token">安全令牌。</param>
      <param name="tokenPolicies">安全令牌策略的集合。</param>
      <param name="attachmentMode">安全令牌附件模式。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="attachmentMode" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.SupportingTokenSpecification.#ctor(System.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.ServiceModel.Security.SecurityTokenAttachmentMode,System.ServiceModel.Security.Tokens.SecurityTokenParameters)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.SupportingTokenSpecification" /> 类的新实例。</summary>
      <param name="token">安全令牌。</param>
      <param name="tokenPolicies">安全令牌策略的集合。</param>
      <param name="attachmentMode">安全令牌附件模式。</param>
      <param name="tokenParameters">控制安全令牌的绑定元素的参数。</param>
    </member>
    <member name="P:System.ServiceModel.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode">
      <summary>获取安全令牌附件模式。</summary>
      <returns>安全令牌附件模式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite">
      <summary>Triple-DES 安全算法组。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.#ctor">
      <summary>创建和初始化 <see cref="T:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite" /> 的实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm">
      <summary>获取默认的非对称密钥换行算法 RsaOaepKeyWrap。</summary>
      <returns>默认的非对称密钥换行算法 RsaOaepKeyWrap。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm">
      <summary>获取默认的非对称签名算法 RsaSha1Signature。</summary>
      <returns>默认的非对称签名算法 RsaSha1Signature。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm">
      <summary>获取默认的规范化算法 ExclusiveC14n。</summary>
      <returns>默认的规范化算法 ExclusiveC14n。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultDigestAlgorithm">
      <summary>获取默认摘要算法 Sha1Digest。</summary>
      <returns>默认的摘要算法 Sha1Digest。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultEncryptionAlgorithm">
      <summary>获取默认的摘要算法 TripleDesEncryption。</summary>
      <returns>默认的摘要算法 TripleDesEncryption。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength">
      <summary>获取默认的加密密钥派生长度 192。</summary>
      <returns>默认的加密密钥派生长度 192。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength">
      <summary>获取默认的签名密钥派生长度 192。</summary>
      <returns>默认的签名密钥派生长度 192。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultSymmetricKeyLength">
      <summary>获取默认的对称密钥长度 192。</summary>
      <returns>默认的对称密钥长度 192。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm">
      <summary>获取默认的对称密钥换行算法 TripleDesKeyWrap。</summary>
      <returns>默认对称密钥换行算法，TripleDesKeyWrap。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm">
      <summary>获取默认的对称签名算法 HmacSha1Signature。</summary>
      <returns>默认的对称签名算法 HmacSha1Signature。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)">
      <summary>如果支持指定的非对称密钥长度，则返回 true；否则返回 false。 有效长度范围为 1024 到 4096。</summary>
      <returns>如果支持指定的非对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">非对称密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)">
      <summary>如果支持指定的对称密钥长度，则返回 true；否则返回 false。 有效长度范围为 192 到 256。</summary>
      <returns>如果支持指定的对称密钥长度，则为 true；否则为 false。</returns>
      <param name="length">对称密钥长度。</param>
    </member>
    <member name="M:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite.ToString">
      <summary>返回 <see cref="T:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.TripleDesSecurityAlgorithmSuite" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.TrustVersion">
      <summary>包含受支持的 WS-Trust 版本集合。 这是一个抽象类。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.Default">
      <summary>获取默认版本。</summary>
      <returns>默认版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.Namespace">
      <summary>获取此 Trust 版本的命名空间。</summary>
      <returns>此 Trust 版本的命名空间。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.Prefix">
      <summary>获取前缀。</summary>
      <returns>前缀。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.WSTrust13">
      <summary>获取 WS-Trust 1.3 版。</summary>
      <returns>WS-Trust 的 1.3 版。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.TrustVersion.WSTrustFeb2005">
      <summary>获取 WS-Trust 的 2005 年 2 月版本。</summary>
      <returns>WS-Trust 的 2005 年 2 月版。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordClientCredential">
      <summary>表示基于用户名和密码的客户端凭据。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.Password">
      <summary>获取或设置密码。</summary>
      <returns>密码。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.UserName">
      <summary>获取或设置用户名。</summary>
      <returns>用户名。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordServiceCredential">
      <summary>表示此类用于配置服务如何对使用用户名/密码身份验证的用户进行身份验证，并可用于配置登录令牌的缓存。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CachedLogonTokenLifetime">
      <summary>获取或设置缓存令牌的最大时间长度。</summary>
      <returns>一个 <see cref="T:System.Timespan" />，表示缓存令牌的最大时间长度。默认为 15 分钟。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CacheLogonTokens">
      <summary>获取或设置一个值，该值指示是否缓存登录令牌。</summary>
      <returns>如果缓存登录令牌，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CustomUserNamePasswordValidator">
      <summary>获取或设置自定义用户名和密码验证程序。</summary>
      <returns>自定义用户名和密码验证程序。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.IncludeWindowsGroups">
      <summary>获取或设置一个值，该值指示 Windows 组是否包含在安全上下文中。</summary>
      <returns>如果 Windows 组包含在安全上下文中，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.MaxCachedLogonTokens">
      <summary>获取或设置要缓存的登录令牌的最大数目。</summary>
      <returns>要缓存的登录令牌的最大数目。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider">
      <summary>获取或设置成员资格提供程序。</summary>
      <returns>此服务的 <see cref="T:System.Web.Security.MembershipProvider" />。 默认为 <see cref="T:System.Web.Security.SqlMembershipProvider" />。</returns>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时设置此属性。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode">
      <summary>获取或设置验证用户名和密码的方法。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.UserNamePasswordValidationMode" /> 中的枚举的一个值。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordValidationMode">
      <summary>列出以用户名/密码模式来进行验证的方法。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.UserNamePasswordValidationMode.Custom">
      <summary>基于已配置的自定义 <see cref="T:System.IdentityModel.Selectors.UsernamePasswordValidator" /> 的自定义身份验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.UserNamePasswordValidationMode.MembershipProvider">
      <summary>提供基于已配置的 <see cref="T:System.Web.Security.MembershipProvider" /> 的密码验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.UserNamePasswordValidationMode.Windows">
      <summary>用户名映射到 Windows 用户。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.WindowsClientCredential">
      <summary>使您可以指定与用于表示客户端的 Windows 凭据相关的属性。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel">
      <summary>获取或设置允许的模拟级别。</summary>
      <returns>
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm">
      <summary>获取或设置一个值，该值指示是否应该允许 NTLM 身份验证作为 Windows SSPI 协商身份验证。</summary>
      <returns>如果允许 NTLM 身份验证作为 Windows SSPI 协商身份验证，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsClientCredential.ClientCredential">
      <summary>获取或设置 Windows 客户端凭据。</summary>
      <returns>客户端的 <see cref="T:System.Net.NetworkCredential" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.WindowsServiceCredential">
      <summary>提供用于描述进行 Windows 身份验证时使用的服务凭据的属性。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsServiceCredential.AllowAnonymousLogons">
      <summary>获取或设置一个值，该值指示是否允许匿名用户访问（仅适用于消息级安全性）。</summary>
      <returns>如果允许匿名用户进行访问，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsServiceCredential.IncludeWindowsGroups">
      <summary>获取或设置一个值，该值指示客户端所属的 Windows 组是否包含在安全上下文中。</summary>
      <returns>如果 Windows 组包含在安全上下文中，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.WSSecurityTokenSerializer">
      <summary>一个类，它可用于序列化和反序列化在 WS-Security、WS-Trust 以及 WS-SecureConversation 安全规范中定义的安全令牌、安全密钥标识符和安全密钥标识符子句。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
      <param name="emitBspRequiredAttributes">用于 <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> 属性的值。 如果此包括在序列化期间适用的 ValueType 和 EncodingType 属性，则为 true。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
      <param name="securityVersion">安全版本。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
      <param name="securityVersion">安全版本。</param>
      <param name="emitBspRequiredAttributes">用于 <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> 属性的值。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
      <param name="securityVersion">安全版本。</param>
      <param name="emitBspRequiredAttributes">用于 <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> 属性的值。</param>
      <param name="samlSerializer">用于序列化和反序列化 SAML 令牌的扩展点。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer,System.ServiceModel.Security.SecurityStateEncoder,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
      <param name="securityVersion">安全版本。</param>
      <param name="emitBspRequiredAttributes">用于 <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> 属性的值。</param>
      <param name="samlSerializer">用于序列化和反序列化 SAML 令牌的扩展点。</param>
      <param name="securityStateEncoder">用于编码和解码安全状态的编码器，安全状态可作为 Cookie 附加为安全上下文令牌。</param>
      <param name="knownTypes">类型的集合。 必须声明这些已知类型，才能将自定义声明作为安全上下文令牌 Cookie 的一部分包含在内。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityVersion" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer,System.ServiceModel.Security.SecurityStateEncoder,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
      <param name="securityVersion">安全版本。</param>
      <param name="emitBspRequiredAttributes">用于 <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> 属性的值。</param>
      <param name="samlSerializer">用于序列化和反序列化 SAML 令牌的扩展点。</param>
      <param name="securityStateEncoder">用于编码和解码安全状态的编码器，安全状态可作为 Cookie 附加为安全上下文令牌。</param>
      <param name="knownTypes">已知类型的集合。 必须声明这些已知类型，才能将自定义声明作为安全上下文令牌 Cookie 的一部分包含在内。</param>
      <param name="maximumKeyDerivationOffset">最大密钥派生偏移量。 在反序列化派生的密钥令牌时，此设置可限制服务器所执行的处理量。</param>
      <param name="maximumKeyDerivationLabelLength">最大密钥派生标签长度。 在反序列化派生的密钥令牌时，此设置可限制服务器所执行的处理量。</param>
      <param name="maximumKeyDerivationNonceLength">最大密钥派生 Nonce 长度。 在反序列化派生的密钥令牌时，此设置可限制服务器所执行的处理量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityVersion" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumKeyDerivationOffset" /> 小于 0，<paramref name="maximumKeyDerivationLabelLength" /> 小于 0，或 <paramref name="maximumKeyDerivationNonceLength" /> 小于或等于 0。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.ServiceModel.Security.TrustVersion,System.ServiceModel.Security.SecureConversationVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer,System.ServiceModel.Security.SecurityStateEncoder,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
      <param name="securityVersion">安全版本。</param>
      <param name="trustVersion">支持的 WS-Trust 规范版本集。</param>
      <param name="secureConversationVersion">支持的 WS-SecureConversation 规范版本集。</param>
      <param name="emitBspRequiredAttributes">用于 <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> 属性的值。</param>
      <param name="samlSerializer">用于序列化和反序列化 SAML 令牌的扩展点。</param>
      <param name="securityStateEncoder">用于编码和解码安全状态的编码器，安全状态可作为 Cookie 附加为安全上下文令牌。</param>
      <param name="knownTypes">已知类型的集合。 必须声明这些已知类型，才能将自定义声明作为安全上下文令牌 Cookie 的一部分包含在内。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.#ctor(System.ServiceModel.Security.SecurityVersion,System.ServiceModel.Security.TrustVersion,System.ServiceModel.Security.SecureConversationVersion,System.Boolean,System.IdentityModel.Tokens.SamlSerializer,System.ServiceModel.Security.SecurityStateEncoder,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 类的新实例。</summary>
      <param name="securityVersion">安全版本。</param>
      <param name="trustVersion">支持的 WS-Trust 规范版本集。</param>
      <param name="secureConversationVersion">支持的 WS-SecureConversation 规范版本集。</param>
      <param name="emitBspRequiredAttributes">用于 <see cref="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes" /> 属性的值。</param>
      <param name="samlSerializer">用于序列化和反序列化 SAML 令牌的扩展点。</param>
      <param name="securityStateEncoder">用于编码和解码安全状态的编码器，安全状态可作为 Cookie 附加为安全上下文令牌。</param>
      <param name="knownTypes">已知类型的集合。 必须声明这些已知类型，才能将自定义声明作为安全上下文令牌 Cookie 的一部分包含在内。</param>
      <param name="maximumKeyDerivationOffset">最大密钥派生偏移量。 在反序列化派生的密钥令牌时，此设置可限制服务器所执行的处理量。</param>
      <param name="maximumKeyDerivationLabelLength">最大密钥派生标签长度。 在反序列化派生的密钥令牌时，此设置可限制服务器所执行的处理量。</param>
      <param name="maximumKeyDerivationNonceLength">最大密钥派生 Nonce 长度。 在反序列化派生的密钥令牌时，此设置可限制服务器所执行的处理量。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>获取一个值，该值指示是否可以使用指定的读取器读取密钥标识符子句核心。</summary>
      <returns>如果密钥标识符子句核心可以使用指定的读取器读取，则为 true；否则为 false。</returns>
      <param name="reader">XmlReader。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>获取一个值，该值指示是否可以使用指定的读取器读取密钥标识符核心。</summary>
      <returns>如果密钥标识符核心可以使用指定的读取器读取，则为 true；否则为 false。</returns>
      <param name="reader">XmlReader。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanReadTokenCore(System.Xml.XmlReader)">
      <summary>获取一个值，该值指示是否可以使用指定的读取器读取令牌核心。</summary>
      <returns>如果令牌核心可以使用指定的读取器读取，则为 true；否则为 false。</returns>
      <param name="reader">XmlReader。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanWriteKeyIdentifierClauseCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>获取一个值，该值指示是否可以写入带有指定密钥标识符子句的密钥标识符子句核心。</summary>
      <returns>如果可以写入带有指定密钥标识符子句的密钥标识符子句核心，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">安全密钥标识符子句。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanWriteKeyIdentifierCore(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>获取一个值，该值指示是否可以写入带有指定密钥标识符子句的密钥标识符核心。</summary>
      <returns>如果可以写入带有指定密钥标识符子句的密钥标识符核心，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">安全密钥标识符。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CanWriteTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示是否可以写入带有指定安全令牌的令牌核心。</summary>
      <returns>如果可以写入带有指定安全令牌的令牌核心，则为 true；否则为 false。</returns>
      <param name="token">安全令牌。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.CreateKeyIdentifierClauseFromTokenXml(System.Xml.XmlElement,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>从以 XML 表示的令牌创建密钥标识符子句。</summary>
      <returns>创建的安全密钥标识符。</returns>
      <param name="element">安全令牌。</param>
      <param name="tokenReferenceStyle">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />。</param>
      <exception cref="T:System.Xml.XmlException">反序列化密钥标识符子句时发生错误，或者无法读取密钥标识符子句。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.DefaultInstance">
      <summary>获取此类的默认实例。</summary>
      <returns>此类的默认实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.EmitBspRequiredAttributes">
      <summary>获取一个值，该值指示是否发出 BSP 所需的特性。</summary>
      <returns>如果要发出 BSP 所需的属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.GetTokenTypeUri(System.Type)">
      <summary>获取指定类型的安全令牌的 URI。</summary>
      <returns>指定类型的安全令牌的 URI。</returns>
      <param name="tokenType">安全令牌的类型。</param>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.MaximumKeyDerivationLabelLength">
      <summary>获取最大密钥派生标签长度。</summary>
      <returns>最大密钥派生标签长度。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.MaximumKeyDerivationNonceLength">
      <summary>获取最大密钥派生 Nonce 长度。</summary>
      <returns>最大密钥派生 Nonce 长度。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.MaximumKeyDerivationOffset">
      <summary>获取最大密钥派生偏移量。</summary>
      <returns>最大密钥派生偏移量。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 读取密钥标识符子句核心。</summary>
      <returns>读取的安全密钥标识符子句。</returns>
      <param name="reader">指定的 XmlReader。</param>
      <exception cref="T:System.Xml.XmlException">反序列化密钥标识符子句时发生错误，或者无法读取密钥标识符子句。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.ReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 读取密钥标识符核心。</summary>
      <returns>读取的安全密钥标识符。</returns>
      <param name="reader">指定的 XmlReader。</param>
      <exception cref="T:System.Xml.XmlException">反序列化密钥标识符时发生错误，或者无法读取密钥标识符。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.ReadTokenCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 读取令牌核心。</summary>
      <returns>读取的安全令牌。</returns>
      <param name="reader">指定的 XmlReader。</param>
      <param name="tokenResolver">安全令牌解析器。</param>
      <exception cref="T:System.Xml.XmlException">反序列化令牌时发生错误，或者无法读取令牌。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.WSSecurityTokenSerializer.SecurityVersion">
      <summary>获取安全版本。</summary>
      <returns>安全版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.TryCreateKeyIdentifierClauseFromTokenXml(System.Xml.XmlElement,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle,System.IdentityModel.Tokens.SecurityKeyIdentifierClause@)">
      <summary>尝试从以 XML 表示的令牌创建密钥标识符子句。</summary>
      <returns>如果创建了密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="element">安全令牌。</param>
      <param name="tokenReferenceStyle">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />。</param>
      <param name="securityKeyIdentifierClause">包含安全密钥标识符令牌的元素的子单元。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 写入带有指定密钥标识符子句的密钥标识符子句核心。</summary>
      <param name="writer">指定的 XmlWriter。</param>
      <param name="keyIdentifierClause">安全密钥标识符子句。</param>
      <exception cref="T:System.Xml.XmlException">序列化密钥标识符子句时发生错误。</exception>
      <exception cref="T:System.InvalidOperationException">密钥标识符子句未成功写入。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.WriteKeyIdentifierCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 写入带有指定密钥标识符子句的密钥标识符核心。</summary>
      <param name="writer">指定的 XmlWriter。</param>
      <param name="keyIdentifier">安全密钥标识符子句。</param>
      <exception cref="T:System.Xml.XmlException">序列化密钥标识符时发生错误。</exception>
      <exception cref="T:System.InvalidOperationException">密钥标识符未成功写入。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSSecurityTokenSerializer.WriteTokenCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 写入带有指定安全令牌的令牌核心。</summary>
      <param name="writer">指定的 XmlWriter。</param>
      <param name="token">安全令牌。</param>
      <exception cref="T:System.Xml.XmlException">序列化安全令牌时发生错误。</exception>
      <exception cref="T:System.InvalidOperationException">令牌未成功写入。</exception>
    </member>
    <member name="T:System.ServiceModel.Security.WSTrustChannel">
      <summary>表示通道，其用于发送 WS-Trust 消息至安全标记服务 (STS)。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.#ctor(System.ServiceModel.Security.WSTrustChannelFactory,System.ServiceModel.Security.IWSTrustChannelContract,System.ServiceModel.Security.TrustVersion,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext,System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSTrustChannel" /> 类的新实例。</summary>
      <param name="factory">生成通道的 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" />。</param>
      <param name="inner">通道将用来发送和接收 <see cref="T:System.ServiceModel.Channels.Message" /> 对象的 <see cref="T:System.ServiceModel.Security.IWSTrustChannelContract" />。</param>
      <param name="trustVersion">通道用于序列化 <see cref="T:System.ServiceModel.Channels.Message" /> 对象将使用 ws-trust 的版本。</param>
      <param name="context">通道将用来序列化 WS-Trust 消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />。</param>
      <param name="requestSerializer">通道将用来序列化 WS-Trust 请求消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" />。</param>
      <param name="responseSerializer">通道将用来序列化渠道为序列化 WS-Trust 响应消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Abort">
      <summary>使通信对象立即从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginCancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象，开始异步操作发送 WS 信任取消消息到终结点。</summary>
      <returns>引用异步取消操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="callback">接收异步取消操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，包含与异步取消操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginCancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象，开始异步操作发送 WS 信任取消消息到终结点。</summary>
      <returns>引用异步取消操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">包含对 STS 请求的说明的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步取消操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="asyncState">一个由应用程序指定的对象，包含与异步取消操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginClose(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定超时时间内关闭通信对象。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成关闭操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginIssue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象，开始异步操作发送 WS 信任发布消息到终结点。</summary>
      <returns>引用异步问题操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="callback">接收异步问题操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="asyncState">一个由应用程序指定的对象，它包含与异步发布操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginIssue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象，开始异步操作发送 WS 信任发布消息到终结点。</summary>
      <returns>引用异步问题操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">包含对 STS 请求的说明的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步问题操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="asyncState">一个由应用程序指定的对象，它包含与异步发布操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以在指定时间间隔内打开通信对象。</summary>
      <returns>引用异步打开操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成打开操作的时间。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginRenew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象，开始异步操作发送 WS 信任更新消息到终结点。</summary>
      <returns>引用异步续订操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="callback">接收异步续预定操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步续订操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginRenew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象，开始异步操作发送 WS 信任更新消息到终结点。</summary>
      <returns>引用异步续订操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">包含对 STS 请求的说明的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">接收异步续预定操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="asyncState">一个由应用程序指定的对象，它包含与异步续订操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginValidate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象，开始异步操作发送 WS 信任验证消息到终结点。</summary>
      <returns>引用异步验证操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="callback">可接收异步验证操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步验证操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.BeginValidate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象，开始异步操作发送 WS 信任验证消息到终结点。</summary>
      <returns>引用异步验证操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">包含对 STS 请求的说明的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">可接收异步验证操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="asyncState">一个由应用程序指定的对象，它包含与异步验证操作相关联的状态信息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Cancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象，发送 WS-Trust 取消消息到终点。</summary>
      <returns>表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Cancel(System.ServiceModel.Channels.Message)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象，发送 WS-Trust 取消消息到终点。</summary>
      <returns>从 STS 返回的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">包含对 STS 请求的说明的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannel.Channel">
      <summary>获取或设置用于发送和接收消息的通道对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannel" /> 对象用来发送和接收 <see cref="T:System.ServiceModel.Channels.Message" />对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannel.ChannelFactory">
      <summary>获取或设置创建通道的工厂。</summary>
      <returns>生成通道对象的 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Close">
      <summary>使通信对象从其当前状态转换到关闭状态。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Close(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从当前状态转换到关闭状态。</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成打开操作的时间。</param>
    </member>
    <member name="E:System.ServiceModel.Security.WSTrustChannel.Closed">
      <summary>当通信对象完成从正在关闭状态转换到已关闭状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.Security.WSTrustChannel.Closing">
      <summary>当通信对象首次进入正在关闭状态时发生。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannel.Contract">
      <summary>获取或设置通道用于发送和接收消息的通道协定。</summary>
      <returns>定义通道协议的 <see cref="T:System.ServiceModel.Security.IWSTrustChannelContract" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.CreateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.String)">
      <summary>创建一个 <see cref="T:System.ServiceModel.Channels.Message" /> 对象，该对象表示一条 WS-Trust RST 消息。</summary>
      <returns>表示 WS-Trust 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="request">序列化为消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="requestType">WS-Trust 请求序列化的类型。 此参数必须是一个在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestTypes" /> 中的字符串常数。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndCancel(System.IAsyncResult)">
      <summary>完成异步操作以发送由 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginCancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法启动的 WS 信任取消消息。</summary>
      <returns>从 STS 返回的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="asyncResult">未完成的异步发送请求的 <see cref="T:System.IAsyncResult" /> 引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndCancel(System.IAsyncResult,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>完成异步操作，以发送一个由 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginCancel(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法发起的 WS-Trust 取消消息。</summary>
      <param name="result">未完成的异步发送请求的 <see cref="T:System.IAsyncResult" /> 引用。</param>
      <param name="rstr">表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndClose(System.IAsyncResult)">
      <summary>完成一个异步操作以关闭通信对象。</summary>
      <param name="result">由对 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginClose(System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndIssue(System.IAsyncResult)">
      <summary>完成异步操作以发送由 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginIssue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法启动的 WS 信任发布消息。</summary>
      <returns>从 STS 返回的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="asyncResult">未完成的异步发送请求的 <see cref="T:System.IAsyncResult" /> 引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndIssue(System.IAsyncResult,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>完成异步操作，以发送一个由 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginIssue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法发起的 WS-Trust 发布消息。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示 STS 颁发的令牌。</returns>
      <param name="result">对未完成的异步发送请求的引用。</param>
      <param name="rstr">表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndOpen(System.IAsyncResult)">
      <summary>完成一个异步操作以打开通信对象。</summary>
      <param name="result">由对 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginOpen(System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndRenew(System.IAsyncResult)">
      <summary>完成异步操作以发送由 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginRenew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法启动的 WS 信任更新消息。</summary>
      <returns>从 STS 返回的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="asyncResult">未完成的异步发送请求的 <see cref="T:System.IAsyncResult" /> 引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndRenew(System.IAsyncResult,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>完成异步操作，以发送一个由 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginRenew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法发起的 WS-Trust 续订消息。</summary>
      <param name="result">对未完成的异步发送请求的引用。</param>
      <param name="rstr">表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndValidate(System.IAsyncResult)">
      <summary>完成异步操作以发送由 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginValidate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> 方法启动的 WS 信任验证消息。</summary>
      <returns>从 STS 返回的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="asyncResult">未完成的异步发送请求的 <see cref="T:System.IAsyncResult" /> 引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.EndValidate(System.IAsyncResult,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>完成异步操作，以发送一个由 <see cref="M:System.ServiceModel.Security.WSTrustChannel.BeginValidate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法发起的 WS-Trust 验证消息。</summary>
      <param name="result">对未完成的异步发送请求的引用。</param>
      <param name="rstr">表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="E:System.ServiceModel.Security.WSTrustChannel.Faulted">
      <summary>当通信对象首次进入出错状态时发生。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.GetProperty``1">
      <summary>从通道堆栈的适当层返回所请求的类型化对象（如果存在）。</summary>
      <returns>如果存在，则为所请求类型化对象，如果不存在，则为 null 。</returns>
      <typeparam name="T">方法正在查询的类型化对象。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.GetRequestAction(System.String,System.ServiceModel.Security.TrustVersion)">
      <summary>获取对应于指定的请求类型和 WS-Trust 版本的 WS-Addressing SOAP 操作。</summary>
      <returns>字符串包含表示 WS-Addressing 操作的 URI。</returns>
      <param name="requestType">WS-Trust 请求的类型。 此参数必须是一个在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestTypes" /> 类中的字符串常数。</param>
      <param name="trustVersion">请求的 <see cref="P:System.ServiceModel.Security.WSTrustChannel.TrustVersion" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.GetTokenFromResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>从 RSTR 获取安全令牌。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示分析的安全令牌。</returns>
      <param name="request">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示用于请求安全标记的请求。</param>
      <param name="response">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />，表示这个响应包含安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="response" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Issue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象发送 WS-Trust 问题消息到终点 STS。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示 STS 颁发的令牌。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Issue(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 和 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象发送 WS-Trust 问题消息到终点。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示 STS 颁发的令牌。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <param name="rstr">表示来自 STS 的响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Issue(System.ServiceModel.Channels.Message)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象发送 WS-Trust 问题消息到终点 STS。</summary>
      <returns>从 STS 返回的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">包含对 STS 请求的说明的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Open">
      <summary>使通信对象从已创建状态转换到已打开状态。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Open(System.TimeSpan)">
      <summary>使通信对象在指定时间间隔内从已创建状态转换到已打开状态。</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，指定在超时前必须完成打开操作的时间。</param>
    </member>
    <member name="E:System.ServiceModel.Security.WSTrustChannel.Opened">
      <summary>当通信对象完成从正在打开状态转换到已打开状态时发生。</summary>
    </member>
    <member name="E:System.ServiceModel.Security.WSTrustChannel.Opening">
      <summary>当通信对象首次进入正在打开状态时发生。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.ReadResponse(System.ServiceModel.Channels.Message)">
      <summary>可从 ws-discovery 信任终结点接受到的 <see cref="T:System.ServiceModel.Channels.Message" /><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 描述。</summary>
      <returns>从响应中所反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="response">从 WS-Trust 终点接收的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Renew(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象，发送 WS-Trust 续订消息到终点。</summary>
      <returns>表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Renew(System.ServiceModel.Channels.Message)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象，发送 WS-Trust 续订消息到终点。</summary>
      <returns>从 STS 返回的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">包含对 STS 请求的说明的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannel.State">
      <summary>获取面向通信的对象的当前状态。</summary>
      <returns>一个表示通道当前状态的 <see cref="T:System.ServiceModel.CommunicationState" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannel.TrustVersion">
      <summary>获取或设置此通道同于序列化 <see cref="T:System.ServiceModel.Channels.Message" /> 对象的 WS-Trust 的版本。</summary>
      <returns>通道所使用的 <see cref="T:System.ServiceModel.Security.TrustVersion" /> (URI)。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象发送 WS-Trust 验证消息到终点。</summary>
      <returns>表示 STS 响应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="rst">表示对 STS 的请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannel.Validate(System.ServiceModel.Channels.Message)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象发送 WS-Trust 验证消息到终点。</summary>
      <returns>从 STS 返回的 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">包含对 STS 请求的说明的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannel.WSTrustRequestSerializer">
      <summary>通道用来序列化 WS-Trust 请求消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" />。</summary>
      <returns>通道所使用的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannel.WSTrustResponseSerializer">
      <summary>获取或设置通道用于序列化 WS-Trus 响应消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" />。</summary>
      <returns>通道所使用的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannel.WSTrustSerializationContext">
      <summary>获取或设置通道用于序列化 WS-Trust 消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />。</summary>
      <returns>通道所使用的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.WSTrustChannelFactory">
      <summary>用于与 WS-Trust 终点通信 的工厂生成通道（<see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustChannel" /> 对象）。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>用指定的绑定初始化 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" /> 类的新实例。</summary>
      <param name="binding">为由工厂生成的通道指定的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的绑定和终结点地址初始化 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" /> 类的新实例。</summary>
      <param name="binding">为由工厂生成的通道指定的 <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.#ctor(System.ServiceModel.Channels.Binding,System.String)">
      <summary>使用指定的绑定和远程地址初始化 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" /> 类的新实例。</summary>
      <param name="binding">为工厂生成的通道指定的 <see cref="T:System.ServiceModel.Channels.Binding" /></param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>用指定的终结点初始化 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" /> 类的新实例。</summary>
      <param name="endpoint">由工厂生成的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />for 通道。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.#ctor(System.String)">
      <summary>使用指定的终结点配置名称初始化 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" /> 类的新实例。</summary>
      <param name="endpointConfigurationName">用于终结点的配置名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSTrustChannelFactory" /> 类的新实例，该类与指定的终结点配置名称和结点地址相关联。</summary>
      <param name="endpointConfigurationName">用于终结点的配置名称。</param>
      <param name="remoteAddress">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>创建一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustChannel" /> 对象，该通道用于通过指定的传输地址将消息发送到特定终结点地址的服务。</summary>
      <returns>一个表示通道的 <see cref="T:System.IdentityModel.Protocols.WSTrust.IWSTrustChannelContract" /> 对象。</returns>
      <param name="address">提供服务位置的 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">包含通道向其发送消息的传输地址的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.CreateSerializationContext">
      <summary>创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 对象，此工厂创建的通道使用该对象。</summary>
      <returns>使用信任客户的属性初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustChannelFactory.CreateTrustChannel(System.ServiceModel.Security.IWSTrustChannelContract,System.ServiceModel.Security.TrustVersion,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext,System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer)">
      <summary>用反映此工厂配置的参数创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustChannel" /> 对象。</summary>
      <returns>一个表示新通道的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustChannel" /> 对象。</returns>
      <param name="innerChannel">由基类创建的通道能够发送和接收消息。</param>
      <param name="trustVersion">应使用 ws-discovery 的版本。</param>
      <param name="context">应用来序列化 WS-Trust 消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 对象。</param>
      <param name="requestSerializer">应用来序列化 WS-Trust 请求消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" /> 对象。</param>
      <param name="responseSerializer">应该被用来序列化 WS-Trust 响应消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" /> 对象。</param>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannelFactory.SecurityTokenHandlerCollectionManager">
      <summary>获取或设置包含一组 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 对象的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" />，该对象由此工厂创建的通道用于序列化和验证 WS-Trust 消息中发现的令牌。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannelFactory.SecurityTokenResolver">
      <summary>获取或设置用于解析 WS-Trust 消息的大多数元素中发现的安全令牌引用的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannelFactory.TrustVersion">
      <summary>获取或设置此工厂创建的通道用于序列化消息的 WS-Trust 的版本。</summary>
      <returns>此工厂创建的通道用于序列化消息的 WS-Trust 的版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannelFactory.UseKeyTokenResolver">
      <summary>获取或设置用于解析 RST 消息的 wst:UseKey 元素中发现的安全令牌引用以及 RST 消息中发现的 wst:RenewTarget 元素的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannelFactory.WSTrustRequestSerializer">
      <summary>获取或设置用于序列化 wst:RequestSecurityToken 消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" />。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustChannelFactory.WSTrustResponseSerializer">
      <summary>获取或设置用于序列化 wst:RequestSecurityTokensResponse 消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" />。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" /> 对象。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.WSTrustRequestBodyWriter">
      <summary>表示消息正文编写器，其可将 RST 写入传出消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustRequestBodyWriter.#ctor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSTrustRequestBodyWriter" /> 类的新实例。</summary>
      <param name="requestSecurityToken">要序列化到传出消息中的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象 (RST)。</param>
      <param name="serializer">用来序列化 RST 的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" /> 对象。</param>
      <param name="serializationContext">一个 <see cref="System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含序列化的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestSecurityToken" /> 为 null。 - 或 - <paramref name="serializer" /> 为 null。 - 或 - <paramref name="serializationContext" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustRequestBodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>对基类方法的重写。 序列化 RST 到输出流。</summary>
      <param name="writer">RST应被写入 <see cref="T:System.Xml.XmlDictionaryWriter" />对象。</param>
    </member>
    <member name="T:System.ServiceModel.Security.WSTrustRequestProcessingErrorEventArgs">
      <summary>提供 WS-Trust Request Fault 的数据。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustRequestProcessingErrorEventArgs.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSTrustRequestProcessingErrorEventArgs" /> 类的新实例。</summary>
      <param name="requestType">WS-Trust 请求类型失败。 这是一个 URI。</param>
      <param name="exception">在请求过程中发生的异常。</param>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustRequestProcessingErrorEventArgs.Exception">
      <summary>获取所引发的异常。</summary>
      <returns>引发的异常。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustRequestProcessingErrorEventArgs.RequestType">
      <summary>获取失败的 WS-Trust 请求类型。</summary>
      <returns>表示 WS-Trust 请求类型的 URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.WSTrustResponseBodyWriter">
      <summary>表示消息正文编写器，其可将 RSTR 写入传出消息。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustResponseBodyWriter.#ctor(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSTrustResponseBodyWriter" /> 类的实例。</summary>
      <param name="requestSecurityTokenResponse">要序列化到传出消息中的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象 (RSTR)。</param>
      <param name="serializer">用来序列化 RSTR 的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" /> 对象。</param>
      <param name="context">一个 <see cref="System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含序列化的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestSecurityTokenResponse" /> 为 null。 - 或 - <paramref name="serializer" /> 为 null。 - 或 - <paramref name="serializationContext" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustResponseBodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>对基类方法的重写。 序列化 RSTR 到输出流。</summary>
      <param name="writer">RSTR 应被写入 <see cref="T:System.Xml.XmlDictionaryWriter" />对象。</param>
    </member>
    <member name="T:System.ServiceModel.Security.WSTrustServiceContract">
      <summary>ws-Trust 服务合约实现的定义。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.WSTrustServiceContract" /> 类的新实例。</summary>
      <param name="securityTokenServiceConfiguration">初始化此实例的配置对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>配置所有绑定元素以支持协定行为。</summary>
      <param name="contractDescription">要修改的协定说明。</param>
      <param name="endpoint">要修改的终结点。</param>
      <param name="bindingParameters">绑定元素支持该行为所需的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>要实现扩展的协定说明。</summary>
      <param name="contractDescription">要实现扩展的协定说明。</param>
      <param name="endpoint">终结点。</param>
      <param name="clientRuntime">客户端运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <summary>在协定范围内执行客户端的修改或扩展。</summary>
      <param name="contractDescription">要修改的协定说明。</param>
      <param name="endpoint">公开协定的终结点。</param>
      <param name="dispatchRuntime">控制服务执行的调度运行时。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginDispatchRequest(System.ServiceModel.Security.DispatchContext,System.AsyncCallback,System.Object)">
      <summary>为 <see cref="M:System.ServiceModel.Security.WSTrustServiceContract.DispatchRequest(System.ServiceModel.Security.DispatchContext)" /> 开始异步调用。</summary>
      <returns>一个表示异步操作的 <see cref="T:System.IAsyncResult" />。 以输入形式用于 <see cref="M:System.ServiceModel.Security.WSTrustServiceContract.EndDispatchRequest(System.IAsyncResult)" /> 方法。</returns>
      <param name="dispatchContext">定义请求参数以处理并公开确定答案信息和操作的属性。</param>
      <param name="asyncCallback">可选的异步回调，在完成调度时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步调度请求与其他请求区别开来。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginProcessCore(System.ServiceModel.Channels.Message,System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>为 STS 处理异步调用。</summary>
      <returns>应传递给结束方法以完成异步调用的 IAsyncResult。</returns>
      <param name="requestMessage">传入请求消息。</param>
      <param name="requestSerializer">WS-Trust 请求序列化程序。</param>
      <param name="responseSerializer">WS-Trust 响应序列化程序。</param>
      <param name="requestAction">SOAP 操作的请求。</param>
      <param name="responseAction">响应 SOAP 操作。</param>
      <param name="trustNamespace">传入请求的 WS-Trust 版本的命名空间 URI。</param>
      <param name="callback">异步操作调用时被调用的回调。</param>
      <param name="state">包含此异步调用的状态信息的对象。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数为 Null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrust13Cancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 1.3 取消消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrust13CancelResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust 1.3 RSTR/取消消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrust13Issue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust 1.3 问题消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrust13IssueResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust 1.3 RSTR/问题消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrust13Renew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust 1.3 更新消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrust13RenewResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust 1.3 RSTR/更新消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrust13Validate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust 1.3 验证消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrust13ValidateResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust 1.3 RSTR/验证消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrustFeb2005Cancel(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 2005 取消消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 2005 RSTR/取消消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrustFeb2005Issue(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 2005 问题消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 2005 RSTR/问题消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrustFeb2005Renew(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 2005 更新消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 2005 RSTR/更新消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrustFeb2005Validate(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 2005 验证消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.BeginTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>处理 WS-Trust Feb 2005 RSTR/验证消息异步调用。</summary>
      <returns>应传递给相应结束方法以完成异步调用的 <see cref="T:System.IAsyncResult" /> 。</returns>
      <param name="request">传入请求消息。</param>
      <param name="callback">异步操作结束时要调用的回调。</param>
      <param name="state">包含异步状态的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.CreateDispatchContext(System.ServiceModel.Channels.Message,System.String,System.String,System.String,System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>创建供 <see cref="M:System.ServiceModel.Security.WSTrustServiceContract.DispatchRequest(System.ServiceModel.Security.DispatchContext)" /> 方法使用的 <see cref="T:System.ServiceModel.Security.DispatchContext" /> 对象。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.DispatchContext" /> 对象。</returns>
      <param name="requestMessage">传入请求消息。</param>
      <param name="requestAction">请求的 SOAP 操作。</param>
      <param name="responseAction">响应的默认 SOAP 操作。</param>
      <param name="trustNamespace">传入请求的 WS-Trust 版本的命名空间 URI。</param>
      <param name="requestSerializer">用来反序列化传入的 RST 消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" />。</param>
      <param name="responseSerializer">用来反序列化传入的 RSTR 消息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" />。</param>
      <param name="serializationContext">在反序列化传入消息时使用的 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.CreateSerializationContext">
      <summary>使用 WSTrustServiceClient 的本地解析器信息，创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 对象。</summary>
      <returns>使用当前解析器信息初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.DispatchRequest(System.ServiceModel.Security.DispatchContext)">
      <summary>处理 WS-Trust 消息，并可选确定相应相应消息以及相应消息的 WS-Addressing 操作。</summary>
      <param name="dispatchContext">定义请求参数以处理并公开确定答案信息和操作的属性。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndDispatchRequest(System.IAsyncResult)">
      <summary>为 <see cref="M:System.ServiceModel.Security.WSTrustServiceContract.DispatchRequest(System.ServiceModel.Security.DispatchContext)" /> 完成异步调用。</summary>
      <returns>导出确定响应消息和操作的属性的 <see cref="T:System.ServiceModel.Security.DispatchContext" />。</returns>
      <param name="ar">通过调用 <see cref="M:System.ServiceModel.Security.WSTrustServiceContract.BeginDispatchRequest(System.ServiceModel.Security.DispatchContext,System.AsyncCallback,System.Object)" /> 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndProcessCore(System.IAsyncResult,System.String,System.String,System.String)">
      <summary>为 STS 完成异步调用。</summary>
      <returns>一个包含序列化 RST 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由调用异步启动方法返回的 <see cref="T:System.IAsyncResult" />。</param>
      <param name="requestAction">SOAP “操作”的请求。</param>
      <param name="responseAction">响应 SOAP“操作”。</param>
      <param name="trustNamespace">当前 WS-Trust 版本的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrust13Cancel(System.IAsyncResult)">
      <summary>完成 WS-Trust 1.3 取消消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrust13CancelResponse(System.IAsyncResult)">
      <summary>完成 WS-Trust 1.3 RSTR/取消消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrust13Issue(System.IAsyncResult)">
      <summary>完成 WS-Trust 1.3 问题消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrust13IssueResponse(System.IAsyncResult)">
      <summary>完成 WS-Trust 1.3 RSTR/问题消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrust13Renew(System.IAsyncResult)">
      <summary>完成 WS-Trust 1.3 更新消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrust13RenewResponse(System.IAsyncResult)">
      <summary>完成 WS-Trust 1.3 RSTR/更新消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrust13Validate(System.IAsyncResult)">
      <summary>完成 WS-Trust 1.3 验证消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrust13ValidateResponse(System.IAsyncResult)">
      <summary>完成 WS-Trust 1.3 RSTR/验证消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrustFeb2005Cancel(System.IAsyncResult)">
      <summary>完成 WS-Trust Feb 2005 取消消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrustFeb2005CancelResponse(System.IAsyncResult)">
      <summary>完成 WS-Trust Feb 2005 RSTR/取消消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrustFeb2005Issue(System.IAsyncResult)">
      <summary>完成 WS-Trust Feb 2005 取消消息的异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrustFeb2005IssueResponse(System.IAsyncResult)">
      <summary>完成 WS-Trust Feb 2005 RSTR/问题消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrustFeb2005Renew(System.IAsyncResult)">
      <summary>完成 WS-Trust Feb 2005 更新消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrustFeb2005RenewResponse(System.IAsyncResult)">
      <summary>完成 WS-Trust Feb 2005 RSTR/更新消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrustFeb2005Validate(System.IAsyncResult)">
      <summary>完成 WS-Trust Feb 2005 验证消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.EndTrustFeb2005ValidateResponse(System.IAsyncResult)">
      <summary>完成 WS-Trust Feb 2005 RSTR/验证消息异步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="ar">由启动了异步调用的 Begin 方法返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>在派生类中实现时，将自定义的 Web 服务描述语言 (WSDL) 元素写入到为协定生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">提供从导出的 WSDL 元素到协定说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>为终结点将自定义 Web 服务描述语言 (WSDL) 元素添加到生成的 WSDL 中。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">提供从导出的 WSDL 元素到终结点说明的映射。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.FixMessageElement(System.Web.Services.Description.ServiceDescription,System.Web.Services.Description.PortType,System.ServiceModel.Description.WsdlEndpointConversionContext,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>在 WSDL 一代，此方法修复一个指定的操作消息元素，引用合适的 WS-Trust 版本的 RST 和 RSTR 元素。</summary>
      <param name="serviceDescription">有已导出的 WSDL 的当前状态的 <see cref="T:System.Web.Services.Description.ServiceDescription" />。</param>
      <param name="portType">服务描述语言消息固定的 PortType。</param>
      <param name="context">提供从导出的 WSDL 元素到终结点说明的映射。</param>
      <param name="operationName">在 PortType 内的操作名称。</param>
      <param name="inputMessageElement">输入消息元素的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="outputMessageElement">输出消息元素的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceDescription" /> 为 null。 - 或 - <paramref name="portType" /> 为 null。 - 或 - <paramref name="inputMessageType" /> 为 null。 - 或 - <paramref name="outputMessageType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="operationName" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.GetRstSecurityTokenResolver">
      <summary>返回用于在 WS-Trust 信息主体期间解决标记和密钥的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</summary>
      <returns>在 WS-Trust 消息体中当解析令牌和密钥时将使用的安全令牌解析器。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.GetSecurityHeaderTokenResolver(System.ServiceModel.Channels.RequestContext)">
      <summary>返回 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> ，其解决在当前 WCF 消息请求的安全标头中包含的以下安全标记：保护标记，认可或支持标记的签名认可。</summary>
      <returns>当反序列化 RST UseKey 元素或 RST RenewTarget 时用于解析任意 SecurityTokenIdentifiers的安全令牌解析器。</returns>
      <param name="requestContext">与请求关联的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestContext" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.HandleException(System.Exception,System.String,System.String,System.ServiceModel.EnvelopeVersion)">
      <summary>引发事件 <see cref="E:System.ServiceModel.Security.WSTrustServiceContract.RequestFailed" /> 并根据需要将指定的异常转换为 <see cref="T:System.ServiceModel.FaultException" />。 如果原始的异常是 <see cref="T:System.ServiceModel.FaultException" /> ，或者 PreserveOriginalException 标志被设置为 true，则不会执行到 <see cref="T:System.ServiceModel.FaultException" /> 的转换。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。 如果引发原始异常，则为 false。</returns>
      <param name="ex">原始异常。</param>
      <param name="trustNamespace">当前 WS-Trust 版本的命名空间。</param>
      <param name="action">WS-Trust 操作导致异常。</param>
      <param name="requestEnvelopeVersion">请求信封的 SOAP 版本。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ImportSchema(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext,System.String)">
      <summary>如果该关系图尚未出现在 WSDL 中，导入所有必需的关系图。</summary>
      <param name="exporter">可导出协定信息的 <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
      <param name="context">提供从导出的 WSDL 元素到终结点说明的映射。</param>
      <param name="ns">导入架构的当前 WS-Trust 命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exporter" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> 为 null 或空字符串。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="ns" /> 中指定的命名空间不是可识别的 WS-Trust 命名空间。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.IncludeNamespace(System.ServiceModel.Description.WsdlEndpointConversionContext,System.String,System.String)">
      <summary>如果尚未存在，则添加所需的 WS 信任命名空间到 WSDL。</summary>
      <param name="context">提供从导出的 WSDL 元素到终结点说明的映射。</param>
      <param name="prefix">要包括的命名空间前缀。</param>
      <param name="ns">要包含的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 为 null 或空字符串。 - 或 - <paramref name="ns" /> 为 null 或空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 为 null 或空字符串。 - 或 - <paramref name="ns" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessCore(System.ServiceModel.Channels.Message,System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer,System.String,System.String,System.String)">
      <summary>处理对 STS 的同步调用。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="requestMessage">传入请求消息。</param>
      <param name="requestSerializer">WS-Trust Request Serializer。</param>
      <param name="responseSerializer">WS-Trust 响应序列化程序。</param>
      <param name="requestAction">SOAP 操作的请求。</param>
      <param name="responseAction">响应 SOAP 操作。</param>
      <param name="trustNamespace">传入请求的 WS-Trust 版本的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrust13Cancel(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 1.3 取消消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrust13CancelResponse(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 1.3 RSTR/取消消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrust13Issue(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 1.3 问题消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrust13IssueResponse(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 1.3 RSTR/取消消息。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrust13Renew(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 1.3 更新消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrust13RenewResponse(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 1.3 RSTR/更新消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrust13Validate(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 1.3 验证消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrust13ValidateResponse(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 1.3 RSTR/验证消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrustFeb2005Cancel(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 2005 年 2 月取消消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrustFeb2005CancelResponse(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 2005 年 2 月 RSTR/取消消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrustFeb2005Issue(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 2005 年 2 月问题消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrustFeb2005IssueResponse(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 2005 年 2 月 RSTR/问题消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrustFeb2005Renew(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 2005 年 2 月更新消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrustFeb2005RenewResponse(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 2005 年 2 月 RSTR/更新消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrustFeb2005Validate(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 2005 年 2 月 验证消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ProcessTrustFeb2005ValidateResponse(System.ServiceModel.Channels.Message)">
      <summary>同步处理 WS-Trust 2005 年 2 月 RSTR/验证消息。</summary>
      <returns>一个包含序列化 RSTR 消息的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</returns>
      <param name="message">传入请求消息。</param>
    </member>
    <member name="E:System.ServiceModel.Security.WSTrustServiceContract.RequestFailed">
      <summary>当失败发生时处理从客户端的 WS-Trust 请求发生。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustServiceContract.SecurityTokenServiceConfiguration">
      <summary>获取服务配置。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />，表示服务的配置。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>在派生类中实现时，确定协定和终结点可以支持协定行为。</summary>
      <param name="contractDescription">要验证的协定。</param>
      <param name="endpoint">要验证的终结点。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceContract.ValidateDispatchContext(System.ServiceModel.Security.DispatchContext)">
      <summary>验证指定的 <see cref="T:System.ServiceModel.Security.DispatchContext" /> 对象。</summary>
      <param name="dispatchContext">要验证的 <see cref="T:System.ServiceModel.Security.DispatchContext" /> 对象。</param>
    </member>
    <member name="T:System.ServiceModel.Security.WSTrustServiceHost">
      <summary>提供 <see cref="T:System.ServiceModel.ServiceHost" /> 用于注册 <see cref="T:System.IdentityModel.SecurityTokenService" /> 根据在配置中注册的侦听器的数目，服务主机将有多个已注册终结点。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceHost.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration,System.Uri[])">
      <summary>使用服务的实例及其指定的基址初始化 <see cref="T:System.ServiceModel.Security.WSTrustServiceHost" /> 类的新实例。</summary>
      <param name="securityTokenServiceConfiguration">
        <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 包含用于初始化服务宿主的 STS 设置。</param>
      <param name="baseAddresses">一个包含服务主机的基址的 <see cref="T:System.Uri" /> 数组。</param>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceHost.#ctor(System.ServiceModel.Security.WSTrustServiceContract,System.Uri[])">
      <summary>使用服务协定及其指定的基址初始化 <see cref="T:System.ServiceModel.Security.WSTrustServiceHost" /> 类的新实例。</summary>
      <param name="serviceContract">
        <see cref="T:System.ServiceModel.Security.WSTrustServiceContract" /> 表示使用的服务协定。</param>
      <param name="baseAddresses">一个包含服务主机的基址的 <see cref="T:System.Uri" /> 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseAddresses" /> 为 null。 - 或 - <paramref name="serviceContract" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceHost.ApplyConfiguration">
      <summary>从配置文件加载服务说明信息，并将其应用于正在构造的运行库。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceHost.ConfigureMetadata">
      <summary>为服务主机配置元数据 (WSDL)。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceHost.InitializeRuntime">
      <summary>对基类方法的重写。 配置在服务主机上的 <see cref="T:System.ServiceModel.ServiceConfiguration" />，然后调用基本的实现。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustServiceHost.SecurityTokenServiceConfiguration">
      <summary>获取这个实例的安全标记服务 (STS) 配置。</summary>
      <returns>STS 配置。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WSTrustServiceHost.ServiceContract">
      <summary>获取与此实例关联的服务协定。</summary>
      <returns>此实例的服务协定。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.WSTrustServiceHost.UpdateServiceConfiguration">
      <summary>用 <see cref="P:System.ServiceModel.Security.WSTrustServiceHost.SecurityTokenServiceConfiguration" /> 属性重写服务主机的 <see cref="P:System.ServiceModel.ServiceHostBase.Credentials" /> 属性上的 <see cref="P:System.ServiceModel.Description.ServiceCredentials.IdentityConfiguration" />。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateInitiatorClientCredential">
      <summary>定义客户端用于标识自身的证书。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateInitiatorClientCredential.Certificate">
      <summary>获取或设置在向客户端反馈时用于表示服务的证书。</summary>
      <returns>向用户端反馈时用于表示服务的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</returns>
      <exception cref="T:System.InvalidOperationException">在凭据为只读时使用 set 方法。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateInitiatorClientCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>使您可以通过指定查询参数（如 <paramref name="storeLocation" />、<paramref name="storeName" />、<paramref name="findType" /> 和 <paramref name="findValue" />）指定用于表示客户端的证书。</summary>
      <param name="storeLocation">客户端用于获取客户端证书的证书存储区位置。</param>
      <param name="storeName">指定要打开的 X.509 证书存储区的名称。</param>
      <param name="findType">定义要执行的 X.509 搜索的类型。</param>
      <param name="findValue">要在 X.509 证书存储区中搜索的值。</param>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateInitiatorClientCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>允许您通过指定主题可分辨名称指定用于表示服务的证书。</summary>
      <param name="subjectName">主题可分辨名称。</param>
      <param name="storeLocation">服务用于获取服务证书的证书存储区位置。</param>
      <param name="storeName">指定要打开的 X.509 证书存储区的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential">
      <summary>表示服务所使用的设置，用于验证客户端所出示的证书。 它还包含在使用 MutualCertificateDuplex 消息安全身份验证模式时，用于为客户端加密响应或回调的服务证书。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication">
      <summary>获取用于验证在身份验证期间客户端所出示的证书的设置。</summary>
      <returns>在身份验证期间用于验证客户端所出示的证书的设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate">
      <summary>获取或设置要在 MutualCertificateDuplex 消息安全身份验证模式中使用的证书。</summary>
      <returns>如果使用 MutualCertificateDuplex 消息安全身份验证模式，则用于加密消息的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 将由不相关的双向传输事例中的服务发送给客户端。</returns>
      <exception cref="T:System.InvalidOperationException">尝试设置只读凭据。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>指定要用于加密客户端消息的证书。 此设置只能由使用 MutualCertificateDuplex 消息安全身份验证模式配置的绑定使用。</summary>
      <param name="storeLocation">服务用于获取证书的证书存储区位置。</param>
      <param name="storeName">要打开的 X.509 证书存储区的名称。</param>
      <param name="findType">要执行的 X.509 搜索的类型。</param>
      <param name="findValue">要在 X.509 证书存储区中搜索的值。</param>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>使您可以通过指定主题可分辨名称指定用于加密客户端消息的证书。 此设置只能由使用 MutualCertificateDuplex 消息安全身份验证模式配置的绑定使用。</summary>
      <param name="subjectName">该主题可分辨名称。</param>
      <param name="storeLocation">服务用于获取证书的证书存储区位置。</param>
      <param name="storeName">要打开的 X.509 证书存储区的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateRecipientClientCredential">
      <summary>表示客户端在验证使用 SSL 身份验证的服务所出示的证书时使用的设置。 它还包含在客户端上显式配置为对发送给使用消息安全的服务的消息进行加密的服务的所有证书。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication">
      <summary>获取用于验证使用 SSL 身份验证获得的服务证书的设置。</summary>
      <returns>用于验证使用 SSL 身份验证获得的服务证书的设置。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate">
      <summary>获取或设置用于服务的默认证书。</summary>
      <returns>用于服务的默认证书。</returns>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates">
      <summary>获取一个作用域证书，该证书用于表示与客户端通信的服务。</summary>
      <returns>一个作用域证书，用于表示与客户端通信的服务。</returns>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>指定用于服务的默认证书。 对于使用基于证书的消息安全的绑定，此证书用于加密发送给服务的消息，并期望服务用它来对客户端的应答进行签名。</summary>
      <param name="storeLocation">服务用于获取服务证书的证书存储区位置。</param>
      <param name="storeName">要打开的 X.509 证书存储区的名称。</param>
      <param name="findType">要执行的 X.509 搜索的类型。</param>
      <param name="findValue">要在 X.509 证书存储区中搜索的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="findValue" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>指定用于服务的默认证书。 对于使用基于证书的消息安全的绑定，此证书用于加密发送给服务的消息，并期望服务用它来对客户端的应答进行签名。</summary>
      <param name="subjectName">该主题可分辨名称。</param>
      <param name="storeLocation">服务用于获取服务证书的证书存储区位置。</param>
      <param name="storeName">要打开的 X.509 证书存储区的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)">
      <summary>通过证书存储区位置、证书存储区名称、X.509 搜索的类型以及要搜索的值设置一个证书，并将其储存到用于设置范围的 URL 的集合中。</summary>
      <param name="storeLocation">服务用于获取服务证书的证书存储区位置。</param>
      <param name="storeName">要打开的 X.509 证书存储区的名称。</param>
      <param name="findType">要执行的 X.509 搜索的类型。</param>
      <param name="findValue">要在 X.509 证书存储区中搜索的值。</param>
      <param name="targetService">设置范围的 URL。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="findValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="findValue" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)">
      <summary>通过主题名称、证书存储区位置和证书存储区名称设置一个证书，并将其储存到用于设置范围的 URL 的集合中。</summary>
      <param name="subjectName">完全限定的主题名称。</param>
      <param name="storeLocation">服务用于获取服务证书的证书存储区位置。</param>
      <param name="storeName">要打开的 X.509 证书存储区的名称。</param>
      <param name="targetService">设置范围的 URL。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication">
      <summary>获取或设置要使用的 SSL 证书验证程序。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.X509ServiceCertificateAuthentication" /> 实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateRecipientServiceCredential">
      <summary>定义服务用于标识自身的证书。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509CertificateRecipientServiceCredential.Certificate">
      <summary>获取或设置在向客户端反馈时用于表示服务的证书。</summary>
      <returns>向客户端反馈时用于表示服务的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</returns>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>通过指定查询参数（如 <paramref name="storeLocation" />、<paramref name="storeName" />、<paramref name="findType" /> 和 <paramref name="findValue" />）来指定用于表示服务的证书。</summary>
      <param name="storeLocation">客户端用于获取客户端证书的证书存储区位置。</param>
      <param name="storeName">指定要打开的 X.509 证书存储区的名称。</param>
      <param name="findType">定义要执行的 X.509 搜索的类型。</param>
      <param name="findValue">要在 X.509 证书存储区中搜索的值。</param>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientServiceCredential.SetCertificate(System.String)">
      <summary>通过指定主题可分辨名称指定用于表示服务的证书。</summary>
      <param name="subjectName">主题可分辨名称。</param>
    </member>
    <member name="M:System.ServiceModel.Security.X509CertificateRecipientServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>通过指定主题可分辨名称、证书存储区名称和存储区位置来指定用于表示服务的证书。</summary>
      <param name="subjectName">主题可分辨名称。</param>
      <param name="storeLocation">服务用于获取服务证书的证书存储区位置。</param>
      <param name="storeName">指定要打开的 X.509 证书存储区的名称。</param>
    </member>
    <member name="T:System.ServiceModel.Security.X509ClientCertificateAuthentication">
      <summary>指定身份验证属性以验证客户端证书。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.CertificateValidationMode">
      <summary>获取或设置证书验证模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" /> 值之一。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.CustomCertificateValidator">
      <summary>获取或设置自定义客户端证书验证程序。</summary>
      <returns>自定义客户端证书验证程序。</returns>
      <exception cref="T:System.InvalidOperationException">在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.IncludeWindowsGroups">
      <summary>获取或设置一个值，该值指示 Windows 组是否包括在授权上下文中。</summary>
      <returns>如果 Windows 组包括在授权上下文中，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.MapClientCertificateToWindowsAccount">
      <summary>获取或设置一个值，该值指示是否将证书映射到 Windows 帐户。</summary>
      <returns>如果将证书映射到 Windows 帐户，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.RevocationMode">
      <summary>获取或设置 ChainTrust 和 PeerOrChainTrust X.509 证书验证的证书吊销模式。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode" /> 中的值之一：NoCheck、Online 或 Offline。 默认值为 Online。</returns>
      <exception cref="T:System.InvalidOperationException">在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ClientCertificateAuthentication.TrustedStoreLocation">
      <summary>获取或设置受信任存储区的位置，该位置下的客户端证书链已验证。</summary>
      <returns>受信任存储区的位置，该位置下的客户端证书链已验证。</returns>
      <exception cref="T:System.InvalidOperationException">在凭据为只读时进行设置。</exception>
    </member>
    <member name="T:System.ServiceModel.Security.X509PeerCertificateAuthentication">
      <summary>指定对等证书的身份验证属性。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.CertificateValidationMode">
      <summary>获取或设置证书验证模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" /> 中的枚举的一个值。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.CustomCertificateValidator">
      <summary>获取或设置自定义客户端证书验证程序。</summary>
      <returns>自定义客户端证书验证程序。</returns>
      <exception cref="T:System.InvalidOperationException">在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.RevocationMode">
      <summary>获取或设置证书吊销模式。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode" /> 中的值之一：NoCheck、Online 或 Offline。</returns>
      <exception cref="T:System.InvalidOperationException">在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509PeerCertificateAuthentication.TrustedStoreLocation">
      <summary>获取或设置用来验证客户端证书的受信任存储区位置。</summary>
      <returns>用来验证客户端证书的受信任存储区位置。</returns>
      <exception cref="T:System.InvalidOperationException">在凭据为只读时进行设置。</exception>
    </member>
    <member name="T:System.ServiceModel.Security.X509ServiceCertificateAuthentication">
      <summary>表示客户端代理验证使用 SSL/TLS 协商获取的服务证书所用的设置。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.X509ServiceCertificateAuthentication.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.X509ServiceCertificateAuthentication" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.CertificateValidationMode">
      <summary>获取或设置证书验证模式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.X509CertificateValidationMode" /> 中的枚举的一个值。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.CustomCertificateValidator">
      <summary>获取或设置自定义客户端证书验证程序。</summary>
      <returns>自定义客户端证书验证程序。</returns>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.RevocationMode">
      <summary>获取或设置用于 ChainTrust 和 PeerOrChainTrust X.509 证书验证模式的证书吊销模式。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode" /> 中的值之一：NoCheck、Online 或 Offline。</returns>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.X509ServiceCertificateAuthentication.TrustedStoreLocation">
      <summary>获取或设置受信任存储区的位置，该位置下的客户端证书链已验证。</summary>
      <returns>受信任的存储区位置。</returns>
      <exception cref="T:System.InvalidOperationException">试图在凭据为只读时进行设置。</exception>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement">
      <summary>指定希望出现在联合凭据中的必选和可选的声明类型。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.#ctor(System.String)">
      <summary>为所需的指定类型声明初始化 <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> 类的新实例。</summary>
      <param name="claimType">声明类型。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.#ctor(System.String,System.Boolean)">
      <summary>为指定类型的声明初始化 <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> 类的新实例。</summary>
      <param name="claimType">声明类型。</param>
      <param name="isOptional">如果值为 false，则声明是必选的；否则声明是可选的。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.ClaimType">
      <summary>获取构造函数中指定的声明类型。</summary>
      <returns>声明类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ClaimTypeRequirement.IsOptional">
      <summary>获取一个值，该值指示声明是否可选。</summary>
      <returns>如果该类实例指定声明是可选的，则为 true；如果它指定声明是必选的，则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.IIssuanceSecurityTokenAuthenticator">
      <summary>指定一个协定，该协定应该由向客户端颁发令牌的自定义安全令牌身份验证器来实现。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IIssuanceSecurityTokenAuthenticator.IssuedSecurityTokenHandler">
      <summary>颁发令牌后获取或设置处理程序。</summary>
      <returns>颁发令牌后处理事件的委托。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IIssuanceSecurityTokenAuthenticator.RenewedSecurityTokenHandler">
      <summary>续订令牌后获取或设置处理程序。</summary>
      <returns>续订令牌后处理事件的委托。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ILogonTokenCacheManager">
      <summary>此接口使应用程序能够根据要求清除 Windows 令牌缓存。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ILogonTokenCacheManager.FlushLogonTokenCache">
      <summary>移除登录缓存中所有令牌。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ILogonTokenCacheManager.RemoveCachedLogonToken(System.String)">
      <summary>移除登录缓存中指定的令牌。</summary>
      <returns>如果已成功移除用户的令牌，则为 true；否则为 false。</returns>
      <param name="username">要移除的令牌上的用户名。</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement">
      <summary>指定 Windows Communication Foundation (WCF) 中通道创建特定的安全属性要求。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement.TargetAddress">
      <summary>获取和设置目标地址。</summary>
      <returns>目标地址。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement.ToString">
      <summary>输出该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement.Via">
      <summary>获取或设置途径。</summary>
      <returns>用于表示途径的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache">
      <summary>实现后，此接口为安全上下文令牌缓存指定一个协定。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)">
      <summary>向令牌缓存添加安全上下文安全令牌。</summary>
      <param name="token">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts">
      <summary>清除令牌缓存的内容。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)">
      <summary>获取与指定的上下文 ID 匹配的安全上下文安全令牌 ID 的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> 的泛型集合。</returns>
      <param name="contextId">指定的安全上下文 ID。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>获取与指定的上下文 ID 和生成匹配的安全上下文安全令牌 ID。</summary>
      <returns>匹配的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />。</returns>
      <param name="contextId">指定的安全上下文 ID。</param>
      <param name="generation">一个表示生成的 <see cref="T:System.Xml.UniqueId" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)">
      <summary>移除缓存中与给定的上下文 ID 匹配的所有令牌。</summary>
      <param name="contextId">指定的安全上下文 ID。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>移除缓存中与给定的上下文 ID 和生成匹配的令牌。</summary>
      <param name="contextId">指定的安全上下文 ID。</param>
      <param name="generation">一个表示生成的 <see cref="T:System.Xml.UniqueId" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)">
      <summary>尝试向缓存添加令牌。</summary>
      <returns>如果成功地向缓存添加了令牌，则为 true；否则为 false。</returns>
      <param name="token">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 日期或时间超出限制。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)">
      <summary>更新缓存中令牌的过期日期。</summary>
      <param name="context">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" />。</param>
      <param name="expirationTime">新的过期时间和日期。</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenHandler">
      <summary>该委托指向一种方法，实现时该方法将在令牌颁发给客户端之前由身份验证器调用。</summary>
      <param name="issuedToken">要颁发给客户端的令牌。</param>
      <param name="tokenRequestor">请求其令牌的终结点。 这是客户端将要显示已颁发令牌的终结点。</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters">
      <summary>表示在联合安全方案中颁发的安全令牌的参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="other">该类的其他实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor(System.String)">
      <summary>使用指定的标记类型初始化 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="tokenType">令牌类型。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>使用指定的标记类型和颁发者地址初始化 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="tokenType">令牌类型。</param>
      <param name="issuerAddress">颁发令牌的终结点的地址。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.#ctor(System.String,System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding)">
      <summary>使用指定的标记类型、颁发者地址和颁发者绑定初始化 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="tokenType">令牌类型。</param>
      <param name="issuerAddress">颁发令牌的终结点的地址。</param>
      <param name="issuerBinding">绑定颁发者。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.AdditionalRequestParameters">
      <summary>获取附加请求参数的集合</summary>
      <returns>保留附加请求参数且类型为 <see cref="T:System.Xml.XmlElement" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.ClaimTypeRequirements">
      <summary>获取声明类型要求的集合。</summary>
      <returns>保留附加声明类型要求且类型为 <see cref="T:System.ServiceModel.Security.Tokens.ClaimTypeRequirement" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>一个表示副本的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>安全密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">安全标记的引用类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> 不是 External 或 Internal。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.CreateRequestParameters(System.ServiceModel.MessageSecurityVersion,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>创建已颁发令牌请求参数 XML 元素的集合，这些元素包含在客户端发送至安全令牌服务的请求中。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.Collection`1" />，包含表示请求参数的 XML 元素。</returns>
      <param name="messageSecurityVersion">消息安全版本。</param>
      <param name="securityTokenSerializer">安全令牌序列化程序。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.DefaultMessageSecurityVersion">
      <summary>获取或设置安全指定版的默认集。</summary>
      <returns>一个表示默认的安全规范版本集的 <see cref="T:System.ServiceModel.MessageSecurityVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.HasAsymmetricKey">
      <summary>获取一个值，该值指示已颁发的令牌是否具有非对称密钥。</summary>
      <returns>如果发出的令牌具有非对称密钥，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>实现时，根据 IssuedSecurityTokenParameters 中设置的属性初始化安全令牌要求。</summary>
      <param name="requirement">要初始化的安全令牌要求。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.IssuerAddress">
      <summary>获取或设置令牌颁发者的地址。</summary>
      <returns>令牌颁发者的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.IssuerBinding">
      <summary>获取或设置客户端要使用的令牌颁发者的绑定。</summary>
      <returns>客户端要使用的令牌颁发者的 <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.IssuerMetadataAddress">
      <summary>获取或设置令牌颁发者的元数据地址。</summary>
      <returns>令牌颁发者的地元数据址。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.KeySize">
      <summary>获取或设置已颁发令牌的密钥大小。</summary>
      <returns>令牌的密钥大小。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">已尝试将 set 设置为小于 0 的值。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.KeyType">
      <summary>获取或设置已颁发令牌的密钥类型。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityKeyType" /> 值之一。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.SupportsClientAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持客户端身份验证。</summary>
      <returns>如果该令牌支持客户端身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>实现时，将获取一个值，该值指示令牌是否支持 Windows 标识的身份验证。</summary>
      <returns>如果该令牌支持 Windows 标识的身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.SupportsServerAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持服务器身份验证。</summary>
      <returns>如果该令牌支持服务器身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.TokenType">
      <summary>获取或设置已颁发令牌的类型。</summary>
      <returns>令牌类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.ToString">
      <summary>显示该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters.UseStrTransform">
      <summary>获取或设置一个值，该值指示发布的标记参数是否使用 STR 转换。</summary>
      <returns>如果发布的标记参数使用 STR 转换，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider">
      <summary>表示已发布安全标记的标记提供程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Abort">
      <summary>中止提供程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginClose(System.AsyncCallback,System.Object)">
      <summary>异步开始关闭提供程序。</summary>
      <returns>一个表示异步操作的结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="callback">要在操作完成时执行的 <see cref="T:System.AsyncCallback" /> 方法。</param>
      <param name="state">一个 <see cref="T:System.Object" />，表示操作的状态。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>异步开始关闭提供程序。</summary>
      <returns>一个表示异步操作的结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，在其之后调用会超时。</param>
      <param name="callback">要在操作完成时执行的 <see cref="T:System.AsyncCallback" /> 方法。</param>
      <param name="state">一个 <see cref="T:System.Object" />，表示操作的状态。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginGetTokenCore(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>异步开始获取令牌核心。</summary>
      <returns>一个表示异步操作的结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，在其之后调用会超时。</param>
      <param name="callback">要在操作完成时执行的 <see cref="T:System.AsyncCallback" /> 方法。</param>
      <param name="state">一个 <see cref="T:System.Object" />，表示操作的状态。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>异步开始打开提供程序。</summary>
      <returns>一个表示异步操作的结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="callback">要在操作完成时执行的 <see cref="T:System.AsyncCallback" /> 方法。</param>
      <param name="state">一个 <see cref="T:System.Object" />，表示操作的状态。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>异步开始打开提供程序。</summary>
      <returns>一个表示异步操作的结果的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，在其之后调用会超时。</param>
      <param name="callback">要在操作完成时执行的 <see cref="T:System.AsyncCallback" /> 方法。</param>
      <param name="state">一个 <see cref="T:System.Object" />，表示操作的状态。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.CacheIssuedTokens">
      <summary>获取或设置一个值，该值指示是否缓存发布标记。</summary>
      <returns>如果发出的令牌已缓存，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Close">
      <summary>关闭提供程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Close(System.TimeSpan)">
      <summary>关闭提供程序。</summary>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，在其之后调用会超时。</param>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Closed">
      <summary>提供 Closed 事件的事件处理程序的注册和注销。</summary>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Closing">
      <summary>提供 Closing 事件的事件处理程序的注册和注销。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.DefaultCloseTimeout">
      <summary>获取关闭连接的默认超时值。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示关闭连接的默认超时值。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.DefaultOpenTimeout">
      <summary>获取打开连接的默认超时值。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" />，表示打开连接的默认超时值。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Dispose">
      <summary>释放由 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.EndClose(System.IAsyncResult)">
      <summary>结束用于关闭提供程序的异步调用。</summary>
      <param name="result">一个表示异步操作的结果的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.EndGetTokenCore(System.IAsyncResult)">
      <summary>结束用于获取令牌核心的异步调用。</summary>
      <returns>一个安全令牌。</returns>
      <param name="result">一个表示异步操作的结果的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.EndOpen(System.IAsyncResult)">
      <summary>结束用于打开提供程序的异步调用。</summary>
      <param name="result">一个表示异步操作的结果的 <see cref="T:System.IAsyncResult" /> 对象。</param>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Faulted">
      <summary>提供 Faulted 事件的事件处理程序的注册和注销。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>获取令牌核心。</summary>
      <returns>一个表示令牌核心的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，在其之后调用会超时。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IdentityVerifier">
      <summary>获取或设置标识验证程序。</summary>
      <returns>标识验证工具。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IssuedTokenRenewalThresholdPercentage">
      <summary>获取或设置已颁发令牌的续订阈值百分比。</summary>
      <returns>已颁发令牌的续订阈值百分比。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IssuerAddress">
      <summary>获取或设置颁发者的地址。</summary>
      <returns>颁发者地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IssuerBinding">
      <summary>获取或设置颁发者绑定。</summary>
      <returns>颁发者绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.IssuerChannelBehaviors">
      <summary>获取颁发者的通道行为。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />，包含该颁发者通道的行为。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.KeyEntropyMode">
      <summary>获取或设置密钥平均信息量模式。</summary>
      <returns>密钥平均信息量模式。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.MaxIssuedTokenCachingTime">
      <summary>获取或设置缓存已颁发令牌的最长时间。</summary>
      <returns>一个 <see cref="T:System.Timespan" />，表示缓存已颁发令牌的最长时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.MessageSecurityVersion">
      <summary>获取或设置消息安全版本。</summary>
      <returns>消息安全版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Open">
      <summary>打开提供程序。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Open(System.TimeSpan)">
      <summary>打开提供程序。</summary>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，在其之后调用会超时。</param>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Opened">
      <summary>提供 Opened 事件的事件处理程序的注册和注销。</summary>
    </member>
    <member name="E:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.Opening">
      <summary>提供 Opening 事件的事件处理程序的注册和注销。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.SecurityAlgorithmSuite">
      <summary>获取或设置安全算法组。</summary>
      <returns>安全算法组。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.SecurityTokenSerializer">
      <summary>获取或设置安全令牌的序列化程序。</summary>
      <returns>安全令牌序列化程序。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.State">
      <summary>获取通信状态。</summary>
      <returns>通信状态。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.SupportsTokenCancellation">
      <summary>获取一个值，该值指示是否支持令牌取消。</summary>
      <returns>如果支持令牌取消；则为 True，否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.TargetAddress">
      <summary>获取或设置目标地址。</summary>
      <returns>目标地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.IssuedSecurityTokenProvider.TokenRequestParameters">
      <summary>获取令牌请求参数。</summary>
      <returns>一个 XML 元素集合，表示令牌请求参数。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters">
      <summary>表示 Kerberos 安全令牌的参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="other">该类的其他实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>表示副本的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>标记的密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">安全标记的引用类型。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.HasAsymmetricKey">
      <summary>获取一个值，该值指示令牌是否具有非对称密钥。</summary>
      <returns>如果该令牌具有非对称密钥，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>初始化安全令牌要求。</summary>
      <param name="requirement">安全标记的要求。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.SupportsClientAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持客户端身份验证。</summary>
      <returns>如果该令牌支持客户端身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>实现时，将获取一个值，该值指示令牌是否支持 Windows 标识的身份验证。</summary>
      <returns>如果该令牌支持 Windows 标识的身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.KerberosSecurityTokenParameters.SupportsServerAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持服务器身份验证。</summary>
      <returns>如果该令牌支持服务器身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement">
      <summary>指定 Windows Communication Foundation (WCF) 中侦听器服务特定的安全属性要求。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.AuditLogLocation">
      <summary>获取或设置审核日志的位置。</summary>
      <returns>审核日志位置。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.ListenUri">
      <summary>获取或设置侦听器 URI。</summary>
      <returns>侦听器 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.MessageAuthenticationAuditLevel">
      <summary>获取或设置消息身份验证审核级别。</summary>
      <returns>消息身份验证的审核级别。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.SuppressAuditFailure">
      <summary>获取或设置一个值，该值指示是否禁用审核失败。</summary>
      <returns>如果禁止显示审核失败，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.ToString">
      <summary>显示该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.RenewedSecurityTokenHandler">
      <summary>实现时，在续订令牌返回给客户端之前将调用委托。</summary>
      <param name="newSecurityToken">已续订的令牌。</param>
      <param name="oldSecurityToken">已过期的安全令牌。</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters">
      <summary>表示 RSA 安全令牌的参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="other">该类的其他实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>表示副本的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>标记的密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">安全标记的引用类型。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.HasAsymmetricKey">
      <summary>获取一个值，该值指示令牌是否具有非对称密钥。</summary>
      <returns>如果该令牌具有非对称密钥，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>初始化安全令牌要求。</summary>
      <param name="requirement">安全标记的要求。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.SupportsClientAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持客户端身份验证。</summary>
      <returns>如果该令牌支持客户端身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>实现时，将获取一个值，该值指示令牌是否支持 Windows 标识的身份验证。</summary>
      <returns>如果该令牌支持 Windows 标识的身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.RsaSecurityTokenParameters.SupportsServerAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持服务器身份验证。</summary>
      <returns>如果该令牌支持服务器身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters">
      <summary>表示安全对话安全令牌的参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement)">
      <summary>从所指定 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 的属性初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="bootstrapSecurityBindingElement">启动安全绑定元素。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean)">
      <summary>从所指定 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 的属性初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="bootstrapSecurityBindingElement">启动安全绑定元素。</param>
      <param name="requireCancellation">如果要求取消操作，则为 true，否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean,System.Boolean)">
      <summary>从所指定 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> 的属性初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="bootstrapSecurityBindingElement">在对安全对话令牌颁发过程中交换的消息进行保护时使用的安全绑定元素对象。</param>
      <param name="requireCancellation">如果要求取消操作，则为 true，否则为 false。</param>
      <param name="canRenewSession">如果可以续订通信会话，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean,System.Boolean,System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>从所指定 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />（具有指定的 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />）的属性初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="bootstrapSecurityBindingElement">在对安全对话令牌颁发过程中交换的消息进行保护时使用的安全绑定元素对象。</param>
      <param name="requireCancellation">如果要求取消操作，则为 true，否则为 false。</param>
      <param name="canRenewSession">如果可以续订通信会话，则为 true；否则为 false。</param>
      <param name="bootstrapProtectionRequirements">通道保护要求。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Channels.SecurityBindingElement,System.Boolean,System.ServiceModel.Security.ChannelProtectionRequirements)">
      <summary>从所指定 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />（具有指定的 <see cref="T:System.ServiceModel.Security.ChannelProtectionRequirements" />）的属性初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="bootstrapSecurityBindingElement">启动安全绑定元素。</param>
      <param name="requireCancellation">如果要求取消操作，则为 true，否则为 false。</param>
      <param name="bootstrapProtectionRequirements">启动保护要求。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters)">
      <summary>使用 <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> 类的一个实例初始化另一个新实例。</summary>
      <param name="other">该类的其他实例。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.BootstrapProtectionRequirements">
      <summary>获取启动保护要求。</summary>
      <returns>启动保护要求。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.BootstrapSecurityBindingElement">
      <summary>获取或设置启动安全绑定元素。</summary>
      <returns>启动安全绑定元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.CanRenewSession">
      <summary>获取或设置一个值，该值指示是否可以续订通信会话。</summary>
      <returns>如果可以续订通信会话，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>表示副本的 <see cref="T:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>标记的密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">安全标记的引用类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> 不是 External 或 Internal。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.HasAsymmetricKey">
      <summary>获取一个值，该值指示安全令牌是否具有非对称密钥。</summary>
      <returns>该属性始终返回 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>初始化安全令牌要求。</summary>
      <param name="requirement">安全标记的要求。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.RequireCancellation">
      <summary>获取或设置一个值，该值指示是否需要取消。</summary>
      <returns>如果需要取消，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.SupportsClientAuthentication">
      <summary>获取一个值，该值指示令牌是否支持客户端身份验证。</summary>
      <returns>如果该令牌支持客户端身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>获取一个值，该值指示令牌是否支持 Windows 标识的身份验证。</summary>
      <returns>如果该令牌支持 Windows 标识的身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.SupportsServerAuthentication">
      <summary>获取一个值，该值指示令牌是否支持服务器身份验证。</summary>
      <returns>如果该令牌支持服务器身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters.ToString">
      <summary>显示该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken">
      <summary>表示由 WS-SecureConversation 规范定义的令牌。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#ctor(System.Xml.UniqueId,System.Byte[],System.DateTime,System.DateTime)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> 类的新实例。</summary>
      <param name="contextId">一个表示上下文 ID 的 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="key">一个表示密钥的字节数组。</param>
      <param name="validFrom">有效的起始时间。</param>
      <param name="validTo">过期时间。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#ctor(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> 类的新实例。</summary>
      <param name="contextId">一个表示上下文 ID 的 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id">令牌 ID。</param>
      <param name="key">一个表示密钥的字节数组。</param>
      <param name="validFrom">有效的起始时间。</param>
      <param name="validTo">过期时间。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#ctor(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> 类的新实例。</summary>
      <param name="contextId">一个表示上下文 ID 的 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id">令牌 ID。</param>
      <param name="key">一个表示密钥的字节数组。</param>
      <param name="validFrom">有效的起始时间。</param>
      <param name="validTo">过期时间。</param>
      <param name="authorizationPolicies">
        <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 实例的一个只读集合，这种实例表示向其颁发令牌的一方。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#ctor(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime,System.Xml.UniqueId,System.DateTime,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken" /> 类的新实例。</summary>
      <param name="contextId">一个表示上下文 ID 的 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id">令牌 ID。</param>
      <param name="key">一个表示密钥的字节数组。</param>
      <param name="validFrom">有效的起始时间。</param>
      <param name="validTo">过期时间。</param>
      <param name="keyGeneration">一个表示密钥生成的 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="keyEffectiveTime">密钥的有效起始时间。</param>
      <param name="keyExpirationTime">密钥的过期时间。</param>
      <param name="authorizationPolicies">
        <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 实例的一个只读集合，这种实例表示向其颁发令牌的一方。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.AuthorizationPolicies">
      <summary>获取令牌授权策略的只读集合。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 实例的只读集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.BootstrapMessageProperty">
      <summary>获取或设置从启动消息提取的 <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" />。</summary>
      <returns>安全消息属性。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>指示是否可以创建指定的密钥标识符子句类型。</summary>
      <returns>如果可以创建指定的密钥标识符子句类型，则为 true；否则为 false。</returns>
      <typeparam name="T">指定的密钥标识符子句类型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.ContextId">
      <summary>获取上下文 ID。</summary>
      <returns>一个表示上下文 ID 的 <see cref="T:System.Xml.UniqueId" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.CreateCookieSecurityContextToken(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.ServiceModel.Security.SecurityStateEncoder)">
      <summary>创建安全上下文令牌 Cookie。</summary>
      <returns>一个安全上下文令牌 Cookie。</returns>
      <param name="contextId">一个表示上下文 ID 的 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id">令牌 ID。</param>
      <param name="key">一个表示密钥的字节数组。</param>
      <param name="validFrom">有效的起始时间。</param>
      <param name="validTo">过期时间。</param>
      <param name="authorizationPolicies">
        <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 实例的只读集合。</param>
      <param name="securityStateEncoder">安全状态编码器。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.CreateCookieSecurityContextToken(System.Xml.UniqueId,System.String,System.Byte[],System.DateTime,System.DateTime,System.Xml.UniqueId,System.DateTime,System.DateTime,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy},System.ServiceModel.Security.SecurityStateEncoder)">
      <summary>创建安全上下文令牌 Cookie。</summary>
      <returns>一个安全上下文令牌 Cookie。</returns>
      <param name="contextId">一个表示上下文 ID 的 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id">令牌 ID。</param>
      <param name="key">一个表示密钥的字节数组。</param>
      <param name="validFrom">有效的起始时间。</param>
      <param name="validTo">过期时间。</param>
      <param name="keyGeneration">一个表示密钥生成的 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="keyEffectiveTime">密钥的有效起始时间。</param>
      <param name="keyExpirationTime">密钥的过期时间。</param>
      <param name="authorizationPolicies">
        <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 实例的只读集合。</param>
      <param name="securityStateEncoder">安全状态编码器。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定类型的密钥标识符子句。</summary>
      <returns>一个强制转换为 <paramref name="T" /> 类型的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</returns>
      <typeparam name="T">指定的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.Dispose">
      <summary>释放此对象的实例所使用的非托管资源。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.Id">
      <summary>获取令牌 ID。</summary>
      <returns>令牌 ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.IsCookieMode">
      <summary>获取一个值，该值指示是否读入带有指定如何处理 Cookie 的模式设置的安全上下文令牌 (SCT)。</summary>
      <returns>如果读入 Cookie 模式 SCT，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.KeyEffectiveTime">
      <summary>获取密钥的有效起始时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示密钥的有效起始时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.KeyExpirationTime">
      <summary>获取密钥的过期时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示密钥的过期时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.KeyGeneration">
      <summary>获取密钥生成。</summary>
      <returns>一个表示密钥生成的 <see cref="T:System.Xml.UniqueId" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>指示当前令牌的密钥标识符子句是否与指定的密钥标识符子句相匹配。</summary>
      <returns>如果当前令牌的密钥标识符子句与指定的密钥标识符子句相匹配，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="keyIdentifierClause">指定的密钥标识符子句。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.SecurityKeys">
      <summary>获取安全密钥的只读集合。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 实例的只读集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.ToString">
      <summary>生成此对象当前实例的文本表示形式。</summary>
      <returns>此对象当前实例的一个文本表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.ValidFrom">
      <summary>获取令牌的有效起始时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示令牌的有效起始时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.ValidTo">
      <summary>获取令牌的过期时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示令牌的过期时间。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator">
      <summary>验证令牌和提取声明。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示是否可以验证指定的令牌。</summary>
      <returns>如果指定的令牌可以验证，则为 true；否则为 false。</returns>
      <param name="token">
        <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>验证指定的令牌。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 实例的集合。</returns>
      <param name="token">
        <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver">
      <summary>解析安全上下文令牌。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver" /> 类的新实例。</summary>
      <param name="securityContextCacheCapacity">安全上下文的缓存大小。</param>
      <param name="removeOldestTokensOnCacheFull">如果缓存已满时应移除最旧的令牌，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)">
      <summary>使用指定的安全上下文缓存容量和最大时钟偏差，初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver" /> 类的新实例。</summary>
      <param name="securityContextCacheCapacity">安全上下文的缓存大小。</param>
      <param name="removeOldestTokensOnCacheFull">如果缓存已满时应移除最旧的令牌，则为 true；否则为 false。</param>
      <param name="clockSkew">客户端与服务器时钟设置之间所允许的最大时间差。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)">
      <summary>向令牌缓存添加安全上下文安全令牌。</summary>
      <param name="token">安全上下文令牌。</param>
      <exception cref="T:System.ServiceModel.QuotaExceededException">
        <see cref="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull" /> 属性为 false 且已达到或超出缓存容量。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts">
      <summary>清除令牌缓存的内容。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew">
      <summary>返回客户端与服务器时钟设置之间所允许的最大时间差。</summary>
      <returns>客户端与服务器时钟设置之间所允许的最大时间差。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)">
      <summary>获取与指定的上下文 ID 匹配的安全上下文安全令牌 ID 的集合。</summary>
      <returns>安全上下文令牌的泛型集合。</returns>
      <param name="contextId">指定的安全上下文 ID。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>获取与指定的上下文 ID 和生成匹配的安全上下文安全令牌 ID。</summary>
      <returns>匹配安全上下文令牌。</returns>
      <param name="contextId">指定的安全上下文 ID。</param>
      <param name="generation">生成。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)">
      <summary>移除缓存中与给定的上下文 ID 匹配的所有令牌。</summary>
      <param name="contextId">指定的安全上下文 ID。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>移除缓存中与给定的上下文 ID 和生成匹配的令牌。</summary>
      <param name="contextId">指定的安全上下文 ID。</param>
      <param name="generation">生成。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull">
      <summary>获取一个值，该值指示缓存已满时是否要移除最旧的令牌。</summary>
      <returns>如果缓存已满时应移除最旧的令牌，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity">
      <summary>获取安全上下文令牌的缓存大小。</summary>
      <returns>安全上下文令牌的缓存大小。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)">
      <summary>尝试向缓存添加令牌。</summary>
      <returns>如果成功地向缓存添加了令牌，则为 true；否则为 false。</returns>
      <param name="token">安全上下文令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 日期或时间超出限制。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>在提供了指定的密钥标识符子句的情况下，尝试解析安全密钥核心。</summary>
      <returns>如果已成功解析密钥核心，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">安全密钥标识符子句。</param>
      <param name="key">此方法返回时将包含解析的密钥核心。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>在提供了指定的密钥标识符的情况下，尝试解析令牌。</summary>
      <returns>如果已成功解析密钥令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">安全密钥标识符。</param>
      <param name="token">此方法返回时将包含解析的密钥核心。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>在提供了指定的密钥标识符子句的情况下，尝试解析令牌。</summary>
      <returns>如果已成功解析密钥令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">安全密钥标识符子句。</param>
      <param name="token">此方法返回时将包含解析的密钥核心。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)">
      <summary>更新缓存中令牌的过期日期。</summary>
      <param name="context">安全上下文。</param>
      <param name="expirationTime">新的过期时间和日期。</param>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode">
      <summary>消息的令牌包含要求列表。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode.AlwaysToInitiator">
      <summary>令牌始终包含在发起方的消息中，而从不包含在接收方的消息中。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode.AlwaysToRecipient">
      <summary>令牌始终包含在接收方的消息中，而从不包含在发起方的消息中。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode.Never">
      <summary>令牌从不包含在消息中，但会被引用。 令牌对于带外的接收方必须是已知的。 此选项不是现成可用的。 您需要为其包含自定义凭据，才可使用。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode.Once">
      <summary>包含令牌一次。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters">
      <summary>指定实现时表示安全令牌参数的 abstract 类。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.SecurityTokenParameters)">
      <summary>从 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 类的一个实例初始化另一个新实例。</summary>
      <param name="other">该类的其他实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.Clone">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 实例的副本。</returns>
      <exception cref="T:System.InvalidOperationException">无法克隆该类的此实例。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>表示副本的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>标记的密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">安全标记的引用类型。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.HasAsymmetricKey">
      <summary>当在派生类中重写时，获取一个指示该标记是否有非对称密钥的值。</summary>
      <returns>如果该令牌具有非对称密钥，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.InclusionMode">
      <summary>获取或设置令牌包含要求。</summary>
      <returns>令牌包含要求。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>在派生类中重写时，初始化安全标记要求。</summary>
      <param name="requirement">安全标记的要求。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>指示令牌是否与密钥标识符子句匹配。</summary>
      <returns>如果令牌与密钥标识符子句匹配，则为 true；否则为 false。</returns>
      <param name="token">安全令牌。</param>
      <param name="keyIdentifierClause">指定的密钥标识符子句。</param>
      <param name="referenceStyle">安全标记的引用类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> 不是 <see cref="F:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle.External" /> 或 <see cref="F:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle.Internal" />。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.ReferenceStyle">
      <summary>获取或设置令牌的引用样式。</summary>
      <returns>用于令牌的引用类型。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的令牌引用样式无效。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.RequireDerivedKeys">
      <summary>获取或设置一个值，该值指示是否可以从原始校验密钥中派生密钥。</summary>
      <returns>如果需要从令牌的密钥中派生密钥，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.SupportsClientAuthentication">
      <summary>在派生类中重写时，获取一个指示该标记是否支持客户端身份验证的值。</summary>
      <returns>如果该令牌支持客户端身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>在派生类中重写时，获取一个指示该标记是否支持身份验证的 Windows 标识的值。</summary>
      <returns>如果该令牌支持 Windows 标识的身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SecurityTokenParameters.SupportsServerAuthentication">
      <summary>在派生类中重写时，获取一个指示该标记是否支持服务器身份验证的值。</summary>
      <returns>如果该令牌支持服务器身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SecurityTokenParameters.ToString">
      <summary>显示该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle">
      <summary>此枚举设置所需的引用样式，该样式用于在消息中从签名和加密元素生成安全令牌的安全令牌引用 (STR)。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle.External">
      <summary>生成的 STR 将引用该令牌，就好像它未附加到消息本身一样。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle.Internal">
      <summary>生成的 STR 将引用该令牌，就好像它包含在消息中一样。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement">
      <summary>一个抽象类，可在实现该类时指定所要请求或进行身份验证的令牌的安全属性要求，这些要求是特定于 Windows Communication Foundation (WCF) 的。 安全令牌管理器会根据令牌要求，构造 WCF 安全处理器所使用的安全令牌提供程序和安全令牌身份验证器。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.AuditLogLocationProperty">
      <summary>获取令牌要求属性名，其值为记录身份验证结果时使用的审核日志的位置（仅限服务）。</summary>
      <returns>令牌要求属性字典中 AuditLogLocation 的密钥。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.ChannelParametersCollectionProperty">
      <summary>获取令牌要求属性名，其值为通道参数集合（仅限客户端）。</summary>
      <returns>令牌要求的“属性”字典中 ChannelParametersCollection 的密钥。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.DuplexClientLocalAddressProperty">
      <summary>获取一个值，该值指定 DuplexClientLocalAddress 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</summary>
      <returns>DuplexClientLocalAddress 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.EndpointFilterTableProperty">
      <summary>获取令牌要求属性的密钥，其值为终结点筛选器表，该表包含服务终结点所接受消息的筛选器。 这是一种服务属性。</summary>
      <returns>令牌要求的终结点筛选器表属性的密钥。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.ExtendedProtectionPolicy">
      <summary>获取服务器用来验证传入的客户端连接的保护策略。</summary>
      <returns>服务器使用的保护策略。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.HttpAuthenticationSchemeProperty">
      <summary>获取令牌要求属性的密钥，如果此请求是要在 HTTP 身份验证中使用令牌提供程序或令牌身份验证器，则其值为 HTTP 身份验证方案。</summary>
      <returns>令牌要求的 HTTP 身份验证方案属性的密钥。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IsInitiator">
      <summary>获取一个值，该值指示要创建安全令牌要求的终结点是发起方还是接收方。</summary>
      <returns>如果请求是由通道发起方发出，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IsInitiatorProperty">
      <summary>获取令牌要求属性的密钥，其值指示请求发出者是通道的发起方还是通道的接收方。</summary>
      <returns>令牌要求属性的密钥，其值指示创建要求的终结点是发起方还是接收方。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IsOutOfBandTokenProperty">
      <summary>获取令牌要求属性的密钥，其值指示这是在客户端还是服务上配置的令牌请求。</summary>
      <returns>令牌要求属性的密钥，其值指示这是在客户端还是服务上配置的令牌请求。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuedSecurityTokenParametersProperty">
      <summary>获取令牌要求属性的密钥，其值为包含令牌相关信息的 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" />（如果要求适用于已颁发的令牌）。</summary>
      <returns>令牌要求属性的密钥，其值为包含令牌相关信息的 <see cref="T:System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters" />（如果要求适用于已颁发的令牌）。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerAddress">
      <summary>如果令牌要求适用于已颁发的令牌，则此属性包含颁发者的终结点地址。</summary>
      <returns>令牌颁发者的终结点地址。 这用于已颁发令牌的类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerAddressProperty">
      <summary>获取令牌要求属性的密钥，其值为颁发方的 <see cref="T:System.ServiceModel.EndpointAddress" />（如果要求适用于已颁发的令牌）。</summary>
      <returns>令牌要求属性的密钥，其值为颁发方的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerBinding">
      <summary>如果令牌要求适用于已颁发的令牌，则此属性包含用于与颁发者进行通信的绑定。</summary>
      <returns>用于与用户进行通信的绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerBindingContextProperty">
      <summary>获取令牌要求属性的密钥，其值为用于和颁发方进行对话的 <see cref="T:System.ServiceModel.Channels.BindingContext" />（如果要求适用于已颁发的令牌）。</summary>
      <returns>令牌要求属性的密钥，其值为用于和颁发方进行对话的 <see cref="T:System.ServiceModel.Channels.BindingContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.IssuerBindingProperty">
      <summary>获取令牌要求属性的密钥，其值为用于和颁发方进行对话的绑定（如果要求适用于已颁发的令牌）。</summary>
      <returns>令牌要求属性的密钥，其值为用于和颁发方进行对话的绑定。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.ListenUriProperty">
      <summary>获取令牌要求属性的密钥，其值为发出请求的服务终结点侦听时使用的 URI（仅限服务）。</summary>
      <returns>令牌要求属性的密钥，其值为发出请求的服务终结点侦听时使用的 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.MessageAuthenticationAuditLevelProperty">
      <summary>获取令牌要求属性的密钥，其值为记录身份验证结果时使用的审核级别（仅限服务）。</summary>
      <returns>获取令牌要求属性的密钥，其值为记录身份验证结果时使用的审核级别。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.MessageDirectionProperty">
      <summary>获取令牌要求属性的密钥，其值为要使用的 <see cref="T:System.ServiceModel.Description.MessageDirection" /> 枚举成员，该成员指示以何种方向发送的消息需要令牌提供程序：从客户端到服务器或从服务器到客户端。</summary>
      <returns>获取令牌要求属性的密钥，其值为要使用的 <see cref="T:System.ServiceModel.Description.MessageDirection" /> 枚举成员。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.MessageSecurityVersion">
      <summary>获取或设置要使用的消息安全版本（如有必要）。</summary>
      <returns>消息安全版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.MessageSecurityVersionProperty">
      <summary>获取令牌要求属性的密钥，其值为配置通道时使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</summary>
      <returns>令牌要求属性的密钥，其值为配置通道时使用的 <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.Namespace">
      <summary>指定当前命名空间。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.PreferSslCertificateAuthenticatorProperty">
      <summary>获取标记要求属性的键，其值为用于创建 SSL 安全标记身份验证器。</summary>
      <returns>标记要求属性的键，其值为用于创建 SSL 安全标记身份验证器。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.PrivacyNoticeUriProperty">
      <summary>获取令牌要求属性的密钥，其值为指向服务隐私策略的 URI 链接（如果服务有隐私策略）。</summary>
      <returns>令牌要求属性的密钥，其值为指向服务隐私策略的 URI 链接（如果服务有隐私策略）。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.PrivacyNoticeVersionProperty">
      <summary>获取令牌要求属性的密钥，其值为表示隐私声明版本的字符串。</summary>
      <returns>令牌要求属性的密钥，其值表示隐私声明版本。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecureConversationSecurityBindingElement">
      <summary>获取或设置用于保护安全对话启动消息的安全绑定元素。</summary>
      <returns>一个用于保护安全对话启动消息的安全绑定元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecureConversationSecurityBindingElementProperty">
      <summary>获取令牌要求属性的密钥，其值为用于保护安全对话启动消息的安全绑定元素。</summary>
      <returns>令牌要求属性的密钥，其值表示用于保护安全对话启动消息的安全绑定元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecurityAlgorithmSuite">
      <summary>获取或设置要使用的安全算法组（如有必要）。</summary>
      <returns>要使用的安全算法组。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecurityAlgorithmSuiteProperty">
      <summary>获取令牌要求属性的密钥，其值为通道用来执行消息安全的算法组。</summary>
      <returns>令牌要求属性的密钥，其值为 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecurityBindingElement">
      <summary>获取或设置安全绑定元素。</summary>
      <returns>安全绑定元素。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SecurityBindingElementProperty">
      <summary>获取令牌要求属性的密钥，其值为用于创建通道的安全绑定元素。</summary>
      <returns>令牌要求属性的密钥，其值为用于创建通道的 <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SupportingTokenAttachmentModeProperty">
      <summary>获取令牌要求属性的密钥，其值为关联的 <see cref="T:System.ServiceModel.Security.SecurityTokenAttachmentMode" /> 枚举成员（如果请求适用于支持令牌）。</summary>
      <returns>令牌要求属性的密钥，其值为关联的 <see cref="T:System.ServiceModel.Security.SecurityTokenAttachmentMode" /> 枚举成员。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SupportSecurityContextCancellationProperty">
      <summary>获取令牌要求属性的密钥，其值指示安全对话令牌是适用于安全会话（在这种情况下，该令牌的生存期取决于用户通道的生存期）还是适用于数据报安全通道。</summary>
      <returns>令牌要求属性的密钥，其值指示安全对话令牌是否是可取消的。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.SuppressAuditFailureProperty">
      <summary>获取令牌要求属性的密钥，其值指示是否忽略记录身份验证结果时发生的错误（仅限服务）。</summary>
      <returns>令牌要求属性的密钥，其值指示是否忽略记录身份验证结果时发生的错误。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.TargetAddressProperty">
      <summary>获取令牌要求属性的密钥，其值为通道与之对话的终结点地址（仅限客户端）。</summary>
      <returns>令牌要求属性的密钥，其值为通道与之对话的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.TransportScheme">
      <summary>获取或设置传输方案。</summary>
      <returns>传输方案。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.TransportSchemeProperty">
      <summary>如果发出的请求是要在传输安全中使用令牌提供程序或令牌身份验证器，则此字符串为令牌要求属性的密钥，其值为传输方案。</summary>
      <returns>令牌要求属性的密钥，其值为传输方案。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement.ViaProperty">
      <summary>获取令牌要求属性的密钥，其值为通道与之连接的中转 URI（仅限客户端）。</summary>
      <returns>令牌要求属性的密钥，其值为通道与之连接的中转 URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes">
      <summary>表示由 WCF 识别的安全令牌类型。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.AnonymousSslnego">
      <summary>获取一个字符串，该字符串指示发起方为匿名，但响应方证书可用作 SOAP SSL 协商的一部分。</summary>
      <returns>一个字符串，该字符串指示发起方为匿名，但响应方证书可用作 SOAP SSL 协商的一部分。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.MutualSslnego">
      <summary>获取一个字符串，该字符串指示发起方和响应方使用 X.509 证书进行了相互验证。</summary>
      <returns>一个字符串，该字符串指示发起方和响应方使用 X.509 证书进行了相互验证。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.SecureConversation">
      <summary>获取一个字符串，该字符串指示服务是否使用了 WS-SecureConversation 身份验证。</summary>
      <returns>一个字符串，该字符串指示服务是否使用了 WS-SecureConversation 身份验证。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.SecurityContext">
      <summary>获取一个字符串，该字符串指示服务是否使用了 SOAP SecurityContext 身份验证。</summary>
      <returns>一个字符串，该字符串指示服务是否使用了 SOAP SecurityContext 身份验证。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.Spnego">
      <summary>获取一个字符串，该字符串指示身份验证是否是通过 Windows Services SP Negotiation (SPNEGO) 协议进行的。</summary>
      <returns>一个字符串，该字符串指示身份验证是否是通过 Windows Services SPNEGO 协议进行的。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenTypes.SspiCredential">
      <summary>获取一个字符串，该字符串指示是否是通过 Windows 凭据进行客户端身份验证的。</summary>
      <returns>一个字符串，该字符串指示是否是通过 Windows 凭据进行客户端身份验证的。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters">
      <summary>表示 SSL 安全令牌的参数，该安全令牌是在与服务器达成 SOAP 级别的 SSL 协议时获取的。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="requireClientCertificate">如果需要客户证书，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="requireClientCertificate">如果需要客户证书，则为 true；否则为 false。</param>
      <param name="requireCancellation">如果要求取消操作，则为 true，否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.SslSecurityTokenParameters)">
      <summary>从 <see cref="T:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters" /> 类的一个实例初始化另一个新实例。</summary>
      <param name="other">该类的其他实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>表示副本的 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>标记的密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">安全标记的引用类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> 不是 External 或 Internal。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.HasAsymmetricKey">
      <summary>获取一个值，该值指示令牌是否具有非对称密钥。</summary>
      <returns>如果该令牌具有非对称密钥，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>初始化安全令牌要求。</summary>
      <param name="requirement">安全标记的要求。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.RequireCancellation">
      <summary>获取或设置一个值，该值指示是否需要取消。</summary>
      <returns>如果需要取消，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.RequireClientCertificate">
      <summary>获取或设置一个值，该值指示是否需要客户端证书。</summary>
      <returns>如果需要客户证书，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.SupportsClientAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持客户端身份验证。</summary>
      <returns>如果该令牌支持客户端身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>实现时，将获取一个值，该值指示令牌是否支持 Windows 标识的身份验证。</summary>
      <returns>如果该令牌支持 Windows 标识的身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.SupportsServerAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持服务器身份验证。</summary>
      <returns>如果该令牌支持服务器身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SslSecurityTokenParameters.ToString">
      <summary>显示该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SspiSecurityToken">
      <summary>表示 SSPI 安全令牌。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityToken.#ctor(System.Net.NetworkCredential,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityToken" /> 类的新实例。</summary>
      <param name="networkCredential">
        <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="extractGroupsForWindowsAccounts">如果提取 Windows 帐户所属的组，则为 true；否则为 false。</param>
      <param name="allowUnauthenticatedCallers">如果允许未经身份验证的（匿名）调用方，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityToken.#ctor(System.Security.Principal.TokenImpersonationLevel,System.Boolean,System.Net.NetworkCredential)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityToken" /> 类的新实例。</summary>
      <param name="impersonationLevel">
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" />。</param>
      <param name="allowNtlm">如果允许 NTLM 身份验证，则为 true；否则为 false。</param>
      <param name="networkCredential">
        <see cref="T:System.Net.NetworkCredential" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.AllowNtlm">
      <summary>获取一个值，该值指示是否允许 NTLM 身份验证。</summary>
      <returns>如果允许 NTLM 身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.AllowUnauthenticatedCallers">
      <summary>获取一个值，该值指示是否允许匿名调用方。</summary>
      <returns>如果允许匿名调用方，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.ExtractGroupsForWindowsAccounts">
      <summary>获取一个值，该值指示是否提取 Windows 帐户所属的组。</summary>
      <returns>如果提取 Windows 帐户所属的组，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.Id">
      <summary>获取令牌 ID。</summary>
      <returns>令牌 ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.ImpersonationLevel">
      <summary>获取令牌的模拟级别。</summary>
      <returns>
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.NetworkCredential">
      <summary>获取网络凭据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkCredential" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.SecurityKeys">
      <summary>获取安全密钥的集合。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.ValidFrom">
      <summary>获取令牌的有效起始日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示令牌的有效起始日期。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityToken.ValidTo">
      <summary>获取令牌的过期日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示令牌的过期日期。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters">
      <summary>表示 SSPI 安全令牌的参数，该安全令牌是在与服务器达成 SOAP 级别的 SPNEGO 协议期间获取的。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="requireCancellation">令牌是否要求取消。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="other">该类的其他实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 的新实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>安全密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.HasAsymmetricKey">
      <summary>获取一个值，该值指示令牌是否具有非对称密钥。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>初始化安全令牌要求。</summary>
      <param name="requirement">
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.RequireCancellation">
      <summary>获取或设置一个值，该值指示令牌是否要求取消。</summary>
      <returns>如果令牌要求取消；则为 true，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.SupportsClientAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持客户端身份验证。</summary>
      <returns>始终返回 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>实现时，将获取一个值，该值指示令牌是否支持 Windows 标识的身份验证。</summary>
      <returns>始终返回 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.SupportsServerAuthentication">
      <summary>实现时，将获取一个值，该值指示令牌是否支持服务器身份验证。</summary>
      <returns>始终返回 true。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SspiSecurityTokenParameters.ToString">
      <summary>显示该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters">
      <summary>表示安全绑定元素所要求的支持安全令牌的参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.Clone">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SupportingTokenParameters" /> 的新实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SupportingTokenParameters.Endorsing">
      <summary>获取一个安全令牌参数的集合，该集合用于认可安全绑定元素所要求的支持令牌。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.SetKeyDerivation(System.Boolean)">
      <summary>设置一个值，该值指示是否所有认可或签名的认可令牌参数都需要派生密钥。</summary>
      <param name="requireDerivedKeys">一个 <see cref="T:System.Boolean" />，确定参数是否需要派生密钥。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SupportingTokenParameters.Signed">
      <summary>获取一个安全令牌参数的集合，用于安全绑定元素所要求的已签名的支持令牌。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SupportingTokenParameters.SignedEncrypted">
      <summary>获取一个安全令牌参数的集合，用于安全绑定元素所要求的已签名且加密的支持令牌。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.SupportingTokenParameters.SignedEndorsing">
      <summary>获取一个安全令牌参数的集合，用于安全绑定元素所要求的已签名且认可的支持令牌。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.SupportingTokenParameters.ToString">
      <summary>显示该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters">
      <summary>表示用户名安全令牌的参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters" /> 类的新实例。</summary>
      <param name="other">该类的其他实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>安全密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="referenceStyle" /> 不是 External 或 Internal。</exception>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.HasAsymmetricKey">
      <summary>获取一个值，该值指示令牌是否具有非对称密钥。</summary>
      <returns>如果该令牌具有非对称密钥，则为 True；否则为 false。 始终返回 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>初始化安全令牌要求。</summary>
      <param name="requirement">
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.SupportsClientAuthentication">
      <summary>获取一个值，该值指示令牌是否支持客户端身份验证。</summary>
      <returns>如果该令牌支持客户端身份验证，则为 True；否则为 false。 始终返回 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>获取一个值，该值指示令牌是否支持 Windows 标识的身份验证。</summary>
      <returns>如果该令牌支持 Windows 标识的身份验证，则为 True；否则为 false。 始终返回 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters.SupportsServerAuthentication">
      <summary>获取一个值，该值指示令牌是否支持服务器身份验证。</summary>
      <returns>如果该令牌支持服务器身份验证，则为 True；否则为 false。 始终返回 false。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType">
      <summary>一个列出 X.509 密钥标识符子句可能的类型的枚举。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.Any">
      <summary>如果 X.509 证书中存在 <see cref="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.SubjectKeyIdentifier" />，则使用它；否则使用 <see cref="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.IssuerSerial" />。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.IssuerSerial">
      <summary>使用 IssuerSerial 引用：颁发者标识符加上对颁发者唯一的序列号。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.RawDataKeyIdentifier">
      <summary>该引用包含整个 X.509 证书的原始数据。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.SubjectKeyIdentifier">
      <summary>引用基于 X.509 证书的主题密钥标识符扩展（并非所有证书都具有扩展，它是可选属性）。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.Thumbprint">
      <summary>使用 X.509 指纹。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters">
      <summary>表示 X.509 安全令牌的参数。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters" /> 类的新实例。</summary>
      <param name="x509ReferenceStyle">一个 <see cref="T:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType,System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters" /> 类的新实例。</summary>
      <param name="x509ReferenceStyle">一个 <see cref="T:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType" />。</param>
      <param name="inclusionMode">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenInclusionMode" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.#ctor(System.ServiceModel.Security.Tokens.X509SecurityTokenParameters)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters" /> 类的新实例。</summary>
      <param name="other">该类的其他实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.CloneCore">
      <summary>为该类的实例克隆另一个实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenParameters" /> 的新实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.CreateKeyIdentifierClause(System.IdentityModel.Tokens.SecurityToken,System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle)">
      <summary>为令牌创建密钥标识符子句。</summary>
      <returns>安全密钥标识符子句。</returns>
      <param name="token">令牌。</param>
      <param name="referenceStyle">
        <see cref="T:System.ServiceModel.Security.Tokens.SecurityTokenReferenceStyle" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.HasAsymmetricKey">
      <summary>获取一个值，该值指示令牌是否具有非对称密钥。</summary>
      <returns>如果该令牌具有非对称密钥，则为 True；否则为 false。 始终返回 false。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.InitializeSecurityTokenRequirement(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>初始化安全令牌要求。</summary>
      <param name="requirement">
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.SupportsClientAuthentication">
      <summary>获取一个值，该值指示令牌是否支持客户端身份验证。</summary>
      <returns>如果该令牌支持客户端身份验证，则为 True；否则为 false。 始终返回 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.SupportsClientWindowsIdentity">
      <summary>获取一个值，该值指示令牌是否支持 Windows 标识的身份验证。</summary>
      <returns>如果该令牌支持 Windows 标识的身份验证，则为 True；否则为 false。 始终返回 true。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.SupportsServerAuthentication">
      <summary>获取一个值，该值指示令牌是否支持服务器身份验证。</summary>
      <returns>如果该令牌支持服务器身份验证，则为 True；否则为 false。 始终返回 true。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.ToString">
      <summary>显示该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.X509SecurityTokenParameters.X509ReferenceStyle">
      <summary>获取并设置 X.509 引用样式。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10FeedFormatter">
      <summary>一个用于在 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例与 Atom 1.0 格式之间来回序列化的类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 类的新实例。</summary>
      <param name="feedToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor(System.Type)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 类的新实例。</summary>
      <param name="feedTypeToCreate">要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 Atom 1.0 联合源。</summary>
      <returns>一个值，指定 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 Atom 1.0 联合源。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.CreateFeedInstance">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.FeedType">
      <summary>派生自与 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 实例关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 的实例。</summary>
      <returns>派生自与 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 实例关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 的实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.PreserveAttributeExtensions">
      <summary>获取和设置一个值，该值指定是否在序列化过程中保留属性扩展。</summary>
      <returns>一个指定是否在序列化过程中保留属性扩展的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.PreserveElementExtensions">
      <summary>获取和设置一个值，该值指定是否在序列化过程中保留元素扩展。</summary>
      <returns>一个指定是否在序列化过程中保留元素扩展的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 实例读取 Atom 1.0 联合源。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例从 <see cref="T:System.Xml.XmlReader" /> 实例读取联合项。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="feed">用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 读入 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的集合。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="feed">要用于创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</param>
      <param name="areAllItemsRead">一个指定是否已从 <see cref="T:System.Xml.XmlReader" /> 实例读取所有 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的值。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> 方法。</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法。</summary>
      <param name="reader">用于读取 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法。</summary>
      <param name="writer">用于编写 XML 节点的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.Version">
      <summary>获取格式化程序使用的联合版本。</summary>
      <returns>格式化程序使用的联合版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="item">要写入的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
      <param name="feedBaseUri">源的基 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的集合写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="items">要写入的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例集合。</param>
      <param name="feedBaseUri">源的基 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将与 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1">
      <summary>一个用于在 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生类与 Atom 1.0 格式之间来回序列化的类。</summary>
      <typeparam name="TSyndicationFeed">要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.#ctor(`0)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生实例创建 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1" /> 类的新实例。</summary>
      <param name="feedToWrite">要序列化的源。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.CreateFeedInstance">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生类的新实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10ItemFormatter">
      <summary>一个用于在 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例与 Atom 1.0 格式之间来回序列化的类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 创建 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> 类的新实例。</summary>
      <param name="itemToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> 类的新实例。</summary>
      <param name="itemTypeToCreate">要与 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 Atom 1.0 联合项。</summary>
      <returns>一个值，指定 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 Atom 1.0 联合项。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.CreateItemInstance">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.ItemType">
      <summary>获取与 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> 关联的联合项类型。</summary>
      <returns>与 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> 关联的联合项类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.PreserveAttributeExtensions">
      <summary>获取或设置一个值，该值指定是否在序列化过程中保留属性扩展。</summary>
      <returns>一个指定是否在序列化过程中保留属性扩展的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.PreserveElementExtensions">
      <summary>获取或设置一个值，该值指定是否在序列化过程中保留元素扩展。</summary>
      <returns>一个指定是否在序列化过程中保留元素扩展的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 实例读取 Atom 1.0 联合项。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> 方法。</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法。</summary>
      <param name="reader">用于读取 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法。</summary>
      <param name="writer">用于编写 XML 节点的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.Version">
      <summary>获取格式化程序使用的联合版本。</summary>
      <returns>格式化程序使用的联合版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将与 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1">
      <summary>一个用于在 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生类与 Atom 1.0 格式之间来回序列化的类。</summary>
      <typeparam name="TSyndicationItem">要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生类。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.#ctor(`0)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生实例创建 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1" /> 类的新实例。</summary>
      <param name="itemToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.CreateItemInstance">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生类的新实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter">
      <summary>一个用于在 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 实例与 Atom 1.0 格式之间来回序列化的类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.#ctor(System.ServiceModel.Syndication.CategoriesDocument)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 创建 <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> 类的新实例。</summary>
      <param name="documentToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.#ctor(System.Type,System.Type)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 创建 <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> 类的新实例。</summary>
      <param name="inlineDocumentType">一个 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />，它可以序列化为服务文档内的一个 &lt;atom:categories&gt; 元素，并且在该元素内指定类别集。</param>
      <param name="referencedDocumentType">一个 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />，它可以序列化为服务文档内的一个 &lt;atom:categories&gt; 元素，并且使用 URI 引用类别集。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 Atom 1.0 类别文档。</summary>
      <returns>一个值，指定 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 Atom 1.0 类别文档。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.CreateInlineCategoriesDocument">
      <summary>创建一个 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />，它可以序列化为服务文档内的一个 atom:categories 元素，并且包含该元素内的类别集。</summary>
      <returns>返回一个可以序列化为服务文档中的 atom:categories 元素的 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.CreateReferencedCategoriesDocument">
      <summary>创建一个 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />，它可以序列化为服务文档内的一个 atom:categories 元素，并且包含元素内的类别集的 URI 引用。</summary>
      <returns>返回一个可以序列化为服务文档中的 atom:categories 元素的 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 实例读取 Atom 1.0 atom:categories 元素。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> 方法。</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />用于读取 XML 文档。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法。</summary>
      <param name="writer">用于编写 XML 节点的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.Version">
      <summary>获取格式化程序使用的联合版本。</summary>
      <returns>格式化程序使用的联合版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将与 <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter">
      <summary>一个格式化程序，该程序使用 Atom 1.0 格式将 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例序列化为 XML 或从 XML 序列化此实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.#ctor">
      <summary>创建基于 Atom 1.0 的 <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.#ctor(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>创建基于 Atom 1.0 的 <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> 类的新实例以序列化指定的服务文档。</summary>
      <param name="documentToWrite">与 Atom 1.0 格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="documentToWrite" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.#ctor(System.Type)">
      <summary>创建基于 Atom 1.0 的 <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> 类的新实例。</summary>
      <param name="documentTypeToCreate">一个对象的实例，该对象派生自与 Atom 1.0 格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="documentTypeToCreate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">指定的 <paramref name="documentTypeToCreate" /> 无效。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>测试指定的 XML 读取器是否包含有效的服务文档。</summary>
      <returns>如果 XML 读取器确实包含有效的服务文档，则为 true；否则为 false。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.CreateDocumentInstance">
      <summary>创建与 Atom 1.0 格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 新实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 的一个实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 XML 读取器中生成 <see cref="T:System.ServiceModelSyndication.ServiceDocument" /> 对象。</summary>
      <param name="reader">从中读取联合源的 XML 读取器。</param>
      <exception cref="T:System.XmlException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">未能对 XML 进行语法分析。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此方法是保留方法，请不要使用。</summary>
      <returns>返回 null。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>从其 XML 表示形式生成 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</summary>
      <param name="reader">从中对 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 对象进行反序列化的 <see cref="T:System.Xml.XmlReader" /> 流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 转换为其 XML 表示形式。</summary>
      <param name="writer">对象要序列化为的 <see cref="T:System.Xml.XmlWriter" /> 流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有与格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 的实例。</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.Version">
      <summary>获取 Atom 发布协议命名空间的名称。</summary>
      <returns>返回“http://www.w3.org/2007/app”。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将与格式化程序关联的 <see cref="T:System.ServiceModelSyndication.ServiceDocument" /> 对象写入指定的 XML 编写器。</summary>
      <param name="writer">格式化程序要写入的 XML 编写器。</param>
      <exception cref="T:System.XmlException">
        <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">与格式化程序关联的服务文档为 null。</exception>
    </member>
    <member name="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1">
      <summary>一个格式化程序，该程序使用 Atom 1.0 格式在派生自 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例的类与 XML 之间来回序列化。</summary>
      <typeparam name="TServiceDocument">派生自 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例的类，该实例将使用 Atom 1.0 格式序列化为 XML 或从 XML 进行反序列化。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the Atom 1.0-based <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter`1" /> class.</summary>
      <param name="documentToWrite">与 Atom 1.0 格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="documentToWrite" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter`1.CreateDocumentInstance">
      <summary>创建与 Atom 1.0 格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 新实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 的实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.CategoriesDocument">
      <summary>表示类别文档。</summary>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocument.AttributeExtensions">
      <summary>获取属性扩展的集合。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocument.BaseUri">
      <summary>
        <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 的基 URI。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Create(System.Collections.ObjectModel.Collection{System.ServiceModel.Syndication.SyndicationCategory})">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</returns>
      <param name="categories">用于初始化 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 新实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例集合。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Create(System.Collections.ObjectModel.Collection{System.ServiceModel.Syndication.SyndicationCategory},System.Boolean,System.String)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 类的新实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</returns>
      <param name="categories">类别的集合。</param>
      <param name="isFixed">一个值，该值指定用户是否可将类别添加到类别文档中。</param>
      <param name="scheme">类别文档的方案。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Create(System.Uri)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 的一个新实例，同时用指定的 <see cref="T:System.Uri" /> 对其初始化。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />。</returns>
      <param name="linkToCategoriesDocument">类别文档的 URI。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocument.ElementExtensions">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 的元素扩展。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.GetFormatter">
      <summary>获取一个 <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" /> 新实例，该实例使用对其调用此方法的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 进行初始化。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocument.Language">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 的语言。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Load(System.Xml.XmlReader)">
      <summary>从 <see cref="T:System.Xml.XmlReader" /> 加载 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.Save(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 保存到 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>将属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocument.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>将元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter">
      <summary>一个充当其他格式化程序（例如 <see cref="T:System.ServiceModel.Syndication.AtomPub10CategoriesDocumentFormatter" />）的基类的抽象类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.#ctor(System.ServiceModel.Syndication.CategoriesDocument)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 创建 <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> 类的新实例。</summary>
      <param name="documentToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 Atom 1.0 类别文档。</summary>
      <returns>一个值，指定 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 Atom 1.0 类别文档。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.CreateInlineCategoriesDocument">
      <summary>创建一个 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />，它可以序列化为服务文档内的一个 atom:categories 元素，并且包含该元素内的类别集。</summary>
      <returns>返回一个可以序列化为服务文档中的 atom:categories 元素的 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.CreateReferencedCategoriesDocument">
      <summary>创建一个 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />，它可以序列化为服务文档内的一个 atom:categories 元素，并且包含元素内的类别集的 URI 引用。</summary>
      <returns>返回一个可以序列化为服务文档中的 atom:categories 元素的 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocumentFormatter.Document">
      <summary>获取类别文档。</summary>
      <returns>返回与此 <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 实例读取 Atom 1.0 atom:categories 元素。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.SetDocument(System.ServiceModel.Syndication.CategoriesDocument)">
      <summary>指定要与 <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />。</summary>
      <param name="document">要与该 <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocumentFormatter.Version">
      <summary>获取格式化程序使用的联合版本。</summary>
      <returns>格式化程序使用的联合版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将与 <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.InlineCategoriesDocument">
      <summary>表示服务文档中的 &lt;atom:categories&gt; 元素。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationCategory})">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 类的新实例。</summary>
      <param name="categories">联合类别的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationCategory},System.Boolean,System.String)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 类的新实例。</summary>
      <param name="categories">联合类别的集合。</param>
      <param name="isFixed">指定是否可将联合类别添加到 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</param>
      <param name="scheme">
        <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 的方案。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.Categories">
      <summary>获取与 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 关联的联合类别的集合。</summary>
      <returns>返回联合类别的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.CreateCategory">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</summary>
      <returns>返回新的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.IsFixed">
      <summary>获取并设置一个值，该值指定是否可将联合类别添加到 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</summary>
      <returns>返回一个指定是否可添加新的联合类别的 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.Scheme">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 的方案。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 的方案。</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument">
      <summary>表示对类别文档的引用。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ReferencedCategoriesDocument.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ReferencedCategoriesDocument.#ctor(System.Uri)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> 类的新实例。</summary>
      <param name="link">所引用的类别文档的 URL。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ReferencedCategoriesDocument.Link">
      <summary>获取和设置类别文档的 URI。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ResourceCollectionInfo">
      <summary>表示由 &lt;atom:collection&gt; 元素表示的资源集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 类的新实例。</summary>
      <param name="title">集合的标题。</param>
      <param name="link">集合的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.CategoriesDocument},System.Boolean)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 类的新实例。</summary>
      <param name="title">集合的标题。</param>
      <param name="link">集合的 URI。</param>
      <param name="categories">类别文档的集合。</param>
      <param name="allowsNewEntries">一个值，该值指定新的 accept&gt; 元素是否可以添加到集合中。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.CategoriesDocument},System.Collections.Generic.IEnumerable{System.String})">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 类的新实例。</summary>
      <param name="title">集合的标题。</param>
      <param name="link">集合的 URI。</param>
      <param name="categories">类别文档的集合。</param>
      <param name="accepts">可以添加到集合中的资源类型的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.String,System.Uri)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 类的新实例。</summary>
      <param name="title">集合的标题。</param>
      <param name="link">集合的 URI。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Accepts">
      <summary>获取可添加到集合中的资源类型的集合。</summary>
      <returns>返回 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.AttributeExtensions">
      <summary>获取属性扩展的集合。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.BaseUri">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 实例的基 URI。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Categories">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> 对象的集合。</summary>
      <returns>返回 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.CreateInlineCategoriesDocument">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.CreateReferencedCategoriesDocument">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> 实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.ElementExtensions">
      <summary>获取服务文档的元素扩展。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Link">
      <summary>获取和设置集合的 URI。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Title">
      <summary>集合的标题。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter">
      <summary>一个用于在 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例与 RSS 2.0 格式之间来回序列化的类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 类的新实例。</summary>
      <param name="feedToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 类的新实例。</summary>
      <param name="feedToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
      <param name="serializeExtensionsAsAtom">一个值，指定是否对在 Atom 1.0 规范中已定义但在 RSS 2.0 规范中未定义的元素进行序列化。 默认值为 true。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.Type)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 类的新实例。</summary>
      <param name="feedTypeToCreate">要序列化的派生自 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 的实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 RSS 2.0 联合源。</summary>
      <returns>一个值，指定 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 RSS 2.0 联合源。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CreateFeedInstance">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.FeedType">
      <summary>派生自与 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 的实例。</summary>
      <returns>派生自与 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 的实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveAttributeExtensions">
      <summary>获取和设置一个值，该值指定是否在序列化过程中保留属性扩展。</summary>
      <returns>一个指定是否在序列化过程中保留属性扩展的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveElementExtensions">
      <summary>获取和设置一个值，该值指定是否在序列化过程中保留元素扩展。</summary>
      <returns>一个指定是否在序列化过程中保留元素扩展的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 实例读取 RSS 2.0 联合源。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例从 <see cref="T:System.Xml.XmlReader" /> 实例读取联合项。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="feed">用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 读入 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的集合。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="feed">要用于创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</param>
      <param name="areAllItemsRead">一个指定是否已从 <see cref="T:System.Xml.XmlReader" /> 实例读取所有 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的值。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.SerializeExtensionsAsAtom">
      <summary>获取和设置一个值，该值指定是否在 Atom 1.0 命名空间中序列化扩展。</summary>
      <returns>一个指定是否在 Atom 1.0 命名空间中序列化扩展的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>设置与 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</summary>
      <param name="feed">要与该 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> 方法。</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.Version">
      <summary>获取格式化程序使用的联合版本。</summary>
      <returns>格式化程序使用的联合版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="item">要写入的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
      <param name="feedBaseUri">源的基 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的集合写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="items">要写入的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例集合。</param>
      <param name="feedBaseUri">源的基 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将与 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1">
      <summary>一个用于将 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生类序列化为 RSS 2.0 格式的类。</summary>
      <typeparam name="TSyndicationFeed">要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生实例创建 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> 类的新实例。</summary>
      <param name="feedToWrite">要序列化的源。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生实例创建 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> 类的新实例。</summary>
      <param name="feedToWrite">要序列化的源。</param>
      <param name="serializeExtensionsAsAtom">一个值，指定是否对在 Atom 1.0 规范中已定义但在 RSS 2.0 规范中未定义的元素进行序列化。 默认值为 true。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.CreateFeedInstance">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生类的新实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter">
      <summary>一个用于在 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例与 RSS 2.0 格式之间来回序列化的类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> 类的新实例。</summary>
      <param name="itemToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem,System.Boolean)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> 类的新实例。</summary>
      <param name="itemToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
      <param name="serializeExtensionsAsAtom">一个值，指定是否对在 Atom 1.0 规范中已定义但在 RSS 2.0 规范中未定义的元素进行序列化。 默认值为 true。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.Type)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> 类的新实例。</summary>
      <param name="itemTypeToCreate">要与 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> 关联的派生自 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 的实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 RSS 2.0 联合项。</summary>
      <returns>一个值，指定 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的 RSS 2.0 联合项。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CreateItemInstance">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.ItemType">
      <summary>获取与 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> 关联的联合项类型。</summary>
      <returns>与 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> 关联的联合项类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveAttributeExtensions">
      <summary>获取或设置一个值，该值指定是否在序列化过程中保留属性扩展。</summary>
      <returns>一个指定是否在序列化过程中保留属性扩展的值。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveElementExtensions">
      <summary>获取或设置一个值，该值指定是否在序列化过程中保留元素扩展。</summary>
      <returns>一个指定是否在序列化过程中保留元素扩展的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 实例读取 RSS 2.0 联合项。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.SerializeExtensionsAsAtom">
      <summary>获取和设置一个值，该值指定是否在 Atom 1.0 命名空间中序列化扩展。</summary>
      <returns>一个指定是否在 Atom 1.0 命名空间中序列化扩展的值。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> 方法。</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法。</summary>
      <param name="reader">用于读取 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>实现 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法。</summary>
      <param name="writer">用于编写 XML 节点的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.Version">
      <summary>获取格式化程序使用的联合版本。</summary>
      <returns>格式化程序使用的联合版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将与 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1">
      <summary>一个用于在 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生类与 RSS 2.0 格式之间来回序列化的类。</summary>
      <typeparam name="TSyndicationItem">要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生实例创建 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> 类的新实例。</summary>
      <param name="itemToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生实例创建 <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> 类的新实例。</summary>
      <param name="itemToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
      <param name="serializeExtensionsAsAtom">一个值，指定是否对在 Atom 1.0 规范中已定义但在 RSS 2.0 规范中未定义的元素进行序列化。 默认值为 true。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.CreateItemInstance">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生类的新实例。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ServiceDocument">
      <summary>表示服务文档。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.Workspace})">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 类的一个新实例，同时使用指定的 <see cref="T:System.ServiceModel.Syndication.Workspace" /> 实例的集合对其进行初始化。</summary>
      <param name="workspaces">工作区的集合。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.AttributeExtensions">
      <summary>获取属性扩展的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.BaseUri">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例的基 URI。</summary>
      <returns>基 URI。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.CreateWorkspace">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.Workspace" /> 实例。</summary>
      <returns>一个新工作区。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.ElementExtensions">
      <summary>获取服务文档的元素扩展。</summary>
      <returns>一个包含元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.GetFormatter">
      <summary>获取一个 <see cref="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.Language">
      <summary>获取和设置服务文档的语言。</summary>
      <returns>服务文档的语言。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Load``1(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 将服务文档加载到 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 派生实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例。</returns>
      <param name="reader">从中读取服务文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <typeparam name="TServiceDocument">服务文档的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Load(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 将服务文档加载到 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例。</returns>
      <param name="reader">从中读取服务文档的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Save(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例保存到指定的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="writer">用于保存服务文档的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>如果成功分析该特性，则为 true；否则为 false。
返回 <see cref="T:System.Boolean" />。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>如果该元素已成功拆分，则为 true；否则为 false。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.Workspaces">
      <summary>获取包含在服务文档内的工作区集合。</summary>
      <returns>工作区的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.ServiceDocumentFormatter">
      <summary>一个充当其他格式化程序（例如 <see cref="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter" />）的基类的抽象类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.#ctor(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> 类的新实例。</summary>
      <param name="documentToWrite">将要序列化的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的服务文档。</summary>
      <returns>如果 XML 读取器包含有效的服务文档，则为 true；否则为 false。</returns>
      <param name="reader">要检查的 XML 读取器。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateCategory(System.ServiceModel.Syndication.InlineCategoriesDocument)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 类的新实例。</summary>
      <returns>返回新的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</returns>
      <param name="inlineCategories">一个用于创建新的类别文档的 <see cref="T:System.ServiceModel.Syndication.InlineCategories" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateCollection(System.ServiceModel.Syndication.Workspace)">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 实例。</summary>
      <returns>返回新的 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 实例。</returns>
      <param name="workspace">一个用于创建新集合的 <see cref="T:System.ServiceModel.Syndication.Workspace" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateDocumentInstance">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例。</summary>
      <returns>返回新的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateInlineCategories(System.ServiceModel.Syndication.ResourceCollectionInfo)">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</summary>
      <returns>返回新的 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> 实例。</returns>
      <param name="collection">要用于创建新 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 的 <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateReferencedCategories(System.ServiceModel.Syndication.ResourceCollectionInfo)">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />。</summary>
      <returns>返回一个新 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />。</returns>
      <param name="collection">用于创建新的 <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> 的 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateWorkspace(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.Workspace" />。</summary>
      <returns>返回一个新 <see cref="T:System.ServiceModel.Syndication.Workspace" />。</returns>
      <param name="document">用于创建新工作区的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocumentFormatter.Document">
      <summary>获取与格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</summary>
      <returns>返回与格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.CategoriesDocument,System.Int32)">
      <summary>加载元素扩展。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to read the element extensions.</param>
      <param name="maxExtensionSize">要加载的元素扩展的最大大小。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.ResourceCollectionInfo,System.Int32)">
      <summary>加载元素扩展。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to load the element extensions.</param>
      <param name="maxExtensionSize">要加载的扩展的最大大小。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.ServiceDocument,System.Int32)">
      <summary>加载元素扩展。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to read the element extensions.</param>
      <param name="maxExtensionSize">要加载的扩展的最大大小。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.Workspace,System.Int32)">
      <summary>加载元素扩展。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to load the element extensions.</param>
      <param name="maxExtensionSize">要加载的扩展的最大大小。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 读取服务文档。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.SetDocument(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>设置要写入的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</summary>
      <param name="document">要写入的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>返回一个指示是否已成功分析属性扩展的 <see cref="T:System.Boolean" />。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="categories">用于分析属性扩展的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>返回一个指示是否已成功分析属性扩展的 <see cref="T:System.Boolean" />。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="collection">用于分析属性的 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>返回一个指示是否已成功分析属性扩展的 <see cref="T:System.Boolean" />。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性扩展。</param>
      <param name="document">用于分析属性扩展的 <see cref="T:System.ServiceModel.Syndication.ServiceDocument" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>试图分析属性扩展</summary>
      <returns>返回一个指示是否已成功分析属性扩展的 <see cref="T:System.Boolean" />。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="workspace">用于分析属性的 <see cref="T:System.ServiceModel.Syndication.Workspace" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>返回一个指示是否已成功分析元素扩展的 <see cref="T:System.Boolean" />。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to parse the element extension.</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>返回一个指示是否已成功分析元素扩展的 <see cref="T:System.Boolean" />。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to parse the element extension.</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>返回一个指示是否已成功分析元素扩展的 <see cref="T:System.Boolean" />。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to parse the element extension.</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>返回一个指示是否已成功分析元素扩展的 <see cref="T:System.Boolean" />。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to parse the element extension.</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocumentFormatter.Version">
      <summary>获取格式化程序的版本。</summary>
      <returns>返回一个包含格式化程序版本的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>写入属性扩展。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to write the element extensions.</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>写入属性扩展。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to write the attribute extensions.</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>写入属性扩展。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to write the attribute extensions.</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>写入属性扩展。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to write the attribute extensions.</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>写入元素扩展。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="categories">用于写入元素扩展的 <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" />。</param>
      <param name="version">要在写入元素扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>写入元素扩展。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to write the element extensions.</param>
      <param name="version">要在写入元素扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>写入元素扩展。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to write the element extensions.</param>
      <param name="version">要在写入元素扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>写入元素扩展。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to write the element extensions.</param>
      <param name="version">要在写入元素扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将服务文档写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationCategory">
      <summary>一个表示联合源类别的类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.ServiceModel.Syndication.SyndicationCategory)">
      <summary>用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 类的新实例。</summary>
      <param name="source">要初始化新 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String)">
      <summary>使用给定名称初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 类的新实例。</summary>
      <param name="name">类别名称。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的名称、方案和标签初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 类的新实例。</summary>
      <param name="name">类别名称。</param>
      <param name="scheme">表示此类别所属的分类方案的统一资源标识符 (URI)。</param>
      <param name="label">描述类别的可读属性。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.AttributeExtensions">
      <summary>获取此类别的属性扩展。</summary>
      <returns>此类别的属性扩展。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.Clone">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例的副本。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.ElementExtensions">
      <summary>获取此类别的元素扩展。</summary>
      <returns>元素扩展的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Label">
      <summary>获取和设置类别的标签。</summary>
      <returns>类别的标签。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Name">
      <summary>获取和设置类别的名称。</summary>
      <returns>类别名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Scheme">
      <summary>获取和设置类别的方案。</summary>
      <returns>类别的方案。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>一个指定是否已成功分析属性扩展的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>一个指定是否已成功分析元素扩展的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>将属性扩展写入指定的编写器。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>将元素扩展写入指定的编写器。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationContent">
      <summary>一个表示联合内容的基类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor(System.ServiceModel.Syndication.SyndicationContent)">
      <summary>用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 类的新实例。</summary>
      <param name="source">要用于初始化新实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.AttributeExtensions">
      <summary>获取此内容的属性扩展。</summary>
      <returns>一个包含此对象的属性扩展的字典。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.Clone">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例的副本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例的副本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateHtmlContent(System.String)">
      <summary>使用指定的 HTML 内容创建新的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</returns>
      <param name="content">内容的文本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreatePlaintextContent(System.String)">
      <summary>使用指定的纯文本内容创建新的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</returns>
      <param name="content">纯文本内容。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateUrlContent(System.Uri,System.String)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 和媒体类型创建新的 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 实例。</returns>
      <param name="url">内容的 <see cref="T:System.Uri" />。</param>
      <param name="mediaType">内容的媒体类型。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXhtmlContent(System.String)">
      <summary>使用指定的 XHTML 内容创建新的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</returns>
      <param name="content">XHTML 内容。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object)">
      <summary>使用指定的数据协定对象创建新的 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例。</returns>
      <param name="dataContractObject">数据协定对象。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的数据协定对象和数据协定序列化程序创建新的 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例。</returns>
      <param name="dataContractObject">数据协定对象。</param>
      <param name="dataContractSerializer">数据协定序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>使用指定的对象和 XML 序列化程序创建新的 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例。</returns>
      <param name="xmlSerializerObject">设置的对象。</param>
      <param name="serializer">XML 序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Xml.XmlReader)">
      <summary>创建 XML 联合内容。</summary>
      <returns>包含新内容的 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 类的实例。</returns>
      <param name="xmlReader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.Type">
      <summary>获取联合内容类型。</summary>
      <returns>联合内容类型的名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>将此 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 对象的内容写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteTo(System.Xml.XmlWriter,System.String,System.String)">
      <summary>在指定的元素和元素命名空间中，将此对象的内容写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="outerElementName">元素的名称。</param>
      <param name="outerElementNamespace">元素的命名空间。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtension">
      <summary>一个表示联合元素扩展的类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object)">
      <summary>使用指定的对象初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 类的新实例。</summary>
      <param name="dataContractExtension">用于初始化扩展的数据协定对象。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的对象和数据协定序列化程序初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 类的新实例。</summary>
      <param name="dataContractExtension">用于初始化扩展的数据协定对象。</param>
      <param name="dataContractSerializer">要使用的数据协定序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>使用指定的对象和 XML 序列化程序初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 类的新实例。</summary>
      <param name="xmlSerializerExtension">用于初始化扩展的对象。</param>
      <param name="serializer">要使用的 XML 序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object)">
      <summary>使用指定的外部名称、外部命名空间和对象初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 类的新实例。</summary>
      <param name="outerName">外层 XML 元素的名称。</param>
      <param name="outerNamespace">外层 XML 元素的命名空间。</param>
      <param name="dataContractExtension">用于初始化扩展的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的外部名称、外部命名空间、对象和数据协定序列化程序初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 类的新实例。</summary>
      <param name="outerName">外层 XML 元素的名称。</param>
      <param name="outerNamespace">外层 XML 元素的命名空间。</param>
      <param name="dataContractExtension">用于初始化扩展的对象。</param>
      <param name="dataContractSerializer">要使用的数据协定序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 类的新实例。</summary>
      <param name="xmlReader">一个 <see cref="T:System.Xml.XmlReader" />，其中包含新 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 的内容。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1">
      <summary>获取表示元素扩展的对象。</summary>
      <returns>一个指定类型的对象，其中包含元素扩展。</returns>
      <typeparam name="TExtension">要检索的扩展的类型。</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">类型不是有效的数据协定。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>获取表示元素扩展的对象。</summary>
      <returns>一个指定类型的对象，其中包含元素扩展。</returns>
      <param name="serializer">要使用的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="TExtension">要检索的扩展的类型。</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">类型不是有效的数据协定。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Xml.Serialization.XmlSerializer)">
      <summary>获取表示元素扩展的对象。</summary>
      <returns>一个指定类型的对象，其中包含元素扩展。</returns>
      <param name="serializer">要使用的 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</param>
      <typeparam name="TExtension">要检索的扩展的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetReader">
      <summary>获取与 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 关联的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <returns>与 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 关联的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterName">
      <summary>获取元素扩展的外部名称。</summary>
      <returns>元素扩展的外部名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterNamespace">
      <summary>获取元素扩展的外部命名空间。</summary>
      <returns>元素扩展的外部命名空间。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.WriteTo(System.Xml.XmlWriter)">
      <summary>将当前扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection">
      <summary>
        <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 对象添加到集合。</summary>
      <param name="extension">要添加的 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 对象。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Runtime.Serialization.DataContractSerializer)">
      <summary>使用指定的数据协定序列化程序将指定的对象添加到集合。</summary>
      <param name="dataContractExtension">要添加到集合中的对象。</param>
      <param name="serializer">要使用的序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>使用指定的 XML 序列化程序将指定的对象添加到集合。</summary>
      <param name="xmlSerializerExtension">要添加到集合中的对象。</param>
      <param name="serializer">要使用的 XML 序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object)">
      <summary>将指定的对象添加到具有指定外部名称和外部命名空间的集合。</summary>
      <param name="outerName">外部名称。</param>
      <param name="outerNamespace">外部命名空间。</param>
      <param name="dataContractExtension">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的数据协定序列化程序将指定的对象添加到具有指定外部名称和外部命名空间的集合。</summary>
      <param name="outerName">外部名称。</param>
      <param name="outerNamespace">外部命名空间。</param>
      <param name="dataContractExtension">要添加到集合中的对象。</param>
      <param name="dataContractSerializer">要使用的序列化程序。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Xml.XmlReader)">
      <summary>将新的联合元素扩展添加到集合。</summary>
      <param name="xmlReader">要从其中读取联合元素扩展的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.GetReaderAtElementExtensions">
      <summary>获取一个具有元素扩展的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <returns>一个包含元素扩展的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String)">
      <summary>读取具有指定名称和命名空间的元素扩展。</summary>
      <returns>元素扩展对象的集合。</returns>
      <param name="extensionName">元素扩展的名称。</param>
      <param name="extensionNamespace">元素扩展的命名空间。</param>
      <typeparam name="TExtension">要读取的扩展的类型。</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">类型不是有效的数据协定。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>读取具有指定名称和命名空间的元素扩展。</summary>
      <returns>元素扩展对象的集合。</returns>
      <param name="extensionName">元素扩展的名称。</param>
      <param name="extensionNamespace">元素扩展的命名空间。</param>
      <param name="serializer">要使用的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="TExtension">要读取的扩展的类型。</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">类型不是有效的数据协定。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Xml.Serialization.XmlSerializer)">
      <summary>读取具有指定名称和命名空间的元素扩展。</summary>
      <returns>元素扩展对象的集合。</returns>
      <param name="extensionName">元素扩展的名称。</param>
      <param name="extensionNamespace">元素扩展的命名空间。</param>
      <param name="serializer">要使用的 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</param>
      <typeparam name="TExtension">要读取的扩展的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeed">
      <summary>表示顶级源对象：Atom 1.0 中为 &lt;feed&gt;，而 RSS 2.0 中为 &lt;rss&gt;。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 对象集合初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</summary>
      <param name="items">
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 对象的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>使用指定的源创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</summary>
      <param name="source">用于初始化新实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
      <param name="cloneItems">一个指定是否克隆源实例中各个项的值。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri)">
      <summary>使用指定的标题、说明和统一资源标识符 (URI) 初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</summary>
      <param name="title">源的标题。</param>
      <param name="description">源的说明。</param>
      <param name="feedAlternateLink">源的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>使用指定的标题、说明、URI 和 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 对象集合初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</summary>
      <param name="title">源的标题。</param>
      <param name="description">源的说明。</param>
      <param name="feedAlternateLink">源的 URI。</param>
      <param name="items">
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 对象的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</summary>
      <param name="title">联合源的标题。</param>
      <param name="description">联合源的说明。</param>
      <param name="feedAlternateLink">联合源的替换 URI。</param>
      <param name="id">联合源的 ID。</param>
      <param name="lastUpdatedTime">包含联合源上次更新时间的 <see cref="T:System.DateTimeOffset" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</summary>
      <param name="title">联合源的标题。</param>
      <param name="description">联合源的说明。</param>
      <param name="feedAlternateLink">联合源的替换 URI。</param>
      <param name="id">联合源的 ID。</param>
      <param name="lastUpdatedTime">包含联合源上次更新时间的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="items">
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 对象的集合。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions">
      <summary>获取属性扩展的集合。</summary>
      <returns>一个包含属性扩展集合的字典。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Authors">
      <summary>获取源作者的集合。</summary>
      <returns>一个表示源作者的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 对象集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.BaseUri">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例的基 URI。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例的基 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Categories">
      <summary>获取源类别的集合。</summary>
      <returns>一个表示源类别的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 对象集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Clone(System.Boolean)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例的副本。</summary>
      <returns>一个重复的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 对象。</returns>
      <param name="cloneItems">一个指定是否克隆 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 对象的值。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Contributors">
      <summary>获取源参与者的集合。</summary>
      <returns>一个表示源参与者的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 对象集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Copyright">
      <summary>获取和设置源的版权信息。</summary>
      <returns>一个表示源版权信息的 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateCategory">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateItem">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateLink">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreatePerson">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Description">
      <summary>获取和设置源的说明。</summary>
      <returns>一个表示源说明的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions">
      <summary>获取源的元素扩展。</summary>
      <returns>一个包含源中元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Generator">
      <summary>获取和设置源的生成器。</summary>
      <returns>生成源的工具名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetAtom10Formatter">
      <summary>获取一个 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter">
      <summary>获取一个 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter(System.Boolean)">
      <summary>获取一个新的 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例。</returns>
      <param name="serializeExtensionsAsAtom">一个指定是否使用 Atom 1.0 命名空间序列化元素和属性扩展的值。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Id">
      <summary>获取和设置源的 ID。</summary>
      <returns>源的 ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ImageUrl">
      <summary>获取和设置源的图像 URL。</summary>
      <returns>源的图像 URL。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Items">
      <summary>获取源中包含的源项的集合。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 对象的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Language">
      <summary>获取和设置源的语言。</summary>
      <returns>写入源时使用的语言名称。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.LastUpdatedTime">
      <summary>获取和设置上次更新源的时间。</summary>
      <returns>一个设置为源上次更新时间的 <see cref="T:System.DateTimeOffset" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Links">
      <summary>获取与源关联的链接。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 对象的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load``1(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 加载一个 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生实例。</summary>
      <returns>一个包含源的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 派生实例。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <typeparam name="TSyndicationFeed">联合源的类型。</typeparam>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load(System.Xml.XmlReader)">
      <summary>从指定的 XML 读取器加载联合源。</summary>
      <returns>一个包含已加载内容的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</returns>
      <param name="reader">要从其中加载源的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>以 Atom 1.0 格式将联合源写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>以 RSS 2.0 格式将联合源写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Title">
      <summary>获取和设置源的标题。</summary>
      <returns>一个包含源标题的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>一个指定是否已成功分析属性扩展的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>一个指定是否已成功分析元素扩展的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeedFormatter">
      <summary>一个充当其他格式化程序（例如 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" />）的基类的抽象类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> 类的新实例。</summary>
      <param name="feedToWrite">要写入的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的联合源。</summary>
      <returns>如果 XML 读取器包含有效的联合源，则为 true；否则为 false。</returns>
      <param name="reader">要检查的 XML 读取器。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</returns>
      <param name="feed">用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</returns>
      <param name="item">用于创建 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateFeedInstance">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateItem(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
      <param name="feed">用于创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 创建 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
      <param name="feed">要用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 创建 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
      <param name="item">要用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</returns>
      <param name="feed">用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</returns>
      <param name="item">用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Feed">
      <summary>获取与格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</summary>
      <returns>与格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="category">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="feed">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="item">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="link">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="person">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 中读入 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例与 <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> 相关联。</summary>
      <param name="feed">要与该 <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ToString">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> 实例的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例分析属性扩展。</summary>
      <returns>如果成功分析该特性，则为 true；否则为 false。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="category">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例分析属性扩展。</summary>
      <returns>如果成功分析该特性，则为 true；否则为 false。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="feed">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例分析属性扩展。</summary>
      <returns>如果成功分析该特性，则为 true；否则为 false。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="item">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例分析属性扩展。</summary>
      <returns>如果成功分析该特性，则为 true；否则为 false。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="link">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例分析属性扩展。</summary>
      <returns>如果成功分析该特性，则为 true；否则为 false。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="person">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例分析联合项内容。</summary>
      <returns>如果内容成功分析，则为 true；否则为 false。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="item">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="contentType">内容类型。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <param name="content">要分析的内容。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例分析元素扩展。</summary>
      <returns>如果已成功拆分该元素，则为 true；否则为 false。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="category">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例分析元素扩展。</summary>
      <returns>如果已成功拆分该元素，则为 true；否则为 false。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="feed">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例分析元素扩展。</summary>
      <returns>如果已成功拆分该元素，则为 true；否则为 false。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="item">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例分析元素扩展。</summary>
      <returns>如果已成功拆分该元素，则为 true；否则为 false。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="link">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例分析元素扩展。</summary>
      <returns>如果已成功拆分该元素，则为 true；否则为 false。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="person">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Version">
      <summary>获取格式化程序的联合版本。</summary>
      <returns>格式化程序的联合版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="category">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="feed">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="item">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="link">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="person">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="category">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="feed">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="item">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="link">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="person">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 写入指定的 <see cref="T:System.Xml.XmlWriter" /> 实例。</summary>
      <param name="writer">要向其中写入 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItem">
      <summary>表示一个源项，例如 RSS &lt;item&gt; 或 Atom &lt;entry&gt;。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</summary>
      <param name="source">用于初始化新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.ServiceModel.Syndication.SyndicationContent,System.Uri,System.String,System.DateTimeOffset)">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</summary>
      <param name="title">联合项的标题。</param>
      <param name="content">包含联合项内容的 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例。</param>
      <param name="itemAlternateLink">联合项的替换 URI。</param>
      <param name="id">联合项的 ID。</param>
      <param name="lastUpdatedTime">包含联合项上次更新时间的 <see cref="T:System.DateTimeOffset" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri)">
      <summary>使用指定的标题、内容和链接初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</summary>
      <param name="title">项标题。</param>
      <param name="content">项内容。</param>
      <param name="itemAlternateLink">项 URL。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</summary>
      <param name="title">联合项的标题。</param>
      <param name="content">联合项的内容。</param>
      <param name="itemAlternateLink">联合项的替换 URI。</param>
      <param name="id">联合项的 ID。</param>
      <param name="lastUpdatedTime">包含联合项上次更新时间的 <see cref="T:System.DateTimeOffset" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.AddPermalink(System.Uri)">
      <summary>将永久链接添加到 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</summary>
      <param name="permalink">指向内容的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.AttributeExtensions">
      <summary>获取联合项的属性扩展。</summary>
      <returns>一个包含属性扩展集合的字典。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Authors">
      <summary>获取联合项的作者。</summary>
      <returns>一个表示联合项作者的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 对象集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.BaseUri">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的基统一资源标识符 (URI)。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 的基 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Categories">
      <summary>获取联合项的联合类别。</summary>
      <returns>一个表示联合项类别的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 对象集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Clone">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例的副本。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Content">
      <summary>获取和设置联合项的内容。</summary>
      <returns>一个包含联合项内容的 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Contributors">
      <summary>获取联合项的参与者。</summary>
      <returns>一个表示联合项参与者的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 对象集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Copyright">
      <summary>获取和设置联合项的版权信息。</summary>
      <returns>一个表示版权信息的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateCategory">
      <summary>创建新类别。</summary>
      <returns>一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateLink">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreatePerson">
      <summary>创建新人员。</summary>
      <returns>一个新的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 对象。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.ElementExtensions">
      <summary>获取联合项中包含的元素扩展。</summary>
      <returns>一个包含元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetAtom10Formatter">
      <summary>获取一个 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter">
      <summary>获取一个 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter(System.Boolean)">
      <summary>获取一个 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> 实例。</returns>
      <param name="serializeExtensionsAsAtom">一个指定是否使用 Atom 1.0 命名空间序列化元素和属性扩展的值。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Id">
      <summary>获取和设置联合项的 ID。</summary>
      <returns>联合项的 ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.LastUpdatedTime">
      <summary>获取和设置联合项的上次更新时间。</summary>
      <returns>一个表示联合项上次更新时间的 <see cref="T:System.DateTimeOffset" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Links">
      <summary>获取联合项中包含的链接。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 对象的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 加载 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load``1(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 加载 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生对象。</summary>
      <returns>包含联合项的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生对象。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <typeparam name="TSyndicationItem">要加载的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 派生类。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.PublishDate">
      <summary>获取和设置联合项的发布日期。</summary>
      <returns>一个表示联合项发布日期的 <see cref="T:System.DateTimeOffset" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>以 Atom 1.0 格式将联合项写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>以 RSS 2.0 格式将联合项写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.SourceFeed">
      <summary>获取和设置联合项的源。</summary>
      <returns>一个联合项所在的 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Summary">
      <summary>获取和设置联合项的摘要。</summary>
      <returns>一个包含项摘要的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Title">
      <summary>获取和设置联合项的标题。</summary>
      <returns>一个包含联合项标题的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>一个指定是否已成功分析属性扩展的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseContent(System.Xml.XmlReader,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>试图分析内容。</summary>
      <returns>一个指定是否已成功分析内容的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="contentType">内容的内容类型。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <param name="content">要向其中加载分析内容的 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>一个指定是否已成功分析元素扩展的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用特定的联合版本将元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItemFormatter">
      <summary>一个充当其他格式化程序（例如 <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />）的基类的抽象类。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> 类的新实例。</summary>
      <param name="itemToWrite">要写入的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>验证指定的 <see cref="T:System.Xml.XmlReader" /> 是否包含有效的联合项。</summary>
      <returns>如果 XML 读取器包含有效的联合项，则为 true；否则为 false。</returns>
      <param name="reader">要检查的 XML 读取器。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例创建 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</returns>
      <param name="item">用于创建 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateItemInstance">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 类的新实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
      <param name="item">要用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</returns>
      <param name="item">用于创建新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Item">
      <summary>获取与格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</summary>
      <returns>与格式化程序关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="category">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="item">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="link">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="person">要向其中加载元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />。</param>
      <param name="maxExtensionSize">元素扩展的最大允许大小（以字节为单位）。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 中读入 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.SetItem(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例与 <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> 相关联。</summary>
      <param name="item">要与该 <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> 关联的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ToString">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> 实例的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例分析属性扩展。</summary>
      <returns>一个指示是否已成功分析该属性的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="category">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例分析属性扩展。</summary>
      <returns>一个指示是否已成功分析该属性的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="item">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例分析属性扩展。</summary>
      <returns>一个指示是否已成功分析该属性的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="link">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例分析属性扩展。</summary>
      <returns>一个指示是否已成功分析该属性的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="person">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>试图使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例分析联合项内容。</summary>
      <returns>一个指示是否已成功分析内容的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="item">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="contentType">内容类型。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <param name="content">要分析的内容。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例分析元素扩展。</summary>
      <returns>一个指示是否已成功分析元素的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="category">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例分析元素扩展。</summary>
      <returns>一个指示是否已成功分析元素的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="item">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例分析元素扩展。</summary>
      <returns>一个指示是否已成功分析元素的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="link">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>尝试使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例分析元素扩展。</summary>
      <returns>一个指示是否已成功分析元素的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="person">要使用的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Version">
      <summary>获取格式化程序的联合版本。</summary>
      <returns>格式化程序的联合版本。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="category">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="item">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="link">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例中的属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="person">包含要写入的属性扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</param>
      <param name="version">要在写入属性扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="category">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="item">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="link">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>使用指定的联合版本将 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例中的元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要向其中写入扩展的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="person">包含要写入的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</param>
      <param name="version">要在写入扩展时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 写入指定的 <see cref="T:System.Xml.XmlWriter" /> 实例。</summary>
      <param name="writer">要向其中写入 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationLink">
      <summary>表示联合源或联合项中的链接。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.ServiceModel.Syndication.SyndicationLink)">
      <summary>使用指定的实例初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 类的新实例。</summary>
      <param name="source">用于初始化新实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="uri">指向链接资源的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri,System.String,System.String,System.String,System.Int64)">
      <summary>使用指定的 <see cref="T:System.Uri" />、关系类型、标题、媒体类型和长度初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 类的新实例。</summary>
      <param name="uri">指向链接资源的 URI。</param>
      <param name="relationshipType">关系类型。</param>
      <param name="title">链接的标题。</param>
      <param name="mediaType">链接的媒体类型。</param>
      <param name="length">链接内容的长度。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.AttributeExtensions">
      <summary>获取链接的属性扩展。</summary>
      <returns>一个包含属性扩展集合的字典。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.BaseUri">
      <summary>获取和设置联合链接的基 URI。</summary>
      <returns>一个包含联合链接的基 URI 的 <see cref="T:System.Uri" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.Clone">
      <summary>创建当前 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例的副本。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 创建新的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 对象。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
      <param name="uri">链接资源的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri,System.String)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 和媒体类型创建新的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 对象。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
      <param name="uri">链接资源的 URI。</param>
      <param name="mediaType">链接的媒体类型。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateMediaEnclosureLink(System.Uri,System.String,System.Int64)">
      <summary>使用指定的 URI、媒体类型和长度创建媒体 enclosure 链接。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
      <param name="uri">链接资源的 URI。</param>
      <param name="mediaType">链接的媒体类型。</param>
      <param name="length">链接内容的长度。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri)">
      <summary>使用指定的 URI 和设置为 self 的关系类型创建新的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
      <param name="uri">指向链接资源的 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri,System.String)">
      <summary>使用指定的 URI、媒体类型和设置为 self 的关系类型创建新的 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 实例。</returns>
      <param name="uri">指向链接资源的 URI。</param>
      <param name="mediaType">链接的媒体类型。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.ElementExtensions">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 的元素扩展。</summary>
      <returns>一个包含 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 的元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.GetAbsoluteUri">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 的绝对 URI。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 实例，其中包含 <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> 的绝对 URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Length">
      <summary>获取和设置链接资源的长度（以字节为单位）。</summary>
      <returns>链接资源的长度。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.MediaType">
      <summary>获取和设置链接资源的媒体类型。</summary>
      <returns>链接资源的媒体类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.RelationshipType">
      <summary>获取和设置链接资源的关系类型。</summary>
      <returns>链接资源的关系类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Title">
      <summary>获取和设置链接资源的标题。</summary>
      <returns>链接资源的标题。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>一个指定是否已成功分析属性扩展的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>一个指定是否已成功分析元素扩展的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Uri">
      <summary>获取和设置链接资源的 URI。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 实例，其中包含链接资源的 URI。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationPerson">
      <summary>表示联合内容的作者或参与者。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor">
      <summary>初始化新的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.ServiceModel.Syndication.SyndicationPerson)">
      <summary>使用指定的实例初始化 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 类的新实例。</summary>
      <param name="source">要初始化新实例的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String)">
      <summary>使用指定的电子邮件地址初始化新的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</summary>
      <param name="email">人员的电子邮件地址。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的电子邮件地址、名称和统一资源标识符 (URI) 初始化新的 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</summary>
      <param name="email">人员的电子邮件地址。</param>
      <param name="name">人员的名称。</param>
      <param name="uri">人员网页的 URI。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.AttributeExtensions">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 的属性扩展。</summary>
      <returns>一个包含属性扩展集合的字典。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.Clone">
      <summary>创建现有 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例的副本。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.ElementExtensions">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 的元素扩展。</summary>
      <returns>一个包含元素扩展的 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Email">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 的电子邮件地址。</summary>
      <returns>人员的电子邮件地址。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Name">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 的名称。</summary>
      <returns>人员的名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>一个指定是否已成功分析属性扩展的值。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>一个指定是否已成功分析元素扩展的值。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
      <exception cref="T:System.Xml.XmlException">读取过程中遇到无效的 XML。</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Uri">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> 的 URI。</summary>
      <returns>人员网站的 URI。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationVersions">
      <summary>一个表示 Windows Communication Foundation (WCF) 所支持的联合版本的类。</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Atom10">
      <summary>表示支持 Atom 1.0 规范。</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Rss20">
      <summary>表示支持 RSS 2.0 规范。</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContent">
      <summary>表示应显示给最终用户的任何 <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> 内容。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.ServiceModel.Syndication.TextSyndicationContent)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例初始化 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 的新实例。</summary>
      <param name="source">
        <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String)">
      <summary>使用指定的文本初始化 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 的新实例。</summary>
      <param name="text">内容的文本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.TextSyndicationContentKind)">
      <summary>使用指定的文本和 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" /> 初始化 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 的新实例。</summary>
      <param name="text">内容的文本。</param>
      <param name="textKind">描述内容的 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.Clone">
      <summary>创建现有 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例的副本。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Text">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 的文本。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 的文本。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Type">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 的内容类型。</summary>
      <returns>一个表示文本联合内容的种类的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> 的内容写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContentKind">
      <summary>一个表示受支持文本联合内容类型的枚举。</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Html">
      <summary>HTML（转义标记）</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Plaintext">
      <summary>纯文本</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.XHtml">
      <summary>XML（未转义）</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.UrlSyndicationContent">
      <summary>表示由其他资源的 URL 组成的联合内容。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.ServiceModel.Syndication.UrlSyndicationContent)">
      <summary>用指定的 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 实例初始化 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 类的新实例。</summary>
      <param name="source">
        <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.Uri,System.String)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 和媒体类型初始化 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 类的新实例。</summary>
      <param name="url">
        <see cref="T:System.Uri" />。</param>
      <param name="mediaType">
        <see cref="T:System.Uri" /> 所引用的资源的媒体类型。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.Clone">
      <summary>创建现有 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 实例的副本。</summary>
      <returns>一个新 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例，其中包含 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 的新副本。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Type">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 的内容类型。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 的内容类型。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Url">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 的 <see cref="T:System.Uri" />。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 实例，其中包含 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 的 URI。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> 实例内容写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Workspace">
      <summary>表示服务文档内的一个工作区。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Workspace" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.ResourceCollectionInfo})">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Workspace" /> 类的新实例并使用指定的标题和集合对其进行初始化。</summary>
      <param name="title">工作区的标题。</param>
      <param name="collections">工作区包含的集合。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor(System.String,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.ResourceCollectionInfo})">
      <summary>创建 <see cref="T:System.ServiceModel.Syndication.Workspace" /> 类的新实例并使用指定的标题和集合对其进行初始化。</summary>
      <param name="title">工作区标题。</param>
      <param name="collections">工作区包含的集合。</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.AttributeExtensions">
      <summary>获取属性扩展的集合。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.BaseUri">
      <summary>获取和设置 <see cref="T:System.ServiceModel.Syndication.Workspace" /> 实例的基 URI。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.Collections">
      <summary>获取与工作区关联的集合。</summary>
      <returns>返回 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.CreateResourceCollection">
      <summary>创建一个新的 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> 实例。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.ElementExtensions">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.Workspace" /> 实例内包含的元素扩展。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.Title">
      <summary>
        <see cref="T:System.ServiceModel.Syndication.Workspace" /> 实例的标题。</summary>
      <returns>返回 <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>试图分析属性扩展。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
      <param name="name">元素的名称。</param>
      <param name="ns">元素的命名空间。</param>
      <param name="value">要分析的属性。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>试图分析元素扩展。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="version">要在分析时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将属性扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>使用指定的联合版本将元素扩展写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="version">要在写入时使用的联合版本。</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.XmlSyndicationContent">
      <summary>表示预期不显示在浏览器中的 XML 联合内容。</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.ServiceModel.Syndication.XmlSyndicationContent)">
      <summary>使用指定的 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例初始化 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 的新实例。</summary>
      <param name="source">
        <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的类型、对象和 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 初始化 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 的新实例。</summary>
      <param name="type">内容的类型。</param>
      <param name="dataContractExtension">数据协定扩展。</param>
      <param name="dataContractSerializer">要使用的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>使用指定的类型、对象和 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 初始化 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 的新实例。</summary>
      <param name="type">内容的类型。</param>
      <param name="xmlSerializerExtension">XML 序列化程序扩展。</param>
      <param name="serializer">要使用的 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.SyndicationElementExtension)">
      <summary>使用指定的类型和 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 初始化 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 的新实例。</summary>
      <param name="type">内容类型通常以 MIME 内容类型表示，例如 application/xml 或 application/xml+customer。</param>
      <param name="extension">要放置在 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 中的 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 类的新实例。</summary>
      <param name="reader">要从其进行读取的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.Clone">
      <summary>创建现有 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 实例的副本。</summary>
      <returns>新 <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> 实例。</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Extension">
      <summary>获取 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />。</summary>
      <returns>一个 <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> 实例。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.GetReaderAtContent">
      <summary>从 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 的内容获取读取器。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 内容中的一个 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1">
      <summary>将指定类型的内容读入 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />。</summary>
      <returns>指定类型的对象。</returns>
      <typeparam name="TContent">要读取的内容的类型。</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>使用指定的序列化程序将指定类型的内容读入 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />。</summary>
      <returns>指定类型的对象。</returns>
      <param name="dataContractSerializer">要使用的 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="TContent">要读取的内容的类型。</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Xml.Serialization.XmlSerializer)">
      <summary>使用指定的序列化程序将指定类型的内容读入 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />。</summary>
      <returns>指定类型的对象。</returns>
      <param name="serializer">要使用的 <see cref="T:System.Xml.Serialization.XmlSerializer" />。</param>
      <typeparam name="TContent">要读取的内容的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">无法将输入 XML 反序列化为请求的类型。</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Type">
      <summary>获取 XML 联合内容的类型。</summary>
      <returns>XML 联合内容类型。</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> 的内容写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension">
      <summary>提供 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> 的扩展以便在将 XPath 消息查询序列化为 XAML 时包含命名空间。</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.#ctor(System.ServiceModel.Dispatcher.XPathMessageContext)">
      <summary>使用要转换的 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> 初始化 <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension" /> 类的新实例。</summary>
      <param name="context">要转换的 XPath 消息上下文。</param>
    </member>
    <member name="P:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.Namespaces">
      <summary>获取此实例中包含的命名空间。</summary>
      <returns>命名空间和前缀的集合。</returns>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>提供 XPath 消息查询中使用的命名空间。</summary>
      <returns>命名空间。</returns>
      <param name="serviceProvider">此操作中未使用的服务提供程序。</param>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter">
      <summary>提供一种用于将 <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> 转换为可序列化为 XAML 的格式的方法。</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>测试是否可将上下文从一个类型转换为此转换器的类型。</summary>
      <returns>如果可以转换类型，则为 true；否则为 false。</returns>
      <param name="context">一个提供格式上下文的类型。</param>
      <param name="sourceType">要转换的类型。</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>测试是否可将某个类型转换为目标类型。</summary>
      <returns>如果转换可以执行，则为 true；否则为 false。</returns>
      <param name="context">一个提供格式上下文的类型。</param>
      <param name="destinationType">一个提供格式上下文的类型。</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将提供的上下文对象转换为该转换器的可进行 XAML 序列化的类型。</summary>
      <returns>转换过程的结果。</returns>
      <param name="context">一个提供格式上下文的类型。</param>
      <param name="culture">有关特定区域性的信息，如日历和数字格式。</param>
      <param name="value">要转换的对象。</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将提供的上下文对象转换为该转换器的可进行 XAML 序列化的类型。</summary>
      <returns>已转换的上下文。</returns>
      <param name="context">一个提供格式上下文的类型。</param>
      <param name="culture">有关特定区域性的信息，如日历和数字格式。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">要将 <paramref name="value" /> 参数转换到的类型。</param>
    </member>
  </members>
</doc>