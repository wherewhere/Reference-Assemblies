<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Activities.Presentation</name>
  </assembly>
  <members>
    <member name="T:System.Activities.Presentation.ActivityDesigner">
      <summary>为所有活动设计器组件提供基类。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.ActivityDesigner" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.GetAutomationIdMemberName">
      <summary>在此重写的方法实现中返回字符串“DisplayName”。</summary>
      <returns>在此重写的方法实现中返回字符串 “DisplayName”。</returns>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.GetAutomationItemStatus">
      <summary>返回自动化项的状态。</summary>
      <returns>自动化项的状态。</returns>
    </member>
    <member name="P:System.Activities.Presentation.ActivityDesigner.Icon">
      <summary>获取或设置与此 <see cref="T:System.Activities.Presentation.ActivityDesigner" /> 关联的图标。</summary>
      <returns>返回一个 <see cref="T:System.Windows.Media.DrawingBrush" />，它表示与此 <see cref="T:System.Activities.Presentation.ActivityDesigner" /> 关联的图标。</returns>
    </member>
    <member name="F:System.Activities.Presentation.ActivityDesigner.IconProperty">
      <summary>标识 <see cref="F:System.Activities.Presentation.ActivityDesigner.IconProperty" /> 依赖属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnApplyTemplate">
      <summary>开始应用模板以创建 <see cref="T:System.Activities.Presentation.ActivityDesigner" /> 的过程。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnEditAnnotation">
      <summary>启动编辑注释时发生的处理。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnModelItemChanged(System.Object)">
      <summary>启动更改模型项是发生的处理。</summary>
      <param name="newItem">新项目。</param>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>开始在释放任何鼠标按钮时进行的处理。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesigner.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>开始在某个未处理的 <see cref="T:System.Windows.Input.Mouse.PreviewMouseDown" /> 附加路由事件在其路由中到达派生自此类的某个元素时进行的处理。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
    </member>
    <member name="T:System.Activities.Presentation.ActivityDesignerOptionsAttribute">
      <summary>指定 <see cref="T:system.Activities.Presentation.ActivityDesigner" />（例如用于构成活动的流程图）的深化和节点查看模式。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ActivityDesignerOptionsAttribute.#ctor">
      <summary>创建 <see cref="M:System.Activities.Presentation.ActivityDesignerOptionsAttribute" /> 类的实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.ActivityDesignerOptionsAttribute.AllowDrillIn">
      <summary>获取或设置一个值，该值指示是否允许在 <see cref="T:system.Activities.Presentation.ActivityDesigner" /> 中深化一个级别。</summary>
      <returns>如果允许在 UI 元素中深化，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Activities.Presentation.ActivityDesignerOptionsAttribute.AlwaysCollapseChildren">
      <summary>获取或设置一个值，该值指示是否始终折叠子节点。</summary>
      <returns>如果始终折叠子节点，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.ActivityDesignerOptionsAttribute.OutlineViewIconProvider">
      <summary>获取或设置大纲视图图标提供程序的功能。</summary>
      <returns>大纲视图标签提供程序的函数。</returns>
    </member>
    <member name="T:System.Activities.Presentation.ArgumentAccessor">
      <summary>用于访问活动实例的、包含一获取/设置委托对的类。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ArgumentAccessor.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.ArgumentAccessor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.ArgumentAccessor.Getter">
      <summary>获取或设置从活动实例中检索参数的方法。</summary>
      <returns>从活动实例中检索参数的方法。</returns>
    </member>
    <member name="P:System.Activities.Presentation.ArgumentAccessor.Setter">
      <summary>获取或设置将参数设置到活动实例中的方法。</summary>
      <returns>设置参数到活动实例中的方法。</returns>
    </member>
    <member name="T:System.Activities.Presentation.CachedResourceDictionaryExtension">
      <summary>提供一个缓存的字典，该字典将资源字典与其 URI 相关联。</summary>
    </member>
    <member name="M:System.Activities.Presentation.CachedResourceDictionaryExtension.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.CachedResourceDictionaryExtension" /> 类的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.CachedResourceDictionaryExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个对象，该对象设置为此标记扩展的目标属性的值。</summary>
      <returns>要在应用了扩展的属性上设置的 <see cref="T:System.Object" /> 值。</returns>
      <param name="serviceProvider">可为标记扩展提供服务的 <see cref="T:System.IServiceProvider" /> 对象。</param>
    </member>
    <member name="P:System.Activities.Presentation.CachedResourceDictionaryExtension.Source">
      <summary>获取或设置与此缓存的资源字典扩展关联的 URI。</summary>
      <returns>与此缓存的资源字典扩展关联的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.ClipboardData">
      <summary>表示使用剪贴板传递的数据。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ClipboardData.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.ClipboardData" /> 类的实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.ClipboardData.Data">
      <summary>获取或设置在剪贴板上传递的数据。</summary>
      <returns>一个类型为 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.Generic.List`1" />，其中包含在剪贴板上传递的数据。</returns>
    </member>
    <member name="P:System.Activities.Presentation.ClipboardData.Metadata">
      <summary>获取或设置在剪贴板上传递的元数据。</summary>
      <returns>一个类型为 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.Generic.List`1" />，其中包含在剪贴板上传递的元数据。</returns>
    </member>
    <member name="P:System.Activities.Presentation.ClipboardData.Version">
      <summary>获取或设置在剪贴板上传递的版本信息。</summary>
      <returns>在剪贴板上传递的版本信息。</returns>
    </member>
    <member name="T:System.Activities.Presentation.ContextItem">
      <summary>表示一个必须从中派生所有上下文项的基类。 该类为抽象类。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ContextItem.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.ContextItem" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.ContextItem.ItemType">
      <summary>在派生类中实现时，获取派生自编辑上下文类的项的类型。</summary>
      <returns>项 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.ContextItem.OnItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem)">
      <summary>表示一个方法，在将上下文项存储在上下文项管理器中之前，将对上下文项调用该方法。 上下文项管理器上的上一项将作为参数传递。</summary>
      <param name="context">正在其中进行更改的 <see cref="T:System.Activities.Presentation.EditingContext" />。</param>
      <param name="previousItem">之前处于活动状态的 <see cref="T:System.Activities.Presentation.ContextItem" />。</param>
    </member>
    <member name="T:System.Activities.Presentation.ContextItemManager">
      <summary>表示一个类，该类维护一组发布到设计器编辑上下文中的上下文项。 该类为抽象类。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.ContextItemManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Contains``1">
      <summary>返回一个值，该值指示项管理器是否包含指定类型的项。</summary>
      <returns>如果上下文包含指定项类型的实例，则为 true；否则为 false。</returns>
      <typeparam name="TItemType">要检查的项的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Contains(System.Type)">
      <summary>在派生类中重写时，返回一个值，该值指示项管理器是否包含指定类型的项。</summary>
      <returns>如果上下文包含指定项类型的实例，则为 true；否则为 false。</returns>
      <param name="itemType">要检查的项的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.GetEnumerator">
      <summary>在派生类中重写时，枚举编辑上下文中的上下文项。 除非枚举器遇到隔离层，否则此枚举包括前面的层。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其中包含上下文项的枚举。</returns>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.GetTarget(System.Delegate)">
      <summary>表示一个可返回委托的目标对象的帮助器方法。 如果创建该委托是为了代理一个泛型委托，则此方法将返回原始对象而非代理。</summary>
      <returns>返回 <see cref="T:System.Object" />，其中包含回调的目标对象。</returns>
      <param name="callback">预期目标的回调。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.GetValue``1">
      <summary>返回所请求的项类型的实例。 如果没有具有给定类型的上下文项，则将创建一个空项。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.ContextItem" />，其中包含所请求的类型的上下文项。 如果在此类型的上下文中没有任何项，则会创建一个默认项。</returns>
      <typeparam name="TItemType">要返回的项的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.GetValue(System.Type)">
      <summary>在派生类中重写时，返回所请求的项类型的实例。 如果没有具有给定类型的上下文项，则将创建一个空项。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.ContextItem" />，其中包含所请求的类型的上下文项。 如果在此类型的上下文中没有任何项，则会创建一个默认项。</returns>
      <param name="itemType">要返回的项的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.NotifyItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem,System.Activities.Presentation.ContextItem)">
      <summary>表示一个帮助器方法，该方法调用受保护的 <see cref="M:System.Activities.Presentation.ContextItem.OnItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem)" /> 方法。</summary>
      <param name="context">使用的 <see cref="T:System.Activities.Presentation.EditingContext" />。</param>
      <param name="item">新的 <see cref="T:System.Activities.Presentation.ContextItem" />。</param>
      <param name="previousItem">上一个 <see cref="T:System.Activities.Presentation.ContextItem" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />、<paramref name="item" /> 或 <paramref name="previousItem" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.RemoveCallback(System.Delegate,System.Delegate)">
      <summary>表示一个帮助器方法，该方法执行委托移除，并对作为泛型回调代理的委托进行解包。</summary>
      <returns>返回 <see cref="T:System.Delegate" />，其中包含应分配给 <paramref name="existing" /> 的新委托。</returns>
      <param name="existing">现有的委托。</param>
      <param name="toRemove">要从 <paramref name="existing" /> 中移除的委托。</param>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.SetValue(System.Activities.Presentation.ContextItem)">
      <summary>当在派生类中重写时，将一个上下文项设置为指定值。</summary>
      <param name="value">要设置到 <see cref="T:System.Activities.Presentation.ContextItem)" /> 中的值。</param>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Subscribe``1(System.Activities.Presentation.SubscribeContextCallback{``0})">
      <summary>添加一个将在指定项类型的上下文项发生更改时进行调用的事件回调。</summary>
      <param name="callback">在 <paramref name="contextItemType" /> 发生更改时调用的 <see cref="T:System.Activities.Presentation.SubscribeContextCallback`1" />。</param>
      <typeparam name="TContextItemType">要订阅的项的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contextItemType" /> 或 <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeContextCallback)">
      <summary>在派生类中重写时，添加一个将在指定项类型的上下文项发生更改时进行调用的事件回调。</summary>
      <param name="contextItemType">要订阅的项的类型。</param>
      <param name="callback">在 <paramref name="contextItemType" /> 发生更改时调用的 <see cref="T:System.Activities.Presentation.SubscribeContextCallback" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contextItemType" /> 或 <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>枚举编辑上下文中的上下文项。</summary>
      <returns>返回 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Unsubscribe``1(System.Activities.Presentation.SubscribeContextCallback{``0})">
      <summary>移除一个订阅。</summary>
      <param name="callback">要移除的 <see cref="T:System.Activities.Presentation.SubscribeContextCallback`1" />。</param>
      <typeparam name="TContextItemType">要从中移除回调的上下文项的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ContextItemManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeContextCallback)">
      <summary>在派生类中重写时，移除一个订阅。</summary>
      <param name="contextItemType">要从中移除回调的上下文项的类型。</param>
      <param name="callback">要移除的 <see cref="T:System.Activities.Presentation.SubscribeContextCallback" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="T:System.Activities.Presentation.CutCopyPasteHelper">
      <summary>提供剪切、复制和粘贴项的功能。</summary>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.CanCopy(System.Activities.Presentation.EditingContext)">
      <summary>验证是否能从指定的编辑上下文中复制项。</summary>
      <returns>如果选定对象的数量大于 0 且 <paramref name="context" /> 不为 null，则为 true；否则为 false。</returns>
      <param name="context">要验证的编辑上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.CanCut(System.Activities.Presentation.EditingContext)">
      <summary>验证是否能从指定的编辑上下文中剪切项。</summary>
      <returns>如果选定对象的数量大于 0 且 <paramref name="context" /> 不为 null，则为 true；否则为 false。</returns>
      <param name="context">要验证的编辑上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.CanPaste(System.Activities.Presentation.EditingContext)">
      <summary>返回一个布尔值，该值指示是否可粘贴指定的对象。</summary>
      <returns>如果指定对象的数量大于 0 且不为 null 则为 true； 否则为 false。</returns>
      <param name="context">粘贴操作的编辑上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.DoCopy(System.Activities.Presentation.EditingContext)">
      <summary>将当前选定的项从指定的编辑上下文复制到剪贴板。</summary>
      <param name="context">从中复制项的编辑上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.DoCut(System.Activities.Presentation.EditingContext)">
      <summary>从编辑上下文中删除当前选定的项。</summary>
      <param name="context">从中移除项的编辑上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.CutCopyPasteHelper.DoPaste(System.Activities.Presentation.EditingContext)">
      <summary>将剪贴板中的项粘贴在指定编辑上下文中的默认位置。</summary>
      <param name="context">将项粘贴到其中的编辑上下文。</param>
    </member>
    <member name="T:System.Activities.Presentation.DefaultTypeArgumentAttribute">
      <summary>指定泛型类型活动的默认类型。</summary>
    </member>
    <member name="M:System.Activities.Presentation.DefaultTypeArgumentAttribute.#ctor(System.Type)">
      <summary>使用指定的默认类型创建 <see cref="T:System.Activities.Presentation.DefaultTypeArgumentAttribute" /> 类的实例。</summary>
      <param name="type">泛型参数的默认 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.DefaultTypeArgumentAttribute.Type">
      <summary>获取由 <see cref="T:System.Activities.Presentation.DefaultTypeArgumentAttribute" /> 存储的类型。</summary>
      <returns>以泛型参数的默认值形式存储的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.DesignerConfigurationService">
      <summary>提供工作流设计器的配置选项。</summary>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.AnnotationEnabled">
      <summary>获取或设置一个值，该值指示是否为“流程图”设计器和“状态机”设计器启用批注。</summary>
      <returns>如果启用该批准，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.AutoConnectEnabled">
      <summary>获取或设置一个值，指示是否为流程图设计器和状态机设计器启用自动连接。</summary>
      <returns>如果为流程图设计器和状态机设计器启用自动连接，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.AutoSplitEnabled">
      <summary>获取或设置一个值，指示是否为流程图设计器和状态机设计器启用自动拆分。</summary>
      <returns>如果为流程图设计器和状态机设计器启用自动拆分，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.AutoSurroundWithSequenceEnabled">
      <summary>获取或设置是否启用包含序列的自动围绕的值。</summary>
      <returns>如果自动环绕序列可以，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.BackgroundValidationEnabled">
      <summary>获取或设置一个值，该值指示是否启用后台验证。</summary>
      <returns>如果已启用后台验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.LoadingFromUntrustedSourceEnabled">
      <summary>获取或设置指示是否启用从不受信任的源进行加载的值。</summary>
      <returns>如果启用从不受信任源加载，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.MultipleItemsContextMenuEnabled">
      <summary>获取或设置一个指示是否已启用多个项上下文菜单的值。</summary>
      <returns>如果启用多个项目上下文菜单，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.MultipleItemsDragDropEnabled">
      <summary>获取或设置指示是否启用多项目拖放操作的值。</summary>
      <returns>如果启用多项拖放操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.NamespaceConversionEnabled">
      <summary>获取或设置一个值，该值指示是否启用命名空间转换。</summary>
      <returns>如果启用命名空间转换，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.PanModeEnabled">
      <summary>获取或设置一个值，该值指示平移模式是否启用。</summary>
      <returns>如果启用平移模式，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.RubberBandSelectionEnabled">
      <summary>获取或设置一个值，该值指示是否橡皮筋选择。</summary>
      <returns>如果启用橡皮筋选择，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.DesignerConfigurationService.TargetFrameworkName">
      <summary>获取或设置要目标.NET Framework 的名称。</summary>
      <returns>目标 .NET Framework 的名称。</returns>
    </member>
    <member name="T:System.Activities.Presentation.DragDropHelper">
      <summary>表示一个帮助器类，用于帮助在 Windows Workflow Designer 内进行拖放。</summary>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.AllowDrop(System.Windows.IDataObject,System.Activities.Presentation.EditingContext,System.Type[])">
      <summary>指示设计器是否可以接受用户拖到它上面的数据。</summary>
      <returns>如果设计器允许拖放操作，则为 true；否则为 false。</returns>
      <param name="draggedDataObject">所拖动的数据对象。</param>
      <param name="context">DragDropHelper 的 <see cref="T:System.Activities.Presentation.EditingContext" />。</param>
      <param name="allowedItemTypes">允许拖动的类型。</param>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.CompletedEffectsFormat">
      <summary>指定拖放操作完成后的预期效果。</summary>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.CompositeViewFormat">
      <summary>包含复合视图的唯一数据格式名称。</summary>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.DoDragMove(System.Activities.Presentation.WorkflowViewElement,System.Windows.Point)">
      <summary>允许使用在 UI 元素工作区的暴露区域上方按下其鼠标左键的鼠标来拖动 UI 元素。</summary>
      <returns>
        <see cref="T:System.Windows.DragDropEffects" /> 枚举的值，它表示在拖放操作期间执行的最终效果。</returns>
      <param name="draggedViewElement">对其进行操作的 UI 元素。</param>
      <param name="referencePoint">拖动点的位置。</param>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.DragAnchorPointFormat">
      <summary>指定拖动操作定位点的格式。</summary>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.DragSourceProperty">
      <summary>指定拖动源。</summary>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetCompositeView(System.Activities.Presentation.WorkflowViewElement)">
      <summary>从指定工作流视图元素中检索复合视图信息。</summary>
      <returns>包含用户界面数据的元素。</returns>
      <param name="workflowViewElement">提供复合视图数据的 <see cref="T:System.Activities.Presentation.WorkflowViewElement" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetCompositeView(System.Windows.DragEventArgs)">
      <summary>从指定拖动事件参数中检索复合视图信息。</summary>
      <returns>复合视图信息。</returns>
      <param name="e">在用户执行拖动操作时引发的事件。</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDragDropAnchorPoint(System.Windows.DragEventArgs)">
      <summary>检索拖放操作的定位点。</summary>
      <returns>定位点。</returns>
      <param name="e">拖动事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDragDropCompletedEffects(System.Windows.DataObject)">
      <summary>返回拖放操作的结果，该操作的行为是由指定 <see cref="T:System.Windows.DataObject" /> 确定的。</summary>
      <returns>一个枚举的进程。</returns>
      <param name="data">一个包含数据的对象，其数据包含拖放操作的效果。</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDraggedModelItem(System.Windows.DragEventArgs)">
      <summary>检索拖放操作中所拖动的对象。</summary>
      <returns>拖动的模型项。</returns>
      <param name="e">拖动事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDraggedModelItems(System.Windows.DragEventArgs)">
      <summary>检索拖放操作中所拖动的模型项。</summary>
      <returns>拖动了的模型项。</returns>
      <param name="e">拖动事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDroppedObject(System.Windows.DependencyObject,System.Windows.DragEventArgs,System.Activities.Presentation.EditingContext)">
      <summary>检索拖放操作中正在放置的对象。</summary>
      <returns>已放置的对象。</returns>
      <param name="dropTarget">拖动的位置。</param>
      <param name="e">拖动事件数据。</param>
      <param name="context">编辑上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.GetDroppedObjects(System.Windows.DependencyObject,System.Windows.DragEventArgs,System.Activities.Presentation.EditingContext)">
      <summary>检索拖放操作中正在放置的对象。</summary>
      <returns>被放置的对象。</returns>
      <param name="dropTarget">拖动的位置。</param>
      <param name="e">拖动事件数据。</param>
      <param name="context">编辑上下文。</param>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.ModelItemDataFormat">
      <summary>指定模型项数据的格式。</summary>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.SetCompositeView(System.Activities.Presentation.WorkflowViewElement,System.Windows.UIElement)">
      <summary>从指定工作流视图元素和拖动源中设置复合视图信息。</summary>
      <param name="workflowViewElement">提供复合视图数据的 <see cref="T:System.Activities.Presentation.WorkflowViewElement" />。</param>
      <param name="dragSource">指示拖动源元素的用户界面类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.DragDropHelper.SetDragDropCompletedEffects(System.Windows.DragEventArgs,System.Windows.DragDropEffects)">
      <summary>设置要在拖放操作期间执行的最终效果。</summary>
      <param name="e">拖动事件数据。</param>
      <param name="completedEffects">拖放操作的预期效果。</param>
    </member>
    <member name="F:System.Activities.Presentation.DragDropHelper.WorkflowItemTypeNameFormat">
      <summary>指定工作流项的类型名称的格式。</summary>
    </member>
    <member name="T:System.Activities.Presentation.EditingContext">
      <summary>包含设计器（例如 <see cref="T:System.Activities.Presentation.WorkflowDesigner" />）的上下文状态信息。 此信息包括永久状态信息，例如设计器中运行的服务的列表。 它还包括由上下文项组成的暂时状态，其中包括当前选定的对象集，以及正用于在设计图面上操作对象的编辑工具。</summary>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.EditingContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.CreateContextItemManager">
      <summary>创建由 <see cref="P:System.Activities.Presentation.EditingContext.Items" /> 属性返回的上下文项管理器的实例。</summary>
      <returns>
        <see cref="T:System.Activites.Design.ContextItemManager" />.</returns>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.CreateServiceManager">
      <summary>创建要从 <see cref="P:System.Activities.Presentation.EditingContext.Services" /> 属性返回的服务管理器的实例。</summary>
      <returns>
        <see cref="T:System.WorkflowModel.Design.ServiceManager" /> 对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.Dispose">
      <summary>立即释放对象使用的任何非托管资源。</summary>
    </member>
    <member name="M:System.Activities.Presentation.EditingContext.Dispose(System.Boolean)">
      <summary>立即释放当前 <see cref="T:System.Activities.Presentation.EditingContext" /> 对象使用的非托管资源。</summary>
      <param name="disposing">如果正在释放此对象，则为 true；如果正在终结对象，则为 false。</param>
    </member>
    <member name="E:System.Activities.Presentation.EditingContext.Disposing">
      <summary>在以下情况下发生：当调用 <see cref="T:System.IDisposable.Dispose" /> 方法时，或者当 <see cref="T:System.Activities.Presentation.EditingContext" /> 对象被终结并被 Microsoft .NET 公共语言语言运行时的垃圾回收器回收时。</summary>
    </member>
    <member name="P:System.Activities.Presentation.EditingContext.Items">
      <summary>返回当前编辑上下文存储的上下文项的本地集合。</summary>
      <returns>此编辑上下文中使用的 <see cref="T:System.Activities.Presentation.ContextItem" /> 对象的 <see cref="T:System.Activities.Presentation.ContextItemManager" /> 集合。</returns>
    </member>
    <member name="P:System.Activities.Presentation.EditingContext.Services">
      <summary>返回当前编辑上下文中使用的服务管理器。</summary>
      <returns>此编辑上下文中使用的 <see cref="T:System.Activities.Presentation.ServiceManager" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.IActivityTemplateFactory">
      <summary>定义工厂方法，类实现该方法来创建封装“占位符”<see cref="T:System.Activities.Activity" /> 对象的模板。</summary>
    </member>
    <member name="M:System.Activities.Presentation.IActivityTemplateFactory.Create(System.Windows.DependencyObject)">
      <summary>创建 <see cref="T:System.Activities.Activity" /> 类的实例，该类表示指定目标对象的预定义设计模式。</summary>
      <returns>一个工作流 <see cref="T:System.Activities.Activity" />。</returns>
      <param name="target">
        <see cref="T:System.Activities.Presentation.IActivityTemplateFactory" /> 的此实例使用的依赖项对象。</param>
    </member>
    <member name="T:System.Activities.Presentation.IActivityTemplateFactory`1">
      <summary>表示泛型的 IActivityTemplateFactory。</summary>
      <typeparam name="T">创建此工厂的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.IActivityTemplateFactory`1.Create(System.Windows.DependencyObject,System.Windows.IDataObject)">
      <summary>创建活动类的实例，该类表示指定目标对象的预定义设计模式。</summary>
      <returns>活动类的实例。</returns>
      <param name="target">
        <see cref="T:System.Activities.Presentation.IActivityTemplateFactory" /> 的此实例使用的依赖项对象。</param>
      <param name="dataObject">活动中的数据对象。</param>
    </member>
    <member name="T:System.Activities.Presentation.IActivityToolboxService">
      <summary>表示用于从设计器中更新工具箱内容的服务。</summary>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.AddCategory(System.String)">
      <summary>将类别添加到工具箱。</summary>
      <param name="categoryName">一个字符串，其中包含要添加的类别的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.AddItem(System.String,System.String)">
      <summary>将项添加到工具箱中的特定类别。</summary>
      <param name="qualifiedTypeName">一个字符串，其中包含要添加的项的限定名。</param>
      <param name="categoryName">一个字符串，其中包含向其中添加新项的类别的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.EnumCategories">
      <summary>获取此工具箱中所有类别的枚举器。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.EnumItems(System.String)">
      <summary>获取此工具箱中指定类别下所有项的枚举器。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
      <param name="categoryName">一个类别，将返回该类别下的所有项。</param>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.RemoveCategory(System.String)">
      <summary>从工具箱中移除类别。</summary>
      <param name="categoryName">一个字符串，其中包含要移除的类别的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.IActivityToolboxService.RemoveItem(System.String,System.String)">
      <summary>从工具箱的特定类别中移除项。</summary>
      <param name="qualifiedTypeName">一个字符串，其中包含要移除的项的限定名。</param>
      <param name="categoryName">一个字符串，其中包含从其中移除项的类别的名称。</param>
    </member>
    <member name="T:System.Activities.Presentation.ICompositeView">
      <summary>提供复制、剪切、移动、删除和粘贴对象的方法。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>返回一个值，该值指示是否可粘贴指定的对象。</summary>
      <returns>如果可以粘贴指定的对象，则为 true；否则为 false。</returns>
      <param name="itemsToPaste">要粘贴的项的列表。</param>
    </member>
    <member name="P:System.Activities.Presentation.ICompositeView.DroppingTypeResolvingOptions">
      <summary>获取或设置用于解析 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 所使用类型的对象。</summary>
      <returns>用于解析 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 所使用类型的对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.ICompositeView.IsDefaultContainer">
      <summary>获取一个值，该值指示当前设计器是否为默认容器。</summary>
      <returns>如果当前设计器为默认容器，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemMoved(System.Activities.Presentation.Model.ModelItem)">
      <summary>在移动操作开始后调用，以完成移动指定的项。</summary>
      <param name="modelItem">要移动的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemsCopied(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在复制操作开始后调用，以完成复制指定的项。</summary>
      <returns>从指定项中克隆的项。</returns>
      <param name="itemsToCopy">要复制的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemsCut(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在剪切操作开始后调用，以完成剪切指定的项。</summary>
      <returns>从指定项中克隆的项。</returns>
      <param name="itemsToCut">要剪切的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemsDelete(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在删除操作开始后调用，以完成删除指定的项。</summary>
      <param name="itemsToDelete">要删除的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeView.OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Presentation.WorkflowViewElement)">
      <summary>在粘贴操作开始后调用，以完成粘贴指定的项。</summary>
      <param name="itemsToPaste">要粘贴的项。</param>
      <param name="metadata">与要粘贴的项关联的元数据。</param>
      <param name="pastePoint">要粘贴项的位置。</param>
      <param name="pastePointReference">对粘贴位置的引用。</param>
    </member>
    <member name="T:System.Activities.Presentation.ICompositeViewEvents">
      <summary>处理在 <see cref="T:System.Activities.Presentation.ICompositeView" /> 项的显示过程中可能发生的事件。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeViewEvents.RegisterCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>注册在复合应用程序的执行过程中查看的自定义控件。</summary>
      <param name="container">包含要注册的自定义控件的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeViewEvents.RegisterDefaultCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>注册在复合应用程序的执行过程中查看的默认控件。</summary>
      <param name="container">包含要注册的默认控件的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeViewEvents.UnregisterCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>注销在复合应用程序的执行过程中查看的自定义控件。</summary>
      <param name="container">包含要注销的自定义控件的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.ICompositeViewEvents.UnregisterDefaultCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>注销在复合应用程序的执行过程中查看的默认控件。</summary>
      <param name="container">包含要注销的默认控件的对象。</param>
    </member>
    <member name="T:System.Activities.Presentation.IIntegratedHelpService">
      <summary>为提供的集成帮助定义 Visual Studio 2010 和 Windows Workflow Designer 之间的协定。</summary>
    </member>
    <member name="M:System.Activities.Presentation.IIntegratedHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>添加上下文特性。</summary>
      <param name="name">要添加的上下文特性的名称。</param>
      <param name="value">要添加的上下文特性的值。</param>
      <param name="keywordType">
        <see cref="E:System.ComponentModel.Design.HelpKeywordType" />，其中包含指示帮助关键字类型的标识符。</param>
    </member>
    <member name="M:System.Activities.Presentation.IIntegratedHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>移除上下文特性。</summary>
      <param name="name">要移除的上下文特性的名称。</param>
      <param name="value">要移除的上下文特性的值。</param>
    </member>
    <member name="M:System.Activities.Presentation.IIntegratedHelpService.ShowHelpFromKeyword(System.String)">
      <summary>显示对应于指定关键字的帮助主题。</summary>
      <param name="helpKeyword">要显示的帮助主题的关键字。</param>
    </member>
    <member name="M:System.Activities.Presentation.IIntegratedHelpService.ShowHelpFromUrl(System.String)">
      <summary>显示对应于指定 URL 的帮助主题。</summary>
      <param name="helpUrl">要显示帮助主题的 URL。</param>
    </member>
    <member name="T:System.Activities.Presentation.IModalService">
      <summary>用于通知宿主应用程序显示了模式对话框。</summary>
    </member>
    <member name="M:System.Activities.Presentation.IModalService.SetModalState(System.Boolean)">
      <summary>通知宿主应用程序当前显示了模式对话框。</summary>
      <param name="isModal">如果设置为 true，则表示当前显示了模式对话框。</param>
    </member>
    <member name="T:System.Activities.Presentation.IMultipleDragEnabledCompositeView">
      <summary>ICompositeView 的一个扩展接口以更好地支持多拖/放。</summary>
    </member>
    <member name="M:System.Activities.Presentation.IMultipleDragEnabledCompositeView.OnItemsMoved(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在拖/放后，源容器将通知其项已被移出。 实现该接口后，即时在单个元素拖/放中也不会调用 ICompositeView.OnItemMoved。</summary>
      <param name="movedItems">已移动的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.IMultipleDragEnabledCompositeView.SortSelectedItems(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>表示方法，其将在项目需要排序时使用。</summary>
      <returns>已排序的项。</returns>
      <param name="selectedItems">要排序的选定项。</param>
    </member>
    <member name="T:System.Activities.Presentation.IWorkflowDesignerStorageService">
      <summary>提供 Windows Workflow Designer 宿主可用于存储和检索数据的服务。</summary>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.AddData(System.String,System.Object)">
      <summary>将指定的键/值对添加到字典中。</summary>
      <param name="key">要添加的数据的键。</param>
      <param name="value">与指定的键关联的数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.ContainsKey(System.String)">
      <summary>返回一个值，该值指示字典是否包含具有指定键的项。</summary>
      <returns>如果字典包含具有指定键的项，则为 true；否则为 false。</returns>
      <param name="key">要检查的键。</param>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.GetData(System.String)">
      <summary>返回与指定键关联的数据。</summary>
      <returns>与指定的键关联的数据。</returns>
      <param name="key">要为其获取数据的键。</param>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.RemoveData(System.String)">
      <summary>从字典中移除与指定键关联的数据。</summary>
      <param name="key">要移除其数据的键。</param>
    </member>
    <member name="M:System.Activities.Presentation.IWorkflowDesignerStorageService.SetData(System.String,System.Object)">
      <summary>更新由指定键标识的现有字典项的数据。</summary>
      <param name="key">要更新其值的项的键。</param>
      <param name="value">要用于更新项的数据。</param>
    </member>
    <member name="T:System.Activities.Presentation.IXamlLoadErrorService">
      <summary>定义 Visual Studio 宿主如何显示 XAML 读取器在加载 XAML 文件时所生成错误的列表。</summary>
    </member>
    <member name="M:System.Activities.Presentation.IXamlLoadErrorService.ShowXamlLoadErrors(System.Collections.Generic.IList{System.Activities.Presentation.XamlLoadErrorInfo})">
      <summary>在 Visual Studio 宿主中显示错误的列表。</summary>
      <param name="errors">读取器在加载 XAML 文件时生成的 <see cref="T:System.Activities.Presentation.XamlLoadErrorInfo" /> 实例的 <see cref="T:System.Collections.Generic.IList`1" />。</param>
    </member>
    <member name="T:System.Activities.Presentation.ObjectReferenceService">
      <summary>Visual Studio 接口集成用于该接口捕获对象的 AppDomain 序列化友好引用。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>用指定的编辑上下文初始化 <see cref="T:System.Activities.Presentation.ObjectReferenceService" /> 类的新实例。</summary>
      <param name="context">当前 WorkflowDesigner 的 EditingContext。</param>
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.AcquireObjectReference(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>通过该对象的 SourceLocation 获取引用，此方法将自动注册要侦听 SourceLocationUpdatedEvent 的对象，如果可能。</summary>
      <returns>对象的 SourceLocation 的引用</returns>
      <param name="startLine">对象的起始行。</param>
      <param name="startColumn">对象的起始列。</param>
      <param name="endLine">对象的结束行。</param>
      <param name="endColumn">对象的结束列。</param>
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.AcquireObjectReference(System.Object)">
      <summary>通过其实际引用获取对象的引用。</summary>
      <returns>对象的引用。</returns>
      <param name="obj">我们需要为其获取引用的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.ReleaseObjectReference(System.Guid)">
      <summary>允许设计师基础结构发布该活动的实际引用，并避免内存泄漏。</summary>
      <param name="objectReferenceId">活动引用。</param>
    </member>
    <member name="E:System.Activities.Presentation.ObjectReferenceService.SourceLocationUpdated">
    </member>
    <member name="M:System.Activities.Presentation.ObjectReferenceService.TryGetObject(System.Guid,System.Object@)">
      <summary>通过其 ObjectReference 获得实际引用至对象。</summary>
      <returns>如果对象的实际引用通过对象引用获得，则为 True；否则为 false。</returns>
      <param name="objectReferenceId">活动引用。</param>
      <param name="obj">如果引用可用，则为已取消引用的活动；否则为 null。</param>
    </member>
    <member name="T:System.Activities.Presentation.PublishServiceCallback">
      <summary>一个委托，该委托引用发布服务实例的方法。</summary>
      <returns>发布的服务的实例。</returns>
      <param name="serviceType">要发布的服务的类型。</param>
    </member>
    <member name="T:System.Activities.Presentation.PublishServiceCallback`1">
      <summary>一个泛型委托，该委托引用发布服务实例的方法。</summary>
      <returns>发布的服务的实例。</returns>
      <typeparam name="TServiceType">要发布的服务的类型。</typeparam>
    </member>
    <member name="T:System.Activities.Presentation.ServiceManager">
      <summary>实现 <see cref="T:System.IserviceProvider" />，并提供对编辑上下文所提供服务的访问。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.ServiceManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Contains``1">
      <summary>返回一个布尔值，该值指示服务器管理器是否包含给定类型的服务。</summary>
      <returns>如果发布了类型为 <paramref name="serviceType" /> 的服务，则为 true；否则为 false。</returns>
      <typeparam name="TServiceType">要检查的服务类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Contains(System.Type)">
      <summary>返回一个布尔值，该值指示服务器管理器是否包含给定类型的服务。</summary>
      <returns>如果发布了类型为 <paramref name="serviceType" /> 的服务，则为 true；否则为 false。</returns>
      <param name="serviceType">要检查的服务类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetEnumerator">
      <summary>检索一个枚举器，该枚举器可用于枚举此服务管理器发布的所有服务。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其中包含所发布服务的枚举。</returns>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetRequiredService``1">
      <summary>检索所请求的服务。</summary>
      <returns>返回作为服务实例的泛型类型。</returns>
      <typeparam name="TServiceType">要检索的服务类型。</typeparam>
      <exception cref="T:System.NotSupportedException">没有给定类型的服务。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetService``1">
      <summary>检索所请求的服务。如果找不到服务，则此方法返回 null。</summary>
      <returns>返回作为服务实例的泛型类型，或者，如果尚未发布服务，则返回 null。</returns>
      <typeparam name="TServiceType">要检索的服务类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetService(System.Type)">
      <summary>检索所请求的服务。如果找不到服务，则此方法返回 null。</summary>
      <returns>返回作为服务实例的 <see cref="T:System.Object" />；或者，如果尚未发布，则返回 null。</returns>
      <param name="serviceType">要检索的服务类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.GetTarget(System.Delegate)">
      <summary>一个可返回委托的目标对象的帮助器方法。 如果创建了委托作为泛型委托的代理，则此方法将正确地返回原始对象，而不是代理。</summary>
      <returns>返回作为回调目标的 <see cref="T:System.Object" />。 如果该回调表示一个静态对象，则此会返回 null。</returns>
      <param name="callback">要为其获取目标的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Publish``1(System.Activities.Presentation.PublishServiceCallback{``0})">
      <summary>发布给定的服务类型，但尚未声明实例。 当该服务被要求时，将调用 PublishServiceCallback 以创建该服务的实例。 只会调用该回调一次。 之后，会将它返回的实例放入缓存。</summary>
      <param name="callback">将在需要服务的实例时调用回调。</param>
      <typeparam name="TServiceType">要发布的服务的类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Activities.Presentation.PublishServiceCallback)">
      <summary>发布指定的服务类型，但不声明实例。 在请求服务时，将调用 Publish 服务回调来创建实例。 只会调用该回调一次。 之后，会将它返回的实例放入缓存。</summary>
      <param name="serviceType">要发布的服务的类型。</param>
      <param name="callback">将在需要服务的实例时调用回调。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceType" /> 已发布。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Object)">
      <summary>发布给定的服务。 服务发布之后，服务实例将保留在服务管理器中，直至释放编辑上下文为止。</summary>
      <param name="serviceType">要发布的服务的类型。</param>
      <param name="serviceInstance">服务的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceInstance" /> 未派生自或实现 <paramref name="serviceType" />，或者 <paramref name="serviceType" /> 已发布。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Publish``1(``0)">
      <summary>发布给定的服务。 服务发布之后，服务实例将保留在服务管理器中，直至释放编辑上下文为止。</summary>
      <param name="serviceInstance">服务的实例。</param>
      <typeparam name="TServiceType">要发布的服务的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceInstance" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.RemoveCallback(System.Delegate,System.Delegate)">
      <summary>一个帮助器方法，该方法执行 Delegate.Remove 操作，并对作为泛型回调代理的委托进行解包。 您应在 <see cref="Overload:System.Activities.Presentation.ServiceManager.UnSubscribe" /> 实现中使用此方法。</summary>
      <returns>返回 <see cref="T:System.Delegate" />，它是分配给现有委托的新值。</returns>
      <param name="existing">要从中移除回调的现有委托。</param>
      <param name="toRemove">要移除的回调。</param>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Subscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})">
      <summary>在某人发布了请求的服务时调用提供的回调。 如果服务已可用，则此方法将立即调用回调。</summary>
      <param name="callback">将在服务可用时通知回调。</param>
      <typeparam name="TServiceType">要订阅的服务的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)">
      <summary>在某人发布了请求的服务时调用提供的回调。 如果服务已可用，则此方法将立即调用回调。</summary>
      <param name="serviceType">要订阅的服务的类型。</param>
      <param name="callback">将在服务可用时通知回调。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>检索一个枚举器，该枚举器可用于枚举此服务管理器发布的所有服务。</summary>
      <returns>返回 <see cref="T:System.Collections.IEnumerator" />，其中包含所发布服务的枚举。</returns>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Unsubscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})">
      <summary>移除服务类型的订阅。</summary>
      <param name="callback">要从订阅中移除的回调对象。</param>
      <typeparam name="TServiceType">要从中移除订阅的服务的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.ServiceManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)">
      <summary>移除服务类型的订阅。</summary>
      <param name="serviceType">要从中移除订阅的服务的类型。</param>
      <param name="callback">要从订阅中移除的回调对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="T:System.Activities.Presentation.SourceLocationUpdatedEventArgs">
      <summary>为 SourceLocationUpdated 事件提供数据。</summary>
    </member>
    <member name="M:System.Activities.Presentation.SourceLocationUpdatedEventArgs.#ctor(System.Guid,System.Activities.Debugger.SourceLocation)">
      <summary>初始化 <see cref="T:System.Activities.Presentation.SourceLocationUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="objectReference">已更改的 ObjectReference 的 Guid。</param>
      <param name="updatedSourceLocation">更新的 SourceLocation。</param>
    </member>
    <member name="P:System.Activities.Presentation.SourceLocationUpdatedEventArgs.ObjectReference">
      <summary>获取已更改的 ObjectReference 的 Guid。</summary>
      <returns>已更改的 ObjectReference 的 Guid。</returns>
    </member>
    <member name="P:System.Activities.Presentation.SourceLocationUpdatedEventArgs.UpdatedSourceLocation">
      <summary>获取或设置更新的源的位置。</summary>
      <returns>更新的源的位置。</returns>
    </member>
    <member name="T:System.Activities.Presentation.SubscribeContextCallback">
      <summary>定义一个将在更改上下文项时调用的回调方法。</summary>
      <param name="item">更改的上下文项。</param>
    </member>
    <member name="T:System.Activities.Presentation.SubscribeContextCallback`1">
      <summary>定义一个将在更改上下文项时调用的回调方法。</summary>
      <param name="item">更改的上下文项。</param>
      <typeparam name="TContextItemType">上下文项的类型。</typeparam>
    </member>
    <member name="T:System.Activities.Presentation.SubscribeServiceCallback">
      <summary>表示作为服务订阅的回调的委托。</summary>
      <param name="serviceType">要订阅的服务的类型。</param>
      <param name="serviceInstance">要订阅的服务的实例。</param>
    </member>
    <member name="T:System.Activities.Presentation.SubscribeServiceCallback`1">
      <summary>表示作为服务订阅的回调的泛型委托。</summary>
      <param name="serviceInstance">要订阅的服务的实例。</param>
      <typeparam name="TServiceType">要订阅的服务的类型。</typeparam>
    </member>
    <member name="T:System.Activities.Presentation.TypeResolvingOptionsAttribute">
      <summary>用于配置 Windows Workflow Designer 如何初始化类型解析器和类型浏览器对话框，以便使用户能够为参数、变量和泛型类型活动选择类型。</summary>
    </member>
    <member name="M:System.Activities.Presentation.TypeResolvingOptionsAttribute.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.TypeResolvingOptionsAttribute" /> 类的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.TypeResolvingOptionsAttribute.#ctor(System.Activities.Presentation.View.TypeResolvingOptions)">
      <summary>使用指定的类型解析选项创建 <see cref="T:System.Activities.Presentation.TypeResolvingOptionsAttribute" /> 类的实例。</summary>
      <param name="options">支持的 <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.TypeResolvingOptionsAttribute.TypeResolvingOptions">
      <summary>获取或设置一些选项，用于配置 Windows Workflow Designer 如何初始化类型解析器和类型浏览器对话框，以便使用户能够为参数、变量和泛型类型活动选择类型。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> 的实例，它指定有关 Workflow Designer 如何初始化类型解析器和类型浏览器对话框以使用户能够为参数、变量和泛型类型活动选择类型的可用选项。</returns>
    </member>
    <member name="T:System.Activities.Presentation.UndoEngine">
      <summary>为设计器提供撤消和重复操作实现。</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>初始化 <see cref="T:System.Activities.Presentation.UndoEngine" /> 类的新实例。</summary>
      <param name="context">编辑上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.AddUndoUnit(System.Activities.Presentation.UndoUnit)">
      <summary>将指定的单元添加到撤消堆栈。</summary>
      <param name="unit">要添加的撤消单元。</param>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.GetRedoActions">
      <summary>检索重复操作的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</summary>
      <returns>重复操作集合上的一个简单迭代器。</returns>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.GetUndoActions">
      <summary>检索撤消操作的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</summary>
      <returns>撤消操作集合上的一个简单迭代器。</returns>
    </member>
    <member name="P:System.Activities.Presentation.UndoEngine.IsUndoRedoInProgress">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示撤消或重复操作是否正在进行。</summary>
      <returns>如果撤消或重复操作正在进行，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.Redo">
      <summary>从重复堆栈中移除最后一个 <see cref="T:System.Activities.Presentation.UndoUnit" /> 实例，并对单元执行重复操作。 然后将 <see cref="T:System.Activities.Presentation.UndoUnit" /> 实例放入撤消堆栈中。</summary>
      <returns>如果此方法成功，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.RedoCompleted">
      <summary>重做操作完成时发生。</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoEngine.Undo">
      <summary>从撤消堆栈中移除最后一个 <see cref="T:System.Activities.Presentation.UndoUnit" /> 实例，并对单元执行撤消操作。 然后将 <see cref="T:System.Activities.Presentation.UndoUnit" /> 实例放入重复堆栈中。</summary>
      <returns>如果此方法成功，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoCompleted">
      <summary>撤销操作完成时发生。</summary>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoRedoBufferChanged">
      <summary>在存放撤消和重复操作的缓冲区更改时发生。</summary>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoUnitAdded">
      <summary>在将撤消单元添加到撤消堆栈时发生。</summary>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoUnitCancelled">
      <summary>在将撤消单元从撤消堆栈取消时发生。</summary>
    </member>
    <member name="E:System.Activities.Presentation.UndoEngine.UndoUnitDiscarded">
      <summary>在从撤消堆栈中移除撤消单元时发生，而不首先执行撤消操作。</summary>
    </member>
    <member name="T:System.Activities.Presentation.UndoUnit">
      <summary>表示单个可撤消工作单元。 此类单元将添加到撤消堆栈，并将提供方法来遍历堆栈并对每个单元执行撤消操作。</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>初始化 <see cref="T:System.Activities.Presentation.UndoUnit" /> 类的新实例。</summary>
      <param name="context">编辑上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.ApplyGlobalState">
      <summary>以根设计器的形式应用保存的设计器。</summary>
    </member>
    <member name="P:System.Activities.Presentation.UndoUnit.Description">
      <summary>获取或设置此撤消单元的说明。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.Redo">
      <summary>重复此撤消单元中包含的内容。</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.SaveGlobalState">
      <summary>保留当前根设计器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnit.Undo">
      <summary>撤消此撤消单元中包含的内容。</summary>
    </member>
    <member name="T:System.Activities.Presentation.UndoUnitEventArgs">
      <summary>表示传递到 <see cref="E:System.Activities.Presentation.UndoEngine.UndoUnitAddedevent" /> 事件的参数。</summary>
    </member>
    <member name="M:System.Activities.Presentation.UndoUnitEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.UndoUnitEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.UndoUnitEventArgs.UndoUnit">
      <summary>获取或设置要传递到 <see cref="E:System.Activities.Presentation.UndoEngine.UndoUnitAddedevent" /> 事件的 <see cref="T:System.Activities.Presentation.UndoUnit" />。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.UndoUnit" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesigner">
      <summary>提供设计器画布，该设计器画布呈现工作流模型正在设计时的可视表示形式。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.WorkflowDesigner" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.Context">
      <summary>获取 <see cref="T:System.Activities.Presentation.EditingContext" /> 对象，该对象是包含在设计器中的所有元素之间的服务共享集合，并用于在主机和设计器之间交互。 服务是通过 <see cref="T:System.Activities.Presentation.EditingContext" /> 发布和请求的。</summary>
      <returns>为工作流设计器的编辑上下文。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.ContextMenu">
      <summary>获取此设计器的上下文菜单。</summary>
      <returns>此设计器的上下文菜单。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.DebugManagerView">
      <summary>获取用于运行时调试的 <see cref="T:System.Activities.Presentation.Debug.DebuggerService" />。</summary>
      <returns>实现 <see cref="T:System.Activities.Presentation.Debug.IDesignerDebugView" /> 的对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Flush">
      <summary>将工作流的当前状态保存到 <see cref="P:System.WorkflowModel.Design.WorkflowDesigner.Text" /> 属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.IsInErrorState">
      <summary>指示 Windows Workflow Designer 是否是错误状态。</summary>
      <returns>如果 Workflow Designer 处于错误状态，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Load">
      <summary>从 <see cref="P:System.Activities.Presentation.WorkflowDesigner.Text" /> 属性中包含的 XAML 中加载工作流。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Load(System.Object)">
      <summary>使用指定的实例加载工作流。</summary>
      <param name="instance">要加载的工作流的根。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Load(System.String)">
      <summary>从指定文件中包含的 XAML 中加载工作流。</summary>
      <param name="fileName">XAML 文件的文件名。</param>
    </member>
    <member name="E:System.Activities.Presentation.WorkflowDesigner.ModelChanged">
      <summary>表示在工作流模型中的内容发生更改时生效的事件处理程序。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.OutlineView">
      <summary>获取工作流设计器视图的大纲视图。</summary>
      <returns>工作流设计器中的大纲视图。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.PropertyInspectorFontAndColorData">
      <summary>以序列化的字典格式设置属性检查器的字体和颜色数据。</summary>
      <returns>以序列化的字典格式中属性检查器的字体和颜色数据。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.PropertyInspectorView">
      <summary>获取通常称为属性网格的属性检查器。</summary>
      <returns>检查器属性。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesigner.Save(System.String)">
      <summary>将工作流保存到 XAML 文件。</summary>
      <param name="fileName">XAML 文件的文件名。</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.Text">
      <summary>获取或设置工作流的 XAML 字符串表示形式。</summary>
      <returns>工作流的 XAML 字符串表示形式。</returns>
    </member>
    <member name="E:System.Activities.Presentation.WorkflowDesigner.TextChanged">
      <summary>在 <see cref="P:System.Activities.Presentation.WorkflowDesigner.Text" /> 属性值更改时发生。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesigner.View">
      <summary>获取允许用户直观地查看和编辑工作流的 UI 元素。 此 UI 元素通常称为工作流画布。</summary>
      <returns>一个允许用户直观地查看和编辑工作流的 UI 元素。</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerColors">
      <summary>使颜色和颜色渐变能够与 Windows Workflow Designer 用户界面中所使用的元素和外壳条形图的各个方面关联。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientBeginColor">
      <summary>获取批注背景的颜色渐变的开始颜色。</summary>
      <returns>用于批注背景颜色渐变的开始颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientBeginColorKey">
      <summary>指定注释背景的颜色渐变的开始颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientEndColor">
      <summary>获取批注背景的颜色渐变的结束颜色。</summary>
      <returns>用于批注背景颜色渐变的结束颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientEndColorKey">
      <summary>指定注释背景的颜色渐变的结尾颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientMiddleColor">
      <summary>获取批注背景的颜色渐变的中间部分颜色。</summary>
      <returns>批注背景的颜色渐变的中间部分颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBackgroundGradientMiddleColorKey">
      <summary>指定注释背景的颜色渐变的中间颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBorderColor">
      <summary>获取批注边框的颜色。</summary>
      <returns>注释边框的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationBorderColorKey">
      <summary>指定注释边框的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonColor">
      <summary>获取批注停靠按钮的颜色。</summary>
      <returns>批注停靠按钮的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonColorKey">
      <summary>指定注释停靠按钮的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverBackgroundColor">
      <summary>获取悬停在批注停靠按钮上的背景色。</summary>
      <returns>悬停在批注停靠按钮的背景色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverBackgroundColorKey">
      <summary>悬指定停在批注停靠按钮的背景色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverBorderColor">
      <summary>获取悬停在批注停靠按钮上的边框颜色。</summary>
      <returns>悬停在批注停靠按钮的边框颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverBorderColorKey">
      <summary>指定悬停在批注停靠按钮的边框色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverColor">
      <summary>获取悬停在批注停靠按钮上的颜色。</summary>
      <returns>悬停在批注停靠按钮的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockButtonHoverColorKey">
      <summary>指定悬停在批注停靠按钮的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockTextColor">
      <summary>获取批注的停靠文本的颜色。</summary>
      <returns>批注的停靠文本的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationDockTextColorKey">
      <summary>指定批注的停靠文本的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.AnnotationUndockTextColor">
      <summary>获取批注的取消停靠的文本的颜色。</summary>
      <returns>批注的消停文本的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.AnnotationUndockTextColorKey">
      <summary>指定批注的取消停靠文本的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBackgroundGradientBeginColor">
      <summary>获取上下文菜单背景的颜色渐变的开始颜色。</summary>
      <returns>上下文菜单背景的颜色渐变的开始颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBackgroundGradientBeginColorKey">
      <summary>指定上下文菜单背景的颜色渐变的开始颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBackgroundGradientEndColor">
      <summary>获取上下文菜单背景的颜色渐变的结束颜色。</summary>
      <returns>上下文菜单背景的颜色渐变的结束颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBackgroundGradientEndColorKey">
      <summary>指定上下文菜单背景的颜色渐变的结束颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBorderColor">
      <summary>获取上下文菜单边框的颜色。</summary>
      <returns>上下文菜单边框的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuBorderColorKey">
      <summary>指定上下文菜单边框的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuIconAreaColor">
      <summary>获取上下文菜单的图标区域的颜色。</summary>
      <returns>上下文菜单的图标区域的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuIconAreaColorKey">
      <summary>指定上下文菜单的图标区域的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextColor">
      <summary>获取上下文菜单中项文本的颜色。</summary>
      <returns>上下文菜单中项文本的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextColorKey">
      <summary>指定上下文菜单中项文本的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextDisabledColor">
      <summary>获取上下文菜单中已禁用项文本的颜色。</summary>
      <returns>上下文菜单中已禁用项文本的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextDisabledColorKey">
      <summary>指定上下文菜单中禁用的项文本的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextHoverColor">
      <summary>获取上下文菜单中项文本的悬停颜色。</summary>
      <returns>上下文菜单中项文本的悬停颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextHoverColorKey">
      <summary>指定上下文菜单中项文本的悬停颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextSelectedColor">
      <summary>获取上下文菜单中选定项文本的颜色。</summary>
      <returns>上下文菜单中选定项文本的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuItemTextSelectedColorKey">
      <summary>指定上下文菜单中选定项文本的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverBeginColor">
      <summary>获取上下文菜单的鼠标悬停开始颜色。</summary>
      <returns>上下文菜单的鼠标悬停开始颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverBeginColorKey">
      <summary>指定上下文菜单的鼠标悬停开始颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverBorderColor">
      <summary>获取上下文菜单边框的鼠标悬停颜色。</summary>
      <returns>上下文菜单边框的鼠标悬停颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverBorderColorKey">
      <summary>指定上下文菜单边框的鼠标悬停颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverEndColor">
      <summary>获取上下文菜单的鼠标悬停结束颜色。</summary>
      <returns>上下文菜单的鼠标悬停结束颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverEndColorKey">
      <summary>指定上下文菜单的鼠标悬停结束颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverMiddle1Color">
      <summary>获取上下文菜单第一个中间部分（位于开始位置之后）的鼠标悬停颜色。</summary>
      <returns>上下文菜单第一个中间部分的鼠标悬停颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverMiddle1ColorKey">
      <summary>指定上下文菜单第一个中间部分（位于开始位置之后）的鼠标悬停颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverMiddle2Color">
      <summary>获取上下文菜单第二个中间部分（位于第一个中间部分之后和结束部分之前）的鼠标悬停颜色。</summary>
      <returns>上下文菜单第二个中间部分的鼠标悬停颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuMouseOverMiddle2ColorKey">
      <summary>指定上下文菜单第二个中间部分（位于第一个中间部分之后和结束部分之前）的鼠标悬停颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuSeparatorColor">
      <summary>获取上下文菜单分隔符的颜色。</summary>
      <returns>上下文菜单分隔符的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.ContextMenuSeparatorColorKey">
      <summary>指定上下文菜单分隔符的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewBackgroundColor">
      <summary>获取设计器视图背景的颜色。</summary>
      <returns>设计器视图背景的 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewBackgroundColorKey">
      <summary>指定要用于设计器视图背景的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllButtonBrush">
      <summary>获取设计器视图中 “全部展开”/“全部折叠” 按钮的画笔。</summary>
      <returns>设计器视图中“全部展开”/“全部折叠”按钮的画笔。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllButtonColorKey">
      <summary>指定设计器视图中“全部展开”/“全部折叠”按钮的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllButtonMouseOverBrush">
      <summary>获取设计器视图中“全部展开”/“全部折叠”按钮的鼠标悬停画笔。</summary>
      <returns>设计器视图中“全部展开”/“全部折叠”按钮的鼠标悬停画笔。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllButtonMouseOverColorKey">
      <summary>指定设计器视图中“全部展开”/“全部折叠”按钮的鼠标悬停颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllPressedBrush">
      <summary>获取设计器视图中 “全部展开”/“全部折叠” 按下的按钮的画笔。</summary>
      <returns>设计器视图中“全部展开”/“全部折叠”按下的按钮的画笔。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewExpandAllCollapseAllPressedColorKey">
      <summary>指定设计器视图中“全部展开”/“全部折叠”按下的按钮的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarCaptionActiveColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 活动设计器外壳条形图视图的标题的颜色。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Color" /> 活动设计器视图外壳条形图的标题的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarCaptionActiveColorKey">
      <summary>指定设计器视图外壳条形图的标题的活动颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarCaptionColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 设计器外壳条形图视图的标题的颜色。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Color" /> 设计器视图外壳条形图的标题的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarCaptionColorKey">
      <summary>指定设计器视图外壳条形图标题的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarColorGradientBeginColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 设计器外壳条形图视图的颜色渐变的开始颜色。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Color" /> 设计器视图外壳条形图的颜色渐变的开始颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarColorGradientBeginKey">
      <summary>指定设计器视图外壳条形图的颜色渐变的开始颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarColorGradientEndColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 设计器外壳条形图视图的颜色渐变的结束颜色。</summary>
      <returns>设计器视图外壳条形图的颜色渐变的结束 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarColorGradientEndKey">
      <summary>指定设计器视图外壳条形图的颜色渐变的结束颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarControlBackgroundColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 设计器视图外壳条形图控件的背景色。</summary>
      <returns>设计器视图外壳条形图控件背景 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarControlBackgroundColorKey">
      <summary>指定设计器视图外壳条形图的控件的背景颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientBeginColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 设计器外壳条形图视图的悬停颜色渐变的开始颜色。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Color" /> 设计器视图外壳条形图的颜色渐变的开始颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientBeginKey">
      <summary>指定设计器视图外壳条形图的颜色渐变的开始悬停颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientEndColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 设计器外壳条形图视图的悬停颜色渐变的结束颜色。</summary>
      <returns>设计器视图外壳条形图的颜色渐变的结束悬停 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientEndKey">
      <summary>指定设计器视图外壳条形图的颜色渐变的结束悬停颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientBeginColor">
      <summary>获取所选定的 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 设计器外壳条形图视图的悬停颜色渐变的开始颜色。</summary>
      <returns>选定设计器视图外壳条形图的颜色渐变的开始 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientBeginKey">
      <summary>指定选定设计器视图外壳条形图的颜色渐变的开始颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientEndColor">
      <summary>获取所选定的 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 设计器外壳条形图视图的悬停颜色渐变的结束颜色。</summary>
      <returns>选定设计器视图外壳条形图的颜色渐变的结束 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientEndKey">
      <summary>指定选定设计器视图外壳条形图的颜色渐变的结束颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewStatusBarBackgroundColor">
      <summary>获取设计器视图状态栏背景的颜色。</summary>
      <returns>设计器视图状态栏背景的 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.DesignerViewStatusBarBackgroundColorKey">
      <summary>指定要用于设计器视图状态栏背景的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonBrush">
      <summary>获取设计器中“流程图表达式”[Flowchart Expression]按钮的画笔。</summary>
      <returns>设计器中“流程图表达式”[Flowchart Expression]按钮的画笔。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonColorKey">
      <summary>指定设计器中“流程图表达式”[Flowchart Expression]按钮的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonMouseOverBrush">
      <summary>获取设计器中“流程图表达式”[Flowchart Expression]按钮的鼠标悬停画笔。</summary>
      <returns>设计器中“流程图表达式”[Flowchart Expression]按钮的鼠标悬停画笔。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonMouseOverColorKey">
      <summary>指定设计器中“流程图表达式”[Flowchart Expression]按钮的鼠标悬停颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonPressedBrush">
      <summary>获取设计器中“流程图表达式”[Flowchart Expression]按下的按钮的画笔。</summary>
      <returns>设计器中“流程图表达式”[Flowchart Expression]按下的按钮的画笔。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FlowchartExpressionButtonPressedColorKey">
      <summary>指定设计器中“流程图表达式”[Flowchart Expression]按下的按钮的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FontFamily">
      <summary>获取<see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 的字体系列。</summary>
      <returns>视图元素的 <see cref="T:System.Windows.Media.FontFamily" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FontFamilyKey">
      <summary>指定要用于字体系列的键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FontSize">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 字体大小。</summary>
      <returns>指示字号的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FontSizeKey">
      <summary>指定要用于字号的键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.FontWeight">
      <summary>获取指定要用于<see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 的字体粗细。</summary>
      <returns>用于视图元素的 <see cref="T:System.Windows.FontWeight" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.FontWeightKey">
      <summary>指定要用于字体粗细的键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.GridViewRowHoverColor">
      <summary>获取网格视图中某一行的悬停颜色。</summary>
      <returns>网格视图中某一行的悬停颜色。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewBackgroundColor">
      <summary>获取大纲视图的背景色。</summary>
      <returns>大纲视图的背景色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewBackgroundColorKey">
      <summary>指定要用于轮廓视图背景的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewCollapsedArrowBorderColor">
      <summary>获取大纲视图的折叠箭头的边框颜色。</summary>
      <returns>大纲视图的折叠箭头的边框颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewCollapsedArrowBorderColorKey">
      <summary>为大纲视图的折叠箭头指定边框颜色。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewCollapsedArrowHoverBorderColor">
      <summary>获取大纲视图的折叠箭头上悬停的边框颜色。</summary>
      <returns>悬停在大纲视图的折叠箭头上的边框颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewCollapsedArrowHoverBorderColorKey">
      <summary>指定悬停在大纲视图的折叠箭头上的边框颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewExpandedArrowBorderColor">
      <summary>获取大纲视图的展开箭头的边框颜色。</summary>
      <returns>大纲视图的扩展箭头的边框颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewExpandedArrowBorderColorKey">
      <summary>为大纲视图的展开箭头指定边框颜色。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewExpandedArrowColor">
      <summary>获取大纲视图的展开箭头的颜色。</summary>
      <returns>大纲视图的扩展箭头的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewExpandedArrowColorKey">
      <summary>为大纲视图的展开箭头指定颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemHighlightBackgroundColor">
      <summary>获取大纲视图中突出显示项目的背景色。</summary>
      <returns>大纲视图中突出显示的项的背景颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemHighlightBackgroundColorKey">
      <summary>指定大纲视图中突出显示项的背景颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemSelectedTextColor">
      <summary>获取大纲视图中所选项目的文本颜色。</summary>
      <returns>大纲视图中所选项的文本颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemSelectedTextColorKey">
      <summary>指定大纲视图中所选项的文本颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemTextColor">
      <summary>获取大纲视图中某项的文本颜色。</summary>
      <returns>大纲视图中某项的文本颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.OutlineViewItemTextColorKey">
      <summary>指定大纲视图中某项的文本颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorBackgroundBrushKey">
      <summary>获取属性检查器背景的画笔键。</summary>
      <returns>属性检查器背景的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorBorderBrushKey">
      <summary>获取属性检查器边框的画笔键。</summary>
      <returns>属性检查器边框的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorCategoryCaptionTextBrushKey">
      <summary>获取属性检查器中类别标题文本的画笔键。</summary>
      <returns>属性检查器中类别标题文本的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorPaneBrushKey">
      <summary>获取属性检查器窗格的画笔键。</summary>
      <returns>属性检查器窗格的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorPopupBrushKey">
      <summary>获取属性检查器弹出窗口的画笔键。</summary>
      <returns>属性检查器弹出窗口的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorSelectedBackgroundBrushKey">
      <summary>获取属性检查器中选定背景的画笔键。</summary>
      <returns>属性检查器中选定背景的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorSelectedForegroundBrushKey">
      <summary>获取属性检查器中选定前景的画笔键。</summary>
      <returns>属性检查器中选定前景的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorTextBrushKey">
      <summary>获取属性检查器文本的画笔键。</summary>
      <returns>属性检查器文本的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarBackgroundBrushKey">
      <summary>获取属性检查器中工具栏背景的画笔键。</summary>
      <returns>属性检查器中工具栏背景的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarItemHoverBackgroundBrushKey">
      <summary>获取属性检查器工具栏中某个悬停项的背景的画笔键。</summary>
      <returns>属性检查器工具栏中某个悬停项的背景的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarItemHoverBorderBrushKey">
      <summary>获取属性检查器工具栏中某个悬停项的边框的画笔键。</summary>
      <returns>属性检查器工具栏中某个悬停项的边框的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarItemSelectedBackgroundBrushKey">
      <summary>获取属性检查器工具栏中某个选定项的背景的画笔键。</summary>
      <returns>属性检查器工具栏中某个选定项的背景的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarItemSelectedBorderBrushKey">
      <summary>获取属性检查器工具栏中某个选定项的边框的画笔键。</summary>
      <returns>属性检查器工具栏中某个选定项的边框的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarSeparatorBrushKey">
      <summary>获取属性检查器工具栏中分隔符的画笔键。</summary>
      <returns>属性检查器工具栏中分隔符的画笔键。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.PropertyInspectorToolBarTextBoxBorderBrushKey">
      <summary>获取属性检查器工具栏中文本框边框的画笔键。</summary>
      <returns>属性检查器工具栏中文本框边框的画笔键。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.RubberBandRectangleColorKey">
      <summary>为橡皮筋儿矩形指定颜色密钥。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementBackgroundColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 的背景色。</summary>
      <returns>工作流视图元素的背景颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementBackgroundColorKey">
      <summary>指定要用于 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 背景的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementBorderColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 边框的颜色。</summary>
      <returns>工作流视图元素边框的 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementBorderColorKey">
      <summary>指定要用于 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 边框的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementCaptionColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 标题的颜色。</summary>
      <returns>用于工作流视图元素标题的 <see cref="T:System.Windows.Media.Color" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementCaptionColorKey">
      <summary>指定要用于 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 标题的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementSelectedBackgroundColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 选定背景的颜色。</summary>
      <returns>工作流视图元素所选背景的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementSelectedBackgroundColorKey">
      <summary>指定要用于 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 的选定背景的颜色键。 此字段为常数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementSelectedBorderColor">
      <summary>获取 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 选定边框的颜色。</summary>
      <returns>工作流视图元素所选边框的颜色。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowDesignerColors.WorkflowViewElementSelectedBorderColorKey">
      <summary>指定 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 选定边框的颜色键。 此字段为常数。</summary>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerIcons">
      <summary>表示工作流设计器图标。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowDesignerIcons.UseWindowsStoreAppStyleIcons">
      <summary>使用 Windows 应用商店应用程序风格图标。</summary>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerIcons.Activities">
      <summary>表示工作流中活动的设计器图标。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.AddToCollection">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.AddToCollection`1" /> 活动的图标。</summary>
      <returns>表示 AddToCollection 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Assign">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Assign" /> 的活动的图标。</summary>
      <returns>表示 Assign 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.CancellationScope">
      <summary>获取或设置一个代表 <see cref="T:System.Activities.Statements.CancellationScope" /> 活动的图标。</summary>
      <returns>表示 CancellationScope 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ClearCollection">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.ClearCollection`1" /> 活动的图标。</summary>
      <returns>表示 ClearCollection 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.CompensableActivity">
      <summary>获取或设置一个代表 <see cref="T:System.Activities.Statements.CompensableActivity" /> 活动的图标。</summary>
      <returns>表示 CompensableActivity 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Compensate">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Compensate" /> 活动的图标。</summary>
      <returns>表示 Compensate 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Confirm">
      <summary>获取或设置一个代表 <see cref="T:System.Activities.Statements.Confirm" /> 的活动的图标。</summary>
      <returns>表示 Confirm 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.CorrelationScope">
      <summary>获取或设置表示 <see cref="T:System.ServiceModel.Activities.CorrelationScope" /> 活动的图标。</summary>
      <returns>表示 CorrelationScope 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.DefaultCustomActivity">
      <summary>获取或设置表示 DefaultCustomActivity 活动的图标。</summary>
      <returns>表示 DefaultCustomActivity 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Delay">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Delay" />活动的图标。</summary>
      <returns>表示 Delay 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.DoWhile">
      <summary>获取或设置一个代表 <see cref="T:System.Activities.Statements.DoWhile" /> 活动的图标。</summary>
      <returns>表示 DoWhile 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ExistsInCollection">
      <summary>获取或设置一个代表 <see cref="T:System.Activities.Statements.ExistsInCollection`1" /> 活动的图标。</summary>
      <returns>表示 ExistsInCollection 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FinalState">
      <summary>获取或设置表示 <see cref="T:System.Activities.Core.Presentation.FinalState" /> 活动的图标。</summary>
      <returns>表示 FinalState 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Flowchart">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Flowchart" /> 的活动的图标。</summary>
      <returns>表示 Flowchart 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FlowDecision">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.FlowDecision" /> 活动的图标。</summary>
      <returns>表示 FlowDecision 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FlowDecisionNode">
      <summary>获取或设置表示 FlowDecisionNode 活动的图标。</summary>
      <returns>表示 FlowDecisionNode 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FlowSwitch">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.FlowSwitch`1" /> 的活动的图标。</summary>
      <returns>表示 FlowSwitch 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.FlowSwitchNode">
      <summary>获取或设置表示 FlowSwitchNode 活动的图标。</summary>
      <returns>表示 FlowSwitchNode 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ForEach">
      <summary>获取或设置一个代表 <see cref="T:System.Activities.Statements.ForEach`1" /> 活动的图标。</summary>
      <returns>表示 ForEach 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.If">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.If" /> 活动的图标。</summary>
      <returns>表示 If 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.InitializeCorrelation">
      <summary>获取或设置表示 InitializeCorrelation 活动的图标。</summary>
      <returns>表示 InitializeCorrelation 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Interop">
      <summary>获取或设置一个代表 <see cref="T:System.Activities.Statements.Interop" /> 活动的图标。</summary>
      <returns>表示 Interop 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.InvokeDelegate">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.InvokeDelegate" /> 活动的图标。</summary>
      <returns>表示 InvokeDelegate 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.InvokeMethod">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.InvokeMethod" /> 活动的图标。</summary>
      <returns>表示 InvokeMethod 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.NoPersistScope">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.NoPersistScope" /> 活动的图标。</summary>
      <returns>表示 NoPersistScope 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Parallel">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Parallel" /> 活动的图标。</summary>
      <returns>表示 Parallel 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ParallelForEach">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.ParallelForEach`1" /> 活动的图标。</summary>
      <returns>表示 ParallelForEach 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Persist">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Persist" /> 活动的图标。</summary>
      <returns>表示 Persist 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Pick">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Pick" /> 活动的图标。</summary>
      <returns>表示 Pick 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.PickBranch">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.PickBranch" /> 活动的图标。</summary>
      <returns>表示 PickBranch 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Receive">
      <summary>获取或设置表示 <see cref="T:System.ServiceModel.Activities.Receive" /> 活动的图标。</summary>
      <returns>表示 Receive 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ReceiveAndSendReply">
      <summary>获取或设置表示 ReceiveAndSendReply 活动的图标。</summary>
      <returns>表示 ReceiveAndSendReply 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.ReceiveReply">
      <summary>获取或设置表示 <see cref="T:System.ServiceModel.Activities.ReceiveReply" /> 活动的图标。</summary>
      <returns>表示 ReceiveReply 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.RemoveFromCollection">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.RemoveFromCollection`1" /> 活动的图标。</summary>
      <returns>表示 RemoveFromCollection 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Rethrow">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Rethrow" /> 活动的图标。</summary>
      <returns>表示 Rethrow 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Send">
      <summary>获取或设置表示 <see cref="T:System.ServiceModel.Activities.Send" /> 活动的图标。</summary>
      <returns>表示 Send 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.SendAndReceiveReply">
      <summary>获取或设置表示 SendAndReceiveReply 活动的图标。</summary>
      <returns>表示 SendAndReceiveReply 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.SendReply">
      <summary>获取或设置表示 <see cref="T:System.ServiceModel.Activities.SendReply" /> 活动的图标。</summary>
      <returns>表示 SendReply 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Sequence">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Sequence" /> 活动的图标。</summary>
      <returns>表示 Sequence 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StartNode">
      <summary>获取或设置表示 StartNode 活动的图标。</summary>
      <returns>表示 StartNode 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.State">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.State" /> 活动的图标。</summary>
      <returns>表示 State 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StateEntry">
      <summary>获取或设置表示 StateEntry 活动的图标。</summary>
      <returns>表示 StateEntry 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StateExit">
      <summary>获取或设置表示 StateExit 的活动的图标。</summary>
      <returns>表示 StateExit 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StateMachine">
      <summary>获取或设置表示<see cref="T:System.Activities.Statements.StateMachine" />的活动的图标。</summary>
      <returns>表示 StateMachine 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.StateTransition">
      <summary>获取或设置表示 StateTransition 活动的图标。</summary>
      <returns>表示 StateTransition 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Switch">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Switch`1" /> 活动的图标。</summary>
      <returns>表示 Switch 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.TerminateWorkflow">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.TerminateWorkflow" /> 活动的图标。</summary>
      <returns>表示 TerminateWorkflow 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.Throw">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.Throw" /> 活动的图标。</summary>
      <returns>表示 Throw 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.TransactedReceiveScope">
      <summary>获取或设置表示 <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" /> 活动的图标。</summary>
      <returns>表示 TransactedReceiveScope 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.TransactionScope">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.TransactionScope" /> 活动的图标。</summary>
      <returns>表示 TransactionScope 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.TryCatch">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.TryCatch" /> 活动的图标。</summary>
      <returns>表示 TryCatch 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.While">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.While" /> 活动的图标。</summary>
      <returns>表示 While 活动的图标。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.Activities.WriteLine">
      <summary>获取或设置表示 <see cref="T:System.Activities.Statements.WriteLine" /> 活动的图标。</summary>
      <returns>表示 WriteLine 活动的图标。</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems">
      <summary>提供上下文菜单中的项。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.Copy">
      <summary>获取或设置复制菜单项。</summary>
      <returns>复制菜单项。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.CopyDisabled">
      <summary>获取或设置禁用复制菜单项。</summary>
      <returns>禁用复制菜单项。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.Cut">
      <summary>获取或设置剪切菜单项。</summary>
      <returns>剪切菜单项。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.CutDisabled">
      <summary>获取或设置禁用剪切菜单项。</summary>
      <returns>禁用截取菜单项。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.Delete">
      <summary>获取或设置删除菜单项。</summary>
      <returns>删除菜单项。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.DeleteDisabled">
      <summary>获取或设置禁用删除菜单项。</summary>
      <returns>禁用删除菜单项。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.Paste">
      <summary>获取或设置粘贴菜单项。</summary>
      <returns>粘贴菜单项。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.ContextMenuItems.PasteDisabled">
      <summary>获取或设置禁用粘贴菜单项。</summary>
      <returns>禁用粘贴菜单项。</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems">
      <summary>工作在工作流设计器中时，提供可用的项。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.ActivityErrorValidation">
      <summary>获取或设置用于显示活动错误验证结果的控件。</summary>
      <returns>用于显示活动错误验证结果的控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.Annotation">
      <summary>获取或设置用于指定批注的控件。</summary>
      <returns>用于指定批注的控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.DeleteButton">
      <summary>获取或设置用于在设计器画布内删除项的控制按钮。</summary>
      <returns>在设计器画布内删除项的控制按钮。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.DeleteDisabledButton">
      <summary>获取或设置要禁用删除按钮。</summary>
      <returns>禁用删除按钮。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.FitToScreen">
      <summary>获取或设置控件，此控件用于缩小设计器组件的尺寸以便设计图面可以容纳这些组件。</summary>
      <returns>如果将该窗体的宽度减少到适合分辨率的宽度，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.MoveDownButton">
      <summary>获取或设置用于在设计图面上向下移动选定组件的按钮控件。</summary>
      <returns>在设计表面下移所选组件的按钮控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.MoveDownDisabledButton">
      <summary>获取或设置禁用下移按钮。</summary>
      <returns>禁用向下移动按钮。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.MoveUpButton">
      <summary>获取或设置用于在设计图面上向上移动选定组件的按钮控件。</summary>
      <returns>在设计表面上移所选组件的按钮控件图面。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.MoveUpDisabledButton">
      <summary>获取或设置禁用上移按钮。</summary>
      <returns>禁用向上移动按钮。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.Overview">
      <summary>获取或设置用于查看整个工作流图的控件。</summary>
      <returns>查看整个工作流图的控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.OverviewWindowCloseButton">
      <summary>获取或设置用于关闭摘要图的按钮控件。</summary>
      <returns>关闭摘要图的按钮控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.PanMode">
      <summary>获取或设置包含平移模式的控件。</summary>
      <returns>包含平移模式的控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.ResizeGrip">
      <summary>获取或设置使窗口可更改其大小的控件。</summary>
      <returns>启用更改其大小的窗口的控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.TextBoxErrorValidation">
      <summary>获取或设置用于显示警告验证结果的控件。</summary>
      <returns>用于显示文本框错误验证结果的控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.WarningValidation">
      <summary>获取或设置用于显示警告验证结果的控件。</summary>
      <returns>用于显示警告验证结果的控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.WorkflowErrorValidation">
      <summary>获取或设置用于显示工作流程错误验证结果的控件。</summary>
      <returns>用于显示工作流程错误验证结果的控件。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowDesignerIcons.DesignerItems.Zoom">
      <summary>获取或设置允许放大窗口的控件。</summary>
      <returns>允许放大窗口的控件。</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowElementDialog">
      <summary>表示工作流元素的对话框。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.WorkflowElementDialog" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.Context">
      <summary>获取或设置与此对话框关联的编辑上下文。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.EditingContext" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.ContextProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowElementDialog.Context" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.EnableMaximizeButton">
      <summary>获取或设置一个布尔值，该值确定是否启用最大化按钮。</summary>
      <returns>如果启用最大化按钮，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.EnableMinimizeButton">
      <summary>获取或设置一个布尔值，该值确定是否启用最小化按钮。</summary>
      <returns>如果启用最小化按钮，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.EnableOk(System.Boolean)">
      <summary>根据指定的值启用或禁用对话框的“确定”按钮。</summary>
      <param name="enabled">此为 true 时启用“确定”按钮；否则禁用该按钮。</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.HelpKeyword">
      <summary>获取或设置用于显示与对话框相关的 F1 帮助主题的关键字。</summary>
      <returns>返回包含关键字的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.ModelItem">
      <summary>获取或设置与此对话框关联的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.ModelItemProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowElementDialog.ModelItem" /> 依赖属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.OnInitialized(System.EventArgs)">
      <summary>引发 Initialized 事件。</summary>
      <param name="e">包含事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.OnModelItemChanged(System.Object)">
      <summary>在派生类中重写时，当 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 更改时发生。</summary>
      <param name="newItem">新的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.OnWorkflowElementDialogClosed(System.Nullable{System.Boolean})">
      <summary>在派生类中重写时，当对话框关闭时执行清理操作。</summary>
      <param name="dialogResult">一个布尔值，该值指示用户如何关闭了对话框。</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.Owner">
      <summary>获取或设置此对话框的所有者。</summary>
      <returns>返回 <see cref="T:System.Windows.DependencyObject" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.Show">
      <summary>显示对话框窗口。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowElementDialog.ShowOkCancel">
      <summary>显示带有“确定”和“取消”按钮的对话框，并在对话框关闭之后返回。</summary>
      <returns>如果用户接受了对话框，则为 true；如果用户取消了对话框，则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.Title">
      <summary>获取或设置此对话框的标题。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.TitleProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowElementDialog.Title" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.WindowResizeMode">
      <summary>获取或设置窗口的大小调整模式。</summary>
      <returns>返回一个 <see cref="T:System.Windows.ResizeMode" /> 值。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.WindowResizeModeProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowElementDialog.WindowResizeMode" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowElementDialog.WindowSizeToContent">
      <summary>获取或设置一个值，该值指示窗口是否自动调整自身大小以适应其内容大小。</summary>
      <returns>返回一个 <see cref="T:System.Windows.SizeToContent" /> 值。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowElementDialog.WindowSizeToContentProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowElementDialog.WindowSizeToContent" /> 依赖属性。</summary>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowFileItem">
      <summary>表示一个 <see cref="T:System.Activities.Presentation.ContextItem" />，它发布在编辑上下文中，并提供有关当前编辑会话所基于的文件的信息。 请注意，<see cref="T:System.Activities.Presentation.WorkflowFileItem" /> 值可能为 null，例如，如果 <see cref="T:System.Activities.Presentation.WorkflowDesigner" /> 直接对对象实例进行操作，并且未序列化为基于文件的格式，则会出现此情况。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowFileItem.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.WorkflowFileItem" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowFileItem.ItemType">
      <summary>返回此文件项的项类型。</summary>
      <returns>返回 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowFileItem.LoadedFile">
      <summary>返回所加载的文件的名称。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowItemPresenter">
      <summary>提供一个可视化的编辑器来编辑 ModelItem 对象，并为用户提供一个区域来拖放和以其他方式编辑组合元素。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.AllowedItemType">
      <summary>获取或设置 AllowedItemType。</summary>
      <returns>一个包含允许项的 Type。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.AllowedItemTypeProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.AllowedItemType" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.DroppingTypeResolvingOptions">
      <summary>获取或设置 <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> 的 <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" />。</summary>
      <returns>返回一个 <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.DroppingTypeResolvingOptionsProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.DroppingTypeResolvingOptions" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.HintText">
      <summary>获取或设置包含 <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> 控件的提示文本的字符串。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> 控件的提示文本。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.HintTextProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.HintText" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.IsDefaultContainer">
      <summary>获取或设置一个值，该值指示此容器是否为默认容器。</summary>
      <returns>如果这是默认容器，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.IsDefaultContainerProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.IsDefaultContainer" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemPresenter.Item">
      <summary>获取或设置 <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> 控件的当前项。</summary>
      <returns>与 <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> 控件关联的 ModelItem。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemPresenter.ItemProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.Item" /> 依赖属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>返回一个值，该值指示是否可粘贴指定的对象。</summary>
      <returns>如果可以粘贴指定的对象，则为 true；否则为 false。</returns>
      <param name="itemsToPaste">要粘贴的项的列表。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemMoved(System.Activities.Presentation.Model.ModelItem)">
      <summary>在移动操作开始后调用，以完成移动指定的项。</summary>
      <param name="modelItem">要移动的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemsCopied(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在复制操作开始后调用，以完成复制指定的项。</summary>
      <returns>从指定项中克隆的项。</returns>
      <param name="itemsToCopy">要复制的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemsCut(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在剪切操作开始后调用，以完成剪切指定的项。</summary>
      <returns>从指定项中克隆的项。</returns>
      <param name="itemsToCut">要剪切的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemsDelete(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在删除操作开始后调用，以完成删除指定的项。</summary>
      <param name="itemsToDelete">要删除的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemPresenter.System#Activities#Presentation#ICompositeView#OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Presentation.WorkflowViewElement)">
      <summary>在粘贴操作开始后调用，以完成粘贴指定的项。</summary>
      <param name="itemsToPaste">要粘贴的项。</param>
      <param name="metaData">与要粘贴的项关联的元数据。</param>
      <param name="pastePoint">要粘贴项的位置。</param>
      <param name="pastePointReference">对粘贴位置的引用。</param>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowItemsPresenter">
      <summary>表示一个控件，该控件可用于在设计图面上呈现对象的集合。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.AllowedItemType">
      <summary>获取或设置呈现器支持的项目的类型。</summary>
      <returns>呈现器支持的项目 Type。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.AllowedItemTypeProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.AllowedItemType" /> 依赖属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>返回一个布尔值，该值指示是否可粘贴指定的对象。</summary>
      <returns>如果可以粘贴指定的对象列表，则为 true；否则为 false。</returns>
      <param name="itemsToPaste">要粘贴的对象列表。</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.DroppingTypeResolvingOptions">
      <summary>获取或设置用于解析 <see cref="T:System.Activities.Presentation.WorkflowItemPresenter" /> 所使用类型的对象。</summary>
      <returns>一个 <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> 对象，<see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 使用该对象解析类型。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.DroppingTypeResolvingOptionsProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemPresenter.DroppingTypeResolvingOptions" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.FooterTemplate">
      <summary>获取或设置 DataTemplate，它定义如何显示 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的注脚部分。</summary>
      <returns>一个 DataTemplate，它定义如何显示 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的注脚部分。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.FooterTemplateProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.FooterTemplate" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.HeaderTemplate">
      <summary>获取或设置 DataTemplate，它定义如何显示 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的标头部分。</summary>
      <returns>一个 DataTemplate，它定义如何显示 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的标头部分。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.HeaderTemplateProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.HeaderTemplate" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.HintText">
      <summary>获取或设置包含 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的提示文本的字符串。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的提示文本。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.HintTextProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.HintText" /> 依赖属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.IndexProperty">
      <summary>索引依赖项属性标标识符。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.IsDefaultContainer">
      <summary>获取或设置指示当前设计器是否容器的布尔值。</summary>
      <returns>如果当前设计器为默认容器，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.IsDefaultContainerProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.IsDefaultContainer" /> 依赖属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.Items">
      <summary>获取或设置用于生成 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 的内容的集合。</summary>
      <returns>用于生成 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 的内容的 ModelItemCollection。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanel">
      <summary>获取或设置模板，它定义了控制项的布局的面板。</summary>
      <returns>一个 ItemsPanelTemplate，它定义了用于项的布局的面板。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanelProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.ItemsPanel" /> 依赖属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.ItemsProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.Items" /> 依赖属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnCreateAutomationPeer">
      <summary>返回 avalon1 基础结构特定于 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 的 AutomationPeer 实现。 在派生类中实现此方法可为此事件添加类处理。</summary>
      <returns>特定于类型的 AutomationPeer 实现。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>在将对象拖入控件的边界时发生。</summary>
      <param name="e">为拖动事件提供数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnDragOver(System.Windows.DragEventArgs)">
      <summary>将对象拖过控件的边界时发生。</summary>
      <param name="e">为拖动事件提供数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnDrop(System.Windows.DragEventArgs)">
      <summary>在将对象拖入 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的边界时调用。 在派生类中实现此方法可为此事件添加类处理。</summary>
      <param name="e">包含事件数据的 DragEventArgs 实例。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnInitialized(System.EventArgs)">
      <summary>在初始化 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 对象时调用。 在派生类中实现此方法可为此事件添加类处理。</summary>
      <param name="e">包含事件数据的 EventArgs 实例。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemMoved(System.Activities.Presentation.Model.ModelItem)">
      <summary>向 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 通知有关 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 已移动的信息。</summary>
      <param name="modelItem">所移动的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsCopied(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在克隆指定 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 实例时发生。</summary>
      <returns>复制项。</returns>
      <param name="itemsToCopy">要复制的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 实例。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsCut(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在剪切指定 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 实例时发生。</summary>
      <returns>
        <paramref name="itemsToCut" /> 的克隆。</returns>
      <param name="itemsToCut">要剪切的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 实例。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsDelete(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在删除指定 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 实例时发生。</summary>
      <param name="itemsToDelete">要删除的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 实例。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsMoved(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>在移动操作开始后调用，以完成移动指定的项。</summary>
      <param name="movedItems">已移除的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Presentation.WorkflowViewElement)">
      <summary>将指定 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 实例粘贴到指定位置。</summary>
      <param name="itemsToPaste">要粘贴的项。</param>
      <param name="metaData">要粘贴的与项关联的元数据。</param>
      <param name="pastePoint">粘贴的位置。</param>
      <param name="pastePointReference">对粘贴点的引用。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowItemsPresenter.SortSelectedItems(System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem})">
      <summary>对选定项排序。</summary>
      <returns>该已排序项的列表。</returns>
      <param name="selectedItems">要排序的选定的项。</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplate">
      <summary>获取或设置定义如何显示 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的分隔的 DataTemplate。</summary>
      <returns>一个 DataTemplate，它定义如何显示 <see cref="T:System.Activities.Presentation.WorkflowItemsPresenter" /> 控件的分隔。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplateProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowItemsPresenter.SpacerTemplate" /> 依赖属性。</summary>
    </member>
    <member name="T:System.Activities.Presentation.WorkflowViewElement">
      <summary>指定任意 UI 元素的基类，该元素显示在 wf2设计器画布上，并以可视方式表示可编辑的原子项的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.Collapsible">
      <summary>获取或设置一个值，该值指示元素是否可折叠。</summary>
      <returns>如果元素可折叠，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.CompositeViews">
      <summary>获取所有复合视图的列表。</summary>
      <returns>所有复合视图的列表。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.Context">
      <summary>获取或设置由工作流设计器中包含的所有元素共享的编辑上下文。</summary>
      <returns>工作流设计器的 <see cref="T:System.Activities.Presentation.EditingContext" /> 对象，其中包含工作流视图元素。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.ContextProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowViewElement.Context" /> 依赖属性。 此字段为只读字段。</summary>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.DefaultCompositeView">
      <summary>获取默认复合视图。</summary>
      <returns>默认复合视图。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.Designer">
      <summary>获取与工作流视图元素关联的设计器。</summary>
      <returns>与工作流视图元素关联的设计器。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.DragHandle">
      <summary>获取或设置用于工作流视图元素的拖动处理。</summary>
      <returns>工作流视图元素的拖动柄。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ExpandState">
      <summary>获取或设置一个值，该值指示是否已展开该元素的视图状态。</summary>
      <returns>如果元素的视图状态为已展开，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.ExpandStateProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowViewElement.ExpandState" /> 依赖属性。 此字段为只读字段。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.GetAutomationHelpText">
      <summary>在派生类中实现时，检索自动化帮助文本。</summary>
      <returns>默认实现是返回一个空的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.GetAutomationIdMemberName">
      <summary>在派生类中实现时，获取与用作自动化 ID 的元素关联的模型项的属性。</summary>
      <returns>要用作一个自动化 ID 的名称。 基类总是返回 null。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.GetAutomationItemStatus">
      <summary>在派生类中实现时，检索自动化项状态。</summary>
      <returns>默认实现是返回一个空的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.IsReadOnly">
      <summary>获取或设置一个值，该值指示工作流视图元素是否为只读。</summary>
      <returns>如果元素为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.IsRootDesigner">
      <summary>获取或设置一个值，该值指示此指定设计器是否为此元素的根设计器。</summary>
      <returns>如果指定的设计器为此根设计器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ModelItem">
      <summary>获取或设置与工作流视图元素关联的基础 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 对象。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 对象是模型实例或基础工作流的内存中表示形式周围的包装。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.ModelItemProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowViewElement.ModelItem" /> 依赖属性。 此字段为只读字段。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnContextMenuLoaded(System.Windows.Controls.ContextMenu)">
      <summary>在加载上下文菜单时调用。 在派生类中实现此方法可处理此事件。</summary>
      <param name="menu">加载的 <see cref="T:System.Windows.Controls.ContextMenu" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnCreateAutomationPeer">
      <summary>返回 avalon1 基础结构特定于 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</summary>
      <returns>特定于类型的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</returns>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>引发 <see cref="E:System.Windows.UIElement.DragEnter" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnDragOver(System.Windows.DragEventArgs)">
      <summary>引发 <see cref="E:System.Windows.UIElement.DragOver" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnEditAnnotation">
      <summary>当动画编辑时发生。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnInitialized(System.EventArgs)">
      <summary>引发 <see cref="E:System.Windows.FrameworkElement.Initialized" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnModelItemChanged(System.Object)">
      <summary>在基础模型项发生更改时调用。 在派生类中实现此方法可处理此事件。</summary>
      <param name="newItem">一个表示模型项的已更改状态的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>在按下鼠标按钮时调用。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> 实例。 此事件数据报告有关按下的鼠标按钮和已处理状态的详细信息。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>在移动鼠标时调用。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Input.MouseEventArgs" /> 实例。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>在释放鼠标按钮时调用。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> 实例。 事件数据将报告已释放了鼠标按钮。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>当附加到指定事件的某个未处理的拖动在其路由中进入派生自此类的某个元素时调用。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>当附加到指定事件的某个未处理的拖动在其路由中离开派生自此类的某个元素时调用。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.DragEventArgs" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>当附加到指定事件的某个未处理的鼠标释放在其路由中到达派生自此类的某个元素时调用。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。 事件数据将报告已释放了一个或多个鼠标按钮。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnReadOnlyChanged(System.Boolean)">
      <summary>在只读属性发生更改时调用。</summary>
      <param name="isReadOnly">如果该元素为只读，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.OnShowExpandedChanged(System.Boolean)">
      <summary>在 show expanded 属性发生更改时调用。</summary>
      <param name="newValue">true 指示演示展开属性的值已更改；否则为 false。</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.PinState">
      <summary>获取或设置一个值，指示 <see cref="P:System.Activities.Presentation.WorkflowViewElement.ExpandState" /> 属性是否应优先于可用于展开或折叠 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 的其他状态。</summary>
      <returns>如果应将 <see cref="P:System.Activities.Presentation.WorkflowViewElement.ExpandState" /> 属性用于展开或折叠 <see cref="T:System.Activities.Presentation.WorkflowViewElement" /> 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.PinStateProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowViewElement.PinState" /> 依赖属性。 此字段为只读字段。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.RegisterCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>将指定的复合视图添加到复合视图的列表。</summary>
      <param name="container">要注册的复合视图。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.RegisterDefaultCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>添加指定的复合视图作为默认复合视图。</summary>
      <param name="container">复合视图。</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ShowExpanded">
      <summary>获取一个指示工作流视图元素是否在展开视图中显示的值。</summary>
      <returns>如果该元素在已展开的视图显示，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.WorkflowViewElement.ShowExpandedProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.WorkflowViewElement.ShowExpanded" /> 依赖属性。 此字段为只读字段。</summary>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.UnregisterCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>从复合视图的列表中移除指定的复合视图。</summary>
      <param name="container">要注销的复合视图。</param>
    </member>
    <member name="M:System.Activities.Presentation.WorkflowViewElement.UnregisterDefaultCompositeView(System.Activities.Presentation.ICompositeView)">
      <summary>移除指定的默认复合视图。</summary>
      <param name="container">要移除的复合视图。</param>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ViewService">
      <summary>获取与工作流视图元素关联的 <see cref="T:System.Activities.Presentation.Services.ViewService" />。</summary>
      <returns>与工作流视图元素关联的视图服务。</returns>
    </member>
    <member name="P:System.Activities.Presentation.WorkflowViewElement.ViewStateService">
      <summary>获取 <see cref="T:System.Activities.Presentation.EditingContext" /> 中定义的 <see cref="T:System.Activities.Presentation.View.ViewStateService" />。 访问此属性的一种快捷方式是访问 <see cref="P:System.Activities.Presentation.EditingContext.Services" />。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.EditingContext" /> 中定义的 <see cref="T:System.Activities.Presentation.View.ViewStateService" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.XamlLoadErrorInfo">
      <summary>包含有关 XAML 读取器在加载 XML 文件时所生成错误的信息，其中包括文件名以及文件中发生错误的位置。</summary>
    </member>
    <member name="M:System.Activities.Presentation.XamlLoadErrorInfo.#ctor(System.String,System.Int32,System.Int32)">
      <summary>使用有关错误的指定消息以及加载的 XAML 文件中发生错误的行号和位置创建 <see cref="T:System.Activities.Presentation.XamlLoadErrorInfo" /> 的实例。</summary>
      <param name="message">一个包含加载错误相关信息的消息。</param>
      <param name="lineNumber">XAML 文件发生加载错误的行号。</param>
      <param name="linePosition">XAML 文件发生加载错误的行位置。</param>
    </member>
    <member name="P:System.Activities.Presentation.XamlLoadErrorInfo.FileName">
      <summary>获取或设置发生加载错误的 XAML 文件的名称</summary>
      <returns>发生加载错误的 XAML 文件的名称。</returns>
    </member>
    <member name="P:System.Activities.Presentation.XamlLoadErrorInfo.LineNumber">
      <summary>获取或设置 XAML 文件发生加载错误的行号。</summary>
      <returns>XAML 文件发生加载错误的行号。</returns>
    </member>
    <member name="P:System.Activities.Presentation.XamlLoadErrorInfo.LinePosition">
      <summary>获取或设置 XAML 文件发生加载错误的行位置。</summary>
      <returns>XAML 文件发生加载错误的行位置</returns>
    </member>
    <member name="P:System.Activities.Presentation.XamlLoadErrorInfo.Message">
      <summary>获取或设置有关 XAML 读取器在加载 XML 文件时所生成错误的信息。</summary>
      <returns>有关 XAML 读取器在加载 XML 文件时所生成错误的信息。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Annotations.Annotation">
      <summary>提供方法，以访问附加属性的注释。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Annotations.Annotation.AnnotationTextProperty">
      <summary>批注文本的可附加属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Annotations.Annotation.AnnotationTextPropertyName">
      <summary>访问 ModelItem 的批注的属性名称。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Annotations.Annotation.GetAnnotationText(System.Object)">
      <summary>获取对象的批注文本。</summary>
      <returns>对象的批注文本。</returns>
      <param name="instance">要获取批注的实例。</param>
    </member>
    <member name="M:System.Activities.Presentation.Annotations.Annotation.SetAnnotationText(System.Object,System.String)">
      <summary>设置对象的批注。</summary>
      <param name="instance">要设置的注释文本的实例。</param>
      <param name="annotationText">要设置的批注文本。</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter">
      <summary>定义参数和表达式之间的映射，并提供在这些对象之间进行转换的功能。 通常，在自定义活动设计器中使用 <see cref="T:System.Activities.Presentation.View.ExpressionTextBox" /> 时，将以声明方式使用此转换器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将指定参数转换为表达式。</summary>
      <returns>
        <see cref="T:System.Object" /> 的一个实例，其中包含转换的 Argument.Expression。 包含转换为 Argument.Expression。</returns>
      <param name="value">绑定源生成的值。</param>
      <param name="targetType">绑定目标属性的类型。</param>
      <param name="parameter">要使用的转换器参数。</param>
      <param name="culture">要用在转换器中的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将指定 Argument.Expression 转换为参数。</summary>
      <returns>返回 <see cref="T:System.Object" />。 包含转换的参数。</returns>
      <param name="value">要转换的 Argument.Expression。</param>
      <param name="targetType">未实现。</param>
      <param name="parameter">未实现。</param>
      <param name="culture">未实现。</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter">
      <summary>定义参数和表达式模型项之间的映射，并提供在这些对象之间进行转换的功能。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将指定参数转换为表达式模型项。</summary>
      <returns>返回包含表达式模型项的 <see cref="T:System.Object" />。</returns>
      <param name="values">一个数组，其中包含要转换的参数。 仅使用位于索引 1 处的数组项。</param>
      <param name="targetType">未在此实现中使用。</param>
      <param name="parameter">未在此实现中使用。</param>
      <param name="culture">未在此实现中使用。</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>将指定表达式模型项转换为参数。</summary>
      <returns>返回包含参数的 <see cref="T:System.Object" />。</returns>
      <param name="value">要转换的模型项。</param>
      <param name="targetTypes">未在此实现中使用。</param>
      <param name="parameter">未在此实现中使用。</param>
      <param name="culture">未在此实现中使用。</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter">
      <summary>用于将 UI 属性数据转换为描述 UI 属性的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 和 <see cref="T:System.Activities.Presentation.EditingContext" /> 对象。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.#ctor">
      <summary>创建一个新的 <see cref="T:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter" />。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a <see cref="T:System.Activities.Presentation.Model.ModelItem" /> derived object to a <see cref="T:System.Activities.Presentation.Model.ModelItem" />.</summary>
      <returns>返回一个 <see cref="T:System.Object" />，其中包含 <see cref="T:System.Activities.Presentation.Model.ModelItem" />、<see cref="T:System.Activities.Presentation.EditingContext" /> 和 UI 属性的值。</returns>
      <param name="value">要转换的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 派生对象。</param>
      <param name="targetType">未使用。</param>
      <param name="parameter">未使用。</param>
      <param name="culture">未使用。</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 派生对象转换为 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>返回一个 <see cref="T:System.Object" />，其中包含 <see cref="T:System.Activities.Presentation.Model.ModelItem" />、<see cref="T:System.Activities.Presentation.EditingContext" /> 和 UI 属性的值。</returns>
      <param name="values">要转换的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 派生对象的数组。</param>
      <param name="targetType">未使用。</param>
      <param name="parameter">要使用的转换器参数。</param>
      <param name="culture">未使用。</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>在此版本中不受支持。</summary>
      <returns>返回一个 <see cref="T:System.Object" />。</returns>
      <param name="value">未使用。</param>
      <param name="targetType">未使用。</param>
      <param name="parameter">未使用。</param>
      <param name="culture">未使用。</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>在此版本中不受支持。</summary>
      <returns>返回一个 <see cref="T:System.Object" />。</returns>
      <param name="value">未使用。</param>
      <param name="targetTypes">未使用。</param>
      <param name="parameter">未使用。</param>
      <param name="culture">未使用。</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter">
      <summary>将 ModelPropertyEntry 转换为拥有属性的 ModelItem。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将 ModelPropertyEntry 转换为拥有属性的 ModelItem。</summary>
      <returns>返回 <see cref="T:System.Object" />。</returns>
      <param name="value">绑定目标生成的值。</param>
      <param name="targetType">要转换到的类型。</param>
      <param name="parameter">要使用的转换器参数。 您可以传入布尔值。 默认情况下，此转换器将始终返回类型为 Activity 的父模型项。 如果将 false 传递到此方法，则转换器将只返回第一个父模型项，该模型项可能不是指向 Activity 的模型项。</param>
      <param name="culture">要用在转换器中的区域性。</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>不支持调用此方法。</summary>
      <returns>返回 <see cref="T:System.Object" />。</returns>
      <param name="value">绑定目标生成的值。</param>
      <param name="targetType">要转换到的类型。</param>
      <param name="parameter">要使用的转换器参数。</param>
      <param name="culture">要用在转换器中的区域性。</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ModelToObjectValueConverter">
      <summary>将 ModelItem 转换为内部对象的值。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelToObjectValueConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Converters.ModelToObjectValueConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelToObjectValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将指定对象转换为其内部值。</summary>
      <returns>返回包含内部值的 <see cref="T:System.Object" />。</returns>
      <param name="value">要转换的 ModelItem。</param>
      <param name="targetType">未在此实现中使用。</param>
      <param name="parameter">未在此实现中使用。</param>
      <param name="culture">未在此实现中使用。</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ModelToObjectValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>返回未修改的指定值。</summary>
      <returns>返回包含未修改的值的 <see cref="T:System.Object" />。</returns>
      <param name="value">不对其执行任何操作的对象。</param>
      <param name="targetType">未在此实现中使用。</param>
      <param name="parameter">未在此实现中使用。</param>
      <param name="culture">未在此实现中使用。</param>
    </member>
    <member name="T:System.Activities.Presentation.Converters.ObjectToModelValueConverter">
      <summary>将对象转换为模型值。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ObjectToModelValueConverter.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Converters.ObjectToModelValueConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ObjectToModelValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将指定的 ModelPropertyEntry 转换为包含原始条目的 ModelItem。</summary>
      <returns>返回 <see cref="T:System.Object" />。</returns>
      <param name="values">要转换的 ModelPropertyEntry。</param>
      <param name="targetType">未在此实现中使用。</param>
      <param name="parameter">未在此实现中使用。</param>
      <param name="culture">未在此实现中使用。</param>
    </member>
    <member name="M:System.Activities.Presentation.Converters.ObjectToModelValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>将指定的 ModelItem 转换为 ModelPropertyEntry。</summary>
      <returns>返回一个 <see cref="T:System.Object" />，其中包含转换后的 ModelPropertyEntry。</returns>
      <param name="value">要转换的 ModelItem。</param>
      <param name="targetTypes">未在此实现中使用。</param>
      <param name="parameter">未在此实现中使用。</param>
      <param name="culture">未在此实现中使用。</param>
    </member>
    <member name="T:System.Activities.Presentation.Debug.BreakpointTypes">
      <summary>表示一个提供断点设置的枚举。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Debug.BreakpointTypes.Bounded">
      <summary>表示一个受限断点，该断点确定何处以及何时在程序中的所需点处中断代码。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Debug.BreakpointTypes.Conditional">
      <summary>表示一个条件断点，该断点是一个表达式，通过计算该表达式来确定断点是否中断代码。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Debug.BreakpointTypes.Enabled">
      <summary>表示断点已启用。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Debug.BreakpointTypes.None">
      <summary>未设置断点。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Debug.DebuggerService">
      <summary>为调试过程管理断点的位置。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>使用指定的编辑上下文创建 <see cref="T:System.Activities.Presentation.Debug.DebuggerService" /> 类的新实例。</summary>
      <param name="context">活动设计器的上下文状态。</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.CurrentContext">
      <summary>获取或设置源文件中的当前执行范围。</summary>
      <returns>源文件中标记执行开始的位置。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.CurrentLocation">
      <summary>获取或设置执行的当前位置。</summary>
      <returns>源文件中的位置。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.DeleteBreakpoint(System.Activities.Debugger.SourceLocation)">
      <summary>从源文件中的断点位置处删除断点。</summary>
      <param name="sourceLocation">源文件中的位置。</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.EnsureVisible(System.Activities.Debugger.SourceLocation)">
      <summary>确保调试程序服务是可见的。</summary>
      <param name="sourceLocation">源文件中的位置。</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.GetBreakpointLocations">
      <summary>返回最新断点位置的列表。</summary>
      <returns>从源文件中拣出的类型为 <see cref="P:System.Activities.Presentation.Debug.BreakpointInfo.SourceLocation" /> 的断点列表。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.GetExactLocation(System.Activities.Debugger.SourceLocation)">
      <summary>基于活动在其序列化的 XAML 形式中的起始行号和结束行号，返回准确的源文件位置。</summary>
      <returns>源文件中的准确位置。</returns>
      <param name="approximateLocation">已知不准确的源文件位置。</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.HideSourceFileName">
      <summary>获取或设置指示是否隐藏查看器中源文件名的值。</summary>
      <returns>如果隐藏源文件名，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.InsertBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Presentation.Debug.BreakpointTypes)">
      <summary>在指定位置处插入指定类型的新断点。</summary>
      <param name="sourceLocation">源文件中接收新断点的位置。</param>
      <param name="breakpointType">断点的类型，例如：None、Enabled、Bounded 或 Conditional。</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.IsDebugging">
      <summary>获取或设置一个值，该值指示调试是否为当前状态。</summary>
      <returns>如果当前状态为调试，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.ResetBreakpoints">
      <summary>重置断点并准备刷新断点。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Debug.DebuggerService.SelectedLocation">
      <summary>从设计器中获取当前选定的位置。</summary>
      <returns>源文件中当前选定的位置。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.UpdateBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Presentation.Debug.BreakpointTypes)">
      <summary>更新指定断点的外观，以显示指定的类型。</summary>
      <param name="sourceLocation">要更新的断点的位置。</param>
      <param name="newBreakpointType">来自 <see cref="T:System.Activities.Presentation.Debug.BreakpointTypes" /> 枚举的新断点类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.DebuggerService.UpdateSourceLocations(System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation})">
      <summary>从 SourceLocationMapping 收集模型项与断点之间的新映射。</summary>
      <param name="newSourceLocationMapping">模型项与断点对的列表。</param>
    </member>
    <member name="T:System.Activities.Presentation.Debug.IDesignerDebugView">
      <summary>为活动设计器调试程序视图提供功能。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.CurrentContext">
      <summary>在派生类中实现时，获取或设置源文件中的执行范围。</summary>
      <returns>源文件中开始执行的起点位置。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.CurrentLocation">
      <summary>在派生类中实现时，获取或设置由调试器处理的文件中的当前执行位置。</summary>
      <returns>在被调试器处理的文件中的执行的当前位置。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.DeleteBreakpoint(System.Activities.Debugger.SourceLocation)">
      <summary>在派生类中实现时，从源文件中的指定位置处移除断点。</summary>
      <param name="sourceLocation">目标源代码文件中的特定位置。</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.EnsureVisible(System.Activities.Debugger.SourceLocation)">
      <summary>确保<see cref="T:System.Activities.Presentation.Debug.IDesignerDebugView" /> 是可见的。</summary>
      <param name="sourceLocation">目标源代码文件中的特定位置。</param>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.GetBreakpointLocations">
      <summary>在派生类中实现时，返回当前已设置断点的位置/类型对的列表。</summary>
      <returns>当前设置断点的位置和类型对列表。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.GetExactLocation(System.Activities.Debugger.SourceLocation)">
      <summary>在派生类中实现时，基于近似位置返回源文件中的准确位置。</summary>
      <returns>源文件中的准确位置。</returns>
      <param name="approximateLocation">已知不准确的源文件位置。</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.HideSourceFileName">
      <summary>获取或设置一个值，该值指示是否应该隐藏 Xaml 源文件名。</summary>
      <returns>如果应该隐藏 Xaml 源文件名，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.InsertBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Presentation.Debug.BreakpointTypes)">
      <summary>在派生类中实现时，在文件中的指定位置处放置断点。</summary>
      <param name="sourceLocation">目标源代码文件中的特定位置。</param>
      <param name="breakpointType">可能包括 Bounded、Conditional、Enabled 和 None的断点类型的枚举成员。</param>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.IsDebugging">
      <summary>在派生类中实现时，获取或设置一个值，指示是否启用调试。</summary>
      <returns>如果启用调试，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.ResetBreakpoints">
      <summary>在派生类中实现时，重置文件中的断点位置。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Debug.IDesignerDebugView.SelectedLocation">
      <summary>在派生类中实现时，获取选定的 <see cref="T:System.Activities.Debugger.SourceLocation" />。</summary>
      <returns>选定的源的位置。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Debug.IDesignerDebugView.UpdateBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Presentation.Debug.BreakpointTypes)">
      <summary>在派生类中实现时，更新源文件中指定位置处的断点的类型。</summary>
      <param name="sourceLocation">目标源代码文件中的特定位置。</param>
      <param name="breakpointType">指定的断点类型，例如：行断点、方法断点或异常断点。</param>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.CreateExpressionFromStringCallback">
      <summary>表示委托，其由自定义表达式编辑器提供，以从字符串文本创建表达式活动。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.ExpressionActivityEditor">
      <summary>表示一个表达式活动编辑器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Expressions.ExpressionActivityEditor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.AcceptsReturn">
      <summary>获取或设置一个值，该值指示表达式活动是否接受 Return 键。</summary>
      <returns>如果表达式活动接受返回，则为 True；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.AcceptsReturnProperty">
      <summary>表示 AcceptsReturn 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.AcceptsTab">
      <summary>获取或设置一个值，该值指示表达式活动是否接受 Tab 键。</summary>
      <returns>如果表达式活动接受选项卡，则为 True；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.AcceptsTabProperty">
      <summary>表示 AcceptsTab 依赖项属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.BeginEdit">
      <summary>开始编辑。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.CanCommit">
      <summary>指示表达式活动编辑器是否可以提交 。</summary>
      <returns>如果表达式活动编辑器可以设置，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.Commit(System.Boolean)">
      <summary>指示表达式活动编辑器是否被提交。</summary>
      <returns>如果设置表达式活动编辑器，则为 true；否则为 false。</returns>
      <param name="isExplicitCommit">如果该提交已显式，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.Context">
      <summary>获取表达式活动的编辑上下文。</summary>
      <returns>编辑上下文的表达式活动。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExplicitCommit">
      <summary>获取或设置一个值，该值指示是否显示分配。</summary>
      <returns>如果提交为显式，则为 True；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExplicitCommitProperty">
      <summary>表示 ExplicitCommit 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.Expression">
      <summary>获取或设置表达式活动。</summary>
      <returns>表达式活动。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExpressionProperty">
      <summary>表示表达式依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExpressionType">
      <summary>获取或设置表达式类型活动。</summary>
      <returns>表达式的类型活动。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.ExpressionTypeProperty">
      <summary>表示 ExpressionType 依赖项属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.GetExpressionActivityEditor(System.Object)">
      <summary>使用指定的目标，获取表达式活动编辑器。</summary>
      <returns>表达式操作编辑器。</returns>
      <param name="target">要获取的编辑器的属性。</param>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.HintText">
      <summary>获取或设置提示文本。</summary>
      <returns>提示文本。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.HintTextProperty">
      <summary>表示 HintText 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.HorizontalScrollBarVisibility">
      <summary>获取或设置水平滚动条的可见性。</summary>
      <returns>水平滚动条可见性。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.HorizontalScrollBarVisibilityProperty">
      <summary>表示 HorizontalScrollBarVisibility 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsIndependentExpression">
      <summary>获取或设置一个值，该值指示表达式活动是否为独立表达式。</summary>
      <returns>如果表达式活动是独立表达式，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsIndependentExpressionProperty">
      <summary>表示 IsIndependentExpression 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsReadOnly">
      <summary>获取或设置一个指示表达式活动是否是只读的值。</summary>
      <returns>如果表达式活动是只读，则为 True；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsReadOnlyProperty">
      <summary>表示 IsReadOnly 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsSupportedExpression">
      <summary>获取或设置一个指示是否支持表达式的值。</summary>
      <returns>如果表达式受支持，则为 True；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.IsSupportedExpressionProperty">
      <summary>表示 IsSupportedExpression 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.OwnerActivity">
      <summary>获取或设置所有者活动。</summary>
      <returns>所有者活动。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.OwnerActivityProperty">
      <summary>表示 OwnerActivity 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.PathToArgument">
      <summary>获取或设置参数的路径。</summary>
      <returns>参数的路径。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.PathToArgumentProperty">
      <summary>表示 PathToArgument 依赖项属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionActivityEditor.SetExpressionActivityEditor(System.Object,System.String)">
      <summary>使用指定的目标和名称，设置表达式活动编辑器。</summary>
      <param name="target">要设置的编辑器的属性。</param>
      <param name="name">编辑器的名称。</param>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.UseLocationExpression">
      <summary>获取或设置一个指示此实例是否使用位置表达式的值。</summary>
      <returns>如果实例使用位置表达式，则为 True；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.UseLocationExpressionProperty">
      <summary>表示 UseLocationExpression 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionActivityEditor.VerticalScrollBarVisibility">
      <summary>获取或设置垂直滚动条的可见性。</summary>
      <returns>垂直滚动条的可见性。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.ExpressionActivityEditor.VerticalScrollBarVisibilityProperty">
      <summary>表示 VerticalScrollBarVisibility 依赖项属性。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.ExpressionMorphHelper">
      <summary>表示异常变体帮手。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Expressions.ExpressionMorphHelper" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.TryInferReturnType(System.Activities.ActivityWithResult,System.Activities.Presentation.EditingContext,System.Type@)">
      <summary>返回是否表达式尝试推断返回类型。</summary>
      <returns>如果该表达式尝试推断返回类型，则为 True；否则为 false。</returns>
      <param name="expression">表达式使用。</param>
      <param name="context">上下文。</param>
      <param name="returnType">表达的返回类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionMorphHelper.TryMorphExpression(System.Activities.ActivityWithResult,System.Boolean,System.Type,System.Activities.Presentation.EditingContext,System.Activities.ActivityWithResult@)">
      <summary>返回表达式的尝试此时是否为 morph。</summary>
      <returns>变形的表达式。</returns>
      <param name="expression">要转换的表达式。</param>
      <param name="isLocationExpression">如果该表达式为位置表达式，则为 True；否则为 false。</param>
      <param name="newType">表达式的新类型。</param>
      <param name="context">上下文。</param>
      <param name="newExpression">新表达式。</param>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute">
      <summary>表示异常变体帮手属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute" /> 类的新实例。</summary>
      <param name="expressionMorphHelperType">变形帮助者类型。</param>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute.ExpressionMorphHelperType">
      <summary>获取帮助程序的类型。</summary>
      <returns>帮助器的类型。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Expressions.TextualExpressionEditor">
      <summary>表示文本表达式编辑器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Expressions.TextualExpressionEditor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.TextualExpressionEditor.DefaultValue">
      <summary>获取或设置该属性的默认值。</summary>
      <returns>属性的默认值。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.TextualExpressionEditor.DefaultValueProperty">
      <summary>指定属性的默认值。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.TextualExpressionEditor.ExpressionEditorService">
      <summary>获取表达式编辑器服务。</summary>
      <returns>表达式编辑器服务。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.TextualExpressionEditor.MaxLines">
      <summary>获取或设置最大可见行数。</summary>
      <returns>最大可见行数。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.TextualExpressionEditor.MaxLinesProperty">
      <summary>指示 MaxLines 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Expressions.TextualExpressionEditor.MinLines">
      <summary>获取或设置最小可见行数。</summary>
      <returns>最小可见行数。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Expressions.TextualExpressionEditor.MinLinesProperty">
      <summary>指示 MinLines 依赖项属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnCompleteWordCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>表示将处理 On Complete Word Command Can Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnCompleteWordCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>表示将处理 On Complete Word Command Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnDecreaseFilterLevelCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>表示将处理 On Decrease Filter Level Command Can Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnDecreaseFilterLevelCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>表示将处理 On Decrease Filter Level Command Can Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnGlobalIntellisenseCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>表示将处理 On Global Intellisense Command Can Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnGlobalIntellisenseCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>表示将处理 On Global Intellisense Command Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnIncreaseFilterLevelCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>表示将处理 On Increase Filter Level Command Can Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnIncreaseFilterLevelCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>表示将处理 On Increase Filter Level Command Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnParameterInfoCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>表示将处理 On Parameter Info Command Can Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnParameterInfoCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>表示将处理 On Parameter Info Command Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnQuickInfoCommandCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
      <summary>表示将处理 On Quick Info Command Can Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.Expressions.TextualExpressionEditor.OnQuickInfoCommandExecute(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>表示将处理 On Quick Info Command Can Execute 路由事件的方法。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.AssemblyContextControlItem">
      <summary>通过用于管理被引用程序集和本地程序集列表的编辑上下文公开一个项，该项将在控件（例如表达式编辑器）的工作流中用于确定引用列表。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.AssemblyContextControlItem.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Hosting.AssemblyContextControlItem" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.AssemblyContextControlItem.AllAssemblyNamesInContext">
      <summary>返回一个集合，其中包含本地项目程序集的显示名称以及环境中已加载的所有程序集的显示名称。</summary>
      <returns>一个集合，其中包含本地项目程序集的显示名称以及环境中已加载的所有程序集的显示名称。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.AssemblyContextControlItem.GetAssembly(System.Reflection.AssemblyName,System.Activities.Presentation.Hosting.IMultiTargetingSupportService)">
      <summary>返回当前使用多目标支持服务加载的程序集。</summary>
      <returns>程序集。</returns>
      <param name="assemblyName">程序集名称。</param>
      <param name="multiTargetingService">多目标服务用于获取已加载程序集与当前项目的目标 .NET Framework 相对应的正确版本。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.AssemblyContextControlItem.GetEnvironmentAssemblies(System.Activities.Presentation.Hosting.IMultiTargetingSupportService)">
      <summary>返回环境中已加载的所有程序集的集合。</summary>
      <returns>环境中已加载的所有程序集的集合。</returns>
      <param name="multiTargetingService">多目标服务用于获取已加载程序集与当前项目的目标 .NET Framework 相对应的正确版本。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.AssemblyContextControlItem.GetEnvironmentAssemblyNames">
      <summary>返回一个集合，其中包含环境中已加载的所有程序集的程序集名称。</summary>
      <returns>一个集合，其中包含环境中已加载的所有程序集的程序集名称。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.AssemblyContextControlItem.ItemType">
      <summary>获取项类型。</summary>
      <returns>返回一个包含项类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.AssemblyContextControlItem.LocalAssemblyName">
      <summary>获取或设置本地程序集的名称。</summary>
      <returns>返回一个包含本地程序集名称的 <see cref="T:System.Reflection.AssemblyName" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.AssemblyContextControlItem.ReferencedAssemblyNames">
      <summary>获取或设置被引用程序集的名称。</summary>
      <returns>返回一个包含被引用程序集名称的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.CommandInfo">
      <summary>描述设计器上的命令，例如复制或粘贴。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.CommandInfo.Command">
      <summary>表示某种行为或操作的唯一标识符。</summary>
      <returns>返回 <see cref="T:System.Windows.Input.ICommand" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.CommandInfo.IsBindingEnabledInDesigner">
      <summary>确定设计器中是否为指定的命令启用了绑定。</summary>
      <returns>如果设计器中为指定的命令启用了绑定，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.CommandValues">
      <summary>一个命令接口，用于通过自定义提供的实现（例如属性浏览器服务、调试服务等）集成 Windows Workflow Designer 操作（例如，上下文菜单）。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.DeleteBreakpoint">
      <summary>用于删除断点的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.DisableBreakpoint">
      <summary>用于禁用断点的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.EnableBreakpoint">
      <summary>用于启用断点的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.InsertBreakpoint">
      <summary>用于插入断点的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Hosting.CommandValues.ShowProperties">
      <summary>打开 Visual Studio 属性网格以显示属性。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.ICommandService">
      <summary>表示一个命令接口，用于通过自定义提供的实现（例如属性浏览器服务、调试服务等）集成 Windows Workflow Designer 操作（例如，上下文菜单）。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ICommandService.CanExecuteCommand(System.Int32)">
      <summary>验证是否能执行指定的命令。</summary>
      <returns>如果能够执行指定的命令，则为 true；否则为 false。</returns>
      <param name="commandId">要检查的命令标识符。</param>
      <exception cref="T:System.NotSupportedException">不支持该命令。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ICommandService.ExecuteCommand(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>执行具有指定命令标识符和参数的命令。</summary>
      <param name="commandId">要检查的命令标识符。</param>
      <param name="parameters">命令的参数。</param>
      <exception cref="T:System.NotSupportedException">不支持该命令。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ICommandService.IsCommandSupported(System.Int32)">
      <summary>返回一个 Boolean 值，指示是否支持指定的命令标识符。</summary>
      <returns>如果支持指定的命令 ID，则为 true；否则为 false。</returns>
      <param name="commandId">要检查的命令标识符。</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.IDocumentPersistenceService">
      <summary>提供用于保存文档的功能。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IDocumentPersistenceService.Flush(System.Object)">
      <summary>由派生类实现时，将指定的文档保存到磁盘上并清除内存缓冲区。</summary>
      <param name="documentRoot">网站的根目录。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IDocumentPersistenceService.Load(System.String)">
      <summary>由派生类实现时，将指定的已存储文档放到内存中以供处理。</summary>
      <returns>包含已加载文档的对象。</returns>
      <param name="fileName">要加载的文档。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IDocumentPersistenceService.OnModelChanged(System.Object)">
      <summary>由派生类实现时，开始处理对正在设计的工作流模型的未合并更改。</summary>
      <param name="documentRoot">网站的根目录。</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem">
      <summary>一个发布到编辑上下文中的上下文项，该项表示与设计器相关联的导入命名空间的集合。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.View.ImportedNamespaceContextItem" /> 类的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem.EnsureInitialized(System.Activities.Presentation.EditingContext)">
      <summary>使用编辑上下文初始化导入命名空间的集合。</summary>
      <param name="context">与导入命名空间的集合关联的 <see cref="T:System.Activities.Presentation.EditingContext" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem.ImportedNamespaces">
      <summary>获取导入命名空间的集合。</summary>
      <returns>导入命名空间的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.ImportedNamespaceContextItem.ItemType">
      <summary>获取导入命名空间上下文项的类型。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.View.ImportedNamespaceContextItem" /> 的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.IMultiTargetingSupportService">
      <summary>为 Windows Workflow Designer 宿主提供多目标。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.GetReflectionAssembly(System.Reflection.AssemblyName)">
      <summary>返回当前加载的具有给定程序集名称的程序集。</summary>
      <returns>当前加载的具有给定程序集名称的程序集。</returns>
      <param name="targetAssemblyName">程序集名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.GetRuntimeType(System.Type)">
      <summary>获取与指定类型相对应的运行时类型。</summary>
      <returns>与指定类型相对应的运行时类型。</returns>
      <param name="reflectionType">要获取其运行时类型的类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.IsSupportedType(System.Type)">
      <summary>返回一个值，指示是否支持指定的类型。</summary>
      <returns>如果支持指定的类型，则为 true；否则为 false。</returns>
      <param name="type">要检查的类型。</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback">
      <summary>在加载指定的工作流命令时提供附加功能。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback.OnWorkflowCommandLoaded(System.Activities.Presentation.Hosting.CommandInfo)">
      <summary>基于要加载的指定工作流命令提供附加功能。</summary>
      <param name="commandInfo">要加载的工作流命令。</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.MultiTargetingSupportService">
      <summary>表示多目标支持服务的抽象类。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Hosting.MultiTargetingSupportService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.GetReflectionAssembly(System.Reflection.AssemblyName)">
      <summary>获取指定程序集名称的反射程序集。</summary>
      <returns>如果目标程序集合名称可以被解析，则为反射程序集合。</returns>
      <param name="targetAssemblyName">目标程序集名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.GetReflectionType(System.Type)">
      <summary>获取指定对象类型的反射类型。</summary>
      <returns>反射类型。</returns>
      <param name="objectType">对象类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.GetRuntimeType(System.Type)">
      <summary>获取给定的反射类型运行时类型。</summary>
      <returns>与反射类型相联系的运行时类型。</returns>
      <param name="reflectionType">反射类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.MultiTargetingSupportService.IsSupportedType(System.Type)">
      <summary>检查目标框架是否支持给定类型。</summary>
      <returns>由目标框架支持的给定类型。</returns>
      <param name="type">要检查的类型。</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.ReadOnlyState">
      <summary>表示一个 <see cref="T:System.Activities.Presentation.ContextItem" />，它发布在编辑上下文中，指示 wf2 设计器是否处于只读状态。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.ReadOnlyState.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Hosting.ReadOnlyState" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly">
      <summary>获取一个值，指示对象是否是只读的。</summary>
      <returns>如果对象为只读，则为 true；否则为false 。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.ReadOnlyState.ItemType">
      <summary>获取当前对象的类型。</summary>
      <returns>返回 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.WindowHelperService">
      <summary>提供一些功能，用于为事件通知注册和注销委托以及设置窗口的所有权。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)">
      <summary>使用父窗口的特定句柄初始化 <see cref="T:System.Activities.Presentation.Hosting.WindowHelperService" /> 类的新实例。</summary>
      <param name="hwnd">父窗口的句柄。</param>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd">
      <summary>获取或设置父窗口的句柄。</summary>
      <returns>返回 <see cref="T:System.IntPtr" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)">
      <summary>为事件通知注册指定的委托。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="callback">要为事件通知注册的委托。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)">
      <summary>将窗口分配为指定窗口的所有者。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="source">
        <paramref name="target" /> 的所有者。</param>
      <param name="target">要由 <paramref name="source" /> 拥有的窗口。</param>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)">
      <summary>为事件通知注销指定的委托。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。</returns>
      <param name="callback">要从事件通知移除的委托。</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.WindowMessage">
      <summary>表示一个委托，该委托用于引用将处理窗口消息的方法。</summary>
      <param name="msgId">消息标识符。</param>
      <param name="parameter1">指向第一个消息参数的指针。 此参数的值取决于消息。</param>
      <param name="parameter2">指向第二个消息参数的指针。 此参数的值取决于消息。</param>
    </member>
    <member name="T:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem">
      <summary>提供一些功能，用于更新每个工作流的设计器命令（例如输入笔势集合）。 您应该提供 <see cref="T:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback" /> 实现来接收通知。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem.#ctor(System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback)">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem" /> 类的新实例，并使用指定的 <see cref="T:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback" /> 实现来接收通知。</summary>
      <param name="callback">用于接收通知的 <see cref="T:System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback" /> 实现。</param>
    </member>
    <member name="P:System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem.ItemType">
      <summary>返回此扩展项的类型。</summary>
      <returns>返回 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.ActivityArgumentHelper">
      <summary>提供有关活动参数的其他功能。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.ActivityArgumentHelper.RegisterAccessorsGenerator(System.Type,System.Func{System.Activities.Activity,System.Collections.Generic.IEnumerable{System.Activities.Presentation.ArgumentAccessor}})">
      <summary>用活动类型功能注册以生成一系列 ArgumentAccessors。</summary>
      <param name="activityType">活动类型。</param>
      <param name="argumentAccessorsGenerator">在活动实例（activityType 类型）中的函数及返回 ArgumentAccessors 列表。</param>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeCallback">
      <summary>当某个类型需要特性时调用。</summary>
      <param name="builder">可用于添加特性的 <see cref="T:System.Activities.Presentation.Metadata.AttributeCallbackBuilder" />。</param>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeCallbackBuilder">
      <summary>提供一项功能，用于向一个特定的 <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" /> 中添加特定类型的特性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.Attribute[])">
      <summary>将所提供的特性的内容添加到创建此生成器的特性表中。</summary>
      <param name="attributes">要添加到表中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>将所提供的特性的内容添加到创建此生成器的特性表中。</summary>
      <param name="descriptor">要添加特性的成员。</param>
      <param name="attributes">要添加到表中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.Reflection.MemberInfo,System.Attribute[])">
      <summary>将所提供的特性的内容添加到创建此生成器的特性表中。</summary>
      <param name="member">要添加特性的成员。</param>
      <param name="attributes">要添加到表中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.String,System.Attribute[])">
      <summary>将所提供的特性的内容添加到创建此生成器的特性表中。</summary>
      <param name="memberName">要添加特性的成员的名称。</param>
      <param name="attributes">要添加到表中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberName" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.AddCustomAttributes(System.Windows.DependencyProperty,System.Attribute[])">
      <summary>将所提供的特性的内容添加到创建此生成器的特性表中。</summary>
      <param name="dp">要添加特性的依赖项。</param>
      <param name="attributes">要添加到表中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dp" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Metadata.AttributeCallbackBuilder.CallbackType">
      <summary>要添加特性的类型。</summary>
      <returns>要添加特性的类型。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeTable">
      <summary>特性表是元数据特性的只读集合，其中的特性与特定的类型、成员和依赖项关联。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Metadata.AttributeTable.AttributedTypes">
      <summary>返回在属性、成员或类型本身上具有特性重写的所有类型的枚举。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.ContainsAttributes(System.Type)">
      <summary>确定此表是否包含给定类型的元数据。</summary>
      <returns>如果此表在类级别包含该类型的元数据或者包含与 DependencyProperty 或  MemberDescriptor 关联的元数据，则为true；否则为 falsefalse。</returns>
      <param name="type">要为元数据检查的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type)">
      <summary>返回为指定类型提供的所有类级别特性的枚举。</summary>
      <returns>符合条件的特性的枚举。 此方法从不返回 null 枚举。</returns>
      <param name="type">要为其获取类级别特性的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor)">
      <summary>返回为具有指定类型的指定成员提供的所有特性的枚举。</summary>
      <returns>符合条件的特性的枚举。 此方法从不返回 null 枚举。</returns>
      <param name="ownerType">包含该成员的类型。</param>
      <param name="descriptor">要为其获取自定义特性的成员描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" /> 或 <paramref name="descriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type,System.Reflection.MemberInfo)">
      <summary>返回为具有指定类型的指定成员提供的所有特性的枚举。</summary>
      <returns>符合条件的特性的枚举。 此方法从不返回 null 枚举。</returns>
      <param name="ownerType">包含该成员的类型。</param>
      <param name="member">要为其提供特性的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" /> 或 <paramref name="member" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type,System.String)">
      <summary>返回为具有指定类型的指定成员提供的所有特性的枚举。</summary>
      <returns>符合条件的特性的枚举。 此方法从不返回 null 枚举。</returns>
      <param name="ownerType">依赖项属性的所有者类型。</param>
      <param name="memberName">要为其提供特性的成员的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" /> 或 <paramref name="memberName" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTable.GetCustomAttributes(System.Type,System.Windows.DependencyProperty)">
      <summary>返回为具有指定类型的指定依赖项提供的所有特性的枚举。</summary>
      <returns>符合条件的特性的枚举。 此方法从不返回 null 枚举。</returns>
      <param name="ownerType">依赖项属性的所有者类型。</param>
      <param name="dp">要为其获取自定义特性的依赖项属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" /> 或 <paramref name="dp" /> 为 null。</exception>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeTableBuilder">
      <summary>创建并填充一个 <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" />，它由 <see cref="T:System.Activities.Presentation.Metadata.MetadataStore" /> 用来提供特性查找和注册功能。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)">
      <summary>指定在需要给定类型的元数据时调用的回调。</summary>
      <param name="type">要由回调提供元数据的类型。</param>
      <param name="callback">回调方法。</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])">
      <summary>将所提供的特性的内容添加到此生成器中。</summary>
      <param name="type">要为其添加类级别特性的类型。</param>
      <param name="attributes">要添加到生成器中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>将所提供的特性的内容添加到此生成器中。</summary>
      <param name="ownerType">包含由 <paramref name="descriptor" /> 标识的成员的类型。</param>
      <param name="descriptor">要添加特性的事件或属性信息。</param>
      <param name="attributes">要添加到生成器中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" />、<paramref name="descriptor" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])">
      <summary>将所提供的特性的内容添加到此生成器中。</summary>
      <param name="ownerType">包含由 <paramref name="member" /> 标识的成员的类型。</param>
      <param name="member">要添加特性的事件或属性信息。</param>
      <param name="attributes">要添加到生成器中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" />、<paramref name="member" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.String,System.Attribute[])">
      <summary>将所提供的特性的内容添加到此生成器中。</summary>
      <param name="ownerType">包含由 <paramref name="memberName" /> 标识的成员的类型。</param>
      <param name="memberName">要添加特性的事件或属性信息的名称。</param>
      <param name="attributes">要添加到生成器中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" />、<paramref name="memberName" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])">
      <summary>将所提供的特性的内容添加到此生成器中。</summary>
      <param name="ownerType">包含由 <paramref name="dp" /> 标识的依赖项的类型。</param>
      <param name="dp">要为其添加特性的依赖项属性。</param>
      <param name="attributes">要添加到生成器中的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerType" />、<paramref name="dp" /> 或 <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(System.Activities.Presentation.Metadata.AttributeTable)">
      <summary>将所提供的特性表的内容添加到此生成器中。</summary>
      <param name="table">源特性表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable">
      <summary>创建包含通过 <see cref="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" /> 调用提供的所有特性定义的特性表。</summary>
      <returns>可传递到元数据存储区中的 <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable">
      <summary>验证所生成的特性表是否包含有效的特性信息。</summary>
      <exception cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException">该表的状态无效。</exception>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.AttributeTableValidationException">
      <summary>提供一项功能，用于在表中提供的元数据与实际类型上的属性、方法和事件不匹配时，从 <see cref="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable" /> 方法引发异常。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>创建 <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> 类的新实例，该实例使用指定的序列化存储区和上下文。</summary>
      <param name="info">序列化存储区。</param>
      <param name="context">序列化上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.String)">
      <summary>使用有关异常的指定消息创建 <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> 类的新实例。</summary>
      <param name="message">向用户提供的有关异常的消息。</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用用户消息和包含已发生的验证错误的枚举创建 <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> 类的新实例。</summary>
      <param name="message">向用户提供的有关异常的消息。</param>
      <param name="validationErrors">在验证过程中发生了零个或更多错误。</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的用户消息和引发当前异常的错误创建 <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> 类的新实例。</summary>
      <param name="message">向用户提供的有关异常的消息。</param>
      <param name="inner">引发当前异常的错误。</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用指定的用户消息、引发当前异常的错误以及包含验证过程中发生的错误的枚举创建 <see cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException" /> 类的新实例。</summary>
      <param name="message">向用户提供的有关异常的消息。</param>
      <param name="inner">引发当前异常的错误。</param>
      <param name="validationErrors">在验证过程中发生了零个或更多错误。</param>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.AttributeTableValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>执行序列化。</summary>
      <param name="info">序列化存储区。</param>
      <param name="context">序列化上下文。</param>
    </member>
    <member name="P:System.Activities.Presentation.Metadata.AttributeTableValidationException.ValidationErrors">
      <summary>获取验证错误的枚举。</summary>
      <returns>验证错误的枚举。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.IRegisterMetadata">
      <summary>指定可将附加特性添加到元数据存储区中的类。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.IRegisterMetadata.Register">
      <summary>在设计器初始化时，将附加元数据添加到元数据存储区中。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Metadata.MetadataStore">
      <summary>一个内存中的哈希表集合，可用于按 <see cref="T:System.Type" /> 快速查找设计器的元素。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Metadata.MetadataStore.AddAttributeTable(System.Activities.Presentation.Metadata.AttributeTable)">
      <summary>将给定的表添加到当前 <see cref="T:System.AppDomain" /> 对象的特性存储区中。</summary>
      <param name="table">要添加的表。</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedPropertiesService">
      <summary>将属性附加到当前实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedPropertiesService.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Model.AttachedPropertiesService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedPropertiesService.AddProperty(System.Activities.Presentation.Model.AttachedProperty)">
      <summary>将指定的属性添加到当前实例的属性。</summary>
      <param name="property">要添加的属性。</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedProperty">
      <summary>用于将附加信息关联或附加到对象的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Model.AttachedProperty" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.GetValue(System.Activities.Presentation.Model.ModelItem)">
      <summary>检索指定模型项的值。</summary>
      <returns>返回包含模型项的值的 <see cref="T:System.Object" />。</returns>
      <param name="modelItem">模型项。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.IsBrowsable">
      <summary>获取或设置一个布尔值，该值指示 <see cref="T:System.Activities.Presentation.Model.AttachedProperty" /> 是否可浏览。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Model.AttachedProperty" />可以浏览，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.IsReadOnly">
      <summary>获取一个值，该值确定附加的属性是否为只读。</summary>
      <returns>如果该属性为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.Name">
      <summary>获取或设置属性的名称。</summary>
      <returns>返回包含属性名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged(System.Activities.Presentation.Model.ModelItem)">
      <summary>创建一个通知，该通知指示指定的模型项已更改。</summary>
      <param name="modelItem">已更改的项。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.OwnerType">
      <summary>获取或设置所有者类型。</summary>
      <returns>返回包含所有者类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.ResetValue(System.Activities.Presentation.Model.ModelItem)">
      <summary>将指定模型项重置为默认值。</summary>
      <param name="modelItem">要重置的模型项。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)">
      <summary>将指定模型项设置为指定值。</summary>
      <param name="modelItem">要设置的模型项。</param>
      <param name="value">要设置的值。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty.Type">
      <summary>获取类型。</summary>
      <returns>返回包含类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedProperty`1">
      <summary>包含附加属性的集合。</summary>
      <typeparam name="T">附加属性的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Model.AttachedProperty`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty`1.Getter">
      <summary>获取或设置 getter。</summary>
      <returns>返回包含 getter 的 <see cref="T:System.Func`2" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty`1.GetValue(System.Activities.Presentation.Model.ModelItem)">
      <summary>检索指定模型项的值。</summary>
      <returns>返回包含值的 <see cref="T:System.Object" />。</returns>
      <param name="modelItem">模型项。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty`1.IsReadOnly">
      <summary>获取一个值，该值确定集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty`1.ResetValue(System.Activities.Presentation.Model.ModelItem)">
      <summary>将指定模型项重置为默认值。</summary>
      <param name="modelItem">要重置的模型项。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty`1.Setter">
      <summary>获取或设置 setter。</summary>
      <returns>返回包含 setter 的 <see cref="T:System.Action`2" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedProperty`1.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)">
      <summary>将指定模型项设置为指定值。</summary>
      <param name="modelItem">要设置的模型项。</param>
      <param name="Value">要设置的值。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedProperty`1.Type">
      <summary>获取集合的类型。</summary>
      <returns>返回包含集合的类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedPropertyInfo">
      <summary>提供附加属性的属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedPropertyInfo.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Model.AttachedPropertyInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedPropertyInfo.PropertyName">
      <summary>获取或设置附加属性的名称。</summary>
      <returns>附加属性的名称。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.AttachedPropertyInfo`1">
      <summary>提供附加属性的属性。</summary>
      <typeparam name="T">附加属性的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.Model.AttachedPropertyInfo`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Model.AttachedPropertyInfo`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.AttachedPropertyInfo`1.DefaultValue">
      <summary>获取或设置附加属性的默认值。</summary>
      <returns>附加属性的默认值。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.Change">
      <summary>一个抽象类，该类在实现后描述对模型树的更改。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.Change.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Model.Change" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.Change.Apply">
      <summary>在派生类中实现时，将更改应用于当前实例。</summary>
      <returns>如果更改已应用于当前实例，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.Change.Description">
      <summary>在派生类中实现时，获取更改的说明。</summary>
      <returns>返回包含更改说明的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.Change.GetInverse">
      <summary>在派生类中实现时，检索更改的逆更改。</summary>
      <returns>返回包含当前实例的逆实例的 <see cref="T:System.Activities.Presentation.Model.Change" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.CreateOptions">
      <summary>由 <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> 实例使用，用于指定如何创建新项。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Model.CreateOptions.InitializeDefaults">
      <summary>创建项并要求对象执行任何默认初始化。 此标志通常在用户正在创建新控件或对象时传入。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Model.CreateOptions.None">
      <summary>创建对象，并且不对其执行任何操作。 在使用 <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> 类创建项时，这是默认选项。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Model.EditingScope">
      <summary>一个编辑范围，该范围表示对 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 树所做更改的集合，这些更改可提交，或作为一个原子工作单元回滚。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScope.CanComplete">
      <summary>确定当前编辑范围实例是否可完成。</summary>
      <returns>如果编辑范围可完成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.EditingScope.Changes">
      <summary>获取更改的列表。</summary>
      <returns>返回包含更改的 <see cref="T:System.Collections.Generic.List`1" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges">
      <summary>获取一个布尔值，该值指定是否已将更改应用到编辑范围。</summary>
      <returns>如果已将更改应用到编辑范围，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScope.OnComplete">
      <summary>引发 Complete 事件。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScope.OnException(System.Exception)">
      <summary>处理指定的异常。</summary>
      <returns>如果异常得到了处理，则为 true；否则为 false。</returns>
      <param name="e">要处理的异常。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScope.OnRevert(System.Boolean)">
      <summary>引发 Revert 事件。</summary>
      <param name="finalizing">未在此实现中使用。</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.EditingScopeEventArgs">
      <summary>为 <see cref="E:System.Activities.Presentation.Model.ModelTreeManager.EditingScopeCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.EditingScopeEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Model.EditingScopeEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.EditingScopeEventArgs.EditingScope">
      <summary>获取或设置关联的 <see cref="T:System.Activities.Presentation.Model.EditingScope" />。</summary>
      <returns>返回一个 <see cref="T:System.Activities.Presentation.Model.EditingScope" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelEditingScope">
      <summary>表示对编辑存储区的一组更改。 更改组是事务性的。 可以将在一个编辑范围内所做的更改作为一个单元提交或中止。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.#ctor">
      <summary>创建一个新的 <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.CanComplete">
      <summary>确定是否应调用 <see cref="M:System.Activities.Presentation.Model.ModelEditingScope.OnComplete" />，或者是否应还原更改。 还原的原因可能包括：无法从源代码管理系统中签出文件以进行修改。</summary>
      <returns>如果可以完成更改，则为 true；如果应还原更改，则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.Complete">
      <summary>通过调用 <see cref="M:System.Activities.Presentation.Model.ModelEditingScope.OnComplete" /> 方法完成编辑范围。</summary>
      <exception cref="T:System.InvalidOperationException">编辑范围已还原或已完成。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelEditingScope.Description">
      <summary>描述更改组。 在提交更改之前可随时对其进行更改。</summary>
      <returns>返回一个描述更改的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.Dispose">
      <summary>除非编辑范围已完成或已还原，否则通过中止更改释放此对象。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.Dispose(System.Boolean)">
      <summary>通过中止更改释放此对象。</summary>
      <param name="disposing">确定是否应在撤消操作中还原更改，或是否由于正在终止对象而还原更改。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.OnComplete">
      <summary>执行编辑范围的实际完成操作。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.OnException(System.Exception)">
      <summary>处理异常。</summary>
      <returns>如果异常得到了处理，则为 true；否则为 false。</returns>
      <param name="exception">要处理的异常。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.OnRevert(System.Boolean)">
      <summary>执行编辑范围的实际还原操作。</summary>
      <param name="finalizing">确定是否由于正在终止对象而发生中止。 在这种情况下，某些撤消系统可能会尝试中止，而其他撤消系统则可能会放弃更改并将其记录为被动撤消操作。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelEditingScope.Revert">
      <summary>放弃在编辑范围内所做的更改。</summary>
      <exception cref="T:System.InvalidOperationException">已提交更改组。</exception>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelFactory">
      <summary>在设计器中创建 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 对象的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelFactory.CreateItem(System.Activities.Presentation.EditingContext,System.Object)">
      <summary>通过创建所提供的实例的深层副本，创建新的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>返回新创建的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="context">设计器的编辑上下文。</param>
      <param name="item">要克隆的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelFactory.CreateItem(System.Activities.Presentation.EditingContext,System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])">
      <summary>创建给定项类型的新 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>返回新创建的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="context">设计器的编辑上下文。</param>
      <param name="itemType">要创建的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 的类型。</param>
      <param name="options">在创建该项时使用的一组选项。</param>
      <param name="arguments">一个应传递给该项的构造函数的可选参数数组。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelFactory.CreateItem(System.Activities.Presentation.EditingContext,System.Type,System.Object[])">
      <summary>创建给定项类型的新 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>返回新创建的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="context">设计器的编辑上下文。</param>
      <param name="itemType">要创建的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 的类型。</param>
      <param name="arguments">一个应传递给该项的构造函数的可选参数数组。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelFactory.CreateStaticMemberItem(System.Activities.Presentation.EditingContext,System.Type,System.String)">
      <summary>创建一个表示给定类的静态成员值的新 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>返回新创建的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="context">设计器的编辑上下文。</param>
      <param name="type">包含所引用的静态成员的类型。</param>
      <param name="memberName">所引用的静态成员的名称。</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelItem">
      <summary>表示编辑模型中的一个项。 项可以为从复杂的数据结构直至颜色或整数的任何内容。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Attributes">
      <summary>获取在此项上声明的特性。</summary>
      <returns>一个包含项特性的集合。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.BeginEdit">
      <summary>打开设计器的编辑范围。 打开编辑范围后，所有对象之间的所有更改将保存到该范围中，直至事务完成或还原为止。 编辑范围可以嵌套，但是必须按顺序提交。</summary>
      <returns>必须完成或还原的 <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.BeginEdit(System.Boolean)">
      <summary>打开设计器的编辑范围。</summary>
      <returns>必须完成或还原的 <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />。</returns>
      <param name="shouldApplyChangesImmediately">如果指示应立即应用更改，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String)">
      <summary>打开设计器的编辑范围。 打开编辑范围后，所有对象之间的所有更改将保存到该范围中，直至事务完成或还原为止。 编辑范围可以嵌套，但是必须按顺序提交。</summary>
      <returns>必须完成或还原的 <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />。</returns>
      <param name="description">更改的可选说明。 这将设置到编辑范围的 <see cref="P:System.Activities.Presentation.Model.ModelEditingScope.Description" /> 属性中。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.BeginEdit(System.String,System.Boolean)">
      <summary>打开设计器的编辑范围。</summary>
      <returns>必须完成或还原的 <see cref="T:System.Activities.Presentation.Model.ModelEditingScope" />。</returns>
      <param name="description">更改的可选说明。 这将设置到编辑范围的 <see cref="P:System.Activities.Presentation.Model.ModelEditingScope.Description" /> 属性中。</param>
      <param name="shouldApplyChangesImmediately">如果指示应立即应用更改，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Content">
      <summary>获取项的 ContentPropertyAttribute 或 null。</summary>
      <returns>项的 ContentPropertyAttribute 作为 <see cref="T:System.Activities.Presentation.Model.ModelProperty" />。 如果 ContentPropertyAttribute 不由此项的 <see cref="P:System.Activities.Presentation.Model.ModelItem.ItemType" /> 声明，则 <see cref="P:System.Activities.Presentation.Model.ModelItem.Content" /> 返回 null。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.GetCurrentValue">
      <summary>返回 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 所包装的基础模型对象的当前值。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 作为 <see cref="T:System.Object" /> 所包装的基础模型对象的当前值。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.ItemType">
      <summary>获取返回项所表示的对象的类型。</summary>
      <returns>返回项所表示的对象的类型。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Name">
      <summary>获取或设置项的名称或 ID 。</summary>
      <returns>为 <see cref="T:System.String" /> 的类的名称或 ID。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Parent">
      <summary>获取返回作为此项的父级的项。</summary>
      <returns>一个表示此项的父级的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。 如果项包含在集合或字典中，则改为返回拥有该集合或字典的对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Parents">
      <summary>获取此项的所有父级。</summary>
      <returns>此项的父级。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Properties">
      <summary>设置此项上的公共属性。</summary>
      <returns>包含此项的公共属性的 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />。</returns>
    </member>
    <member name="E:System.Activities.Presentation.Model.ModelItem.PropertyChanged">
      <summary>实现 INotifyPropertyChanged。 使用此事件来侦听对模型所做的更改。 WPF 的数据绑定功能也使用此事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Root">
      <summary>获取返回作为此树的根的项。</summary>
      <returns>一个作为此树的根的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />；或者，如果此项不是树的一部分，则为 null。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Source">
      <summary>获取提供此值的属性。</summary>
      <returns>指示此值的源的 <see cref="T:System.Activities.Presentation.Model.ModelProperty" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.Sources">
      <summary>获取保存此值的所有属性。</summary>
      <returns>此值的源。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItem.ToString">
      <summary>返回此模型项中包含的基础模型对象的字符串表示形式。</summary>
      <returns>此模型项中包含的基础模型对象的字符串表示形式。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItem.View">
      <summary>获取以图形方式表示此项的 <see cref="T:System.Windows.DependencyObject" />。</summary>
      <returns>以图形方式表示此项的 <see cref="T:System.Windows.DependencyObject" />，或者，如果没有此类表示形式，则为 null。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelItemCollection">
      <summary>表示可按照索引单独访问的模型项的集合。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的一个新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Add(System.Activities.Presentation.Model.ModelItem)">
      <summary>将模型项添加到 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的末尾。</summary>
      <param name="item">要添加到集合中的模型项。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Add(System.Object)">
      <summary>将模型项添加到 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的末尾。</summary>
      <returns>返回包装在 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 中的 <paramref name="value" />。</returns>
      <param name="value">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Clear">
      <summary>从 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 中移除所有元素。</summary>
    </member>
    <member name="E:System.Activities.Presentation.Model.ModelItemCollection.CollectionChanged">
      <summary>当集合更改时发生。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Contains(System.Activities.Presentation.Model.ModelItem)">
      <summary>确定 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 是否包含指定的元素。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="item">要在集合中查找的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 是否包含指定的元素。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="value">要在集合中查找的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.CopyTo(System.Activities.Presentation.Model.ModelItem[],System.Int32)">
      <summary>将集合的内容复制到给定数组中。</summary>
      <param name="array">要将集合复制到其中的数组。</param>
      <param name="arrayIndex">要在数组中开始复制的位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 超出范围，或数组中的空间不足，无法存放集合的内容。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.Count">
      <summary>返回集合中项的计数。</summary>
      <returns>返回集合中项的 <see cref="T:System.Int32" /> 计数。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.GetEnumerator">
      <summary>获取循环访问 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的枚举数。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.IndexOf(System.Activities.Presentation.Model.ModelItem)">
      <summary>返回 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 中值的第一个匹配项从零开始的索引。</summary>
      <returns>如果在整个 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 中找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在集合中定位的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Insert(System.Int32,System.Activities.Presentation.Model.ModelItem)">
      <summary>将元素插入 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的模型项。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Insert(System.Int32,System.Object)">
      <summary>将元素插入 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的指定索引处。</summary>
      <returns>返回包装在 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 中的 <paramref name="value" />。</returns>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入的对象。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>如果该集合具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读集合。</summary>
      <returns>如果不可以修改该集合，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.IsSynchronized">
      <summary>获取一个值，指示对集合的访问是否同步（线程安全）。</summary>
      <returns>如果对该集合的访问是同步的（线程安全），则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.Item(System.Int32)">
      <summary>获取或设置集合中位于给定索引处的项。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="index">集合的从零开始的索引。</param>
    </member>
    <member name="F:System.Activities.Presentation.Model.ModelItemCollection.ItemProperty">
      <summary>标识 Item 依赖项属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Move(System.Int32,System.Int32)">
      <summary>将集合中的项移到另一个索引。</summary>
      <param name="fromIndex">要移动的项在移动之前的索引。</param>
      <param name="toIndex">项移动之后项的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="fromIndex" /> 或 <paramref name="toIndex" /> 为负，或者大于或等于 <see cref="P:System.Activities.Presentation.Model.ModelItemCollection.Count" />。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Remove(System.Activities.Presentation.Model.ModelItem)">
      <summary>从集合中移除 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>如果从集合中移除了 <see cref="T:System.Activities.Presentation.Model.ModelItem" />，则为 true；否则为 false。</returns>
      <param name="item">
        <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.Remove(System.Object)">
      <summary>从集合中移除值。</summary>
      <returns>如果从集合中成功移除了该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.RemoveAt(System.Int32)">
      <summary>移除位于给定索引处的项。</summary>
      <param name="index">项的索引。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>返回一个 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>返回一个 <see cref="T:System.Int32" /> 值，该值是集合中包含的元素数。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数为同步（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>返回可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>返回一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Add(System.Object)">
      <summary>将模型项添加到 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的末尾。</summary>
      <returns>返回新添加对象的索引。</returns>
      <param name="value">要添加到集合中的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 是否包含指定的元素。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 中定位的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>返回 <paramref name="value" /> 的 <see cref="T:System.Int32" /> 索引（如果在列表中找到）；否则返回 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将元素插入 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入的对象。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 的大小是否是固定的。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelItemDictionary">
      <summary>派生自 <see cref="T:System.Activities.Presentation.Model.ModelItem" />，并实现对键/值对字典的支持。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.#ctor">
      <summary>创建一个新的 <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" />。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Add(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)">
      <summary>采用给定的键将值添加到字典。</summary>
      <param name="key">表示要添加的键/值对中的键的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="value">表示要添加的键/值对中的值的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" /> 为只读。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Add(System.Object,System.Object)">
      <summary>采用给定的键将值添加到字典。 此方法将键和值包装在一组 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 对象中。</summary>
      <returns>返回表示键的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="key">要添加的键/值对中的键。</param>
      <param name="value">要添加的键/值对中的值。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="key" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" /> 为只读。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Clear">
      <summary>清除字典的内容。</summary>
    </member>
    <member name="E:System.Activities.Presentation.Model.ModelItemDictionary.CollectionChanged">
      <summary>在此集合的内容发生更改时引发。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem})">
      <summary>确定字典是否包含给定的键/值对。</summary>
      <returns>如果字典包含给定的键/值对，则为 true；否则为 false。</returns>
      <param name="item">要查找的键/值对。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.ContainsKey(System.Activities.Presentation.Model.ModelItem)">
      <summary>确定字典是否包含给定的键。</summary>
      <returns>如果字典包含给定键，则为 true；否则为 false。</returns>
      <param name="key">要查找的键。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.ContainsKey(System.Object)">
      <summary>确定字典是否包含给定的键。</summary>
      <returns>如果字典包含给定键，则为 true；否则为 false。</returns>
      <param name="key">要查找的键。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem}[],System.Int32)">
      <summary>将键/值对的数组复制到给定字典中。</summary>
      <param name="array">要复制的键/值对的数组。</param>
      <param name="arrayIndex">复制开始时所在的当前字典中从零开始的索引。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Count">
      <summary>返回字典中项的计数。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.GetEnumerator">
      <summary>返回字典中项的枚举器。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.IsFixedSize">
      <summary>确定字典是否为固定大小。</summary>
      <returns>如果字典具有固定大小，则为 true；否则为 false。 如果字典是只读的，默认实现将返回 true。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.IsReadOnly">
      <summary>确定是否无法修改字典。</summary>
      <returns>如果不能修改字典，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.IsSynchronized">
      <summary>获取一个值，该值指示对字典的访问是否同步（线程安全）。</summary>
      <returns>如果对该字典的访问是同步的（线程安全），则为 true；否则为 false。 默认实现返回 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Item(System.Activities.Presentation.Model.ModelItem)">
      <summary>获取或设置指定键处的项。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="key">项的指定键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或值为 null。</exception>
      <exception cref="T:System.InvalidOperationException">如果字典为只读并且您设置了新值。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">如果 <paramref name="key" /> 不在字典中。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Item(System.Object)">
      <summary>获取或设置指定键处的项。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="key">项的指定键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或值为 null。</exception>
      <exception cref="T:System.InvalidOperationException">如果字典为只读并且您设置了新值。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">如果 <paramref name="key" /> 不在字典中。</exception>
    </member>
    <member name="F:System.Activities.Presentation.Model.ModelItemDictionary.KeyProperty">
      <summary>DependencyProperty，它表示添加到字典中所有项的键/值对中的键。 KeyProperty 的日期类型为 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Keys">
      <summary>获取集合的键。 要保证键具有与值一样的顺序。 生成的集合是只读的。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Remove(System.Activities.Presentation.Model.ModelItem)">
      <summary>从字典中移除具有指定键的项。</summary>
      <returns>如果项存在，则为 true；否则为 false。</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">如果字典为只读。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.Remove(System.Object)">
      <summary>从字典中移除项。</summary>
      <returns>如果项存在，则为 true；否则为 false。</returns>
      <param name="key">要使用键作为搜索条件进行移除的项。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">如果字典为只读。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.SyncRoot">
      <summary>获取可用于同步对此集合的访问的对象。</summary>
      <returns>返回 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem})">
      <summary>在集合末尾添加一个新元素。</summary>
      <param name="item">要添加的元素。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem})">
      <summary>确定字典是否包含给定的键/值对。</summary>
      <returns>如果字典包含给定的键/值对，则为 true；否则为 false。</returns>
      <param name="item">要查找的键/值对。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem}[],System.Int32)">
      <summary>将键/值对的数组复制到给定字典中。</summary>
      <param name="array">要复制的键/值对的数组。</param>
      <param name="arrayIndex">复制开始时所在的当前字典中从零开始的索引。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem})">
      <summary>从字典中移除指定的键/值对。</summary>
      <returns>如果项存在并已移除，则为 true；否则为 false。</returns>
      <param name="item">要移除的键/值对。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引开始，将 <see cref="T:System.Collections. ICollection" /> 的元素复制到一个数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections. ICollection" /> 复制的元素的目标数组的一维数组。 该数组必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素个数。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">作为要添加的元素的值的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Clear">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除所有元素。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 包含带有该键的元素，则为 true；否则，为 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 对象中定位的键。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>一个用于 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>带有指定键的元素。</returns>
      <param name="key">要获取或设置的元素的键。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Keys">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" /> 对象，其中包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" /> 对象，其中包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" /> 对象，其中包含 <see cref="T:System.Collections.IDictionary" /> 对象的值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" /> 对象，其中包含 <see cref="T:System.Collections.IDictionary" /> 对象的值。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.TryGetValue(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem@)">
      <summary>检索给定键的值（如果可能）。</summary>
      <returns>如果指定的键存在值，则为 true；否则为 false。</returns>
      <param name="key">与要检索的值关联的键。</param>
      <param name="value">与指定的键相关联的值。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemDictionary.TryGetValue(System.Object,System.Activities.Presentation.Model.ModelItem@)">
      <summary>检索给定键的值（如果可能）。</summary>
      <returns>如果指定的键存在值，则为 true；否则为 false。</returns>
      <param name="key">与要检索的值关联的键。</param>
      <param name="value">与指定的键相关联的值。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelItemDictionary.Values">
      <summary>获取集合的值。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelItemExtensions">
      <summary>实现基模型项的扩展。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.Focus(System.Activities.Presentation.Model.ModelItem)">
      <summary>将键盘焦点置于指定的设计器项上。</summary>
      <param name="item">要将焦点置于其上的设计器项。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.Focus(System.Activities.Presentation.Model.ModelItem,System.Int32)">
      <summary>将键盘焦点置于指定的设计器项上。</summary>
      <param name="item">要将焦点置于其上的设计器项。</param>
      <param name="level">在指定的设计器不可见的情况下，用于限制模型树扩展的最大级别数。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.GetEditingContext(System.Activities.Presentation.Model.ModelItem)">
      <summary>检索指定模型项的编辑上下文。</summary>
      <returns>指定模型项的编辑上下文。</returns>
      <param name="modelItem">模型项。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.GetModelItemFromPath(System.String,System.Activities.Presentation.Model.ModelItem)">
      <summary>从指定的路径和根中检索模型项。</summary>
      <returns>指定的路径和根中的模型项。</returns>
      <param name="path">路径。</param>
      <param name="root">根。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.GetModelPath(System.Activities.Presentation.Model.ModelItem)">
      <summary>检索指定模型项的路径。</summary>
      <returns>指定模型项的路径。</returns>
      <param name="modelItem">模型项。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelItemExtensions.IsParentOf(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)">
      <summary>返回一个值，该值指示第一个指定设计器项是否为第二个指定设计器项的父级。</summary>
      <returns>如果 <paramref name="item" />是 <paramref name="child" /> 的父级，则为 true；否则为 false。</returns>
      <param name="item">要检查的父设计器项。</param>
      <param name="child">要检查的子设计器项。</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelMemberCollection`2">
      <summary>一个 <see cref="T:System.Activities.Presentation.Model.ModelPropertyCollection" /> 派生自其中的抽象基类。</summary>
      <typeparam name="TItemType">集合所表示的项的类型。</typeparam>
      <typeparam name="TFindType">应当用作“Find”方法中的键的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.Find(System.String)">
      <summary>在集合中搜索给定键，并在找到时将其返回。 如果没有找到键，此方法则返回 null。</summary>
      <returns>返回 <see cref="{0}" />。</returns>
      <param name="name">给定键的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.Find(System.String,System.Boolean)">
      <summary>在集合中搜索给定键，并在找到时将其返回。 如果未找到该键，则此方法引发异常或返回 null，具体取决于传递到 <paramref name="throwOnError" /> 的值。</summary>
      <returns>返回 <see cref="{0}" />。</returns>
      <param name="name">给定键的名称。</param>
      <param name="throwOnError">如果找不到该指定键时引发异常；则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 未找到， <paramref name="throwOnError" /> 为 true 。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.Find(`1)">
      <summary>在集合中搜索给定键，并在找到时将其返回。 如果没有找到键，此方法则返回 null。</summary>
      <returns>返回 <see cref="{0}" />。</returns>
      <param name="value">给定键的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.Find(`1,System.Boolean)">
      <summary>在集合中搜索给定键，并在找到时将其返回。 如果未找到该键，则此方法引发异常或返回 null，具体取决于传递到 <paramref name="throwOnError" /> 的值。</summary>
      <returns>返回 <see cref="{0}" />。</returns>
      <param name="value">给定键的类型。</param>
      <param name="throwOnError">如果找不到该指定键时引发异常；则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 未找到， <paramref name="throwOnError" /> 为 true 。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.GetEnumerator">
      <summary>返回一个枚举器，用于循环访问集合中的值。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelMemberCollection`2.Item(System.String)">
      <summary>按名称获取位于指定索引处的值。</summary>
      <returns>位于指定索引处的值（按名称）。</returns>
      <param name="name">要检索的类型的名称。</param>
      <exception cref="ArgumentException">找不到 <paramref name="name" />。</exception>
      <exception cref="ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelMemberCollection`2.Item(`1)">
      <summary>按类型获取位于指定索引处的值。</summary>
      <returns>位于指定索引处的值（按类型）。</returns>
      <param name="value">要检索的类型。</param>
      <exception cref="ArgumentException">找不到 <paramref name="value" />。</exception>
      <exception cref="ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelMemberCollection`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>返回 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelProperty">
      <summary>
        <see cref="T:System.Activities.Presentation.Model.ModelProperty" /> 表示 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 上的属性。 模型属性与项的实例关联，从而允许它们具有简单的 Value get/set 属性，而不是使用 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 比较麻烦的 GetValue/SetValue 机制。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.#ctor">
      <summary>创建一个新的 <see cref="T:System.Activities.Presentation.Model.ModelProperty" />。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.AttachedOwnerType">
      <summary>如果 <see cref="P:System.Activities.Presentation.Model.ModelProperty.IsAttached" /> 返回 true，则返回定义此属性的类型；否则返回 null。</summary>
      <returns>返回 <see cref="T:System.Type" /> 或 null。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Attributes">
      <summary>返回在此属性上声明的特性。</summary>
      <returns>以 <see cref="T:System.ComponentModel.AttributeCollection" /> 的形式返回特性。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.ClearValue">
      <summary>清除属性的本地值。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Collection">
      <summary>以 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" /> 的形式返回 <see cref="P:System.Activities.Presentation.Model.ModelProperty.Value" /> 强制转换。</summary>
      <returns>以 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />的形式返回属性值，或返回 null。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.ComputedValue">
      <summary>返回此属性的当前计算所得值。 在此属性上设置值与调用 <see cref="M:System.Activities.Presentation.Model.ModelProperty.SetValue(System.Object)" /> 相同，但可在数据绑定表达式中使用。</summary>
      <returns>以 <see cref="T:System.Object" /> 的形式返回计算所得的值。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Converter">
      <summary>返回要用于此属性的类型转换器。</summary>
      <returns>返回 <see cref="T:System.ComponentModel.TypeConverter" /> 以用于此属性。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.DefaultValue">
      <summary>返回此属性的默认值。 如果属性未定义默认值，则此属性将返回 null。</summary>
      <returns>返回 <see cref="T:System.Object" /> 或 null。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Dictionary">
      <summary>以 <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" /> 的形式返回 <see cref="P:System.Activities.Presentation.Model.ModelProperty.Value" /> 强制转换。 如果属性值不是字典，则此属性将返回 null。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" /> 或 null。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.Equals(System.Object)">
      <summary>确定属性的相等性。 如果这些属性具有相同的名称和父级，则它们相等。</summary>
      <returns>如果 <paramref name="obj" /> 是等于此属性的 <see cref="T:System.Activities.Presentation.Model.ModelProperty" />，则为 true；否则为 false。</returns>
      <param name="obj">要与此属性进行比较的属性。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.GetHashCode">
      <summary>作为 <see cref="T:System.Activities.Presentation.Model.ModelProperty" /> 的哈希函数。</summary>
      <returns>以 <see cref="T:System.Int32" /> 形式返回哈希代码。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsAttached">
      <summary>确定属性是否表示不同类型中的附加属性。</summary>
      <returns>如果该属性表示不同类型中的附加属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsBrowsable">
      <summary>确定属性是否可显示在属性窗口中。</summary>
      <returns>如果该属性可以显示在属性窗口中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsCollection">
      <summary>确定属性中包含的值是否为 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />。</summary>
      <returns>如果属性中包含的值为 <see cref="T:System.Activities.Presentation.Model.ModelItemCollection" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsDictionary">
      <summary>确定属性中包含的值是否为 <see cref="T:System.Activities.Presentation.Model.ModelItemDictionary" />。</summary>
      <returns>如果属性中包含的值为 <see cref="T:System.Activities.Design.Model.ModelItemDictionary" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsReadOnly">
      <summary>确定属性是否为只读。</summary>
      <returns>如果该属性为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.IsSet">
      <summary>确定属性的值是否是在本地设置的。</summary>
      <returns>如果在本地设置该属性的值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Name">
      <summary>获取此属性的名称。</summary>
      <returns>此属性的名称。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.op_Equality(System.Activities.Presentation.Model.ModelProperty,System.Activities.Presentation.Model.ModelProperty)">
      <summary>确定属性是否相等。 如果这些属性具有相同的名称和父级，则它们相等。</summary>
      <returns>如果第一个属性与第二个属性相等，则为 true；否则为 false。</returns>
      <param name="first">第一个属性。</param>
      <param name="second">第二个属性。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.op_Inequality(System.Activities.Presentation.Model.ModelProperty,System.Activities.Presentation.Model.ModelProperty)">
      <summary>确定属性是否不相等。 如果这些属性具有相同的名称和父级，则它们相等。</summary>
      <returns>如果第一个属性与第二个属性相等，则为 false；否则为 true。</returns>
      <param name="first">第一个属性。</param>
      <param name="second">第二个属性。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Parent">
      <summary>返回此属性的父级。</summary>
      <returns>以 <see cref="T:System.Activities.Design.Model.ModelItem" /> 的形式返回此属性的父级。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.PropertyType">
      <summary>返回属性的数据类型。</summary>
      <returns>返回属性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelProperty.SetValue(System.Object)">
      <summary>在属性上设置本地值。</summary>
      <returns>以 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 的形式返回  <paramref name="value" />。</returns>
      <param name="value">要设置的新值。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelProperty.Value">
      <summary>返回设置到此属性中的值。</summary>
      <returns>以 <see cref="T:System.Activities.Presentation.Model.ModelItem" />的形式返回属性值，或返回 null。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelPropertyCollection">
      <summary>包含属性的枚举。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelPropertyCollection.#ctor">
      <summary>创建一个新的 <see cref="T:System.Activities.Presentation.Model.ModelPropertyCollection" />。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Model.ModelTreeManager">
      <summary>提供根模型项和模型服务，并使您能够将模型树与 XAML 文本同步。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelTreeManager.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>使用指定的上下文初始化 <see cref="T:System.Activities.Presentation.Model.ModelTreeManager" /> 类的新实例。</summary>
      <param name="context">上下文。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelTreeManager.CreateModelItem(System.Activities.Presentation.Model.ModelItem,System.Object)">
      <summary>基于指定的父级和实例创建模型项。</summary>
      <returns>返回包含新模型项的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="parent">父项。</param>
      <param name="instance">实例。</param>
    </member>
    <member name="E:System.Activities.Presentation.Model.ModelTreeManager.EditingScopeCompleted">
      <summary>当编辑范围完成时发生。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelTreeManager.GetModelItem(System.Object,System.Boolean)">
      <summary>返回管理器的模型项。</summary>
      <returns>管理器的模型项。</returns>
      <param name="instance">实例。</param>
      <param name="shouldExpandModelTree">如果管理器应展开模型树，则为 True；否则为 false。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.ModelTreeManager.Load(System.Object)">
      <summary>加载指定的根实例。</summary>
      <param name="rootInstance">要加载的根实例。</param>
    </member>
    <member name="P:System.Activities.Presentation.Model.ModelTreeManager.Root">
      <summary>获取根。</summary>
      <returns>包含根的 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 对象。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Model.MorphHelper">
      <summary>一个用于更新模型项引用和属性的帮助器类。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.MorphHelper.AddPropertyValueMorphHelper(System.Type,System.Activities.Presentation.Model.PropertyValueMorphHelper)">
      <summary>添加方法来处理指定属性类型的类型转换。</summary>
      <param name="propertyType">属性类型。</param>
      <param name="extension">可处理类型转换的方法。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.MorphHelper.GetPropertyValueMorphHelper(System.Type)">
      <summary>返回可处理指定属性类型的类型转换的方法。</summary>
      <returns>可处理指定属性类型的类型转换的方法。</returns>
      <param name="propertyType">要为其获取方法的属性类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.MorphHelper.MorphObject(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)">
      <summary>将模型项引用更新为模型项父级和源中的指定新模型项。</summary>
      <param name="oldModelItem">要获取其父级和源的旧模型项。</param>
      <param name="newModelitem">新模型项。</param>
    </member>
    <member name="M:System.Activities.Presentation.Model.MorphHelper.MorphProperties(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)">
      <summary>通过指定旧模型项中的对应属性值更新指定新模型项中的属性值。</summary>
      <param name="oldModelItem">旧模型项。</param>
      <param name="newModelitem">新模型项。</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.PropertyValueMorphHelper">
      <summary>表示一个委托，该委托用于引用为 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 属性值处理类型转换的方法。</summary>
      <returns>转换的属性值。</returns>
      <param name="originalValue">要转换为新类型的模型项属性值。</param>
      <param name="newModelProperty">需要将 <paramref name="originalValue" /> 转换为其类型的模型项属性。</param>
    </member>
    <member name="T:System.Activities.Presentation.Model.TextImage">
      <summary>包含从模型树中提取的可搜索的字符串。 所有字符串都秩序井然。 指向内容中的光标的启动索引点，依赖于模型项树中的当前选项。 搜索实现器可以从开始索引处启动搜索。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Model.TextImage.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Model.TextImage" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Model.TextImage.Lines">
      <summary>获取或设置与 <see cref="T:System.Activities.Presentation.Model.TextImage" /> 关联的行的泛型列表。</summary>
      <returns>线条的泛型列表。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Model.TextImage.StartLineIndex">
      <summary>获取或设置与 <see cref="T:System.Activities.Presentation.Model.TextImage" /> 关联的起始行索引。</summary>
      <returns>起始行索引。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.CategoryEditor">
      <summary>提供一个自定义 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" />，用于对 <see cref="T:System.Windows.Forms.PropertyGrid" /> 中显示的属性进行分组。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.ConsumesProperty(System.Activities.Presentation.PropertyEditing.PropertyEntry)">
      <summary>确定哪些属性由 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> 编辑。</summary>
      <returns>如果此编辑器编辑指定的属性，则为 true；否则为 false。</returns>
      <param name="propertyEntry">
        <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 实例，可对其进行检查以确定是否它包含在由 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> 编辑的那些属性中。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.CreateEditorAttribute(System.Activities.Presentation.PropertyEditing.CategoryEditor)">
      <summary>为指定的 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> 创建一个新的 <see cref="T:System.ComponentModel.EditorAttribute" />。</summary>
      <returns>一个新的 <see cref="T:System.ComponentModel.EditorAttribute" />。</returns>
      <param name="editor">要为其创建新 <see cref="T:System.ComponentModel.EditorAttribute" /> 的 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.CreateEditorAttribute(System.Type)">
      <summary>为指定的 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> 类型创建一个新的 <see cref="T:System.ComponentModel.EditorAttribute" />。</summary>
      <returns>一个新的 <see cref="T:System.ComponentModel.EditorAttribute" />。</returns>
      <param name="categoryEditorType">要为其创建新 <see cref="T:System.ComponentModel.EditorAttribute" /> 的 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> 类型。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEditor.EditorTemplate">
      <summary>获取一个 <see cref="T:System.Windows.DataTemplate" />，它可由属性检查器承载，为 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEditor" /> 提供用户界面。</summary>
      <returns>
        <see cref="T:System.Windows.DataTemplate" /> 用户界面。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEditor.GetImage(System.Windows.Size)">
      <summary>返回一个  <see cref="T:System.Object" />，宿主可将其显示在 <see cref="T:System.Windows.Controls.ContentControl" /> 中。</summary>
      <returns>要显示在 <see cref="T:System.Windows.Controls.ContentControl" /> 中的 <see cref="T:System.Object" />。</returns>
      <param name="desiredSize">要返回的图像的所需 <see cref="T.Systems.Windows.Size" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEditor.TargetCategory">
      <summary>获取一个本地化的字符串，指示编辑器所属的类别。</summary>
      <returns>一个表示编辑器类别的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.CategoryEntry">
      <summary>建立一个 Category 模型，该模型由一个本地化的名称和一个属性集合组成。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.#ctor(System.String)">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEntry" /> 类的新实例。</summary>
      <param name="name">一组属性的本地化的 Category 名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>设置一个新的属性筛选器。</summary>
      <param name="filter">正在应用的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.CategoryName">
      <summary>获取本地化的 Category 名称。</summary>
      <returns>本地化的 Category 名称。</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.FilterApplied">
      <summary>声明 <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> 事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.Item(System.String)">
      <summary>返回此 <see cref="System.Activities.Presentation.PropertyEditing.CategoryEntry" /> 对象的具有给定属性名的属性实例。</summary>
      <returns>对应于属性名称参数的属性（如果存在）；否则，null。</returns>
      <param name="propertyName">要为其返回属性实例的字符串属性名。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.MatchesFilter">
      <summary>获取或设置一个值，指示 <see cref="T:System.Activities.Presentation.PropertyEditing.CategoryEntry" /> 是否与某个筛选器相匹配。</summary>
      <returns>如果筛选器与指定的筛选器相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)">
      <summary>指示 <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> 是否与某谓词匹配。</summary>
      <returns>如果存在匹配项，则为 true；否则为 false。</returns>
      <param name="predicate">要匹配的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" />，它是一个字符串。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.OnFilterApplied(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>当应用属性筛选器时，引发 <see cref="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.FilterApplied" /> 事件。</summary>
      <param name="filter">正在应用的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.CategoryEntry.OnPropertyChanged(System.String)">
      <summary>引发 <see cref="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.PropertyChanged" /> 事件。</summary>
      <param name="propertyName">已更改的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.CategoryEntry.Properties">
      <summary>获取类别中所有属性的 <see cref="Systems.Collections.IEnumerable" /> 集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它是类别中所有属性的集合。</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.CategoryEntry.PropertyChanged">
      <summary>声明 <see cref="T:Microsoft.Windows.Design.PropertyEditing.INotifyPropertyChanged" /> 事件。</summary>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource">
      <summary>标识并报告依赖于父属性的属性的值来源。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.CustomMarkupExtension">
      <summary>获取 XAML 代码中的一个包含标记扩展的属性元素。</summary>
      <returns>值来源是一个包含标记扩展的 XAML 元素。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.DataBound">
      <summary>获取一个属性的值，该属性表示属性与数据源之间的绑定。</summary>
      <returns>一个指定数据绑定的值来源。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.DefaultValue">
      <summary>获取一个属性的值，该属性没有在 XAML 中设置其值，也没有从其父属性继承任何值。</summary>
      <returns>默认值来源。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.Inherited">
      <summary>获取一个属性的值，该属性从父属性继承值。</summary>
      <returns>一个指示属性从父属性继承值的值来源。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsCustomMarkupExtension">
      <summary>获取一个值，指示属性是否设置为自定义标记扩展。</summary>
      <returns>如果属性是自定义标记扩展，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsDataBound">
      <summary>获取一个值，指示属性是否设置为数据绑定表达式。</summary>
      <returns>如果属性设置为数据绑定表达式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsDefaultValue">
      <summary>获取一个值，指示属性是否设置为其默认值。</summary>
      <returns>如果该属性设置为其默认值，则为 true；否则为false 。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsExpression">
      <summary>获取一个值，指示属性是否设置为表达式。</summary>
      <returns>如果该属性设置为一表达式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsInherited">
      <summary>获取一个值，指示属性是否从父属性继承值。</summary>
      <returns>如果属性是继承，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsLocal">
      <summary>获取一个值，指示属性是否设置为本地值。</summary>
      <returns>如果属性设置为本地值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsLocalResource">
      <summary>获取一个值，指示属性是否设置为资源值，该资源值可出现在代码块、该代码块中嵌套的代码块或函数定义中的正式参数声明列表内。</summary>
      <returns>如果属性设置为本地资源值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsResource">
      <summary>只读属性，如果属性设置为系统或本地资源，则返回 true。</summary>
      <returns>如果属性设置为系统或本地资源，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsSystemResource">
      <summary>获取一个值，指示属性是否设置为系统资源。</summary>
      <returns>如果属性设置为系统资源，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.IsTemplateBinding">
      <summary>获取一个值，指示属性是否设置为 <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.TemplateBinding" /> 标记扩展。</summary>
      <returns>如果属性设置为模板绑定标记扩展，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.Local">
      <summary>获取一个属性的值，该属性设置为本地值。</summary>
      <returns>一个包含本地值的值来源。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.LocalDynamicResource">
      <summary>获取一个属性的值，该属性表示 <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.LocalDynamicResource" /> 引用。</summary>
      <returns>一个包含动态资源引用的值来源。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.LocalStaticResource">
      <summary>获取一个属性的值，该属性表示 <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.LocalStaticResource" /> 引用。</summary>
      <returns>一个包含静态资源引用的值来源。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.SystemResource">
      <summary>获取一个属性的值，该属性设置为 <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.SystemResource" />。</summary>
      <returns>一个包含指定系统资源的值的值来源。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.TemplateBinding">
      <summary>获取一个属性的值，该属性表示 <see cref="P:System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource.TemplateBinding" /> 标记扩展。</summary>
      <returns>一个表示模板绑定标记扩展的值来源。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor">
      <summary>
        <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyContainer.PropertyEntry" /> 对象的所有对话框编辑逻辑的容器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor" /> 类的新实例，该实例没有特定的模板。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.#ctor(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>使用指定的对话框编辑器和内联编辑器模板创建 <see cref="T:System.Activities.Design.PropertyEditing.DialogPropertyValueEditor" /> 类的新实例。</summary>
      <param name="dialogEditorTemplate">承载在特定于宿主的对话框 chrome 中的 <see cref="T:System.Window.DataTemplate" />，其 <see cref="P:System.Activities.ActivityContext.DataContext" /> 设置为与正在编辑的属性相对应的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</param>
      <param name="inlineEditorTemplate">用于内联编辑器用户界面的 <see cref="T:System.Windows.DataTemplate" />。 如果使用，其 <see cref="P:System.Activities.ActivityContext.DataContext" /> 设置为与正在编辑的属性相对应的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate">
      <summary>获取或设置由特定于宿主的对话框所承载的 <see cref="T:System.Windows.DataTemplate" />，并且其 <see cref="P:System.Activities.ActivityContext.DataContext" /> 设置为 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue" />。</summary>
      <returns>由特定宿主对话框承载的 <see cref="T:System.Windows.DataTemplate" /> 对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.ShowDialog(System.Activities.Presentation.PropertyEditing.PropertyValue,System.Windows.IInputElement)">
      <summary>当 <see cref="P:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate" /> 为 null 并且用户调用了一个对话框时调用。</summary>
      <param name="propertyValue">正在编辑的属性的 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue" />。</param>
      <param name="commandSource">一个 <see cref="T:System.Windows.IinputElement" />，它可用作执行 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands" /> 的源。</param>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton">
      <summary>表示一个按钮，该按钮使用户能够在属性网格的不同 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 模式之间切换。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>确定在收到 <see cref="T:System.Windows.MouseButtonEventArgs" /> 事件时要显示的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode" /> 的类型。</summary>
      <param name="e">
        <see cref="T:System.Windows.MouseButtonEventArgs" /> 事件参数。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>检查 <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainer.OwningPropertyContainerProperty" /> 是否更改了（或者获取或失去）其拥有的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" />；并且如果为 <see cref="T:System.Boolean.True" />，则将 <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> 设置为要切换到的模式。</summary>
      <param name="e">
        <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 事件参数。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.SyncModeToOwningContainer">
      <summary>获取一个值，当该值为 <see cref="T:System.Boolean.True" /> 时，表示将自动计算 <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" />，以便与拥有 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 的 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyContainer.ActiveEditMode" /> 相匹配。 否则，要切换到的模式将基于 <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> 属性。</summary>
      <returns>如果  <see cref="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton" />将自动切换到其 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 的编辑模式，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.SyncModeToOwningContainerProperty">
      <summary>注册一个依赖性属性，当该属性为 <see cref="T:System.Boolean.True" /> 时，表示将自动计算 <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" />，以便与拥有 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 的 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyContainer.ActiveEditMode" /> 相匹配。 否则，要切换到的模式将基于 <see cref="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> 属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditMode">
      <summary>在单击 <see cref="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton" /> 时要切换到的编辑模式。</summary>
      <returns>一个 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 编辑模式。</returns>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton.TargetEditModeProperty">
      <summary>注册一个依赖项属性，该属性在单击 <see cref="T:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton" /> 时获取或设置目标模式。</summary>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute">
      <summary>指定单一编辑器选择属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.Name">
      <summary>获取或设置特性的名称</summary>
      <returns>属性名。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.TryGetOptionValue(System.Collections.IEnumerable,System.String,System.Object@)">
      <summary>确定该集合是否包含特定属性及返回特性值。</summary>
      <returns>如果指定的特性在集合中找到，则为 true；否则为 false。</returns>
      <param name="attributes">特性的集合。</param>
      <param name="optionName">要检查的特性的名称。</param>
      <param name="optionValue">此方法返回时，将包含该特性的此值。 该参数未经初始化即被传递。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.TypeId">
      <summary>获取此特性的唯一标识符。</summary>
      <returns>此特性的唯一标识符。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditorOptionAttribute.Value">
      <summary>获取或设置特性的值。</summary>
      <returns>属性的值。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.EditorReuseAttribute">
      <summary>表示适用于某个方法的一个特性，该方法调用属性编辑器并传送该属性编辑器是否不重新启动就能用于编辑后续属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.EditorReuseAttribute.#ctor(System.Boolean)">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.EditorReuseAttribute" /> 类的新实例。</summary>
      <param name="reuseEditor">如果此特性要应用于调用可重用属性编辑器的方法，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.EditorReuseAttribute.ReuseEditor">
      <summary>获取一个 Boolean 值，指示特性是否要应用于调用可重用属性编辑器的方法。</summary>
      <returns>如果特性被应用于调用可重用属性编辑器的方法，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor">
      <summary>属性的所有扩展编辑器逻辑的容器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor" /> 类的新实例，该实例没有指定的扩展和内联编辑器 <see cref="T:System.Windows.DataTemplate" /> 对象。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor.#ctor(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>使用指定的扩展和内联编辑器 <see cref="T:System.Windows.DataTemplate" /> 对象来创建 <see cref="T:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor" /> 类的新实例。</summary>
      <param name="extendedEditorTemplate">用于弹出或固定的扩展编辑器的 <see cref="T:System.Windows.DataTemplate" />。</param>
      <param name="inlineEditorTemplate">用于内联编辑器的 <see cref="T:System.Windows.DataTemplate" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor.ExtendedEditorTemplate">
      <summary>获取或设置一个 <see cref="T:System.Windows.DataTemplate" />，它用于弹出或固定的扩展编辑器。</summary>
      <returns>用于弹出或固定的扩展编辑器的 <see cref="T:System.Windows.DataTemplate" /> 对象。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget">
      <summary>由属性编辑的宿主基础结构用来处理排序和筛选功能的界面。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>用于在 <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> 上设置新的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />。</summary>
      <param name="filter">新的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 实例。</param>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.FilterApplied">
      <summary>事件的声明，当通过调用 <see cref="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)" /> 来更改 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 时引发该事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.MatchesFilter">
      <summary>只读属性，如果 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 与对象匹配，则返回 true。</summary>
      <returns>如果属性筛选器与属性筛选器目标相匹配，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)">
      <summary>用于确定此 <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> 是否与特定的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" /> 相匹配。</summary>
      <returns>如果属性筛选器目标与属性筛选器谓词相匹配，则为 true；否则为 false。</returns>
      <param name="predicate">要进行匹配的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" />。</param>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode">
      <summary>包含 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 的不同编辑模式。</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.Dialog">
      <summary>属性检查器对话框窗口的编辑模式，它使所实现的弹出窗口能够包含属性编辑器。</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.ExtendedPinned">
      <summary>属性检查器对话框窗口的编辑器模式，它使所实现的附加用户界面能够固定在属性检查器窗口中。</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.ExtendedPopup">
      <summary>属性检查器对话框窗口的编辑器模式，它使所实现的附加用户界面能够显示在属性检查器窗口之前。</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.Inline">
      <summary>属性检查器对话框窗口的内联编辑器模式，它使用户能够直接在该窗口中编辑值。</summary>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyEntry">
      <summary>表示选定项的属性的数据，并且使此属性能够通过特定于类型的数据进行编辑。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.#ctor(System.Activities.Presentation.PropertyEditing.PropertyValue)">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 类的新实例，该实例用作指定的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 的子属性。</summary>
      <param name="parentValue">父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>存储目标属性值是否与指定的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 相匹配。</summary>
      <param name="filter">要应用的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.CategoryName">
      <summary>获取此属性所属的类别的名称。</summary>
      <returns>一个包含类别名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.CreatePropertyValueInstance">
      <summary>使宿主基础结构能够创建新的特定于宿主的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 实例。</summary>
      <returns>一个新的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.Description">
      <summary>获取封装的属性的说明。</summary>
      <returns>一个包含说明的字符串。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.DisplayName">
      <summary>获取 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 的显示名称。</summary>
      <returns>一个包含显示名称的字符串。</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyEntry.FilterApplied">
      <summary>
        <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> 事件的声明，在通过调用 <see cref="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)" /> 方法来更改 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 时，就会发生此事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.HasStandardValues">
      <summary>获取一个值，指示是否有一组标准值可供此 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 使用。</summary>
      <returns>如果有一组标准值可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.IsAdvanced">
      <summary>获取一个值，指示 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 是否是自定义的。</summary>
      <returns>如果属性项是自定义的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 是否为只读。</summary>
      <returns>如果该属性输入为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.MatchesFilter">
      <summary>获取一个值，指示 <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> 是否与筛选器相匹配。 设置一个指示 <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> 与筛选器是否匹配的值，并且为属性更改引发事件处理程序方法。</summary>
      <returns>如果该目标对象与筛选器相匹配，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)">
      <summary>
        <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> 方法的实现，用于确定目标显示名称或类型名称是否与包含筛选器名称的指定字符串相匹配。</summary>
      <returns>如果该目标显示名称或类型名称与指定的字符串相匹配，则为 true；否则为 false。</returns>
      <param name="predicate">要与目标对象相匹配的筛选器的 <see cref="T:System.String" /> 显示名称或类型名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.OnFilterApplied(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>引发 <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyEntry.FilterApplied" /> 事件。</summary>
      <param name="filter">要应用的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> PropertyChanged 事件。</summary>
      <param name="e">此事件的 EventArgs。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntry.OnPropertyChanged(System.String)">
      <summary>当 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 侦听到 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 已更改时，引发 <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> 事件。</summary>
      <param name="propertyName">其值已更改的属性的名称。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.ParentValue">
      <summary>从宿主基础结构派生的类中获取父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</summary>
      <returns>父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyChanged">
      <summary>
        <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> 事件的声明，在属性值发生更改时，就会发生此事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyName">
      <summary>获取属性的名称。</summary>
      <returns>一个包含属性名称的字符串。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyType">
      <summary>获取属性的类型。</summary>
      <returns>一个包含属性类型的类型。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue">
      <summary>获取此 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValueEditor">
      <summary>获取用于编辑此 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 值的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" />。</summary>
      <returns>一个包含当前编辑器的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> 对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.StandardValues">
      <summary>获取此 <see cref="T:System.Activities.Design.PropertyEditing.PropertyEntry" /> 支持的一组可能值。</summary>
      <returns>可能值的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection">
      <summary>维护给定父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 的子属性的集合。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.#ctor(System.Activities.Presentation.PropertyEditing.PropertyValue)">
      <summary>使用指定的 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.ParentValue" /> 实例数组的子属性来初始化 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection" /> 类的新实例。</summary>
      <param name="parentValue">用于初始化的父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 实例。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.Count">
      <summary>获取此集合中的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 实例数（通常是父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 的子属性的数量）。</summary>
      <returns>一个整数，它指定此集合中的实例数。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.GetEnumerator">
      <summary>返回一个 <see cref="T:Systems.Collections.IEnumerator" /> 对象，该对象将循环访问此集合中的所有 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，它可用于循环访问 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 实例的集合。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.Item(System.String)">
      <summary>从此集合中获取一个具有指定名称的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 实例。 它用于检索子属性。</summary>
      <returns>具有指定名称的属性项实例；如果该实例不存在，则为 null。</returns>
      <param name="propertyName">要获取的属性的名称。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.ParentValue">
      <summary>从宿主基础结构中获取父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个 <see cref="T:Systems.Collections.IEnumerator" /> 对象，该对象将循环访问此集合中的所有 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，它可用于循环访问 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 实例的集合。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyFilter">
      <summary>为属性编辑宿主提供筛选功能。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 类的新实例，该实例包含筛选字符串的枚举。这些字符串称为“谓词”，可与目标属性名进行比较，直到找到匹配项为止。</summary>
      <param name="predicates">谓词（即用于匹配的字符串）的 <see cref="T:System.Collections.IEnumerable" /> 列表。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 类的新实例，该实例包含 <see cref="T:System.String" />，而后者包含用空格分隔的筛选短语序列。这些短语称为“谓词”，可与目标属性名进行比较，直到找到匹配项为止。</summary>
      <param name="filterText">一个 <see cref="T:System.String" />，它包含用于属性筛选的用空格分隔的谓词。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty">
      <summary>一个只读属性，指示此 <see cref="T:System.Activities.Design.PropertyEditing.PropertyFilter" /> 是否不包含任何筛选谓词。</summary>
      <returns>如果缺席谓语，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)">
      <summary>将当前筛选对象的谓词字符串与指定的目标属性名相匹配，并返回一个 Boolean 值，指示是否有一个或多个谓词字符串与目标名称相匹配，或此 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 不包含任何谓词。</summary>
      <returns>如果存在筛选/目标匹配项，或如果没有可用于比较的谓词，则为 true；否则为 false。</returns>
      <param name="target">当前筛选器在查找匹配项时用来进行比较的属性的名称。</param>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs">
      <summary>当 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> 已应用于目标属性时，用于执行事件进程的事件参数。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs.#ctor(System.Activities.Presentation.PropertyEditing.PropertyFilter)">
      <summary>创建应用了指定筛选器的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs" /> 类的新实例。</summary>
      <param name="filter">被应用的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs.Filter">
      <summary>获取被应用到目标属性的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />。</summary>
      <returns>被应用的属性筛选器。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate">
      <summary>表示一个谓词文本字符串，该字符串用于筛选属性搜索。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.#ctor(System.String)">
      <summary>用指定的搜索字符串创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" /> 类的新实例。</summary>
      <param name="matchText">用于匹配过程的谓词字符串。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.Match(System.String)">
      <summary>指示目标字符串中是否包含谓词字符串的不区分大小写的匹配项。</summary>
      <returns>如果目标字符串中包含谓词字符串的不区分大小写的匹配项，则为 true；否则为 false。</returns>
      <param name="target">字符串筛选器。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.MatchText">
      <summary>获取 <see cref="T:System.String" />，它用于将属性筛选器谓词字符串与目标字符串相匹配。</summary>
      <returns>一个包含用于匹配的文本的谓词字符串。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValue">
      <summary>维护属性网格中某属性值的数据模型。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.#ctor(System.Activities.Presentation.PropertyEditing.PropertyEntry)">
      <summary>初始化 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 类的新实例，并将 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 属性设置为指定对象，有着父属性设置。</summary>
      <param name="parentProperty">与此 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对应的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.CanConvertFromString">
      <summary>在派生类中实现时，获取一个指示是否可以从字符串转换 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> 的值。</summary>
      <returns>如果属性值可以从字符串转换，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.CatchExceptions">
      <summary>获取一个值，指示在应该捕获属性值获取和设置期间或在将这些操作直接传播给调用者期间是否要引发异常。</summary>
      <returns>如果捕获异常，则为 true；如果将异常传播给调用方，则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.ClearValue">
      <summary>在派生类中实现时，清除 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />，使其变为未设置。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Collection">
      <summary>在派生类中实现时，获取 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 实例的集合，当 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.IsCollection" /> 确认该属性是集合时，这些实例对应于集合中的项。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueCollection" /> 对象是属性值实例的集合。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.ConvertStringToValue(System.String)">
      <summary>When implemented in a derived class, converts the specified <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.StringValue" /> to a <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />.</summary>
      <returns>一个 <see cref="T:System.Object" /> 值。</returns>
      <param name="value">要转换为 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> 的 <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.ConvertValueToString(System.Object)">
      <summary>When implemented in a derived class, converts the specified <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> to a <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.StringValue" />.</summary>
      <returns>
        <see cref="T:System.String" /> 版本的 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />。</returns>
      <param name="value">要转换为字符串的 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.GetValueCore">
      <summary>在派生类中实现时，返回 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />。</summary>
      <returns>一个属性值 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.HasSubProperties">
      <summary>在派生类中实现时，获取一个值，指示此属性的类型是否支持子属性。</summary>
      <returns>一个 <see cref="T:System.Boolean" />，当它为 <see cref="T:System.Boolean.True" /> 时，确认该类型支持子属性；否则为 <see cref="T:System.Boolean.False" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.IsCollection">
      <summary>在派生类中实现时，获取一个值，指示此 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 是否是集合。</summary>
      <returns>一个 <see cref="T:System.Boolean" />，当它为 <see cref="T:System.Boolean.True" /> 时，确认该属性值是集合；否则为 <see cref="T:System.Boolean.False" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.IsDefaultValue">
      <summary>在派生类中实现时，获取一个值，指示 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> 是否为该属性的默认值。</summary>
      <returns>一个 <see cref="T:System.Boolean" />，当它为 <see cref="T:System.Boolean.True" /> 时，确认该值为默认值；否则为 <see cref="T:System.Boolean.False" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.IsMixedValue">
      <summary>在派生类中实现时，获取一个值，指示是否有多个对象包含此属性并且具有不同的值。</summary>
      <returns>一个 <see cref="T:System.Boolean" />，当它为 <see cref="T:System.Boolean.True" /> 时，确认有多个对象包含此属性；否则为 <see cref="T:System.Boolean.False" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.NotifyRootValueChanged">
      <summary>当基础值类型在外部（例如在设计图面上）更改时，引发 <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.RootValueChanged" /> 事件。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.NotifySubPropertyChanged">
      <summary>当此属性的某个子属性发生更改时，引发 <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.SubPropertyChanged" /> 事件。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>用指定的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> 对象引发 <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyChanged" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> 对象，它提供已更改的属性的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.OnPropertyChanged(System.String)">
      <summary>引发 <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyChanged" /> 事件，该事件使用已更改的属性的名称。</summary>
      <param name="propertyName">已更改的属性的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.OnPropertyValueException(System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs)">
      <summary>默认实现，如果 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 属性在基础数据集合中获取或设置值时遭遇失败，此实现将引发 <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyValueException" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs" />，它提供所遭遇的获取或设置失败的相关信息。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.ParentProperty">
      <summary>当宿主环境中存在此属性实现时，获取其父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" />。</summary>
      <returns>一个 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 对象，该对象表示一个父级属性。</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyChanged">
      <summary>当 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象的属性或子属性发生更改时发生。</summary>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyValueException">
      <summary>由宿主实现用于处理错误的事件。</summary>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValue.RootValueChanged">
      <summary>当由于 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 值发生更改而导致 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" /> 或 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.StringValue" /> 属性更新时发生。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.SetValueCore(System.Object)">
      <summary>在派生类中实现时，设置 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />。</summary>
      <param name="value">要在基础数据集合中设置的对象。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Source">
      <summary>在派生类中实现时，获取一个 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueSource" /> 对象，它包含此属性值的来源信息。</summary>
      <returns>一个包含属性值来源信息的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueSource" /> 对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.StringValue">
      <summary>以 <see cref="T:System.String" /> 的形式获取或设置 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />。</summary>
      <returns>
        <see cref="T:System.String" /> 版本的 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.SubProperties">
      <summary>在派生类中实现时，以 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 实例的形式获取子属性的集合。</summary>
      <returns>实例的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyEntryCollection" />。</returns>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValue.SubPropertyChanged">
      <summary>当由于 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 发生更改而导致子属性更新时发生。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValue.ValidateValue(System.Object)">
      <summary>在派生类中实现时，如果验证指定的值对象时发现其无效，则引发异常。</summary>
      <param name="valueToValidate">要验证其值的对象。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValue.Value">
      <summary>获取或设置基础属性数据集合中的属性值。</summary>
      <returns>一个属性值 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueCollection">
      <summary>封装 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 实例的集合，并且用于其 <see cref="T:System.Type" /> 为集合的属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.#ctor(System.Activities.Presentation.PropertyEditing.PropertyValue)">
      <summary>初始化 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueCollection" /> 类的新实例，该类用作指定的父对象 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 的子属性。</summary>
      <param name="parentValue">父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Add(System.Object)">
      <summary>向 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象的集合中添加对象。</summary>
      <returns>添加的对象的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</returns>
      <param name="value">要添加到集合中的对象。</param>
    </member>
    <member name="E:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.CollectionChanged">
      <summary>向侦听器通知集合的动态更改，例如在添加项、移除项或刷新整个列表时。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Count">
      <summary>获取 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象集合中的项数。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 项数。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.GetEnumerator">
      <summary>返回强类型化的 <see cref="T:Systems.Collections.IEnumerator" />，它循环访问 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象的集合。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Insert(System.Object,System.Int32)">
      <summary>向 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象集合的指定索引处插入指定对象。</summary>
      <returns>要添加的对象的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</returns>
      <param name="value">要添加到集合中的对象。</param>
      <param name="index">指定将对象插入集合到什么位置的索引号。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Item(System.Int32)">
      <summary>返回给定索引处集合中 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</summary>
      <returns>该索引处的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</returns>
      <param name="index">要返回的项的索引。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>在添加、移除或重新排列集合中的项时引发 <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.CollectionChanged" /> 事件。</summary>
      <param name="e">事件参数，包含集合中的更改的相关信息。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.ParentValue">
      <summary>获取包含该集合的父 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象。</summary>
      <returns>父对象的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.Remove(System.Activities.Presentation.PropertyEditing.PropertyValue)">
      <summary>从 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象的集合中移除对象。</summary>
      <returns>如果移除成功，则为 true；否则为 false。</returns>
      <param name="propertyValue">要从集合中移除的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象集合中的指定索引处移除对象。</summary>
      <param name="index">要移除的项的索引。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.SetIndex(System.Int32,System.Int32)">
      <summary>在将集合中的现有项移到新位置之后，重新计算 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象集合中的索引。</summary>
      <param name="currentIndex">集合中对象的当前位置索引。</param>
      <param name="newIndex">要将项移到的索引位置。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>为 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 对象的集合返回强类型化的 <see cref="T:Systems.Collections.IEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor">
      <summary>建立一个用于更新属性值的内联编辑器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.#ctor(System.Windows.DataTemplate)">
      <summary>以指定 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyContainer.InlineEditorTemplate" /> 的形式创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> 类的新实例。</summary>
      <param name="inlineEditorTemplate">内联编辑器 <see cref="T:System.Windows.DataTemplate" /> 用于创建新的属性值编辑器。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.CreateEditorAttribute(System.Activities.Presentation.PropertyEditing.PropertyValueEditor)">
      <summary>创建新的 <see cref="T:System.ComponentModel.EditorAttribute" />，以指定使用特定的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> 来更改属性值。</summary>
      <returns>用于指定 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> 的新 <see cref="T:System.ComponentModel.EditorAttribute" />。</returns>
      <param name="editor">将为其创建新 <see cref="T:System.ComponentModel.EditorAttribute" /> 的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.CreateEditorAttribute(System.Type)">
      <summary>创建新的 <see cref="T:System.ComponentModel.EditorAttribute" />，以指定使用特定的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> 类型来更改属性值。</summary>
      <returns>用于指定的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> 类型的新 <see cref="T:System.ComponentModel.EditorAttribute" />。</returns>
      <param name="propertyValueEditorType">将为其创建新 <see cref="T:System.ComponentModel.EditorAttribute" /> 的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditor" /> 类型。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.InlineEditorTemplate">
      <summary>获取或设置 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditor.InlineEditorTemplate" />，其 <see cref="T:System.Windows.DataTemplate" /> 用于内联编辑器。</summary>
      <returns>一个表示内联编辑器的 <see cref="T:System.Windows.DataTemplate" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands">
      <summary>允许使用标准命令来控制属性值的编辑。</summary>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.AbortTransaction">
      <summary>获取编辑器引发的命令，该命令用于中止尝试更新属性值。</summary>
      <returns>用于中止事务的 <see cref="T:System.Windows.Input.RoutedCommand" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.BeginTransaction">
      <summary>获取编辑器引发的命令，该命令用于开始尝试更新属性值。</summary>
      <returns>用于开始事务的 <see cref="T:System.Windows.Input.RoutedCommand" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.CommitTransaction">
      <summary>获取编辑器引发的命令，该命令用于提交属性值更新。</summary>
      <returns>用于提交事务的 <see cref="T:System.Windows.Input.RoutedCommand" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.FinishEditing">
      <summary>获取编辑器引发的命令，该命令用于向宿主指示属性值更新已完成。</summary>
      <returns>用于指示值更新已完成的 <see cref="T:System.Windows.Input.RoutedCommand" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.ShowDialogEditor">
      <summary>获取编辑器引发的命令，该命令用于将 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 切换为 <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.Dialog" /> 编辑模式。</summary>
      <returns>用于切换编辑模式的 <see cref="T:System.Windows.Input.RoutedCommand" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.ShowExtendedPinnedEditor">
      <summary>获取编辑器引发的命令，该命令用于将 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 切换为 <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.ExtendedPinned" /> 编辑模式。</summary>
      <returns>用于切换编辑模式的 <see cref="T:System.Windows.Input.RoutedCommand" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.ShowExtendedPopupEditor">
      <summary>获取编辑器引发的命令，该命令用于将 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 切换为 <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.ExtendedPopup" /> 编辑模式。</summary>
      <returns>用于切换编辑模式的 <see cref="T:System.Windows.Input.RoutedCommand" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands.ShowInlineEditor">
      <summary>获取编辑器引发的命令，该命令用于将 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyContainer" /> 切换为 <see cref="F:System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode.Inline" /> 编辑模式。</summary>
      <returns>用于切换编辑模式的 <see cref="T:System.Windows.Input.RoutedCommand" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs">
      <summary>表示包含 <see cref="E:System.Activities.Presentation.PropertyEditing.PropertyValue.PropertyValueException" /> 的事件参数的对象。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.#ctor(System.String,System.Activities.Presentation.PropertyEditing.PropertyValue,System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource,System.Exception)">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs" /> 类的新实例，该实例包含在更新属性值期间发生的错误的相关信息。</summary>
      <param name="message">一条消息，指示在属性值更改期间发生的错误。</param>
      <param name="value">发生异常的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 实例。</param>
      <param name="source">产生此异常的源 — 一个 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 获取或设置操作。</param>
      <param name="exception">在属性值更改期间发生的错误。</param>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.Exception">
      <summary>获取在属性值更改期间发生的错误，该属性值更改与事件参数的此实例关联。</summary>
      <returns>
        <see cref="T:System.Exception" /> 对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.Message">
      <summary>获取一条消息，指示在属性值更改期间发生的错误，该属性值更改与事件参数的此实例关联。</summary>
      <returns>一个 <see cref="T:System.String" /> 错误说明。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.PropertyValue">
      <summary>获取与事件参数的此实例关联的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</summary>
      <returns>与事件参数的此实例关联的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs.Source">
      <summary>获取与事件参数的此实例关联的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource" />。</summary>
      <returns>与事件参数的此实例关联的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource">
      <summary>指示由 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" /> 操作引发的异常的来源。</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource.Get">
      <summary>指示在获取操作期间发生了异常。</summary>
    </member>
    <member name="F:System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource.Set">
      <summary>指示在设置操作期间发生了异常。</summary>
    </member>
    <member name="T:System.Activities.Presentation.PropertyEditing.PropertyValueSource">
      <summary>表示属性值的来源。</summary>
    </member>
    <member name="M:System.Activities.Presentation.PropertyEditing.PropertyValueSource.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueSource" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelChangedEventArgs">
      <summary>一个表示事件数据的抽象基类，该事件数据保存了对前一个编辑会话中的模型项树的更改的相关说明。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelChangedEventArgs.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Services.ModelChangedEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangedEventArgs.ItemsAdded">
      <summary>由派生类实现时，获取已添加的事件参数对象的枚举。</summary>
      <returns>已添加的事件参数的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangedEventArgs.ItemsRemoved">
      <summary>由派生类实现时，获取已移除的事件参数对象的枚举。</summary>
      <returns>已移除的事件参数的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangedEventArgs.ModelChangeInfo">
      <summary>通过派生类实现时，获取有关在模型中所做的更改的详细信息。</summary>
      <returns>包含有关模型做出更改的详细信息的 <see cref="T:System.Activities.Presentation.Services.ModelChangeInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangedEventArgs.PropertiesChanged">
      <summary>由派生类实现时，获取已更改的属性的枚举。</summary>
      <returns>已更改的属性的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelChangeInfo">
      <summary>包含数据的详细的模型更改信息。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelChangeInfo.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Services.ModelChangeInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.Key">
      <summary>如果键模型项是一个目录更改，则获取它。</summary>
      <returns>如果密钥模型项是一个目录更改。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.ModelChangeType">
      <summary>获取模型的更改类型。</summary>
      <returns>模型的更改类型。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.OldValue">
      <summary>如果其为属性更改或字典值更改，则获取旧值。</summary>
      <returns>如果它是属性更改或字典值更改，则为旧值。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.PropertyName">
      <summary>如果它是属性更改，则获取属性名称。</summary>
      <returns>属性名，如果它是属性更改。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.Subject">
      <summary>获取发生模型变更的模型项。</summary>
      <returns>模型变更发生的模型项。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelChangeInfo.Value">
      <summary>获取已添加或移除的对象，如果属性更改，则获取新值。</summary>
      <returns>已添加或移除的对象或者如果属性已改则为新值。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelChangeType">
      <summary>指定模型更改类型。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.CollectionItemAdded">
      <summary>添加集合项。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.CollectionItemRemoved">
      <summary>移除集合项。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.DictionaryKeyValueAdded">
      <summary>添加字典键值。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.DictionaryKeyValueRemoved">
      <summary>移除字典键值。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.DictionaryValueChanged">
      <summary>更改字典值。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.None">
      <summary>无操作。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Services.ModelChangeType.PropertyChanged">
      <summary>属性被修改。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelSearchService">
      <summary>表示类，其用于生成 TextImage 和 navigating 至工作流设计器中的相应 ModelItem。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelSearchService.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Services.ModelSearchService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelSearchService.GenerateTextImage">
      <summary>基于模型项树生成可搜索文本。</summary>
      <returns>基于模型项树的可搜索的文本图像。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelSearchService.NavigateTo(System.Int32)">
      <summary>指示导航到基于文本图像的字符行号来导航模型项是否成功。</summary>
      <returns>如果该定位成功，则为 true；否则，为 false。</returns>
      <param name="location">在文本图像中的行号。</param>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelSearchService.NavigateTo(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>指示导航到基于 XAML 文件的源位置来导航模型项是否成功。</summary>
      <returns>如果该定位成功，则为 true；否则，为 false。</returns>
      <param name="startLine">起始行。</param>
      <param name="startColumn">起始列。</param>
      <param name="endLine">末行。</param>
      <param name="endColumn">末列。</param>
    </member>
    <member name="T:System.Activities.Presentation.Services.ModelService">
      <summary>此类是设计器用来与模型交互的主要入口点。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.#ctor">
      <summary>创建一个新的 <see cref="T:System.Activities.Presentation.Services.ModelService" />。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.CreateItem(System.Object)">
      <summary>接受一个现有的实例并创建一个模型项，该模型项是现有实例的深层克隆。</summary>
      <returns>返回一个新创建的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />，它是现有项的克隆。</returns>
      <param name="item">要克隆和包装的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.CreateItem(System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])">
      <summary>创建给定类型的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。 当用户希望创建新项时，此方法由 <see cref="T:System.Activities.Presentation.Model.ModelFactory" /> 调用。</summary>
      <returns>返回新创建的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="itemType">要创建的项类型。</param>
      <param name="options">创建选项。 可以指定是否要对某个项初始化默认值。</param>
      <param name="arguments">该项的构造函数的参数数组。</param>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.CreateStaticMemberItem(System.Type,System.String)">
      <summary>创建一个表示给定类的静态成员值的新模型项。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
      <param name="type">包含所引用的静态成员的类型。</param>
      <param name="memberName">所引用的静态成员的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Predicate{System.Type})">
      <summary>从给定的查找起点开始查找匹配的模型项。</summary>
      <returns>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含与查询相匹配的所有模型项。</returns>
      <param name="startingItem">要从其开始搜索的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。 此项上面的项将被忽略。 此项以及层次结构中位于此项下面的任何项都将包括在搜索中。 如果此值为 null，则改为使用 <see cref="P:System.Activities.Presentation.Services.ModelService.Root" />。</param>
      <param name="match">一个允许使用更复杂的类型匹配的谓词。 此方法将枚举给定父范围中与该谓词相匹配的所有项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Type)">
      <summary>从给定的查找起点开始查找匹配的模型项。</summary>
      <returns>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含与查询相匹配的所有模型项。</returns>
      <param name="startingItem">要从其开始搜索的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。 此项上面的项将被忽略。 此项以及层次结构中位于此项下面的任何项都将包括在搜索中。 如果此值为 null，则改为使用 <see cref="P:System.Activities.Presentation.Services.ModelService.Root" />。</param>
      <param name="type">要查找的对象的 <see cref="T:System.Type" />。 此方法将枚举给定父范围中具有所请求的类型的所有项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>查找给定范围中具有给定名称的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>返回一个 <see cref="T:System.Activities.Presentation.Model.ModelItem" />，其名称与 <paramref name="name" /> 匹配；如果未找到匹配，则返回 null。</returns>
      <param name="scope">要提供的可选范围。 如果未提供范围，则使用 <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> 作为范围。 如果提供了范围，将使用层次结构中最近的 <see cref="T:System.Windows.Markup.INameScope" /> 来查找该项。</param>
      <param name="name">要查找的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String,System.StringComparison)">
      <summary>查找给定范围中具有给定名称的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>返回一个 <see cref="T:System.Activities.Presentation.Model.ModelItem" />，其名称与 <paramref name="name" /> 匹配；如果未找到匹配，则返回 null。</returns>
      <param name="scope">要提供的可选范围。 如果未提供范围，则使用 <see cref="P:System.Activities.Presentation.Services.ModelService.Root" /> 作为范围。 如果提供了范围，将使用层次结构中最近的 <see cref="T:System.Windows.Markup.INameScope" /> 来查找该项。</param>
      <param name="name">要查找的名称。</param>
      <param name="comparison">确定比较名称的方法。 默认为与序号进行比较。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="E:System.Activities.Presentation.Services.ModelService.ModelChanged">
      <summary>当模型中有更改时引发此事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Services.ModelService.Root">
      <summary>对象层次结构的根。</summary>
      <returns>以 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 的形式返回模型层次结构的根。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Services.ViewService">
      <summary>
        <see cref="T:System.Activities.Presentation.Services.ViewService" /> 类将可视化对象映射到基础模型项。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ViewService.#ctor">
      <summary>创建一个新的 <see cref="T:System.Activities.Presentation.Services.ViewService" />。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Services.ViewService.GetModel(System.Windows.DependencyObject)">
      <summary>返回与视图相对应的模型；如果没有与视图相匹配的模型，则返回 null。</summary>
      <returns>以 <see cref="T:System.Activities.Design.Model.ModelItem" /> 的形式返回对应的模型；如果没有模型适用于给定的视图对象，则返回 null。</returns>
      <param name="view">要为其查找模型的视图对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Services.ViewService.GetView(System.Activities.Presentation.Model.ModelItem)">
      <summary>返回与给定模型相对应的视图；如果没有适用于模型的视图，则返回 null。</summary>
      <returns>以 <see cref="T:System.Windows.DependencyObject" /> 的形式返回适用于此模型的视图；如果没有这样的视图，则返回 null。</returns>
      <param name="model">要为其返回视图对象的模型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="model" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="model" /> 不表示此服务的有效模型。</exception>
    </member>
    <member name="T:System.Activities.Presentation.Sqm.IVSSqmService">
      <summary>指定有关 IVSSqmService 的信息。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Sqm.IVSSqmService.AddArrayToStream(System.Int32,System.UInt32[],System.Int32)">
      <summary>添加数组到该流。</summary>
      <param name="dataPointId">数据点标识符。</param>
      <param name="data">数据。</param>
      <param name="count">数组中的元素数。</param>
    </member>
    <member name="M:System.Activities.Presentation.Sqm.IVSSqmService.AddItemToStream(System.Int32,System.UInt32)">
      <summary>向流中添加项。</summary>
      <param name="dataPointId">数据点标识符。</param>
      <param name="value">项的值。</param>
    </member>
    <member name="M:System.Activities.Presentation.Sqm.IVSSqmService.SetDatapoint(System.Int32,System.UInt32)">
      <summary>设置数据点项目到流。</summary>
      <param name="dataPointId">数据点标识符。</param>
      <param name="value">数据点的值。</param>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactory">
      <summary>表示类，其为 IActivityTemplateFactory 的 XAML 表示。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactory.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactory.Create(System.Windows.DependencyObject)">
      <summary>通过调用实现创建活动。</summary>
      <returns>该活动由实现方法创建；如果未设置实现，则为 null。</returns>
      <param name="target">未使用的用户界面的引用。</param>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactory.Implementation">
      <summary>获取或设置创建活动作为实现的工厂方法。</summary>
      <returns>生成一个活动作为实现的工厂方法。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1">
      <summary>表示类，其为 IActivityTemplateFactory 的 XAML 表示。</summary>
      <typeparam name="T">此工厂创建的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1.Create(System.Windows.DependencyObject,System.Windows.IDataObject)">
      <summary>通过调用实现创建活动。</summary>
      <returns>该活动由实现创建。</returns>
      <param name="target">引用未使用的目标。</param>
      <param name="dataObject">未使用的数据对象的引用。</param>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1.Implementation">
      <summary>获取或设置创建活动作为实现的工厂方法。</summary>
      <returns>生成一个活动作为实现的工厂方法。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder">
      <summary>表示活动模板出厂生成器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder.Implementation">
      <summary>获取或设置 <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> 的实现。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> 的实现。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder.Name">
      <summary>获取或设置 <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> 的确定名称。</summary>
      <returns>一个<see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> 的标识名称。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder.TargetType">
      <summary>获取或设置此 <see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" /> 所针对的类型。</summary>
      <returns>此<see cref="T:System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder" />的目标类型。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolboxCategory">
      <summary>一个已分类的工具箱项的集合。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 类的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.#ctor(System.String)">
      <summary>用指定的名称创建 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 类的实例。</summary>
      <param name="name">工具箱类别集合的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.Add(System.Activities.Presentation.Toolbox.ToolboxItemWrapper)">
      <summary>在工具箱类别集合的末尾添加一个指定的工具。</summary>
      <param name="tool">要添加到集合中的 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tool" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.CategoryName">
      <summary>获取或设置工具箱类别的名称。</summary>
      <returns>工具箱类别的名称。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.Item(System.Int32)">
      <summary>获取或设置指定索引位置处的工具。</summary>
      <returns>位于指定 <paramref name="index" /> 位置处的 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 对象。</returns>
      <param name="index">要获取或设置的工具的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 集合无效。</exception>
    </member>
    <member name="E:System.Activities.Presentation.Toolbox.ToolboxCategory.PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.Remove(System.Activities.Presentation.Toolbox.ToolboxItemWrapper)">
      <summary>从工具箱类别集合中移除指定工具的第一个匹配项。</summary>
      <returns>如果该工具已成功移除，则为 true；否则为 false。 如果在集合中未找到该工具，此方法也返回 false。</returns>
      <param name="tool">要从集合中移除的 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tool" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将整个 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 集合复制到兼容的一维 <see cref="T:System.Array" /> 中从目标 <see cref="T:System.Array" /> 的指定索引处开始的位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 集合复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">复制开始处的数组索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中包含的工具数。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中包含的元素个数。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 集合的枚举数。</summary>
      <returns>用于 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 的 <see cref="T:System.Collections.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Add(System.Object)">
      <summary>向 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中添加一个工具。</summary>
      <returns>要添加到集合中的工具的从零开始的索引。</returns>
      <param name="value">新元素的插入位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 的类型不能分配给由集合实现的 <see cref="T:System.Collections.IList" />。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中移除所有工具。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> contains a specific tool.</summary>
      <returns>如果在 <paramref name="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中找到 <see cref="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合中查找的工具 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定特定工具在 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中的索引。</summary>
      <returns>如果在 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中找到，则为 <paramref name="value" /> 的从零开始的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将工具插入到 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中的指定索引位置处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要添加到集合中的工具。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 集合无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 是只读的，或者它具有固定的大小且已超出其大小。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 的大小是否是固定的。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，指示 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 是否是只读的。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引位置处的工具。</summary>
      <returns>位于指定索引位置处的工具 <see cref="T:System.Object" />。</returns>
      <param name="index">要获取或设置的工具项的从零开始的索引。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中移除特定工具的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中移除的工具 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 集合的指定索引位置处移除工具。</summary>
      <param name="index">要移除的工具项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 集合无效。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategory.Tools">
      <summary>获取 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 中的工具。</summary>
      <returns>包含 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems">
      <summary>
        <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> 对象的集合。 此类是sealed，因此不能继承此类。在 Windows Workflow Designer 之外重新承载 Visual Studio 2010 时，此类为工具箱项的分类提供支持。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 类的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Add(System.Activities.Presentation.Toolbox.ToolboxCategory)">
      <summary>在工具箱类别项集合末尾添加一个指定的工具箱类别。</summary>
      <param name="item">要添加到集合中的 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Clear">
      <summary>从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合中移除所有项。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Contains(System.Activities.Presentation.Toolbox.ToolboxCategory)">
      <summary>确定 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合中是否包含特定的工具箱类别项。</summary>
      <returns>如果在 <paramref name="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中找到 <see cref="item" />，则为 true；否则为 false。</returns>
      <param name="item">要查找的工具箱类别项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.CopyTo(System.Activities.Presentation.Toolbox.ToolboxCategory[],System.Int32)">
      <summary>将整个 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合复制到兼容的一维 <see cref="T:System.Array" /> 中从目标 <see cref="T:System.Array" /> 的指定索引处开始的位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">目标数组的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Count">
      <summary>获取 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中包含的工具数。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中包含的元素个数。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItem" /> 集合的枚举数。</summary>
      <returns>用于 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 的 <see cref="T:System.Collections.IEnumerator`1" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.IsReadOnly">
      <summary>获取一个值，指示 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 是否是只读的。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Item(System.Int32)">
      <summary>获取指定索引位置处的工具箱类别。</summary>
      <returns>位于指定索引位置处的工具箱类别 <see cref="T:System.Object" />。</returns>
      <param name="index">要获取的工具箱类别项的从零开始的索引。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.Remove(System.Activities.Presentation.Toolbox.ToolboxCategory)">
      <summary>从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中移除特定工具箱类别的第一个匹配项。</summary>
      <returns>如果从集合中找到并移除了项，则为 true；否则为 false。 如果找不到指定的 <paramref name="item" />，则此方法返回 false。</returns>
      <param name="item">要移除的 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将整个 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合复制到兼容的一维 <see cref="T:System.Array" /> 中从目标 <see cref="T:System.Array" /> 的指定索引处开始的位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">目标数组的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合中包含的工具箱类别数。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合中包含的项数。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItem" /> 集合的枚举数。</summary>
      <returns>用于 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 的 <see cref="T:System.Collections.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Add(System.Object)">
      <summary>向 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中添加一个工具。</summary>
      <returns>要添加到集合中的工具的从零开始的索引。</returns>
      <param name="value">新元素的插入位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 的类型不能分配给由集合实现的 <see cref="T:System.Collections.IList" />。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中移除所有工具。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> contains a specific tool.</summary>
      <returns>如果在 <paramref name="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中找到 <see cref="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在集合中查找的工具 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定特定工具在 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中定位的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将工具箱类别插入到 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">此集合是只读的，或者它具有固定的大小且已超出其大小。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 的大小是否是固定的。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置集合中的指定索引位置处的工具箱类别。</summary>
      <returns>位于指定索引位置处的工具箱类别 <see cref="T:System.Object" />。</returns>
      <param name="index">要获取或设置的工具箱类别项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 设置为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 中移除特定工具箱类别的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合中移除的工具 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxCategoryItems.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合的指定索引位置处移除工具箱类别。</summary>
      <param name="index">要移除的工具箱类别项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategoryItems" /> 集合无效。</exception>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolboxControl">
      <summary>提供一些功能，用于呈现已分类的工具的集合，以及向用户通知工具选择和创建事件。 此类是sealed，因此不能被继承。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxControl.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxControl" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.AssociatedDesigner">
      <summary>获取或设置此工具箱控件所关联的 Windows Workflow Designer。</summary>
      <returns>此工具箱控件所关联的 <see cref="T:System.Activities.Presentation.Toolbox.WorkflowDesigner" /> 实例。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.Categories">
      <summary>获取或设置与此控件相关联的工具箱类别的集合。</summary>
      <returns>包含与此 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxControl" /> 相关联的 <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> 对象的集合的 <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryItemStyle">
      <summary>获取或设置用于每个类别项的样式。</summary>
      <returns>一个 <see cref="T:System.Windows.Style" /> 对象，包含应用于每个类别的样式。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryItemStyleProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryItemStyle" /> 依赖属性。 此字段为只读。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryTemplate">
      <summary>获取或设置用于该类别的数据模板。</summary>
      <returns>用于该类别的 <see cref="T:System.Windows.DataTemplate" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryTemplateProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.CategoryTemplate" /> 依赖属性。 此字段为只读。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxControl.OnApplyTemplate">
      <summary>生成此工具箱控件的可视化树。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.SelectedTool">
      <summary>获取或设置工具箱中选定的工具。</summary>
      <returns>选择的 <see cref="T:System.Drawing.Design.ToolboxItem" /> 对象。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.SelectedToolProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.SelectedTool" /> 依赖属性。 此字段为只读。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolboxFile">
      <summary>获取或设置工具箱文件的名称。</summary>
      <returns>工具箱文件的名称。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolboxFileProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolboxFile" /> 依赖属性。 此字段为只读。</summary>
    </member>
    <member name="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolCreated">
      <summary>在工具箱控件中创建工具时发生。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolCreatedEvent">
      <summary>标识 <see cref="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolCreated" /> 事件。 此字段为只读。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolItemStyle">
      <summary>获取或设置用于工具项的样式。</summary>
      <returns>用于工具项的 <see cref="T:System.Windows.Style" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolItemStyleProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolItemStyle" /> 依赖属性。 此字段为只读。</summary>
    </member>
    <member name="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolSelected">
      <summary>在工具箱控件中选择工具时发生。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolSelectedEvent">
      <summary>标识 <see cref="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolSelected" /> 事件。 此字段为只读。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolTemplate">
      <summary>获取或设置用于工具的数据模板。</summary>
      <returns>用于工具的 <see cref="T:System.Windows.DataTemplate" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.Toolbox.ToolboxControl.ToolTemplateProperty">
      <summary>标识 <see cref="P:System.Activities.Presentation.Toolbox.ToolboxControl.ToolTemplate" /> 依赖属性。 此字段为只读。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper">
      <summary>表示一个包装，用于在实际 <see cref="T:System.Drawing.Presentation.ToolboxItem" /> 实例和工具表示方式之间建立链接，以及为工具箱项的分类添加支持。 此类是sealed，因此不能被继承。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor(System.String,System.String,System.String,System.String)">
      <summary>用工具、程序集、位图和显示的指定名称来初始化 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 类的新实例。</summary>
      <param name="toolName">工具的名称。</param>
      <param name="assemblyName">程序集的名称。</param>
      <param name="bitmapName">位图的名称。</param>
      <param name="displayName">显示的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor(System.Type)">
      <summary>用工具的类型来初始化 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 类的新实例。</summary>
      <param name="toolType">工具的类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor(System.Type,System.String)">
      <summary>用工具的类型和指定的显示名称来初始化 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 类的新实例。</summary>
      <param name="toolType">工具的类型。</param>
      <param name="displayName">显示的名称。</param>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.#ctor(System.Type,System.String,System.String)">
      <summary>用工具的类型以及位图和显示的指定名称来初始化 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 类的新实例。</summary>
      <param name="toolType">工具的类型。</param>
      <param name="bitmapName">一个包含位图名称的 string。</param>
      <param name="displayName">一个包含显示名的 string。</param>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.AssemblyName">
      <summary>获取或设置工具箱项的程序集名称。</summary>
      <returns>程序集名称。</returns>
      <exception cref="T:System.InvalidOperationException">在初始化相应的 <see cref="T:System.Drawing.Desigen.ToolboxItem" /> 之后，已指定程序集名称，并且不能对其进行更改。</exception>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.Bitmap">
      <summary>获取与当前对象包装的 <see cref="T:System.Drawing.Design.ToolboxItem" /> 相关联的位图。</summary>
      <returns>返回一个与 <see cref="T:System.Drawing.Design.ToolboxItem" /> 相关联的 <see cref="T:System.Drawing.Bitmap" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.BitmapName">
      <summary>获取或设置位图名称。</summary>
      <returns>位图名称。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.DisplayName">
      <summary>获取或设置显示名称。</summary>
      <returns>显示名称。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.IsValid">
      <summary>获取一个值，指示此 <see cref="T:System.Drawing.Design.ToolboxItem" /> 是否有效。</summary>
      <returns>如果 <see cref="T:System.Drawing.Design.ToolboxItem" /> 有效，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.PropertyChanged">
      <summary>在属性更改时发生的事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.ToolName">
      <summary>获取或设置工具的名称。</summary>
      <returns>工具名称。</returns>
      <exception cref="T:System.OperationException">在初始化相应的 <see cref="T:System.Drawing.Desigen.ToolboxItem" /> 之后，不能更改工具的名称。</exception>
    </member>
    <member name="M:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.ToString">
      <summary>返回表示当前对象的 string。</summary>
      <returns>返回当前 <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> 对象的 <see cref="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.ToolName" /> 属性的值。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolboxItemWrapper.Type">
      <summary>获取 <see cref="T:System.Drawing.Design.ToolboxItem" /> 的类型。</summary>
      <returns>返回 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolCreatedEventArgs">
      <summary>表示重新承载的工具箱中的工具创建事件的事件参数。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Toolbox.ToolCreatedEventArgs.Components">
      <summary>返回一些组件，这些组件要包含在重新承载的工具箱内的工具创建事件中。</summary>
      <returns>类型为 <see cref="T:System.ComponentModel.IComponent" /> 的 <see cref="T:System.Array" />，包含要传递给 <see cref="T:System.Activities.Presentation.Toolbox.ToolCreatedEventHandler" /> 的数据。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Toolbox.ToolCreatedEventHandler">
      <summary>表示一个方法，该方法将处理重新承载的工具箱的 <see cref="E:System.Activities.Presentation.Toolbox.ToolboxControl.ToolCreated" /> 事件。</summary>
      <param name="sender">工具创建事件源。</param>
      <param name="e">包含工具创建事件数据的 <see cref="T:System.Activities.Presentation.Toolbox.ToolCreatedEventArgs" />。</param>
    </member>
    <member name="T:System.Activities.Presentation.Validation.IValidationErrorService">
      <summary>定义用于访问指定的活动验证错误列表的方法。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Validation.IValidationErrorService.ShowValidationErrors(System.Collections.Generic.IList{System.Activities.Presentation.Validation.ValidationErrorInfo})">
      <summary>使所指示的活动验证错误列表可通过特定实现访问。</summary>
      <param name="errors">一个指定类型的包含活动验证错误的列表。</param>
    </member>
    <member name="T:System.Activities.Presentation.Validation.ValidationErrorInfo">
      <summary>提供一个容器，用于包含与某个验证错误的实例相关的所有属性，而此验证错误是在工作流活动的设计时或运行时发生的。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationErrorInfo.#ctor(System.Activities.Validation.ValidationError)">
      <summary>用指定的验证错误创建 <see cref="T:System.Activities.Presentation.Validation.ValidationErrorInfo" /> 类的新实例。</summary>
      <param name="validationError">在工作流活动验证期间发生的异常。</param>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationErrorInfo.#ctor(System.String)">
      <summary>创建 <see cref="T:System.Activities.Presentation.Validation.ValidationErrorInfo" /> 类的新实例，该实例包含特定错误的相关信息。</summary>
      <param name="message">提供有关错误的附加信息的字母数字型消息。</param>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.FileName">
      <summary>获取或设置生成错误的文件的字母数字型名称。</summary>
      <returns>生成该错误的文件的名称。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.Id">
      <summary>获取或设置此错误的唯一标识符。</summary>
      <returns>错误的标识符。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.IsWarning">
      <summary>获取或设置一个值，该值确定违反约束的情况是否为警告。</summary>
      <returns>如果违反约束的情况是一个警告，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.Message">
      <summary>设置或获取一条提供有关错误的附加信息的字母数字型消息。</summary>
      <returns>可提供附加信息的文本字符串注释。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.PropertyName">
      <summary>获取或设置生成错误的属性的字母数字型名称。</summary>
      <returns>属性的文本字符串名称。</returns>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationErrorInfo.SourceReferenceId">
      <summary>获取或设置生成此错误的源引用的全局限定标识符 (GUID)。</summary>
      <returns>生成错误源引用的 <see cref="T:System.Guid" /> 标识符。</returns>
    </member>
    <member name="T:System.Activities.Presentation.Validation.ValidationService">
      <summary>提供必要的功能，以便在对工作流活动设计器进行编辑时，验证该工作流活动设计器并提供验证过程的结果。</summary>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>创建 <see cref="T:System.Activities.Presentation.Validation.ValidationService" /> 的新实例，该实例使用有关活动设计器的永久和暂时状态上下文信息。</summary>
      <param name="context">一个包含有关设计器实例的永久和暂时状态上下文信息的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.NavigateToError(System.Activities.Presentation.Validation.ValidationErrorInfo)">
      <summary>将键盘焦点移到活动中出现错误的工作图面位置。</summary>
      <param name="validationErrorInfo">验证错误的信息。</param>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.NavigateToError(System.String)">
      <summary>将键盘焦点移到活动中出现错误的工作图面位置。</summary>
      <param name="id">一个错误标识号。</param>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.OnValidationCompleted">
      <summary>触发一个新的验证完成事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.Validation.ValidationService.Settings">
      <summary>获取当前活动树的验证设置。</summary>
      <returns>一个对象，包含验证设置。</returns>
    </member>
    <member name="M:System.Activities.Presentation.Validation.ValidationService.ValidateWorkflow">
      <summary>调用对活动树的验证。</summary>
    </member>
    <member name="T:System.Activities.Presentation.Validation.ValidationState">
      <summary>表示活动验证状态的值的枚举。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Validation.ValidationState.ChildInvalid">
      <summary>一个值，表示验证发现某个子活动无效。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Validation.ValidationState.Error">
      <summary>一个值，指示在活动验证期间发生了错误。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Validation.ValidationState.Valid">
      <summary>一个值，指示活动有效。</summary>
    </member>
    <member name="F:System.Activities.Presentation.Validation.ValidationState.Warning">
      <summary>一个值，指示在活动验证期间发生了警告。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.CommandMenuMode">
      <summary>为在您用右键单击画布时显示的上下文菜单指定完整命令菜单。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.CommandMenuMode.FullCommandMenu">
      <summary>指定完整命令菜单模式。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.CommandMenuMode.NoCommandMenu">
      <summary>指定无命令菜单模式。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.DesignerView">
      <summary>为表示工作流画布的设计器视图提供 avalon1 控件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.ActivitySchema">
      <summary>获取活动架构。</summary>
      <returns>活动架构。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ActivitySchemaProperty">
      <summary>包含表示 <see cref="P:System.Activities.Presentation.View.DesignerView.ActivitySchema" /> 属性的依赖项属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.AddAnnotationCommand">
      <summary>用于添加批注的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CollapseAllCommand">
      <summary>用于折叠当前元素的所有用户界面的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CollapseCommand">
      <summary>用于折叠当前元素的用户界面的命令。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.CommandMenuMode">
      <summary>指示命令菜单模式。</summary>
      <returns>命令菜单模式。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CommandMenuModeProperty">
      <summary>包含表示 <see cref="T:System.Activities.Design.View.CommandMenuMode" /> 属性的依赖项属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CommitCommand">
      <summary>用于更新 <see cref="T:System.Windows.Data.BindingExpression" /> 中的源值的命令。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.Context">
      <summary>获取或返回一个集合，该集合包含在设计器中所含的所有元素之间共享的服务。</summary>
      <returns>上下文。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CopyAsImageCommand">
      <summary>用于以屏幕截图的形式复制当前工作流设计图面并将其放到剪贴板中的 <see cref="T:System.Windows.Input.RoutedCommand" />。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CopyCommand">
      <summary>用于复制的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CreateArgumentCommand">
      <summary>用于创建新参数的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CreateVariableCommand">
      <summary>用于为当前选定的活动创建新变量的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CreateWorkflowElementCommand">
      <summary>在将工作流项从工具箱拖到设计器图面上时，用于在当前 Windows Workflow Designer 图面上创建新 <see cref="T:System.Activities.Design.WorkflowViewElement" /> 的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CustomMenuItemsSeparatorCommand">
      <summary>一个包含自定义菜单项分隔符的 GUID 的字符串常量。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CutCommand">
      <summary>用于剪切的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.CycleThroughDesignerCommand">
      <summary>用于在当前 Windows Workflow Designer 图面的各种 UI 元素之间循环的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.DeleteAllAnnotationCommand">
      <summary>用于删除所有批注的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.DeleteAnnotationCommand">
      <summary>用于删除指定批注的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.DeleteBreakpointCommand">
      <summary>用于删除当前活动上设置的断点的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.DisableBreakpointCommand">
      <summary>用于禁用当前活动上设置的断点的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.EditAnnotationCommand">
      <summary>用于编辑批注的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.EnableBreakpointCommand">
      <summary>用于启用当前活动上设置的断点的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ExpandAllCommand">
      <summary>用于展开当前元素的列表的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ExpandCommand">
      <summary>用于导航到复合活动的选定子项并将其展开以布满 Windows Workflow Designer 图面的整个屏幕的命令。 <paramref name="View full screen" /> 上下文菜单命令将启动此操作。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ExpandInPlaceCommand">
      <summary>用于在当前显示区中的适当位置展开当前元素的列表的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.FitToScreenCommand">
      <summary>用于使当前元素适合屏幕大小的命令。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.FlushState">
      <summary>保存与当前设计器视图关联的状态。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.FocusedViewElement">
      <summary>获取一个值，指示哪个视图元素具有焦点。</summary>
      <returns>具有焦点的视图。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.FocusedViewElementProperty">
      <summary>包含表示 <see cref="P:System.Activities.Presentation.View.DesignerView.FocusedViewElement" /> 属性的依赖项属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.GetCommandMenuMode(System.Windows.DependencyObject)">
      <summary>检索指定对象的命令菜单模式。</summary>
      <returns>
        <paramref name="obj" /> 的命令菜单模式。</returns>
      <param name="obj">要检索其命令菜单模式的对象。</param>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.GoToParentCommand">
      <summary>用于导航到选定子活动的父活动并将其展开以布满 Windows Workflow Designer 图面的整个屏幕的命令。 <paramref name="View parent" /> 上下文菜单命令将启动此操作。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.HideAllAnnotationCommand">
      <summary>用于隐藏所有批注的命令。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.InitializeComponent">
      <summary>初始化控件。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.InPanModeProperty">
      <summary>InPanMode 属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.InsertBreakpointCommand">
      <summary>用于在当前活动上设置断点的命令。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.IsMultipleSelectionMode">
      <summary>获取一个值，指示元素是否处于多重选择模式。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.View.DesignerView" /> 元素处于多重选择模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.IsReadOnly">
      <summary>确定 <see cref="T:System.Activities.Presentation.View.DesignerView" /> 是否是只读的。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.View.DesignerView" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.IsReadOnlyProperty">
      <summary>包含表示 <see cref="P:System.Activities.Presentation.View.DesignerView.IsReadOnly" /> 属性的依赖项属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.MakeRootDesigner(System.Activities.Presentation.Model.ModelItem)">
      <summary>将指定模型项放到设计器层次结构的根（顶端）处。</summary>
      <param name="modelItem">作为根设计器的 <see cref="T:System.Activities.Presentation.Model.ModelItem)" />。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.MenuItemStyle">
      <summary>获取或设置菜单项样式。</summary>
      <returns>菜单项样式。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.MenuItemStyleProperty">
      <summary>包含表示 <see cref="P:System.Activities.Presentation.View.DesignerView.MenuItemStyle" /> 属性的依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.MenuSeparatorStyle">
      <summary>获取或设置菜单分隔符样式。</summary>
      <returns>菜单分隔符样式。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.MenuSeparatorStyleProperty">
      <summary>包含表示 <see cref="P:System.Activities.Presentation.View.DesignerView.MenuSeparatorStyle" /> 属性的依赖项属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.MoveFocusCommand">
      <summary>用于移动焦点的命令。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
      <summary>引发 ContextMenuOpening 事件。</summary>
      <param name="e">事件的数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnInitialized(System.EventArgs)">
      <summary>处理 <see cref="E:System.Windows.FrameworkElement.Initialized" /> 事件，具体过程是：先调用 <see cref="T:System.Windows.Controls.UserControl" /> 基类实现，再为 <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> 路由事件添加事件处理程序，然后设置设计器视图的前景色。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>引发 OnKeyDown 事件。</summary>
      <param name="e">事件的相关数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnPreviewDragOver(System.Windows.DragEventArgs)">
      <summary>当某个未处理的 <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 附加事件在其路由中到达派生自此类的某个元素时调用。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>当 PreviewMouseLeftButtonDown 事件发生时调用。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>引发 PreviewMouseWheel 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.OnReferenceUpdated(System.Reflection.AssemblyName,System.Boolean)">
      <summary>根据是添加还是移除了指定的被引用程序集，刷新导入的命名空间的列表。</summary>
      <param name="updatedReference">添加或移除的被引用程序集。</param>
      <param name="isAdded">如果是添加了程序集引用，则为 true；如果是移除了程序集引用，则为 false。</param>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.PasteCommand">
      <summary>用于粘贴的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.RedoCommand">
      <summary>用于重做操作的命令。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.RegisterViewElement(System.Activities.Presentation.WorkflowViewElement)">
      <summary>注册视图元素。</summary>
      <param name="viewElement">工作流视图元素。</param>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ResetZoomCommand">
      <summary>用于重置缩放比例的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.RestoreCommand">
      <summary>用于恢复的命令。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.RootDesigner">
      <summary>获取或设置一个 <see cref="T:System.Windows.UIElement" />，它是当前模型树的根的 UI 表示方式。</summary>
      <returns>根元素。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.RootDesignerProperty">
      <summary>包含表示 <see cref="P:System.Activities.Presentation.View.DesignerView.RootDesigner" /> 属性的依赖项属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.SaveAsImageCommand">
      <summary>用于将当前工作流设计图面保存为图像的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.SelectAllCommand">
      <summary>用于选中视图中的所有对象的命令。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.SetCommandMenuMode(System.Windows.DependencyObject,System.Activities.Presentation.View.CommandMenuMode)">
      <summary>设置指定依赖项对象上的命令菜单模式。</summary>
      <param name="obj">要在其上设置命令菜单模式的依赖项对象。</param>
      <param name="value">要设置的命令菜单模式值。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.ShouldCollapseAll">
      <summary>获取或设置一个值，指示设计视图是否应折叠所有可见子元素。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.View.DesignerView" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.ShouldExpandAll">
      <summary>获取或设置一个值，指示元素是否应展开整个列表。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.View.DesignerView" /> 元素应该展开整个列表，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ShowAllAnnotationCommand">
      <summary>用于显示所有批注的命令。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>将事件和名称附加到已编译的内容。</summary>
      <param name="connectionId">连接 ID。</param>
      <param name="target">目标。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)">
      <summary>调用 StyleBamlReader 将事件附加到已编译内容中的 EventSetters 和 Templates 上。</summary>
      <param name="connectionId">连接 ID。</param>
      <param name="target">目标。</param>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleArgumentDesignerCommand">
      <summary>用于显示或隐藏参数设计器的命令。 单击 Windows Workflow Designer 图面上的“<paramref name="Arguments" />”按钮将启动此操作。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleImportsDesignerCommand">
      <summary>用于切换导入项设计器的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleMiniMapCommand">
      <summary>用于在 Windows Workflow Designer 图面上显示或隐藏 MiniMap 控件的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleSelectionCommand">
      <summary>用于切换选择的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ToggleVariableDesignerCommand">
      <summary>用于显示或隐藏变量设计器的命令。 单击 Windows Workflow Designer 图面上的“<paramref name="Variables" />”按钮将启动此操作。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.UndoCommand">
      <summary>用于撤消缓冲区中的上一个操作的命令。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.DesignerView.UnregisterViewElement(System.Activities.Presentation.WorkflowViewElement)">
      <summary>注销视图元素。</summary>
      <param name="viewElement">工作流视图元素。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.WorkflowShellBarItemVisibility">
      <summary>获取或设置一个值，指示工作流 shell 栏的可见性类型。</summary>
      <returns>指示工作流 shell 栏的可见性类型的值。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.WorkflowShellHeaderItemsVisibility">
      <summary>获取或设置一个值，该值指示工作流 Shell 标头的可见性类型。</summary>
      <returns>指示工作流 shell 标头的可见性类型的值。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.DesignerView.ZoomFactor">
      <summary>获取活动的当前缩放级别。</summary>
      <returns>活动的当前缩放级别。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ZoomInCommand">
      <summary>用于在当前 Windows Workflow Designer 图面上进行放大的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.DesignerView.ZoomOutCommand">
      <summary>用于在当前 wdf1 图面上进行缩小的命令。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.EditingState">
      <summary>枚举在表达式文本框中编辑表达式时的可能状态。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.EditingState.Editing">
      <summary>指定表达式的编辑状态。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.EditingState.Idle">
      <summary>指定在编辑表达式时处于空闲状态。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.EditingState.Validating">
      <summary>指定在编辑表达式时处于验证状态。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.ExpressionTextBox">
      <summary>描述一个使用户能够在活动设计器中编辑表达式的控件。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.View.ExpressionTextBox" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.AcceptsReturn">
      <summary>获取或设置一个值，指示表达式文本框是否接受 Return 键。</summary>
      <returns>如果接受返回，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.AcceptsReturnProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.AcceptsReturn" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.AcceptsTab">
      <summary>获取或设置一个值，指示表达式文本框是否接受 Tab 键。</summary>
      <returns>如果接受选项卡，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.AcceptsTabProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.AcceptsTab" /> 依赖项属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.BeginEdit">
      <summary>开始编辑。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.CompleteWordCommand">
      <summary>用于完成表达式文本框中的单词的命令。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.DecreaseFilterLevelCommand">
      <summary>在使用 IntelliSense 筛选时，用于将筛选级别从“常见”选项卡更改为“全部”选项卡的命令。 仅当您编辑表达式时，此命令才可用。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.DefaultValue">
      <summary>获取或设置默认值。</summary>
      <returns>默认值。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.DefaultValueProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.DefaultValue" /> 依赖项属性。</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.ExpressionTextBox.EditorLostLogicalFocus">
      <summary>在表达式编辑器失去逻辑焦点时发生。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.EditorLostLogicalFocusEvent">
      <summary>标识 <see cref="E:System.Activities.Presentation.View.ExpressionTextBox.EditorLostLogicalFocus" /> 路由事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.ExplicitCommit">
      <summary>获取或设置一个值，确定提交是否是显式的。</summary>
      <returns>如果提交为显式，则返回 true；否则返回 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExplicitCommitProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.ExplicitCommit" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.Expression">
      <summary>获取或设置表达式。</summary>
      <returns>返回一个包含表达式的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionActivityEditor">
      <summary>获取或设置表达式活动编辑器。</summary>
      <returns>表达式操作编辑器。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExpressionActivityEditorOptionName">
      <summary>指定表达式活动编辑器选项的名称。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExpressionActivityEditorProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionActivityEditor" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionEditorService">
      <summary>获取表达式编辑器服务。</summary>
      <returns>返回一个包含表达式编辑器服务的 <see cref="T:System.Activities.Presentation.View.IExpressionEditorService" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExpressionProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.Expression" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionType">
      <summary>获取或设置表达式类型。</summary>
      <returns>返回一个包含表达式类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ExpressionTypeProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.ExpressionType" /> 依赖项属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.GlobalIntellisenseCommand">
      <summary>用于表达式文本框中的全局 IntelliSense 的命令。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.HintText">
      <summary>获取或设置提示文本。</summary>
      <returns>返回一个包含提示文本的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.HintTextProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.HintText" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.HorizontalScrollBarVisibility">
      <summary>获取或设置水平滚动条的可见性。</summary>
      <returns>返回一个包含水平滚动条可见性的 <see cref="T:System.Windows.Controls.ScrollBarVisibility" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.HorizontalScrollBarVisibilityProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.HorizontalScrollBarVisibility" /> 依赖项属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.IncreaseFilterLevelCommand">
      <summary>在使用 IntelliSense 筛选时，用于将筛选级别从“全部”选项卡更改为“常见”选项卡的命令。 仅当您编辑表达式时，此命令才可用。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.InitializeComponent">
      <summary>初始化此窗体。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.IsReadOnly">
      <summary>获取或设置一个值，指示表达式文本框是否是只读的。</summary>
      <returns>指示表达式文本框是否是只读的值。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.IsReadOnlyProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.IsReadOnly" /> 属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.IsSupportedExpression">
      <summary>获取或设置一个值，确定是否支持表达式。</summary>
      <returns>如果表达式受支持，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.IsSupportedExpressionProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.IsSupportedExpression" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.MaxLines">
      <summary>获取或设置最大行数。</summary>
      <returns>返回一个包含最大行数的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.MaxLinesProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.MaxLines" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.MinLines">
      <summary>获取或设置最小行数。</summary>
      <returns>返回一个包含最小行数的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.MinLinesProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.MinLines" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.OwnerActivity">
      <summary>获取或设置所有者活动。</summary>
      <returns>返回一个包含所有者活动的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.OwnerActivityProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.OwnerActivity" /> 依赖项属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.ParameterInfoCommand">
      <summary>用于表达式文本框中的参数信息的命令。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.PathToArgument">
      <summary>获取或设置参数的路径。</summary>
      <returns>返回一个包含参数路径的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.PathToArgumentProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.PathToArgument" /> 依赖项属性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.QuickInfoCommand">
      <summary>用于表达式文本框中的快速信息的命令。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.RegisterExpressionActivityEditor(System.String,System.Type,System.Activities.Presentation.Expressions.CreateExpressionFromStringCallback)">
      <summary>注册表达式操作编辑器。</summary>
      <param name="name">表达式编辑器的名称。</param>
      <param name="expressionActivityEditorType">表达式活动编辑器的类型。</param>
      <param name="convertFromString">表达式的字符串格式。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ExpressionTextBox.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>将事件和名称附加到已编译的内容。</summary>
      <param name="connectionId">连接 ID。</param>
      <param name="target">目标。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.UseLocationExpression">
      <summary>获取或设置一个值，确定此实例是否使用位置表达式。</summary>
      <returns>如果此实例使用位置表达式，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.UseLocationExpressionProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.UseLocationExpression" /> 依赖项属性。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.ExpressionTextBox.VerticalScrollBarVisibility">
      <summary>获取或设置垂直滚动条的可见性。</summary>
      <returns>返回一个包含滚动条可见性的 <see cref="T:System.Windows.Controls.ScrollBarVisibility" />。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.ExpressionTextBox.VerticalScrollBarVisibilityProperty">
      <summary>注册 <see cref="P:System.Activities.Presentation.View.ExpressionTextBox.VerticalScrollBarVisibility" /> 依赖项属性。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.IExpressionEditorInstance">
      <summary>表示一个表达式编辑器实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsReturn">
      <summary>获取或设置一个值，指示表达式编辑器实例是否接受 RETURN 键。</summary>
      <returns>如果表达式编辑器实例接受 RETURN 键，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsTab">
      <summary>获取或设置一个值，指示表达式编辑器实例是否接受 TAB 键。</summary>
      <returns>如果表达式编辑器实例接受 TAB 键，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCompleteWord">
      <summary>获取一个 Boolean 值，指示表达式编辑器实例是否可以完成用户键入的字符串。</summary>
      <returns>返回设置为 true 的 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCopy">
      <summary>获取一个 Boolean 值，指示是否可以关闭表达式编辑器实例。</summary>
      <returns>如果可以关闭表达式编辑器实例，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCut">
      <summary>获取一个 Boolean 值，指示是否可以剪切表达式。</summary>
      <returns>如果表达式可被剪切，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanDecreaseFilterLevel">
      <summary>返回一个值，指示在使用 Intellisense 筛选时是否可以降低筛选级别。</summary>
      <returns>如果可以降低筛选器级别，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanGlobalIntellisense">
      <summary>获取一个 Boolean 值，指示表达式编辑器实例是否可以检索表达式的全局 IntelliSense。</summary>
      <returns>返回设置为 true 的 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanIncreaseFilterLevel">
      <summary>返回一个值，指示在使用 Intellisense 筛选时是否可以提高筛选级别。</summary>
      <returns>如果可以提高低筛选器级别，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanParameterInfo">
      <summary>获取一个 Boolean 值，指示表达式编辑器实例是否可以检索表达式的参数信息。</summary>
      <returns>返回设置为 true 的 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanPaste">
      <summary>获取一个 Boolean 值，指示是否可以粘贴表达式。</summary>
      <returns>如果表达式可被粘贴，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanQuickInfo">
      <summary>获取一个 Boolean 值，指示表达式编辑器实例是否可以检索要显示在 IntelliSense 快速信息工具提示中的类型信息。</summary>
      <returns>返回设置为 true 的 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanRedo">
      <summary>获取一个 Boolean 值，指示系统是否可以重做操作。</summary>
      <returns>如果该系统可以重做操作，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanUndo">
      <summary>获取一个 Boolean 值，指示系统是否可以撤消操作。</summary>
      <returns>如果该系统可以撤销操作，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.ClearSelection">
      <summary>清除编辑器实例中的选择。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Close">
      <summary>关闭并清除编辑器项。 这将关闭特定表达式编辑器实例。</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.IExpressionEditorInstance.Closing">
      <summary>在关闭表达式编辑器实例时发生。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.CompleteWord">
      <summary>确定表达式编辑器实例是否可以为用户键入的不完整单词提供完成列表。 例如，可以向用户显示成员、参数和方法名称，以便帮助他们完成正在键入的单词。</summary>
      <returns>如果此方法成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Copy">
      <summary>复制当前表达式。</summary>
      <returns>如果复制成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Cut">
      <summary>剪切当前表达式。</summary>
      <returns>如果剪切成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.DecreaseFilterLevel">
      <summary>降低筛选级别以显示 IntelliSense 筛选列表中的所有项，并返回一个值，指示此操作是否成功。</summary>
      <returns>如果此方法成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Focus">
      <summary>将焦点设置在编辑器实例上。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.GetCommittedText">
      <summary>获取用于生成表达式的文本。</summary>
      <returns>返回一个包含用于生成表达式的文本的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.GlobalIntellisense">
      <summary>检索表达式编辑器中的表达式的全局 IntelliSense，并返回一个值，指示此操作是否成功。</summary>
      <returns>如果此方法成功，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Activities.Presentation.View.IExpressionEditorInstance.GotAggregateFocus">
      <summary>在表达式编辑器实例具有聚合焦点时发生。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.HasAggregateFocus">
      <summary>获取一个值，指示此实例是否具有聚合焦点。</summary>
      <returns>如果编辑器实例具有聚合焦点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.HorizontalScrollBarVisibility">
      <summary>获取或设置一个值，指示水平滚动条是否可见。</summary>
      <returns>返回 <see cref="T:System.Windows.Controls.ScrollBarVisibility" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl">
      <summary>获取一个用于可显示在 ExpressionTextBox 中的 <see cref="T:System.Windows.Controls.Control" /> 实例。</summary>
      <returns>返回 <see cref="T:System.Windows.Controls.Control" />。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.IncreaseFilterLevel">
      <summary>提高筛选级别以显示 IntelliSense 筛选列表中的通用项，并返回一个值，指示此操作是否成功。</summary>
      <returns>如果此方法成功，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Activities.Presentation.View.IExpressionEditorInstance.LostAggregateFocus">
      <summary>表示在表达式编辑器实例失去聚合焦点时引发的事件。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.MaxLines">
      <summary>获取或设置 ExpressionTextBox 控件所显示的文本的最大行数。 当 ExpressionTextBox 控件自动调整高度以容纳内容时，此属性隐式设置其高度。</summary>
      <returns>返回一个 <see cref="T:System.Int32" />，它包含 ExpressionTextBox 控件所显示的文本的最大行数。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.MinLines">
      <summary>获取或设置 ExpressionTextBox 控件所显示的文本的最小行数。 此属性隐式设置 ExpressionTextBox 控件的高度。</summary>
      <returns>返回一个 <see cref="T:System.Int32" />，它包含 ExpressionTextBox 控件所显示的文本的最小行数。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.ParameterInfo">
      <summary>检索表达式编辑器中的表达式的参数信息，并返回一个值，指示此操作是否成功。</summary>
      <returns>如果此方法成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Paste">
      <summary>粘贴当前表达式。</summary>
      <returns>如果粘贴成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.QuickInfo">
      <summary>确定是否在 IntelliSense 快速信息工具提示中显示类型信息。</summary>
      <returns>如果此方法成功，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Redo">
      <summary>重新应用在编辑器中撤消的上一个操作，即，反转撤消操作的效果。</summary>
      <returns>如果该重做成功，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.Text">
      <summary>获取或设置文本的值。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="E:System.Activities.Presentation.View.IExpressionEditorInstance.TextChanged">
      <summary>表示在表达式编辑器实例中的文本被更改时引发的事件。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorInstance.Undo">
      <summary>撤消编辑器中的上一个操作。</summary>
      <returns>如果撤销成功，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.IExpressionEditorInstance.VerticalScrollBarVisibility">
      <summary>获取或设置一个值，指示垂直滚动条是否可见。</summary>
      <returns>返回 <see cref="T:System.Windows.Controls.ScrollBarVisibility" />。</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.IExpressionEditorService">
      <summary>创建或关闭表达式编辑器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CloseExpressionEditors">
      <summary>关闭所有启动的表达式编辑器。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem},System.String)">
      <summary>创建一个新的表达式编辑器。</summary>
      <returns>返回 <see cref="T:System.Activities.Presentation.View.IExpressionEditorInstance" />。</returns>
      <param name="assemblies">用于设置编辑器会话的上下文。</param>
      <param name="importedNamespaces">要由表达式编辑器使用的导入命名空间。</param>
      <param name="variables">表达式编辑器的局部变量。</param>
      <param name="text">一个用于填充表达式编辑器的字符串。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem},System.String,System.Type)">
      <summary>使用指定的程序集、导入命名空间、变量、表达式文本和表达式类型创建一个新的表达式编辑器。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.View.IExpressionEditorInstance" /> 的新实例。</returns>
      <param name="assemblies">环境中的局部和被引用程序集。</param>
      <param name="importedNamespaces">由表达式编辑器使用的导入命名空间。</param>
      <param name="variables">表达式编辑器的局部变量。</param>
      <param name="text">一个用于填充表达式编辑器的字符串。</param>
      <param name="expressionType">表达式类型。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem},System.String,System.Type,System.Windows.Size)">
      <summary>使用指定的程序集、导入命名空间、变量、表达式文本、表达式类型和初始大小创建一个新的表达式编辑器。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.View.IExpressionEditorInstance" /> 的新实例。</returns>
      <param name="assemblies">环境中的局部和被引用程序集。</param>
      <param name="importedNamespaces">由表达式编辑器使用的导入命名空间。</param>
      <param name="variables">表达式编辑器的局部变量。</param>
      <param name="text">一个用于填充表达式编辑器的字符串。</param>
      <param name="expressionType">表达式类型。</param>
      <param name="initialSize">表达式编辑器控件的初始高度和宽度。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Presentation.Model.ModelItem},System.String,System.Windows.Size)">
      <summary>使用指定的程序集、导入命名空间、变量、表达式文本和初始大小创建一个新的表达式编辑器。</summary>
      <returns>
        <see cref="T:System.Activities.Presentation.View.IExpressionEditorInstance" /> 的新实例。</returns>
      <param name="assemblies">环境中的局部和被引用程序集。</param>
      <param name="importedNamespaces">由表达式编辑器使用的导入命名空间。</param>
      <param name="variables">表达式编辑器的局部变量。</param>
      <param name="text">一个用于填充表达式编辑器的字符串。</param>
      <param name="initialSize">表达式编辑器控件的初始高度和宽度。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.IExpressionEditorService.UpdateContext(System.Activities.Presentation.Hosting.AssemblyContextControlItem,System.Activities.Presentation.Hosting.ImportedNamespaceContextItem)">
      <summary>更新编辑会话的上下文。</summary>
      <param name="assemblies">用于设置编辑器会话的上下文。</param>
      <param name="importedNamespaces">由表达式编辑器使用的导入命名空间。</param>
    </member>
    <member name="T:System.Activities.Presentation.View.PropertyKind">
      <summary>一个描述所传递的参数类型的枚举。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.PropertyKind.InArgument">
      <summary>此参数是一个只可输入的参数，这意味着它只能用来向某个方法传递值。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.PropertyKind.InOutArgument">
      <summary>此参数是一个输入/输出参数，这意味着它可用来向某个方法传递值，并且可用来从方法获取值。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.PropertyKind.OutArgument">
      <summary>此参数是一个只可输出的参数，这意味着它只能用来从某个方法获取值。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.PropertyKind.Property">
      <summary>此参数是一个属性。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.Selection">
      <summary>定义一个对象选择集，其中的对象在 <see cref="T:System.Activities.Presentation.EditingContext" /> 中发布为 <see cref="T:System.Activities.Presentation.ContextItem" />。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor">
      <summary>创建一个空的 <see cref="T:System.Activities.Presentation.View.Selection" /> 对象。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Activities.Presentation.Model.ModelItem[])">
      <summary>用所选的指定对象创建一个 <see cref="T:System.Activities.Presentation.View.Selection" />。</summary>
      <param name="selectedObjects">应选择的对象的参数数组。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem})">
      <summary>用所选的指定对象创建一个 <see cref="T:System.Activities.Presentation.View.Selection" />。</summary>
      <param name="selectedObjects">应选择的对象的枚举。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="selectedObjects" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem},System.Predicate{System.Activities.Presentation.Model.ModelItem})">
      <summary>用所选的指定对象创建一个 <see cref="T:System.Activities.Presentation.View.Selection" />。</summary>
      <param name="selectedObjects">应选择的对象的枚举。</param>
      <param name="match">有关包含对象的条件。 只有 <paramref name="selectedObjects" /> 中与谓词相匹配的那些对象，才会添加到选择集中。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="selectedObjects" /> 或 <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Collections.IEnumerable)">
      <summary>用所选的指定对象创建一个 <see cref="T:System.Activities.Presentation.View.Selection" />。</summary>
      <param name="selectedObjects">应选择的对象的枚举。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="selectedObjects" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.#ctor(System.Collections.IEnumerable,System.Predicate{System.Activities.Presentation.Model.ModelItem})">
      <summary>用所选的指定对象创建一个 <see cref="T:System.Activities.Presentation.View.Selection" />。</summary>
      <param name="selectedObjects">应选择的对象的枚举。</param>
      <param name="match">有关包含对象的条件。 只有 <paramref name="selectedObjects" /> 中与谓词相匹配的那些对象，才会添加到选择集中。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="selectedObjects" /> 或 <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="P:System.Activities.Presentation.View.Selection.ItemType">
      <summary>返回此编辑上下文项的项类型。</summary>
      <returns>返回 typeof(<see cref="T: System.WorkflowModel.Presentation.Interaction.Selection" />)。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.Selection.PrimarySelection">
      <summary>返回主选择。</summary>
      <returns>以 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 的形式返回主选择。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Select(System.Activities.Presentation.EditingContext,System.Activities.Presentation.Model.ModelItem)">
      <summary>一个选择集帮助器方法，它接受上下文中的现有选择，并选择一项以加入其中。 如果该项已包含在选择集中，将保留该选择集，并且将该项提升为主选择。</summary>
      <returns>一个包含新选择的 Selection 对象。</returns>
      <param name="context">要将此选择集应用到的编辑上下文。</param>
      <param name="itemToSelect">要选择的项。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.Selection.SelectedObjects">
      <summary>所选对象的枚举。</summary>
      <returns>以 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的形式返回所选对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.Selection.SelectionCount">
      <summary>此选择集中当前选择的对象的数量。</summary>
      <returns>以 <see cref="T:System.Int32" /> 的形式返回所选对象的数量。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.SelectOnly(System.Activities.Presentation.EditingContext,System.Activities.Presentation.Model.ModelItem)">
      <summary>用于将一个项设置到选择集中的选择集帮助器方法。 任何现有项都被取消选择。</summary>
      <returns>一个包含新选择的 Selection 对象。</returns>
      <param name="context">要将此选择集应用到的编辑上下文。</param>
      <param name="itemToSelect">要选择的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Subscribe(System.Activities.Presentation.EditingContext,System.Activities.Presentation.SubscribeContextCallback{System.Activities.Presentation.View.Selection})">
      <summary>订阅了选择集更改事件的帮助器方法。</summary>
      <param name="context">要侦听的编辑上下文。</param>
      <param name="handler">要在选择集更改时调用的处理程序。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Toggle(System.Activities.Presentation.EditingContext,System.Activities.Presentation.Model.ModelItem)">
      <summary>一个选择集帮助器方法，它接受上下文中的现有选择，并创建一个新的选择集，使其包含此项的切换状态。 如果此项要添加到选择集中，它将添加为主选择。</summary>
      <returns>一个包含新选择的 Selection 对象。</returns>
      <param name="context">要将此选择集应用到的编辑上下文。</param>
      <param name="itemToToggle">要切换选择状态的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Union(System.Activities.Presentation.EditingContext,System.Activities.Presentation.Model.ModelItem)">
      <summary>一个选择集帮助器方法，它接受上下文中的现有选择，并创建一个新的选择集，使其包含原始选择以及要添加的指定项。 如果要添加的指定项已包含在原始选择集中，它将提升为主选择。</summary>
      <returns>一个包含新选择的 Selection 对象。</returns>
      <param name="context">要将此选择集应用到的编辑上下文。</param>
      <param name="itemToAdd">要添加到选择集中的项。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.Selection.Unsubscribe(System.Activities.Presentation.EditingContext,System.Activities.Presentation.SubscribeContextCallback{System.Activities.Presentation.View.Selection})">
      <summary>移除以前添加的选择集更改事件的帮助器方法。</summary>
      <param name="context">要侦听的编辑上下文。</param>
      <param name="handler">要在选择集更改时调用的处理程序。</param>
    </member>
    <member name="T:System.Activities.Presentation.View.ShellBarItemVisibility">
      <summary>枚举外壳条形图中可见的项。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.All">
      <summary>指定所有项都是可见的。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.Arguments">
      <summary>指定参数是可见的。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.Imports">
      <summary>指定导入项是可见的。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.MiniMap">
      <summary>指定缩略图是可见的。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.None">
      <summary>指定所有项都不可见。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.PanMode">
      <summary>指定 PanMode 是可见的。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.Variables">
      <summary>指定变量是可见的。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellBarItemVisibility.Zoom">
      <summary>指定缩放是可见的。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.ShellHeaderItemsVisibility">
      <summary>指定 shell 头项目的可见性。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.All">
      <summary>所有的项都是可见的。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.Breadcrumb">
      <summary>面包屑可见。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.CollapseAll">
      <summary>可见的所有折叠。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.ExpandAll">
      <summary>展开所有可见的。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.ShellHeaderItemsVisibility.None">
      <summary>没有可见的。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.TypePresenter">
      <summary>一个用于选择类型的控件。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypePresenter.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 的新实例，该实例初始化一个包装对象集合，其中的每个包装对象都表示一个基元类型。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.AllowNull">
      <summary>获取或设置一个值，该值指示允许您为类型选择 Null 中的类型演示器是否显示字符串（null）。</summary>
      <returns>如果属性可以为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.AllowNullProperty">
      <summary>一个依赖项属性标识符字段，它指定是否可从类型演示器中选择类型 null。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.BrowseTypeDirectly">
      <summary>获取或设置一个指示值，指示在用户单击 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 控件时是否应直接显示类型浏览器。</summary>
      <returns>如果在用户单击 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 控件时应直接显示类型浏览器，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.BrowseTypeDirectlyProperty">
      <summary>一个依赖项属性标识符字段，它指定在用户单击 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 控件时是否应直接显示类型浏览器。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.CenterActivityTypeResolverDialog">
      <summary>获取或设置活动类型解析器对话框窗口是否应该居中。</summary>
      <returns>如果该窗口应该居中，则为 true；否则，为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.CenterActivityTypeResolverDialogProperty">
      <summary>一个依赖项属性标识符字段，它指定活动类型解析器对话框窗口是否应该居中。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.CenterTypeBrowserDialog">
      <summary>获取或设置类型浏览器对话框窗口是否应该居中。</summary>
      <returns>如果该窗口应该居中，则为 true；否则，为 false。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.CenterTypeBrowserDialogProperty">
      <summary>一个依赖项属性标识符字段，它指定类型浏览器对话框窗口是否应该居中。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Context">
      <summary>获取或设置一个编辑上下文属性的值。</summary>
      <returns>一个编辑上下文项。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.ContextProperty">
      <summary>一个依赖项属性标识符字段，它包含编辑上下文的一个属性，例如：当前选定对象的列表或设计器中运行的服务的列表。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.DefaultMostRecentlyUsedTypes">
      <summary>获取或设置最近使用的默认类型。</summary>
      <returns>返回包含最近使用的默认类型的 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Filter">
      <summary>获取或设置用于显示类型的筛选器。</summary>
      <returns>具有一个返回值和一个布尔值的委托，该委托表示用于显示类型的筛选器。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.FilterProperty">
      <summary>一个依赖项属性标识符字段，它指定使用哪个筛选器来显示类型。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypePresenter.FocusOnVisibleControl">
      <summary>将键盘焦点置于当前演示器控件上。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypePresenter.InitializeComponent">
      <summary>初始化一个组合框。 此方法的内容由设计器生成。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Items">
      <summary>获取一个包装类型枚举，这些包装类型包含在当前类型演示器中。</summary>
      <returns>一个包装类型枚举，这些包装类型包含在当前类型演示器中。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Label">
      <summary>获取或设置组件的显示名称。</summary>
      <returns>组件的显示名称。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.LabelProperty">
      <summary>一个依赖项属性标识符字段，它定义控件的标签。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.MostRecentlyUsedTypes">
      <summary>获取或设置最近使用的类型。</summary>
      <returns>最近使用的类型。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.MostRecentlyUsedTypesProperty">
      <summary>一个依赖项属性标识符字段，它指定最近使用的类型。</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.TypePresenter.PropertyChanged">
      <summary>当指定的用户界面控件的属性发生更改时引发的事件的声明。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypePresenter.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>已过时。 未实现。</summary>
      <param name="connectionId">未实现。</param>
      <param name="target">未实现。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Text">
      <summary>获取用于组件显示名称的值。</summary>
      <returns>一个字符串名称。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TextProperty">
      <summary>一个依赖项属性标识符字段，它分配用于组件显示名称的文本。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.Type">
      <summary>获取或设置当前 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 的类型。</summary>
      <returns>一个类型对象。</returns>
    </member>
    <member name="E:System.Activities.Presentation.View.TypePresenter.TypeBrowserClosed">
      <summary>为 <see cref="F:System.Activities.Presentation.View.TypePresenter.TypeBrowserClosedEvent" /> 提供事件访问器。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TypeBrowserClosedEvent">
      <summary>一个依赖项属性标识符字段，它指定用户是否关闭了浏览器。</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.TypePresenter.TypeBrowserOpened">
      <summary>为 <see cref="F:System.Activities.Presentation.View.TypePresenter.TypeBrowserOpenedEvent" /> 提供事件访问器。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TypeBrowserOpenedEvent">
      <summary>一个依赖项属性标识符字段，它指定用户是否打开了浏览器。</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.TypePresenter.TypeChanged">
      <summary>为 <see cref="F:System.Activities.Presentation.View.TypePresenter.TypeChangedEvent" /> 提供事件访问器。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TypeChangedEvent">
      <summary>一个依赖项属性标识符字段，它指定组件类型是否已更改。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypePresenter.TypeName">
      <summary>获取组件类型的显示名称。</summary>
      <returns>一个表示显示名称的字符串。</returns>
    </member>
    <member name="F:System.Activities.Presentation.View.TypePresenter.TypeProperty">
      <summary>一个依赖项属性标识符字段，它指定由 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 表示的当前类型。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.TypeResolvingOptions">
      <summary>提供可用于解析由 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 使用的类型的选项。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeResolvingOptions.#ctor">
      <summary>创建 <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> 类的实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeResolvingOptions.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>创建 <see cref="T:System.Activities.Presentation.View.TypeResolvingOptions" /> 类的实例。</summary>
      <param name="defaultTypes">
        <see cref="T:System.Activities.Presentation.View.TypePrensenter" /> 控件中的默认类型。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeResolvingOptions.BrowseTypeDirectly">
      <summary>获取或设置一个值，指示 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 控件在用户尝试选择某个类型时是否应直接显示类型浏览器。</summary>
      <returns>如果 <see cref="T:System.Activities.Presentation.View.TypePrensenter" /> 控件在用户尝试选择某个类型时应直接显示类型浏览器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeResolvingOptions.Filter">
      <summary>获取或设置在 <see cref="T:System.Activities.Presentation.View.TypePrensenter" /> 控件中用来筛选类型的筛选器。</summary>
      <returns>用于 <see cref="T:System.Activities.Presentation.View.TypePresenter" /> 控件的筛选器。</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.TypeWrapper">
      <summary>
        <see cref="T:System.Type" /> 的一个包装类，可提供类型信息。 这是一个密封类。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeWrapper.DisplayName">
      <summary>获取当前包装类型的显示名称。</summary>
      <returns>一个包含显示名称的字符串。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeWrapper.Equals(System.Object)">
      <summary>确定当前 <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> 实例是否与指定对象相等。</summary>
      <returns>如果当前 <see cref="T:System.Activities.Presentation.View.TypeWrapper" />实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">一个表示 <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> 的对象。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeWrapper.GetHashCode">
      <summary>返回当前 <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> 实例的哈希代码。</summary>
      <returns>一个表示哈希代码的整数。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeWrapper.IsTypeDefinition">
      <summary>获取一个指示值，指示此 <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> 实例中的类型是否为类型定义。</summary>
      <returns>如果此 <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> 实例中的类型是类型定义，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeWrapper.Tag">
      <summary>获取包装类型的相关数据。</summary>
      <returns>一个对象，它包含有关控件的数据。</returns>
    </member>
    <member name="M:System.Activities.Presentation.View.TypeWrapper.ToString">
      <summary>返回一个标记的内容，该标记包含当前包装类型的标签。</summary>
      <returns>标记值的字符串版本。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.TypeWrapper.Type">
      <summary>获取当前 <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> 实例中的类型。</summary>
      <returns>当前 <see cref="T:System.Activities.Presentation.View.TypeWrapper" /> 实例中的类型。</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.ViewCreatedEventArgs">
      <summary>表示工作流视图元素创建事件的事件参数。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewCreatedEventArgs.#ctor(System.Activities.Presentation.WorkflowViewElement)">
      <summary>用指定的工作流视图元素初始化 <see cref="T:System.Activities.Presentation.View.ViewCreatedEventArgs" /> 类的新实例。</summary>
      <param name="view">创建的工作流视图元素。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewCreatedEventArgs.View">
      <summary>获取创建的工作流视图元素。</summary>
      <returns>创建的工作流视图元素。</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.ViewStateChangedEventArgs">
      <summary>提供一个用作事件参数的格式化对象，其中包含有关已更改视图状态的信息。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateChangedEventArgs.#ctor(System.Activities.Presentation.Model.ModelItem,System.String,System.Object,System.Object)">
      <summary>用指定的父模型项以及具有旧值和新值的键/值对来创建 <see cref="T:System.Activities.Presentation.View.ViewStateChangedEventArgs" /> 类的新实例。</summary>
      <param name="modelItem">活动设计器模型中的一个项，该项在模型的 XML 视图中用作父元素。</param>
      <param name="key">指定父元素中的特性的名称。</param>
      <param name="newValue">指定的特性键的新值。</param>
      <param name="oldValue">指定的特性键的旧值。</param>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewStateChangedEventArgs.Key">
      <summary>从指定的视图元素中获取一个特性键名称。</summary>
      <returns>一个表示视图元素中的键名的字符串。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewStateChangedEventArgs.NewValue">
      <summary>为当前特性键/值对中的键获取新值。</summary>
      <returns>一个包含键值的对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewStateChangedEventArgs.OldValue">
      <summary>获取当前特性键/值对中的键的旧值。</summary>
      <returns>一个包含键值的对象。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.ViewStateChangedEventArgs.ParentModelItem">
      <summary>从活动设计器模型中获取一项，该项在模型的 XAML 视图中用作父项。</summary>
      <returns>活动设计器模型中的父元素。</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.ViewStateChangedEventHandler">
      <summary>声明一个处理视图状态更改的委托类型。</summary>
      <param name="sender">事件源。</param>
      <param name="e">不包含事件数据的 <see cref="T:System.Activities.Presentation.View.ViewStateChangedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Activities.Presentation.View.ViewStateService">
      <summary>在运行工作流应用程序期间的特定时间点，允许保留和访问与工作流应用程序的用户交互组件相关联的所有数据值。 一个存储了模型项的视图状态的 <see cref="T:System.Activities.Presentation.View.ViewStateService" />。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.View.ViewStateService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.RemoveViewState(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>在派生类中实现时，移除由指定键表示的、与指定模型项相关联的视图状态。</summary>
      <returns>如果已移除视图状态，则为 true；否则为 false。</returns>
      <param name="modelItem">与当前视图状态相关联的工作流活动 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="key">标识所存储的视图状态项的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.RetrieveAllViewState(System.Activities.Presentation.Model.ModelItem)">
      <summary>返回为指定 <paramref name="modelItem" /> 存储的、与指定 <paramref name="key" /> 相匹配的视图状态的一个方面。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="modelItem">要将视图状态应用到的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.RetrieveViewState(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>检索指定 <paramref name="modelItem" /> 的、与指定 <paramref name="key" /> 相匹配的视图状态的一个方面。</summary>
      <returns>
        <see cref="T:System.Object" /> 形式的视图状态，或为 null。</returns>
      <param name="modelItem">与当前视图状态相关联的工作流活动 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="key">标识要检索的视图状态的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.StoreViewState(System.Activities.Presentation.Model.ModelItem,System.String,System.Object)">
      <summary>存储指定 <paramref name="modelItem" /> 的、与指定 <paramref name="key" /> 相匹配的视图状态的一个方面。</summary>
      <param name="modelItem">要将视图状态应用到的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="key">标识要存储的视图状态的 <see cref="T:System.String" />。</param>
      <param name="value">要存储的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.ViewStateService.StoreViewStateWithUndo(System.Activities.Presentation.Model.ModelItem,System.String,System.Object)">
      <summary>在派生类中实现时，记录由指定键表示的项的当前设置，使它可供撤消操作使用。 然后，由指定键表示的项存储到指定模型项的视图状态中。</summary>
      <param name="modelItem">要将视图状态应用到的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="key">标识要存储的视图状态的 <see cref="T:System.String" />。 标识所存储的视图状态项的 <see cref="T:System.String" />。</param>
      <param name="value">要存储的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="E:System.Activities.Presentation.View.ViewStateService.UndoableViewStateChanged">
      <summary>在派生类中实现时，声明一个事件，用于通知已经对控件的可撤消视图状态进行了更改。</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.ViewStateService.ViewStateChanged">
      <summary>在派生类中实现时，声明一个事件，用于通知已经对控件的视图状态进行了更改。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.VirtualizedContainerService">
      <summary>表示一个与编辑上下文和设计视图相关联的虚拟容器服务。 此虚拟容器服务用于自定义 UI 虚拟化行为。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>用特定的编辑上下文创建 <see cref="T:System.Activities.Presentation.View.VirtualizedContainerService" /> 类的新实例。</summary>
      <param name="context">该服务的 <see cref="T:System.Activities.Presentation.EditingContext" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.GetContainer(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.ICompositeView)">
      <summary>获取一个容器，并将其与指定的模型项相关联，然后返回一个表示此关联的 UI 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.UIElement" />，表示与模型项相关联的容器。</returns>
      <param name="modelItem">与容器相关联的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="sourceContainer">与模型项相关联的 <see cref="T:System.Activities.Presentation.ICompositeView" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.GetHintSize(System.Object)">
      <summary>尝试获取 Hint Size Name 属性的值。</summary>
      <returns>值的目标 <see cref="T:System.Object" />。</returns>
      <param name="instance">属性存储区。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.GetViewElement(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.ICompositeView)">
      <summary>返回与指定模型项相对应的工作流视图元素。</summary>
      <returns>与指定模型项相对应的工作流视图元素。</returns>
      <param name="modelItem">要获取的工作流视图元素的基础模型项。</param>
      <param name="sourceContainer">要为工作流视图元素设置的拖动源依赖项属性值。</param>
    </member>
    <member name="F:System.Activities.Presentation.View.VirtualizedContainerService.HintSizeName">
      <summary>提供一个 XAML 类型系统标识符。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.VirtualizedContainerService.SetHintSize(System.Object,System.Object)">
      <summary>尝试设置 Hint Size Name 属性的值。</summary>
      <param name="instance">属性存储区。</param>
      <param name="value">要设置的值。</param>
    </member>
    <member name="T:System.Activities.Presentation.View.WorkflowViewService">
      <summary>处理活动设计器可视化元素与其基础模型项之间的映射。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>创建 <see cref="T:System.Activities.Presentation.View.WorkflowViewService" /> 类的新实例，该实例使用指定的 <see cref="T:System.Activities.Presentation.EditingContext" />。</summary>
      <param name="context">用于操作设计图面上的对象的编辑工具。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.CreateViewElement(System.Activities.Presentation.Model.ModelItem)">
      <summary>创建一个支持指定 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 的类型的新 <see cref="T:System.Activities.Presentation.WorkflowViewElement" />。</summary>
      <returns>一个与模型项参数支持相同的类型的工作流视图元素。</returns>
      <param name="modelItem">实体设计器的编辑模型中的一个实体。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.GetModel(System.Windows.DependencyObject)">
      <summary>返回一个映射到指定 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</summary>
      <returns>一个映射到依赖项对象的模型项。</returns>
      <param name="view">一个包含模型项的工作流视图元素。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.GetView(System.Activities.Presentation.Model.ModelItem)">
      <summary>创建一个映射到指定 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 的新 <see cref="T:System.Workflow.ComponentModel.DependencyObject" />。</summary>
      <returns>一个映射到模型项的依赖项对象。</returns>
      <param name="model">实体设计器的编辑模型中的一个实体。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewService.GetViewElement(System.Activities.Presentation.Model.ModelItem)">
      <summary>创建一个映射到指定 <see cref="T:System.Activities.Presentation.Model.ModelItem" /> 的新 <see cref="T:System.Activities.Presentation.WorkflowViewElement" />。</summary>
      <returns>一个映射到指定模型项的新视图元素。</returns>
      <param name="modelItem">实体设计器的编辑模型中的一个实体。</param>
    </member>
    <member name="E:System.Activities.Presentation.View.WorkflowViewService.ViewCreated">
      <summary>当工作流视图创建时发生。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.WorkflowViewStateService">
      <summary>管理活动设计器及其基础模型项的视图状态。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.#ctor(System.Activities.Presentation.EditingContext)">
      <summary>用指定的编辑上下文创建 <see cref="T:System.Activities.Presentation.View.WorkflowViewStateService" /> 的实例。</summary>
      <param name="context">状态服务的 <see cref="T:System.Activities.Presentation.EditingContext" />。</param>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.GetViewState(System.Object)">
      <summary>检索指定对象的视图状态。</summary>
      <returns>包含视图状态的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="instance">要检索其视图状态的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.RemoveViewState(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>移除由指定键表示的、与指定模型项相关联的视图状态。</summary>
      <returns>如果找到了与指定模型项相关联的视图状态并将其移除，则为 true；否则为 false。</returns>
      <param name="modelItem">与当前视图状态相关联的工作流活动 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="key">标识所存储的视图状态项的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelItem" /> 或 <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.RetrieveAllViewState(System.Activities.Presentation.Model.ModelItem)">
      <summary>检索与指定模型项相关联的完整视图状态。</summary>
      <returns>表示视图状态的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="modelItem">与当前视图状态相关联的工作流活动 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelItem" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.RetrieveViewState(System.Activities.Presentation.Model.ModelItem,System.String)">
      <summary>检索与视图状态（它与指定模型项相关联）中的指定键相匹配的项。</summary>
      <returns>与视图状态（它与指定模型项相关联）中的指定键相匹配的项。</returns>
      <param name="modelItem">与当前视图状态相关联的工作流活动 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="key">用于标识所检索的视图状态项的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelItem" /> 或 <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.SetViewState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>将指定参数实例的视图状态设置为指定的词典值。</summary>
      <param name="instance">一个表示视图状态的对象。</param>
      <param name="value">要设置的词典值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.StoreViewState(System.Activities.Presentation.Model.ModelItem,System.String,System.Object)">
      <summary>存储由视图状态（它与指定模型项相关联）中的指定键表示的项。</summary>
      <param name="modelItem">与当前视图状态相关联的工作流活动 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="key">标识所存储的视图状态项的 <see cref="T:System.String" />。</param>
      <param name="value">要存储的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelItem" /> 或 <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Activities.Presentation.View.WorkflowViewStateService.StoreViewStateWithUndo(System.Activities.Presentation.Model.ModelItem,System.String,System.Object)">
      <summary>记录由指定键表示的项的当前设置，使它可供撤消操作使用；然后存储由指定模型项的视图状态中的指定键表示的项。</summary>
      <param name="modelItem">与当前视图状态相关联的工作流活动 <see cref="T:System.Activities.Presentation.Model.ModelItem" />。</param>
      <param name="key">标识所存储的视图状态项的 <see cref="T:System.String" />。</param>
      <param name="value">要存储的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="modelItem" /> 或 <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="E:System.Activities.Presentation.View.WorkflowViewStateService.UndoableViewStateChanged">
      <summary>一个事件，用于通知已经对控件的可撤消视图状态进行了更改。</summary>
    </member>
    <member name="E:System.Activities.Presentation.View.WorkflowViewStateService.ViewStateChanged">
      <summary>一个事件，用于通知已经对控件的视图状态进行了更改。</summary>
    </member>
    <member name="F:System.Activities.Presentation.View.WorkflowViewStateService.ViewStateName">
      <summary>指定状态的名称。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.OutlineView.HidePropertyInOutlineViewAttribute">
      <summary>表示与在大纲视图中隐藏属性关联的特性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.OutlineView.HidePropertyInOutlineViewAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.View.OutlineView.HidePropertyInOutlineViewAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute">
      <summary>表示在大纲视图中显示演示文稿时关联的特性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute.PromotedProperty">
      <summary>获取或设置升级了的属性。</summary>
      <returns>升级的属性。</returns>
    </member>
    <member name="T:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAsSiblingAttribute">
      <summary>表示在大纲视图中以同级显示演示文稿时关联的特性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAsSiblingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAsSiblingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute">
      <summary>表示在大纲视图中显示属性时的特性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute.ChildNodePrefix">
      <summary>获取或设置子节点的前缀。</summary>
      <returns>子节点的前缀。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute.CurrentPropertyVisible">
      <summary>获取或设置当前属性值是否可见。</summary>
      <returns>如果当前属性值可见为，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute.DuplicatedChildNodesVisible">
      <summary>获取或设置重复的子节点是否可见。</summary>
      <returns>如果重复子节点可视，则为 True；否则为 false。</returns>
    </member>
    <member name="T:System.Activities.Presentation.ViewState.ViewStateData">
      <summary>这种类作为拥有视图状态属性的代理项 (VirtualizedContainerService.HintSize 和 WorkflowViewStateService.ViewState) 附加属性，当视图状态分离完成。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.ViewStateData.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.ViewState.ViewStateData" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.ViewState.ViewStateData.Id">
      <summary>获取或设置将此类的对象与具有匹配的 WorkflowViewState.RefId 值的活动相关联的标识符。</summary>
      <returns>与带有 WorkflowViewState.RefId 值匹配的活动的该类的一个对象相联系的标识符。</returns>
    </member>
    <member name="T:System.Activities.Presentation.ViewState.ViewStateManager">
      <summary>此类用于保留所有活动的 ViewStateData 在工作流中作为 XAML 文件的根的附加属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.ViewStateManager.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Presentation.ViewState.ViewStateManager" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Presentation.ViewState.ViewStateManager.ViewStateData">
      <summary>获取所有事件的 ViewStateData 集合，这些事件在工作流中被看做 XAMK 文档根的附加属性。</summary>
      <returns>所有活动在工作流中作为 XAML 文件的根的附加属性的 ViewStateData 的集合。</returns>
    </member>
    <member name="T:System.Activities.Presentation.ViewState.WorkflowViewState">
      <summary>定义 ViewStateManager 和 ViewStateId 附加属性的类。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.WorkflowViewState.GetIdRef(System.Object)">
      <summary>指定从对象中获取 RefId 附加的属性值，如果设置。</summary>
      <returns>如果设置则为 RefId 值；否则为 null。</returns>
      <param name="instance">如果设置了对象，实例对象检索 RefId 的附加属性。</param>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.WorkflowViewState.GetViewStateManager(System.Object)">
      <summary>指定从对象中获取 ViewStateManager 附加的属性值，如果设置。</summary>
      <returns>如果设置，则为 ViewStateManager；否则为 null。</returns>
      <param name="instance">如果设置了对象，实例对象检索 ViewStateManager 的附加属性。</param>
    </member>
    <member name="F:System.Activities.Presentation.ViewState.WorkflowViewState.IdRefProperty">
      <summary>IdRef 的可附加属性。</summary>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.WorkflowViewState.SetIdRef(System.Object,System.String)">
      <summary>指定作为对象的附加属性的设置 IdRef。</summary>
      <param name="instance">实例对象附加为某个对象的 IdRef 属性。</param>
      <param name="idRef">要附加的 RefId 值。</param>
    </member>
    <member name="M:System.Activities.Presentation.ViewState.WorkflowViewState.SetViewStateManager(System.Object,System.Activities.Presentation.ViewState.ViewStateManager)">
      <summary>指定在对象作为附加属性的设置 ViewStateManager。</summary>
      <param name="instance">实例对象附加上 ViewStateManager 的属性。</param>
      <param name="viewStateManager">要附加的 ViewStateManager 对象。</param>
    </member>
    <member name="F:System.Activities.Presentation.ViewState.WorkflowViewState.ViewStateManagerProperty">
      <summary>ViewStateManager 的可附加属性。</summary>
    </member>
    <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
      <summary>为 XAML 标记编译器和开发人员工具提供基础结构支持。</summary>
    </member>
    <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.#ctor">
      <summary>初始化 <see cref="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper" /> 类的新实例。</summary>
    </member>
  </members>
</doc>