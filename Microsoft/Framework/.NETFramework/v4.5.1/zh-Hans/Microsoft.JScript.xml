<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.JScript</name>
  </assembly>
  <members>
    <member name="T:Microsoft.JScript.ActivationObject">
      <summary>表示参与范围层次结构的对象。 此类包含用于解析范围和获取成员信息的方法。 它属于编译和运行时状态类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.CreateField(System.String,System.Reflection.FieldAttributes,System.Object)">
      <summary>使用指定的名称、值和特性创建一个新全局变量。</summary>
      <returns>具有指定名称、值和特性的全局变量。</returns>
      <param name="name">字段名。</param>
      <param name="attributeFlags">枚举值的一个按位组合，这些枚举值描述字段的特性。 <see cref="F:System.Reflection.FieldAttributes.Static" /> 会自动添加。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="F:Microsoft.JScript.ActivationObject.field_table">
      <summary>存储位于范围内的变量的数组。</summary>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetDefaultThisObject">
      <summary>获取当前默认范围，该范围是 with 语句范围包含的对象，或是全局范围。</summary>
      <returns>当前默认范围。</returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetField(System.String,System.Int32)">
      <summary>通过搜索范围层次结构返回具有指定名称的字段。 此方法只搜索由词法级别指定的范围。</summary>
      <returns>具有指定名称的 <see cref="T:System.Reflection.FieldInfo" /> 对象。</returns>
      <param name="name">要搜索的字段的名称。</param>
      <param name="lexLevel">要搜索的词法级别。</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetGlobalScope">
      <summary>获取全局范围，方法是搜索范围层次结构，直至找到一个包括静态变量的范围（例如模块范围）为止。</summary>
      <returns>全局范围。</returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetLocalField(System.String)">
      <summary>获取具有指定名称的字段的局部声明。 在编译时使用此声明来进行错误检查。</summary>
      <returns>字段的局部声明。</returns>
      <param name="name">字段名。</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>检索 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于与指定名称匹配的所有成员。</summary>
      <returns>与 <paramref name="name" /> 参数匹配的对象的数组。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>检索 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于当前对象的所有成员。</summary>
      <returns>对象的数组，其中包含当前对象的所有成员。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMemberValue(System.String,System.Int32)">
      <summary>通过搜索范围层次结构来获取指定成员的值。 此方法只搜索由词法级别指定的范围。</summary>
      <returns>成员 <paramref name="name" /> 的值。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="lexlevel">要搜索的词法级别。</param>
    </member>
    <member name="T:Microsoft.JScript.ActiveXObjectConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.ActiveXObjectConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.ActiveXObjectConstructor.Invoke">
      <summary>在所有情况下均返回 null。</summary>
      <returns>null。</returns>
    </member>
    <member name="T:Microsoft.JScript.ArgumentsObject">
      <summary>表示用于调用函数的信息。 其中包括函数、调用方、参数以及有关堆栈帧的信息。 此类属于对象和函数类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.callee">
      <summary>表示所调用函数的结束函数。</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.caller">
      <summary>堆栈帧中的调用范围信息。</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.length">
      <summary>参数的数量。</summary>
    </member>
    <member name="T:Microsoft.JScript.ArrayConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])">
      <summary>帮助器方法，用于创建新数组并用指定值填充该数组。</summary>
      <returns>新数组。</returns>
      <param name="args">用于填充数组的值。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.Invoke(System.Object[])">
      <summary>调用基于原型的对象的方法，在指定的参数中传递。</summary>
      <returns>方法调用的结果。</returns>
      <param name="args">要传递给方法的参数。</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayLiteral">
      <summary>JScript 分析器使用此类表示数组文本。</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayLiteral.#ctor(Microsoft.JScript.Context,Microsoft.JScript.ASTList)">
      <summary>初始化 <see cref="T:Microsoft.JScript.ArrayLiteral" /> 类的新实例，并指定上下文和元素。</summary>
      <param name="context">当前文档上下文。</param>
      <param name="elements">数组的元素。</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayObject">
      <summary>表示一个数组对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.ArrayObject.length">
      <summary>获取或设置数组的长度。</summary>
      <returns>数组的长度。</returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayObject.SpliceSlowly(System.UInt32,System.UInt32,System.Object[],Microsoft.JScript.ArrayObject,System.UInt32,System.UInt32)">
      <summary>在数组中的指定位置添加和移除数组中的元素。 您可以添加和/或移除元素。</summary>
      <param name="start">要在其中添加和移除元素的此数组中的位置。</param>
      <param name="deleteCount">要移除的元素（如果有）的数目。</param>
      <param name="args">要添加的元素（如果有）。</param>
      <param name="outArray">一个数组，其中包含从此数组中移除的元素（如果已移除了任何元素）。</param>
      <param name="oldLength">此数组以前的长度。</param>
      <param name="newLength">此数组的新长度。</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.ArrayObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])">
      <summary>将对象或数组连接到指定对象或数组的结尾。</summary>
      <returns>连接的 <paramref name="thisob" /> 和 <paramref name="args" />。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
      <param name="args">要追加到 <paramref name="thisob" /> 中的对象或数组。</param>
    </member>
    <member name="P:Microsoft.JScript.ArrayPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)">
      <summary>将指定数组的元素连接为字符串。 这些元素由指定的分隔符分隔。</summary>
      <returns>一个字符串，用于连接 <paramref name="thisob" /> 的元素。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="separator">要用于分隔元素的字符串。 默认值为逗号。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)">
      <summary>从指定数组中移除最后一个元素，并返回该元素。</summary>
      <returns>
        <paramref name="thisob" /> 的最后一个元素。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])">
      <summary>将新元素添加到指定数组的结尾。</summary>
      <returns>
        <paramref name="thisob" /> 的新长度。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="args">要添加到 <paramref name="thisob" /> 中的元素。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)">
      <summary>反转指定数组的元素。</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)">
      <summary>从指定数组中移除第一个元素，并返回该元素。 将剩余元素位移到前面的位置。</summary>
      <returns>
        <paramref name="thisob" /> 的第一个元素。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)">
      <summary>创建一个新数组，其中包含指定数组中的指定连续元素。</summary>
      <returns>一个新数组，其中包含介于 <paramref name="thisob" />[<paramref name="start" />] 和 <paramref name="thisob" />[<paramref name="end" />] 之间的连续元素。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
      <param name="start">要获取的第一个连续元素。</param>
      <param name="end">要获取的最后一个连续元素。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)">
      <summary>通过使用指定的函数来比较元素，从而对指定数组的元素进行排序。</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="function">要用于比较元素的函数。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])">
      <summary>在数组中的指定位置添加和移除数组中的元素。 您可以添加和/或移除元素。</summary>
      <returns>一个新数组，其中包含从 <paramref name="thisob" /> 中移除的元素（如果已移除了任何元素）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
      <param name="start">数组中要添加和移除元素的位置。</param>
      <param name="deleteCnt">要移除的元素（如果有）的数目。</param>
      <param name="args">要添加的元素（如果有）。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)">
      <summary>创建指定对象的字符串表示形式，该对象连接各个元素，并用 <see cref="P:System.Globalization.TextInfo.ListSeparator" /> 和空格分隔这些元素。</summary>
      <returns>一个字符串，用于连接 <paramref name="thisob" /> 的各个元素，并用 <see cref="P:System.Globalization.TextInfo.ListSeparator" /> 和空格分隔这些元素。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)">
      <summary>创建指定对象的字符串表示形式，该对象连接各个元素并用逗号分隔这些元素。</summary>
      <returns>一个字符串，用于连接 <paramref name="thisob" /> 的各个元素，并用逗号分隔这些元素。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])">
      <summary>将新元素添加到指定数组的开头。 将现有元素位移到后面的位置。</summary>
      <returns>
        <paramref name="thisob" /> 的新长度。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="args">要添加到 <paramref name="thisob" /> 中的元素。</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayWrapper">
      <summary>包装数组以创建 JScript <see cref="T:Microsoft.JScript.ArrayObject" />。 此类将包装 .NET Framework <see cref="T:System.Array" /> 对象或 JScript <see cref="T:Microsoft.JScript.ArrayObject" /> 对象。</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayWrapper.GetType">
      <summary>获取数组的类型。</summary>
      <returns>
        <see cref="T:System.Array" /> 或 <see cref="T:Microsoft.JScript.ArrayObject" /> 的类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.ArrayWrapper.length">
      <summary>获取数组的长度。</summary>
      <returns>数组的长度。</returns>
    </member>
    <member name="T:Microsoft.JScript.AssemblyCustomAttributeList">
      <summary>JScript 分析器使用此类存储分配给程序集的特性。</summary>
    </member>
    <member name="T:Microsoft.JScript.AST">
      <summary>表示用于分析 JScript 代码的抽象语法树。</summary>
    </member>
    <member name="T:Microsoft.JScript.ASTList">
      <summary>维护 <see cref="T:Microsoft.JScript.AST" /> 元素的列表。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="T:Microsoft.JScript.BinaryOp">
      <summary>表示依据两个操作数执行运算的类（比如 <see cref="T:Microsoft.JScript.Plus" />、<see cref="T:Microsoft.JScript.Equality" /> 和 <see cref="T:Microsoft.JScript.Relational" />）的基类。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.BinaryOp.GetOperator(System.Reflection.IReflect,System.Reflection.IReflect)">
      <summary>根据所请求的运算和操作数的数据类型来确定要调用的最佳方法。</summary>
      <returns>要依据操作数调用的推荐方法。</returns>
      <param name="ir1">第一个操作数的数据类型。</param>
      <param name="ir2">第二个操作数的数据类型。</param>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operand1">
      <summary>表示运算的第一个操作数。</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operand2">
      <summary>表示运算的第二个操作数。</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operatorMeth">
      <summary>表示实际执行的运算。</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operatorTok">
      <summary>表示所请求的运算。 <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.type1">
      <summary>表示运算的第一个操作数的数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.type2">
      <summary>表示运算的第二个操作数的数据类型。</summary>
    </member>
    <member name="T:Microsoft.JScript.Binding">
      <summary>表示对类成员、可调用的表达式或变量名称的引用。 在编译时，此类将尝试解析对正确值的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.defaultMember">
      <summary>存储对默认索引属性的引用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.GetObject">
      <summary>在派生类中重写时，获取在其上定义绑定引用的对象。</summary>
      <returns>在其上定义绑定引用的对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.Binding.HandleNoSuchMemberError">
      <summary>在派生类中重写时，处理以下情况：绑定引用是对无法找到的成员的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isAssignmentToDefaultIndexedProperty">
      <summary>存储一个值，该值指示绑定引用是否为对默认索引属性的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isFullyResolved">
      <summary>存储一个值，该值指示是否对绑定引用进行完全解析。</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.IsMissing(System.Object)">
      <summary>确定指定对象是否等效于 <see cref="T:Microsoft.JScript.Missing" />。</summary>
      <returns>如果 <paramref name="value" /> 等效于 <see cref="T:Microsoft.JScript.Missing" />，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="F:Microsoft.JScript.Binding.isNonVirtual">
      <summary>存储一个值，该值指示绑定引用是否为对重写基类成员的成员的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.name">
      <summary>存储一个标识绑定引用的字符串。</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.ResolveRHValue">
      <summary>解析绑定引用的右侧。</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.TranslateToILObject(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
      <summary>在派生类中重写时，针对在其上定义绑定引用的对象，生成 Microsoft 中间语言 (MSIL) 代码。</summary>
      <param name="il">一个生成 Microsoft 中间语言 (MSIL) 指令的对象。</param>
      <param name="obtype">对象的类型。</param>
      <param name="noValue">如果该对象没有值，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.Binding.TranslateToILWithDupOfThisOb(System.Reflection.Emit.ILGenerator)">
      <summary>在派生类中重写时，针对绑定引用生成 Microsoft 中间语言 (MSIL) 代码。 需要时复制计算堆栈上当前最顶端的值，然后将副本推送到计算堆栈上。</summary>
      <param name="il">一个生成 Microsoft 中间语言 (MSIL) 指令的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.BitwiseBinary">
      <summary>执行按位二元运算。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.BitwiseBinary.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.JScript.BitwiseBinary" /> 类的新实例。</summary>
      <param name="operatorTok">
        <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。 指定要执行的操作。</param>
    </member>
    <member name="M:Microsoft.JScript.BitwiseBinary.EvaluateBitwiseBinary(System.Object,System.Object)">
      <summary>执行按位二元运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="T:Microsoft.JScript.Block">
      <summary>表示 Jscript 中的块。 此类主要由 <see cref="T:Microsoft.JScript.JSParser" /> 用来在分析代码时创建 <see cref="T:Microsoft.JScript.Block" /> 对象。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="T:Microsoft.JScript.BlockScope">
      <summary>表示代码块的范围，此代码块范围是范围层次结构的一部分，并且可以推送到全局范围堆栈上。 例如，此类可以表示 try 块的范围。</summary>
    </member>
    <member name="M:Microsoft.JScript.BlockScope.#ctor(Microsoft.JScript.ScriptObject,System.String,System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.JScript.BlockScope" /> 类的新实例。</summary>
      <param name="parent">范围的父项。</param>
      <param name="name">范围的名称。</param>
      <param name="scopeId">范围的 ID。</param>
    </member>
    <member name="M:Microsoft.JScript.BlockScope.CreateField(System.String,System.Reflection.FieldAttributes,System.Object)">
      <summary>使用指定的名称、值和特性创建一个新范围变量。</summary>
      <returns>具有指定名称、值和特性的范围变量。</returns>
      <param name="name">字段名。</param>
      <param name="attributeFlags">枚举值的一个按位组合，这些枚举值描述字段的特性。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="T:Microsoft.JScript.BooleanConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanConstructor.Invoke(System.Object)">
      <summary>调用基于原型的对象的方法，在指定的参数中传递。</summary>
      <returns>方法调用的结果。</returns>
      <param name="arg">要传递给方法的参数。</param>
    </member>
    <member name="T:Microsoft.JScript.BooleanObject">
      <summary>表示一个 Boolean 对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanObject.#ctor(Microsoft.JScript.ScriptObject,System.Type)">
      <summary>初始化 <see cref="T:Microsoft.JScript.BooleanObject" /> 类的新实例，并指定父项和子类型。</summary>
      <param name="prototype">对象的父项。</param>
      <param name="subType">对象的子类型。</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanObject.GetType">
      <summary>返回 <see cref="T:System.Boolean" /> 或 <see cref="T:Microsoft.JScript.BooleanObject" />。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 或 <see cref="T:Microsoft.JScript.BooleanObject" />。</returns>
    </member>
    <member name="T:Microsoft.JScript.BooleanPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.BooleanObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.#ctor(Microsoft.JScript.ObjectPrototype,System.Type)">
      <summary>初始化 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类的新实例。</summary>
      <param name="parent">此类的父类的静态实例。</param>
      <param name="baseType">此类的类型的实例。</param>
    </member>
    <member name="P:Microsoft.JScript.BooleanPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)">
      <summary>通过使用 <see cref="T:Microsoft.JScript.Convert" /> 类，创建指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式，它是通过 <see cref="T:Microsoft.JScript.Convert" /> 类创建的。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)">
      <summary>以 <see cref="T:Microsoft.JScript.BooleanObject" /> 或 <see cref="T:System.Boolean" /> 的形式返回指定对象。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.BooleanObject" /> 或 <see cref="T:System.Boolean" /> 形式的 <paramref name="thisob" />。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.BreakOutOfFinally">
      <summary>表示当代码执行跳出 finally 块时的异常状态。</summary>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.Int32)">
      <summary>使用指定的目标初始化 <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> 类的新实例。</summary>
      <param name="target">异常的目标。</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
      <param name="e">导致当前异常的异常。</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将有关异常的信息存储在 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中。 存储的信息包括 <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" /> 值。</summary>
      <param name="s">有关所引发异常的序列化对象数据。</param>
      <param name="c">有关源或目标的上下文信息。</param>
    </member>
    <member name="F:Microsoft.JScript.BreakOutOfFinally.target">
      <summary>存储异常的目标。</summary>
    </member>
    <member name="T:Microsoft.JScript.Closure">
      <summary>表示一个结束函数。 此类属于对象和函数类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Closure.#ctor(Microsoft.JScript.FunctionObject)">
      <summary>初始化 <see cref="T:Microsoft.JScript.Closure" /> 类的新实例。</summary>
      <param name="func">此结束函数所表示的函数。</param>
    </member>
    <member name="F:Microsoft.JScript.Closure.arguments">
      <summary>要用于函数的参数。</summary>
    </member>
    <member name="F:Microsoft.JScript.Closure.caller">
      <summary>堆栈帧中的调用范围信息。</summary>
    </member>
    <member name="M:Microsoft.JScript.Closure.ToString">
      <summary>创建函数的字符串表示形式，如函数或上下文的名称。</summary>
      <returns>函数的字符串表示形式。</returns>
    </member>
    <member name="T:Microsoft.JScript.CmdLineError">
      <summary>指定在运行命令行编译器 jsc.exe 时发生的错误。 此枚举用于创建 <see cref="T:Microsoft.JScript.CmdLineException" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.AssemblyNotFound">
      <summary>未能找到引用的程序集“{0}”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.CannotCreateEngine">
      <summary>无法创建 JScript 引擎。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.CompilerConstant">
      <summary>无法更改编译器常量“{0}”的值。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateFileAsSourceAndAssembly">
      <summary>重复的文件名:“{0}”同时作为源文件和导入的程序集列出。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateResourceFile">
      <summary>多次引用资源文件“{0}”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateResourceName">
      <summary>资源名“{0}”不唯一。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateSourceFile">
      <summary>重复的文件名:“{0}”多次作为源文件列出。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ErrorSavingCompiledState">
      <summary>保存编译状态时出错: {0}。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.IncompatibleTargets">
      <summary>
        <see cref="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" /> 属性的值与目标类型“{0}”不兼容。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidAssembly">
      <summary>“{0}”不是有效的程序集。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidCharacters">
      <summary>文件名“{0}”包含无效字符(不支持通配符)。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidCodePage">
      <summary>代码页“{0}”无效或未安装。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidDefinition">
      <summary>必须给定义“{0}”赋以布尔值或整数值。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidForCompilerOptions">
      <summary>CompilerOptions 字段中不允许“{0}”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidLocaleID">
      <summary>区域设置 ID“{0}”无效或未安装。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidPlatform">
      <summary>平台“{0}”无效。 请指定“x86”、“Itanium”、“x64”或“anycpu”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidSourceFile">
      <summary>“{0}”不是有效的源文件。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidTarget">
      <summary>目标类型“{0}”无效。 请指定“exe”或“library”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidVersion">
      <summary>“{0}”不是有效的版本字符串。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidWarningLevel">
      <summary>用选项“{0}”指定的警告等级无效。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.LAST">
      <summary>所包含的值与最后赋予的枚举值（赋予的最高枚举值）相同的占位符枚举成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ManagedResourceNotFound">
      <summary>未找到托管资源“{0}”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingDefineArgument">
      <summary>命令行选项“-define:”缺少标识符。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingExtension">
      <summary>“{0}”缺少文件扩展名。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingLibArgument">
      <summary>命令行选项“-lib:”缺少文件规范。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingReference">
      <summary>参数列表“{0}”中缺少引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingVersionInfo">
      <summary>-assembly.version 选项中缺少版本信息。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleOutputNames">
      <summary>指定了多个输出文件名。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleTargets">
      <summary>指定了多个目标。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleWin32Resources">
      <summary>不能指定一个以上的 Win32 资源文件。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NestedResponseFiles">
      <summary>无法处理嵌套的响应文件。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoCodePage">
      <summary>没有用选项“{0}”指定代码页。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoError">
      <summary>无错误。 这是默认值。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoFileName">
      <summary>没有用选项“{0}”指定文件名。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoInputSourcesSpecified">
      <summary>未指定输入源。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoLocaleID">
      <summary>没有用选项“{0}”指定区域设置 ID。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoWarningLevel">
      <summary>没有用选项“{0}”指定警告等级。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ResourceNotFound">
      <summary>未找到 Win32 资源“{0}”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.SourceFileTooBig">
      <summary>源文件太大。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.SourceNotFound">
      <summary>未能找到源文件“{0}”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.UnknownOption">
      <summary>未知选项“{0}”。</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.Unspecified">
      <summary>错误。</summary>
    </member>
    <member name="T:Microsoft.JScript.CmdLineException">
      <summary>表示在运行命令行编译器 jsc.exe 时发生的错误。</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(Microsoft.JScript.CmdLineError,System.Globalization.CultureInfo)">
      <summary>使用指定的错误代码和区域性信息初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类的新实例。</summary>
      <param name="errorCode">枚举值之一。 指定发生了什么错误。</param>
      <param name="culture">特定于区域性的信息。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(Microsoft.JScript.CmdLineError,System.String,System.Globalization.CultureInfo)">
      <summary>使用指定的错误代码、上下文和区域性信息初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类的新实例。</summary>
      <param name="errorCode">枚举值之一。 指定发生了什么错误。</param>
      <param name="context">其中发生错误的上下文。</param>
      <param name="culture">特定于区域性的信息。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类的新实例。</summary>
      <param name="s">有关所引发异常的序列化对象数据。</param>
      <param name="c">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
      <param name="e">作为当前异常原因的异常，如果没有指定内部异常，则为 null。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>存储有关所引发异常的序列化对象数据。</summary>
      <param name="s">有关所引发异常的序列化对象数据。</param>
      <param name="c">有关源或目标的上下文信息</param>
    </member>
    <member name="P:Microsoft.JScript.CmdLineException.Message">
      <summary>获取描述当前异常的消息。</summary>
      <returns>解释异常原因的错误信息。</returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.ResourceKey(Microsoft.JScript.CmdLineError)">
      <summary>返回表示资源文件中指定错误的键。</summary>
      <returns>
        <paramref name="errorCode" /> 的键。</returns>
      <param name="errorCode">枚举值之一。 指定要获取其键的错误。</param>
    </member>
    <member name="T:Microsoft.JScript.CmdLineOptionParser">
      <summary>确定指定给命令行编译器 jsc.exe 的选项形式是否正确，并读取参数（如果包括任何参数）。</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.CmdLineOptionParser" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsArgumentOption(System.String,System.String)">
      <summary>从指定的命令行选项中获取参数。 适用于只具有一个名称的选项，如 /out:&lt;filename&gt;。</summary>
      <returns>返回参数自身；若未指定参数，则返回“”（空）；若选项或参数的形式不正确，则返回 null。</returns>
      <param name="option">用户指定的命令行选项。</param>
      <param name="prefix">选项名称。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsArgumentOption(System.String,System.String,System.String)">
      <summary>从指定的命令行选项中获取参数。 适用于可通过短格式或长格式的选项名称指定的选项，例如 /r[eference]:&lt;file list&gt; 的 /r 或 /reference。</summary>
      <returns>返回参数自身；若未指定参数，则返回“”（空）；若选项或参数的形式不正确，则返回 null。</returns>
      <param name="option">用户指定的命令行选项。</param>
      <param name="shortPrefix">短格式的选项名称。</param>
      <param name="longPrefix">长格式的选项名称。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsBooleanOption(System.String,System.String)">
      <summary>从指定的命令行选项中获取 + 或 - 参数。 适用于只具有一个名称的选项，如 /debug[+|-]。</summary>
      <returns>若获取的参数为 -，则返回 false；若获取的参数为 +，或是未指定参数，则返回 true；若选项或参数的形式不正确，则返回 null。</returns>
      <param name="option">用户指定的命令行选项。</param>
      <param name="prefix">选项名称。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsBooleanOption(System.String,System.String,System.String)">
      <summary>从指定的命令行选项中获取 + 或 - 参数。 适用于可通过短格式或长格式的选项名称指定的选项。</summary>
      <returns>若获取的参数为 -，则返回 false；若获取的参数为 +，或是未指定参数，则返回 true；若选项或参数的形式不正确，则返回 null。</returns>
      <param name="option">用户指定的命令行选项。</param>
      <param name="shortPrefix">短格式的选项名称。</param>
      <param name="longPrefix">长格式的选项名称。</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsSimpleOption(System.String,System.String)">
      <summary>验证指定的选项形式是否正确。</summary>
      <returns>如果选项的形式正确，则为 true；否则为 false。</returns>
      <param name="option">用户指定的命令行选项。</param>
      <param name="prefix">选项名称。</param>
    </member>
    <member name="T:Microsoft.JScript.COMCharStream">
      <summary>表示一个将其数据发送给 <see cref="T:Microsoft.JScript.IMessageReceiver" /> 的流。 在刷新数据或关闭流之前，该数据将存储在缓冲区中。</summary>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.#ctor(Microsoft.JScript.IMessageReceiver)">
      <summary>初始化 <see cref="T:Microsoft.JScript.COMCharStream" /> 类的新实例。</summary>
      <param name="messageReceiver">流数据接收器。</param>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读取。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写入。</summary>
      <returns>任何情况下都为 true。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Close">
      <summary>将此流的数据发送给 <see cref="T:Microsoft.JScript.IMessageReceiver" /> 并清除其缓冲区。</summary>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Flush">
      <summary>将此流的数据发送给 <see cref="T:Microsoft.JScript.IMessageReceiver" /> 并清除其缓冲区。</summary>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.Length">
      <summary>获取流的长度。</summary>
      <returns>流的长度。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.Position">
      <summary>获取流中的当前位置。 set 方法不执行任何操作。</summary>
      <returns>流中的当前新位置。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>任何情况下均引发 <see cref="T:System.NotSupportedException" /> 异常。</summary>
      <returns>任何情况下均引发 <see cref="T:System.NotSupportedException" /> 异常。</returns>
      <param name="buffer">字节数组，这些字节将用于存储从流中读取的数据。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储从流中读取的数据。</param>
      <param name="count">要从流中读取的最大字节数。</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>设置当前流中的位置。 此方法不执行任何操作。 它始终返回 0。</summary>
      <returns>在所有情况下均为 0。</returns>
      <param name="offset">相对于 <paramref name="origin" /> 参数的字节偏移量。</param>
      <param name="origin">一个值，指示用于获取新位置的参考点。</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.SetLength(System.Int64)">
      <summary>设置流的长度。</summary>
      <param name="value">流的新长度。</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的字节数据写入流中。</summary>
      <param name="buffer">要复制到当前流中的字节数据的数组。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">要从 <paramref name="buffer" /> 复制到当前流中的字节数。</param>
    </member>
    <member name="T:Microsoft.JScript.COMFieldInfo">
      <summary>使 JScript 能够与外部 COM 字段通信。 外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" /> 以便绑定到外部对象。</summary>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.COMFieldInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.Attributes">
      <summary>获取与此字段关联的属性。</summary>
      <returns>
        <see cref="F:System.Reflection.FieldAttributes.Public" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.DeclaringType">
      <summary>获取声明此字段的类型。</summary>
      <returns>为 null，因为声明此字段的类型是一个外部 COM 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.FieldHandle">
      <summary>在所有情况下均引发 <see cref="F:Microsoft.JScript.JSError.InternalError" /> 异常。</summary>
      <returns>在所有情况下均引发 <see cref="F:Microsoft.JScript.JSError.InternalError" /> 异常。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.FieldType">
      <summary>获取此字段的类型。</summary>
      <returns>
        <see cref="T:System.Object" /> 的类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCOMMemberInfo">
      <summary>获取一个托管对象，该对象使 JScript 能够与此外部 COM 字段通信。</summary>
      <returns>一个托管对象，该对象使 JScript 能够与此外部 COM 字段通信。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>返回一个数组，其中包含附加到此字段的自定义特性。</summary>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象数组，该数组包含零个元素。</returns>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回一个数组，其中包含附加到此字段的自定义特性（只搜索指定类型的特性）。</summary>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象数组，该数组包含零个元素。</returns>
      <param name="t">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetValue(System.Object)">
      <summary>通过使用指定给 <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法的 <see cref="T:Microsoft.JScript.COMMemberInfo" />，获取外部 COM 字段的值。</summary>
      <returns>外部 COM 字段的值。</returns>
      <param name="obj">要传递给外部 COM 字段的参数列表。 忽略此参数。</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>初始化使 JScript 能够与此外部 COM 字段通信的信息。</summary>
      <param name="name">此对象表示的外部 COM 字段的名称。</param>
      <param name="dispatch">使 JScript 能够访问外部 COM 字段的信息。</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定的特性类型是否附加到此字段。</summary>
      <returns>所有情况下均为 false。</returns>
      <param name="t">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.MemberType">
      <summary>获取此字段所充当成员的类型。 标识派生自 <see cref="T:System.Reflection.MemberInfo" />（此类从中派生）的类的类型。</summary>
      <returns>由于此类派生自 <see cref="T:System.Reflection.FieldInfo" />，因此为 <see cref="F:System.Reflection.MemberTypes.Field" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.Name">
      <summary>获取此对象表示的外部 COM 字段的名称。</summary>
      <returns>此对象表示的外部 COM 字段的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.ReflectedType">
      <summary>通过反射获取用于获取此实例的类对象。</summary>
      <returns>为 null，因为此实例不是通过反射获取的。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>通过使用指定给 <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法的 <see cref="T:Microsoft.JScript.COMMemberInfo" />，设置外部 COM 字段的值。</summary>
      <param name="obj">将设置其字段值的对象。 忽略此参数。</param>
      <param name="value">外部 COM 成员的新值。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象可将类型从实参类型转换为形参类型。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="T:Microsoft.JScript.COMMemberInfo">
      <summary>定义使 JScript 能够与外部 COM 成员通信的方法。 外部 COM 实现使用此接口向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" /> 才能绑定到外部对象。</summary>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.Call(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在类中实现时，使 JScript 能够调用外部 COM 成员。 使用指定的绑定信息。</summary>
      <returns>对外部 COM 成员的调用的值。</returns>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="arguments">要传递给外部 COM 成员的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息，以便正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.GetValue(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在类中实现时，使 JScript 能够使用指定的绑定信息获取外部 COM 成员的值。</summary>
      <returns>外部 COM 成员的值。</returns>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="index">要传递给外部 COM 成员的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息，以便正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.SetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在类中实现时，使 JScript 能够使用指定的绑定信息将外部 COM 成员的值设置为指定的新值。</summary>
      <param name="value">外部 COM 成员的新值。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="index">要传递给外部 COM 成员的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息，以便正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="T:Microsoft.JScript.COMMethodInfo">
      <summary>使 JScript 能够与外部 COM 方法通信。 外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" /> 以便绑定到外部对象。</summary>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.COMMethodInfo" /> 类的新实例。</summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo._comObject">
      <summary>存储一个托管对象，该对象使 JScript 能够与此外部 COM 方法通信。</summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo._name">
      <summary>存储此对象表示的外部 COM 方法的名称。</summary>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.Attributes">
      <summary>获取与此方法关联的特性。</summary>
      <returns>
        <see cref="F:System.Reflection.MethodAttributes.Public" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.DeclaringType">
      <summary>获取用于声明此方法的类型。</summary>
      <returns>为 null，因为声明此方法的类型是外部 COM 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo.EmptyParams">
      <summary>存储一个 <see cref="T:System.Reflection.ParameterInfo" /> 对象数组，该数组包含零个元素。</summary>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetBaseDefinition">
      <summary>对于直接或间接基类上的方法，返回 <see cref="T:System.Reflection.MethodInfo" /> 对象，在直接或间接基类中，此方法是最先声明的。</summary>
      <returns>所有情况下均为 this。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetCOMMemberInfo">
      <summary>获取一个托管对象，该对象使 JScript 能够与此外部 COM 方法通信。</summary>
      <returns>一个托管对象，该对象使 JScript 能够与此外部 COM 方法通信。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetMethodImplementationFlags">
      <summary>返回有关此方法的实现的信息。</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> 和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetParameters">
      <summary>获取此外部 COM 方法的参数。</summary>
      <returns>一个 <see cref="T:System.Reflection.ParameterInfo" /> 对象数组，该数组包含零个元素。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>初始化使 JScript 能够与此外部 COM 方法通信的信息。</summary>
      <param name="name">此对象表示的外部 COM 方法的名称。</param>
      <param name="dispatch">使 JScript 能够访问外部 COM 方法的信息。</param>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>通过使用指定给 <see cref="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法的 <see cref="T:Microsoft.JScript.COMMemberInfo" />，调用外部 COM 方法。</summary>
      <returns>外部 COM 方法调用的返回值。</returns>
      <param name="obj">要对其调用方法的对象。 忽略此参数。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象可将类型从实参类型转换为形参类型。</param>
      <param name="parameters">要传递给外部 COM 成员的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.MemberType">
      <summary>获取此方法所充当成员的类型。 标识派生自 <see cref="T:System.Reflection.MemberInfo" />（此类从中派生）的类的类型。</summary>
      <returns>由于此类派生自 <see cref="T:System.Reflection.MethodInfo" />，因此为 <see cref="F:System.Reflection.MemberTypes.Method" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.MethodHandle">
      <summary>在所有情况下均引发 <see cref="F:Microsoft.JScript.JSError.InternalError" /> 异常。</summary>
      <returns>在所有情况下均引发 <see cref="F:Microsoft.JScript.JSError.InternalError" /> 异常。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.Name">
      <summary>获取此对象表示的外部 COM 方法的名称。</summary>
      <returns>此对象表示的外部 COM 方法的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReflectedType">
      <summary>通过反射获取用于获取此实例的类对象。</summary>
      <returns>为 null，因为此实例不是通过反射获取的。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReturnType">
      <summary>获取此方法的返回值的类型。</summary>
      <returns>在所有情况下均为 null。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReturnTypeCustomAttributes">
      <summary>获取此方法返回值的类型的自定义特性。</summary>
      <returns>在所有情况下均为 null。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.ToString">
      <summary>返回表示当前方法的字符串。</summary>
      <returns>空字符串。</returns>
    </member>
    <member name="T:Microsoft.JScript.COMPropertyInfo">
      <summary>使 JScript 能够与外部 COM 属性通信。 外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" /> 以便绑定到外部对象。</summary>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.COMPropertyInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.Attributes">
      <summary>获取与此属性关联的特性。</summary>
      <returns>
        <see cref="F:System.Reflection.PropertyAttributes.None" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.CanRead">
      <summary>获取一个值，该值指示此属性是否可读。</summary>
      <returns>任何情况下都为 true。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.CanWrite">
      <summary>获取一个值，该值指示此属性是否可写。</summary>
      <returns>任何情况下都为 true。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.DeclaringType">
      <summary>获取用于声明此属性的类型。</summary>
      <returns>为 null，因为声明此属性的类型是一个外部 COM 对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetAccessors(System.Boolean)">
      <summary>获取一个数组，该数组的元素包含此对象所表示的外部 COM 属性的 get 和 set 访问器。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 对象的二元素数组，其中包含此属性的 get 和 set 方法。</returns>
      <param name="nonPublic">如果包括非公共访问器，则为 true。</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCOMMemberInfo">
      <summary>获取一个托管对象，该对象使 JScript 能够与此外部 COM 属性通信。</summary>
      <returns>一个托管对象，该对象使 JScript 能够与此外部 COM 属性通信。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCustomAttributes(System.Boolean)">
      <summary>返回一个数组，其中包含附加到此属性的自定义特性。</summary>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象数组，该数组包含零个元素。</returns>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回一个数组，其中包含附加到此属性的自定义特性（只搜索指定类型的特性）。</summary>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象数组，该数组包含零个元素。</returns>
      <param name="t">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetGetMethod(System.Boolean)">
      <summary>返回此属性的 get 访问器。</summary>
      <returns>此属性的 get 访问器。</returns>
      <param name="nonPublic">如果包括非公共访问器，则为 true。</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetIndexParameters">
      <summary>返回此属性 (Property) 的所有索引参数的数组。</summary>
      <returns>一个 <see cref="T:System.Reflection.ParameterInfo" /> 对象数组，该数组包含零个元素。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetSetMethod(System.Boolean)">
      <summary>返回此属性的 set 访问器。</summary>
      <returns>此属性的 set 访问器。</returns>
      <param name="nonPublic">如果包括非公共访问器，则为 true。</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>通过使用指定给 <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法的 <see cref="T:Microsoft.JScript.COMMemberInfo" />，获取外部 COM 属性的值。</summary>
      <returns>外部 COM 属性的值。</returns>
      <param name="obj">想要获取其属性值的对象。 忽略此参数。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象可将类型从实参类型转换为形参类型。</param>
      <param name="index">要传递给外部 COM 属性的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>初始化使 JScript 能够与此外部 COM 属性通信的信息。</summary>
      <param name="name">此对象表示的外部 COM 属性的名称。</param>
      <param name="dispatch">使 JScript 能够访问外部 COM 属性的信息。</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定的特性类型是否附加到此属性。</summary>
      <returns>所有情况下均为 false。</returns>
      <param name="t">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.MemberType">
      <summary>获取此属性所充当成员的类型。 标识派生自 <see cref="T:System.Reflection.MemberInfo" />（此类从中派生）的类的类型。</summary>
      <returns>为 <see cref="F:System.Reflection.MemberTypes.Property" />，因为此类派生自 <see cref="T:System.Reflection.PropertyInfo" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.Name">
      <summary>获取此对象表示的外部 COM 属性的名称。</summary>
      <returns>此对象表示的外部 COM 属性的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.PropertyType">
      <summary>获取此属性的类型。</summary>
      <returns>
        <see cref="T:System.Object" /> 的类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.ReflectedType">
      <summary>通过反射获取用于获取此实例的类对象。</summary>
      <returns>为 null，因为此实例不是通过反射获取的。</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>通过使用指定给 <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法的 <see cref="T:Microsoft.JScript.COMMemberInfo" />，设置外部 COM 属性的值。</summary>
      <param name="obj">将设置其属性值的对象。 忽略此参数。</param>
      <param name="value">外部 COM 成员的新值。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象可将类型从实参类型转换为形参类型。</param>
      <param name="index">要传递给外部 COM 属性的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="T:Microsoft.JScript.Context">
      <summary>表示 JScript 源代码。 此类属于编译和运行时状态类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.Context.EndColumn">
      <summary>获取行中此代码结束所在的列号。 这包括行开头的空白。</summary>
      <returns>此代码结束所在的列号。</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndLine">
      <summary>获取此代码的结束行号。</summary>
      <returns>此代码的结束行号。</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndPosition">
      <summary>获取此代码在代码字符串中的结束位置，这是因为所有代码行均存储在一个字符串中。</summary>
      <returns>此代码在代码字符串中的结束位置。</returns>
    </member>
    <member name="M:Microsoft.JScript.Context.GetCode">
      <summary>获取上下文所包含的代码，并丢弃任何空白。</summary>
      <returns>上下文所包含的代码。</returns>
    </member>
    <member name="M:Microsoft.JScript.Context.GetToken">
      <summary>获取上下文所包含的单个代码单元或“标记”。</summary>
      <returns>上下文所包含的单个代码单元或标记。</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartColumn">
      <summary>获取行中此代码开始所在的列号。 这包括行开头的空白。</summary>
      <returns>此代码开始所在的列号。</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartLine">
      <summary>获取此代码开始所在的行号。</summary>
      <returns>此代码开始所在的行号。</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartPosition">
      <summary>获取此代码在代码字符串中的开始位置，这是因为所有代码行均存储在一个字符串中。</summary>
      <returns>此代码在代码字符串中的开始位置。</returns>
    </member>
    <member name="T:Microsoft.JScript.ContinueOutOfFinally">
      <summary>表示当代码超出 finally 块继续执行时的异常状态。</summary>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.Int32)">
      <summary>使用指定的目标初始化 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> 类的新实例。</summary>
      <param name="target">异常的目标。</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
      <param name="e">导致当前异常的异常。</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将有关异常的信息存储在 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中。 存储的信息包括 <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" /> 值。</summary>
      <param name="s">有关所引发异常的序列化对象数据。</param>
      <param name="c">有关源或目标的上下文信息。</param>
    </member>
    <member name="F:Microsoft.JScript.ContinueOutOfFinally.target">
      <summary>存储异常的目标。</summary>
    </member>
    <member name="T:Microsoft.JScript.Convert">
      <summary>将数据从一种类型转换为另一种类型。 这是一个实用工具类。</summary>
    </member>
    <member name="M:Microsoft.JScript.Convert.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.Convert" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.Convert.CheckIfDoubleIsInteger(System.Double)">
      <summary>确定 <see cref="T:System.Double" /> 变量是否包含整数值。</summary>
      <returns>如果 <paramref name="d" /> 包含整数值，则返回 <paramref name="d" />。 如果不是，则引发异常。</returns>
      <param name="d">要测试的 <see cref="T:System.Double" />。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.CheckIfSingleIsInteger(System.Single)">
      <summary>确定 <see cref="T:System.Single" /> 变量是否包含整数值。</summary>
      <returns>如果 <paramref name="s" /> 包含整数值，则返回 <paramref name="s" />。 如果不是，则引发异常。</returns>
      <param name="s">要测试的 <see cref="T:System.Single" />。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.Coerce(System.Object,System.Object)">
      <summary>将指定值转换为指定类型。</summary>
      <returns>转换为 <paramref name="type" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换为新类型的值。</param>
      <param name="type">
        <paramref name="value" /> 所要转换到的类型。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.Coerce2(System.Object,System.TypeCode,System.Boolean)">
      <summary>将指定值转换为指定的 <see cref="T:System.TypeCode" />，并允许数据丢失（可选）。</summary>
      <returns>转换为 <paramref name="target" /> 类型的 <paramref name="value" />。</returns>
      <param name="value">要转换为新类型的值。</param>
      <param name="target">
        <paramref name="value" /> 所要转换到的类型。</param>
      <param name="truncationPermitted">如果允许数据丢失，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.CoerceT(System.Object,System.Type,System.Boolean)">
      <summary>将指定值转换为指定的 <see cref="T:System.Type" />，并允许数据丢失（可选）。</summary>
      <returns>转换为类型 <paramref name="t" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换为新类型的值。</param>
      <param name="t">
        <paramref name="value" /> 所要转换到的类型。</param>
      <param name="explicitOK">如果允许数据丢失，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.IsBadIndex(Microsoft.JScript.AST)">
      <summary>确定变量是否包含数组索引值。</summary>
      <returns>如果 <paramref name="ast" /> 包含数组索引值，则为 true；否则为 false。</returns>
      <param name="ast">要测试的变量。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ThrowTypeMismatch(System.Object)">
      <summary>任何情况下均引发 <see cref="T:Microsoft.JScript.JScriptException" /> 异常。</summary>
      <param name="val">导致异常的源代码。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Double)">
      <summary>将指定的 <see cref="T:System.Double" /> 转换为 <see cref="T:System.Boolean" />。</summary>
      <returns>如果 <paramref name="d" /> 为 0，则为 false；否则为 true。</returns>
      <param name="d">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Object)">
      <summary>将指定的 <see cref="T:System.Object" /> 转换为 <see cref="T:System.Boolean" />。</summary>
      <returns>转换为 <see cref="T:System.Boolean" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Object,System.Boolean)">
      <summary>将指定的 <see cref="T:System.Object" /> 值转换为 <see cref="T:System.Boolean" /> 结构，并允许数据丢失（可选）。</summary>
      <returns>转换为 <see cref="T:System.Boolean" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
      <param name="explicitConversion">如果允许数据丢失，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToForInObject(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>将指定值转换为 <see cref="T:System.Object" />，它表示 <see cref="T:Microsoft.JScript.AST" /> 对象的集合。</summary>
      <returns>转换为 <see cref="T:System.Object" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToInt32(System.Object)">
      <summary>将指定值转换为 <see cref="T:System.Int32" />。</summary>
      <returns>转换为 <see cref="T:System.Int32" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNativeArray(System.Object,System.RuntimeTypeHandle)">
      <summary>将指定的 <see cref="T:Microsoft.JScript.ArrayObject" /> 转换为类型化 <see cref="T:System.Array" />。</summary>
      <returns>转换为 <see cref="T:System.Array" />（如果可能）的 <paramref name="value" />；否则为 <paramref name="value" />。</returns>
      <param name="value">要转换的 <see cref="T:Microsoft.JScript.ArrayObject" />。</param>
      <param name="handle">数组中元素的类型。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNumber(System.Object)">
      <summary>将指定的 <see cref="T:System.Object" /> 转换为 <see cref="T:System.Double" />。</summary>
      <returns>转换为 <see cref="T:System.Double" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNumber(System.String)">
      <summary>将指定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Double" />。</summary>
      <returns>转换为 <see cref="T:System.Double" /> 的 <paramref name="str" />。</returns>
      <param name="str">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToObject(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>将指定值转换为 <see cref="T:System.Object" />。 如果无法执行转换，则引发错误。</summary>
      <returns>转换为 <see cref="T:System.Object" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToObject2(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>将指定值转换为 <see cref="T:System.Object" />。 如果无法执行转换，则返回 null。</summary>
      <returns>转换为 <see cref="T:System.Object" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Boolean)">
      <summary>将指定的 <see cref="T:System.Boolean" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>转换为 <see cref="T:System.String" /> 的 <paramref name="b" />。</returns>
      <param name="b">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Double)">
      <summary>将指定的 <see cref="T:System.Double" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>转换为 <see cref="T:System.String" /> 的 <paramref name="d" />。</returns>
      <param name="d">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Object,System.Boolean)">
      <summary>将指定的 <see cref="T:System.Object" /> 转换为 <see cref="T:System.String" />，并允许数据丢失（可选）。</summary>
      <returns>转换为 <see cref="T:System.String" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
      <param name="explicitOK">如果允许数据丢失，则为 true；否则为 false。</param>
    </member>
    <member name="T:Microsoft.JScript.DateConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.Invoke">
      <summary>返回自 1970 年 1 月 1 日起已经过的毫秒数。</summary>
      <returns>自 1970 年 1 月 1 日起已经过的毫秒数。</returns>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.parse(System.String)">
      <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.Double" />。</summary>
      <returns>一个 <see cref="T:System.Double" />，它等效于 <paramref name="str" /> 中包含的日期和时间。</returns>
      <param name="str">包含要转换的日期和时间的字符串。</param>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
      <summary>将指定日期和时间转换为其等效的 <see cref="T:System.Double" />。</summary>
      <returns>等效于指定日期和时间的 <see cref="T:System.Double" />。</returns>
      <param name="year">要转换的日期和时间的年度。</param>
      <param name="month">要转换的日期和时间的月份。</param>
      <param name="date">要转换的日期和时间的日期。</param>
      <param name="hours">要转换的日期和时间的小时数。</param>
      <param name="minutes">要转换的日期和时间的分钟数。</param>
      <param name="seconds">要转换的日期和时间的秒数。</param>
      <param name="ms">要转换的日期和时间的毫秒数。</param>
    </member>
    <member name="T:Microsoft.JScript.DateObject">
      <summary>表示一个日期对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="T:Microsoft.JScript.DatePrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.DateObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.DatePrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getDate(System.Object)">
      <summary>获取指定 <see cref="T:Microsoft.JScript.DateObject" /> 的日期值。</summary>
      <returns>
        <paramref name="thisob" /> 的日期值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getDay(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的星期值。</summary>
      <returns>
        <paramref name="thisob" /> 的星期值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的年份值。</summary>
      <returns>
        <paramref name="thisob" /> 的年份值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getHours(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的小时值。</summary>
      <returns>
        <paramref name="thisob" /> 的小时值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的毫秒值。</summary>
      <returns>
        <paramref name="thisob" /> 的毫秒值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的分钟值。</summary>
      <returns>
        <paramref name="thisob" /> 的分钟值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的月份值。</summary>
      <returns>
        <paramref name="thisob" /> 的月份值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的秒钟值。</summary>
      <returns>
        <paramref name="thisob" /> 的秒钟值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getTime(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的时间值。</summary>
      <returns>
        <paramref name="thisob" /> 的时间值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)">
      <summary>获取指定的 <see cref="T:Microsoft.JScript.DateObject" /> 与协调世界时 (UTC) 之间的偏移量。</summary>
      <returns>
        <paramref name="thisob" /> 与协调世界时 (UTC) 之间的差值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的日期值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的日期值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的星期值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的星期值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的年份值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的年份值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的小时值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的小时值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的毫秒值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的毫秒值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的分钟值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的分钟值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的月份值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的月份值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的秒钟值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的秒钟值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式返回指定的 <see cref="T:Microsoft.JScript.DateObject" />。</summary>
      <returns>
        <paramref name="thisob" /> 的值，以 <see cref="T:System.DateTime" /> 对象形式表示。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getYear(System.Object)">
      <summary>获取以协调世界时 (UTC) 表示的指定 <see cref="T:Microsoft.JScript.DateObject" /> 的年份值。</summary>
      <returns>以 UTC 表示的 <paramref name="thisob" /> 的年份值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的日期值设置为指定的日期值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="ddate">要为 <paramref name="thisob" /> 设置的日期值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的年份值设置为指定的年份值。</summary>
      <returns>为 <paramref name="thisob" /> 设置的年份值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dyear">要为 <paramref name="thisob" /> 设置的年份值。</param>
      <param name="month">要为 <paramref name="thisob" /> 设置的月份值。</param>
      <param name="date">要为 <paramref name="thisob" /> 设置的日期值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的小时值设置为指定的小时值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dhour">要为 <paramref name="thisob" /> 设置的小时值。</param>
      <param name="min">要为 <paramref name="thisob" /> 设置的分钟值。</param>
      <param name="sec">要为 <paramref name="thisob" /> 设置的秒钟值。</param>
      <param name="msec">要为 <paramref name="thisob" /> 设置的毫秒值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的毫秒值设置为指定的毫秒值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dmsec">要为 <paramref name="thisob" /> 设置的毫秒值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的分钟值设置为指定的分钟值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dmin">要为 <paramref name="thisob" /> 设置的分钟值。</param>
      <param name="sec">要为 <paramref name="thisob" /> 设置的秒钟值。</param>
      <param name="msec">要为 <paramref name="thisob" /> 设置的毫秒值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的月份值设置为指定的月份值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dmonth">要为 <paramref name="thisob" /> 设置的月份值。</param>
      <param name="date">要为 <paramref name="thisob" /> 设置的日期值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的秒钟值设置为指定的秒钟值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dsec">要为 <paramref name="thisob" /> 设置的秒钟值。</param>
      <param name="msec">要为 <paramref name="thisob" /> 设置的毫秒值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的时间值设置为指定的时间值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="time">要为 <paramref name="thisob" /> 设置的时间值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的日期值设置为以协调世界时 (UTC) 表示的指定日期值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值（以 UTC 表示）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="ddate">要为 <paramref name="thisob" /> 设置的日期值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的年份值设置为以协调世界时 (UTC) 表示的指定年份值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值（以 UTC 表示）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dyear">要为 <paramref name="thisob" /> 设置的年份值。</param>
      <param name="month">要为 <paramref name="thisob" /> 设置的月份值。</param>
      <param name="date">要为 <paramref name="thisob" /> 设置的日期值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的小时值设置为以协调世界时 (UTC) 表示的指定小时值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值（以 UTC 表示）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dhour">要为 <paramref name="thisob" /> 设置的小时值。</param>
      <param name="min">要为 <paramref name="thisob" /> 设置的分钟值。</param>
      <param name="sec">要为 <paramref name="thisob" /> 设置的秒钟值。</param>
      <param name="msec">要为 <paramref name="thisob" /> 设置的毫秒值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的毫秒值设置为以协调世界时 (UTC) 表示的指定毫秒值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值（以 UTC 表示）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dmsec">要为 <paramref name="thisob" /> 设置的毫秒值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的分钟值设置为以协调世界时 (UTC) 表示的指定分钟值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值（以 UTC 表示）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dmin">要为 <paramref name="thisob" /> 设置的分钟值。</param>
      <param name="sec">要为 <paramref name="thisob" /> 设置的秒钟值。</param>
      <param name="msec">要为 <paramref name="thisob" /> 设置的毫秒值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的月份值设置为以协调世界时 (UTC) 表示的指定月份值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值（以 UTC 表示）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dmonth">要为 <paramref name="thisob" /> 设置的月份值。</param>
      <param name="date">要为 <paramref name="thisob" /> 设置的日期值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的秒钟值设置为以协调世界时 (UTC) 表示的指定秒钟值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值（以 UTC 表示）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dsec">要为 <paramref name="thisob" /> 设置的秒钟值。</param>
      <param name="msec">要为 <paramref name="thisob" /> 设置的毫秒值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)">
      <summary>将 <see cref="T:Microsoft.JScript.DateObject" /> 的年份值设置为指定的年份值。</summary>
      <returns>设置该值后 <paramref name="thisob" /> 的新值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dyear">要为 <paramref name="thisob" /> 设置的年份值。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)">
      <summary>创建指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的字符串表示形式，其中包含星期几、月份、日期和年份。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)">
      <summary>创建指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的字符串表示形式，其中包含以协调世界时 (UTC) 表示的星期几、月份、日期、年份和时间。 如有可能，请改用 <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" />。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)">
      <summary>创建指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的字符串表示形式，其中包含日期但不包含时间。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)">
      <summary>创建指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的字符串表示形式，其中包含日期和时间。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)">
      <summary>创建指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的字符串表示形式，其中包含时间但不包含日期。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toString(System.Object)">
      <summary>创建指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的字符串表示形式，其中包含星期几、月份、日期、时间、时区和年份。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)">
      <summary>创建指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的字符串表示形式，其中包含时间和时区。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)">
      <summary>创建指定的 <see cref="T:Microsoft.JScript.DateObject" /> 的字符串表示形式，其中包含以协调世界时 (UTC) 表示的星期几、月份、日期、年份和时间。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)">
      <summary>返回指定 <see cref="T:Microsoft.JScript.DateObject" /> 的值。</summary>
      <returns>
        <paramref name="thisob" /> 的值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.DebugBreak">
      <summary>JScript 分析器使用此类在调试器中表示断点。</summary>
    </member>
    <member name="T:Microsoft.JScript.DebugConvert">
      <summary>将数据从一种类型转换为另一种类型。 包括用于将值转换为 <see cref="T:System.String" /> 对象（以使调试器可以显示它们）的方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.DebugConvert" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.BooleanToString(System.Boolean)">
      <summary>将指定的 <see cref="T:System.Boolean" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>字符串“true”或字符串“false”。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.ByteToString(System.Byte,System.Int32)">
      <summary>将指定的 <see cref="T:System.Byte" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DecimalToString(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DoubleToDateString(System.Double)">
      <summary>创建指定 <see cref="T:System.Double" /> 的字符串表示形式。 字符串表示形式包含星期几、月份、日期、时间、时区和年份。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DoubleToString(System.Double)">
      <summary>将指定的 <see cref="T:System.Double" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetErrorMessageForHR(System.Int32,Microsoft.JScript.Vsa.IJSVsaEngine)">
      <summary>获取一条错误消息，该消息是通过指定的 <see cref="P:System.Exception.HResult" /> 以及指定的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" /> 的 <see cref="T:System.Globalization.CultureInfo" /> 创建的。</summary>
      <returns>包含错误信息的本地化字符串。</returns>
      <param name="hr">HRESULT 错误代码。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedCharObject(System.UInt16)">
      <summary>创建一个具有指定的基元 <see cref="T:System.Char" /> 值的托管对象。</summary>
      <returns>先转换为 <see cref="T:System.Char" />，接着再转换为 <see cref="T:System.Object" /> 的 <paramref name="i" />。</returns>
      <param name="i">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedInt64Object(System.Int64)">
      <summary>创建一个具有指定的基元 <see cref="T:System.Int64" /> 值的托管对象。</summary>
      <returns>转换为 <see cref="T:System.Object" /> 的 <paramref name="i" />。</returns>
      <param name="i">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedObject(System.Object)">
      <summary>创建一个具有指定的基元值的托管对象。</summary>
      <returns>转换为托管的 <see cref="T:System.Object" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedUInt64Object(System.UInt64)">
      <summary>创建一个具有指定的基元 <see cref="T:System.UInt64" /> 值的托管对象。</summary>
      <returns>转换为 <see cref="T:System.Object" /> 的 <paramref name="i" />。</returns>
      <param name="i">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int16ToString(System.Int16,System.Int32)">
      <summary>将指定的 <see cref="T:System.Int16" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int32ToString(System.Int32,System.Int32)">
      <summary>将指定的 <see cref="T:System.Int32" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int64ToString(System.Int64,System.Int32)">
      <summary>将指定的 <see cref="T:System.Int64" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.RegexpToString(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>将指定的正则表达式信息转换为 <see cref="T:System.String" />。</summary>
      <returns>正则表达式信息的字符串表示形式。</returns>
      <param name="source">要匹配的正则表达式模式。</param>
      <param name="ignoreCase">如果使用不区分大小写的匹配，则为 true；否则为 false。</param>
      <param name="global">如果使用全局匹配，则为 true；否则为 false。</param>
      <param name="multiline">如果使用多行匹配，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.SByteToString(System.SByte,System.Int32)">
      <summary>将指定的 <see cref="T:System.SByte" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.SingleToString(System.Single)">
      <summary>将指定的 <see cref="T:System.Single" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.StringToPrintable(System.String)">
      <summary>将指定的 <see cref="T:System.String" /> 转换为包含不可打印字符的转义符的 <see cref="T:System.String" />。</summary>
      <returns>包含转义符的 <paramref name="source" /> 的字符串表示形式。</returns>
      <param name="source">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.ToPrimitive(System.Object,System.TypeCode,System.Boolean)">
      <summary>将指定值转换为指定的 <see cref="T:System.TypeCode" />，并允许数据丢失（可选）。</summary>
      <returns>转换为 <paramref name="typeCode" /> 类型的 <paramref name="value" />。</returns>
      <param name="value">要转换为新类型的值。</param>
      <param name="typeCode">
        <paramref name="value" /> 所要转换到的类型。</param>
      <param name="truncationPermitted">如果允许数据丢失，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt16ToString(System.UInt16,System.Int32)">
      <summary>将指定的 <see cref="T:System.UInt16" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt32ToString(System.UInt32,System.Int32)">
      <summary>将指定的 <see cref="T:System.UInt32" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt64ToString(System.UInt64,System.Int32)">
      <summary>将指定的 <see cref="T:System.UInt64" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="T:Microsoft.JScript.DocumentContext">
      <summary>表示用 JScript 语言编写的源代码文件。</summary>
    </member>
    <member name="T:Microsoft.JScript.DynamicFieldInfo">
      <summary>表示字段信息。 此类用于将 expando 类和脚本数组的字段返回给调试器。</summary>
    </member>
    <member name="M:Microsoft.JScript.DynamicFieldInfo.#ctor(System.String,System.Object)">
      <summary>使用指定的名称和值初始化 <see cref="T:Microsoft.JScript.DynamicFieldInfo" /> 类的新实例。</summary>
      <param name="name">字段名。</param>
      <param name="value">字段的值。</param>
    </member>
    <member name="M:Microsoft.JScript.DynamicFieldInfo.#ctor(System.String,System.Object,System.String)">
      <summary>使用指定的名称、值和类型初始化 <see cref="T:Microsoft.JScript.DynamicFieldInfo" /> 类的新实例。</summary>
      <param name="name">字段名。</param>
      <param name="value">字段的值。</param>
      <param name="fieldTypeName">字段的类型。</param>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.fieldTypeName">
      <summary>字段的类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.name">
      <summary>字段名。</summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.value">
      <summary>字段的值。</summary>
    </member>
    <member name="T:Microsoft.JScript.Empty">
      <summary>表示尚未实例化的变量的值。</summary>
    </member>
    <member name="F:Microsoft.JScript.Empty.Value">
      <summary>指定尚未实例化的变量的值。</summary>
    </member>
    <member name="T:Microsoft.JScript.EndOfFile">
      <summary>JScript 分析器使用此类以异常的形式表示到达文件结尾。 代码可引发此错误来停止分析器。</summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorConstructor.Invoke">
      <summary>在所有情况下均返回 null。</summary>
      <returns>null。</returns>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorObject">
      <summary>表示枚举数对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.EnumeratorObject.enumerator">
      <summary>包含由 <see cref="T:Microsoft.JScript.EnumeratorObject" /> 类表示的枚举数。</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorObject.LoadObject">
      <summary>使枚举数前进到集合的下一个元素，并存储对集合的当前元素的引用。</summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.EnumeratorObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)">
      <summary>确定枚举数是否传递了集合的最后一项。</summary>
      <returns>如果枚举数传递了集合的最后一项，则为 true；否则为 false。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="P:Microsoft.JScript.EnumeratorPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)">
      <summary>将枚举数移到其初始位置，该位置位于集合中第一个元素之前。</summary>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.Equality">
      <summary>执行比较运算。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Equality.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.JScript.Equality" /> 类的新实例。</summary>
      <param name="operatorTok">
        <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。 指定要执行的比较。</param>
    </member>
    <member name="M:Microsoft.JScript.Equality.EvaluateEquality(System.Object,System.Object)">
      <summary>执行比较运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="M:Microsoft.JScript.Equality.JScriptEquals(System.Object,System.Object)">
      <summary>执行比较运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.ErrorConstructor.Invoke(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorObject">
      <summary>表示一个错误对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.description">
      <summary>指定解释错误原因的消息。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.message">
      <summary>指定解释错误原因的消息。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.number">
      <summary>指定错误号或错误代码。</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorObject.op_Explicit(Microsoft.JScript.ErrorObject)~System.Exception">
      <summary>将 <see cref="T:Microsoft.JScript.ErrorObject" /> 显式转换为 <see cref="T:System.Exception" />。</summary>
      <returns>转换后的 <see cref="T:Microsoft.JScript.ErrorObject" />。</returns>
      <param name="err">要转换的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ErrorObject.ToException(Microsoft.JScript.ErrorObject)">
      <summary>将 <see cref="T:Microsoft.JScript.ErrorObject" /> 隐式转换为 <see cref="T:System.Exception" />。</summary>
      <returns>转换后的 <see cref="T:Microsoft.JScript.ErrorObject" />。</returns>
      <param name="err">要转换的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.ErrorObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.ErrorPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="F:Microsoft.JScript.ErrorPrototype.name">
      <summary>指定错误类型的名称。 可能的值包括 Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError 和 URIError。</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)">
      <summary>创建指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式，其中包含错误对象类型的名称以及错误消息（如果有）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorType">
      <summary>指定 JScript 错误类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.EvalError">
      <summary>eval 方法 (Visual Studio - JScript) 错误。 对应于 <see cref="T:Microsoft.JScript.EvalErrorObject" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.OtherError">
      <summary>不是其他错误类型之一的任何错误。 这是默认值。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.RangeError">
      <summary>范围错误。 对应于 <see cref="T:Microsoft.JScript.RangeErrorObject" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.ReferenceError">
      <summary>引用错误。 对应于 <see cref="T:Microsoft.JScript.ReferenceErrorObject" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.SyntaxError">
      <summary>语法错误。 对应于 <see cref="T:Microsoft.JScript.SyntaxErrorObject" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.TypeError">
      <summary>类型错误。 对应于 <see cref="T:Microsoft.JScript.TypeErrorObject" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.URIError">
      <summary>统一资源标识符 (URI) 错误。 对应于 <see cref="T:Microsoft.JScript.URIErrorObject" /> 对象。</summary>
    </member>
    <member name="T:Microsoft.JScript.Eval">
      <summary>计算 JScript 代码。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Eval.JScriptEvaluate(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>使用指定的引擎计算指定的 JScript 代码。</summary>
      <returns>计算的结果。 如果 <paramref name="source" /> 不是字符串，则返回值为 <paramref name="source" />。</returns>
      <param name="source">要计算的代码。</param>
      <param name="engine">对用于计算 <paramref name="source" /> 的脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.Eval.JScriptEvaluate(System.Object,System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>使用指定的引擎和安全选项计算指定的 JScript 代码。</summary>
      <returns>计算的结果。 如果 <paramref name="source" /> 不是字符串，则返回值为 <paramref name="source" />。</returns>
      <param name="source">要计算的代码。</param>
      <param name="unsafeOption">如果要启用不安全的计算，则为字符串 unsafe；否则为 false。</param>
      <param name="engine">对用于计算 <paramref name="source" /> 的脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.EvalErrorObject">
      <summary>表示在使用 eval 方法时发生的错误。 有关详细信息，请参阅 eval 方法 (Visual Studio - JScript)。</summary>
    </member>
    <member name="T:Microsoft.JScript.Expando">
      <summary>指示某个类或方法是 expando 类或方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.Expando.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.Expando" /> 特性类的新实例。</summary>
    </member>
    <member name="T:Microsoft.JScript.FieldAccessor">
      <summary>表示字段访问器。</summary>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.FieldAccessor" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.GetValue(System.Object)">
      <summary>在派生类中重写时，获取指定对象的字段值。</summary>
      <returns>
        <paramref name="thisob" /> 的字段值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.SetValue(System.Object,System.Object)">
      <summary>在派生类中重写时，设置指定对象的指定字段值。</summary>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="value">要为字段设置的值。</param>
    </member>
    <member name="T:Microsoft.JScript.ForIn">
      <summary>表示 JScript for...in 语句。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.ForIn.JScriptGetEnumerator(System.Object)">
      <summary>返回一个循环访问指定集合的枚举数。</summary>
      <returns>一个枚举数，用于循环访问 <paramref name="coll" />。</returns>
      <param name="coll">要为其获取枚举数的集合。</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.FunctionConstructor.Invoke(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionDeclaration">
      <summary>表示一个函数声明。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionDeclaration.JScriptFunctionDeclaration(System.RuntimeTypeHandle,System.String,System.String,System.String[],Microsoft.JScript.JSLocalField[],System.Boolean,System.Boolean,System.String,System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>使用指定信息创建一个新的结束函数。</summary>
      <returns>一个表示函数声明的新结束函数。</returns>
      <param name="handle">函数类型的句柄。</param>
      <param name="name">函数名。</param>
      <param name="method_name">函数名。</param>
      <param name="formal_parameters">函数的参数。</param>
      <param name="fields">函数的字段。</param>
      <param name="must_save_stack_locals">如果为 true，则保存局部堆栈变量。 这一点对于访问其中一个局部变量的嵌套函数或 eval 语句而言非常重要。</param>
      <param name="hasArgumentsObject">如果函数具有参数数组，则为 true。</param>
      <param name="text">函数声明的文本。</param>
      <param name="declaringObject">获取用于声明此方法的类型。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionExpression">
      <summary>表示一个函数对象。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionExpression.JScriptFunctionExpression(System.RuntimeTypeHandle,System.String,System.String,System.String[],Microsoft.JScript.JSLocalField[],System.Boolean,System.Boolean,System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>使用指定信息创建一个新的函数对象。</summary>
      <returns>一个新的函数对象。</returns>
      <param name="handle">函数类型的句柄。</param>
      <param name="name">函数名。</param>
      <param name="method_name">函数名。</param>
      <param name="formal_params">函数的参数。</param>
      <param name="fields">函数的字段。</param>
      <param name="must_save_stack_locals">如果为 true，则保存局部堆栈变量。 这一点对于访问其中一个局部变量的嵌套函数或 eval 语句而言非常重要。</param>
      <param name="hasArgumentsObject">如果函数具有参数数组，则为 true。</param>
      <param name="text">函数声明的文本。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionObject">
      <summary>表示一个函数对象。</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionObject.ToString">
      <summary>返回此函数对象的字符串表示形式。</summary>
      <returns>此函数对象的字符串表示形式，其中包含函数的文本。</returns>
    </member>
    <member name="T:Microsoft.JScript.FunctionPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.FunctionObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)">
      <summary>调用此对象所表示的函数，同时将指定参数对象转换为参数的数组（如有必要）。</summary>
      <returns>对此对象所表示函数的调用的返回值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="thisarg">当前默认范围。 with 语句范围包含的对象，或全局范围。</param>
      <param name="argArray">要以 <see cref="T:Microsoft.JScript.ArgumentsObject" /> 或 <see cref="T:Microsoft.JScript.ArrayObject" /> 形式传递给函数的参数。</param>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])">
      <summary>调用此对象表示的函数。</summary>
      <returns>对此对象所表示函数的调用的返回值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="thisarg">当前默认范围。 with 语句范围包含的对象，或全局范围。</param>
      <param name="args">要以数组形式传递给函数的参数。</param>
    </member>
    <member name="P:Microsoft.JScript.FunctionPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)">
      <summary>创建指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式，其中包含函数的名称。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionWrapper">
      <summary>将函数成员绑定到对象。</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionWrapper.ToString">
      <summary>创建函数的字符串表示形式。</summary>
      <returns>包含函数源、函数成员和函数名称的函数的字符串表示形式。</returns>
    </member>
    <member name="T:Microsoft.JScript.GlobalObject">
      <summary>存储常量、数据类型信息、实用工具函数以及对基于原型的对象的引用。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ActiveXObject">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Array">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.boolean">
      <summary>获取对应于 JScript boolean 数据类型的托管类型。</summary>
      <returns>对应于 JScript boolean 数据类型的托管类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Boolean">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.byte">
      <summary>获取对应于 JScript byte 数据类型的托管类型。</summary>
      <returns>对应于 JScript byte 数据类型的托管类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.char">
      <summary>获取对应于 JScript char 数据类型的托管类型。</summary>
      <returns>对应于 JScript char 数据类型的托管类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.CollectGarbage">
      <summary>调用垃圾回收器。</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Date">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.DateConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.DateConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.decimal">
      <summary>获取对应于 JScript decimal 数据类型的托管类型。</summary>
      <returns>对应于 JScript decimal 数据类型的托管类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)">
      <summary>对指定的统一资源标识符 (URI) 进行解码（考虑保留字符）。</summary>
      <returns>
        <paramref name="encodedURI" /> 的已解码版本。</returns>
      <param name="encodedURI">要解码的 URI。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)">
      <summary>对指定的统一资源标识符 (URI) 进行解码。</summary>
      <returns>
        <paramref name="encodedURI" /> 的已解码版本。</returns>
      <param name="encodedURI">要解码的 URI。</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.double">
      <summary>获取对应于 JScript double 数据类型的托管类型。</summary>
      <returns>对应于 JScript double 数据类型的托管类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)">
      <summary>对指定的统一资源标识符 (URI) 进行编码（考虑保留字符）。</summary>
      <returns>
        <paramref name="uri" /> 的已编码版本。</returns>
      <param name="uri">要进行编码的 URI。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)">
      <summary>对指定的统一资源标识符 (URI) 进行编码。</summary>
      <returns>
        <paramref name="uriComponent" /> 的已编码版本。</returns>
      <param name="uriComponent">要进行编码的 URI。</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Enumerator">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Error">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.escape(System.Object)">
      <summary>转换指定的字符串，以使用 % 字符对保留字符（@、*、_、+、-、. 和 /）进行转义，并以 Unicode 表示法表示它们。</summary>
      <returns>其中的保留字符通过 % 字符进行转义并以 Unicode 表示法表示的 <paramref name="string" /> 的新副本。</returns>
      <param name="string">要转换的字符串。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.eval(System.Object)">
      <summary>在所有情况下均引发 <see cref="F:Microsoft.JScript.JSError.IllegalEval" /> 异常。</summary>
      <returns>在所有情况下均引发 <see cref="F:Microsoft.JScript.JSError.IllegalEval" /> 异常。</returns>
      <param name="x">要计算的表达式。</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.EvalError">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.float">
      <summary>获取对应于 JScript float 数据类型的托管类型。</summary>
      <returns>对应于 JScript float 数据类型的托管类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Function">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)">
      <summary>使用名字对象或 ProgID 通过非托管对象创建托管对象。</summary>
      <returns>托管对象。</returns>
      <param name="moniker">对象的名字对象。</param>
      <param name="progId">对象的 ProgID。</param>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.Infinity">
      <summary>表示正无穷。 此字段为常数。</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.int">
      <summary>获取对应于 JScript int 数据类型的托管类型。</summary>
      <returns>对应于 JScript int 数据类型的托管类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)">
      <summary>确定指定的数字是否表示无穷大。</summary>
      <returns>如果 <paramref name="number" /> 不是 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 和 <see cref="F:System.Double.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="number">要检查的数字。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)">
      <summary>确定指定的数字是否可以转换为 JScript 数字。</summary>
      <returns>如果 <paramref name="num" /> 可以转换为 JScript 数字，则为 true；否则为 false。</returns>
      <param name="num">要检查的数字。</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.long">
      <summary>获取对应于 JScript long 数据类型的托管类型。</summary>
      <returns>对应于 JScript long 数据类型的托管类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Math">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.MathObject" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.MathObject" /> 对象的引用。</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.NaN">
      <summary>表示不是数字 (NaN) 的值。 此字段为常数。</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Number">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Object">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象的引用。</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalActiveXObjectField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalArrayField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalBooleanField">
      <summary>存储对 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalDateField">
      <summary>存储对 <see cref="T:Microsoft.JScript.DateConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalEnumeratorField">
      <summary>存储对 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalErrorField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalEvalErrorField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalFunctionField">
      <summary>存储对 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalNumberField">
      <summary>存储对 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalObjectField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalObjectPrototypeField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalRangeErrorField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalReferenceErrorField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalRegExpField">
      <summary>存储对 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalStringField">
      <summary>存储对 <see cref="T:Microsoft.JScript.StringConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalSyntaxErrorField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalTypeErrorField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalURIErrorField">
      <summary>存储对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalVBArrayField">
      <summary>存储对 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象的引用。</summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)">
      <summary>将指定的字符串转换为其 <see cref="T:System.Double" /> 等效项。</summary>
      <returns>一个值，它与 <paramref name="string" /> 中包含的值相等。</returns>
      <param name="string">要转换的字符串。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)">
      <summary>使用指定的基数将指定的字符串转换为其 <see cref="T:System.Double" /> 等效项。</summary>
      <returns>一个值，它与 <paramref name="string" /> 中包含的值相等。</returns>
      <param name="string">要转换的字符串。</param>
      <param name="radix">一个介于 2 和 36 之间的数字，该数字描述表示 <paramref name="string" /> 所采用的数字系统的基数。 默认值为 10。</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.RangeError">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ReferenceError">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.RegExp">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.sbyte">
      <summary>获取对应于 JScript sbyte 数据类型的托管类型。</summary>
      <returns>对应于 JScript sbyte 数据类型的托管类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngine">
      <summary>获取脚本引擎的名称。</summary>
      <returns>字符串“JScript”。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion">
      <summary>获取脚本引擎的生成号。</summary>
      <returns>脚本引擎的生成号。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion">
      <summary>获取脚本引擎的主要版本号。</summary>
      <returns>脚本引擎的主要版本号。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion">
      <summary>获取脚本引擎的次要版本号。</summary>
      <returns>脚本引擎的次要版本号。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.short">
      <summary>获取对应于 JScript short 数据类型的托管类型。</summary>
      <returns>对应于 JScript short 数据类型的托管类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.String">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.StringConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.StringConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.SyntaxError">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.TypeError">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.uint">
      <summary>获取对应于 JScript uint 数据类型的托管类型。</summary>
      <returns>对应于 JScript uint 数据类型的托管类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ulong">
      <summary>获取对应于 JScript ulong 数据类型的托管类型。</summary>
      <returns>对应于 JScript ulong 数据类型的托管类型。</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.undefined">
      <summary>表示为 null 的值。</summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.unescape(System.Object)">
      <summary>将指定字符串中 % 的已转义字符（@、*、_、+、-、. 和 /）转换成其原始格式。 已转义字符以 Unicode 表示法表示。</summary>
      <returns>其中的已转义字符转换为其原始格式的 <paramref name="string" /> 的新副本。</returns>
      <param name="string">要转换的字符串。</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.URIError">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。 该对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ushort">
      <summary>获取对应于 JScript ushort 数据类型的托管类型。</summary>
      <returns>对应于 JScript ushort 数据类型的托管类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.VBArray">
      <summary>获取一个对 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象的引用。</summary>
      <returns>一个对 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.void">
      <summary>获取与未返回值的函数的返回值对应的托管类型。</summary>
      <returns>与未返回值的函数的返回值对应的托管类型。</returns>
    </member>
    <member name="T:Microsoft.JScript.Globals">
      <summary>存储对所有全局可用类型的引用，并管理堆栈。 此类属于编译和运行时状态类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Globals.ConstructArray(System.Object[])">
      <summary>提供对 <see cref="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])" /> 方法的全局访问。</summary>
      <returns>JScript <see cref="T:Microsoft.JScript.ArrayObject" /> 的新实例。</returns>
      <param name="args">用于填充数组的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Globals.ConstructArrayLiteral(System.Object[])">
      <summary>提供对 <see cref="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])" /> 方法的全局访问。</summary>
      <returns>JScript <see cref="T:Microsoft.JScript.ArrayObject" /> 的新实例。</returns>
      <param name="args">用于填充数组的值。</param>
    </member>
    <member name="F:Microsoft.JScript.Globals.contextEngine">
      <summary>存储对单一脚本引擎的全局引用，该引擎在当前上下文中运行。</summary>
    </member>
    <member name="T:Microsoft.JScript.GlobalScope">
      <summary>表示全局范围。</summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.#ctor(Microsoft.JScript.GlobalScope,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>初始化 <see cref="T:Microsoft.JScript.GlobalScope" /> 类的新实例。</summary>
      <param name="parent">对父对象的引用。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.AddField(System.String)">
      <summary>将指定字段添加到全局范围。</summary>
      <returns>新字段（如果已成功添加）。</returns>
      <param name="name">要添加的字段的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetDefaultThisObject">
      <summary>获取当前默认范围，该范围是 with 语句范围包含的对象，或是全局范围。</summary>
      <returns>此对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetField(System.String,System.Int32)">
      <summary>通过搜索范围层次结构来获取具有指定名称的字段。 此方法只搜索由词法级别指定的范围。</summary>
      <returns>具有指定名称的字段。</returns>
      <param name="name">要搜索的字段的名称。</param>
      <param name="lexLevel">要搜索的词法级别。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetFields(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.FieldInfo" /> 对象的数组，这些对象对应于全局范围的所有字段。</summary>
      <returns>对象的数组，其中包含全局范围的所有字段。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetGlobalScope">
      <summary>通过返回对此对象的引用而获取全局范围。</summary>
      <returns>此对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetLocalField(System.String)">
      <summary>获取具有指定名称的字段的局部声明。 在编译时使用此声明来进行错误检查。</summary>
      <returns>字段的局部声明。</returns>
      <param name="name">字段名。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于与指定名称匹配的所有成员。</summary>
      <returns>与 <paramref name="name" /> 参数匹配的对象的数组。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMembers(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于全局范围的所有成员。</summary>
      <returns>对象的数组，其中包含全局范围的所有成员。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMethods(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象对应于全局范围的所有方法。</summary>
      <returns>对象的数组，其中包含全局范围的所有方法。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetProperties(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.PropertyInfo" /> 对象的数组，这些对象对应于全局范围的所有属性。</summary>
      <returns>对象的数组，其中包含全局范围的所有属性。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)">
      <summary>将指定方法添加到全局范围。 此方法未在 JScript 中实现。</summary>
      <returns>在所有情况下均为 null。</returns>
      <param name="name">要添加的方法的名称。</param>
      <param name="method">该方法的委托。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)">
      <summary>将指定属性添加到全局范围。 此方法未在 JScript 中实现。</summary>
      <returns>在所有情况下均为 null。</returns>
      <param name="name">要添加的属性的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)">
      <summary>从全局范围中移除指定的成员。</summary>
      <param name="m">要移除的成员的名称。</param>
    </member>
    <member name="T:Microsoft.JScript.Hide">
      <summary>指示方法或字段隐藏基类中的方法或字段。</summary>
    </member>
    <member name="M:Microsoft.JScript.Hide.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.Hide" /> 特性类的新实例。</summary>
    </member>
    <member name="T:Microsoft.JScript.IActivationObject">
      <summary>定义用于解析范围的方法。 此接口由参与范围层次结构的所有对象实现。</summary>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetDefaultThisObject">
      <summary>在类中实现时，获取当前默认范围。 with 语句范围包含的对象，或全局范围。</summary>
      <returns>当前默认范围。</returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetField(System.String,System.Int32)">
      <summary>在类中实现时，通过搜索范围层次结构返回具有指定名称的字段。 此方法只搜索由词法级别指定的范围。</summary>
      <returns>具有指定名称的 <see cref="T:System.Reflection.FieldInfo" /> 对象。</returns>
      <param name="name">要搜索的字段的名称。</param>
      <param name="lexLevel">要搜索的词法级别。</param>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetGlobalScope">
      <summary>在类中实现时，通过以下方法来获取全局范围：搜索范围层次结构，直至找到一个包括静态变量的范围（例如模块范围）为止。</summary>
      <returns>全局范围。</returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetLocalField(System.String)">
      <summary>在类中实现时，获取具有指定名称的字段的局部声明。 在编译时使用此声明来进行错误检查。</summary>
      <returns>字段的局部声明。</returns>
      <param name="name">字段名。</param>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetMemberValue(System.String,System.Int32)">
      <summary>在类中实现时，通过搜索范围层次结构来获取指定成员的值。 此方法只搜索由词法级别指定的范围。</summary>
      <returns>成员 <paramref name="name" /> 的值。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="lexlevel">要搜索的词法级别。</param>
    </member>
    <member name="T:Microsoft.JScript.IAuthorServices">
      <summary>定义用于在编辑器中创作 JScript 代码的服务。</summary>
    </member>
    <member name="M:Microsoft.JScript.IAuthorServices.GetCodeSense">
      <summary>在类中实现时，获取一个在编辑器中创作 JScript 代码时用于向文本中添加 IntelliSense 的对象。</summary>
      <returns>用于向文本中添加 IntelliSense 的对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.IAuthorServices.GetColorizer">
      <summary>在类中实现时，获取一个在编辑器中创作 JScript 代码时用于为文本着色的对象。</summary>
      <returns>用于为文本着色的对象。</returns>
    </member>
    <member name="T:Microsoft.JScript.IColorizeText">
      <summary>定义在编辑器中创作 JScript 代码时用于对文本着色的服务。</summary>
    </member>
    <member name="M:Microsoft.JScript.IColorizeText.Colorize(System.String,Microsoft.JScript.SourceState)">
      <summary>在类中实现时，扫描指定源代码以查找各个代码单元，并确定每个代码单元应具有的颜色。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象的枚举，表示要着色的代码单元。</returns>
      <param name="sourceCode">要着色的源代码。</param>
      <param name="state">源代码的当前状态（正常、注释、字符串）。</param>
    </member>
    <member name="M:Microsoft.JScript.IColorizeText.GetStateForText(System.String,Microsoft.JScript.SourceState)">
      <summary>在类中实现时，扫描指定源代码以查找各个代码单元，并确定指定代码的状态（正常、注释、字符串）。</summary>
      <returns>源代码的状态。</returns>
      <param name="sourceCode">要分析的源代码。</param>
      <param name="currentState">源代码的当前状态（正常、注释、字符串）。</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugConvert">
      <summary>定义将数据从一种类型转换为另一种类型的一组实用工具方法。 包括用于将值转换为 <see cref="T:System.String" /> 对象（以使调试器可以显示它们）的方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.BooleanToString(System.Boolean)">
      <summary>在类中实现时，将指定的 <see cref="T:System.Boolean" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>字符串“true”或字符串“false”。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.ByteToString(System.Byte,System.Int32)">
      <summary>在类中实现时，将指定的 <see cref="T:System.Byte" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.DoubleToDateString(System.Double)">
      <summary>在类中实现时，创建指定的 <see cref="T:System.Double" /> 的字符串表示形式。 字符串表示形式包含星期几、月份、日期、时间、时区和年份。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.DoubleToString(System.Double)">
      <summary>在类中实现时，将指定的 <see cref="T:System.Double" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetErrorMessageForHR(System.Int32,Microsoft.JScript.Vsa.IJSVsaEngine)">
      <summary>在类中实现时，获取一条错误消息，该消息是通过指定的 <see cref="P:System.Exception.HResult" /> 以及指定的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" /> 的 <see cref="T:System.Globalization.CultureInfo" /> 创建的。</summary>
      <returns>包含错误信息的本地化字符串。</returns>
      <param name="hr">HRESULT 错误代码。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedCharObject(System.UInt16)">
      <summary>在类中实现时，创建一个具有指定的基元 <see cref="T:System.Char" /> 值的托管对象。</summary>
      <returns>先转换为 <see cref="T:System.Char" />，接着再转换为 <see cref="T:System.Object" /> 的 <paramref name="i" />。</returns>
      <param name="i">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedInt64Object(System.Int64)">
      <summary>在类中实现时，创建一个具有指定的基元 <see cref="T:System.Int64" /> 值的托管对象。</summary>
      <returns>转换为 <see cref="T:System.Object" /> 的 <paramref name="i" />。</returns>
      <param name="i">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedObject(System.Object)">
      <summary>在类中实现时，创建一个具有指定的基元值的托管对象。</summary>
      <returns>转换为托管的 <see cref="T:System.Object" /> 的 <paramref name="value" />。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedUInt64Object(System.UInt64)">
      <summary>在类中实现时，创建一个具有指定的基元 <see cref="T:System.UInt64" /> 值的托管对象。</summary>
      <returns>转换为 <see cref="T:System.Object" /> 的 <paramref name="i" />。</returns>
      <param name="i">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int16ToString(System.Int16,System.Int32)">
      <summary>在类中实现时，将指定的 <see cref="T:System.Int16" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int32ToString(System.Int32,System.Int32)">
      <summary>在类中实现时，将指定的 <see cref="T:System.Int32" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int64ToString(System.Int64,System.Int32)">
      <summary>在类中实现时，将指定的 <see cref="T:System.Int64" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.RegexpToString(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>在类中实现时，将指定的正则表达式信息转换为 <see cref="T:System.String" />。</summary>
      <returns>正则表达式信息的字符串表示形式。</returns>
      <param name="source">要匹配的正则表达式模式。</param>
      <param name="ignoreCase">如果使用不区分大小写的匹配，则为 true；否则为 false。</param>
      <param name="global">如果使用全局匹配，则为 true；否则为 false。</param>
      <param name="multiline">如果使用多行匹配，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.SByteToString(System.SByte,System.Int32)">
      <summary>在类中实现时，将指定的 <see cref="T:System.SByte" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.SingleToString(System.Single)">
      <summary>在类中实现时，将指定的 <see cref="T:System.Single" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.StringToPrintable(System.String)">
      <summary>在类中实现时，将指定的 <see cref="T:System.String" /> 转换为包含不可打印字符的转义符的 <see cref="T:System.String" />。</summary>
      <returns>包含转义符的 <paramref name="source" /> 的字符串表示形式。</returns>
      <param name="source">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.ToPrimitive(System.Object,System.TypeCode,System.Boolean)">
      <summary>在类中实现时，将指定的值转换为指定的 <see cref="T:System.TypeCode" />，并允许数据丢失（可选）。</summary>
      <returns>转换为 <paramref name="typeCode" /> 类型的 <paramref name="value" />。</returns>
      <param name="value">要转换为新类型的值。</param>
      <param name="typeCode">
        <paramref name="value" /> 所要转换到的类型。</param>
      <param name="truncationPermitted">如果允许数据丢失，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt16ToString(System.UInt16,System.Int32)">
      <summary>在类中实现时，将指定的 <see cref="T:System.UInt16" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt32ToString(System.UInt32,System.Int32)">
      <summary>在类中实现时，将指定的 <see cref="T:System.UInt32" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt64ToString(System.UInt64,System.Int32)">
      <summary>在类中实现时，将指定的 <see cref="T:System.UInt64" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <paramref name="radix" /> 为基数的 <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="radix">该返回值的基数。 基数必须是 2、8、10 或 16。</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugConvert2">
      <summary>定义将数据从一种类型转换为另一种类型的实用工具方法。 包括用于将值转换为 <see cref="T:System.String" /> 对象（以使调试器可以显示它们）的方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert2.DecimalToString(System.Decimal)">
      <summary>在类中实现时，将指定的 <see cref="T:System.Decimal" /> 值转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
    </member>
    <member name="T:Microsoft.JScript.IDebuggerObject">
      <summary>定义提供调试器对象相关信息的方法。 此接口由调试器实现的所有 <see cref="T:System.Reflection.IReflect" /> 对象实现。 当前，此接口仅用于标记这些对象，对于脚本引擎同样如此。</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.HasEnumerableMember(System.String)">
      <summary>在类中实现时，确定当前对象是否包含具有指定名称并且可枚举的成员。</summary>
      <returns>如果当前对象具有名为 <paramref name="name" /> 的可枚举成员，则为 true；否则为 false。</returns>
      <param name="name">要搜索的成员的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsCOMObject">
      <summary>在类中实现时，确定当前对象是真正的 COM 对象还是托管对象的代理。</summary>
      <returns>如果当前对象是 COM 对象，则为 true；如果当前对象是托管对象的代理，则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsEqual(Microsoft.JScript.IDebuggerObject)">
      <summary>在类中实现时，确定当前对象是否与指定对象相同。</summary>
      <returns>如果当前对象与 <paramref name="o" /> 相同，则为 true；否则为 false。</returns>
      <param name="o">要测试相等的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsScriptFunction">
      <summary>在类中实现时，确定当前对象是否为托管 JScript 函数的代理。</summary>
      <returns>如果当前对象是托管 JScript 函数的代理，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsScriptObject">
      <summary>在类中实现时，确定当前对象是否为托管 JScript 对象的代理。</summary>
      <returns>如果当前对象是托管 JScript 对象的代理，则为 true；否则为 false。</returns>
    </member>
    <member name="T:Microsoft.JScript.IDebugScriptScope">
      <summary>定义用于设置与全局范围关联的 this 值的方法。 由 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 使用。</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugScriptScope.SetThisValue(System.Object)">
      <summary>在类中实现时，设置与全局范围关联的 this 值。</summary>
      <param name="thisValue">用作全局范围的 this 对象的值。</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugType">
      <summary>定义提供调试器对象相关信息的方法。 此接口由调试器对象实现，这些对象表示调试器目标中的类型。</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugType.HasInstance(System.Object)">
      <summary>在类中实现时，确定指定对象是否为当前类型的实例。</summary>
      <returns>如果 <paramref name="o" /> 是当前类型的实例，则为 true；否则为 false。</returns>
      <param name="o">要测试的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugVsaScriptCodeItem">
      <summary>定义用于计算表达式和分析字符串的方法。 此接口通常由一个对象实现，该对象表示代码块并通常由调试器调用。 此接口提供 IActiveScript 宿主需要的额外功能。</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
      <summary>在类中实现时，计算由代码项表示的块、表达式或语句，并返回值。 它通常由调试器调用，满足其计算表达式（例如在“监视”窗口中）的需要。 对于表达式来说，值是表达式的结果。 对于块和语句，结果表达式是由块或语句计算的最后一个表达式。</summary>
      <returns>返回一个值，该值表示语句、表达式或块的计算。</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
      <summary>在类中实现时，分析字符串并返回分析出的信息。 此方法通常由调试器调用，满足其分析有关断点的信息的需要，该断点表示为 string。 调试器中可能存在用户以“函数名-参数-IL 偏移量”形式键入的断点。 命名的断点字符串可能具有复杂的格式，例如 F.B(C.D[], int, arg : double ) : C.Abc + 123. 。参数列表和 IL 偏移量一样，是可选的。</summary>
      <returns>如果成功地分析了命名的断点，则返回 true；否则返回 false。</returns>
      <param name="input">一个格式良好的命名断点字符串，它提供函数、可选参数列表以及可选 IL 偏移量。</param>
      <param name="functionName">输出参数，它返回从输入字符串分析出的函数名称，或在输入参数格式不良时返回空字符串。</param>
      <param name="nargs">输出参数，它返回可选参数列表中的参数数目。 如果没有参数列表或如果字符串格式不良，则返回零。</param>
      <param name="arguments">输出参数，它返回参数列表中所有参数的类型名称的列表（用空格分隔），或在缺少参数列表或输入字符串格式不良时返回空字符串。</param>
      <param name="returnType">输出参数，它返回一个字符串（该字符串包含在输入中命名的函数的返回类型），或在缺少返回类型或输入字符串格式不良好时返回空字符串。</param>
      <param name="offset">无符号长整型数，它给出输入字符串的 IL 偏移量，或在没有 IL 偏移量或字符串格式不良时给出零。</param>
    </member>
    <member name="T:Microsoft.JScript.IDefineEvent">
      <summary>定义活动脚本宿主需要的额外功能。</summary>
    </member>
    <member name="M:Microsoft.JScript.IDefineEvent.AddEvent(System.String,System.Int32)">
      <summary>由活动脚本宿主用于定义事件。</summary>
      <returns>事件（如果已成功添加）。</returns>
      <param name="code">包含事件的代码。</param>
      <param name="startLine">此代码开始所在的行号。</param>
    </member>
    <member name="T:Microsoft.JScript.IEngine2">
      <summary>定义 IActiveScript 宿主需要的额外功能。 由 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 引擎实现。</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Clone(System.AppDomain)">
      <summary>在类中实现时，创建一个在新应用程序域中运行的新的相同引擎，该引擎具有相同的编译状态和命名项。 这未在 JScript 中实现。</summary>
      <returns>新引擎。</returns>
      <param name="domain">要在其中创建新引擎的应用程序域。</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.CompileEmpty">
      <summary>在类中实现时，触发引擎中所有当前状态的编译。 所有引用、代码项、宿主项和资源都通过编译器运行。</summary>
      <returns>如果编译成功，则为 true，否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.ConnectEvents">
      <summary>在类中实现时，应该通知引擎可以将具有事件的任何已注册事件源连接到任何全局事件处理程序。 这未在 JScript 中实现。</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.DisconnectEvents">
      <summary>在类中实现时，指示引擎从事件处理程序中解除挂钩事件源。 这未在 JScript 中实现。</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetAssembly">
      <summary>在类中实现时，获取编译步骤所生成的已编译程序集。</summary>
      <returns>已编译的程序集。</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetGlobalScope">
      <summary>在类中实现时，获取全局范围对象。</summary>
      <returns>全局范围对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetModule">
      <summary>在类中实现时，从已编译的程序集中获取代码模块。</summary>
      <returns>已编译的程序集中的代码模块。</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.InitVsaEngine(System.String,Microsoft.JScript.Vsa.IJSVsaSite)">
      <summary>在类中实现时，初始化 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />。</summary>
      <param name="rootMoniker">脚本引擎的根名字对象。 有关详细信息，请参阅 <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" />。</param>
      <param name="site">由宿主实现的 <see cref="T:Microsoft.Vsa.IVsaSite" /> 对象，脚本引擎使用此对象与宿主通信。 有关详细信息，请参阅 <see cref="P:Microsoft.Vsa.IVsaEngine.Site" />。</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Interrupt">
      <summary>在类中实现时，在正在运行脚本代码的线程上调用 <see cref="M:System.Threading.Thread.Abort" />。</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.RegisterEventSource(System.String)">
      <summary>在类中实现时，指定被标记为事件源的项的名称，以便 <see cref="M:Microsoft.JScript.IEngine2.ConnectEvents" /> 方法可以确定要连接的事件。 这未在 JScript 中实现。</summary>
      <param name="name">提供事件的添加项的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Restart">
      <summary>在类中实现时，如果此方法在对新表达式求值之前必须将引擎重置为空白状态，则调试器将调用此方法。 此方法将添加的项和全局范围重置回其原始状态。</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Run(System.AppDomain)">
      <summary>在类中实现时，将在指定的应用程序域中运行已编译的代码。 这未在 JScript 中实现，因为托管引擎不支持在用户提供的应用程序域中运行代码。</summary>
      <param name="domain">要在其中运行已编译的代码的应用程序域。</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.RunEmpty">
      <summary>在类中实现时，将在当前的 <see cref="T:System.AppDomain" /> 中运行已编译的代码。</summary>
    </member>
    <member name="T:Microsoft.JScript.IErrorHandler">
      <summary>定义用于处理分析代码时发生的错误的方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.IErrorHandler.OnCompilerError(Microsoft.JScript.IVsaFullErrorInfo)">
      <summary>在类中实现时，确定如何处理在分析代码时发生的错误。</summary>
      <returns>false 表示处理错误；true 表示忽略错误并继续分析。</returns>
      <param name="error">一个对象，该对象包含有关错误的信息。</param>
    </member>
    <member name="T:Microsoft.JScript.IMessageReceiver">
      <summary>定义从脚本引擎接收输出的方法。 此接口充当回调对象，用于捕获将以其他方式转到控制台的输出。</summary>
    </member>
    <member name="M:Microsoft.JScript.IMessageReceiver.Message(System.String)">
      <summary>在类中实现时，捕获指定的输出。</summary>
      <param name="strValue">要捕获的输出。</param>
    </member>
    <member name="T:Microsoft.JScript.IMethodsCompletionInfo">
      <summary>这是一个标记接口，没有任何方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.Import">
      <summary>导入要在代码中使用的命名空间。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Import.JScriptImport(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>导入要由指定的脚本引擎使用的指定命名空间。</summary>
      <param name="name">要导入的命名空间。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.In">
      <summary>确定对象是否包含在另一个对象中。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.In.JScriptIn(System.Object,System.Object)">
      <summary>确定第一个指定对象是否包含在第二个指定对象中。</summary>
      <returns>如果 <paramref name="v1" /> 包含在 <paramref name="v2" /> 中，则为 true；否则为 false。</returns>
      <param name="v1">要搜索的对象。</param>
      <param name="v2">要在其中进行搜索的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.INeedEngine">
      <summary>定义用于获取和设置对脚本引擎的引用的方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.INeedEngine.GetEngine">
      <summary>在类中实现时，获取对脚本引擎的引用。</summary>
      <returns>对脚本引擎的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.INeedEngine.SetEngine(Microsoft.JScript.Vsa.VsaEngine)">
      <summary>在类中实现时，设置对脚本引擎的引用。</summary>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.Instanceof">
      <summary>确定是否可将一个对象强制转换为另一个对象的类型。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Instanceof.JScriptInstanceof(System.Object,System.Object)">
      <summary>确定是否可将第一个指定对象强制转换为第二个指定对象的类型。</summary>
      <returns>如果可将 <paramref name="v1" /> 强制转换为对象 v2 的类型，则为 true；否则为 false。</returns>
      <param name="v1">要强制转换为对象 <paramref name="v2" /> 的类型的对象。</param>
      <param name="v2">具有所需类型的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.IObjectCompletionInfo">
      <summary>这是一个标记接口，没有任何方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.IParseText">
      <summary>定义在编辑器中创作 JScript 代码时用于分析文本的方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.IParseText.Parse(System.String,Microsoft.JScript.IErrorHandler)">
      <summary>在类中实现时，分析指定的源代码。</summary>
      <param name="code">要分析的源代码。</param>
      <param name="error">一个对象，其中包含在分析 <paramref name="code" /> 时所出现错误的相关信息。</param>
    </member>
    <member name="T:Microsoft.JScript.IRedirectOutput">
      <summary>定义用于捕获将以其他方式转到控制台的输出的方法。 此接口由 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 实现。</summary>
    </member>
    <member name="M:Microsoft.JScript.IRedirectOutput.SetOutputStream(Microsoft.JScript.IMessageReceiver)">
      <summary>在类中实现时，将指定的输出流重定向到新流或数据存储。</summary>
      <param name="output">要重定向的输出。</param>
    </member>
    <member name="T:Microsoft.JScript.ISite2">
      <summary>定义 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 用于名称解析的方法。 提供 IActiveScript 宿主需要的额外功能。</summary>
    </member>
    <member name="M:Microsoft.JScript.ISite2.GetParentChain(System.Object)">
      <summary>在类中实现时，获取指定对象的父对象层次结构。</summary>
      <returns>一个数组，其中包含 <paramref name="obj" /> 的父对象。</returns>
      <param name="obj">要获取其父层次结构的 <see cref="T:System.Reflection.IReflect" /> 对象。</param>
    </member>
    <member name="T:Microsoft.JScript.ITokenColorInfo">
      <summary>定义用于对特定代码单元着色的属性。</summary>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.Color">
      <summary>在类中实现时，获取应该用于显示代码单元的颜色。</summary>
      <returns>应该用于显示代码单元的颜色。</returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.EndPosition">
      <summary>在类中实现时，获取代码单元的结束位置。</summary>
      <returns>代码单元的结束位置。</returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.StartPosition">
      <summary>在类中实现时，获取代码单元的开始位置。</summary>
      <returns>代码单元的开始位置。</returns>
    </member>
    <member name="T:Microsoft.JScript.ITokenEnumerator">
      <summary>定义用于循环访问 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象集合的方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.ITokenEnumerator.GetNext">
      <summary>在类中实现时，返回 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象集合中的下一项。</summary>
      <returns>集合中的下一项。</returns>
    </member>
    <member name="M:Microsoft.JScript.ITokenEnumerator.Reset">
      <summary>在类中实现时，将枚举数设置为其初始位置，位于 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象集合中的第一项之前。</summary>
    </member>
    <member name="T:Microsoft.JScript.IVsaFullErrorInfo">
      <summary>定义属性以获取有关错误的信息。 此接口提供 IActiveScript 宿主需要的额外功能。</summary>
    </member>
    <member name="P:Microsoft.JScript.IVsaFullErrorInfo.EndLine">
      <summary>在类中实现时，获取代码中出错的结束行。</summary>
      <returns>代码中出错的结束行。</returns>
    </member>
    <member name="T:Microsoft.JScript.IVsaScriptCodeItem">
      <summary>定义 IActiveScript 宿主需要的额外功能。</summary>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptCodeItem.Execute">
      <summary>在类中实现时，编译并运行此代码。</summary>
      <returns>如果通过运行代码获得了返回值，则为该返回值；否则为 null。</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptCodeItem.StartColumn">
      <summary>在类中实现时，获取或设置行中此代码开始所在的列号。</summary>
      <returns>此代码开始所在的列号。</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptCodeItem.StartLine">
      <summary>在类中实现时，获取或设置此代码开始所在的行号。</summary>
      <returns>此代码开始所在的行号。</returns>
    </member>
    <member name="T:Microsoft.JScript.IVsaScriptScope">
      <summary>定义用于解析范围的方法。 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 的全局范围对象实现此接口。</summary>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.AddItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType)">
      <summary>在类中实现时，向范围中添加项。</summary>
      <returns>新项（如果已成功添加）。</returns>
      <param name="itemName">项的名称。</param>
      <param name="type">枚举值之一。 指定要添加的项的类型。</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.CreateDynamicItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType)">
      <summary>在类中实现时，向范围中添加项。 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 必须运行才能使用此方法。</summary>
      <returns>新项（如果已成功添加）。</returns>
      <param name="itemName">项的名称。</param>
      <param name="type">枚举值之一。 指定要添加的项的类型。</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItem(System.String)">
      <summary>在类中实现时，从指定名称所指定的范围中获取项。</summary>
      <returns>名为 <paramref name="itemName" /> 的项。</returns>
      <param name="itemName">要获取的项的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItemAtIndex(System.Int32)">
      <summary>在类中实现时，从指定索引值所指定的范围中获取项。</summary>
      <returns>位于 <paramref name="index" /> 处的项。</returns>
      <param name="index">要获取的项的索引。</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItemCount">
      <summary>在类中实现时，获取范围中的项数。</summary>
      <returns>范围中的项数。</returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetObject">
      <summary>在类中实现时，获取对全局范围的引用。</summary>
      <returns>对全局范围的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptScope.Parent">
      <summary>在类中实现时，获取对父对象的引用。</summary>
      <returns>父范围。</returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItem(Microsoft.JScript.Vsa.IJSVsaItem)">
      <summary>在类中实现时，从范围中移除指定的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> 对象。</summary>
      <param name="item">要移除的项。</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItem(System.String)">
      <summary>在类中实现时，从范围中移除由指定名称所指定的项。</summary>
      <param name="itemName">要移除的项的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItemAtIndex(System.Int32)">
      <summary>在类中实现时，从范围中移除由指定索引值所指定的项。</summary>
      <param name="index">要移除的项的索引。</param>
    </member>
    <member name="T:Microsoft.JScript.IWrappedMember">
      <summary>定义用于访问对象的方法，成员是依据该对象定义的。</summary>
    </member>
    <member name="M:Microsoft.JScript.IWrappedMember.GetWrappedObject">
      <summary>在类中实现时，返回作为成员定义依据的对象。</summary>
      <returns>作为成员定义依据的对象。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSAuthor">
      <summary>提供用于在编辑器中创作 JScript 代码的服务。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.JSAuthor" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.GetCodeSense">
      <summary>获取一个对象，在编辑器中创作 JScript 代码时，使用该对象来向文本中添加 IntelliSense。</summary>
      <returns>用于向文本中添加 IntelliSense 的对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.GetColorizer">
      <summary>获取一个对象，在编辑器中创作 JScript 代码时，使用该对象来为文本着色。</summary>
      <returns>用于为文本着色的对象。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSBuiltin">
      <summary>指定内置 JScript 函数。 这些函数对应于内部 JScript 对象的静态方法。 此枚举的成员用于创建 <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_concat">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_join">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_pop">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_push">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_reverse">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_shift">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_slice">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_sort">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_splice">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_toLocaleString">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_toString">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_unshift">
      <summary>
        <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Boolean_toString">
      <summary>
        <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Boolean_valueOf">
      <summary>
        <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getDate">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getDay">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getFullYear">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getHours">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMilliseconds">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMinutes">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMonth">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getSeconds">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getTime">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getTimezoneOffset">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCDate">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCDay">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCFullYear">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCHours">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMilliseconds">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMinutes">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMonth">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCSeconds">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getVarDate">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getYear">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_parse">
      <summary>
        <see cref="T:Microsoft.JScript.DateConstructor" /> 类的静态 <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setDate">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setFullYear">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setHours">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMilliseconds">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMinutes">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMonth">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setSeconds">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setTime">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCDate">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCFullYear">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCHours">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMilliseconds">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMinutes">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMonth">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCSeconds">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setYear">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toDateString">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toGMTString">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleDateString">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleString">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleTimeString">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toString">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toTimeString">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toUTCString">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_UTC">
      <summary>
        <see cref="T:Microsoft.JScript.DateConstructor" /> 类的静态 <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_valueOf">
      <summary>
        <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_atEnd">
      <summary>
        <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_item">
      <summary>
        <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_moveFirst">
      <summary>
        <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_moveNext">
      <summary>
        <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Error_toString">
      <summary>
        <see cref="T:Microsoft.JScript.ErrorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_apply">
      <summary>
        <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_call">
      <summary>
        <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_toString">
      <summary>
        <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_CollectGarbage">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.CollectGarbage" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_decodeURI">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_decodeURIComponent">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_encodeURI">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_encodeURIComponent">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_escape">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_eval">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_GetObject">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_isFinite">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_isNaN">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_parseFloat">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_parseInt">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngine">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineBuildVersion">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineMajorVersion">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineMinorVersion">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_unescape">
      <summary>
        <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_abs">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_acos">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_asin">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_atan">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_atan2">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_ceil">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_cos">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_exp">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_floor">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_log">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_max">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_min">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_pow">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_random">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.random" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_round">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_sin">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_sqrt">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_tan">
      <summary>
        <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.None">
      <summary>无方法。 这是默认值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toExponential">
      <summary>
        <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toFixed">
      <summary>
        <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toLocaleString">
      <summary>
        <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toPrecision">
      <summary>
        <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toString">
      <summary>
        <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_valueOf">
      <summary>
        <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_hasOwnProperty">
      <summary>
        <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_isPrototypeOf">
      <summary>
        <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_propertyIsEnumerable">
      <summary>
        <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_toLocaleString">
      <summary>
        <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_toString">
      <summary>
        <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_valueOf">
      <summary>
        <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_compile">
      <summary>
        <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_exec">
      <summary>
        <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_test">
      <summary>
        <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_toString">
      <summary>
        <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_anchor">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_big">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_blink">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_bold">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_charAt">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_charCodeAt">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_concat">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fixed">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fontcolor">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fontsize">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fromCharCode">
      <summary>
        <see cref="T:Microsoft.JScript.StringConstructor" /> 类的静态 <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_indexOf">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_italics">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_lastIndexOf">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_link">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_localeCompare">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_match">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_replace">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_search">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_slice">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_small">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_split">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_strike">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_sub">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_substr">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_substring">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_sup">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLocaleLowerCase">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLocaleUpperCase">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLowerCase">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toString">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toUpperCase">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_valueOf">
      <summary>
        <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_dimensions">
      <summary>
        <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_getItem">
      <summary>
        <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_lbound">
      <summary>
        <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_toArray">
      <summary>
        <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_ubound">
      <summary>
        <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.JSConstructor">
      <summary>包装 <see cref="T:Microsoft.JScript.FunctionObject" />。</summary>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.Attributes">
      <summary>获取与此构造函数关联的特性。</summary>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.DeclaringType">
      <summary>获取用于声明此构造函数的类型。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetCustomAttributes(System.Boolean)">
      <summary>返回一个数组，其中包含附加到此构造函数的自定义特性。</summary>
      <returns>自定义属性的数组，其中自定义特性附加到此方法；若没有任何自定义特性，则为包含零个元素的数组。</returns>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回一个数组，其中包含附加到此构造函数的自定义特性（只搜索指定类型的特性）。</summary>
      <returns>一个 <see cref="T:System.Object" /> 对象数组，该数组包含零个元素。</returns>
      <param name="t">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetMethodImplementationFlags">
      <summary>返回有关此方法的实现的信息。</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> 和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetParameters">
      <summary>获取此构造函数的参数。</summary>
      <returns>一个数组，其中包含与此构造函数的签名匹配的信息。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定的区域性和绑定信息调用指定对象的构造函数。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="obj">要调用其构造函数的对象。</param>
      <param name="options">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象可将类型从实参类型转换为形参类型。</param>
      <param name="parameters">要传递给此构造函数的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定的区域性和绑定信息调用此构造函数。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="options">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象可将类型从实参类型转换为形参类型。</param>
      <param name="parameters">要传递给此构造函数的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定的特性类型是否附加到此构造函数。</summary>
      <returns>所有情况下均为 false。</returns>
      <param name="type">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.MemberType">
      <summary>获取此方法所充当成员的类型。 标识派生自 <see cref="T:System.Reflection.MemberInfo" />（此类从中派生）的类的类型。</summary>
      <returns>由于此类派生自 <see cref="T:System.Reflection.ConstructorInfo" />，因此为 <see cref="F:System.Reflection.MemberTypes.Constructor" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.MethodHandle">
      <summary>获取此构造函数的内部元数据表示形式的句柄。</summary>
      <returns>此构造函数的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.Name">
      <summary>获取此构造函数的名称。</summary>
      <returns>此构造函数的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.ReflectedType">
      <summary>通过反射获取用于获取此实例的类对象。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="T:Microsoft.JScript.JScriptCodeProvider">
      <summary>提供对 JScript 代码生成器和代码编译器的实例的访问。</summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.JScriptCodeProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.CreateCompiler">
      <summary>返回 JScript 代码编译器的实例。</summary>
      <returns>JScript 代码编译器的实例。</returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.CreateGenerator">
      <summary>返回 JScript 代码生成器的实例。</summary>
      <returns>JScript 代码生成器的实例。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptCodeProvider.FileExtension">
      <summary>获取 JScript 代码文件的文件扩展名。</summary>
      <returns>字符串“js”。</returns>
    </member>
    <member name="T:Microsoft.JScript.JScriptException">
      <summary>由 JScript 引发的异常，用于通知公共语言运行时 (CLR) 宿主或程序已发生错误。 <see cref="T:Microsoft.JScript.JScriptException" /> 通常采用 <see cref="T:Microsoft.JScript.JSError" /> 枚举值。</summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(Microsoft.JScript.JSError)">
      <summary>使用指定的 <see cref="T:Microsoft.JScript.JSError" /> 初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类的新实例。</summary>
      <param name="errorNumber">枚举值之一。 该值指定错误。</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类的新实例。</summary>
      <param name="info">有关所引发异常的序列化对象数据。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
      <param name="e">导致当前异常的异常。</param>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Column">
      <summary>获取代码中发生错误的列。</summary>
      <returns>代码中发生错误的列，或者，如果 <see cref="T:Microsoft.JScript.Context" /> 为 null，则为 0。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Description">
      <summary>获取描述错误的消息。</summary>
      <returns>描述错误的消息。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.EndColumn">
      <summary>获取错误在其中结束的代码列。</summary>
      <returns>错误在其中结束的代码列，或者，如果 <see cref="T:Microsoft.JScript.Context" /> 为 null，则为 0。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.EndLine">
      <summary>获取错误在其中结束的代码行。</summary>
      <returns>错误在其中结束的代码行，或者，如果 <see cref="T:Microsoft.JScript.Context" /> 为 null，则为 0。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.ErrorNumber">
      <summary>获取错误的 <see cref="P:System.Exception.HResult" /> 代码。</summary>
      <returns>错误的 <see cref="P:System.Exception.HResult" /> 代码。</returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将有关异常的信息（包括 IsError 和 Code 值）存储在 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中。</summary>
      <param name="info">有关所引发异常的序列化对象数据。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Line">
      <summary>获取发生错误的代码行。</summary>
      <returns>发生错误的代码行，或者，如果 <see cref="T:Microsoft.JScript.Context" /> 为 null，则为 0。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.LineText">
      <summary>获取发生错误的代码的文本。</summary>
      <returns>代码的文本，或者，如果 <see cref="T:Microsoft.JScript.Context" /> 为 null，则为空字符串。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Message">
      <summary>获取描述错误的消息。</summary>
      <returns>描述错误的消息。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Microsoft#JScript#Vsa#IJSVsaError#Description">
      <summary>获取描述错误的消息。</summary>
      <returns>描述错误的消息。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Microsoft#JScript#Vsa#IJSVsaError#Number">
      <summary>获取错误的 <see cref="P:System.Exception.HResult" /> 代码。</summary>
      <returns>错误的 <see cref="P:System.Exception.HResult" /> 代码。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Number">
      <summary>获取错误的 <see cref="P:System.Exception.HResult" /> 代码。</summary>
      <returns>错误的 <see cref="P:System.Exception.HResult" /> 代码。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Severity">
      <summary>获取一个介于 0（最严重）和 4（最不严重）之间的数字，指示错误的严重级别。0 为默认值。</summary>
      <returns>介于 0 和 4 之间的数字。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.SourceItem">
      <summary>获取导致错误的源代码项。</summary>
      <returns>源代码项；或者，如果 <see cref="T:Microsoft.JScript.Context" /> 为 null，则引发 <see cref="T:Microsoft.JScript.NoContextException" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.SourceMoniker">
      <summary>获取包含错误的源代码文件的名称。</summary>
      <returns>源代码文件的名称，若 <see cref="T:Microsoft.JScript.Context" /> 为 null，则显示字符串“没有源代码”。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.StackTrace">
      <summary>获取发生错误时的堆栈跟踪信息。</summary>
      <returns>堆栈跟踪信息。</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.StartColumn">
      <summary>获取代码中发生错误的列。</summary>
      <returns>代码中发生错误的列，或者，如果 <see cref="T:Microsoft.JScript.Context" /> 为 null，则为 0。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSError">
      <summary>指定 JScript 错误消息。 此类属于编译和运行时状态类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractCannotBePrivate">
      <summary>抽象方法不能是私有的。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractCannotBeStatic">
      <summary>静态方法不能是抽象的。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractWithBody">
      <summary>抽象函数不能具有函数体。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ActionNotSupported">
      <summary>对象不支持此操作。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousBindingBecauseOfEval">
      <summary>
        <see cref="T:Microsoft.JScript.Eval" /> 的存在使此名称的使用不明确。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousBindingBecauseOfWith">
      <summary>
        <see cref="T:Microsoft.JScript.With" /> 语句使此名称的使用不明确。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousConstructorCall">
      <summary>多个构造函数与此参数列表匹配。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousMatch">
      <summary>多个方法或属性与此参数列表匹配。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayLengthAssignIncorrect">
      <summary>必须为数组长度赋予一个有限的正数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayLengthConstructIncorrect">
      <summary>数组长度必须为有限的正整数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayMayBeCopied">
      <summary>将 JScript 数组赋值给 <see cref="T:System.Array" /> 可能导致该数组被复制。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AssemblyAttributesMustBeGlobal">
      <summary>程序集自定义特性不能属于其他构造。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AssignmentToReadOnly">
      <summary>无法为只读字段或属性赋值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadBreak">
      <summary>循环外不能有 break。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadContinue">
      <summary>循环外不能有 continue。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadFunctionDeclaration">
      <summary>可能存在无效函数声明、缺少函数或有未识别语法错误。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadHexDigit">
      <summary>应为十六进制数字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadLabel">
      <summary>已存在具有该名称的标签。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadModifierInInterface">
      <summary>不能对接口成员使用此修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadOctalLiteral">
      <summary>格式错误的八进制文本已按十进制文本处理。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadPropertyDeclaration">
      <summary>属性声明无效。 get 访问器不能有参数，而 set 访问器必须有一个参数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadReturn">
      <summary>Return 语句不能出现在函数外。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadSwitch">
      <summary>缺少 case 或 default 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadThrow">
      <summary>throw 语句必须具有参数，除非它位于 try 语句的 catch 块内。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadVariableDeclaration">
      <summary>可能存在无效变量声明、缺少 var 或有未识别语法错误。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadWayToLeaveFinally">
      <summary>这样处理 finally 块运行速度慢并且可能导致混乱。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BaseClassIsExpandoAlready">
      <summary>某个基类已标记为 <see cref="T:Microsoft.JScript.Expando" />；当前规范将被忽略。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BooleanExpected">
      <summary>找不到任何布尔值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotAssignToFunctionResult">
      <summary>无法为函数结果赋值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotBeAbstract">
      <summary>除非类被标记为抽象类，否则不能为抽象类。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotCallSecurityMethodLateBound">
      <summary>不能使用后期绑定调用 <see cref="M:System.Security.CodeAccessPermission.Deny" />、<see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> 和 <see cref="M:System.Security.CodeAccessPermission.Assert" /> 安全方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotChangeVisibility">
      <summary>不能更改基方法的可见性规范。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotInstantiateAbstractClass">
      <summary>不可能构造抽象类的实例。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotNestPositionDirective">
      <summary>必须结束一个位置指令才能开始新的指令。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotReturnValueFromVoidFunction">
      <summary>无法从 void 函数或构造函数返回值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotUseNameOfClass">
      <summary>只有构造函数可以与其所在的类同名。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotUseStaticSecurityAttribute">
      <summary>JScript 不支持静态安全特性。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CantAssignThis">
      <summary>无法为 this 赋值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CantCreateObject">
      <summary>无法创建对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidElif">
      <summary>@elif 不匹配；未定义 @if。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidElse">
      <summary>@else 不匹配；未定义 @if。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidEnd">
      <summary>@end 不匹配；未定义 @if。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidInDebugger">
      <summary>不能在调试器中使用条件编译指令和变量。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcOff">
      <summary>条件编译已关闭。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CircularDefinition">
      <summary>循环定义。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ClashWithProperty">
      <summary>字段的名称与属性的名称冲突。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ClassNotAllowed">
      <summary>此上下文中不允许有类定义。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ConstructorMayNotHaveReturnType">
      <summary>构造函数不能有返回类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CustomAttributeUsedMoreThanOnce">
      <summary>此类型的特性必须是唯一的。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DateExpected">
      <summary>应为日期对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DelegatesShouldNotBeExplicitlyConstructed">
      <summary>委托不应显式构造；只需使用该方法名称即可。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.Deprecated">
      <summary>指定的类型已被否决。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DifferentReturnTypeFromBase">
      <summary>基类中的方法具有不同的返回类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DoesNotHaveAnAddress">
      <summary>表达式不包含地址。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DupDefault">
      <summary>default 只能在 switch 语句中出现一次。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateMethod">
      <summary>此方法与此类中的另一种方法具有相同的名称、参数类型和返回类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateName">
      <summary>标识符已在使用中。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateNamedParameter">
      <summary>重复的命名参数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DupVisibility">
      <summary>可见性修饰符已定义。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.EnumeratorExpected">
      <summary>应为枚举数对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.EnumNotAllowed">
      <summary>此上下文中不允许有 enum 定义。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ErrEOF">
      <summary>需要更多的源字符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExceptionFromHResult">
      <summary>异常来自 HRESULT。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExecutablesCannotBeLocalized">
      <summary>可执行文件不能本地化；<see cref="P:System.Reflection.AssemblyCultureAttribute.Culture" /> 应始终为空。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoClassShouldNotImpleEnumerable">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> 类不应实现 <see cref="T:System.Collections.IEnumerable" />。 该接口是在 <see cref="T:Microsoft.JScript.Expando" /> 类上隐式定义的。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoMustBePublic">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> 方法必须是公共方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesAbstract">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> 方法不能是抽象方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesOverride">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> 方法不能重写基类方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesStatic">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> 方法不能是静态方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpectedAssembly">
      <summary>应为程序集。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpressionExpected">
      <summary>应为表达式。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FileNotFound">
      <summary>找不到文件。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FinalPrecludesAbstract">
      <summary>不能将 final 和 abstract 一同使用。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FractionOutOfRange">
      <summary>小数位数超出范围。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalAborted">
      <summary>函数计算已中止。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadLocation">
      <summary>当函数求值在程序中的此点停止时，函数求值无法完成。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadThreadNotStarted">
      <summary>函数求值失败，线程未启动。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadThreadState">
      <summary>函数求值失败。 线程可能包含不正确的数据。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalThreadSleepWaitJoin">
      <summary>函数求值失败。 线程正在休眠，等待某个对象，或者在等待另一个线程结束。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalThreadSuspended">
      <summary>函数求值失败。 线程被挂起。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalTimedout">
      <summary>函数计算超时。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalWebMethod">
      <summary>不能在调试器中调用 Web 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FunctionExpected">
      <summary>应为函数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.GetAndSetAreInconsistent">
      <summary>此属性的 get 和 set 方法彼此不匹配。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.HidesAbstractInBase">
      <summary>方法隐藏了 base 类中的 abstract。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.HidesParentMember">
      <summary>base 类已包含以此名称命名的成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalAssignment">
      <summary>无效的赋值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalChar">
      <summary>无效字符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalEval">
      <summary>不能通过别名调用 <see cref="T:Microsoft.JScript.Eval" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalParamArrayAttribute">
      <summary>变量参数列表必须为数组类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalUseOfSuper">
      <summary>以这种方式使用基类是无效的。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalUseOfThis">
      <summary>在当前上下文中使用 this 是无效的。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalVisibility">
      <summary>无效的可见性修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ImplicitlyReferencedAssemblyNotFound">
      <summary>引用的程序集依赖于另一个未被引用或未能找到的程序集。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ImpossibleConversion">
      <summary>指定的转换或强制不可能实现。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncompatibleAssemblyReference">
      <summary>引用的程序集不兼容。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncompatibleVisibility">
      <summary>不兼容的可见性修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncorrectNumberOfIndices">
      <summary>索引数与数组的维数不匹配。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InstanceNotAccessibleFromStatic">
      <summary>不能从 static 范围访问非静态成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InterfaceIllegalInInterface">
      <summary>不能在 interface 中声明接口。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InternalError">
      <summary>引发了内部错误。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidAssemblyKeyFile">
      <summary>使用了无效的程序集密钥文件。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidBaseTypeForEnum">
      <summary>enum 基类型必须是基元整型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCall">
      <summary>无效的过程调用或参数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttribute">
      <summary>自定义特性类必须从 <see cref="T:System.Attribute" /> 派生。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeArgument">
      <summary>在自定义特性构造函数参数列表中只允许使用基元类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeClassOrCtor">
      <summary>未知的自定义特性类或构造函数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeTarget">
      <summary>此特性对于此类型的声明无效。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidDebugDirective">
      <summary>无效的调试指令。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidElse">
      <summary>else 不匹配；未定义 if。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidImport">
      <summary>import 语句在此上下文中无效。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidLanguageOption">
      <summary>必须指定“fast”或“versionSafe”语言选项。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidPositionDirective">
      <summary>发现未知的位置指令。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidPrototype">
      <summary>此函数没有有效的原型对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidResource">
      <summary>这不是有效的 .resources 文件。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ItemNotAllowedOnExpandoClass">
      <summary>不能在 <see cref="T:Microsoft.JScript.Expando" /> 类上定义 Item 属性。 此 Item 保留给 <see cref="T:Microsoft.JScript.Expando" /> 字段使用。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.KeywordUsedAsIdentifier">
      <summary>不能使用保留字作为标识符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MemberInitializerCannotContainFuncExpr">
      <summary>成员的初始值设定项不能包含函数表达式。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MemberTypeCLSCompliantMismatch">
      <summary>类成员不能标记为符合公共语言规范 (CLS)，因为该类没有标记为符合 CLS。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodClashOnExpandoSuperClass">
      <summary>无法创建 <see cref="T:Microsoft.JScript.Expando" /> 类，因为已在类层次结构中定义了名为 Item 的属性。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodInBaseIsNotVirtual">
      <summary>基类（final 或不是 virtualoverride）中的方法将被忽略。 指定 hide。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodNotAllowedOnExpandoClass">
      <summary>不能在 <see cref="T:Microsoft.JScript.Expando" /> 类上定义名为 Item 的属性。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MissingConstructForAttributes">
      <summary>该特性列表不适用于当前上下文。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MissingNameParameter">
      <summary>指定的命名参数名称不是形参之一。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MoreNamedParametersThanArguments">
      <summary>指定的参数太少。 命名参数名的数目不能超过传入的变量的数目。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustBeEOL">
      <summary>在同一行上，指令后面不能有其他代码。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustImplementMethod">
      <summary>该类必须提供方法的实现。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustProvideNameForNamedParameter">
      <summary>无法提供 null 或空的命名参数名。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedArrayObject">
      <summary>“|”不是数组对象。 应为数组对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedCompileTimeConstant">
      <summary>表达式必须为编译时常量。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedInstance">
      <summary>应为实例。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedInterface">
      <summary>应为接口名称。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedObject">
      <summary>需要对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedType">
      <summary>应为类型名称。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NestedInstanceTypeCannotBeExtendedByStatic">
      <summary>非静态嵌套类型只能由嵌套在同一类中的非静态类型扩展。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NewNotSpecifiedInMethodDeclaration">
      <summary>方法与基类中的方法匹配。 必须指定 override 或 hide。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoAt">
      <summary>应为 @。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCatch">
      <summary>应为 catch。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCcEnd">
      <summary>应为 @end。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoColon">
      <summary>应为“:”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoComma">
      <summary>应为“,”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCommaOrTypeDefinitionError">
      <summary>应为“,”或类型声明无效；拼写格式应为“&lt;Identifier&gt; : &lt;Type&gt;”，而不是“&lt;Type&gt; &lt;Identifier&gt;”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCommentEnd">
      <summary>注释未终止。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoConstructor">
      <summary>无此类构造函数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoEqual">
      <summary>应为“=”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoError">
      <summary>无错误。 这是枚举的默认 (0) 值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoFuncEvalAllowed">
      <summary>函数求值中止。 若要启用属性求值，请单击“工具”菜单上的“选项”，然后在树视图中选择“调试”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoIdentifier">
      <summary>应为标识符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLabel">
      <summary>未找到标签。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLeftCurly">
      <summary>应为“{”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLeftParen">
      <summary>应为“(”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMemberIdentifier">
      <summary>应为标识符或 string。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMethodInBaseToNew">
      <summary>基类中没有要执行 hide 操作的成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMethodInBaseToOverride">
      <summary>基类中没有要 override 的成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonCLSCompliantMember">
      <summary>指定的成员不符合 CLS。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonCLSCompliantType">
      <summary>指定的类型不符合 CLS。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonClsException">
      <summary>引发非 CLS 异常的目标。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonStaticWithTypeName">
      <summary>无法使用类名访问非静态成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonSupportedInDebugger">
      <summary>不能在调试器中计算该表达式的值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightBracket">
      <summary>应为“]”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightBracketOrComma">
      <summary>应为“,”或“]”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightCurly">
      <summary>应为“}”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightParen">
      <summary>应为“)”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightParenOrComma">
      <summary>应为“,”或“)”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSemicolon">
      <summary>应为“;”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchMember">
      <summary>此类型的对象不具有此类成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchStaticMember">
      <summary>类型不具有此类 static 成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchType">
      <summary>未能找到类型。 可能缺少程序集引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAccessible">
      <summary>不能从此范围访问对象或成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAllowedInSuperConstructorCall">
      <summary>在基类构造函数调用中不允许使用对象或成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAnExpandoFunction">
      <summary>应将用作构造函数的类成员标记为 <see cref="T:Microsoft.JScript.Expando" /> 函数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotCollection">
      <summary>此对象不是集合。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotConst">
      <summary>应为常量。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotDeletable">
      <summary>无法删除对象或成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotIndexable">
      <summary>此类型的对象是不可建立索引的。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotInsideClass">
      <summary>仅在类定义中有效。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotMeantToBeCalledDirectly">
      <summary>无法直接调用此方法。 如果可能，请改用属性访问器。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotOKToCallSuper">
      <summary>从此位置调用基类构造函数无效。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotValidForConstructor">
      <summary>对于构造函数无效。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotValidVersionString">
      <summary>不是有效的版本字符串。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotYetImplemented">
      <summary>尚未实现。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoVarInEnum">
      <summary>enum 成员声明不应使用 var 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoWhile">
      <summary>应为 while。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NumberExpected">
      <summary>应为数字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ObjectExpected">
      <summary>应为对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OctalLiteralsAreDeprecated">
      <summary>八进制文本已被否决。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OLENoPropOrMethod">
      <summary>对象不支持此属性或方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OnlyClassesAllowed">
      <summary>package 内只允许使用类。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OnlyClassesAndPackagesAllowed">
      <summary>库中仅允许包含类和包。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OutOfMemory">
      <summary>内存不足。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OutOfStack">
      <summary>堆栈空间不足。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OverrideAndHideUsedTogether">
      <summary>不能在成员声明中同时使用 override 和 hide。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PackageExpected">
      <summary>应为包名称。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PackageInWrongContext">
      <summary>此上下文中不允许有包定义。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ParamListNotLast">
      <summary>变量参数列表必须是最后一个参数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PossibleBadConversion">
      <summary>此转换在运行时可能失败。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PossibleBadConversionFromString">
      <summary>将字符串转换为数字或布尔值很慢，并且在运行时可能失败。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PrecisionOutOfRange">
      <summary>精度超出范围。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PropertyLevelAttributesMustBeOnGetter">
      <summary>如果有 get 访问器，则必须在 get 访问器上指定针对属性的特性。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RefParamsNonSupportedInDebugger">
      <summary>不能在调试器中调用具有 ref 参数的方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RegExpExpected">
      <summary>应为 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RegExpSyntax">
      <summary>正则表达式中有语法错误。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ShouldBeAbstract">
      <summary>没有函数体的函数应该为 abstract。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SideEffectsDisallowed">
      <summary>表达式可导致副作用，将不会对它进行计算。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticIsAlreadyFinal">
      <summary>静态方法不能是 final。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMethodsCannotHide">
      <summary>静态方法不能隐藏基类方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMethodsCannotOverride">
      <summary>静态方法不能重写基类方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMissingInStaticInit">
      <summary>静态初始值设定项必须指定 static 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticRequiresTypeName">
      <summary>必须通过类名访问静态成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticVarNotAvailable">
      <summary>静态变量不可用。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StringConcatIsSlow">
      <summary>加号运算符是较慢的字符串连接方法。 请考虑改用 <see cref="T:System.Text.StringBuilder" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StringExpected">
      <summary>应为字符串。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuperClassConstructorNotAccessible">
      <summary>无法从此范围访问基类构造函数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectAssignment">
      <summary>If 条件不能包含赋值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectLoopCondition">
      <summary>Loop 条件不能包含函数调用。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectSemicolon">
      <summary>在 if 语句中找到空语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SyntaxError">
      <summary>发现语法错误。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooFewParameters">
      <summary>未提供所有必需的参数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooManyParameters">
      <summary>实参太多。 多余的参数将被忽略。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooManyTokensSkipped">
      <summary>错误太多。 该文件可能不是 JScript 文件。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeAssemblyCLSCompliantMismatch">
      <summary>此类型不能标记为符合 CLS，因为该程序集没有标记为符合 CLS。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeCannotBeExtended">
      <summary>无法扩展类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeMismatch">
      <summary>类型不匹配。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeNameTooLong">
      <summary>完全限定类型名称太长。 它必须小于 1,024 个字符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeObjectNotAvailable">
      <summary>此类型的类型对象不可用。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UncaughtException">
      <summary>引发了异常，但未被捕获。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UndeclaredVariable">
      <summary>未声明变量。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UndefinedIdentifier">
      <summary>未定义标识符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnexpectedSemicolon">
      <summary>意外的“;”。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnreachableCatch">
      <summary>永远不会到达 Catch 子句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnterminatedString">
      <summary>字符串常量未终止。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.URIDecodeError">
      <summary>要解码的 URI 不是有效编码。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.URIEncodeError">
      <summary>要编码的 URI 包含无效字符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UselessAssignment">
      <summary>赋值创建一个立即被丢弃的 <see cref="T:Microsoft.JScript.Expando" /> 属性。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UselessExpression">
      <summary>表达式不起任何作用。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VariableLeftUninitialized">
      <summary>未初始化的十分变量危险且使用起来很慢。 您是否希望将其保留在未初始化状态?</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VariableMightBeUnitialized">
      <summary>变量可能未初始化。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VarIllegalInInterface">
      <summary>不能在接口中声明变量。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VBArrayExpected">
      <summary>应为 VBArray。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WriteOnlyProperty">
      <summary>属性是只写的。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WrongDirective">
      <summary>调试器指令错误或指令的位置错误。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WrongUseOfAddressOf">
      <summary>只能在参数列表中使用运算符地址。</summary>
    </member>
    <member name="T:Microsoft.JScript.JSField">
      <summary>支持 Jscript 中的所有字段。 这是 JScript 定义的所有字段的基类。 此类属于名称绑定类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSField.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.JSField" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.JScript.JSField.Attributes">
      <summary>获取与此字段关联的属性。</summary>
      <returns>
        <see cref="F:System.Reflection.FieldAttributes.PrivateScope" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.DeclaringType">
      <summary>获取声明此字段的类型。</summary>
      <returns>在所有情况下均为 null。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.FieldHandle">
      <summary>获取此字段的内部元数据表示形式的句柄。</summary>
      <returns>此字段的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.FieldType">
      <summary>获取此字段的类型。</summary>
      <returns>
        <see cref="T:System.Object" /> 的类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSField.GetCustomAttributes(System.Boolean)">
      <summary>返回一个数组，其中包含附加到此字段的自定义特性。</summary>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象数组，该数组包含零个元素。</returns>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSField.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回一个数组，其中包含附加到此字段的自定义特性（只搜索指定类型的特性）。</summary>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象数组，该数组包含零个元素。</returns>
      <param name="t">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSField.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定的特性类型是否附加到此字段。</summary>
      <returns>所有情况下均为 false。</returns>
      <param name="type">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="P:Microsoft.JScript.JSField.MemberType">
      <summary>获取此字段所充当成员的类型。 标识派生自 <see cref="T:System.Reflection.MemberInfo" />（此类从中派生）的类的类型。</summary>
      <returns>由于此类派生自 <see cref="T:System.Reflection.FieldInfo" />，因此为 <see cref="F:System.Reflection.MemberTypes.Field" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.Name">
      <summary>获取此字段的名称。</summary>
      <returns>此字段的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.ReflectedType">
      <summary>通过反射获取用于获取此实例的类对象。</summary>
      <returns>声明此方法的类型。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSFieldInfo">
      <summary>包装 <see cref="T:System.Reflection.FieldInfo" /> 对象。</summary>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.Attributes">
      <summary>获取与此字段关联的属性。</summary>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.DeclaringType">
      <summary>获取声明此字段的类型。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.FieldHandle">
      <summary>获取此字段的内部元数据表示形式的句柄。</summary>
      <returns>此字段的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.FieldType">
      <summary>获取此字段的类型。</summary>
      <returns>此字段的类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>返回一个数组，其中包含附加到此字段的自定义特性。</summary>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象数组，该数组包含零个元素。</returns>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回一个数组，其中包含附加到此字段的自定义特性（只搜索指定类型的特性）。</summary>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象数组，该数组包含零个元素。</returns>
      <param name="t">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetValue(System.Object)">
      <summary>获取字段的值。</summary>
      <returns>字段的值。</returns>
      <param name="obj">其字段值将返回的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定的特性类型是否附加到此字段。</summary>
      <returns>所有情况下均为 false。</returns>
      <param name="type">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.MemberType">
      <summary>获取此字段所充当成员的类型。 标识派生自 <see cref="T:System.Reflection.MemberInfo" />（此类从中派生）的类的类型。</summary>
      <returns>由于此类派生自 <see cref="T:System.Reflection.FieldInfo" />，因此为 <see cref="F:System.Reflection.MemberTypes.Field" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.Name">
      <summary>获取此字段的名称。</summary>
      <returns>此字段的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.ReflectedType">
      <summary>通过反射获取用于获取此实例的类对象。</summary>
      <returns>用于获取此方法的 Type 对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.SetValue(System.Object,System.Object)">
      <summary>使用指定值设置字段的值。</summary>
      <param name="obj">将设置其字段值的对象。</param>
      <param name="value">分配给字段的值。</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>使用指定的值、区域性和绑定信息设置字段的值。</summary>
      <param name="obj">将设置其字段值的对象。</param>
      <param name="value">分配给字段的值。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一组通过反射启用绑定、参数类型强制和成员调用的属性。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="T:Microsoft.JScript.JSFunctionAttribute">
      <summary>与 <see cref="T:Microsoft.JScript.JSFunctionAttributeEnum" /> 一起使用，以批注 JScript 编译器生成的方法和构造函数的调用约定。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.#ctor(Microsoft.JScript.JSFunctionAttributeEnum)">
      <summary>使用指定的调用约定初始化 <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> 类的新实例。</summary>
      <param name="value">方法或构造函数的调用约定。</param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.#ctor(Microsoft.JScript.JSFunctionAttributeEnum,Microsoft.JScript.JSBuiltin)">
      <summary>使用指定的调用约定初始化 <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> 类的新实例。 特性标识指定的内置函数。</summary>
      <param name="value">方法或构造函数的调用约定。</param>
      <param name="builtinFunction">此特性所标识的内置函数。</param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.GetAttributeValue">
      <summary>获取方法或构造函数的调用约定。</summary>
      <returns>方法或构造函数的调用约定。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSFunctionAttributeEnum">
      <summary>指定由 JScript 编译器生成的函数的调用约定。 与 <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> 自定义特性一起使用。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction">
      <summary>指定 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" />、<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" /> 和 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" /> 的聚合。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicNestedFunction">
      <summary>指定 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction" /> 和 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction" /> 的聚合。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments">
      <summary>指定函数的第三个参数的类型为 Object。 调用方应传入实现 JScript 参数对象的对象，通常是 <see cref="T:Microsoft.JScript.ArgumentsObject" /> 的实例。 JScript 运行时假定，如果设置了 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" />，则也会设置 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" /> 和 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine">
      <summary>指定函数的第二个参数的类型为 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />。 调用方应传入一个 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 实例，该函数可以从此实例检索运行时基础结构。 JScript 运行时假定，如果设置了 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />，则也会设置 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame">
      <summary>指定函数在执行对外调用之前将其局部变量复制到 JScript 运行时维护的堆栈帧对象中。 控件返回到该函数时，它会将这些变量从堆栈帧对象复制回它的局部变量。 如果某一函数包含访问该父函数局部变量的嵌套函数，则设置此标志。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject">
      <summary>指定函数的第一个参数的类型为 Object，并且它通常名为 <paramref name="thisob" />。 调用方应传入该函数所作用于的对象的实例。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs">
      <summary>指定该函数采用的参数数目可变。 最后一个参数的类型是 Object 数组，它保存显式指定的所有参数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsExpandoMethod">
      <summary>指定函数是基于原型的对象的构造函数。 有关更多信息，请参见基于原型的对象和expando 修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsInstanceNestedClassConstructor">
      <summary>指定函数是嵌套实例类的构造函数。 该函数的第一个参数是父类的实例。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested">
      <summary>指定函数嵌套在另一个 JScript 函数中。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction">
      <summary>指定 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" />、<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested" /> 和 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" /> 的聚合。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.None">
      <summary>指定一个常规 .NET Framework 方法，该方法没有特别的调用约定。 通常不会使用，原因是未发出 JSFunctionAttribute。</summary>
    </member>
    <member name="T:Microsoft.JScript.JSLocalField">
      <summary>表示局部变量。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.#ctor(System.String,System.RuntimeTypeHandle,System.Int32)">
      <summary>使用指定的名称、句柄和槽编号初始化 <see cref="T:Microsoft.JScript.JSLocalField" /> 类的新实例。</summary>
      <param name="name">此字段的名称。</param>
      <param name="handle">此字段的内部元数据表示形式的句柄。</param>
      <param name="slotNumber">变量的槽编号。</param>
    </member>
    <member name="P:Microsoft.JScript.JSLocalField.FieldType">
      <summary>获取此字段的类型。</summary>
      <returns>此字段的类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.GetValue(System.Object)">
      <summary>获取字段的值。</summary>
      <returns>字段的值。</returns>
      <param name="obj">其字段值将返回的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>使用指定的值、区域性和绑定信息设置字段的值。</summary>
      <param name="obj">将设置其字段值的对象。</param>
      <param name="value">分配给字段的值。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一组通过反射启用绑定、参数类型强制和成员调用的属性。</param>
      <param name="locale">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="T:Microsoft.JScript.JSMethod">
      <summary>表示一个 JScript 方法。 此类属于名称绑定类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetBaseDefinition">
      <summary>对于直接或间接基类上的方法，返回 <see cref="T:System.Reflection.MethodInfo" /> 对象，在直接或间接基类中，此方法是最先声明的。</summary>
      <returns>所有情况下均为 this。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetCustomAttributes(System.Boolean)">
      <summary>返回一个数组，其中包含附加到此方法的自定义特性。</summary>
      <returns>一个 <see cref="T:System.Object" /> 对象数组，该数组包含零个元素。</returns>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回一个数组，其中包含附加到此方法的自定义特性（只搜索指定类型的特性）。</summary>
      <returns>一个 <see cref="T:System.Object" /> 对象数组，该数组包含零个元素。</returns>
      <param name="t">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetMethodImplementationFlags">
      <summary>返回有关此方法的实现的信息。</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> 和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定的信息调用方法。</summary>
      <returns>方法调用的返回值。</returns>
      <param name="obj">要对其调用方法的对象。</param>
      <param name="options">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象可将类型从实参类型转换为形参类型。</param>
      <param name="parameters">要传递给方法的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定的特性类型是否附加到此方法。</summary>
      <returns>所有情况下均为 false。</returns>
      <param name="type">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.MemberType">
      <summary>获取此方法所充当成员的类型。 标识派生自 <see cref="T:System.Reflection.MemberInfo" />（此类从中派生）的类的类型。</summary>
      <returns>由于此类派生自 <see cref="T:System.Reflection.MethodInfo" />，因此为 <see cref="F:System.Reflection.MemberTypes.Method" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.MethodHandle">
      <summary>获取此方法的内部元数据表示形式的句柄。</summary>
      <returns>此方法的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.ReflectedType">
      <summary>通过反射获取用于获取此实例的类对象。</summary>
      <returns>声明此方法的类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.ReturnTypeCustomAttributes">
      <summary>获取此方法返回值的类型的自定义特性。</summary>
      <returns>在所有情况下均为 null。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSMethodInfo">
      <summary>包装 <see cref="T:System.Reflection.MethodInfo" /> 对象。</summary>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.Attributes">
      <summary>获取与此方法关联的特性。</summary>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.DeclaringType">
      <summary>获取用于声明此方法的类型。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetBaseDefinition">
      <summary>对于直接或间接基类的方法，返回 <see cref="T:System.Reflection.MethodInfo" /> 对象，在直接或间接基类中，此方法是最先声明的。</summary>
      <returns>层次结构中此方法的第一个实现。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetCustomAttributes(System.Boolean)">
      <summary>返回一个数组，其中包含附加到此方法的自定义特性。</summary>
      <returns>一个数组，其中包含附加到此方法的自定义特性；若没有任何自定义特性，则为包含零个元素的数组。</returns>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回一个数组，其中包含附加到此方法的自定义特性（只搜索指定类型的特性）。</summary>
      <returns>一个数组，其中包含附加到此方法的自定义特性；若没有任何自定义特性，则为包含零个元素的数组。</returns>
      <param name="type">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetMethodImplementationFlags">
      <summary>返回有关此方法的实现的信息。</summary>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetParameters">
      <summary>获取此方法的参数。</summary>
      <returns>一个数组，其中包含与此方法的签名匹配的信息。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定的信息调用方法。</summary>
      <returns>方法调用的返回值。</returns>
      <param name="obj">要对其调用方法的对象。</param>
      <param name="options">枚举值的按位组合，这些值控制绑定。</param>
      <param name="binder">一个对象，该对象可将类型从实参类型转换为形参类型。</param>
      <param name="parameters">要传递给方法的参数列表。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定的特性类型是否附加到此方法。</summary>
      <returns>如果指定特性 <paramref name="type" /> 的一个或多个实例附加到此方法，则为 true；否则为 false。</returns>
      <param name="type">要搜索的特性类型。</param>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.MemberType">
      <summary>获取此方法所充当成员的类型。 标识派生自 <see cref="T:System.Reflection.MemberInfo" />（此类从中派生）的类的类型。</summary>
      <returns>由于此类派生自 <see cref="T:System.Reflection.MethodInfo" />，因此为 <see cref="F:System.Reflection.MemberTypes.Method" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.MethodHandle">
      <summary>获取此方法的内部元数据表示形式的句柄。</summary>
      <returns>此方法的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.Name">
      <summary>获取此方法的名称。</summary>
      <returns>此方法的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReflectedType">
      <summary>通过反射获取用于获取此实例的类对象。</summary>
      <returns>用于获取此方法的 Type 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReturnType">
      <summary>获取此方法的返回值的类型。</summary>
      <returns>此方法的返回值的类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReturnTypeCustomAttributes">
      <summary>获取此方法返回值的类型的自定义特性。</summary>
      <returns>此方法返回值的类型的自定义特性。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.ToString">
      <summary>返回表示方法的字符串。</summary>
      <returns>表示方法的字符串。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSObject">
      <summary>表示 JScript 中的对象。 此类属于对象和函数类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.JSObject" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.AddField(System.String)">
      <summary>将指定的字段添加到该对象中。</summary>
      <returns>新字段（如果已成功添加）。</returns>
      <param name="name">要添加的字段的名称。</param>
    </member>
    <member name="F:Microsoft.JScript.JSObject.field_table">
      <summary>存储在对象中动态添加和移除的字段的列表。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于与指定名称匹配的所有成员。</summary>
      <returns>与 <paramref name="name" /> 参数匹配的成员的数组。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有成员。</summary>
      <returns>对象的数组，其中包含当前对象的所有成员。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.SetMemberValue2(System.String,System.Object)">
      <summary>设置动态地添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" /> 中的字段的值。</summary>
      <param name="name">要为其设置值的字段的名称。</param>
      <param name="value">该字段的新值。</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问对象成员的枚举数。</summary>
      <returns>用于循环访问对象成员的枚举数对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)">
      <summary>将指定的方法添加到该对象中。 未在 JScript 中实现 <see cref="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)" />。</summary>
      <returns>在所有情况下均为 null。</returns>
      <param name="name">要添加的方法的名称。</param>
      <param name="method">该方法的委托。</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)">
      <summary>将指定的属性添加到该对象中。 此方法未在 JScript 中实现。</summary>
      <returns>在所有情况下均为 null。</returns>
      <param name="name">要添加的属性的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)">
      <summary>从该对象中移除指定的成员。</summary>
      <param name="m">要移除的成员的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSParser">
      <summary>分析 JScript 代码。 此类属于扫描和分析类别。 有关扫描和分析的更多信息，请参见创建 .NET Framework 语言编译器。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSParser.#ctor(Microsoft.JScript.Context)">
      <summary>初始化 <see cref="T:Microsoft.JScript.JSParser" /> 类的新实例，并指定要分析的源代码。</summary>
      <param name="context">要分析的源代码。</param>
    </member>
    <member name="M:Microsoft.JScript.JSParser.Parse">
      <summary>分析源代码。</summary>
      <returns>通过分析代码而创建的抽象语法树的根。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSParser.ParseEvalBody">
      <summary>分析源代码。 如果源代码位于 eval 方法调用内部，请使用此方法，而不是 <see cref="M:Microsoft.JScript.JSParser.Parse" />。</summary>
      <returns>通过分析代码而创建的抽象语法树的根。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSPrototypeObject">
      <summary>将构造函数属性添加到 <see cref="T:Microsoft.JScript.JSObject" /> 以便实现早期绑定。 此类属于对象和函数类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSPrototypeObject.constructor">
      <summary>存储一个构造函数对象，该对象定义基于原型的对象。</summary>
    </member>
    <member name="T:Microsoft.JScript.JSScanner">
      <summary>扫描 JScript 代码搜索单个代码单元或标记。 此类属于扫描和分析类别。 有关扫描和分析的更多信息，请参见创建 .NET Framework 语言编译器。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.JSScanner" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.#ctor(Microsoft.JScript.Context)">
      <summary>初始化 <see cref="T:Microsoft.JScript.JSScanner" /> 类的新实例，并指定要扫描的源代码。</summary>
      <param name="sourceContext">要扫描的源代码。</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetCurrentLine">
      <summary>获取代码中的当前行号。 这是在扫描代码时移动的指针。</summary>
      <returns>代码中的当前行号。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetCurrentPosition(System.Boolean)">
      <summary>获取代码字符串中的当前位置。 这是在扫描代码时移动的指针。</summary>
      <returns>代码字符串中的当前位置。</returns>
      <param name="absolute">忽略此参数。</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetNextToken">
      <summary>扫描代码中的下一个标记。</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetSourceCode">
      <summary>获取与此扫描仪对象关联的源代码。</summary>
      <returns>要扫描的源代码。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetStartLinePosition">
      <summary>获取代码字符串中当前代码的第一行的开始位置。 代码的所有行都存储在单个字符串中。 这是在扫描代码时移动的指针。</summary>
      <returns>代码字符串中当前代码的第一行的开始位置。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetStringLiteral">
      <summary>获取一个已经过扫描并替换了其所有转义序列的字符串。</summary>
      <returns>一个已经过扫描并替换了其所有转义序列的字符串。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GotEndOfLine">
      <summary>指示在扫描仪扫描或查看标记后是否到达了行尾。</summary>
      <returns>如果到达了行尾，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.IsKeyword(Microsoft.JScript.JSToken)">
      <summary>确定指定的标记是否为 JScript 语言中的关键字。</summary>
      <returns>如果标记是关键字，则为 true；否则为 false。</returns>
      <param name="token">要检查的标记。</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.IsOperator(Microsoft.JScript.JSToken)">
      <summary>确定指定的标记是否为 JScript 语言中的运算符。</summary>
      <returns>如果标记是运算符，则为 true；否则为 false。</returns>
      <param name="token">要检查的标记。</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SetAuthoringMode(System.Boolean)">
      <summary>设置一个标志，指示扫描仪是否在创作模式下运行。</summary>
      <param name="mode">如果为 true，则指示创作模式；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SetSource(Microsoft.JScript.Context)">
      <summary>设置要扫描的源代码。</summary>
      <param name="sourceContext">要扫描的源代码。</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SkipMultiLineComment">
      <summary>跳过跨越多行的注释，并使标识当前位置的指针在代码中前进。</summary>
      <returns>代码字符串中新的当前位置。</returns>
    </member>
    <member name="T:Microsoft.JScript.JSToken">
      <summary>指定组成 JScript 语言的单个代码单元或标记。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Abstract">
      <summary>abstract 修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.AccessField">
      <summary>. 字段访问器符号。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Assert">
      <summary>assert 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Assign">
      <summary>= 赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseAnd">
      <summary>&amp; 按位 AND 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseAndAssign">
      <summary>&amp;= 按位 AND 赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseNot">
      <summary>~ 按位 NOT 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseOr">
      <summary>| 按位 OR 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseOrAssign">
      <summary>|= 按位 OR 赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseXor">
      <summary>^ 按位 XOR 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseXorAssign">
      <summary>^= 按位 XOR 赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Boolean">
      <summary>boolean 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Break">
      <summary>break 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Byte">
      <summary>byte 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Case">
      <summary>switch 语句的 case 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Catch">
      <summary>try 语句的 catch 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Char">
      <summary>char 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Class">
      <summary>class 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Colon">
      <summary>: 三元运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Comma">
      <summary>, 逗号运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Comment">
      <summary>注释文本。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ConditionalIf">
      <summary>? 三元运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Const">
      <summary>const 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Continue">
      <summary>continue 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Debugger">
      <summary>debugger 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Decimal">
      <summary>decimal 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Decrement">
      <summary>-- 减量运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Default">
      <summary>switch 语句的 default 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Delete">
      <summary>delete 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Divide">
      <summary>/ 除法运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.DivideAssign">
      <summary>/= 除法赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Do">
      <summary>do 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Double">
      <summary>double 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.DoubleColon">
      <summary>:: 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Else">
      <summary>if 语句的 else 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.EndOfFile">
      <summary>所扫描或分析的文件的结尾。 这是默认值。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.EndOfLine">
      <summary>所分析行的结尾。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ensure">
      <summary>ensure 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Enum">
      <summary>enum 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Equal">
      <summary>== 相等比较运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Event">
      <summary>event 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Export">
      <summary>export 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Extends">
      <summary>class 语句的 extends 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.False">
      <summary>false 文本。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Final">
      <summary>final 修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Finally">
      <summary>try 语句的 finally 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.FirstBinaryOp">
      <summary>一个占位符枚举成员，利用其能够进行诸如 if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then... 等比较</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.FirstOp">
      <summary>一个占位符枚举成员，利用其能够进行诸如 if JSToken.FirstOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then... 等比较</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Float">
      <summary>float 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.For">
      <summary>for 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Function">
      <summary>function 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Get">
      <summary>function get 语句的 get 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Goto">
      <summary>goto 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.GreaterThan">
      <summary>&gt; 关系比较运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.GreaterThanEqual">
      <summary>&gt;= 关系比较运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Identifier">
      <summary>标识符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.If">
      <summary>if 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Implements">
      <summary>class 或 interface 语句的 implements 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Import">
      <summary>import 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.In">
      <summary>in 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Increment">
      <summary>++ 递增运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Instanceof">
      <summary>instanceof 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Int">
      <summary>int 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.IntegerLiteral">
      <summary>整数。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Interface">
      <summary>interface 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Internal">
      <summary>internal 修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Invariant">
      <summary>invariant 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastAssign">
      <summary>一个占位符枚举成员，利用其能够进行诸如 if JSToken.Assign &lt;= token &amp;&amp; token &lt;= JSToken.LastAssign then... 等比较</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastBinaryOp">
      <summary>一个占位符枚举成员，利用其能够进行诸如 if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then... 等比较</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastOp">
      <summary>一个占位符枚举成员，利用其能够进行诸如 if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then... 等比较</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastPPOperator">
      <summary>一个占位符枚举成员，利用其能够进行诸如 if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastPPOperator then... 等比较。PPOperators 是可预处理的运算。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftBracket">
      <summary>[ 符号。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftCurly">
      <summary>{ 符号。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftParen">
      <summary>( 符号。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftShift">
      <summary>&lt;&lt; 按位左移运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftShiftAssign">
      <summary>&lt;&lt;= 左移赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LessThan">
      <summary>&lt; 关系比较运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LessThanEqual">
      <summary>&lt;= 关系比较运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalAnd">
      <summary>&amp;&amp; 逻辑 AND 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalNot">
      <summary>! 逻辑 NOT 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalOr">
      <summary>|| 逻辑 OR 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Long">
      <summary>long 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Minus">
      <summary>- 减法运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.MinusAssign">
      <summary>-= 减法赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Modulo">
      <summary>% 取模运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ModuloAssign">
      <summary>%= 取模赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Multiply">
      <summary>* 乘法运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.MultiplyAssign">
      <summary>*= 乘法赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Namespace">
      <summary>namespace 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Native">
      <summary>native 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.New">
      <summary>new 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.None">
      <summary>无标记。 例如，在扫描任何标记之前，或在错误情形中。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.NotEqual">
      <summary>!= 不相等比较运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Null">
      <summary>null 文本。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.NumericLiteral">
      <summary>数字文本。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Package">
      <summary>package 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ParamArray">
      <summary>... 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Plus">
      <summary>+ 加法运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PlusAssign">
      <summary>+= 加法赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PreProcessDirective">
      <summary>预处理器指令。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PreProcessorConstant">
      <summary>预处理器常量。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Private">
      <summary>private 修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Protected">
      <summary>protected 修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Public">
      <summary>public 修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Require">
      <summary>require 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Return">
      <summary>return 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightBracket">
      <summary>] 符号。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightCurly">
      <summary>} 符号。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightParen">
      <summary>) 符号。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightShift">
      <summary>&gt;&gt; 按位右移运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightShiftAssign">
      <summary>&gt;&gt;= 右移赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Sbyte">
      <summary>sbyte 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Semicolon">
      <summary>; 符号。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Set">
      <summary>function set 语句的 set 关键字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Short">
      <summary>short 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Static">
      <summary>static 修饰符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StrictEqual">
      <summary>=== 恒等比较运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StrictNotEqual">
      <summary>!== 恒等比较运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StringLiteral">
      <summary>数字文本。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Super">
      <summary>super 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Switch">
      <summary>switch 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Synchronized">
      <summary>synchronized 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.This">
      <summary>this 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Throw">
      <summary>throw 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Throws">
      <summary>throws 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Transient">
      <summary>transient 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.True">
      <summary>true 文本。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Try">
      <summary>try 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Typeof">
      <summary>typeof 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Uint">
      <summary>uint 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ulong">
      <summary>ulong 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnsignedRightShift">
      <summary>&gt;&gt;&gt; 无符号右移运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnsignedRightShiftAssign">
      <summary>&gt;&gt;&gt;= 无符号右移赋值运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnterminatedComment">
      <summary>未终止的注释。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Use">
      <summary>use 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ushort">
      <summary>ushort 数据类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Var">
      <summary>var 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Void">
      <summary>void 运算符。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Volatile">
      <summary>volatile 保留字。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.While">
      <summary>while 语句。</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.With">
      <summary>with 语句。</summary>
    </member>
    <member name="T:Microsoft.JScript.JSVariableField">
      <summary>支持 JScript 中的变量字段。 这是参数、局部变量、全局变量和类成员的基类。</summary>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.Attributes">
      <summary>获取与此字段关联的属性。</summary>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.DeclaringType">
      <summary>获取声明此字段的类型。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.FieldType">
      <summary>获取此字段的类型。</summary>
      <returns>此字段的类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.JSVariableField.GetCustomAttributes(System.Boolean)">
      <summary>返回一个数组，其中包含附加到此字段的自定义特性。</summary>
      <returns>一个数组，其中包含附加到此字段的自定义特性，或者，如果没有任何自定义特性，则为包含零个元素的数组。</returns>
      <param name="inherit">如果为 true，则搜索此成员的继承层次结构以查找特性。</param>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.Name">
      <summary>获取此字段的名称。</summary>
      <returns>此字段的名称。</returns>
    </member>
    <member name="T:Microsoft.JScript.LateBinding">
      <summary>表示对类成员、可调用的表达式或变量名称的引用。 在运行时，此类将尝试解析对正确值的引用。</summary>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.#ctor(System.String)">
      <summary>使用指定的标识符初始化 <see cref="T:Microsoft.JScript.LateBinding" /> 类的新实例。</summary>
      <param name="name">一个标识绑定引用的字符串。</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.#ctor(System.String,System.Object)">
      <summary>使用指定的标识符和对象初始化 <see cref="T:Microsoft.JScript.LateBinding" /> 类的新实例。</summary>
      <param name="name">一个标识绑定引用的字符串。</param>
      <param name="obj">在其上定义绑定引用的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.Call(System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>通过调用成员来解析绑定引用。</summary>
      <returns>成员调用的返回值。</returns>
      <param name="arguments">要传递给成员的参数。</param>
      <param name="construct">如果要使用构造方法，则为 true；否则为 false。</param>
      <param name="brackets">如果绑定引用包含括号，则为 true；否则为 false。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.CallValue(System.Object,System.Object,System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>通过调用成员来解析绑定引用。</summary>
      <returns>成员调用的返回值。</returns>
      <param name="thisob">在其上定义绑定引用的对象。</param>
      <param name="val">有关要调用的成员的信息。</param>
      <param name="arguments">要传递给成员的参数。</param>
      <param name="construct">如果要使用构造方法，则为 true；否则为 false。</param>
      <param name="brackets">如果绑定引用包含括号，则为 true；否则为 false。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.CallValue2(System.Object,System.Object,System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>通过调用成员来解析绑定引用。</summary>
      <returns>成员调用的返回值。</returns>
      <param name="val">有关要调用的成员的信息。</param>
      <param name="thisob">在其上定义绑定引用的对象。</param>
      <param name="arguments">要传递给成员的参数。</param>
      <param name="construct">如果要使用构造方法，则为 true；否则为 false。</param>
      <param name="brackets">如果绑定引用包含括号，则为 true；否则为 false。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.Delete">
      <summary>从在其上定义了绑定引用的对象中删除绑定引用成员。</summary>
      <returns>如果成功删除成员，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.DeleteMember(System.Object,System.String)">
      <summary>从指定对象中删除指定的成员。</summary>
      <returns>如果成功删除成员，则为 true；否则为 false。</returns>
      <param name="obj">要从其中进行删除的对象。</param>
      <param name="name">要删除的成员。</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.GetNonMissingValue">
      <summary>获取绑定引用的值，并将 <see cref="T:Microsoft.JScript.Missing" /> 值转换为 null。</summary>
      <returns>绑定引用的值；否则为 null。</returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.GetValue2">
      <summary>获取绑定引用的值，如果无法解析绑定引用，则引发异常。</summary>
      <returns>绑定引用的值。</returns>
    </member>
    <member name="F:Microsoft.JScript.LateBinding.obj">
      <summary>存储对对象（在其上定义了绑定引用）的引用。</summary>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.SetIndexedPropertyValueStatic(System.Object,System.Object[],System.Object)">
      <summary>设置索引属性。</summary>
      <param name="obj">在其上定义绑定引用的对象。</param>
      <param name="arguments">要传递给成员的参数。</param>
      <param name="value">属性的新值。</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.SetValue(System.Object)">
      <summary>设置属性。</summary>
      <param name="value">属性的新值。</param>
    </member>
    <member name="T:Microsoft.JScript.LenientArrayPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientArrayPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.concat">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.join">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.pop">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.push">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.reverse">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.shift">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.slice">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.sort">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.splice">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.toLocaleString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.unshift">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientBooleanPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientBooleanPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.valueOf">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientDateConstructor">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.DateConstructor" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientDateConstructor" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDateConstructor.parse">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DateConstructor" /> 类的静态 <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDateConstructor.UTC">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DateConstructor" /> 类的静态 <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientDatePrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientDatePrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.DateConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getDate">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getDay">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getFullYear">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getHours">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMilliseconds">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMinutes">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMonth">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getSeconds">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getTime">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getTimezoneOffset">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCDate">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCDay">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCFullYear">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCHours">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMilliseconds">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMinutes">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMonth">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCSeconds">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getVarDate">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getYear">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setDate">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setFullYear">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setHours">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMilliseconds">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMinutes">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMonth">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setSeconds">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setTime">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCDate">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCFullYear">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCHours">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMilliseconds">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMinutes">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMonth">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCSeconds">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setYear">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toDateString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toGMTString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleDateString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleTimeString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toTimeString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toUTCString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.valueOf">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.DatePrototype" /> 类的静态 <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientEnumeratorPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientEnumeratorPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.atEnd">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.item">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.moveFirst">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.moveNext">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientErrorPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.ErrorPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientErrorPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.name">
      <summary>存储一个包含错误子类型名称的字符串。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ErrorPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientFunctionPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientFunctionPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.apply">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.call">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientGlobalObject">
      <summary>存储构造函数对象、数据类型信息，以及表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态方法的对象。 <see cref="T:Microsoft.JScript.LenientGlobalObject" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.ActiveXObject">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Array">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.boolean">
      <summary>存储对应于 JScript boolean 数据类型的托管类型。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Boolean">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.byte">
      <summary>存储对应于 JScript byte 数据类型的托管类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.char">
      <summary>存储对应于 JScript char 数据类型的托管类型。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Date">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.LenientDateConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.LenientDateConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decimal">
      <summary>存储对应于 JScript decimal 数据类型的托管类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decodeURI">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decodeURIComponent">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.double">
      <summary>存储对应于 JScript double 数据类型的托管类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.encodeURI">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.encodeURIComponent">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" /> 方法。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Enumerator">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Error">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.escape">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.eval">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" /> 方法。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.EvalError">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象定义，并且初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.float">
      <summary>存储对应于 JScript float 数据类型的托管类型。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Function">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.GetObject">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.Infinity">
      <summary>表示正无穷。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.int">
      <summary>存储对应于 JScript int 数据类型的托管类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.isFinite">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.isNaN">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.long">
      <summary>存储对应于 JScript long 数据类型的托管类型。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Math">
      <summary>获取或设置 <see cref="T:Microsoft.JScript.LenientMathObject" /> 对象。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.LenientMathObject" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.NaN">
      <summary>表示不是数字 (NaN) 的值。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Number">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.NumberConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Object">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.parseFloat">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.parseInt">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.RangeError">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象定义，并且初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.ReferenceError">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象定义，并且初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.RegExp">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.sbyte">
      <summary>存储对应于 JScript sbyte 数据类型的托管类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngine">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineBuildVersion">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineMajorVersion">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineMinorVersion">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.short">
      <summary>存储对应于 JScript short 数据类型的托管类型。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.String">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.LenientStringConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.LenientStringConstructor" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.SyntaxError">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象定义，并且初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.TypeError">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象定义，并且初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.uint">
      <summary>存储对应于 JScript uint 数据类型的托管类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ulong">
      <summary>存储对应于 JScript ulong 数据类型的托管类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.undefined">
      <summary>表示为 null 的值。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.unescape">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.GlobalObject" /> 类的静态 <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" /> 方法。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.URIError">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象定义，并且初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ushort">
      <summary>存储对应于 JScript ushort 数据类型的托管类型。</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.VBArray">
      <summary>获取或设置一个基于原型的对象，该对象由 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 构造函数对象定义。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.void">
      <summary>存储与未返回值的函数的返回值对应的托管类型。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientMathObject">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientMathObject" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.abs">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.acos">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.asin">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.atan">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.atan2">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.ceil">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.cos">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.E">
      <summary>存储一个表示欧拉常数的值，该值是自然对数的底，由常数 e 指定。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.exp">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.floor">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LN10">
      <summary>存储一个值，该值表示 10 的对数底 e，即 10 的自然对数。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LN2">
      <summary>存储一个值，该值表示 2 的对数底 e，即 2 的自然对数。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.log">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LOG10E">
      <summary>存储一个值，该值表示 e 的对数底 10，即 e 的常用对数。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LOG2E">
      <summary>存储一个值，该值表示 e 的对数底 2，即 e 的二进制对数。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.max">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.min">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.PI">
      <summary>存储一个值，该值表示圆的周长与其直径的比值，由常数 π 指定。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.pow">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.random">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.random" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.round">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.sin">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.sqrt">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.SQRT1_2">
      <summary>存储一个值，该值表示以下相等的值：(√2)/2、√(½) 和 1/(√2)。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.SQRT2">
      <summary>存储一个表示 √2 的值。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.tan">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.MathObject" /> 类的静态 <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientNumberPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientNumberPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toExponential">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toFixed">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toLocaleString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toPrecision">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.valueOf">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientObjectPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientObjectPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.hasOwnProperty">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.isPrototypeOf">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.propertyIsEnumerable">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.toLocaleString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.valueOf">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientRegExpPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientRegExpPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.compile">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.exec">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.test">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientStringConstructor">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.StringConstructor" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientStringConstructor" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringConstructor.fromCharCode">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringConstructor" /> 类的静态 <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientStringPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientStringPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.anchor">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.big">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.blink">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.bold">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.charAt">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.charCodeAt">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.concat">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.StringConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fixed">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fontcolor">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fontsize">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.indexOf">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.italics">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.lastIndexOf">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.link">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.localeCompare">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.match">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.replace">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.search">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.slice">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.small">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.split">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.strike">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.sub">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.substr">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.substring">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.sup">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLocaleLowerCase">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLocaleUpperCase">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLowerCase">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toString">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toUpperCase">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.valueOf">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.StringPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientVBArrayPrototype">
      <summary>存储对象，这些对象表示 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态方法。 <see cref="T:Microsoft.JScript.LenientVBArrayPrototype" /> 类属于内置对象模型类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.constructor">
      <summary>存储对 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.dimensions">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.getItem">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.lbound">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.toArray">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" /> 方法。</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.ubound">
      <summary>存储一个对象，该对象表示 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类的静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" /> 方法。</summary>
    </member>
    <member name="T:Microsoft.JScript.MathObject">
      <summary>为三角函数、对数函数和其他通用数学函数提供常量和静态方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.abs(System.Double)">
      <summary>计算指定数字的绝对值。</summary>
      <returns>
        <paramref name="d" /> 的绝对值。</returns>
      <param name="d">要计算其绝对值的数字。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.acos(System.Double)">
      <summary>计算指定数字的反余弦值。</summary>
      <returns>
        <paramref name="x" /> 的反余弦值（以弧度为单位）。</returns>
      <param name="x">要计算其反余弦值的数字。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.asin(System.Double)">
      <summary>计算指定数字的反正弦值。</summary>
      <returns>
        <paramref name="x" /> 的反正弦值（以弧度为单位）。</returns>
      <param name="x">要计算其反正弦值的数字。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.atan(System.Double)">
      <summary>计算指定数字的反正切值。</summary>
      <returns>
        <paramref name="x" /> 的反正切值（以弧度为单位）。</returns>
      <param name="x">要计算其反正切值的数字。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)">
      <summary>计算指定数字的商的反正切值。</summary>
      <returns>
        <paramref name="dy" />/<paramref name="dx" /> 的反正切值（以弧度为单位）。</returns>
      <param name="dy">要计算其反正切值的商的分子。</param>
      <param name="dx">要计算其反正切值的商的分母。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.ceil(System.Double)">
      <summary>计算指定数字的上限，即大于或等于该指定数字的最小整数。</summary>
      <returns>
        <paramref name="x" /> 的上限。</returns>
      <param name="x">要计算其上限的数字。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.cos(System.Double)">
      <summary>计算指定角度的余弦值。</summary>
      <returns>
        <paramref name="x" /> 的余弦值。</returns>
      <param name="x">以弧度计量的角度。</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.E">
      <summary>存储一个表示欧拉常量的值，该值是自然对数的底，由常量 e 指定。</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.exp(System.Double)">
      <summary>计算数字 e 的指定次幂，其中 e 是欧拉常量（自然对数的底）。</summary>
      <returns>数字 e 的 <paramref name="x" /> 次幂。</returns>
      <param name="x">对 <paramref name="e" /> 进行幂运算的幂。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.floor(System.Double)">
      <summary>计算指定数字的下限，即小于或等于该指定数字的最大整数。</summary>
      <returns>
        <paramref name="x" /> 的下限。</returns>
      <param name="x">要计算其下限的数字。</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LN10">
      <summary>存储一个值，该值表示 10 的对数底 e，即 10 的自然对数。</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LN2">
      <summary>存储一个值，该值表示 2 的对数底 e，即 2 的自然对数。</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.log(System.Double)">
      <summary>计算指定数字的以 e 为底的对数，即该指定数字的自然对数。</summary>
      <returns>
        <paramref name="x" /> 的自然对数。</returns>
      <param name="x">要计算其自然对数的数字。</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LOG10E">
      <summary>存储一个值，该值表示 e 的对数底 10，即 e 的常用对数。</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LOG2E">
      <summary>存储一个值，该值表示 e 的对数底 2，即 e 的二进制对数。</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])">
      <summary>返回两个或更多指定数字中的最大值。</summary>
      <returns>
        <paramref name="x" />、<paramref name="y" /> 及 <paramref name="args" /> 所包含数字之间的最大值。</returns>
      <param name="x">要比较的第一个数字。</param>
      <param name="y">要比较的第二个数字。</param>
      <param name="args">要比较的其他数字。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])">
      <summary>返回两个或更多指定数字中的最小值。</summary>
      <returns>
        <paramref name="x" />、<paramref name="y" /> 及 <paramref name="args" /> 所包含数字之间的最小值。</returns>
      <param name="x">要比较的第一个数字。</param>
      <param name="y">要比较的第二个数字。</param>
      <param name="args">要比较的其他数字。</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.PI">
      <summary>存储一个值，该值表示圆的周长与其直径的比值，由常数 π 指定。</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)">
      <summary>计算指定数字的指定次幂。</summary>
      <returns>数字 <paramref name="dx" /> 的 <paramref name="dy" /> 次幂。</returns>
      <param name="dx">要计算 <paramref name="dy" /> 次幂的数字。</param>
      <param name="dy">对 <paramref name="dx" /> 进行幂运算的幂。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.random">
      <summary>生成一个介于 0 和 1 之间的随机数。 此方法不生成加密安全随机数。</summary>
      <returns>一个大于或等于 0 并小于 1 的数字。</returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.round(System.Double)">
      <summary>将指定数字向下或向上舍入为最接近的整数。</summary>
      <returns>如果 <paramref name="d" /> 的小数部分小于该数字与下一个紧邻整数的差的一半，则 <paramref name="d" /> 向下舍入。 如果 <paramref name="d" /> 的小数部分等于或大于该数字与下一个紧邻整数的差的一半，则 <paramref name="d" /> 向上舍入。</returns>
      <param name="d">要舍入的数字。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.sin(System.Double)">
      <summary>计算指定角度的正弦值。</summary>
      <returns>
        <paramref name="x" /> 的正弦值。</returns>
      <param name="x">以弧度计量的角度。</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.sqrt(System.Double)">
      <summary>计算指定数字的平方根。</summary>
      <returns>
        <paramref name="x" /> 的平方根。</returns>
      <param name="x">要计算其平方根的数字。</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.SQRT1_2">
      <summary>存储一个值，该值表示以下相等的值：(√2)/2、√(½) 和 1/(√2)。</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.SQRT2">
      <summary>存储一个表示 √2 的值。</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.tan(System.Double)">
      <summary>计算指定角度的正切值。</summary>
      <returns>
        <paramref name="x" /> 的正切值。</returns>
      <param name="x">以弧度计量的角度。</param>
    </member>
    <member name="T:Microsoft.JScript.MemberInfoInitializer">
      <summary>定义外部 COM 对象必须实现的方法。 外部 COM 实现使用此接口向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" /> 才能绑定到外部对象。 此接口由 <see cref="T:Microsoft.JScript.COMFieldInfo" />、<see cref="T:Microsoft.JScript.COMMethodInfo" /> 和 <see cref="T:Microsoft.JScript.COMPropertyInfo" /> 实现。</summary>
    </member>
    <member name="M:Microsoft.JScript.MemberInfoInitializer.GetCOMMemberInfo">
      <summary>在类中实现时，获取一个托管对象，该对象使 JScript 能够与外部 COM 成员通信。</summary>
      <returns>一个托管对象，该对象使 JScript 能够与外部 COM 成员通信。</returns>
    </member>
    <member name="M:Microsoft.JScript.MemberInfoInitializer.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>在类中实现时，对信息进行初始化，该信息使 JScript 能够与指定的外部 COM 成员通信。</summary>
      <param name="name">外部 COM 成员的名称。</param>
      <param name="dispatch">使 JScript 能够调用、获取和设置外部 COM 成员的信息。</param>
    </member>
    <member name="T:Microsoft.JScript.MemberInfoList">
      <summary>维护 <see cref="T:System.Reflection.MemberInfo" /> 元素的列表。</summary>
    </member>
    <member name="T:Microsoft.JScript.MethodInvoker">
      <summary>表示特定方法的调用程序。 由 <see cref="T:Microsoft.JScript.JSMethodInfo" /> 类用于调用方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.MethodInvoker.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.MethodInvoker" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.MethodInvoker.Invoke(System.Object,System.Object[])">
      <summary>在派生类中重写时，调用方法。</summary>
      <returns>调用方法的结果。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="parameters">要用于方法的参数。</param>
    </member>
    <member name="T:Microsoft.JScript.Missing">
      <summary>表示已经实例化但尚未设置其值的变量的值。</summary>
    </member>
    <member name="F:Microsoft.JScript.Missing.Value">
      <summary>指定已经实例化但尚未设置其值的变量的值。</summary>
    </member>
    <member name="T:Microsoft.JScript.Namespace">
      <summary>表示命名空间。</summary>
    </member>
    <member name="M:Microsoft.JScript.Namespace.GetNamespace(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>创建并返回 <see cref="T:Microsoft.JScript.Namespace" /> 类的新实例。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.Namespace" /> 类的新实例。</returns>
      <param name="name">命名空间的名称。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.NoContextException">
      <summary>在没有与 <see cref="T:Microsoft.JScript.JScriptException" /> 关联的代码 <see cref="T:Microsoft.JScript.Context" /> 时引发的异常。</summary>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.NoContextException" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据初始化 <see cref="T:Microsoft.JScript.NoContextException" /> 类的新实例。</summary>
      <param name="s">有关所引发异常的序列化对象数据。</param>
      <param name="c">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:Microsoft.JScript.NoContextException" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.NoContextException" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
      <param name="e">导致当前异常的异常。</param>
    </member>
    <member name="T:Microsoft.JScript.NotRecommended">
      <summary>指示不建议使用某个方法或字段。</summary>
    </member>
    <member name="M:Microsoft.JScript.NotRecommended.#ctor(System.String)">
      <summary>初始化 <see cref="T:Microsoft.JScript.NotRecommended" /> 特性类的新实例。</summary>
      <param name="message">不建议使用的方法或字段的名称。</param>
    </member>
    <member name="P:Microsoft.JScript.NotRecommended.IsError">
      <summary>获取一个值，该值指示使用不建议使用的方法或字段是否算错。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.NotRecommended.Message">
      <summary>获取不建议使用的方法或字段的名称。</summary>
      <returns>不建议使用的方法或字段的名称。</returns>
    </member>
    <member name="T:Microsoft.JScript.NumberConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.NumberConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.NumberConstructor.Invoke(System.Object)">
      <summary>将指定对象转换为数字。</summary>
      <returns>表示为数字的 <paramref name="arg" />（如果可能）。</returns>
      <param name="arg">要转换的对象。</param>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.MAX_VALUE">
      <summary>表示 <see cref="T:System.Double" /> 的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.MIN_VALUE">
      <summary>表示大于零的最小正 <see cref="T:System.Double" /> 值。 此字段为常数。</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.NaN">
      <summary>表示不是数字 (NaN) 的值。 此字段为常数。</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.NEGATIVE_INFINITY">
      <summary>表示负无穷。 此字段为常数。</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.POSITIVE_INFINITY">
      <summary>表示正无穷。 此字段为常数。</summary>
    </member>
    <member name="T:Microsoft.JScript.NumberObject">
      <summary>表示一个数字对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.NumberObject.#ctor(Microsoft.JScript.ScriptObject,System.Object)">
      <summary>初始化 <see cref="T:Microsoft.JScript.NumberObject" /> 类的新实例。</summary>
      <param name="parent">对象的父项。</param>
      <param name="value">该类所表示的基础值。</param>
    </member>
    <member name="M:Microsoft.JScript.NumberObject.GetType">
      <summary>返回基础值对象的类型，或返回 <see cref="T:Microsoft.JScript.NumberObject" />。</summary>
      <returns>基础值对象的类型，或 <see cref="T:Microsoft.JScript.NumberObject" />。</returns>
    </member>
    <member name="T:Microsoft.JScript.NumberPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.NumberObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.NumberPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)">
      <summary>创建指定 <see cref="T:Microsoft.JScript.NumberObject" /> 的字符串表示形式，它使用科学 (E) 表示法。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="fractionDigits">一个介于 0 和 20 之间的数字，该数字表示要显示的小数位数。 默认值为 16。</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)">
      <summary>创建指定 <see cref="T:Microsoft.JScript.NumberObject" /> 的字符串表示形式，它显示指定的十进制数字位数。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="fractionDigits">一个介于 0 和 20 之间的数字，该数字表示要显示的小数位数。 默认值为 0。</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)">
      <summary>创建指定对象的字符串表示形式，它基于 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> 和 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)">
      <summary>创建指定 <see cref="T:Microsoft.JScript.NumberObject" /> 的字符串表示形式，它显示指定的精度数字位数。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="precision">一个介于 0 和 21 之间的数字，该数字表示要显示的精度数字位数。 <paramref name="Precision digits" /> 是小数数字和指数数字的组合。</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)">
      <summary>创建指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="radix">一个介于 2 和 36 之间的数字，该数字描述表示 <paramref name="thisob" /> 所采用的数字系统的基数。 默认值为 10。</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)">
      <summary>返回指定 <see cref="T:Microsoft.JScript.NumberObject" /> 的值。</summary>
      <returns>
        <paramref name="thisob" /> 的值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.NumericBinary">
      <summary>对数值操作数执行二元运算。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.JScript.NumericBinary" /> 类的新实例。</summary>
      <param name="operatorTok">
        <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。 指定要执行的操作。</param>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.DoOp(System.Object,System.Object,Microsoft.JScript.JSToken)">
      <summary>对指定的数值操作数执行指定的二元运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
      <param name="operatorTok">
        <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。 指定要执行的操作。</param>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.EvaluateNumericBinary(System.Object,System.Object)">
      <summary>对指定的数值操作数执行二元运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="T:Microsoft.JScript.NumericUnary">
      <summary>对数值操作数执行一元运算。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.NumericUnary.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.JScript.NumericUnary" /> 类的新实例。</summary>
      <param name="operatorTok">
        <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。 指定要执行的操作。</param>
    </member>
    <member name="M:Microsoft.JScript.NumericUnary.EvaluateUnary(System.Object)">
      <summary>对数值操作数执行一元运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v">操作数。</param>
    </member>
    <member name="T:Microsoft.JScript.ObjectConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.ConstructObject">
      <summary>创建基于原型的对象的实例。</summary>
      <returns>对象的实例。</returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.Invoke(System.Object[])">
      <summary>调用基于原型的对象的方法，在指定的参数中传递。</summary>
      <returns>方法调用的结果。</returns>
      <param name="args">要传递给方法的参数。</param>
    </member>
    <member name="T:Microsoft.JScript.ObjectPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.JSObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.ObjectPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)">
      <summary>确定指定的对象是否包含指定的属性。</summary>
      <returns>如果 <paramref name="name" /> 是 <paramref name="thisob" /> 的属性并且已经设置，则为 true；否则为 false。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="name">要搜索的属性。</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)">
      <summary>确定是否可将第一个指定对象实例化为第二个指定对象的类型。</summary>
      <returns>如果 <paramref name="ob" /> 在 <paramref name="thisob" /> 的继承层次结构中，则为 true；否则为 false。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="ob">具有所需类型的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)">
      <summary>确定是否可枚举指定对象的指定属性。</summary>
      <returns>如果 <paramref name="name" /> 是可枚举的属性，则为 true；否则为 false。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="name">要测试的属性。</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)">
      <summary>通过使用 <see cref="T:Microsoft.JScript.Convert" /> 类，创建指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式，它是通过 <see cref="T:Microsoft.JScript.Convert" /> 类创建的。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)">
      <summary>创建指定对象的字符串表示形式。</summary>
      <returns>如果定义了一个对象的类的名称，则为该名称；否则为对象的 <see cref="T:System.Type" /> 的 <see cref="P:System.Reflection.MemberInfo.Name" />。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)">
      <summary>返回指定的对象。</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.Override">
      <summary>指示方法或字段重写基类中的方法或字段。</summary>
    </member>
    <member name="M:Microsoft.JScript.Override.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.Override" /> 类的新实例。</summary>
    </member>
    <member name="T:Microsoft.JScript.Package">
      <summary>创建 JScript 代码包以供其他代码使用。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Package.JScriptPackage(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>使用指定脚本引擎创建指定的包。</summary>
      <param name="rootName">包的名称。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.ParserException">
      <summary>JScript 分析器使用此类表示分析器异常。</summary>
    </member>
    <member name="T:Microsoft.JScript.Plus">
      <summary>执行加法和串联运算。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Plus.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.Plus" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.Plus.DoOp(System.Object,System.Object)">
      <summary>执行加法或串联运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="M:Microsoft.JScript.Plus.EvaluatePlus(System.Object,System.Object)">
      <summary>执行加法或串联运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="T:Microsoft.JScript.PostOrPrefixOperator">
      <summary>执行与前缀和后缀语法对应的增量和减量操作。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.PostOrPrefixOperator.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.JScript.PostOrPrefixOperator" /> 类的新实例。</summary>
      <param name="operatorTok">
        <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。 指定要执行的操作。</param>
    </member>
    <member name="M:Microsoft.JScript.PostOrPrefixOperator.EvaluatePostOrPrefix(System.Object@)">
      <summary>依据指定的操作数执行增量或减量操作。</summary>
      <returns>操作的结果。</returns>
      <param name="v">操作数。</param>
    </member>
    <member name="T:Microsoft.JScript.RangeErrorObject">
      <summary>表示范围错误。 例如，在使用不正确的索引访问数组元素时可能会发生范围错误。</summary>
    </member>
    <member name="T:Microsoft.JScript.ReferenceAttribute">
      <summary>表示对程序集的引用。</summary>
    </member>
    <member name="M:Microsoft.JScript.ReferenceAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:Microsoft.JScript.ReferenceAttribute" /> 类的新实例。</summary>
      <param name="reference">对程序集的引用。</param>
    </member>
    <member name="F:Microsoft.JScript.ReferenceAttribute.reference">
      <summary>指定对程序集的引用。</summary>
    </member>
    <member name="T:Microsoft.JScript.ReferenceErrorObject">
      <summary>表示引用错误。 例如，在引用未声明的变量时可能发生引用错误。</summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.Construct(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>为指定正则表达式模式和标志创建一个新 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象。</summary>
      <returns>一个新的 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象。</returns>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="ignoreCase">如果使用不区分大小写的匹配，则为 true；否则为 false。</param>
      <param name="global">如果使用全局匹配，则为 true；否则为 false。</param>
      <param name="multiline">如果使用多行匹配，则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.index">
      <summary>在前移索引之前获取最后一个成功匹配的索引。</summary>
      <returns>最后一个成功匹配（如果有）的索引。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.input">
      <summary>获取或设置用于正则表达式搜索的输入字符串。</summary>
      <returns>用于正则表达式搜索的输入字符串。</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.Invoke(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastIndex">
      <summary>在前移索引之后获取最后一个成功匹配的索引。</summary>
      <returns>最后一个成功匹配（如果有）的索引。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastMatch">
      <summary>获取最后一个成功匹配的字符串表示形式。</summary>
      <returns>最后一个成功匹配（如果有）的字符串表示形式。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastParen">
      <summary>从最后一个匹配的 <see cref="P:System.Text.RegularExpressions.Match.Groups" /> 中获取最后一个 <see cref="T:System.Text.RegularExpressions.Group" />。</summary>
      <returns>最后一个组（如果有）的字符串表示形式。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.leftContext">
      <summary>获取输入字符串的子字符串（介于输入开头和最后一个成功匹配的开头之间）。</summary>
      <returns>输入字符串（如果有）的子字符串。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.rightContext">
      <summary>获取输入字符串的子字符串（介于最后一个成功匹配的开头和输入结尾之间）。</summary>
      <returns>输入字符串（如果有）的子字符串。</returns>
    </member>
    <member name="T:Microsoft.JScript.RegExpMatch">
      <summary>表示正则表达式匹配的结果。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpObject">
      <summary>表示一个正则表达式对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.global">
      <summary>获取一个值，指示是否使用匹配所有匹配项的全局标志 (/g) 来执行搜索。</summary>
      <returns>如果执行全局搜索，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.ignoreCase">
      <summary>获取一个值，指示是否用不区分大小写标志 (/i) 来执行搜索。</summary>
      <returns>如果执行不区分大小写的搜索，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.lastIndex">
      <summary>获取或设置最后一个成功匹配的索引。</summary>
      <returns>最后一个成功匹配（如果有）的索引。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.multiline">
      <summary>获取一个值，指示是否用多行标志 (/m) 来执行搜索。</summary>
      <returns>如果在多行模式下执行搜索，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.source">
      <summary>获取由此对象表示的正则表达式模式。</summary>
      <returns>由此对象表示的正则表达式模式。</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpObject.ToString">
      <summary>创建此对象的字符串表示形式，其中包含正则表达式模式和标志。</summary>
      <returns>此对象的字符串表示形式。</returns>
    </member>
    <member name="T:Microsoft.JScript.RegExpPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)">
      <summary>为指定正则表达式模式和标志创建并编译一个新 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象。</summary>
      <returns>一个新的 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="source">要搜索的正则表达式模式。</param>
      <param name="flags">忽略大小写、全局和多行模式的标志。</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)">
      <summary>在指定对象上运行对指定正则表达式模式的搜索。</summary>
      <returns>正则表达式模式搜索所返回的结果。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="input">要搜索的正则表达式模式。</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)">
      <summary>测试在指定对象上对指定正则表达式模式进行的搜索。</summary>
      <returns>如果搜索成功，则为 true；否则为 false。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="input">要搜索的正则表达式模式。</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)">
      <summary>创建指定对象的字符串表示形式，其中包含正则表达式模式和标志。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.Relational">
      <summary>执行关系比较操作。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Relational.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.JScript.Relational" /> 类的新实例。</summary>
      <param name="operatorTok">
        <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。 指定要执行的比较。</param>
    </member>
    <member name="M:Microsoft.JScript.Relational.EvaluateRelational(System.Object,System.Object)">
      <summary>依据指定的操作数执行关系比较操作。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="M:Microsoft.JScript.Relational.JScriptCompare(System.Object,System.Object)">
      <summary>依据指定的操作数执行关系比较操作。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="T:Microsoft.JScript.ReturnOutOfFinally">
      <summary>表示当代码执行超出 finally 块返回时的异常状态。</summary>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> 类的新实例。</summary>
      <param name="m">描述错误的消息。</param>
      <param name="e">导致当前异常的异常。</param>
    </member>
    <member name="T:Microsoft.JScript.Runtime">
      <summary>提供实用工具函数。</summary>
    </member>
    <member name="M:Microsoft.JScript.Runtime.DoubleToInt64(System.Double)">
      <summary>将指定的 <see cref="T:System.Double" /> 值转换为 <see cref="T:System.Int64" />。</summary>
      <returns>转换为 <see cref="T:System.Int64" /> 的 <paramref name="val" />。</returns>
      <param name="val">要转换的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Runtime.Equals(System.Object,System.Object)">
      <summary>确定两个指定的值是否相等。</summary>
      <returns>如果值相等，则为 true；如果值不相等，则为 false。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="M:Microsoft.JScript.Runtime.UncheckedDecimalToInt64(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为 <see cref="T:System.Int64" />。</summary>
      <returns>转换为 <see cref="T:System.Int64" /> 的 <paramref name="val" />。</returns>
      <param name="val">要转换的值。</param>
    </member>
    <member name="T:Microsoft.JScript.ScriptBlock">
      <summary>表示 JScript 代码块。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="T:Microsoft.JScript.ScriptFunction">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 大多数构造函数类（比如 <see cref="T:Microsoft.JScript.DateConstructor" />、<see cref="T:Microsoft.JScript.NumberConstructor" />、<see cref="T:Microsoft.JScript.StringConstructor" /> 和 <see cref="T:Microsoft.JScript.ObjectConstructor" />）都从此类继承。 此类属于对象和函数类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.#ctor(Microsoft.JScript.ScriptObject,System.String)">
      <summary>初始化 <see cref="T:Microsoft.JScript.ScriptFunction" /> 类的新实例。</summary>
      <param name="parent">此函数所构造对象的父原型。</param>
      <param name="name">此函数所构造对象的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.GetPrototypeForConstructedObject">
      <summary>获取此构造函数的原型对象。</summary>
      <returns>此构造函数的原型对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.ScriptFunction.ilength">
      <summary>存储元素的数量，这些元素位于 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> 方法的 <paramref name="args" /> 参数中。</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.Invoke(System.Object,System.Object[])">
      <summary>调用基于原型的对象的方法，在指定的参数中传递。</summary>
      <returns>方法调用的结果。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="args">要传递给方法的参数。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>调用指定的成员。</summary>
      <returns>成员调用的返回值。</returns>
      <param name="name">要调用的成员名。</param>
      <param name="invokeAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="target">对其调用成员的对象。 此对象必须为当前脚本对象。</param>
      <param name="args">包含要调用的成员的参数数目、顺序和类型的对象数组。 如果没有参数，则这是一个空数组。</param>
      <param name="modifiers">长度与 <paramref name="args" /> 参数相同的数组。 它表示元数据中被调用成员的参数特性。</param>
      <param name="culture">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
      <param name="namedParameters">参数的数组。</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptFunction.length">
      <summary>获取或设置元素的数量，这些元素位于 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> 方法的 <paramref name="args" /> 参数中。</summary>
      <returns>位于 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> 方法的 <paramref name="args" /> 参数中的元素的数量。</returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptFunction.prototype">
      <summary>获取或设置此构造函数的原型对象。</summary>
      <returns>此构造函数的原型对象。</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.ToString">
      <summary>返回构造函数的字符串表示形式。</summary>
      <returns>一个字符串，其中包含构造函数的名称和代码的占位符。</returns>
    </member>
    <member name="T:Microsoft.JScript.ScriptObject">
      <summary>支持所有 JScript 类。 这是所有 JScript 类的最终基类。 此类属于对象和函数类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptObject.engine">
      <summary>存储对脚本引擎的引用。</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>获取具有指定名称的字段。</summary>
      <returns>一个具有指定 <paramref name="name" /> 的字段，若脚本对象不包含该字段，则为 null。</returns>
      <param name="name">要获取的字段的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.FieldInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有字段。</summary>
      <returns>对象的数组，其中包含当前脚本对象的所有字段。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>在派生类中重写时，获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于与指定名称匹配的所有成员。</summary>
      <returns>与 <paramref name="name" /> 参数匹配的对象的数组。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>在派生类中重写时，获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有成员。</summary>
      <returns>对象的数组，其中包含当前脚本对象的所有成员。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>获取具有指定名称的方法。</summary>
      <returns>一个具有指定 <paramref name="name" /> 的方法，若脚本对象不包含该方法，则为 null。</returns>
      <param name="name">要获取的方法的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>通过使用指定的选择条件来获取具有指定名称的方法。</summary>
      <returns>一个具有指定 <paramref name="name" /> 的方法，若脚本对象不包含该方法，则为 null。</returns>
      <param name="name">要搜索的方法的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="types">用于定位匹配方法的参数类型。</param>
      <param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有方法。</summary>
      <returns>对象的数组，其中包含当前脚本对象的所有方法。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetParent">
      <summary>获取对父对象的引用。</summary>
      <returns>对父对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.PropertyInfo" /> 对象的数组，这些对象对应于当前脚本对象的所有属性。</summary>
      <returns>对象的数组，其中包含当前脚本对象的所有属性。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>获取具有指定名称的属性。</summary>
      <returns>一个具有指定 <paramref name="name" /> 的属性，若脚本对象不包含该属性，则为 null。</returns>
      <param name="name">要获取的属性的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>通过使用指定的选择条件来获取具有指定名称的属性。</summary>
      <returns>一个具有指定 <paramref name="name" /> 的属性，若脚本对象不包含该属性，则为 null。</returns>
      <param name="name">要搜索的属性的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="returnType">该属性必须具有的返回值的类型。</param>
      <param name="types">所搜索的属性的索引类型。 用于索引属性，如类的索引器。</param>
      <param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>调用指定的成员。</summary>
      <returns>成员调用的返回值。</returns>
      <param name="name">要调用的成员名。</param>
      <param name="invokeAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="target">对其调用成员的对象。 此对象必须为当前脚本对象。</param>
      <param name="args">包含要调用的成员的参数数目、顺序和类型的对象数组。 如果没有参数，则这是一个空数组。</param>
      <param name="modifiers">长度与 args 参数相同的数组。 它表示元数据中被调用成员的参数特性。</param>
      <param name="locale">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
      <param name="namedParameters">参数的数组。</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Double)">
      <summary>获取或设置由指定的 <see cref="T:System.Double" /> 索引值指定的脚本对象的成员。</summary>
      <returns>
        <paramref name="index" /> 处的成员的值。</returns>
      <param name="index">成员的索引。</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Int32)">
      <summary>获取或设置由指定的 <see cref="T:System.Int32" /> 索引值指定的脚本对象的成员。</summary>
      <returns>
        <paramref name="index" /> 处的成员的值。</returns>
      <param name="index">成员的索引。</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Object[])">
      <summary>获取或设置由指定的名称、<see cref="T:System.Double" /> 索引值或 <see cref="T:System.Int32" /> 索引值指定的脚本对象的成员。</summary>
      <returns>在 <paramref name="pars" /> 中指定的成员的值。</returns>
      <param name="pars">成员的名称或索引。</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.String)">
      <summary>获取或设置由指定名称指定的脚本对象的成员。</summary>
      <returns>名为 <paramref name="name" /> 的成员的值。</returns>
      <param name="name">成员的名称。</param>
    </member>
    <member name="F:Microsoft.JScript.ScriptObject.parent">
      <summary>存储对父对象的引用。</summary>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.UnderlyingSystemType">
      <summary>获取脚本对象的类型。</summary>
      <returns>脚本对象的类型。</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)">
      <summary>创建一个包含指定成员以及指定对象的被包装对象。</summary>
      <returns>一个具有被包装对象的一元素数组，该被包装对象包含成员信息和 <paramref name="obj" />。</returns>
      <param name="member">要包装的成员。</param>
      <param name="obj">在其上定义 <paramref name="member" /> 的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)">
      <summary>创建被包装对象（其中包含指定的成员以及指定的对象）的数组。</summary>
      <returns>被包装对象的数组，每个被包装对象均包含成员信息和 <paramref name="obj" /> 的副本。</returns>
      <param name="members">要包装的成员。</param>
      <param name="obj">在其上定义 <paramref name="members" /> 的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)">
      <summary>创建被包装对象（其中包含指定的成员以及指定的对象）的数组，并将结果缓存在指定的数据存储中。</summary>
      <returns>被包装对象的数组，每个被包装对象均包含成员信息和 <paramref name="obj" /> 的副本。</returns>
      <param name="members">要包装的成员。</param>
      <param name="obj">在其上定义 <paramref name="members" /> 的对象。</param>
      <param name="cache">被包装对象的临时数据存储。</param>
    </member>
    <member name="T:Microsoft.JScript.ScriptStream">
      <summary>表示数据流。 此类将其数据发送到 <see cref="T:Microsoft.JScript.COMCharStream" /> 或 <see cref="T:System.Console" /> 流。</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.#ctor">
      <summary>初始化 <see cref="T:Microsoft.JScript.ScriptStream" /> 类的新实例。</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptStream.Error">
      <summary>存储对标准控制台 <see cref="P:System.Console.Error" /> 流或自定义 <see cref="T:Microsoft.JScript.COMCharStream" /> 的引用。</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptStream.Out">
      <summary>存储对标准控制台 <see cref="P:System.Console.Out" /> 流或自定义 <see cref="T:Microsoft.JScript.COMCharStream" /> 的引用。</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.PrintStackTrace">
      <summary>编写一个描述调用堆栈当前内容的字符串。 该字符串将写入 <see cref="F:Microsoft.JScript.ScriptStream.Out" /> 流中。</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.PrintStackTrace(System.Exception)">
      <summary>编写一个在引发指定异常时描述调用堆栈内容的字符串。 该字符串将写入 <see cref="F:Microsoft.JScript.ScriptStream.Out" /> 流中。</summary>
      <param name="e">引发的异常。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.Write(System.String)">
      <summary>将指定的字符串写入流中。 该字符串将写入 <see cref="F:Microsoft.JScript.ScriptStream.Out" /> 流中。</summary>
      <param name="str">要写入流的字符串。</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.WriteLine(System.String)">
      <summary>将指定的字符串及其后面所跟的行终止符写入流中。 该字符串将写入 <see cref="F:Microsoft.JScript.ScriptStream.Out" /> 流中。</summary>
      <param name="str">要写入流的字符串。</param>
    </member>
    <member name="T:Microsoft.JScript.SimpleHashtable">
      <summary>用于项内部存储的哈希表。</summary>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.#ctor(System.UInt32)">
      <summary>使用指定的阈值初始化 <see cref="T:Microsoft.JScript.SimpleHashtable" /> 类的新实例。</summary>
      <param name="threshold">项数，达到此项数时必须调整哈希表的大小。</param>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.GetEnumerator">
      <summary>获取哈希表的枚举数。</summary>
      <returns>哈希表的枚举数。</returns>
    </member>
    <member name="P:Microsoft.JScript.SimpleHashtable.Item(System.Object)">
      <summary>获取或设置具有指定键的项。</summary>
      <returns>具有指定 <paramref name="key" /> 的项的值。</returns>
      <param name="key">要获取或设置的项的键。</param>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.Remove(System.Object)">
      <summary>从哈希表中移除具有指定键的项。</summary>
      <param name="key">要移除的项的键。</param>
    </member>
    <member name="T:Microsoft.JScript.SourceState">
      <summary>指定源代码文本的状态。 此类与提供信息以在编辑器中对 JScript 代码进行着色的其他类一起使用。</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_COMMENT">
      <summary>注释文本。</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_NORMAL">
      <summary>普通文本。</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_STRING">
      <summary>字符串文本。</summary>
    </member>
    <member name="T:Microsoft.JScript.StackFrame">
      <summary>表示用于执行代码的堆栈帧。 此类包含用于解析范围的方法。 它属于编译和运行时状态类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.StackFrame.closureInstance">
      <summary>存储对当前堆栈帧的调用方的引用。</summary>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetDefaultThisObject">
      <summary>获取当前默认范围，该范围将是 with 语句范围包含的对象，或是全局范围。</summary>
      <returns>当前默认范围。</returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetField(System.String,System.Int32)">
      <summary>通过搜索范围层次结构来获取具有指定名称的字段。 此方法只搜索由词法级别指定的范围。</summary>
      <returns>在所有情况下均为 null。</returns>
      <param name="name">要搜索的字段的名称。</param>
      <param name="lexLevel">要搜索的词法级别。</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetGlobalScope">
      <summary>获取全局范围，方法是搜索范围层次结构，直至找到一个包括静态变量的范围（例如模块范围）为止。</summary>
      <returns>全局范围。</returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>检索 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于与指定名称匹配的所有成员。</summary>
      <returns>与 <paramref name="name" /> 参数匹配的对象的数组。</returns>
      <param name="name">要搜索的成员名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMembers(System.Reflection.BindingFlags)">
      <summary>检索 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于当前对象的所有成员。</summary>
      <returns>对象的数组，其中包含当前对象的所有成员。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMemberValue(System.String,System.Int32)">
      <summary>通过搜索范围层次结构来获取指定成员的值。 此方法只搜索由词法级别指定的范围。</summary>
      <returns>成员 <paramref name="name" /> 的值。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="lexlevel">要搜索的词法级别。</param>
    </member>
    <member name="F:Microsoft.JScript.StackFrame.localVars">
      <summary>存储此堆栈帧的局部变量。</summary>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.Microsoft#JScript#IActivationObject#GetLocalField(System.String)">
      <summary>获取具有指定名称的字段的局部声明。 在编译时使用此方法来进行错误检查。</summary>
      <returns>字段的局部声明。</returns>
      <param name="name">字段名。</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.PushStackFrameForMethod(System.Object,Microsoft.JScript.JSLocalField[],Microsoft.JScript.Vsa.VsaEngine)">
      <summary>为方法创建一个新的 <see cref="T:Microsoft.JScript.StackFrame" /> 对象，并将其推送到全局范围堆栈上。</summary>
      <param name="thisob">包含该方法的对象。</param>
      <param name="fields">堆栈帧的局部变量。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.PushStackFrameForStaticMethod(System.RuntimeTypeHandle,Microsoft.JScript.JSLocalField[],Microsoft.JScript.Vsa.VsaEngine)">
      <summary>为静态方法创建一个新的 <see cref="T:Microsoft.JScript.StackFrame" /> 对象，并将其推送到全局范围堆栈上。</summary>
      <param name="thisclass">其中包含静态方法的类。</param>
      <param name="fields">堆栈帧的局部变量。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.StrictEquality">
      <summary>执行比较运算。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.StrictEquality.JScriptStrictEquals(System.Object,System.Object)">
      <summary>执行比较运算。</summary>
      <returns>操作的结果。</returns>
      <param name="v1">第一个操作数。</param>
      <param name="v2">第二个操作数。</param>
    </member>
    <member name="T:Microsoft.JScript.StringConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])">
      <summary>将指定数组的每个元素转换为字符，并将它们连接起来。</summary>
      <returns>
        <paramref name="arg" /> 的字符串表示形式。</returns>
      <param name="args">要转换为字符串的元素。</param>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.Invoke(System.Object)">
      <summary>将指定对象转换为字符串。</summary>
      <returns>
        <paramref name="arg" /> 的字符串表示形式。</returns>
      <param name="arg">要转换为字符串的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.StringObject">
      <summary>表示一个字符串对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.StringObject.#ctor(Microsoft.JScript.ScriptObject,System.String)">
      <summary>初始化 <see cref="T:Microsoft.JScript.StringObject" /> 类的新实例。</summary>
      <param name="prototype">对象的父项。</param>
      <param name="value">该类所表示的基础值。</param>
    </member>
    <member name="M:Microsoft.JScript.StringObject.Equals(System.Object)">
      <summary>确定此字符串是否与指定的字符串具有相同的值。</summary>
      <returns>如果此字符串与 <paramref name="ob" /> 具有相同的值，则为 true；否则为 false。</returns>
      <param name="ob">要比较的字符串。</param>
    </member>
    <member name="M:Microsoft.JScript.StringObject.GetHashCode">
      <summary>返回该字符串的哈希代码。</summary>
      <returns>此字符串的哈希代码。</returns>
    </member>
    <member name="M:Microsoft.JScript.StringObject.GetType">
      <summary>返回 <see cref="T:System.String" /> 或 <see cref="T:Microsoft.JScript.StringObject" />。</summary>
      <returns>
        <see cref="T:System.String" /> 或 <see cref="T:Microsoft.JScript.StringObject" />。</returns>
    </member>
    <member name="P:Microsoft.JScript.StringObject.length">
      <summary>获取字符串中的字符数。</summary>
      <returns>字符串中的字符数。</returns>
    </member>
    <member name="T:Microsoft.JScript.StringPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.StringObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)">
      <summary>将指定对象转换为括在定位标记中的文本，并为定位元素提供指定的名称特性。</summary>
      <returns>格式为 "&lt;A NAME=\""+ <paramref name="anchorName" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/A&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="anchorName">定位元素的名称特性。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.big(System.Object)">
      <summary>将指定对象转换为括在较大文本标记中的文本。</summary>
      <returns>格式为 "&lt;BIG&gt;"+ <paramref name="thisob" /> +"&lt;/BIG&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.blink(System.Object)">
      <summary>将指定对象转换为括在闪烁标记中的文本。</summary>
      <returns>格式为 "&lt;BLINK&gt;"+ <paramref name="thisob" /> +"&lt;/BLINK&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.bold(System.Object)">
      <summary>将指定对象转换为括在粗体文本标记中的文本。</summary>
      <returns>格式为 "&lt;B&gt;"+ <paramref name="thisob" /> +"&lt;/B&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)">
      <summary>返回指定对象中位于指定位置处的字符。</summary>
      <returns>位于 <paramref name="pos" /> 处的字符（如果有）。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="pos">要返回的字符的位置。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)">
      <summary>返回指定对象中位于指定位置处的字符的 ASCII 代码。</summary>
      <returns>位于 <paramref name="pos" /> 处的字符（如果有）的代码。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="pos">要返回其代码的字符的位置。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])">
      <summary>将指定参数追加到指定对象中。</summary>
      <returns>
        <paramref name="thisob" />（追加了 <paramref name="args" />）的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="args">要追加到 <paramref name="thisob" /> 中的参数。</param>
    </member>
    <member name="P:Microsoft.JScript.StringPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fixed(System.Object)">
      <summary>将指定对象转换为括在定宽文本标记中的文本。</summary>
      <returns>格式为 "&lt;TT&gt;"+ <paramref name="thisob" /> +"&lt;/TT&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)">
      <summary>将指定对象转换为括在字体标记中的文本，并为元素提供指定的颜色特性。</summary>
      <returns>格式为 "&lt;FONT COLOR=\""+ <paramref name="colorName" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/FONT&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="colorName">字体元素的颜色特性。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)">
      <summary>将指定对象转换为括在字体标记中的文本，并为元素提供指定的大小特性。</summary>
      <returns>格式为 "&lt;FONT SIZE=\""+ <paramref name="fontSize" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/FONT&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="fontSize">字体元素的大小特性。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)">
      <summary>从指定的字符位置开始，在指定对象中搜索指定字符串的第一个匹配项。</summary>
      <returns>
        <paramref name="searchString" /> 的第一个匹配项（如果找到）的位置。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="searchString">要搜索的字符串。</param>
      <param name="position">开始搜索的位置。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.italics(System.Object)">
      <summary>将指定对象转换为括在斜体文本标记中的文本。</summary>
      <returns>格式为 "&lt;I&gt;"+ <paramref name="thisob" /> +"&lt;/I&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)">
      <summary>从指定的字符位置开始，在指定对象中搜索指定字符串的最后一个匹配项。</summary>
      <returns>
        <paramref name="searchString" /> 的最后一个匹配项（如果找到）的位置。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="searchString">要搜索的字符串。</param>
      <param name="position">开始搜索的位置。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)">
      <summary>将指定对象转换为括在定位标记中的文本，并为定位元素提供指定的链接目标特性。</summary>
      <returns>格式为 "&lt;A HREF=\""+ <paramref name="linkRef" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/A&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="linkRef">定位元素的目标特性。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)">
      <summary>比较两个指定的字符串并返回一个整数，指示字符串之间的词法关系。</summary>
      <returns>如果 <paramref name="thisob" /> 小于 <paramref name="thatob" />，则为负值；如果 <paramref name="thisob" /> 等于 <paramref name="thatob" />，则为零；如果 <paramref name="thisob" /> 大于 <paramref name="thatob" />，则为正值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="thatob">要与 <paramref name="thisob" /> 比较的字符串。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)">
      <summary>在指定对象上运行对指定正则表达式模式的搜索。</summary>
      <returns>正则表达式模式搜索所返回的结果。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
      <param name="regExp">要搜索的正则表达式模式。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)">
      <summary>在第一个指定对象上运行对指定正则表达式模式的搜索，并将任何匹配项替换为第三个指定对象。</summary>
      <returns>进行替换后的新字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="regExp">要搜索的正则表达式模式。</param>
      <param name="replacement">对任何匹配项的替换。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)">
      <summary>在指定对象上运行对指定正则表达式模式的搜索。</summary>
      <returns>如果搜索成功，则为匹配项的索引；否则为 -1。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
      <param name="regExp">要搜索的正则表达式模式。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)">
      <summary>创建一个新字符串，其中包含指定字符串中的指定连续字符。</summary>
      <returns>一个新字符串，其中包含介于 <paramref name="start" /> 和 <paramref name="end" /> 之间的连续字符。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="start">要获取的第一个连续字符。</param>
      <param name="end">要获取的最后一个连续字符。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.small(System.Object)">
      <summary>将指定对象转换为括在较小文本标记中的文本。</summary>
      <returns>格式为 "&lt;SMALL&gt;"+ <paramref name="thisob" /> +"&lt;/SMALL&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)">
      <summary>返回一个数组，其中包含指定对象中的子字符串，这些子字符串由指定字符分隔。 由指定限制约束的数组中的子字符串数。</summary>
      <returns>一个数组，其中包含 <paramref name="thisob" /> 中的子字符串，这些子字符串由 <paramref name="separator" /> 分隔。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
      <param name="separator">用于在 <paramref name="thisob" /> 中分隔子字符串的字符。</param>
      <param name="limit">要返回的子字符串的最大数量。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.strike(System.Object)">
      <summary>将指定对象转换为括在删除线标记中的文本。</summary>
      <returns>格式为 "&lt;STRIKE&gt;"+ <paramref name="thisob" /> +"&lt;/STRIKE&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.sub(System.Object)">
      <summary>将指定对象转换为括在下标标记中的文本。</summary>
      <returns>格式为 "&lt;SUB&gt;"+ <paramref name="thisob" /> +"&lt;/SUB&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)">
      <summary>创建一个新字符串，其中包含指定字符串中的指定数目的连续字符，从指定的字符位置开始。 如有可能，请改用 <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" />。</summary>
      <returns>一个新字符串，其中包含 <paramref name="count" /> 个连续字符，从 <paramref name="start" /> 开始。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="start">要获取的第一个连续字符。</param>
      <param name="count">要获取的字符数。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)">
      <summary>创建一个新字符串，其中包含指定字符串中的指定连续字符。</summary>
      <returns>一个新字符串，其中包含介于 <paramref name="start" /> 和 <paramref name="end" /> 之间的连续字符。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="start">要获取的第一个连续字符。</param>
      <param name="end">要获取的最后一个连续字符。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.sup(System.Object)">
      <summary>将指定对象转换为括在上标标记中的文本。</summary>
      <returns>格式为 "&lt;SUP&gt;"+ <paramref name="thisob" /> +"&lt;/SUP&gt;" 的字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)">
      <summary>返回根据 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 的大小写规则转换为小写形式的指定字符串的副本。</summary>
      <returns>小写字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)">
      <summary>返回根据 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 的大小写规则转换为大写形式的指定字符串的副本。</summary>
      <returns>大写字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)">
      <summary>返回根据 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 的大小写规则转换为小写形式的指定字符串的副本。</summary>
      <returns>小写字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toString(System.Object)">
      <summary>创建指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="thisob" /> 的字符串表示形式。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)">
      <summary>返回根据 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 的大小写规则转换为大写形式的指定字符串的副本。</summary>
      <returns>大写字符串。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)">
      <summary>返回指定对象的值。</summary>
      <returns>
        <paramref name="thisob" /> 的值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.SuperTypeMembersSorter">
      <summary>存储基类和接口中的成员。</summary>
    </member>
    <member name="T:Microsoft.JScript.SyntaxErrorObject">
      <summary>表示语法错误。 例如，如果省略分号，则可能发生语法错误。</summary>
    </member>
    <member name="T:Microsoft.JScript.Throw">
      <summary>引发一个异常。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Throw.JScriptThrow(System.Object)">
      <summary>将指定的对象作为异常返回，必要时进行转换。</summary>
      <returns>一个表示 <paramref name="value" /> 的异常。</returns>
      <param name="value">要引发的异常。</param>
    </member>
    <member name="T:Microsoft.JScript.TokenColor">
      <summary>指定在编辑器中对文本着色时单个代码单元应具有的颜色。 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象的 <see cref="P:Microsoft.JScript.ITokenColorInfo.Color" /> 属性使用此枚举的成员。</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_COMMENT">
      <summary>表示注释的代码单元的颜色。</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_CONDITIONAL_COMP">
      <summary>未使用。</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_IDENTIFIER">
      <summary>表示标识符的代码单元的颜色。</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_KEYWORD">
      <summary>表示关键字的代码单元的颜色。</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_NUMBER">
      <summary>表示数字文本的代码单元的颜色。</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_OPERATOR">
      <summary>表示运算符的代码单元的颜色。</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_STRING">
      <summary>表示字符串的代码单元的颜色。</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_TEXT">
      <summary>表示文本的代码单元的颜色。 这是默认值。</summary>
    </member>
    <member name="T:Microsoft.JScript.Try">
      <summary>标识要在错误处理范围中运行的代码块。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Try.JScriptExceptionValue(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>将指定的对象返回为异常，如有可能将其转换为特定 <see cref="T:Microsoft.JScript.JScriptException" />。</summary>
      <returns>转换为特定 <see cref="T:Microsoft.JScript.JScriptException" />（如果可能）的异常 <paramref name="e" />。</returns>
      <param name="e">表示异常的对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.Try.PushHandlerScope(Microsoft.JScript.Vsa.VsaEngine,System.String,System.Int32)">
      <summary>为 try 块创建一个新的 <see cref="T:Microsoft.JScript.BlockScope" /> 对象，并将其推送到全局范围堆栈上。</summary>
      <param name="engine">对脚本引擎的引用。</param>
      <param name="id">try 块的范围的名称。</param>
      <param name="scopeId">try 块的范围的 ID。</param>
    </member>
    <member name="T:Microsoft.JScript.TypedArray">
      <summary>表示对 <see cref="T:System.Array" /> 类的可反射引用。 此类存储类型化数组的元素类型，但此类不存储数据。</summary>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.#ctor(System.Reflection.IReflect,System.Int32)">
      <summary>初始化 <see cref="T:Microsoft.JScript.TypedArray" /> 类的新实例。</summary>
      <param name="elementType">类型化数组的元素类型。</param>
      <param name="rank">数组的秩（维数）。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.Equals(System.Object)">
      <summary>确定指定的类型化数组与当前的类型化数组是否具有相同的元素类型和秩。</summary>
      <returns>如果 <paramref name="obj" /> 与当前的类型化数组具有相同的元素类型和秩，则为 true；否则为 false。</returns>
      <param name="obj">要与当前类型化数组进行比较的类型化数组。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>获取具有指定名称的 <see cref="T:System.Array" /> 类类型的字段。</summary>
      <returns>一个具有指定名称的字段（如果找到一个这样的字段）；否则为 null。</returns>
      <param name="name">要获取的字段的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetFields(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.FieldInfo" /> 对象的数组，这些对象对应于 <see cref="T:System.Array" /> 类类型的所有字段。</summary>
      <returns>对象的数组，其中包含 <see cref="T:System.Array" /> 类类型的所有字段。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetHashCode">
      <summary>用作类型化数组的元素类型的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于 <see cref="T:System.Array" /> 类类型的所有与指定名称匹配的成员。</summary>
      <returns>与 <paramref name="name" /> 参数匹配的对象的数组。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMembers(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象对应于 <see cref="T:System.Array" /> 类类型的所有成员。</summary>
      <returns>对象的数组，其中包含 <see cref="T:System.Array" /> 类类型的所有成员。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>获取具有指定名称的 <see cref="T:System.Array" /> 类类型的方法。</summary>
      <returns>一个具有指定名称的方法（如果找到一个这样的方法）；否则为 null。</returns>
      <param name="name">要获取的方法的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>通过使用指定的选择条件，获取一个具有指定名称的 <see cref="T:System.Array" /> 类类型的方法。</summary>
      <returns>一个具有指定名称的方法（如果找到一个这样的方法）；否则为 null。</returns>
      <param name="name">要获取的方法的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="types">用于定位匹配方法的参数类型。</param>
      <param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethods(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象对应于 <see cref="T:System.Array" /> 类类型的所有方法。</summary>
      <returns>对象的数组，其中包含 <see cref="T:System.Array" /> 类类型的所有方法。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperties(System.Reflection.BindingFlags)">
      <summary>获取 <see cref="T:System.Reflection.PropertyInfo" /> 对象的数组，这些对象对应于 <see cref="T:System.Array" /> 类类型的所有属性。</summary>
      <returns>对象的数组，其中包含 <see cref="T:System.Array" /> 类类型的所有属性。</returns>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>获取具有指定名称的 <see cref="T:System.Array" /> 类类型的属性。</summary>
      <returns>一个具有指定名称的属性（如果找到一个这样的属性）；否则为 null。</returns>
      <param name="name">要获取的属性的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>通过使用指定的选择条件，获取一个具有指定名称的 <see cref="T:System.Array" /> 类类型的属性。</summary>
      <returns>一个具有指定名称的属性（如果找到一个这样的属性）；否则为 null。</returns>
      <param name="name">要获取的属性的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="returnType">该属性必须具有的返回值的类型。</param>
      <param name="types">所搜索的属性的索引类型。 用于索引属性，如类的索引器。</param>
      <param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>调用元素类型或 <see cref="T:System.Array" /> 类类型的指定成员。</summary>
      <returns>成员调用的返回值。</returns>
      <param name="name">要调用的成员名。</param>
      <param name="flags">枚举值的按位组合，用于指定反射如何执行成员搜索。</param>
      <param name="binder">一个对象，该对象执行从实参类型到形参类型的类型转换。</param>
      <param name="target">对其调用成员的对象。 此对象必须为当前脚本对象。</param>
      <param name="args">包含要调用的成员的参数数目、顺序和类型的对象数组。 如果没有参数，则这是一个空数组。</param>
      <param name="modifiers">长度与 <paramref name="args" /> 参数相同的数组。 它表示元数据中被调用成员的参数特性。</param>
      <param name="locale">提供有关特定区域性或区域设置的信息。 用于正确设置数字、日期和字符串的格式。</param>
      <param name="namedParameters">参数的数组。</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.ToString">
      <summary>返回一个字符串，该字符串包含类型化数组的元素类型和秩信息。</summary>
      <returns>一个包含类型化数组的元素类型和秩信息的字符串。</returns>
    </member>
    <member name="P:Microsoft.JScript.TypedArray.UnderlyingSystemType">
      <summary>获取 <see cref="T:Microsoft.JScript.TypedArray" /> 对象的类型。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.TypedArray" /> 对象的类型。</returns>
    </member>
    <member name="T:Microsoft.JScript.TypeErrorObject">
      <summary>表示类型错误。 例如，将一种类型的对象传递给需要另一种类型的对象的方法时，可能会发生类型错误。</summary>
    </member>
    <member name="T:Microsoft.JScript.Typeof">
      <summary>确定对象的数据类型。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.Typeof.JScriptTypeof(System.Object)">
      <summary>确定指定的对象的数据类型。</summary>
      <returns>
        <paramref name="value" /> 的类型。</returns>
      <param name="value">要确定其类型的对象。</param>
    </member>
    <member name="T:Microsoft.JScript.TypeReflector">
      <summary>提供 <see cref="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)" /> 的实现，它比 <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> 更快。</summary>
    </member>
    <member name="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定绑定约束搜索指定成员。</summary>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <param name="name">要搜索的成员的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定由反射操作执行的成员和类型搜索的方式。</param>
    </member>
    <member name="M:Microsoft.JScript.TypeReflector.GetMembers(System.Reflection.BindingFlags)">
      <summary>任何情况下均引发 <see cref="T:Microsoft.JScript.JScriptException" /> 异常。</summary>
      <returns>任何情况下均引发 <see cref="T:Microsoft.JScript.JScriptException" /> 异常。</returns>
      <param name="bindingAttr">枚举值的按位组合，这些值指定由反射操作执行的成员和类型搜索的方式。</param>
    </member>
    <member name="T:Microsoft.JScript.UnaryOp">
      <summary>表示对单个操作数执行运算的类（比如 <see cref="T:Microsoft.JScript.Typeof" /> 和 <see cref="T:Microsoft.JScript.PostOrPrefixOperator" />）的基类。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="F:Microsoft.JScript.UnaryOp.operand">
      <summary>表示操作数。</summary>
    </member>
    <member name="T:Microsoft.JScript.URIErrorObject">
      <summary>表示统一资源标识符 (URI) 错误。 例如，在尝试对 URI 进行编码或解码时可能会发生 URI 错误。</summary>
    </member>
    <member name="T:Microsoft.JScript.VBArrayConstructor">
      <summary>表示一个基于原型的对象，该对象由构造函数定义。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.VBArrayConstructor.CreateInstance(System.Object[])">
      <summary>创建基于原型的对象的实例，在指定的参数中传递。</summary>
      <returns>对象的实例。</returns>
      <param name="args">要传递给构造函数的实参。</param>
    </member>
    <member name="T:Microsoft.JScript.VBArrayObject">
      <summary>表示一个 VBArray 对象。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.VBArrayObject.#ctor(Microsoft.JScript.VBArrayPrototype,System.Array)">
      <summary>初始化 <see cref="T:Microsoft.JScript.VBArrayObject" /> 类的新实例。</summary>
      <param name="parent">对象的父项。</param>
      <param name="array">该类所表示的基础数组。</param>
    </member>
    <member name="T:Microsoft.JScript.VBArrayPrototype">
      <summary>提供 <see cref="T:Microsoft.JScript.VBArrayObject" /> 对象的静态方法和属性。 将通过传入对象（正在请求访问方法）的引用来调用此类的所有方法。 此类属于内置对象模型类别。</summary>
    </member>
    <member name="P:Microsoft.JScript.VBArrayPrototype.constructor">
      <summary>获取对基于原型的对象的引用，该对象正在使用此原型。</summary>
      <returns>对基于原型的对象的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)">
      <summary>确定指定数组中的维度数。</summary>
      <returns>
        <paramref name="thisob" /> 中的维度数。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])">
      <summary>获取指定数组中指定位置的值。</summary>
      <returns>位于 <paramref name="thisob" /> 中指定位置处的值。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="args">一个表示每个维度的索引的数组，这里的每个维度都将指定要获取的元素的位置。</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)">
      <summary>获取指定数组中指定维度的下限。</summary>
      <returns>
        <paramref name="thisob" /> 中 <paramref name="dimension" /> 的下限。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dimension">其下限已经确定的维度。</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>将 <see cref="T:Microsoft.JScript.VBArrayObject" /> 对象转换为 <see cref="T:Microsoft.JScript.ArrayObject" /> 对象。</summary>
      <returns>表示为 <see cref="T:Microsoft.JScript.ArrayObject" /> 的 <paramref name="thisob" />。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)">
      <summary>获取指定数组中指定维度的上限。</summary>
      <returns>
        <paramref name="thisob" /> 中 <paramref name="dimension" /> 的上限。</returns>
      <param name="thisob">此方法所作用于的对象。</param>
      <param name="dimension">其上限已经确定的维度。</param>
    </member>
    <member name="T:Microsoft.JScript.VsaItem">
      <summary>表示添加到 .NET 脚本引擎的项。 其中包括代码项、引用项和全局项。</summary>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.flag">
      <summary>将项的类型指定为 <see cref="F:Microsoft.Vsa.VsaItemFlag.Class" />、<see cref="F:Microsoft.Vsa.VsaItemFlag.Module" /> 或 <see cref="F:Microsoft.Vsa.VsaItemFlag.None" />。</summary>
    </member>
    <member name="M:Microsoft.JScript.VsaItem.GetOption(System.String)">
      <summary>获取 codebase 选项。</summary>
      <returns>codebase 选项的值。</returns>
      <param name="name">字符串“codebase”。</param>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.isDirty">
      <summary>指定该项的当前内存中表示形式是否与保留的表示形式不同。</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.IsDirty">
      <summary>获取或设置一个值，该值指示该项的当前内存中表示形式是否与保留的表示形式不同。</summary>
      <returns>如果内存中表示形式与保留的表示形式不同，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.ItemType">
      <summary>获取项的类型。</summary>
      <returns>枚举值之一。 该值指示项的类型。</returns>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.name">
      <summary>指定项的名称。</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.Name">
      <summary>获取或设置项的名称。</summary>
      <returns>项的字符串名称。</returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItem.SetOption(System.String,System.Object)">
      <summary>设置 codebase 选项。</summary>
      <param name="name">字符串“codebase”。</param>
      <param name="value">选项的新值。</param>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.type">
      <summary>将项的类型指定为 <see cref="F:Microsoft.Vsa.VsaItemType.Code" />、<see cref="F:Microsoft.Vsa.VsaItemType.Reference" /> 或 <see cref="F:Microsoft.Vsa.VsaItemType.AppGlobal" />。</summary>
    </member>
    <member name="T:Microsoft.JScript.VsaItems">
      <summary>表示可按名称或索引编址的 <see cref="T:Microsoft.Vsa.IVsaItem" /> 对象的集合。</summary>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.#ctor(Microsoft.JScript.Vsa.VsaEngine)">
      <summary>初始化 <see cref="T:Microsoft.JScript.VsaItems" /> 类的新实例。</summary>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Close">
      <summary>断开集合中每一项与脚本引擎的连接。</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Count">
      <summary>获取集合中项的数目。</summary>
      <returns>集合中的项数。</returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)">
      <summary>创建一个新项，并将其添加到集合中。</summary>
      <returns>新创建的项。</returns>
      <param name="name">新项的名称。</param>
      <param name="itemType">枚举值之一。 该值将新项的类型指定为 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" />、<see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference" /> 或 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal" />。</param>
      <param name="itemFlag">枚举值之一。 该值将 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" /> 项的初始内容指定为 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class" />、<see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module" /> 或 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None" />。</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.GetEnumerator">
      <summary>获取一个能够循环访问集合的枚举数。</summary>
      <returns>一个能够循环访问集合的枚举数。</returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Item(System.Int32)">
      <summary>从集合中获取由指定索引值指定的项。</summary>
      <returns>位于 <paramref name="index" /> 处的项。</returns>
      <param name="index">要获取的项的索引。</param>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Item(System.String)">
      <summary>从集合中获取由指定名称指定的项。</summary>
      <returns>名为 <paramref name="itemName" /> 的项。</returns>
      <param name="itemName">要获取的项的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Remove(System.Int32)">
      <summary>从集合中移除由指定索引值指定的项。</summary>
      <param name="itemIndex">要移除的项的索引。</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Remove(System.String)">
      <summary>从集合中移除由指定名称指定的项。</summary>
      <param name="itemName">要移除的项的名称。</param>
    </member>
    <member name="T:Microsoft.JScript.VSAITEMTYPE2">
      <summary>扩展 <see cref="T:Microsoft.Vsa.VsaItemType" /> 枚举。 提供 IActiveScript 宿主需要的额外功能。</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.EXPRESSION">
      <summary>指定一个表达式。 这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTOBJECT">
      <summary>指定一个宿主对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTSCOPE">
      <summary>指定范围。</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTSCOPEANDOBJECT">
      <summary>同时指定范围和对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.None">
      <summary>指定 none。 这是默认值。</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.SCRIPTBLOCK">
      <summary>指定脚本块。 这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />。</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.SCRIPTSCOPE">
      <summary>指定脚本范围。</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.STATEMENT">
      <summary>指定单一语句。 这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />。</summary>
    </member>
    <member name="T:Microsoft.JScript.With">
      <summary>表示 with 语句。 此类属于抽象语法树类别。</summary>
    </member>
    <member name="M:Microsoft.JScript.With.JScriptWith(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>建立 with 语句块的默认对象，方法是将该语句块添加到范围堆栈。</summary>
      <returns>转换为对象的 <paramref name="withOb" />。</returns>
      <param name="withOb">默认对象。</param>
      <param name="engine">对脚本引擎的引用。</param>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaEngine">
      <summary>实现 <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" /> 接口。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.AppDomain">
      <summary>获取或设置要应用程序域。</summary>
      <returns>应用程序域。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.ApplicationBase">
      <summary>获取或设置应用程基。</summary>
      <returns>应用程序基。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.applicationPath">
      <summary>获取或设置应用程序的路径。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Assembly">
      <summary>获取由 Run 方法生成的运行程序集的引用。</summary>
      <returns>对当前正在运行的程序集的引用。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.assemblyVersion">
      <summary>获取或设置程序集版本。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Close">
      <summary>关闭该引擎。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Compile">
      <summary>使引擎编译现有的源状态。</summary>
      <returns>如果成功编译，则为 true；否则为 false。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.compiledRootNamespace">
      <summary>获取或设置已编译的根命名空间。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoClose">
      <summary>关闭该引擎。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoCompile">
      <summary>使脚本引擎编译现有的源状态。</summary>
      <returns>如果成功编译，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoLoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>指示引擎加载源项。</summary>
      <param name="site">指定的源项目所在的站点。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoSaveCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>保存脚本引擎的编译状态；它还可选择保存调试信息。</summary>
      <param name="pe">引擎的编译状态。</param>
      <param name="debugInfo">指定包含在 PDB 文件中的调试信息。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoSaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>指示脚本引擎将其源状态保存到指定的对象。</summary>
      <param name="site">对其保存源状态的站点。</param>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineMoniker">
      <summary>获取或设置引擎名字对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineName">
      <summary>获取或设置引擎名称。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineSite">
      <summary>获取或设置引擎站点。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Error(Microsoft.JScript.Vsa.JSVsaError)">
      <summary>返回错误。</summary>
      <returns>含有指定的错误号的异常。</returns>
      <param name="vsaErrorNumber">要返回的错误号。</param>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.errorLocale">
      <summary>获取或设置错误号。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Evidence">
      <summary>提供用于验证当前对象的标识的证据。</summary>
      <returns>返回对 Evidence 对象的引用。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.executionEvidence">
      <summary>获取或设置执行 ID。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.failedCompilation">
      <summary>获取或设置一个值，该值指示编译是否失败。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.genDebugInfo">
      <summary>获取或设置一个值，该值指示是否生成调试信息。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.GenerateDebugInfo">
      <summary>设置或获取指示脚本引擎会不会在调用 Compile 方法时产生调试信息的布尔值。</summary>
      <returns>如果生成调试信息，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.GetCustomOption(System.String)">
      <summary>获取引擎实现特定的选项。</summary>
      <returns>选项的值。</returns>
      <param name="name">要获取的选项的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.GetOption(System.String)">
      <summary>获取引擎实现特定的选项。</summary>
      <returns>选项的值。</returns>
      <param name="name">要获取的选项的名称。</param>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.haveCompiledState">
      <summary>获取或设置一个值，该值指示是否具有已编译的状态。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.InitNew">
      <summary>提供初始化阶段已完成的通知。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isClosed">
      <summary>获取或设置一个值，该值指示引擎是否关闭。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsCompiled">
      <summary>获取或设置一个值，该值指示源是否编译。</summary>
      <returns>如果源已编译，则为 true；否则为 false。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isDebugInfoSupported">
      <summary>获取或设置一个值，该值指示是否支持调试信息。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsDirty">
      <summary>获取或设置一个值，该值指示该项的当前内存中表示形式是否与保留的表示形式不同。</summary>
      <returns>如果内存中表示形式与保留的表示形式不同，则为 true；否则为 false。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineCompiled">
      <summary>获取或设置一个值，该值指示引擎是否编译。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineDirty">
      <summary>获取或设置一个值，该值指示该项的当前内存中表示形式是否与保留的表示形式不同。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineInitialized">
      <summary>获取或设置一个值，该值指示引擎是否初始化。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineRunning">
      <summary>获取或设置一个指示引擎是否正在运行的值。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsRunning">
      <summary>获取报告引擎当前是否处于运行模式的布尔值。</summary>
      <returns>如果引擎处于运行模式，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.IsValidIdentifier(System.String)">
      <summary>检查提供的标识符是否对引擎有效。</summary>
      <returns>如果标识符有效，则为 true；否则返回 false。</returns>
      <param name="ident">作为标识符提供的字符串值。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.IsValidNamespaceName(System.String)">
      <summary>检查提供的命名空间是否对引擎有效。</summary>
      <returns>如果命名空间有效，则为 true；否则返回 false。</returns>
      <param name="name">作为标识符提供的字符串值。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Items">
      <summary>获取 IJSVsaItem 对象的集合，该集合表示添加到引擎的所有项。</summary>
      <returns>项的集合。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Language">
      <summary>获取由该引擎支持的编程语言名称。</summary>
      <returns>编程语言的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.LCID">
      <summary>获取或设置在报告异常消息时所使用的地理区域设置和语言。</summary>
      <returns>表示要在其中报告异常消息的区域设置的整数值。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.LoadCompiledState">
      <summary>加载编译状态。</summary>
      <returns>编译状态。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.loadedAssembly">
      <summary>获取或设置已加载程序集。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.LoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>如宿主提供的对象所指定的那样，指示引擎从持久性点加载源项。</summary>
      <param name="site">从中加载指定源项的站点。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Name">
      <summary>获取或设置引擎的显示名称。</summary>
      <returns>引擎的名称。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.nameTable">
      <summary>获取或设置名称表。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Preconditions(Microsoft.JScript.Vsa.BaseVsaEngine.Pre)">
      <summary>设置前置条件标志。</summary>
      <param name="flags">要设置的标志。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Reset">
      <summary>从运行状态中移除引擎，并自动断开与绑定事件处理程序的连接。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.ResetCompiledState">
      <summary>重置编译状态。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.RevokeCache">
      <summary>为引擎将缓存程序集无效化，由其根名字对象指定。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.RootMoniker">
      <summary>设置或获取脚本引擎的根名字对象。</summary>
      <returns>引擎的根名字对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.rootNamespace">
      <summary>获取或设置根命名空间。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.RootNamespace">
      <summary>设置或获取该引擎使用的根命名空间。</summary>
      <returns>引擎的命名空间。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Run">
      <summary>启动引擎中已编译代码的执行，并绑定所有事件处理程序</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>保存引擎的编译状态；它还可选择保存调试信息。</summary>
      <param name="pe">脚本引擎的编译状态。</param>
      <param name="debugInfo">指定与 PE（可移植可执行文件）对应的 .PDB 文件中包含的调试信息。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>指示引擎坚持其源状态。</summary>
      <param name="site">对其保存源状态的站点。</param>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.scriptLanguage">
      <summary>获取或设置脚本语言。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SetCustomOption(System.String,System.Object)">
      <summary>为该引擎设置特定于实现的选项。</summary>
      <param name="name">要设置的选项的名称。</param>
      <param name="value">被设置的选项的值。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SetOption(System.String,System.Object)">
      <summary>为该引擎设置特定于实现的选项。</summary>
      <param name="name">要设置的选项的名称。</param>
      <param name="value">被设置的选项的值。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Site">
      <summary>设置或获取由宿主实现的 IJSVsaSite 对象，该引擎使用此对象与宿主通信。</summary>
      <returns>宿主实现的对象。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.startupClass">
      <summary>获取或设置启动类。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.startupInstance">
      <summary>获取或设置启动实例。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.ValidateRootMoniker(System.String)">
      <summary>验证根名字对象。</summary>
      <param name="rootMoniker">要验证的根名字。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Version">
      <summary>获取由该引擎支持的语言编译器的当前版本，格式为 Major.Minor.Revision.Build。</summary>
      <returns>当前的版本。</returns>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.vsaItems">
      <summary>获取或设置子对象的集合。</summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaEngine.Pre">
      <summary>为 <see cref="T:Microsoft.JScript.Vsa.BaseVsaEngine" /> 类提供枚举。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineCompiled">
      <summary>引擎已编译。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineInitialised">
      <summary>引擎已初始化。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotClosed">
      <summary>引擎未关闭。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotInitialised">
      <summary>引擎未初始化。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotRunning">
      <summary>引擎未运行。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineRunning">
      <summary>引擎正在运行。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.None">
      <summary>未设置任何引擎。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootMonikerNotSet">
      <summary>未设置根名字。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootMonikerSet">
      <summary>设置了根名字。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootNamespaceSet">
      <summary>设置了根命名控件。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SiteNotSet">
      <summary>站点未设置。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SiteSet">
      <summary>站点已经设置。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SupportForDebug">
      <summary>调试功能已打开。</summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaSite">
      <summary>启用主机与脚本引擎之间的通信。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.#ctor">
      <summary>创建一个新站点。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaSite.Assembly">
      <summary>此站点的程序集。</summary>
      <returns>此站点的程序集。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaSite.DebugInfo">
      <summary>调试此站点的信息。</summary>
      <returns>调试此站点的信息。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>为此站点设置程序集和调试信息。</summary>
      <param name="pe">要设置的程序集。</param>
      <param name="debugInfo">要设置的调试信息对象。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetEventSourceInstance(System.String,System.String)">
      <summary>获取对先前使用 <see cref="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource" /> 方法添加到脚本引擎中的事件源的引用。</summary>
      <returns>将事件源返回到引擎。</returns>
      <param name="itemName">指定的项名称。</param>
      <param name="eventSourceName">指定的事件源名称。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetGlobalInstance(System.String)">
      <summary>获取对全局项的引用，例如主机提供的应用程序对象。</summary>
      <returns>返回对全局对象的引用。</returns>
      <param name="name">获取对全局项的引用，例如主机提供的应用程序对象。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.Notify(System.String,System.Object)">
      <summary>通知主机有关由脚本引擎生成的事件。</summary>
      <param name="notify">通知主机有关由脚本引擎生成的事件。</param>
      <param name="optional">通知主机有关该引擎生成的事件。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.OnCompilerError(Microsoft.JScript.Vsa.IJSVsaError)">
      <summary>通知主机如何对脚本引擎遇到的编译器错误作出响应。</summary>
      <returns>如果指示编译器继续向 <see cref="T:Microsoft.Vsa.IVsaSite" /> 对象报告进一步的错误，则返回 TRUE。 如果指示编译器停止向 IVsaSite 对象报告进一步的错误，则返回 FALSE。</returns>
      <param name="error">表示有害错误的 <see cref="T:Microsoft.Vsa.IVsaError" /> 对象。</param>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaStartup">
      <summary>用于启动和重置基 VSA 引擎。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.#ctor">
      <summary>新建此类对象。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.SetSite(Microsoft.JScript.Vsa.IJSVsaSite)">
      <summary>设置该引擎的 VSA 站点。</summary>
      <param name="site">该引擎的 VSA 站点。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.Shutdown">
      <summary>用于在关闭引擎时执行相关操作。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaStartup.site">
      <summary>该引擎的 VSA 站点。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.Startup">
      <summary>用于在启动引擎时执行相关操作。</summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaCodeItem">
      <summary>表示要通过脚本引擎编译的代码项。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AddEventSource(System.String,System.String)">
      <summary>将事件源添加到代码项中。 代码项通过调用 IVsaSite.GetEventSourceInstance 方法（由宿主实现），使用事件源将事件挂钩到命名事件源。</summary>
      <param name="eventSourceName">事件源的编程名称。</param>
      <param name="eventSourceType">事件源的类型名称。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AppendSourceText(System.String)">
      <summary>将指定的文本追加到代码项尾部。</summary>
      <param name="text">要追加到代码项的文本。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaCodeItem.CodeDOM">
      <summary>获取在代码项中表示的代码文档对象模型 (CodeDOM)。</summary>
      <returns>返回代码项的 CodeDOM。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.RemoveEventSource(System.String)">
      <summary>从代码项中移除指定的事件源。</summary>
      <param name="eventSourceName">要移除的事件源的编程名称。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaCodeItem.SourceText">
      <summary>设置或获取指定的代码项的文本，包括自动生成的代码（如果有）。</summary>
      <returns>返回代码项的源文本。</returns>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaEngine">
      <summary>定义脚本引擎必须支持的方法和属性，并提供对脚本引擎的编程访问。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Assembly">
      <summary>获取由 Run 方法生成的运行程序集的引用。</summary>
      <returns>对当前正在运行的程序集的引用。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Close">
      <summary>关闭该引擎。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Compile">
      <summary>使引擎编译现有的源状态。</summary>
      <returns>如果成功编译，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Evidence">
      <summary>提供用于验证当前对象的标识的证据。</summary>
      <returns>返回对 Evidence 对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.GenerateDebugInfo">
      <summary>设置或获取指示脚本引擎会不会在调用 Compile 方法时产生调试信息的布尔值。</summary>
      <returns>如果生成调试信息，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.GetOption(System.String)">
      <summary>获取引擎实现特定的选项。</summary>
      <returns>选项的值。</returns>
      <param name="name">要获取的选项的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.InitNew">
      <summary>提供初始化阶段已完成的通知。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsCompiled">
      <summary>获取或设置一个值，该值指示源是否编译。</summary>
      <returns>如果源已编译，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsDirty">
      <summary>获取或设置一个值，该值指示该项的当前内存中表示形式是否与保留的表示形式不同。</summary>
      <returns>如果内存中表示形式与保留的表示形式不同，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsRunning">
      <summary>获取一个布尔值，该值报告脚本引擎当前是否处于运行模式。</summary>
      <returns>如果引擎处于运行模式，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.IsValidIdentifier(System.String)">
      <summary>检查提供的标识符是否对引擎有效。</summary>
      <returns>如果标识符有效，则为 true；否则返回 false。</returns>
      <param name="identifier">作为标识符提供的字符串值。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Items">
      <summary>获取 IJSVsaItem 对象的集合，该集合表示添加到脚本引擎的所有项。</summary>
      <returns>项的集合。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Language">
      <summary>获取由该脚本引擎支持的编程语言名称。</summary>
      <returns>编程语言的名称。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.LCID">
      <summary>获取或设置在报告异常消息时所使用的地理区域设置和语言。</summary>
      <returns>表示要在其中报告异常消息的区域设置的整数值。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.LoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>如宿主提供的对象所指定的那样，指示引擎从持久性点加载源项。</summary>
      <param name="site">从中加载指定源项的站点。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Name">
      <summary>获取或设置脚本引擎的显示名称。</summary>
      <returns>引擎的名称。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Reset">
      <summary>从运行状态中移除脚本引擎，并自动断开与绑定事件处理程序的连接。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.RevokeCache">
      <summary>为引擎将缓存程序集无效化，由其根名字对象指定。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.RootMoniker">
      <summary>设置或获取脚本引擎的根名字对象。</summary>
      <returns>引擎的根名字对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.RootNamespace">
      <summary>设置或获取脚本引擎使用的根命名空间。</summary>
      <returns>引擎的命名空间。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Run">
      <summary>启动脚本引擎中已编译代码的执行，并绑定所有事件处理程序。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>保存脚本引擎的编译状态；它还可选择保存调试信息。</summary>
      <param name="pe">脚本引擎的编译状态。</param>
      <param name="pdb">指定与 PE（可移植可执行文件）对应的 .PDB 文件中包含的调试信息。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>指示脚本引擎坚持其源状态。</summary>
      <param name="site">对其保存源状态的站点。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SetOption(System.String,System.Object)">
      <summary>设置脚本引擎特定于实现的选项。</summary>
      <param name="name">要设置的选项的名称。</param>
      <param name="value">被设置的选项的值。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Site">
      <summary>设置或获取由宿主实现的 IJSVsaSite 对象，脚本引擎使用此对象与宿主通信。</summary>
      <returns>宿主实现的对象。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Version">
      <summary>获取脚本引擎支持的语言编译器的当前版本，以 Major.Minor.Revision.Build 形式表示。</summary>
      <returns>当前的版本。</returns>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaError">
      <summary>提供在执行过程中遇到的编译错误的访问。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Description">
      <summary>获取对错误的简短说明，在某些情况下会返回对源代码中引起错误的标记的引用。</summary>
      <returns>返回错误的字符串说明。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.EndColumn">
      <summary>获取引发错误的源文本的结束列号（如果可用）。</summary>
      <returns>返回引发错误的源文本的结束列号（如果有的话）。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Line">
      <summary>获取发生错误的行号。</summary>
      <returns>返回发生错误时所在的行号。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.LineText">
      <summary>获取引起错误的行的源代码文本。</summary>
      <returns>从引起错误的行返回字符串源代码。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Number">
      <summary>获取唯一标识错误的编号。</summary>
      <returns>返回唯一标识错误的编号。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Severity">
      <summary>设置错误严重级别。</summary>
      <returns>返回表示错误严重级别的整数 (0-4)。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.SourceItem">
      <summary>获取 IVsaItem 对象的引用，该对象生成错误。</summary>
      <returns>返回对生成错误的对象的引用。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.SourceMoniker">
      <summary>获取包含错误的源项的完全限定名，采用脚本引擎可以识别的格式。</summary>
      <returns>返回包含错误的源项的完全限定名。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.StartColumn">
      <summary>获取引发错误的源文本的起始列号（如果可用）。</summary>
      <returns>返回引发错误的源文本的起始列号（如果有的话）。</returns>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaGlobalItem">
      <summary>介绍添加到脚本引擎中的全局对象。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaGlobalItem.ExposeMembers">
      <summary>设置一个值，该值指示是否应当使全局对象的成员对脚本引擎可用。[目前尚不支持。]</summary>
      <returns>如果全局对象的公共成员无需限定即可供脚本引擎使用，就如同它们是全局命名空间的一部分，则返回 TRUE。 如果必须用对象名称限定全局对象的成员，则返回 FALSE。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaGlobalItem.TypeString">
      <summary>获取或设置全局项的类型。</summary>
      <returns>返回全局项的项类型。</returns>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaItem">
      <summary>为所有添加到 .NET 脚本引擎的项定义一个接口，包括代码项、引用项和全局项。 它定义应用于该引擎识别的所有项类型的泛型属性和方法。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItem.GetOption(System.String)">
      <summary>获取脚本引擎实现特定的选项。</summary>
      <returns>返回指定选项的值。</returns>
      <param name="name">要检索的选项的名称。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.IsDirty">
      <summary>返回一个值，它指示该项的当前内存中表示形式是否与保留的表示形式不同。</summary>
      <returns>如果该项已更新并因而需要保存，则返回 true；如果该项未更新，则返回 false。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.ItemType">
      <summary>获取指定对象的类型（如 <see cref="M:Microsoft.JScript.Vsa.IJSVsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)" /> 方法所确定的那样）。</summary>
      <returns>
        <see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" /> 枚举所枚举的类型。</returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.Name">
      <summary>获取或设置项的名称。</summary>
      <returns>返回项的字符串名称。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItem.SetOption(System.String,System.Object)">
      <summary>设置脚本引擎特定于实现的选项。</summary>
      <param name="name">要设置的选项的名称。</param>
      <param name="value">选项的新值。</param>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaItems">
      <summary>定义 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> 对象集合的接口，可通过名称或索引对其进行定位。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Count">
      <summary>获取指定集合的项数。</summary>
      <returns>返回表示集合中的项数的整数值。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)">
      <summary>按照 <see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" /> 枚举中的定义，创建其中一个 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> 类型的新实例。</summary>
      <returns>返回对创建的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> 对象的引用。</returns>
      <param name="name">要与新项关联的名称。 项是引用项类型时，名称参数必须与被引用程序集的名称（使用 <see cref="P:Microsoft.JScript.Vsa.IJSVsaReferenceItem.AssemblyName" /> 属性设置）完全相同。 但是，在 JScript 中，如果不指定 AssemblyName，则 JScript 会将 ItemName 用作程序集的名称。</param>
      <param name="itemType">在 <see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" /> 枚举中定义的所创建的项类型。</param>
      <param name="itemFlag">用于指定代码项初始内容的可选标志。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Item(System.Int32)">
      <summary>通过项的索引值从集合中获取项。</summary>
      <returns>返回位于指定索引处的项。</returns>
      <param name="index">可检索项的索引（从 0 开始）。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Item(System.String)">
      <summary>通过项的名称从集合中获取项。</summary>
      <returns>返回通过名称指定的项。</returns>
      <param name="name">要从集合中检索的项的名称。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.Remove(System.Int32)">
      <summary>从集合中移除按照项的索引值指定的项。</summary>
      <param name="index">要移除的项的索引值。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.Remove(System.String)">
      <summary>从集合中移除按照项的名称指定的项。</summary>
      <param name="name">要从集合中移除的项的名称。</param>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaPersistSite">
      <summary>对项目持久性进行管理，并对使用由宿主实现的保存和加载操作的代码和其他项进行存储和检索。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.LoadElement(System.String)">
      <summary>获取以前使用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.SaveElement" /> 方法保存的源字符串。</summary>
      <returns>返回与名称参数关联的源代码元素的内容。</returns>
      <param name="name">要加载的代码项的名称。 加载项目文件时，此名称可以是空引用。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.SaveElement(System.String,System.String)">
      <summary>使用给定名称参数保存任意源字符串，然后可在调用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.LoadElement" /> 方法时使用以便重载该字符串。</summary>
      <param name="name">要与指定的源项关联的名称。 保存项目文件时，此名称可以是空引用。</param>
      <param name="source">项的源字符串。</param>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaReferenceItem">
      <summary>描述一个添加到脚本引擎的引用。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaReferenceItem.AssemblyName">
      <summary>获取或设置被引用程序集的名称。</summary>
      <returns>返回被引用程序集的字符串名称。</returns>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaSite">
      <summary>启用主机与脚本引擎之间的通信。 该接口由主机实现。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>获取脚本引擎的已编译状态和关联的调试信息（可选）。</summary>
      <param name="pe">引擎的已编译状态；字节格式的程序集。</param>
      <param name="debugInfo">程序集的调试信息；如果此类信息不存在或不可用，则为空引用。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetEventSourceInstance(System.String,System.String)">
      <summary>获取对先前使用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AddEventSource" /> 方法添加到脚本引擎中的事件源的引用。</summary>
      <returns>将事件源返回到引擎。</returns>
      <param name="itemName">指定的项名称。</param>
      <param name="eventSourceName">指定的事件源名称。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetGlobalInstance(System.String)">
      <summary>获取对全局项的引用，例如主机提供的应用程序对象。</summary>
      <returns>返回对全局对象的引用。</returns>
      <param name="name">获取对全局项的引用，例如主机提供的应用程序对象。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.Notify(System.String,System.Object)">
      <summary>通知主机有关由 .NET 脚本引擎生成的事件。</summary>
      <param name="notify">通知主机有关由 .NET 脚本引擎生成的事件。</param>
      <param name="info">通知主机有关由 .NET 脚本引擎生成的事件。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.OnCompilerError(Microsoft.JScript.Vsa.IJSVsaError)">
      <summary>通知主机如何对脚本引擎遇到的编译器错误作出响应。</summary>
      <returns>如果指示编译器继续向 <see cref="T:Microsoft.JScript.Vsa.IJSVsaSite" /> 对象报告进一步的错误，则返回 TRUE。 如果指示编译器停止向 IVsaSite 对象报告进一步的错误，则返回 FALSE。</returns>
      <param name="error">表示有害错误的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaError" /> 对象。</param>
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaError">
      <summary>定义可由 .NET 脚本引擎引发的异常集。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AppDomainCannotBeSet">
      <summary>值：0x80133000</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AppDomainInvalid">
      <summary>值：0x80133001</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ApplicationBaseCannotBeSet">
      <summary>值：0x80133002</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ApplicationBaseInvalid">
      <summary>值：0x80133003</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AssemblyExpected">
      <summary>值：0x80133004</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AssemblyNameInvalid">
      <summary>值：0x80133005</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.BadAssembly">
      <summary>值：0x80133006</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.BrowserNotExist">
      <summary>值：0x8013303D</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CachedAssemblyInvalid">
      <summary>值：0x80133007</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CallbackUnexpected">
      <summary>值：0x80133008</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CannotAttachToWebServer">
      <summary>值：0x8013304C</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CodeDOMNotAvailable">
      <summary>值：0x80133009</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CompiledStateNotFound">
      <summary>值：0x8013300A</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.DebuggeeNotStarted">
      <summary>值：0x8013303E</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.DebugInfoNotSupported">
      <summary>值：0x8013300B</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ElementNameInvalid">
      <summary>值：0x8013300C</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ElementNotFound">
      <summary>值：0x8013300D</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineBusy">
      <summary>值：0x8013300E</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineCannotClose">
      <summary>值：0x8013300F</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineCannotReset">
      <summary>值：0x80133010</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineClosed">
      <summary>值：0x80133011</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineEmpty">
      <summary>值：0x80133012</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineInitialized">
      <summary>值：0x80133013</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameInUse">
      <summary>值：0x80133014</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameInvalid">
      <summary>值：0x8013303F</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameNotSet">
      <summary>值：0x8013303F</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotCompiled">
      <summary>值：0x80133015</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotExist">
      <summary>值：0x80133040</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotInitialized">
      <summary>值：0x80133016</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotRunning">
      <summary>值：0x80133017</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineRunning">
      <summary>值：0x80133018</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceInvalid">
      <summary>值：0x80133019</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNameInUse">
      <summary>值：0x8013301A</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNameInvalid">
      <summary>值：0x8013301B</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNotFound">
      <summary>值：0x8013301C</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceTypeInvalid">
      <summary>值：0x8013301D</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.FileFormatUnsupported">
      <summary>值：0x80133041</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.FileTypeUnknown">
      <summary>值：0x80133042</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GetCompiledStateFailed">
      <summary>值：0x8013301E</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GlobalInstanceInvalid">
      <summary>值：0x8013301F</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GlobalInstanceTypeInvalid">
      <summary>值：0x80133020</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.InternalCompilerError">
      <summary>值：0x80133021</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemCannotBeRemoved">
      <summary>值：0x80133022</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemCannotBeRenamed">
      <summary>值：0x80133043</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemFlagNotSupported">
      <summary>值：0x80133023</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNameInUse">
      <summary>值：0x80133024</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNameInvalid">
      <summary>值：0x80133025</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNotFound">
      <summary>值：0x80133026</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemTypeNotSupported">
      <summary>值：0x80133027</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.LCIDNotSupported">
      <summary>值：0x80133028</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.LoadElementFailed">
      <summary>值：0x80133029</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.MissingPdb">
      <summary>值：0x8013304A</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.MissingSource">
      <summary>值：0x80133044</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NameTooLong">
      <summary>值：0x80133046</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotClientSideAndNoUrl">
      <summary>值：0x8013304B</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotificationInvalid">
      <summary>值：0x8013302A</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotInitCompleted">
      <summary>值：0x80133045</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.OptionInvalid">
      <summary>值：0x8013302B</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.OptionNotSupported">
      <summary>值：0x8013302C</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ProcNameInUse">
      <summary>值：0x80133047</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ProcNameInvalid">
      <summary>值：0x80133048</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RevokeFailed">
      <summary>值：0x8013302D</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerAlreadySet">
      <summary>值：0x8013302E</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerInUse">
      <summary>值：0x8013302F</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerInvalid">
      <summary>值：0x80133030</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerNotSet">
      <summary>值：0x80133031</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerProtocolInvalid">
      <summary>值：0x80133032</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootNamespaceInvalid">
      <summary>值：0x80133033</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootNamespaceNotSet">
      <summary>值：0x80133034</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SaveCompiledStateFailed">
      <summary>值：0x80133035</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SaveElementFailed">
      <summary>值：0x80133036</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteAlreadySet">
      <summary>值：0x80133037</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteInvalid">
      <summary>值：0x80133038</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteNotSet">
      <summary>值：0x80133039</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SourceItemNotAvailable">
      <summary>值：0x8013303A</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SourceMonikerNotAvailable">
      <summary>值：0x8013303B</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.UnknownError">
      <summary>值：0x801330FF</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.URLInvalid">
      <summary>值：0x8013303C</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.VsaServerDown">
      <summary>值：0x80133049</summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaException">
      <summary>此类型支持 .NET Framework 基础结构，不应从代码直接使用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。 该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="error">描述异常的原因的 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" /> 枚举值。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError,System.String)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="error">描述异常的原因的 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" /> 枚举值。</param>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError,System.String,System.Exception)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="error">描述异常的原因的 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" /> 枚举值。</param>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。 该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。 该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。 该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.JSVsaException.ErrorCode">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>描述异常的原因的 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" /> 枚举值。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。 该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.ToString">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>当前异常的字符串表示形式。</returns>
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaItemFlag">
      <summary>将代码项的类型标识为“类”、“模块”或“无”。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class">
      <summary>在代码项为泛型类型或项类型不接受标志时使用。 在这些情况下，无需特殊标志来创建项。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module">
      <summary>代码项为模块时使用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None">
      <summary>代码项为类时使用。</summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaItemType">
      <summary>表示项的类型。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal">
      <summary>用于将全局对象添加到 .NET 脚本引擎中。 此类用于创建 IJSVsaGlobalItem 对象。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.Code">
      <summary>用于创建一个代码项，以存储 .NET 脚本引擎的源代码。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference">
      <summary>用于添加对外部 .NET 程序集的引用，然后可以在代码中对其进行引用。 此类用于创建 IJSVsaReferenceItem 对象。</summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.ResInfo">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.ResInfo.#ctor(System.String,System.Boolean)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.ResInfo.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.filename">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.fullpath">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.isLinked">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.isPublic">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.name">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.VsaEngine">
      <summary>实现 <see cref="T:Microsoft.Vsa.IVsaEngine" /> 接口。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.#ctor">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.#ctor(System.Boolean)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Clone(System.AppDomain)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CompileEmpty">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.ConnectEvents">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngine">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScope(System.Boolean,System.String[])">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScopeWithType(System.Boolean,System.String[],System.RuntimeTypeHandle)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScopeWithTypeAndRootNamespace(System.Boolean,System.String[],System.RuntimeTypeHandle,System.String)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
      <returns>返回 <see cref="T:Microsoft.JScript.GlobalScope" />。</returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineWithType(System.RuntimeTypeHandle)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.DisconnectEvents">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetAssembly">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetGlobalScope">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItem(System.String)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItemAtIndex(System.Int32)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItemCount">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetMainScope">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetModule">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalArrayConstructor">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalObjectConstructor">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalRegExpConstructor">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.InitVsaEngine(System.String,Microsoft.JScript.Vsa.IJSVsaSite)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Interrupt">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.IsValidIdentifier(System.String)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="P:Microsoft.JScript.Vsa.VsaEngine.LenientGlobalObject">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.PopScriptObject">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.PushScriptObject(Microsoft.JScript.ScriptObject)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.RegisterEventSource(System.String)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Reset">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Restart">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Run(System.AppDomain)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.RunEmpty">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.ScriptObjectStackTop">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.SetOutputStream(Microsoft.JScript.IMessageReceiver)">
      <summary>对脚本引擎，此类、成员或属性在内部，且不应从您的代码中调用。</summary>
    </member>
  </members>
</doc>