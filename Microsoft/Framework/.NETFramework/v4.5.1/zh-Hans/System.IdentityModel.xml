<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.IdentityModel</name>
  </assembly>
  <members>
    <member name="T:System.IdentityModel.AsynchronousOperationException">
      <summary>异步操作发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。</summary>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.AsyncResult">
      <summary>一个实现 <see cref="T:System.IAsyncResult" /> 接口的抽象基类。 用作从可用于公共异步编程方案的 <see cref="T:System.IAsyncResult" /> 对象派生的基类。</summary>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor">
      <summary>从派生类中的构造函数调用，用于初始化没有回调委托或状态对象的 <see cref="T:System.IdentityModel.AsyncResult" /> 类的实例。</summary>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
      <summary>从派生类中的构造函数调用，用于初始化有回调委托和状态对象的 <see cref="T:System.IdentityModel.AsyncResult" /> 类的实例。</summary>
      <param name="callback">异步操作完成时调用的方法。</param>
      <param name="state">用户定义的对象，它限定或包含关于异步操作的信息。</param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor(System.Object)">
      <summary>从派生类中的构造函数调用，用于初始化没有回调委托但有状态对象的 <see cref="T:System.IdentityModel.AsyncResult" /> 类的实例。</summary>
      <param name="state">用户定义的对象，它限定或包含关于异步操作的信息。</param>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.AsyncState">
      <summary>获取用户定义的对象，它限定或包含关于异步操作的信息。</summary>
      <returns>用户定义的对象，它限定或包含关于异步操作的信息。</returns>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.AsyncWaitHandle">
      <summary>获取用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。</returns>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Complete(System.Boolean)">
      <summary>如果您完成了异步操作，且没有出现异常，请调用完整版本。 它更新操作的状态和通知回调。</summary>
      <param name="completedSynchronously">如果异步操作同步完成，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Complete(System.Boolean,System.Exception)">
      <summary>，如果您在此过程中引发异常，请调用完整版本。 除了通知回调之外，它捕获该异常并存储它，以便在调用 <see cref="M:System.IdentityModel.AsyncResult.End(System.IAsyncResult)" /> 方法时抛出。</summary>
      <param name="completedSynchronously">如果异步操作同步完成，则为 true；否则为 false。</param>
      <param name="exception">处理异步操作期期间发生的异常。</param>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.CompletedSynchronously">
      <summary>获取一个值，该值指示异步操作是否同步完成。</summary>
      <returns>如果异步操作同步完成，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Dispose">
      <summary>释放由 <see cref="T:System.IdentityModel.AsyncResult" /> 类的当前实例占用的资源。</summary>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Dispose(System.Boolean)">
      <summary>由 <see cref="M:System.IdentityModel.AsyncResult.Dispose" /> 和 <see cref="M:System.IdentityModel.AsyncResult.Finalize" /> 方法调用，以释放 <see cref="T:System.IdentityModel.AsyncResult" /> 类的当前实例所占用的托管资源和非托管资源。</summary>
      <param name="isExplicitDispose">若要释放托管资源和非托管资源，则为 true；若要仅释放非托管资源，则为 false。 true 指示这是配置显式调用。</param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.End(System.IAsyncResult)">
      <summary>异步操作的 End 功能函数完成时，调用此方法。 它确保异步操作已完成，而且进行常规的验证。</summary>
      <param name="result">表示该异步操作状态 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Finalize">
      <summary>允许 <see cref="T:System.IdentityModel.AsyncResult" /> 对象在“垃圾回收”之前尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.IsCompleted">
      <summary>获取一个值，该值指示异步操作是否已完成。</summary>
      <returns>如果操作完成则为 true，否则为 false。</returns>
    </member>
    <member name="T:System.IdentityModel.BadRequestException">
      <summary>标记请求 （RST) 不为安全标记服务 (STS) 所理解时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.BadRequestException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.BadRequestException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.BadRequestException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.BadRequestException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.CookieTransform">
      <summary>将可逆转数据应用到 Cookie 数据的类的抽象基类。</summary>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.CookieTransform" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.Decode(System.Byte[])">
      <summary>当在派生类中重写时，反转该转换。</summary>
      <returns>这些解码的字节数组。</returns>
      <param name="encoded">cookie 的编码形式。</param>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.Encode(System.Byte[])">
      <summary>当在派生类中重写时，适用该转换。</summary>
      <returns>已编码的 cookie。</returns>
      <param name="value">要编码的字节数组。</param>
    </member>
    <member name="T:System.IdentityModel.DeflateCookieTransform">
      <summary>使用 <see cref="T:System.IO.Compression.DeflateStream" /> 提供 cookie 压缩。</summary>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.DeflateCookieTransform" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.Decode(System.Byte[])">
      <summary>展开数据。</summary>
      <returns>已解码的数据。</returns>
      <param name="encoded">先前从 <see cref="M:System.IdentityModel.DeflateCookieTransform.Encode(System.Byte[])" />返回的数据</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含零字节。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">解压缩的长度大于 <see cref="P:System.IdentityModel.DeflateCookieTransform.MaxDecompressedSize" /> 属性指定的最大长度。</exception>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.Encode(System.Byte[])">
      <summary>压缩数据。</summary>
      <returns>压缩的数据。</returns>
      <param name="value">要压缩的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含零字节。</exception>
    </member>
    <member name="P:System.IdentityModel.DeflateCookieTransform.MaxDecompressedSize">
      <summary>获取或设置所允许的压缩了的缓存的最大大小（以字节为单位）。</summary>
      <returns>解压缩的 Cookie 的最大大小（以字节为单位）。</returns>
    </member>
    <member name="T:System.IdentityModel.DelegatingXmlDictionaryReader">
      <summary>包装一个指定的阅读器和向该包装后的阅读器委托所有 <see cref="T:System.Xml.XmlDictionaryReader" /> 调用的类。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.DelegatingXmlDictionaryReader" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.AttributeCount">
      <summary>从当前阅读器位置开始获取指定个数的特性。</summary>
      <returns>特性的数目。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.BaseURI">
      <summary>获取当前节点的基 URI。</summary>
      <returns>基 URI。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.Close">
      <summary>关闭该读取器并更改 <see cref="P:System.Xml.XmlReader.ReadState" /> 为已关闭。</summary>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Depth">
      <summary>获取当前节点的深度。</summary>
      <returns>深度。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.EOF">
      <summary>获取一个值，该值指示读取器是否定位在流的结尾。</summary>
      <returns>如果该用户在流的结尾，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.Int32)">
      <summary>获取给定索引处的特性的值。</summary>
      <returns>指定索引的特性的值。</returns>
      <param name="i">属性的索引。 该索引是从 0 开始的索引。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.String)">
      <summary>获取具有给定名称的特性的值。</summary>
      <returns>属性的值。 如果未找到该属性，则返回 null。</returns>
      <param name="name">属性的限定名。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.String,System.String)">
      <summary>获取具有给定名称和命名空间 Uri 的属性的值。</summary>
      <returns>属性的值。 如果未找到该属性，则返回 null。</returns>
      <param name="name">属性的本地名称。</param>
      <param name="namespaceURI">特性的命名空间。</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.HasValue">
      <summary>获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlReader.Value" />。</summary>
      <returns>如果当前节点具有 <see cref="P:System.Xml.XmlReader.Value" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.InitializeInnerReader(System.Xml.XmlDictionaryReader)">
      <summary>用指定的内部读取器初始化此实例。</summary>
      <param name="innerReader">被此实例包装的读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerReader" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.InnerReader">
      <summary>获取被此实例包装的内部读取器。</summary>
      <returns>内部读取器。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.IsDefault">
      <summary>获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的特性。</summary>
      <returns>如果当前节点从默认值生成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.IsEmptyElement">
      <summary>获取一个值，该值指示当前节点是否是一个空元素。</summary>
      <returns>如果当前节点为一个空元素，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.Int32)">
      <summary>获取具有指定索引的特性的值。</summary>
      <returns>指定索引处的特性值。</returns>
      <param name="i">属性的索引。</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.String)">
      <summary>获取具有指定的本地名称和命名空间 URI（在由来自换行读取器的 <see cref="P:System.Xml.XmlReader.Name" /> 属性返回时）。</summary>
      <returns>指定属性 (Attribute) 的值。 如果未找到该属性，则返回 null。</returns>
      <param name="name">属性的限定名。</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.String,System.String)">
      <summary>获取具有指定的本地名称和命名空间 URI（在由 <see cref="P:System.Xml.XmlReader.LocalName" /> 属性和来自换行读取器的 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性返回时）。</summary>
      <returns>指定属性 (Attribute) 的值。 如果未找到该属性，则返回 null。</returns>
      <param name="name">属性的本地名称。</param>
      <param name="namespaceURI">属性的命名空间 URI。</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.LocalName">
      <summary>获取当前节点的本地名称。</summary>
      <returns>移除了前缀的当前节点的名称。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.LookupNamespace(System.String)">
      <summary>解析当前元素的范围内的命名空间前缀。</summary>
      <returns>前缀与之匹配的命名空间 Uri或为 Null （如果未找到匹配的前缀）。</returns>
      <param name="prefix">要解析其命名空间 URI 的前缀。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.Int32)">
      <summary>移动到具有指定索引的特性。</summary>
      <param name="i">属性的索引。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.String)">
      <summary>移动到具有给定本地名称的特性。</summary>
      <returns>如果找到该特性，则为 true；否则为 false。</returns>
      <param name="name">属性的限定名。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.String,System.String)">
      <summary>由指定的 System.Xml.XmlReader.LocalName and System.Xml.XmlReader.NamespaceURI 移动至此特性。</summary>
      <returns>如果找到该特性，则为 true；否则为 false。</returns>
      <param name="name">属性的本地名称。</param>
      <param name="ns">属性的命名空间 URI。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToElement">
      <summary>移动至类型元素的节点。</summary>
      <returns>如果读取器放置于元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToFirstAttribute">
      <summary>移动到第一个特性。</summary>
      <returns>如果读取器指针置于特性返回 true，否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToNextAttribute">
      <summary>移动读取器至下一个特性。</summary>
      <returns>如果读取器指针置于特性返回 true，否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Name">
      <summary>获取当前节点的限定名。</summary>
      <returns>当前节点的限定名。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NamespaceURI">
      <summary>获取当前节点的命名空间 URI。</summary>
      <returns>当前 node.的命名空间 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NameTable">
      <summary>获取与此实例关联的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNameTable" />，它使您能够获取该节点内字符串的原子化版本。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Prefix">
      <summary>获取与当前节点关联的命名空间前缀。</summary>
      <returns>与当前节点关联的命名空间前缀。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.QuoteChar">
      <summary>获取用于括起特性节点值的引号字符。或...</summary>
      <returns>用于括住特性节点值的引号字符（" 或 '）。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.Read">
      <summary>从流中读取下一个节点。</summary>
      <returns>如果下一个节点成功读取，则为 true。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadAttributeValue">
      <summary>将属性值分析为一个或多个 Text、EntityReference 或 EndEntity 节点。</summary>
      <returns>如果返回节点，则为 true。如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 Base64 解码的二进制字节。</summary>
      <returns>写入缓冲区的字节数。</returns>
      <param name="buffer">作为结果文本复制目标的缓冲区。 此值不能为 null。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>读取内容并返回 BinHex 解码的二进制字节。</summary>
      <returns>写入缓冲区的字节数。</returns>
      <param name="buffer">作为结果文本复制目标的缓冲区。 此值不能为 null。</param>
      <param name="index">缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。</param>
      <param name="count">要复制到缓冲区的最大字节数。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsUniqueId">
      <summary>读取该内容并返回包含的字符串。</summary>
      <returns>返回 <see cref="T:System.Xml.UniqueId" />。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.ReadState">
      <summary>获取读取器的状态。</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 值之一，它指定读取器的状态。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>读取嵌入在 XML 文档中的大量文本流。</summary>
      <returns>读取到缓冲区中的字符数。 如果不再有文本内容，则返回值零。</returns>
      <param name="buffer">字符数组，充当文本内容写入到的缓冲区。 此值不能为 null。</param>
      <param name="index">System.Xml.XmlReader 可以开始复制结果的缓冲区中的偏移量。</param>
      <param name="count">要复制到缓冲区中的最大字符数。 此方法返回复制的实际字符数。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ResolveEntity">
      <summary>解析 EntityReference 节点的实体引用。</summary>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Value">
      <summary>获取当前节点的文本值。</summary>
      <returns>当前节点的文本值。 有关更多信息，请参见 <see cref="P:System.Xml.XmlReader.Value" /> 属性</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.ValueType">
      <summary>获取当前节点的 Common Language Runtime (CLR) 类型。</summary>
      <returns>与节点的类型化值对应的 CLR 类型。 默认值为 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.XmlLang">
      <summary>获取 xml:lang 范围。</summary>
      <returns>xml:lang 范围。</returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.XmlSpace">
      <summary>获取当前 xml:space 范围。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值之一。 如果不存在任何 xml:space 范围，则该属性默认值为 <see cref="F:System.Xml.XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.IdentityModel.DelegatingXmlDictionaryWriter">
      <summary>包装一个指定的编写器和向该包装后的编写器委托所有 <see cref="T:System.Xml.XmlDictionaryWriter" /> 调用的类。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.DelegatingXmlDictionaryWriter" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.CanCanonicalize">
      <summary>返回指示读取器是否能够规范化的值。</summary>
      <returns>如果可以规范读取器，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.Close">
      <summary>关闭基础流。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.EndCanonicalization">
      <summary>在由派生类实现时，它会停止由匹配的 <see cref="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])" /> 调用启动的规范化。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.Flush">
      <summary>刷新基础流。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.InitializeInnerWriter(System.Xml.XmlDictionaryWriter)">
      <summary>用指定的内部编辑器初始化此实例。</summary>
      <param name="innerWriter">被实例包装的编写器。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.InitializeTracingWriter(System.Xml.XmlWriter)">
      <summary>用所有调用将回显和将写入非规范化 XML 的编辑器初始化此实例。</summary>
      <param name="tracingWriter">编写器将回显所有调用。 如果为 null，则将不回显调用。</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.InnerWriter">
      <summary>获取包装的编写器。</summary>
      <returns>返回一个 <see cref="T:System.Xml.XmlDictionaryWriter" />。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.LookupPrefix(System.String)">
      <summary>返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。</summary>
      <returns>匹配的前缀或为 Null（如果当前范围内未找到匹配的命名空间 URI）。</returns>
      <param name="ns">要查找其前缀的命名空间 URI。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <param name="stream">应要向其写入规范流的流。</param>
      <param name="includeComments">值指示是否也应将注释写入规范化。</param>
      <param name="inclusivePrefixes">需要包含规范流的前缀的设置。 在第一个元素处被定义的前缀，该元素被写入规范流。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的二进制字节编码为 Base64 并写出结果文本。</summary>
      <param name="buffer">要进行编码的字节数组。</param>
      <param name="index">缓冲区中指示要写入字节的起始位置的位置。</param>
      <param name="count">要写入的字节数。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteCData(System.String)">
      <summary>写入包含指定文本的 CDATA 块。</summary>
      <param name="text">要放置在 CDATA 块中的文本。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteCharEntity(System.Char)">
      <summary>为指定的 Unicode 字符值强制生成字符实体。</summary>
      <param name="ch">为其生成字符实体的 Unicode 字符。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>当在派生类中被重写时，以每次一个缓冲区的方式写入文本。</summary>
      <param name="buffer">字符数组，包含要写入的文本。</param>
      <param name="index">缓冲区中指示要写入文本的起始位置的位置。</param>
      <param name="count">要写入的字符数。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteComment(System.String)">
      <summary>写出包含指定文本的注释。</summary>
      <param name="text">要放在注释内部的文本。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>写出具有指定名称和可选特性的 DOCTYPE 声明。</summary>
      <param name="name">DOCTYPE 的名称。 它必须是非空的。</param>
      <param name="pubid">如果非 null，则它还写入 PUBLIC "pubid" "sysid"，这里的 pubid 和 sysid 用给定参数的值替换。</param>
      <param name="sysid">如果 pubid 为 null 而 sysid 非 null，则它编写 SYSTEM "sysid"，这里的 sysid 用此参数的值替换。</param>
      <param name="subset">如果非 null，则它编写 [subset]，这里的 subset 用此参数的值替换。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndAttribute">
      <summary>关闭先前的 System.Xml.XmlWriter.WriteStartAttribute（System.String、System.String）调用。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndDocument">
      <summary>关闭任何打开的元素或特性并将编写器重新设置为 Start 状态。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndElement">
      <summary>关闭一个元素并弹出相应的命名空间范围。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEntityRef(System.String)">
      <summary>按名称写出实体引用。</summary>
      <param name="name">实体引用的名称。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteFullEndElement">
      <summary>关闭一个元素并弹出相应的命名空间范围。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>写出在名称和文本之间有空格的处理指令，如下所示：&amp;lt;?name text?&amp;gt;。</summary>
      <param name="name">处理指令的名称。</param>
      <param name="text">要包括在处理指令中的文本。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>当在派生类中被重写时，从字符缓冲区手动编写原始标记。</summary>
      <param name="buffer">字符数组，包含要写入的文本。</param>
      <param name="index">缓冲区中的位置，指示要写入文本的起始位置。</param>
      <param name="count">要写入的字符数。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteRaw(System.String)">
      <summary>从字符串手动编写原始标记。</summary>
      <param name="data">字符串，包含要编写的文本。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>编写具有指定本地名称和命名空间 URI 的属性的起始内容。</summary>
      <param name="prefix">属性的命名空间前缀。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="ns">属性的命名空间 URI。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartDocument">
      <summary>当在派生类中被重写时，编写版本为"1.0"的 XML 声明。</summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartDocument(System.Boolean)">
      <summary>当在派生类中被重写时，编写版本为"1.0"并具有独立属性的 XML 声明。</summary>
      <param name="standalone">如果为 True，则它将写入"standalone=yes"；如果为 False，则它将写入 "standalone=no"。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>当在派生类中被重写时，写出指定的开始标记并将其与给定的命名空间和前缀关联起来。</summary>
      <param name="prefix">元素的命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="ns">与元素关联的命名空间 URI。</param>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteState">
      <summary>当在派生类中被重写时，获取编写器的状态。</summary>
      <returns>返回一个 <see cref="T:System.Xml.WriteState" />。</returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteString(System.String)">
      <summary>写入给定的文本内容。</summary>
      <param name="text">要编写的文本。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>为代理项字符对生成并编写代理项字符实体。</summary>
      <param name="lowChar">低代理项。 它必须是介于 0xDC00 和 0xDFFF 之间的值。</param>
      <param name="highChar">高代理项。 它必须是介于 0xD800 和 0xDBFF 之间的值。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteWhitespace(System.String)">
      <summary>写出给定的空白。</summary>
      <param name="ws">空白字符的字符串。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
      <summary>以带有前缀“xml:”的 xml 特性写入特性。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="value">特性值。</param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
      <summary>写入 xmlns 命名空间声明。</summary>
      <param name="prefix">命名空间声明的前缀。</param>
      <param name="namespaceUri">命名空间 URI 自身。</param>
    </member>
    <member name="T:System.IdentityModel.EnvelopedSignatureReader">
      <summary>对指向被包封签名的 XML 的读者进行包装，以提供可用以读取内容的读取器，而不必处理该签名。 当信封的最后一个元素读取时，该签名自动验证。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>使用指定读取器和标记程序初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</summary>
      <param name="reader">指向被包封签名的 XML 的读者。</param>
      <param name="securityTokenSerializer">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="securityTokenSerializer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定读取器、安全令牌序列化程序和令牌解析器初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</summary>
      <param name="reader">指向被包封签名的 XML 的读者。</param>
      <param name="securityTokenSerializer">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</param>
      <param name="signingTokenResolver">标记解析器被用于解决签名令牌。 null 指定应使用默认安全令牌解析器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="securityTokenSerializer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.Boolean,System.Boolean,System.Boolean)">
      <summary>使用指定读取器、安全令牌序列化程序、令牌解析器和行为初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类的新实例。</summary>
      <param name="reader">指向被包封签名的 XML 的读者。</param>
      <param name="securityTokenSerializer">用于反序列化 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 署名的标记序列化程序。</param>
      <param name="signingTokenResolver">标记解析器被用于解决签名令牌。 null 指定应使用默认安全令牌解析器。</param>
      <param name="requireSignature">如果该签名是必需的，则为 true；否则为 false。</param>
      <param name="automaticallyReadSignature">如果应读取前面，则为 true；否则为 false。</param>
      <param name="resolveIntrinsicSigningKeys">如果应解决内部签名密钥，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="securityTokenSerializer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.Read">
      <summary>从流中读取下一个节点。</summary>
      <returns>如果成功读取了下一个节点，则为 true；如果没有其他节点可读取，则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.EnvelopedSignatureReader.SigningCredentials">
      <summary>获取所用的署名，该信封使用后该署名认证时的签名凭据。</summary>
      <returns>签名凭据。</returns>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.TryReadSignature">
      <summary>如果读者正在读取 &lt;Signature&gt; 元素，则读取签名。</summary>
      <returns>如果该前面已成功读取，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.IdentityModel.EnvelopedSignatureWriter">
      <summary>信封完全写入时，对写入器进行包装并自动生成签名。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.#ctor(System.Xml.XmlWriter,System.IdentityModel.Tokens.SigningCredentials,System.String,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureWriter" /> 类的新实例。</summary>
      <param name="innerWriter">要包装的编写器。</param>
      <param name="signingCredentials">用来生成签名的签名凭据。</param>
      <param name="referenceId">信封的引用 ID。</param>
      <param name="securityTokenSerializer">用于序列化 KeyInfo 署名的标记序列化程序。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="referenceId" /> 为 null 或为空。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerWriter" /> 为 null。 - 或 - <paramref name="signingCredentials" /> 为 null。 - 或 - <paramref name="securityTokenSerializer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteEndElement">
      <summary>关闭一个元素并弹出相应的命名空间范围。</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteFullEndElement">
      <summary>关闭一个元素并弹出相应的命名空间范围。</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteSignature">
      <summary>设置信封中署名的位置。 编写该信封指示签名应插入的点时，调用此方法。</summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>写入指定的开始标记并将其与指定的命名空间关联起来。</summary>
      <param name="prefix">元素的命名空间前缀。</param>
      <param name="localName">元素的本地名称。无前缀元素的名称。</param>
      <param name="ns">与元素关联的命名空间 URI。</param>
    </member>
    <member name="T:System.IdentityModel.LimitExceededException">
      <summary>当超过配置限制或配额引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.LimitExceededException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.LimitExceededException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.LimitExceededException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.LimitExceededException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.OpenObject">
      <summary>给派生类提供一个泛型属性包的抽象类。</summary>
    </member>
    <member name="M:System.IdentityModel.OpenObject.#ctor">
      <summary>从派生类中调用，用于初始化 <see cref="T:System.IdentityModel.OpenObject" /> 类。</summary>
    </member>
    <member name="P:System.IdentityModel.OpenObject.Properties">
      <summary>获取属性包来扩展对象。</summary>
      <returns>用来扩展对象的属性包。</returns>
    </member>
    <member name="T:System.IdentityModel.ProtectedDataCookieTransform">
      <summary>通过使用 <see cref="T:System.Security.Cryptography.ProtectedData" /> 类提供 cookie 完整性和机密性。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.#ctor">
      <summary>创建 <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.Decode(System.Byte[])">
      <summary>验证数据保护并返回解密的数据。</summary>
      <returns>最初受保护的解密数据。</returns>
      <param name="encoded">以前从 <see cref="M:System.IdentityModel.ProtectedDataCookieTransform.Encode(System.Byte[])" /> 方法返回的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoded" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encoded" /> 包含零字节。</exception>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.Encode(System.Byte[])">
      <summary>保护（加密）指定数据。</summary>
      <returns>受保护（加密）数据。</returns>
      <param name="value">受保护的数据（加密）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含零字节。</exception>
    </member>
    <member name="T:System.IdentityModel.RequestException">
      <summary>请求失败时引发的异常的基类。</summary>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.RequestException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.RequestException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.RequestException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.RequestException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.RequestFailedException">
      <summary>如果指定的请求 (RST) 由于一个外在的不能具体确定的原因失败被引发异常。</summary>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.RequestFailedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.RequestFailedException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.RequestFailedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.RequestFailedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.RsaEncryptionCookieTransform">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" />，加密COOKIE。</summary>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.#ctor(System.Security.Cryptography.RSA)">
      <summary>初始化使用指定加密和解密密钥的 <see cref="T:System.IdentityModel.RsaEncryptionCookieTransform" /> 类的新实例。</summary>
      <param name="key">作为默认加密和解密密钥的密钥。 初始化 <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys" /> 和 <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用用于加密和解密的指定的 X.509 证书的私钥来初始化  <see cref="T:System.IdentityModel.RsaEncryptionCookieTransform" /> 类的新实例。</summary>
      <param name="certificate">其私钥要用于加密和解密的证书。 其私钥要用作加密和解密密钥的证书。 初始化 <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys" /> 和 <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificate" /> 没有私钥。 - 或 - 私钥不是 RSA。</exception>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.Decode(System.Byte[])">
      <summary>对指定的数据使用提供的 RSA 密钥对 AES 密钥解密cookie。</summary>
      <returns>已解码的数据</returns>
      <param name="encoded">已编码的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoded" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encoded" /> 包含零字节。</exception>
      <exception cref="T:System.NotSupportedException">平台不支持请求的算法。</exception>
      <exception cref="T:System.InvalidOperationException">没有解密密钥或密钥都不匹配。</exception>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys">
      <summary>获取用于于解密的键。默认情况下，该属性返回一个仅包含加密密钥的列表。</summary>
      <returns>要用于解密的密钥。</returns>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.Encode(System.Byte[])">
      <summary>编码指定数据。 使用默认加密算法 (AES-256) 加密数据，然后使用 RSA 加密 AES 密钥，并且追加 RSA 公钥。</summary>
      <returns>已编码的数据。</returns>
      <param name="value">要编码的数据</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含零字节。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey">
      <summary>获取或设置加密所用的 RSA 键。</summary>
      <returns>用于加密的 RSA 密钥。</returns>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.HashName">
      <summary>获取或设置要使用哈希算法的名称。</summary>
      <returns>要使用的哈希算法的名称。 默认值为 SHA2566。</returns>
    </member>
    <member name="T:System.IdentityModel.RsaSignatureCookieTransform">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 签名提供机密完整性。</summary>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.#ctor(System.Security.Cryptography.RSA)">
      <summary>使用指定的 RSA 密钥初始化 <see cref="T:System.IdentityModel.RsaSignatureCookieTransform" /> 类的新实例。</summary>
      <param name="key">作为默认签名和验证密钥的 RSA 密钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定证书的私有密钥初始化 <see cref="T:System.IdentityModel.RsaSignatureCookieTransform" /> 类的新实例。</summary>
      <param name="certificate">其私钥要用于签名和验证的证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificate" /> 没有私钥 - 或 - <paramref name="certificate" /> 的私钥不是一个 RSA 密钥。</exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.Decode(System.Byte[])">
      <summary>验证指定的签名并返回原始的和未签名的数据。</summary>
      <returns>原始数据（无符号）。</returns>
      <param name="encoded">以前从 <see cref="M:System.IdentityModel.RsaSignatureCookieTransform.Encode(System.Byte[])" /> 方法返回的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoded" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encoded" /> 包含零字节。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">签名无效。</exception>
      <exception cref="T:System.FormatException">数据的格式有错。</exception>
      <exception cref="T:System.InvalidOperationException">没有验证密钥。</exception>
      <exception cref="T:System.NotSupportedException">平台不支持指定的算法。</exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.Encode(System.Byte[])">
      <summary>签署指定数据。</summary>
      <returns>已签名的数据。</returns>
      <param name="value">要签名的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 包含零字节。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> 属性为 null。 - 或 - 由 <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> 属性指定的密钥不可赋值为 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />。 - 或 - 由 <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> 属性指定的密钥不包含一个私钥。</exception>
      <exception cref="T:System.NotSupportedException">操作系统不支持指定的算法。</exception>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.HashName">
      <summary>获取或设置要使用哈希算法的名称。</summary>
      <returns>哈希算法的名称。 默认值为 SHA256。</returns>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey">
      <summary>获取或设置用于签名的 RSA 键。</summary>
      <returns>密钥是用来签名的。</returns>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.VerificationKeys">
      <summary>获取用于签名验证的密钥的集合。  默认情况下，此属性返回只包含该签名密钥的列表。</summary>
      <returns>用于签名验证的密钥的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Scope">
      <summary>表示令牌颁发请求的配置。</summary>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Scope" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String)">
      <summary>初始化用指定 appliesTo 地址的 <see cref="T:System.IdentityModel.Scope" /> 类的新实例。</summary>
      <param name="appliesToAddress">依赖方的 appliesTo 地址。 通常此为 URI。</param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>用指定的 appliesTo 地址和加密凭据初始化 <see cref="T:System.IdentityModel.Scope" /> 类的新实例。</summary>
      <param name="appliesToAddress">依赖方的 appliesTo 地址。 通常此为 URI。</param>
      <param name="encryptingCredentials">依赖的一方的加密凭据。</param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)">
      <summary>用指定的 appliesTo 地址和签名凭据初始化 <see cref="T:System.IdentityModel.Scope" /> 类的新实例。</summary>
      <param name="appliesToAddress">依赖方的 appliesTo 地址。 通常此为 URI。</param>
      <param name="signingCredentials">依赖的一方的签名凭据。</param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>用指定的 appliesTo 地址、签名凭据和加密凭据初始化 <see cref="T:System.IdentityModel.Scope" /> 类的新实例。</summary>
      <param name="appliesToAddress">依赖方的 appliesTo 地址。 通常此为 URI。</param>
      <param name="signingCredentials">依赖的一方的签名凭据。</param>
      <param name="encryptingCredentials">依赖的一方的加密凭据。</param>
    </member>
    <member name="P:System.IdentityModel.Scope.AppliesToAddress">
      <summary>获取或设置依赖方的 appliesTo 地址。</summary>
      <returns>依赖方的 appliesTo 地址。 通常此为 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.EncryptingCredentials">
      <summary>获取或设置依赖方的加密凭据。</summary>
      <returns>被用于依赖的一方的加密凭据。</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.Properties">
      <summary>获取用来扩展对象的属性包。</summary>
      <returns>属性包。</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.ReplyToAddress">
      <summary>获取或设置依赖方的 replyTo 地址。</summary>
      <returns>依赖方的 replyTo 地址。 通常此为 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.SigningCredentials">
      <summary>获取或设置依赖方的签名凭据。</summary>
      <returns>被用于依赖的一方的签名凭据。</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired">
      <summary>获取或设置指示颁发的对称密钥是否必须加密的值。</summary>
      <returns>如果必须加密对称密钥，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Scope.TokenEncryptionRequired">
      <summary>获取或设置指示颁发的安全令牌是否必须加密的值。</summary>
      <returns>如果必须加密安全标记，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.IdentityModel.SecurityMessageSerializationException">
      <summary>序列化安全信息的过程中发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.SecurityTokenService">
      <summary>定义安全令牌服务 (STS) 的属性和方法的抽象基类。</summary>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)">
      <summary>已从派生的类中调用，以使用指定的配置设置初始化 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类。</summary>
      <param name="securityTokenServiceConfiguration">一个 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />，包含 STS 设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityTokenServiceConfiguration" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>在派生类中重写时，开始异步 WS 信任取消请求。</summary>
      <returns>引用异步取消操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
      <param name="callback">接收异步取消操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步取消操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)">
      <summary>当在派生类中重写时，开始对 <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> 方法的异步调用。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
      <param name="scope">包含与请求相关的依赖放的信息的 <see cref="T:System.IdentityModel.Scope" />。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>当在派生类中重写时，开始对 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> 方法的异步调用。</summary>
      <returns>引用异步取消操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
      <param name="callback">接收异步操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>在派生类中重写时，开始异步 WS 信任发布请求。</summary>
      <returns>引用异步问题操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
      <param name="callback">接收异步问题操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步发布操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>在派生类中重写时，开始异步 WS 信任更新请求。</summary>
      <returns>引用异步续订操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
      <param name="callback">接收异步续预定操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步续订操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>在派生类中重写时，开始异步 WS 信任验证请求。</summary>
      <returns>引用异步验证操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
      <param name="callback">可接收异步验证操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个包含与异步验证操作关联的状态信息的对象。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>在派生类中重写时，处理 WS 信任取消请求。</summary>
      <returns>表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>创建 <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" /> 的实例。</summary>
      <returns>
        <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />。</returns>
      <param name="request">传入令牌请求。</param>
      <param name="scope">从 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> 中返回的 <see cref="P:System.IdentityModel.SecurityTokenService.Scope" /> 对象.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。 - 或 - <paramref name="scope" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)">
      <summary>在派生类中重写时，完成异步 WS 信任取消请求。</summary>
      <returns>表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)">
      <summary>当在派生类中重写时，完成对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> 方法的异步调用。</summary>
      <returns>
        <see cref="T:System.Security.Claims.ClaimsIdentity" /> 包含放置在发布的安全标志上的声明的集合。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)">
      <summary>当在派生类中重写时，完成对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的异步调用。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Scope" /> 封装在对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用中指定的与请求 (RST) 关联的依赖方 (RP) 信息。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)">
      <summary>在派生类中重写时，完成异步 WS 信任发布请求。</summary>
      <returns>表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)">
      <summary>在派生类中重写时，完成异步 WS 信任更新请求。</summary>
      <returns>表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)">
      <summary>在派生类中重写时，完成异步 WS 信任验证请求。</summary>
      <returns>表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetIssuerName">
      <summary>获取或设置安全标记服务的 （STS） 的名称。</summary>
      <returns>发行人名称。</returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>当在派生类中重写时，此方法将返回要包括在颁发令牌中的输出主题的集合。</summary>
      <returns>
        <see cref="T:System.Security.Claims.ClaimsIdentity" /> 包含放置在发布的安全标志上的声明的集合。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
      <param name="scope">包含与请求相关的依赖放的信息的 <see cref="T:System.IdentityModel.Scope" />。 作为 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> 方法的 <see cref="T:System.IdentityModel.Scope" />参数返回的对象。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>获取要包含在响应（RETR) 内的证明标记。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.ProofDescriptor" />，表示新建的证明说明符。 在持有者令牌情况下，证明描述符可以是非对称证明描述符、一个对称证明描述符或 null。</returns>
      <param name="request">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示传入标记请求 (RST)。</param>
      <param name="scope">封装有关该依赖的一方的信息的 <see cref="T:System.IdentityModel.Scope" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。 - 或 - <paramref name="scope" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>获取请求者的标记加密凭据。</summary>
      <returns>表示请求者的加密凭据的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 对象。</returns>
      <param name="request">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示传入标记请求 (RST)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建响应 (RSTR)，它包含使用指定请求 (RST) 和安全令牌描述符颁发的令牌。</summary>
      <returns>响应 (RSTR) 或 null（如果无法从指定请求和令牌描述符创建响应）。 默认实现返回 null（如果 <paramref name="tokenDescriptor" /> 参数为 null）。</returns>
      <param name="request">包含令牌请求的 RST。</param>
      <param name="tokenDescriptor">令牌描述符包含要用于颁发的令牌的信息。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>获取包含与指定请求（RST）关联的依赖方（RP）信息的 <see cref="T:System.IdentityModel.Scope" /> 对象。 实现该 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类时，必须重写此方法。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Scope" /> 封装与请求关联的 RP 信息。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示客户发出请求。</param>
      <param name="request">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示传入请求 (RST)。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)">
      <summary>获取适合保护指定类型的安全令牌的安全令牌处理程序。</summary>
      <returns>表示用于创建发布的安全标志的标志处理程序的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />。 如果请求的标记类型不受支持（没有为指定的标记类型配置处理程序），则返回 null。</returns>
      <param name="requestedTokenType">一个字符串，其中包含请求的令牌类型 URI。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)">
      <summary>获取颁发的令牌的生存期。</summary>
      <returns>一个表示授予生存期的 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" />。</returns>
      <param name="requestLifetime">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" />，表示所请求的生存周期。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>发出安全令牌。</summary>
      <returns>包含发布的安全标识的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Principal">
      <summary>获取或设置与当前实例关联的主体。</summary>
      <returns>表示当前主体的 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。</returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>在派生类中重写时，处理 WS 信任续订请求。</summary>
      <returns>表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Request">
      <summary>获取或设置要与当前实例关联的安全性标记请求 （RST) 。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，包含请求。</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Scope">
      <summary>获取或设置与当前实例关联的范围。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Scope" /> 表示令牌颁发请求的配置。</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor">
      <summary>获取或设置与当前 <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> 实例关联的数据。</summary>
      <returns>与当前实例关联的安全性标记请求 （RST) 。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration">
      <summary>获取实例所有者的配置。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />，包含当前实例的配置。</returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>在派生类中重写时，处理 WS 信任验证请求。</summary>
      <returns>表示 RSTR 返回到调用程序的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。</returns>
      <param name="principal">一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" />，表示令牌请求者的标识。</param>
      <param name="request">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，表示安全令牌请求。 这包括请求消息和其他客户端相关信息，如授权上下文。</param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>确认该事例 (RST) 封装的安全标记的请求。</summary>
      <param name="request">一个表示请求的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />。</param>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException">
        <paramref name="request" /> 为 null。 - 或 - 请求的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType" /> 属性未设置为 <see cref="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue" />。 - 或 - 请求的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> 属性不是在 <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> 类中定义的 null 或某个常数。 - 或 - 请求的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> 是 <see cref="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer" />，并且 KeySize 元素存在，但其值不为零。</exception>
      <exception cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException">STS 不支持请求令牌的类型 (基于请求的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType" /> 属性的值)。</exception>
    </member>
    <member name="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState">
      <summary>此类用于在安全标记服务内维护横跨异步调用的请求状态。</summary>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.FederatedAsyncState.#ctor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Security.Claims.ClaimsPrincipal,System.IAsyncResult)">
      <summary>使用指定的标记请求初始化 (RST)、标记请求者和 <see cref="T:System.IAsyncResult" /> 对象的 <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> 类的新实例。</summary>
      <param name="request">标记请求。</param>
      <param name="principal">请求者的标识。</param>
      <param name="result">一个表示异步调用状态的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。 - 或 - <paramref name="result" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.FederatedAsyncState.#ctor(System.IdentityModel.SecurityTokenService.FederatedAsyncState)">
      <summary>从指定的 <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> 对象初始化 <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> 类的新实例。 此构造函数有效地创建指定实例的副本。</summary>
      <param name="federatedAsyncState">从其创建新实例的 <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="federatedAsyncState" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.ClaimsPrincipal">
      <summary>获取与异步调用相关联的标记请求者标识。</summary>
      <returns>标记请求者的标识。</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.Request">
      <summary>获取与异步调用关联的标记请求 (RST)。</summary>
      <returns>与异步调用关联的令牌请求。</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.Result">
      <summary>获取与异步调用关联的 <see cref="T:System.IAsyncResult" />。</summary>
      <returns>一个表示异步调用状态的 <see cref="T:System.IAsyncResult" />。</returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.SecurityTokenHandler">
      <summary>获取或设置异步令牌颁发调用期间使用的安全令牌处理程序。</summary>
      <returns>将使用的标记处理程序。</returns>
    </member>
    <member name="T:System.IdentityModel.SignatureVerificationFailedException">
      <summary>处理签名过程中发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.TypedAsyncResult`1">
      <summary>
        <see cref="T:System.IdentityModel.AsyncResult" /> 的具体实现将包含结果 <see cref="T:System.Type" />，并在调用 <see cref="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)" /> 的方法时将其返回。</summary>
      <typeparam name="T">结果的类型。</typeparam>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
      <summary>初始化 <see cref="T:System.IdentityModel.TypedAsyncResult`1" /> 类的新实例，它包含回调委托和状态对象。</summary>
      <param name="callback">异步操作完成时调用的方法。</param>
      <param name="state">用户定义的对象，它限定或包含关于异步操作的信息。</param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.IdentityModel.TypedAsyncResult`1" /> 类的新实例，它包含状态对象。</summary>
      <param name="state">用户定义的对象，它限定或包含关于异步操作的信息。</param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean)">
      <summary>如果您完成了异步操作，且没有出现异常，请调用完整版本。 它更新操作的状态和通知回调。</summary>
      <param name="result">要包装的结果。</param>
      <param name="completedSynchronously">如果异步操作同步完成，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean,System.Exception)">
      <summary>，如果您在此过程中引发异常，请调用完整版本。 除了通知回调之外，它捕获该异常并存储它，以便在调用 <see cref="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)" />  方法时抛出。</summary>
      <param name="result">要包装的结果。</param>
      <param name="completedSynchronously">如果异步操作同步完成，则为 true；否则为 false。</param>
      <param name="exception">处理异步操作期期间发生的异常。</param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)">
      <summary>End 函数异步操作完成后需调用 End。 它确保异步操作已完成，而且进行常规的验证。</summary>
      <returns>异步操作的类型化结果。</returns>
      <param name="result">表示异步操作状态 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.IdentityModel.TypedAsyncResult`1.Result">
      <summary>获取或设置完成的异步操作的类型化结果。</summary>
      <returns>完成的异步操作的类型化结果。</returns>
    </member>
    <member name="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException">
      <summary>当指定标识请求 （RST） 由于未知标记的类型不能被理解引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.String)">
      <summary>使用指定的标记类型初始化 <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> 类的新实例。</summary>
      <param name="tokenType">字符串，它包含令牌类型 URI。</param>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="exception">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="exception" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有不受支持的标记类型和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.UnsupportedTokenTypeBadRequestException.TokenType">
      <summary>获取并设置不支持的标记类型 URI。</summary>
      <returns>一个字符串，其中包含不支持的令牌类型 URI。</returns>
    </member>
    <member name="T:System.IdentityModel.Claims.Claim">
      <summary>表示与某个实体关联的声明。</summary>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.#ctor(System.String,System.Object,System.String)">
      <summary>使用指定的类型、资源和权限初始化 <see cref="T:System.IdentityModel.Claims.Claim" /> 类的新实例。</summary>
      <param name="claimType">表示声明类型的统一资源标识符 (URI)。</param>
      <param name="resource">与新声明关联的对象。</param>
      <param name="right">与声明关联的权限的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> 为 null。 - 或 - <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="claimType" /> 长度为零。 - 或 - <paramref name="right" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.ClaimType">
      <summary>获取声明的类型。</summary>
      <returns>表示声明类型的 URI。</returns>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateDenyOnlyWindowsSidClaim(System.Security.Principal.SecurityIdentifier)">
      <summary>创建一个表示指定的 deny-only 安全标识符 (SID) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>一个表示 <paramref name="sid" /> 参数中指定的 SID 的 <see cref="T:System.IdentityModel.Claims.Claim" />。</returns>
      <param name="sid">一个表示 deny-only SID 的 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sid" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateDnsClaim(System.String)">
      <summary>创建一个表示指定域名系统 (DNS) 名称的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="dns">与声明关联的实体的 DNS 名称。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dns" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateHashClaim(System.Byte[])">
      <summary>创建一个表示指定哈希值的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="hash">指定哈希值的字节值数组。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateMailAddressClaim(System.Net.Mail.MailAddress)">
      <summary>创建一个表示指定电子邮件地址的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="mailAddress">一个指定此声明所表示的电子邮件地址的 <see cref="T:System.Net.Mail.MailAddress" />。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mailAddress" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateNameClaim(System.String)">
      <summary>创建一个表示指定名称的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="name">与声明关联的实体的名称。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateRsaClaim(System.Security.Cryptography.RSA)">
      <summary>创建一个表示指定 RSA 密钥的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="rsa">一个表示 RSA 加密密钥的 <see cref="T:System.Security.Cryptography.RSA" /> 对象。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateSpnClaim(System.String)">
      <summary>创建一个表示指定服务主要名称 (SPN) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="spn">与此声明关联的实体的 SPN。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spn" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateThumbprintClaim(System.Byte[])">
      <summary>创建一个表示指定指纹的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="thumbprint">一个字节值数组，指定与声明关联的实体的指纹。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="thumbprint" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateUpnClaim(System.String)">
      <summary>创建一个表示指定通用主要名称 (UPN) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="upn">与此声明关联的实体的 UPN。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="upn" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateUriClaim(System.Uri)">
      <summary>创建一个表示指定统一资源定位符 (URL) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="uri">一个表示与此声明关联的实体的 URL 的 <see cref="T:System.Uri" />。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateWindowsSidClaim(System.Security.Principal.SecurityIdentifier)">
      <summary>创建一个表示指定安全标识符 (SID) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>一个表示 <paramref name="sid" /> 参数中指定的 SID 的 <see cref="T:System.IdentityModel.Claims.Claim" />。</returns>
      <param name="sid">一个表示 SID 的 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sid" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateX500DistinguishedNameClaim(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
      <summary>创建一个表示指定 X.500 可分辨名称的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <param name="x500DistinguishedName">一个指定与声明关联的实体的 X.500 可分辨名称的 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />。 此参数不能为 null。 如果此参数为 null，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="x500DistinguishedName" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.DefaultComparer">
      <summary>获取一个对象，它可以比较两个 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象是否相等。</summary>
      <returns>一个比较两个 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 接口实现。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.Equals(System.Object)">
      <summary>确定指定对象是否表示与当前 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象相同的声明。</summary>
      <returns>如果 <paramref name="obj" /> 表示与当前 <see cref="T:System.IdentityModel.Claims.Claim" /> 相同的声明，则为 true；否则为 false。</returns>
      <param name="obj">将与当前 <see cref="T:System.IdentityModel.Claims.Claim" /> 进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.GetHashCode">
      <summary>返回当前声明的哈希代码。</summary>
      <returns>声明的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.Resource">
      <summary>获取与此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的资源。</summary>
      <returns>与此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的资源。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.Right">
      <summary>指定与此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的权限的统一资源标识符 (URI) 的字符串表示形式。 预定义权限是以 <see cref="T:System.IdentityModel.Claims.Rights" /> 类的静态属性的形式提供的。</summary>
      <returns>指定与此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的权限的 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.System">
      <summary>表示系统实体的预定义声明。</summary>
      <returns>一个表示系统实体的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。 此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象具有下表所示的属性值。 Property 值 <see cref="P:System.IdentityModel.Claims.Claim.ClaimType" /><see cref="P:System.IdentityModel.Claims.ClaimTypes.System" /><see cref="P:System.IdentityModel.Claims.Claim.Resource" />System <see cref="P:System.IdentityModel.Claims.Claim.Right" /><see cref="P:System.IdentityModel.Claims.Rights.Identity" /></returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.ToString">
      <summary>返回此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Claims.ClaimSet">
      <summary>表示与某个实体关联的声明的集合。</summary>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)">
      <summary>确定 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 是否包含指定的 <see cref="T:System.IdentityModel.Claims.Claim" />。</summary>
      <returns>如果 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中包含指定的声明，则为 true；否则为 false。</returns>
      <param name="claim">要搜索的 <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象来确定 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 是否包含指定的 <see cref="T:System.IdentityModel.Claims.Claim" />。</summary>
      <returns>如果 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中包含指定的声明，则为 true；否则为 false。</returns>
      <param name="claim">要搜索的 <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
      <param name="comparer">用于进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。</param>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Count">
      <summary>在派生类中重写时，获取此声明集中的声明数。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中的声明数。</returns>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)">
      <summary>在派生类中重写时，搜索 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中与指定的声明类型和权限匹配的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Claims.Claim" /> 类型的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，可用于枚举符合指定条件 . 的声明。</returns>
      <param name="claimType">声明类型的统一资源标识符 (URI)。 有几个声明类型是以 <see cref="T:System.IdentityModel.Claims.ClaimTypes" /> 类的静态属性的形式提供的。</param>
      <param name="right">与新声明关联的权限的 URI。 有几个权限是以 <see cref="T:System.IdentityModel.Claims.Rights" /> 类的静态属性的形式提供的。</param>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.GetEnumerator">
      <summary>在派生类中重写时，获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，它可用于枚举 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Issuer">
      <summary>在派生类中重写时，获取颁发此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 的实体。</summary>
      <returns>颁发此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Item(System.Int32)">
      <summary>在派生类中重写时，获取指定索引的 <see cref="T:System.IdentityModel.Claims.Claim" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.IdentityModel.Claims.Claim" />。</returns>
      <param name="index">要检索的声明的索引。</param>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.System">
      <summary>获取表示应用程序可信颁发者的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。</summary>
      <returns>系统 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，它可用于枚举 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Windows">
      <summary>获取一组包含 Windows 安全标识符的声明。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，其中至少包含一个类型为 <see cref="P:System.IdentityModel.Claims.ClaimTypes.Sid" /> 的声明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Claims.ClaimTypes">
      <summary>表示实体可以声明的预定义声明类型。 此类不能被继承。</summary>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Anonymous">
      <summary>获取声明的 URI，该 URI 指定匿名用户。</summary>
      <returns>声明的 URI，该 URI 指定匿名用户。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Authentication">
      <summary>获取声明的 URI，该 URI 指定关于标识是否经过身份验证的详细信息。</summary>
      <returns>声明的 URI，该 URI 指定关于标识是否经过身份验证的详细信息。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.AuthorizationDecision">
      <summary>获取声明的 URI，该 URI 指定对于实体的授权决定。</summary>
      <returns>声明的 URI，该 URI 指定对于实体的授权决定。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Country">
      <summary>获取声明的 URI，该 URI 指定实体所在的国家/地区。</summary>
      <returns>声明的 URI，该 URI 指定实体所在的国家/地区。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.DateOfBirth">
      <summary>获取声明的 URI，该 URI 指定实体的出生日期。</summary>
      <returns>声明的 URI，该 URI 指定实体的出生日期。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.DenyOnlySid">
      <summary>获取声明的 URI，该 URI 指定实体的 deny-only 安全标识符 (SID)。</summary>
      <returns>声明的 URI，该 URI 指定实体的 deny-only SID。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Dns">
      <summary>获取声明的 URI，该 URI 指定与计算机名称关联的 DNS 名称或者与 X.509 证书的使用者或颁发者的备用名称关联的 DNS 名称。</summary>
      <returns>声明的 URI，该 URI 指定与计算机名称关联的 DNS 名称或者与 X.509 证书的使用者或颁发者的备用名称关联的 DNS 名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Email">
      <summary>获取声明的 URI，该 URI 指定实体的电子邮件地址。</summary>
      <returns>声明的 URI，该 URI 指定实体的电子邮件地址。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Gender">
      <summary>获取声明的 URI，该 URI 指定实体的性别。</summary>
      <returns>声明的 URI，该 URI 指定实体的性别。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.GivenName">
      <summary>获取声明的 URI，该 URI 指定实体的名字。</summary>
      <returns>声明的 URI，该 URI 指定实体的名字。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Hash">
      <summary>获取声明的 URI，该 URI 指定一个哈希值。</summary>
      <returns>声明的 URI，该 URI 指定一个哈希值。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.HomePhone">
      <summary>获取声明的 URI，该 URI 指定实体的住宅电话号码。</summary>
      <returns>声明的 URI，该 URI 指定实体的住宅电话号码。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Locality">
      <summary>获取声明的 URI，该 URI 指定实体所在的区域。</summary>
      <returns>声明的 URI，该 URI 指定实体所在的区域。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.MobilePhone">
      <summary>获取声明的 URI，该 URI 指定实体的移动电话号码。</summary>
      <returns>声明的 URI，该 URI 指定实体的移动电话号码。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Name">
      <summary>获取声明的 URI，该 URI 指定实体的名称。</summary>
      <returns>声明的 URI，该 URI 指定实体的名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.NameIdentifier">
      <summary>获取声明的 URI，该 URI 指定实体的名称。</summary>
      <returns>声明的 URI，该 URI 指定实体的名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.OtherPhone">
      <summary>获取声明的 URI，该 URI 指定实体的备用电话号码。</summary>
      <returns>声明的 URI，该 URI 指定实体的备用电话号码。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.PostalCode">
      <summary>获取声明的 URI，该 URI 指定实体的邮政编码。</summary>
      <returns>声明的 URI，该 URI 指定实体的邮政编码。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.PPID">
      <summary>获取声明的 URI，该 URI 指定实体的私人标识符 (PPI)。</summary>
      <returns>声明的 URI，该 URI 指定实体的私人标识符 (PPI)。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Rsa">
      <summary>获取声明的 URI，该 URI 指定一个 RSA 密钥。</summary>
      <returns>声明的 URI，该 URI 指定一个 RSA 密钥。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Sid">
      <summary>获取声明的 URI，该 URI 指定一个安全标识符 (SID)。</summary>
      <returns>声明的 URI，该 URI 指定一个安全标识符 (SID)。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Spn">
      <summary>获取声明的 URI，该 URI 指定一个服务主体名称 (SPN) 声明。</summary>
      <returns>声明的 URI，该 URI 指定一个服务主体名称 (SPN) 声明。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.StateOrProvince">
      <summary>获取声明的 URI，该 URI 指定实体所在的州或省份。</summary>
      <returns>声明的 URI，该 URI 指定实体所在的州或省份。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.StreetAddress">
      <summary>获取声明的 URI，该 URI 指定实体的街道地址。</summary>
      <returns>声明的 URI，该 URI 指定实体的街道地址。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Surname">
      <summary>获取声明的 URI，该 URI 指定实体的姓氏。</summary>
      <returns>声明的 URI，该 URI 指定实体的姓氏。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.System">
      <summary>获取声明的 URI，该 URI 标识系统实体。</summary>
      <returns>声明的 URI，该 URI 标识系统实体。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Thumbprint">
      <summary>获取声明的 URI，该 URI 指定一个指纹。</summary>
      <returns>声明的 URI，该 URI 指定一个指纹。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Upn">
      <summary>获取声明的 URI，该 URI 指定一个用户主体名称 (UPN)。</summary>
      <returns>声明的 URI，该 URI 指定 UPN。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Uri">
      <summary>获取声明的 URI，该 URI 指定一个 URI。</summary>
      <returns>声明的 URI，该 URI 指定一个 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Webpage">
      <summary>获取声明的 URI，该 URI 指定实体的网页。</summary>
      <returns>声明的 URI，该 URI 指定实体的网页。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.X500DistinguishedName">
      <summary>获取一个字符串，其中包含 X.509 证书的可分辨名称声明的 URI。</summary>
      <returns>X.509 证书的可分辨名称声明的 URI。</returns>
    </member>
    <member name="T:System.IdentityModel.Claims.DefaultClaimSet">
      <summary>提供 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 类的默认实现。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的新实例。</summary>
      <param name="claims">一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，包含要添加到此声明集中的声明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.Claim[])">
      <summary>使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的新实例。</summary>
      <param name="claims">一个 <see cref="T:System.IdentityModel.Claims.Claim" /> 数组，表示要添加到此声明集中的声明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.ClaimSet,System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的新实例。</summary>
      <param name="issuer">一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象，指定在 <paramref name="claims" /> 参数中指定的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 的颁发者。</param>
      <param name="claims">一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，包含要添加到此声明集中的声明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> 为 null。 - 或 - <paramref name="issuer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Claims.Claim[])">
      <summary>使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的新实例。</summary>
      <param name="issuer">一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象，指定在 <paramref name="claims" /> 参数中指定的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 的颁发者。</param>
      <param name="claims">一个 <see cref="T:System.IdentityModel.Claims.Claim" /> 数组，表示要添加到此声明集中的声明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> 为 null。 - 或 - <paramref name="issuer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)">
      <summary>确定指定的声明是否包含在此声明集中。</summary>
      <returns>如果声明包含在此声明集中，则为 true；否则为 false。</returns>
      <param name="claim">要确定是否存在于此集合中的 <see cref="T:System.IdentityModel.Claims.Claim" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claim" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Count">
      <summary>获取此声明集中包含的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象数。</summary>
      <returns>此声明集中包含的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.FindClaims(System.String,System.String)">
      <summary>搜索 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 中与指定的声明类型和权限匹配的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，可用来枚举与指定条件相符的声明。</returns>
      <param name="claimType">声明类型的统一资源标识符 (URI)。 有几个声明类型是以 <see cref="T:System.IdentityModel.Claims.ClaimTypes" /> 类的静态属性的形式提供的。</param>
      <param name="right">与新声明关联的权限的 URI。 有几个权限是以 <see cref="T:System.IdentityModel.Claims.Rights" /> 类的静态属性的形式提供的。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.GetEnumerator">
      <summary>获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，该对象可用于枚举 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 中的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 中的 <see cref="T:System.IdentityModel.Claims.Claim" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.Initialize(System.IdentityModel.Claims.ClaimSet,System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的实例。</summary>
      <param name="issuer">
        <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象，该对象颁发 <paramref name="claims" /> 参数中指定的 <see cref="T:System.IdentityModel.Claims.ClaimSet" />。</param>
      <param name="claims">要包含在此声明集中的一组 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> 为 null。 - 或 - <paramref name="issuer" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Issuer">
      <summary>获取颁发此声明集的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。</summary>
      <returns>颁发此声明集的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Item(System.Int32)">
      <summary>获取指定索引的 <see cref="T:System.IdentityModel.Claims.Claim" />。</summary>
      <returns>索引指定的 <see cref="T:System.IdentityModel.Claims.Claim" />。</returns>
      <param name="index">要检索的声明的索引。</param>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.ToString">
      <summary>返回此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Claims.Rights">
      <summary>定义可与 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的预定义权限类型。</summary>
    </member>
    <member name="P:System.IdentityModel.Claims.Rights.Identity">
      <summary>获取一个字符串，该字符串指定权限表示标识。</summary>
      <returns>表示标识的权限。</returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Rights.PossessProperty">
      <summary>获取一个字符串，该字符串指定权限表示一个与声明关联的实体所拥有的属性。</summary>
      <returns>一个权限，表示与 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的实体所拥有的属性。</returns>
    </member>
    <member name="T:System.IdentityModel.Claims.WindowsClaimSet">
      <summary>表示与某一实体关联的 Windows 声明的集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>使用由 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 类的新实例。</summary>
      <param name="windowsIdentity">一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>使用由 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 类的新实例。</summary>
      <param name="windowsIdentity">一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</param>
      <param name="includeWindowsGroups">如果包含表示此用户所属 Windows 组的声明，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.Boolean,System.DateTime)">
      <summary>使用由 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 类的新实例。</summary>
      <param name="windowsIdentity">一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</param>
      <param name="includeWindowsGroups">如果包含此用户所属的 Windows 组，则为 true；否则为 false。</param>
      <param name="expirationTime">一个 <see cref="T:System.DateTime" />，指定声明集的过期时间。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.DateTime)">
      <summary>使用由 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 类的新实例。</summary>
      <param name="windowsIdentity">一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</param>
      <param name="expirationTime">一个 <see cref="T:System.DateTime" />，指定声明集的过期时间。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.String,System.Boolean,System.DateTime)">
      <summary>使用由 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 类的新实例。</summary>
      <param name="windowsIdentity">一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</param>
      <param name="authenticationType">Windows 标识的身份验证类型。</param>
      <param name="includeWindowsGroups">如果包含此用户所属的 Windows 组，则为 true；否则为 false。</param>
      <param name="expirationTime">一个 <see cref="T:System.DateTime" />，指定声明集的过期时间。</param>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Count">
      <summary>获取此集合中的声明数。</summary>
      <returns>此集合中的声明数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.Dispose">
      <summary>释放由 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.ExpirationTime">
      <summary>获取此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 的过期时间。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 过期的 <see cref="T:System.DateTime" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.FindClaims(System.String,System.String)">
      <summary>搜索 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 中与指定的声明类型和权限匹配的声明。</summary>
      <returns>一个 System.Collections.Generic.IEnumerable&lt;Claim&gt; 对象，可用于枚举符合指定条件的声明。</returns>
      <param name="claimType">声明类型的统一资源标识符 (URI)。</param>
      <param name="right">与新声明关联的权限的 URI。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.GetEnumerator">
      <summary>获取可用于枚举 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 中的 Windows 声明的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</summary>
      <returns>可用于枚举 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 中的 Windows 声明的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Issuer">
      <summary>获取此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 的颁发者。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示此声明集的颁发者。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Item(System.Int32)">
      <summary>获取指定索引的声明。</summary>
      <returns>指定索引的声明。</returns>
      <param name="index">要检索的 Windows 声明的索引。</param>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.ToString">
      <summary>返回此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.WindowsIdentity">
      <summary>获取此声明集的 Windows 标识。</summary>
      <returns>此声明集的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Claims.X509CertificateClaimSet">
      <summary>表示从 X.509 证书中提取与某个实体关联的声明的集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 类的新实例。</summary>
      <param name="certificate">要添加到声明集中的 X.509 证书。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Count">
      <summary>获取此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 对象中的 X.509 证书声明数。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 对象中的 X.509 证书声明数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.Dispose">
      <summary>释放由 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.ExpirationTime">
      <summary>获取此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 的过期时间。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 的过期时间。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.FindClaims(System.String,System.String)">
      <summary>搜索 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 中与指定的声明类型和权限匹配的声明。</summary>
      <returns>一个 System.Collections.Generic.IEnumerable&lt;Claim&gt; 对象，可用于枚举符合指定条件的声明。</returns>
      <param name="claimType">声明类型的统一资源标识符 (URI)。</param>
      <param name="right">与新声明关联的权限的 URI。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.GetEnumerator">
      <summary>获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 中的 Windows 声明。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 中的 Windows 声明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Issuer">
      <summary>获取此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 的颁发者。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 的颁发者。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Item(System.Int32)">
      <summary>获取指定索引的声明。</summary>
      <returns>指定索引的声明。</returns>
      <param name="index">要检索的声明的索引。</param>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.ToString">
      <summary>获取此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 对象中的 X.509 证书声明数。</summary>
      <returns>此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 对象中的 X.509 证书声明数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.X509Certificate">
      <summary>获取与此声明集关联的 X.509 证书。</summary>
      <returns>与此声明集关联的 X.509 证书。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Configuration.AudienceUriElement">
      <summary>表示受众 URI 值配置在 &lt;audienceUris&gt; 元素下。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.AudienceUriElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.AudienceUriElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.AudienceUriElement.Value">
      <summary>获取或设置用户 URI。</summary>
      <returns>用户 URI。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.AudienceUriElementCollection">
      <summary>表示配置文件中的 &lt;audienceUris&gt; 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.AudienceUriElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.AudienceUriElementCollection.Mode">
      <summary>获取或设置受众限制模式。</summary>
      <returns>用户限制模式。 默认值为 <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Always" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor">
      <summary>具有用户可以指定任意元素和属性 Windows Identity Foundation (WIF) 配置关系图的一部分；例如，当指定自定义标记的处理程序。 实现 <see cref="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor" /> 类用于处理这些用例。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.ConfigurationElementInterceptor.ChildNodes">
      <summary>获取此元素的子节点。</summary>
      <returns>子节点的集合。 如果此元素没有子节点，则 null。</returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
    </member>
    <member name="P:System.IdentityModel.Configuration.ConfigurationElementInterceptor.ElementAsXml">
      <summary>获取此实例表示的 XML 元素。</summary>
      <returns>XML 元素。</returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>获取一个值，该值指示反序列化过程中是否遇到未知特性。 始终返回 true。</summary>
      <returns>始终返回 true，指示出现的一个未识别的属性。</returns>
      <param name="name">无法识别的特性的名称。</param>
      <param name="value">无法识别的特性的值。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>获取一个值，该值指示反序列化过程中是否遇到未知元素。 始终返回 true。</summary>
      <returns>始终返回 true，指示出现的一个未识别的元素。</returns>
      <param name="elementName">未知的子元素的名称。</param>
      <param name="reader">用于反序列化的 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.Reset(System.Configuration.ConfigurationElement)">
    </member>
    <member name="T:System.IdentityModel.Configuration.CustomTypeElement">
      <summary>表示元素或属性，其指定配置文件中的自定义 <see cref="T:System.Type" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.CustomTypeElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.CustomTypeElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.CustomTypeElement.IsConfigured">
      <summary>获取指示该元素是否已配置了非默认值的值。</summary>
      <returns>如果该元素已配置了非默认的值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.CustomTypeElement.Resolve``1(System.IdentityModel.Configuration.CustomTypeElement)">
      <summary>尝试解决指定的 <see cref="T:System.Type" /> 的对象的自定义类型元素.</summary>
      <returns>
        <see cref="T:System.Type" />
        <paramref name="T" /> 的对象。</returns>
      <param name="customTypeElement">要解析的自定义类元素。</param>
      <typeparam name="T">解析自定义类型元素到 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="P:System.IdentityModel.Configuration.CustomTypeElement.Type">
      <summary>当前实例所表示的 <see cref="T:System.Type" />。</summary>
      <returns>此实例表示的类型。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.ICustomIdentityConfiguration">
      <summary>定义使类加载习惯配置的方法。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>从 XML 加载自定义的配置。 重写此元素以提供配置元素的自定义处理。</summary>
      <param name="nodeList">包含自定义配置的 XML 节点。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfiguration">
      <summary>定义 Windows 标识基础行为控件的配置属性集合。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类的新实例。 如果存在，设置将从默认配置中加载。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Boolean)">
      <summary>使用是否要从默认配置中加载设置的特定值来初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类的新实例。</summary>
      <param name="loadConfig">如果从配置文件中加载设置，则为 true ；否则为 false。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="loadConfig" /> 为 true，但没有 &lt;system.identityModel&gt; 配置元素。</exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类的新实例，该实例具有指定的服务证书。 设置是选择加载默认配置。</summary>
      <param name="loadConfig">如果从配置文件中加载设置，则为 true ；否则为 false。</param>
      <param name="serviceCertificate">该服务证书。 设置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> 属性。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="loadConfig" /> 为 true，但没有 &lt;system.identityModel&gt; 配置元素。</exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类的新实例，该实例具有指定的服务证书。</summary>
      <param name="serviceCertificate">该服务证书。 设置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类的新实例。 设置从命名配置中加载。</summary>
      <param name="identityConfigurationName">从中加载设置的 &lt;identityConfiguration&gt; 元素的名称。</param>
      <exception cref="T:System.InvalidOperationException">没有 &lt;system.identityModel&gt; 配置元素。</exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类的新实例，该实例具有指定的服务证书，加载命名的配置。</summary>
      <param name="identityConfigurationName">从中加载配置的 &lt;service&gt; 元素的名称。</param>
      <param name="serviceCertificate">该服务证书。 设置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> 属性。</param>
      <exception cref="T:System.InvalidOperationException">没有 &lt;System.IdentityModel&gt; 配置元素。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.AudienceRestriction">
      <summary>获取或设置配置的 <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" />。</summary>
      <returns>配置的 <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.Caches">
      <summary>获取或设置配置的 <see cref="T:System.IdentityModel.Configuration.IdentityModelCaches" />。</summary>
      <returns>配置的缓存。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.CertificateValidationMode">
      <summary>获取或设置处理程序用来验证颁发者证书的证书验证模式。</summary>
      <returns>证书验证模式。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.CertificateValidator">
      <summary>获取或设置处理程序用来验证颁发者证书的 X.509 证书验证程序。</summary>
      <returns>证书验证程序。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ClaimsAuthenticationManager">
      <summary>获取或设置声明身份验证管理器。 默认值是 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 类的实例。</summary>
      <returns>声明身份验证管理器。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ClaimsAuthorizationManager">
      <summary>获取或设置声明授权管理器。</summary>
      <returns>声明身份验证管理器。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultCertificateValidationMode">
      <summary>默认 X.509 证书验证模式，<see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust" />。</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultIssuerNameRegistryType">
      <summary>默认颁发者名称注册表类型为；<see cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" /> 类的 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultMaxClockSkew">
      <summary>默认的最大时钟偏差；5 分钟。</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultRevocationMode">
      <summary>默认 X.509 吊销模式；<see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Online" />。</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultServiceName">
      <summary>默认值服务名称；空字符串。</summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultTrustedStoreLocation">
      <summary>证书的默认受信任的存储区位置；<see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.DetectReplayedTokens">
      <summary>获取或设置默认处理程序配置中的值，该配置指示处理程序是否应检测重播的标记。</summary>
      <returns>如果处理程序应检查重播标记，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize">
      <summary>针对在要与在此 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 实例上的属性值一致的 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlerCollectionManager" /> 中包含的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 对象，更新 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 对象中的属性。</summary>
      <exception cref="T:System.InvalidOperationException">多次调用此方法。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IsInitialized">
      <summary>获取或设置一个值，该值指示是否已调用 <see cref="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize" /> 方法。</summary>
      <returns>如果已调用 <see cref="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize" /> 方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IssuerNameRegistry">
      <summary>获取或设置用于解析颁发者名称的颁发者名称注册表。</summary>
      <returns>颁布者名称注册表。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IssuerTokenResolver">
      <summary>获取或设置颁发者标识解析器。</summary>
      <returns>令牌颁发者的解析器。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadConfiguration(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>从应用程序或 Web 配置文件加载 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 实例的设置。</summary>
      <param name="element">配置文件中的 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" />。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlerConfiguration(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>使用直接在指定的<see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" />下的元素加载 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" />。</summary>
      <returns>从在配置文件中的元素加载的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" />。</returns>
      <param name="element">来自要加载设置的配置文件的 &lt;identityConfiguration&gt; 元素。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlerConfiguration(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration,System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement)">
      <summary>加载有关 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 的配置元素。</summary>
      <returns>从在配置文件和 <paramref name="baseConfiguration" /> 中的元素加载的<see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" />。</returns>
      <param name="baseConfiguration">从中要继承默认值的基数 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" />。</param>
      <param name="element">配置文件中的 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement" />。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlers(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>加载为指定服务定义的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" />。</summary>
      <returns>处理程序集合管理器。</returns>
      <param name="serviceElement">用于配置此实例的 &lt;identityConfiguration&gt; 元素。</param>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.MaxClockSkew">
      <summary>获取或设置通信双方的系统时钟之间允许的最大时间差异。</summary>
      <returns>最大时钟偏差。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.Name">
      <summary>获取配置服务器的名称。</summary>
      <returns>服务名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.RevocationMode">
      <summary>获取或设置处理程序用来验证颁发者证书的吊销模式。</summary>
      <returns>吊销模式。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SaveBootstrapContext">
      <summary>获取或设置指示验证令牌后是否在 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 和会话中保存 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 对象的值。</summary>
      <returns>如果保存引导上下文，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlerCollectionManager">
      <summary>获取 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 包含用来序列化和验证在 WS-Trust 消息中找到的标记的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 对象集。</summary>
      <returns>处理程序集合管理器。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers">
      <summary>获取用于序列化和验证 WS-Trust 消息中发现的令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 对象的集合。</summary>
      <returns>标记处理程序的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate">
      <summary>获取或设置服务的证书。</summary>
      <returns>用作服务证书的 X.509 证书。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceTokenResolver">
      <summary>获取或设置服务令牌解析程序。</summary>
      <returns>服务标记解析器。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.TokenReplayCacheExpirationPeriod">
      <summary>获取或设置 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" /> 中放置项目的到期期限。</summary>
      <returns>放置在标识重播缓存中的项的过期时段。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.TrustedStoreLocation">
      <summary>获取或设置处理程序用来验证颁发者证书的受信任存储位置。</summary>
      <returns>受信任的存储区位置。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfigurationElement">
      <summary>表示配置文件中的 &lt;identityConfiguration&gt; 元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.AudienceUris">
      <summary>获取或设置与此标识配置元素关联的 <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" />。</summary>
      <returns>为标识配置元素配置的用户 URI 的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Caches">
      <summary>获取或设置与此标识配置元素关联的 <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" />。</summary>
      <returns>为该标识配置元素配置标记重播缓存和会话安全标记缓存的元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.CertificateValidation">
      <summary>获取或设置与此标识配置元素关联的 <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" />。</summary>
      <returns>为这个标识配置元素配置证书验证程序和它的属性的元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ClaimsAuthenticationManager">
      <summary>获取或设置与此标识配置元素关联的声明身份验证管理器。</summary>
      <returns>自定义类型元素指定验证身份验证管理器的 <see cref="T:System.Type" />。 此类型必须派生自 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ClaimsAuthorizationManager">
      <summary>获取或设置与此标识配置元素关联的声明创作管理器。</summary>
      <returns>一个自定义类型元素，指定请求服务授权管理器的 <see cref="T:System.Type" />。 此类型必须派生自 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.IssuerNameRegistry">
      <summary>获取或设置与此标识配置元素关联的 <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" />。</summary>
      <returns>为该标识配置元素配置发行名称注册的元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.IssuerTokenResolver">
      <summary>获取或设置与此标识配置元素关联的颁发者令牌解析程序。</summary>
      <returns>一个自定义类型元素，指定颁发者令牌解析器的 <see cref="T:System.Type" />。 此类型必须派生自 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.MaximumClockSkew">
      <summary>获取或设置为此标识配置元素配置的最大时钟偏差。</summary>
      <returns>最大时钟偏差。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Name">
      <summary>获取或设置标识配置元素的名称。</summary>
      <returns>标识配置的名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.SaveBootstrapContext">
      <summary>获取或设置指示是否在声明标识和由此标识集合中配置的处理程序创建的会话安全令牌中保存启动上下文的值。</summary>
      <returns>如果保存 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.SecurityTokenHandlerSets">
      <summary>获取或设置与此标识配置元素关联的 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection" />。</summary>
      <returns>用于此标识配置元素的已配置的安全令牌处理程序集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ServiceTokenResolver">
      <summary>获取或设置与此标识配置元素关联的服务令牌解析程序。</summary>
      <returns>一个自定义类型元素，指定颁发者令牌解析器的 <see cref="T:System.Type" />。 此类型必须派生自 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.TokenReplayDetection">
      <summary>获取或设置与此标识配置元素关联的 <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" />。</summary>
      <returns>在标记重播缓存中指定是否允许标记重播检测并指定标记的最大过期时段的元素。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection">
      <summary>表示配置文件中 &lt;identityConfiguration&gt; 元素的集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElementCollection.GetElement(System.String)">
      <summary>检索具有指定名称的 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" />。</summary>
      <returns>&lt;identityConfiguration&gt; 元素具有指定名称；如果未检索任何对象，则为 null。</returns>
      <param name="name">要检索的 identityConfiguration 元素的名称。 此名称与元素的 <see cref="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Name" /> 属性的值对应。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">名称参数中制订了默认配置并且无法找到匹配的 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" />。</exception>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityModelCaches">
      <summary>定义配置隔离时重播的标记和缓存会话标记的贮藏所。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityModelCaches.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityModelCaches" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCaches.SessionSecurityTokenCache">
      <summary>获取或设置用于缓存 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />。</summary>
      <returns>配置的会话标记缓存。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCaches.TokenReplayCache">
      <summary>获取或设置用于确定是否重播令牌的 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />。</summary>
      <returns>配置的标记重播缓存。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityModelCachesElement">
      <summary>表示配置文件中的 &lt;caches&gt; 元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityModelCachesElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.IsConfigured">
      <summary>获取一个指示是否已配置此元素的值。</summary>
      <returns>如果元素已配置，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.SessionSecurityTokenCache">
      <summary>获取或设置会话令牌缓存的 <see cref="T:System.Type" />。</summary>
      <returns>会话标记缓冲的类型。 此类型必须派生自 <see cref="System.IdentityModel.Tokens.SessionSecurityTokenCache" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.TokenReplayCache">
      <summary>获取或设置令牌重播缓存的 <see cref="T:System.Type" />。</summary>
      <returns>标记重播缓冲的类型。 此类型必须派生自 <see cref="System.IdentityModel.Tokens.TokenReplayCache" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.IssuerNameRegistryElement">
      <summary>表示配置文件中的 &lt;issuerNameRegistry&gt; 元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IssuerNameRegistryElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.IssuerNameRegistryElement.Type">
      <summary>获取或设置颁布者名称注册表的 <see cref="T:System.Type" /> 的字符串表示。</summary>
      <returns>颁布者名称注册表的 <see cref="T:System.Type" /> 的字符串表示。 此类型必须派生自<see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> 类。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement">
      <summary>表示配置文件中的 &lt;securityTokenHandlerConfiguration&gt; 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.AudienceUris">
      <summary>获取与此标记处理配置元素关联的 <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" />。</summary>
      <returns>为标记提供程序配置元素配置的用户 URI 的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.Caches">
      <summary>获取或设置与此标记处理配置元素关联的 <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" />。</summary>
      <returns>为该标记处理程序配置元素配置标记重播缓存和会话安全标记缓存的元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.CertificateValidation">
      <summary>获取或设置与此标记处理配置元素关联的 <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" />。</summary>
      <returns>为这个标记处理程序配置元素配置证书验证程序和它的属性的元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.IssuerNameRegistry">
      <summary>获取或设置与此标记处理配置元素关联的 <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" />。</summary>
      <returns>为该标记处理程序配置元素配置发行名称注册的元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.IssuerTokenResolver">
      <summary>获取或设置与此令牌处理程序配置元素关联的颁发者令牌解析程序。</summary>
      <returns>一个自定义类型元素，指定颁发者令牌解析器的 <see cref="T:System.Type" />。 此类型必须派生自 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.MaximumClockSkew">
      <summary>获取或设置为此标记处理程序配置元素配置的最大时钟偏差。</summary>
      <returns>最大时钟偏差。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.Name">
      <summary>获取或设置标识处理程序配置元素的名称。</summary>
      <returns>标识配置的名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.SaveBootstrapContext">
      <summary>获取或设置指示是否在声明标识和由此标识集合中配置的处理程序创建的会话安全令牌中保存启动上下文的值。</summary>
      <returns>如果保存 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.ServiceTokenResolver">
      <summary>获取或设置与此令牌处理程序配置元素关联的服务令牌解析程序。</summary>
      <returns>一个自定义类型元素，指定颁发者令牌解析器的 <see cref="T:System.Type" />。 此类型必须派生自 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.TokenReplayDetection">
      <summary>获取或设置与此标记处理配置元素关联的 <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" />。</summary>
      <returns>在标记重播缓存中指定是否允许标记重播检测并指定标记的最大过期时段的元素。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection">
      <summary>表示配置文件中的 &lt;securityTokenHandlers&gt; 元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.Name">
      <summary>获取或设置集合的名称。</summary>
      <returns>集合的名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.SecurityTokenHandlerConfiguration">
      <summary>获取或设置集合中的处理程序的默认设置 。</summary>
      <returns>集合中的处理程序的默认设置。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection">
      <summary>表示配置文件中 &lt;identityConfiguration&gt; 元素下的所有 &lt;securityTokenHandlers&gt; 元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection.IsConfigured">
      <summary>获取指示此元素是否已配置了非默认值的值。</summary>
      <returns>如果该元素已配置了非默认的值，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration">
      <summary>定义安全象征服务的配置 (STS)。 实现 STSs 从 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类派生的类。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的新实例。 从当前配置选择性加载设置。</summary>
      <param name="loadConfig">如果从配置文件中加载设置，则为 true ；否则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的一个新实例，该类具有指定的颁发人名。</summary>
      <param name="issuerName">发行人名称。 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的一个新实例，该类具有指定的颁发人名。 从当前配置选择性加载设置。</summary>
      <param name="issuerName">发行人名称。 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。</param>
      <param name="loadConfig">如果从配置文件中加载设置，则为 true ；否则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)">
      <summary>初始化具有指定颁发人名称和签名凭据的 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的新实例。</summary>
      <param name="issuerName">发行人名称。 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。</param>
      <param name="signingCredentials">STS 的签名凭据。 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.Boolean)">
      <summary>初始化具有指定颁发人名称和签名凭据的 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的新实例。 从当前配置选择性加载设置。</summary>
      <param name="issuerName">发行人名称。 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。</param>
      <param name="signingCredentials">STS 的签名凭据。 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 属性。</param>
      <param name="loadConfig">如果从配置文件中加载设置，则为 true ；否则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.String)">
      <summary>初始化具有指定颁发人名称和签名凭据的 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的新实例。 设置从指定命名配置中加载。</summary>
      <param name="issuerName">发行人名称。 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。</param>
      <param name="signingCredentials">STS 的签名凭据。 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 属性。</param>
      <param name="serviceName">从中加载配置的 &lt;identityConfiguration&gt; 元素的名称。</param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.CreateSecurityTokenService">
      <summary>从 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService" /> 属性中指定的 <see cref="T:System.Type" /> 创建安全标记服务 (STS) 实例。</summary>
      <returns>
        <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService" /> 属性中指定的 <see cref="T:System.Type" /> 实例。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultMaxSymmetricKeySizeInBits">
      <summary>获取或设置如果选中，则请求中指定的 KeySize 是否位于此限制内的默认密钥大小。</summary>
      <returns>默认密钥大小限制（以位为单位）。 默认值为 1024。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultSymmetricKeySizeInBits">
      <summary>获取或设置颁发的令牌中使用的默认密钥大小（位）。</summary>
      <returns>在颁发的令牌中使用的密钥大小（以位为单位）。 默认值为 256。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime">
      <summary>获取或设置颁发的令牌中使用的默认生命周期。</summary>
      <returns>要在已颁发令牌中使用的默认生存期。 默认值为 1 天。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType">
      <summary>获取或设置令牌颁发中使用的默认令牌类型。</summary>
      <returns>返回包含默认令牌类型字符串。</returns>
      <exception cref="T:System.ArgumentNullException">指定值为 null 或为空。</exception>
      <exception cref="T:System.ArgumentException">指定值未在标记处理程序中定义。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DisableWsdl">
      <summary>获取或设置一个值，该值指定是否应为安全标记服务 (STS)启用启用 WSDL 生成。</summary>
      <returns>若要 STS 启用 WSDL 生成，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.MaximumTokenLifetime">
      <summary>获取或设置已颁发标识的最大标识生存期。</summary>
      <returns>用于颁布令牌的最长令牌生命期。 默认值为 1 天。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService">
      <summary>获取或设置安全标记服务 (STS) 的 <see cref="T:System.Type" />。</summary>
      <returns>安全令牌服务的类型。 此类型必须派生自<see cref="T:System.IdentityModel.SecurityTokenService" /> 类。</returns>
      <exception cref="T:System.ArgumentException">所指定的值不能赋值为 <see cref="T:System.IdentityModel.SecurityTokenService" />。</exception>
      <exception cref="T:System.ArgumentNullException">指定的值为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials">
      <summary>获取或设置签名凭据。</summary>
      <returns>签名凭据。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName">
      <summary>获取或设置颁发者名称，以便在已颁发令牌中设置它。</summary>
      <returns>发行人名称。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将此属性设置为 null 或者空字符串。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrust13RequestSerializer">
      <summary>获取或设置 WS-Trust 1.3 请求 (RST) 序列化程序。</summary>
      <returns>WS-Trust1.3 Request (RST) 序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException">指定的值为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrust13ResponseSerializer">
      <summary>获取或设置 WS-Trust 1.3 响应 (RSTR) 序列化程序。</summary>
      <returns>WS-Trust1.3 Response (RSTR) 序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException">指定的值为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrustFeb2005RequestSerializer">
      <summary>获取或设置 WS-Trust Feb 2005 请求 (RST) 序列化程序。</summary>
      <returns>WS-Trust Feb 2005 Request (RST) 序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException">指定的值为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrustFeb2005ResponseSerializer">
      <summary>获取或设置 WS-Trust Feb 2005 响应 (RSTR) 序列化程序。</summary>
      <returns>WS-Trust Feb 2005 Response (RSTR) 序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException">指定的值为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Configuration.SystemIdentityModelSection">
      <summary>表示配置文件中的 &lt;system.identityModel&gt; 部分。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SystemIdentityModelSection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.Current">
      <summary>获取当前 <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> 引用。</summary>
      <returns>当前 <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> 引用。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.DefaultIdentityConfigurationElement">
      <summary>从配置文件中获取默认值 (未命名) <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> 。</summary>
      <returns>默认（未命名）&lt;identityConfiguration&gt; 元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.IdentityConfigurationElements">
      <summary>获取配置文件的 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection" />。</summary>
      <returns>一个包含 &lt;system.identityModel&gt; 中所有 &lt;identityConfiguration&gt; 元素的集合。</returns>
    </member>
    <member name="F:System.IdentityModel.Configuration.SystemIdentityModelSection.SectionName">
      <summary>被 Windows Identity Foundation (WIF) 定义的配置部分的名称；system.identityModel。</summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.TokenReplayDetectionElement">
      <summary>表示配置文件中的 &lt;tokenReplayDetection&gt; 元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.TokenReplayDetectionElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.TokenReplayDetectionElement.Enabled">
      <summary>获取或设置指示是否应执行重播检测的值。</summary>
      <returns>如果执行重播侦查，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.TokenReplayDetectionElement.ExpirationPeriod">
      <summary>获取或设置项目到期并从缓存中删除前的最大时间量。</summary>
      <returns>一个项目被认为过期并从缓存中移除之前的最长时间。</returns>
    </member>
    <member name="T:System.IdentityModel.Configuration.X509CertificateValidationElement">
      <summary>表示配置文件中的 &lt;certificateValidation&gt; 元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.X509CertificateValidationElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.CertificateValidationMode">
      <summary>获取或设置证书验证模式。</summary>
      <returns>证书验证模式。 默认值为 <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.CertificateValidator">
      <summary>获取或设置 X.509 证书验证程的 <see cref="" />。</summary>
      <returns>包装 X.509 证书验证程序类型的元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.RevocationMode">
      <summary>获取或设置吊销模式。</summary>
      <returns>吊销模式。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.OnLine" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.TrustedStoreLocation">
      <summary>获取或设置 X.509 证书受信任的存储区的位置。</summary>
      <returns>X.509 证书的存储位置。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ApplicationServiceDescriptor">
      <summary>定义应用服务描述符和它的终点。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ApplicationServiceDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.ApplicationServiceDescriptor" /> 类的实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.Endpoints">
      <summary>获取此输入应用程序服务的终结点。</summary>
      <returns>应用程序服务的终结点的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.PassiveRequestorEndpoints">
      <summary>获取该应用程序服务的被动请求方的终结点。</summary>
      <returns>应用程序服务的被动请求方终结点的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ContactPerson">
      <summary>表示 SAML 2.0 元数据中的联系人。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ContactPerson.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ContactPerson.#ctor(System.IdentityModel.Metadata.ContactType)">
      <summary>使用指定的联系人类型初始化 <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> 类的新实例。</summary>
      <param name="contactType">联系人类型。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Company">
      <summary>获取或设置公司名称。</summary>
      <returns>公司名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.EmailAddresses">
      <summary>获取电子邮件地址的集合。</summary>
      <returns>电子邮件地址的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.GivenName">
      <summary>获取或设置给定名称。</summary>
      <returns>给定的名字</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Surname">
      <summary>获取或设置姓氏。</summary>
      <returns>姓氏。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.TelephoneNumbers">
      <summary>获取或设置电话号码的集合。</summary>
      <returns>电话号码的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Type">
      <summary>获取或设置联系人类型。</summary>
      <returns>指定联系人类型的枚举值之一。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ContactType">
      <summary>指定联系人的类型。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Administrative">
      <summary>管理员联系人。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Billing">
      <summary>计算联系人。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Other">
      <summary>管理，计算，支持，技术或非特指之外的类型的联系人。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Support">
      <summary>支持通信。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Technical">
      <summary>技术通信。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Unspecified">
      <summary>未指定类型的联系人。</summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.DisplayClaim">
      <summary>表示可显示声明对象。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String)">
      <summary>为指定类型的声明初始化 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 类的新实例。</summary>
      <param name="claimType">显示声明的声明类型。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String)">
      <summary>初始化具有特定的声称，显示名称和说明的 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 类的新实例。</summary>
      <param name="claimType">显示声明的声明类型。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> 属性。</param>
      <param name="displayTag">显示声明的显示名称（或友好名称）。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> 属性。</param>
      <param name="description">显示声明的说明。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化具有特定的声称类型，显示名称，显示值和说明的 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 类的新实例。 需要该声明。</summary>
      <param name="claimType">显示声明的声明类型。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> 属性。</param>
      <param name="displayTag">显示声明的显示名称（或友好名称）。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> 属性。</param>
      <param name="description">显示声明的说明。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> 属性。</param>
      <param name="displayValue">显示声明的显示值。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>初始化具有指定的声明类型、显示名称、显示值、描述和可选特性的 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 类的新实例。</summary>
      <param name="claimType">显示声明的声明类型。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> 属性。</param>
      <param name="displayTag">显示声明的显示名称（或友好名称）。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> 属性。</param>
      <param name="description">显示声明的说明。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> 属性。</param>
      <param name="displayValue">显示声明的显示值。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue" /> 属性。</param>
      <param name="optional">如果声明是可选的，则为 true；否则为 false。 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Optional" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimType" /> 为 null 或空字符串。</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType">
      <summary>获取与显示声明关联的声明类型。</summary>
      <returns>表示声明类型的 URI。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.CreateDisplayClaimFromClaimType(System.String)">
      <summary>从指定声明类型中创建显示声明。</summary>
      <returns>返回 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" />。</returns>
      <param name="claimType">表示声明类型的 URI。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.Description">
      <summary>获取或设置显示声明的说明。</summary>
      <returns>显示声明的说明。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag">
      <summary>获取或设置显示声明的友好名称。</summary>
      <returns>显示声称的友好名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue">
      <summary>获取或设置显示声明的可显示值。</summary>
      <returns>显示声明的可显示值。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.Optional">
      <summary>获取或设置显示声明的可选属性。</summary>
      <returns>如果显示声明是可选的，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.WriteOptionalAttribute">
      <summary>获取或设置一个值，该值指示是否序列化可选特性。</summary>
      <returns>序列化可选特性的true；否则，错误。 默认值为 false。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.EncryptionMethod">
      <summary>定义加密方法。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EncryptionMethod.#ctor(System.Uri)">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.EncryptionMethod" /> 类的新实例，该实例包含指定的加密算法。</summary>
      <param name="algorithm">加密算法 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.EncryptionMethod.Algorithm">
      <summary>获取或设置加密方法的算法特性。</summary>
      <returns>加密算法 URI。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntitiesDescriptor">
      <summary>表示实体的集合。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntitiesDescriptor})">
      <summary>用指定的 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 子项目的集合来初始化 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。</summary>
      <param name="entityGroupList">实体描述符集合。 初始化 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntityDescriptor})">
      <summary>用指定的 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 子项目的集合来初始化 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 类的新实例。</summary>
      <param name="entityList">实体描述符集合。 初始化 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntityDescriptor},System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntitiesDescriptor})">
      <summary>使用子项目 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" />的指定集合及子项目 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 组合错误集合来初始化 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。</summary>
      <param name="entityList">实体描述符集合。 初始化 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> 属性。</param>
      <param name="entityGroupList">实体描述符集合。 初始化 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities">
      <summary>获取此实体集合的子 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" />。</summary>
      <returns>子 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 的集合。 默认值为空集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups">
      <summary>获取此实体集合 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 的子级。</summary>
      <returns>此实体 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 的子关系的集合。 默认值为空集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.Name">
      <summary>获取或设置此实体集合的名称。</summary>
      <returns>实体集合的名称。 默认值为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntityDescriptor">
      <summary>表示实体说明符。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityDescriptor.#ctor(System.IdentityModel.Metadata.EntityId)">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 类的新实例，该实例具有指定的实体 ID。</summary>
      <param name="entityId">实体 ID。 初始化 <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.EntityId" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.Contacts">
      <summary>获取此说明符中 <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> 的集合。</summary>
      <returns>包含联系人对象的集合。 默认值为空集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.EntityId">
      <summary>获取或设置此安全说明符的实体 ID 。</summary>
      <returns>实体 ID。 默认值为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.FederationId">
      <summary>获取或设置此描述符的联合 ID。</summary>
      <returns>联合 ID。 默认值为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.Organization">
      <summary>获取或设置此说明符的组织。</summary>
      <returns>组织。 默认值为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.RoleDescriptors">
      <summary>获取此描述符的角色描述符的集合。</summary>
      <returns>角色描述符的集合。 默认值为空集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntityId">
      <summary>表示实体 ID。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityId.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.EntityId" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityId.#ctor(System.String)">
      <summary>初始化具有指定 ID的 <see cref="T:System.IdentityModel.Metadata.EntityId" /> 类的新实例。</summary>
      <param name="id">用于初始化新实例的 ID。 初始化 <see cref="P:System.IdentityModel.Metadata.EntityId.Id" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityId.Id">
      <summary>获取或设置实体 ID。</summary>
      <returns>实体 ID。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个 ID 长于 1024 个字符的主体。</exception>
    </member>
    <member name="T:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor">
      <summary>标识为描述符 (IDPSSODescriptor) 类提供单一符号。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SingleSignOnServices">
      <summary>获取表示单一登录服务的 <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> 的集合。</summary>
      <returns>表示单一的登录服务的协议终结点的集合。 默认值为空集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SupportedAttributes">
      <summary>获取支持的 <see cref="T:Microsoft.IdentityModel.Tokens.Saml2Attribute" /> 集合。</summary>
      <returns>支持的特性的集合。 默认值为空集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.WantAuthenticationRequestsSigned">
      <summary>获取或设置一个值，该值指示是否应签名身份验证请求 。</summary>
      <returns>如果应对身份验证请求进行签名，则为 true；否则为false。 默认值为 false。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint">
      <summary>定义已编制索引 <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" />。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpoint.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpoint.#ctor(System.Int32,System.Uri,System.Uri)">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" /> 类的一个新实例，该实例具有指定的索引、绑定和位置。</summary>
      <param name="index">索引。</param>
      <param name="binding">绑定。</param>
      <param name="location">位置。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpoint.Index">
      <summary>获取或设置索引。 此元素为需要元素。</summary>
      <returns>索引。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpoint.IsDefault">
      <summary>获取或设置一个值，该值指示此值是否为默认终结点。 这是可选项。</summary>
      <returns>如果这是默认终结点，则为 true；否则为 false。 可以为 null。 默认值为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary">
      <summary>
        <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" /> 的分类列表。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary.Default">
      <summary>获取默认的 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" />。</summary>
      <returns>默认为 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" />。 如果没有默认存在，则 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.KeyDescriptor">
      <summary>定义密钥描述符。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.KeyDescriptor.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.KeyDescriptor.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的密钥标识符初始化 <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" /> 类的新实例。</summary>
      <param name="ski">此实例的密钥标识符。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.EncryptionMethods">
      <summary>获取此安全说明符中 <see cref="T:System.IdentityModel.Metadata.EncryptionMethod" /> 的集合。</summary>
      <returns>加密方法的集合。 默认值为空集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.KeyInfo">
      <summary>获取或设置此键描述符的密钥标识符。</summary>
      <returns>密钥标识符。 默认值为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.Use">
      <summary>获取或设置此键说明符的 <see cref="T:System.IdentityModel.Metadata.KeyType" />。</summary>
      <returns>指定键类型的枚举值之一。 默认值为 <see cref="F:System.IdentityModel.Metadata.KeyType.Unspecified" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.KeyType">
      <summary>定义 <see cref="P:System.IdentityModel.Metadata.KeyDescriptor.Use" /> 属性的密钥类型。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Encryption">
      <summary>用来加密的密钥。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Signing">
      <summary>密钥是用来签名的。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Unspecified">
      <summary>未指定密钥类型。</summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedEntry">
      <summary>定义本地化项的抽象基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntry.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntry.#ctor(System.Globalization.CultureInfo)">
      <summary>为指定的区域性初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> 类的新实例。</summary>
      <param name="language">区域性信息。 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedEntry.Language">
      <summary>获取或设置区域性信息。</summary>
      <returns>区域性信息。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedEntryCollection`1">
      <summary>
        <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> 对象的集合。</summary>
      <typeparam name="T">集合中的对象的 <see cref="T:System.Type" />。 必须从 <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> 类派生。</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntryCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedEntryCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntryCollection`1.GetKeyForItem(`0)">
      <summary>获取指定的项的键。</summary>
      <returns>一个表示密钥的 <see cref="T:System.Globalization.CultureInfo" />。</returns>
      <param name="item">返回键的项。</param>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedName">
      <summary>定义本地化的名称。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedName.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedName.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>初始化具有指定组名称和区域性 （语言） 的 <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> 类的新实例。</summary>
      <param name="name">此实例的名称。 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedName.Name" /> 属性。</param>
      <param name="language">定义该实例语言的 <see cref="T:System.Globalization.CultureInfo" />。 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedName.Name">
      <summary>获取或设置名称。</summary>
      <returns>名称。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedUri">
      <summary>创建本地化 URI。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedUri.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedUri" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedUri.#ctor(System.Uri,System.Globalization.CultureInfo)">
      <summary>使用 <paramref name="uri" /> 和 <paramref name="language" /> 构造一个 <see cref="T:System.IdentityModel.Metadata.LocalizedUri" />。</summary>
      <param name="uri">此实例的 URI。 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedUri.Uri" /> 属性。</param>
      <param name="language">定义该实例语言的 <see cref="T:System.Globalization.CultureInfo" />。 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedUri.Uri">
      <summary>获取或设置 URI 。</summary>
      <returns>URI。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataBase">
      <summary>定义 SAML 元数据基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataBase.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Metadata.MetadataBase" /> 类。</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataBase.SigningCredentials">
      <summary>获取或设置签名凭据。</summary>
      <returns>签名凭据。 默认值为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataSerializationException">
      <summary>当序列化或反序列化一个 SAML 元数据过程中发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataSerializer">
      <summary>提供元数据序列化的支持</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.#ctor">
      <summary>使用默认标记序列化程序初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.#ctor(System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>初始化使用指定的标记序列化程序 <see cref="T:System.IdentityModel.Metadata.MetadataSerializer" /> 类的新实例。</summary>
      <param name="tokenSerializer">将用于序列化安全标记的标记序列化程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenSerializer" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.CertificateValidationMode">
      <summary>获取或设置用于对元数据文档进行签名的 X.509 证书的验证模式。</summary>
      <returns>指定 X.509 证书验证方式的枚举值之一。 默认值通过 <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultCertificateValidationMode" /> 指定。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.CertificateValidator">
      <summary>获取或设置用于对元数据文档进行签名的 X.509 证书的证书验证程序。</summary>
      <returns>X.509 证书的证书验证程序。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateApplicationServiceInstance">
      <summary>创建应用程序服务描述符。</summary>
      <returns>应用程序服务描述符。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateContactPersonInstance">
      <summary>创建一个联系人。</summary>
      <returns>联系人。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateEntitiesDescriptorInstance">
      <summary>创建实体描述符。</summary>
      <returns>实体描述符。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateEntityDescriptorInstance">
      <summary>创建实体描述符。</summary>
      <returns>实体描述符。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateIdentityProviderSingleSignOnDescriptorInstance">
      <summary>创建 IDPSSO 描述符。</summary>
      <returns>IDPSSO 描述符。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateIndexedProtocolEndpointInstance">
      <summary>创建索引的终结点。</summary>
      <returns>索引终点。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateKeyDescriptorInstance">
      <summary>创建一个键描述符。</summary>
      <returns>键描述符。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateLocalizedNameInstance">
      <summary>创建本地化的名称。</summary>
      <returns>本地化名称。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateLocalizedUriInstance">
      <summary>创建本地化 URI。</summary>
      <returns>本地化 URI。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateOrganizationInstance">
      <summary>创建组织。</summary>
      <returns>组织。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateProtocolEndpointInstance">
      <summary>创建一个终结点。</summary>
      <returns>终结点。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateSecurityTokenServiceDescriptorInstance">
      <summary>创建安全标记服务说明符。</summary>
      <returns>该安全标记服务说明符。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateServiceProviderSingleSignOnDescriptorInstance">
      <summary>创建 SPSSO 描述符。</summary>
      <returns>SPSSO 说明符。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.GetMetadataSigningCertificate(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>获取从指定的密钥标识符创建 X.509 证书。</summary>
      <returns>从指定的密钥标识符创建 X.509 证书。</returns>
      <param name="ski">从 X.509 证书创建密钥标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ski" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法找到 <paramref name="ski" /> 中的 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> 类型的一个密钥标识符子句。 强制默认行为，可以重写该方法支持其他密钥标识符从句。</exception>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageAttribute">
      <summary>定义语言特性的字符串常数，“XML: xml:lang”。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageLocalName">
      <summary>定义语言本地名称的字符串常数，“lang”。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageNamespaceUri">
      <summary>定义语言命名空间 URI 的字符串常数，“http://www.w3.org/XML/1998/namespace”。</summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguagePrefix">
      <summary>定义语言前缀的字符串常数，“xml”。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadApplicationServiceDescriptor(System.Xml.XmlReader)">
      <summary>读取应用程序服务描述符。</summary>
      <returns>应用程序服务描述符。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadAttribute(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Attribute&gt; 元素。</summary>
      <returns>Saml2 特性。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadContactPerson(System.Xml.XmlReader)">
      <summary>读取联系人。</summary>
      <returns>联系人。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomAttributes``1(System.Xml.XmlReader,``0)">
      <summary>读取自定义特性的可扩展点。</summary>
      <param name="reader">XML 读取器。</param>
      <param name="target">
        <paramref name="T" /> 类型的对象。</param>
      <typeparam name="T">代表元数据元素的读取类型；例如，<see cref="T:System.IdentityModel.Metadata.ContactPerson" />。</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomElement``1(System.Xml.XmlReader,``0)">
      <summary>读取自定义元素的可扩展点。 默认情况下，返回 false。</summary>
      <returns>如果类型 <paramref name="T" /> 元素为可读，则为 true；否则为 false。</returns>
      <param name="reader">XML 读取器。</param>
      <param name="target">
        <paramref name="T" /> 类型的对象。</param>
      <typeparam name="T">代表元数据元素的读取类型；例如，<see cref="T:System.IdentityModel.Metadata.ContactPerson" />。</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomRoleDescriptor(System.String,System.Xml.XmlReader,System.IdentityModel.Metadata.EntityDescriptor)">
      <summary>读取自定义 RoleDescriptors 的可扩展点。</summary>
      <param name="xsiType">xsi:type</param>
      <param name="reader">XML 读取器。</param>
      <param name="entityDescriptor">用于添加角色描述符的实体描述符</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadDisplayClaim(System.Xml.XmlReader)">
      <summary>读取显示声明。</summary>
      <returns>显示声明。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">XML 不是格式良好时引发。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadEntitiesDescriptor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>读取实体描述符。</summary>
      <returns>实体描述符。</returns>
      <param name="reader">XML 读取器。</param>
      <param name="tokenResolver">安全令牌解析器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">XML 不是格式良好时引发。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadEntityDescriptor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>读取实体描述符。</summary>
      <returns>实体描述符。</returns>
      <param name="inputReader">XML 读取器。</param>
      <param name="tokenResolver">安全令牌解析器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputReader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadIdentityProviderSingleSignOnDescriptor(System.Xml.XmlReader)">
      <summary>读取 IDPSSO 描述符。</summary>
      <returns>IDPSSO 描述符。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadIndexedProtocolEndpoint(System.Xml.XmlReader)">
      <summary>读取索引的终结点。</summary>
      <returns>一个索引终点。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadKeyDescriptor(System.Xml.XmlReader)">
      <summary>读取密钥描述符。</summary>
      <returns>键描述符。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadLocalizedName(System.Xml.XmlReader)">
      <summary>读取本地化的名称。</summary>
      <returns>本地化的名称。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadLocalizedUri(System.Xml.XmlReader)">
      <summary>读取本地化 URI。</summary>
      <returns>本地化 URI。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.IO.Stream)">
      <summary>读取指定的流以反序列化实体描述符。</summary>
      <returns>说明符。 一个 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或者 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。</returns>
      <param name="stream">要读取的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.Xml.XmlReader)">
      <summary>读取指定的 XML 读取器以反序列化实体描述符。</summary>
      <returns>说明符。 一个 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或者 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。</returns>
      <param name="reader">要读取的 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>读取特定 XmlReader 反序列化实体描述符。</summary>
      <returns>说明符。 一个 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或者 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。</returns>
      <param name="reader">要读取的 XML 读取器。</param>
      <param name="tokenResolver">标记解析器用于解决签名令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="tokenResolver" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadataCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>读取实体描述符。</summary>
      <returns>说明符。 一个 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或者 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。</returns>
      <param name="reader">XML 读取器。</param>
      <param name="tokenResolver">安全令牌解析器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="tokenResolver" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">读取器不是定位在 &lt;EntityDescriptor&gt; 或 &lt;EntitiesDescriptor&gt; 元素上。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadOrganization(System.Xml.XmlReader)">
      <summary>读取组织。</summary>
      <returns>组织方式。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadProtocolEndpoint(System.Xml.XmlReader)">
      <summary>读取一个终点。</summary>
      <returns>一个终结点。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadRoleDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>读取角色描述符特性。</summary>
      <param name="reader">XML 读取器。</param>
      <param name="roleDescriptor">角色说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="roleDescriptor" /> 为 .null - 或 - <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadRoleDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>读取角色描述符元素。</summary>
      <returns>如果元素为可读，则为 true；否则为 false。</returns>
      <param name="reader">XML 读取器。</param>
      <param name="roleDescriptor">角色说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="roleDescriptor" /> 为 .null - 或 - <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts" /> 属性为 null。 <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Keys" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSecurityTokenServiceDescriptor(System.Xml.XmlReader)">
      <summary>读取安全标记服务说明符。</summary>
      <returns>安全标记服务说明符。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadServiceProviderSingleSignOnDescriptor(System.Xml.XmlReader)">
      <summary>读取 SPSSO 描述符。</summary>
      <returns>SPSSO 说明符。</returns>
      <param name="reader">XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">XML 无效。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSingleSignOnDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>读取 SSO 描述符特性。</summary>
      <param name="reader">XML 读取器。</param>
      <param name="roleDescriptor">SSO 角色说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="roleDescriptor" /> 为 .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSingleSignOnDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>读取 SSO 描述符元素。</summary>
      <returns>如果元素为可读，则为 true；否则为 false。</returns>
      <param name="reader">XML 读取器。</param>
      <param name="singleSignOnDescriptor">SSO 说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="singleSignOnDescriptor" /> 为 .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadWebServiceDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>读取 web 服务描述符特性。</summary>
      <param name="reader">XML 读取器。</param>
      <param name="roleDescriptor">Web 服务说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="roleDescriptor" /> 为 .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadWebServiceDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>读取 web 服务描述符元素。</summary>
      <returns>如果元素为可读，则为 true；否则为 false。</returns>
      <param name="reader">XML 读取器。</param>
      <param name="roleDescriptor">Web 服务说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="roleDescriptor" /> 为 .null - 或 - <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes" /> 属性为 null。 - 或 - <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered" /> 属性为 null。 - 或 - <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered" /> 属性为 null。 参数读取器/roleDescriptor/roleDescriptor.TargetScopes/roleDescriptor.TargetScopes/roleDescriptor.TokenTypesOffered 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.RevocationMode">
      <summary>获取或设置用于对元数据文档进行签名的 X.509 证书的吊销模式。</summary>
      <returns>指定 X.509 证书吊销方式的枚举值之一。 默认值通过 <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultRevocationMode" /> 指定。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.SecurityTokenSerializer">
      <summary>获取当前实例用来序列化安全标记的标记的序列化程序。</summary>
      <returns>当前实例所使用的标记序列化程序。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedIssuers">
      <summary>获取能够通过当前实例签署元数据文档的可信发行人列表。</summary>
      <returns>受信任的颁布者列表。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedStoreLocation">
      <summary>获取或设置用于对元数据文档进行签名的 X.509 证书的受信任存储位置。</summary>
      <returns>指定 X.509 证书存储区位置的枚举值之一。 默认值通过 <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultTrustedStoreLocation" /> 指定。</returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateIssuer(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>验证 X.509 证书，该证书针对由 <see cref="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedIssuers" /> 属性指定的可信发布者列表对元数据文档进行了签名。 此方法由 <see cref="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateSigningCredential(System.IdentityModel.Tokens.SigningCredentials)" /> 方向调用。</summary>
      <param name="signingCertificate">签名证书。</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateSigningCredential(System.IdentityModel.Tokens.SigningCredentials)">
      <summary>确认变数据文件的签名凭据。</summary>
      <param name="signingCredentials">已用于签署元数据文件的凭据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signingCredentials" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteApplicationServiceDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.ApplicationServiceDescriptor)">
      <summary>写入应用程序服务描述符。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="appService">应用程序服务描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="appService" /> 为 null。 - 或 - <paramref name="appService" /> 的 <see cref="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.Endpoints" /> 属性为 null。 - 或 - <paramref name="appService" /> 的 <see cref="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.PassiveRequestorEndpoints" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>写入 &lt;saml:Attribute&gt; 元素。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="data">Saml2 特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="data" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteContactPerson(System.Xml.XmlWriter,System.IdentityModel.Metadata.ContactPerson)">
      <summary>写入联系人。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="contactPerson">联系人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="contactPerson" /> 为 null。 - 或 - <paramref name="contactPerson" /> 的 <see cref="P:System.IdentityModel.Metadata.ContactPerson.EmailAddresses" /> 属性为 null。 - 或 - <paramref name="contactPerson" /> 的 <see cref="P:System.IdentityModel.Metadata.ContactPerson.TelephoneNumbers" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteCustomAttributes``1(System.Xml.XmlWriter,``0)">
      <summary>编写自定义特性的可扩展点。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="source">类型 <paramref name="T" /> 的源元素。</param>
      <typeparam name="T">代表元素特性编写的类型。 例如，<see cref="T:System.IdentityModel.Metadata.ContactPerson" />。</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteCustomElements``1(System.Xml.XmlWriter,``0)">
      <summary>编写自定义元素的可扩展点。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="source">类型 <paramref name="T" /> 的源元素。</param>
      <typeparam name="T">代表元素编写的类型。</typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteDisplayClaim(System.Xml.XmlWriter,System.IdentityModel.Metadata.DisplayClaim)">
      <summary>写入显示声明。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="claim">要写入的显示声明。</param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteEntitiesDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.EntitiesDescriptor)">
      <summary>写入实体描述符。</summary>
      <param name="inputWriter">XML 编写器。</param>
      <param name="entitiesDescriptor">实体描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputWriter" /> 为 null。 - 或 - <paramref name="entitiesDescriptor" /> 为 null。 - 或 - <paramref name="entitiesDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> 属性为 null。 - 或 - <paramref name="entitiesDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteEntityDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.EntityDescriptor)">
      <summary>写入实体描述符。</summary>
      <param name="inputWriter">XML 编写器。</param>
      <param name="entityDescriptor">实体描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputWriter" /> 为 null。 - 或 - <paramref name="entityDescriptor" /> 为 null。 - 或 - <paramref name="entityDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.Contacts" /> 属性为 null。 - 或 - <paramref name="entityDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.RoleDescriptors" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteIdentityProviderSingleSignOnDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor)">
      <summary>写入 IDPSSO 描述符。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="identityProviderSingleSignOnDescriptor">IDPSSO 描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="identityProviderSingleSignOnDescriptor" /> 为 null。 - 或 - <paramref name="identityProviderSingleSignOnDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SupportedAttributes" /> 属性为 null。 - 或 - <paramref name="identityProviderSingleSignOnDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SingleSignOnServices" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteIndexedProtocolEndpoint(System.Xml.XmlWriter,System.IdentityModel.Metadata.IndexedProtocolEndpoint,System.Xml.XmlQualifiedName)">
      <summary>写入索引的终结点。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="indexedEP">索引终点。</param>
      <param name="element">XML 限定元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="indexedEP" /> 为 null。 - 或 - <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteKeyDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.KeyDescriptor)">
      <summary>写入密钥描述符。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="keyDescriptor">键描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="keyDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteLocalizedName(System.Xml.XmlWriter,System.IdentityModel.Metadata.LocalizedName,System.Xml.XmlQualifiedName)">
      <summary>写入本地化名称。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="name">本地化名称。</param>
      <param name="element">xml 限定名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="name" /> 为 null。 - 或 - <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteLocalizedUri(System.Xml.XmlWriter,System.IdentityModel.Metadata.LocalizedUri,System.Xml.XmlQualifiedName)">
      <summary>写入本地化 URI</summary>
      <param name="writer">XML 编写器。</param>
      <param name="uri">本地化 URI。</param>
      <param name="element">xml 限定名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="uri" /> 为 null。 - 或 - <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadata(System.IO.Stream,System.IdentityModel.Metadata.MetadataBase)">
      <summary>将该联合元数据写入指定流。</summary>
      <param name="stream">将联合元数据写入的流。</param>
      <param name="metadata">要写入的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。 - 或 - <paramref name="metadata" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadata(System.Xml.XmlWriter,System.IdentityModel.Metadata.MetadataBase)">
      <summary>将联合元数据写入指定 XML 写入器。</summary>
      <param name="writer">写入联合元数据的 XML 编写器。</param>
      <param name="metadata">要写入的元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="metadata" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadataCore(System.Xml.XmlWriter,System.IdentityModel.Metadata.MetadataBase)">
      <summary>写入元数据。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="metadataBase">SAML 元数据基础。 一个 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或者 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="metadataBase" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">
        <paramref name="metadataBase" /> 无法从 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 赋值。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteOrganization(System.Xml.XmlWriter,System.IdentityModel.Metadata.Organization)">
      <summary>写入组织</summary>
      <param name="writer">XML 编写器。</param>
      <param name="organization">组织。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="organization" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteProtocolEndpoint(System.Xml.XmlWriter,System.IdentityModel.Metadata.ProtocolEndpoint,System.Xml.XmlQualifiedName)">
      <summary>写入终结点。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="endpoint">终结点。</param>
      <param name="element">xml 限定名元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="endpoint" /> 为 null。 - 或 - <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteRoleDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>写入角色描述符特性。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="roleDescriptor">角色说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="roleDescriptor" /> 为 .null - 或 - <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteRoleDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>写入角色描述符元素。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="roleDescriptor">角色说明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="roleDescriptor" /> 为 .null - 或 - <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts" /> 属性为 null。 <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Keys" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSecurityTokenServiceDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.SecurityTokenServiceDescriptor)">
      <summary>写入安全标记服务说明符。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="securityTokenServiceDescriptor">该安全标记服务说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="securityTokenServiceDescriptor" /> 为 null。 - 或 - <paramref name="securityTokenServiceDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.SecurityTokenServiceEndpoints" /> 属性为 null。 - 或 - <paramref name="securityTokenServiceDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.PassiveRequestorEndpoints" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteServiceProviderSingleSignOnDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor)">
      <summary>写入 SPSSO 描述符。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="serviceProviderSingleSignOnDescriptor">SPSSO 说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="serviceProviderSingleSignOnDescriptor" /> 为 null。 - 或 - <paramref name="serviceProviderSingleSignOnDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSingleSignOnDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>写入 SSO 描述符特性。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="singleSignOnDescriptor">SSO 说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="singleSignOnDescriptor" /> 为 .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSingleSignOnDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>写入 SSO 描述符元素。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="singleSignOnDescriptor">SSO 说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="singleSignOnDescriptor" /> 为 .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteWebServiceDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>写入 web 服务描述符特性。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="wsDescriptor">Web 服务说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="wsDescriptor" /> 为 .null</exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteWebServiceDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>写入 web 服务描述符元素。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="wsDescriptor">Web 服务说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="wsDescriptor" /> 为 .null - 或 - <paramref name="wsDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes" /> 属性为 null。 - 或 - <paramref name="wsDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered" /> 属性为 null。 - 或 - <paramref name="wsDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered" /> 属性为 null。 参数读取器/roleDescriptor/roleDescriptor.TargetScopes/roleDescriptor.TargetScopes/roleDescriptor.TokenTypesOffered 为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Metadata.Organization">
      <summary>定义组织。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.Organization.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.Organization" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.Organization.#ctor(System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedName},System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedName},System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedUri})">
      <summary>初始化具有特定的名称，显示名称和 URIs的集合的  <see cref="T:System.IdentityModel.Metadata.Organization" /> 类的新实例。</summary>
      <param name="names">包含此实例的名称的 <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> 的集合。</param>
      <param name="displayNames">包含此实例的演示名称的 <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> 的集合。</param>
      <param name="urls">包含此实例的 URL 的 <see cref="T:System.IdentityModel.Metadata.LocalizedUri" /> 的集合。</param>
      <exception cref="T:System.ArgumentNullException">是否任何输入参数都为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.DisplayNames">
      <summary>获取与组织关联的显示名称的集合。  此元素为需要元素。</summary>
      <returns>显示名的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.Names">
      <summary>获取与组织关联的名称的集合。  此元素为需要元素。</summary>
      <returns>名称集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.Urls">
      <summary>获取与组织关联的 URLs 的集合。  此为必需元素。</summary>
      <returns>URL 实体的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ProtocolEndpoint">
      <summary>此类定义一个协议终结点。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ProtocolEndpoint.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ProtocolEndpoint.#ctor(System.Uri,System.Uri)">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> 类的一个新实例，该实例具有指定的索引、绑定和位置。</summary>
      <param name="binding">表示绑定新实例的 URI。 初始化 <see cref="P:System.IdentityModel.Metadata.ProtocolEndpoint.Binding" /> 属性。</param>
      <param name="location">表示新实例位置的 URI。 初始化 <see cref="P:System.IdentityModel.Metadata.ProtocolEndpoint.Location" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.Binding">
      <summary>获取或设置绑定。 此元素为需要元素。</summary>
      <returns>表示绑定当前实例的 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.Location">
      <summary>获取或设置位置。 此元素为需要元素。</summary>
      <returns>表示当前实例位置的 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.ResponseLocation">
      <summary>获取或设置响应位置。 这是可选元素。</summary>
      <returns>表示当前实例响应位置的 URI。 默认值为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.RoleDescriptor">
      <summary>定义角色描述符。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.RoleDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.RoleDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.RoleDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.Uri})">
      <summary>初始化包含支持的协议的集合的 <see cref="T:System.IdentityModel.Metadata.RoleDescriptor" /> 类的一个新实例。</summary>
      <param name="protocolsSupported">支持协议集合。 初始化 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts">
      <summary>获取 <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> 的集合。</summary>
      <returns>此角色描述符的联系人的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ErrorUrl">
      <summary>获取或设置错误的 URL。</summary>
      <returns>该角色描述符的错误 URL。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Keys">
      <summary>获取 <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" /> 的集合。</summary>
      <returns>此角色描述符的密钥描述符的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Organization">
      <summary>获取或设置 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Organization" />。</summary>
      <returns>此角色说明符的组织。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported">
      <summary>获取支持的协议的集合。</summary>
      <returns>此角色描述符的受支持协定的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ValidUntil">
      <summary>获取或设置过期时间。</summary>
      <returns>该角色描述器的过期时间。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor">
      <summary>定义安全标记服务的服务描述符。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.PassiveRequestorEndpoints">
      <summary>获取表示被动请求者终结点的 <see cref="T:System.ServiceModel.EndpointAddress" /> 的集合。</summary>
      <returns>被动请求方终结点的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.SecurityTokenServiceEndpoints">
      <summary>获取表示安全令牌服务的终结点的 <see cref="T:System.ServiceModel.EndpointAddress" /> 的集合。</summary>
      <returns>结束点的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor">
      <summary>定义服务提供程序 (ssp) SSO 的一个描述符 (SPSSO)。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.#ctor(System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary)">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor" /> 类的新实例，该实例具有指定的索引结点的字典。</summary>
      <param name="collection">此实例的一个 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> 对象。 初始化 <see cref="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices">
      <summary>获取包含索引的终点支持身份验证协议请求外形定义的[SAMLProf] <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" />。</summary>
      <returns>此实例的 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AuthenticationRequestsSigned">
      <summary>获取或设置指示是否应对服务提供商发送的请求进行签名的值。</summary>
      <returns>如果将对服务提供程序发送的身份验证请求进行签名，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.WantAssertionsSigned">
      <summary>获取或设置指示是否应对服务提供商接收的断言进行签名的值。</summary>
      <returns>如果应签名服务提供程序接收的断言，则为 true；否则，为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.SingleSignOnDescriptor">
      <summary>定义 SSO 描述符。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.SingleSignOnDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.SingleSignOnDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.ArtifactResolutionServices">
      <summary>获取包含项目决策服务的索引终结点的 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> 对象。</summary>
      <returns>包含用于项目解析服务的索引终点的 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.NameIdentifierFormats">
      <summary>获取表示支持的名称标识符格式的 URI 的集合。</summary>
      <returns>表示受支持的名称标识符格式的 URI 的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.SingleLogoutServices">
      <summary>获取单事件记录服务终点的集合。</summary>
      <returns>单一服务终结点的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Metadata.WebServiceDescriptor">
      <summary>定义 Web 服务说明符。</summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.WebServiceDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Metadata.WebServiceDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered">
      <summary>获取表示提供的声明类型的 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 集合。</summary>
      <returns>提供的声明类型的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesRequested">
      <summary>获取表示要求的声明类型的 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 集合。</summary>
      <returns>请求的声明类型的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ServiceDescription">
      <summary>获取或设置服务的说明。</summary>
      <returns>服务说明。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ServiceDisplayName">
      <summary>获取或设置服务的显示名称。</summary>
      <returns>服务显示名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes">
      <summary>获取表示目标范围的 <see cref="T:System.ServiceModel.EndpointAddress" /> 集合。</summary>
      <returns>目标范围的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered">
      <summary>获取已提供的标记类型的集合。</summary>
      <returns>提供的标记类型的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Policy.AuthorizationContext">
      <summary>可以通过已发送消息中的令牌，以及通过调用 <see cref="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" /> 方法获取对所有授权策略进行评估的结果。</summary>
    </member>
    <member name="M:System.IdentityModel.Policy.AuthorizationContext.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets">
      <summary>获取与授权策略关联的声明集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含声明集。</returns>
    </member>
    <member name="M:System.IdentityModel.Policy.AuthorizationContext.CreateDefaultAuthorizationContext(System.Collections.Generic.IList{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>对所有指定的授权策略进行评估并创建一个 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />，它包含对所有指定授权策略进行评估的结果。</returns>
      <param name="authorizationPolicies">一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，它包含授权策略集。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.ExpirationTime">
      <summary>获取此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象不再有效的日期和时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，指示此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象不再有效的日期和时间。</returns>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.Id">
      <summary>获取此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象的唯一标识符。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象。</returns>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.Properties">
      <summary>获取与此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象关联的非声明属性的集合。</summary>
      <returns>一个指定非声明属性集合的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Policy.EvaluationContext">
      <summary>当在派生类中重写时，表示已经过评估的授权策略的结果。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.AddClaimSet(System.IdentityModel.Policy.IAuthorizationPolicy,System.IdentityModel.Claims.ClaimSet)">
      <summary>将一个声明集添加到评估上下文中。</summary>
      <param name="policy">一个 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，表示正将声明添加到评估上下文的授权策略。</param>
      <param name="claimSet">一个包含一个声明集的 <see cref="T:System.IdentityModel.Claims.ClaimSet" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.ClaimSets">
      <summary>获取 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象的只读集合，该集合包含由已经过评估的授权策略添加的声明。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象，它包含由已经过评估的授权策略添加的声明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.Generation">
      <summary>获取已向评估上下文中添加声明的次数。</summary>
      <returns>已向评估上下文中添加声明的次数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.Properties">
      <summary>获取与此 <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> 关联的非声明属性的集合。</summary>
      <returns>一个指定非声明属性集合的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.RecordExpirationTime(System.DateTime)">
      <summary>设置此 <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> 不再有效的日期和时间。</summary>
      <param name="expirationTime">一个 <see cref="T:System.DateTime" /> 值，指示此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象不再有效的日期和时间。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Policy.IAuthorizationComponent">
      <summary>表示用于对用户进行授权的组件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.IAuthorizationComponent.Id">
      <summary>获取标识此授权组件的字符串。</summary>
      <returns>一个标识此授权组件的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Policy.IAuthorizationPolicy">
      <summary>通过给定的声明集，定义一组用于对用户进行授权的规则。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
      <summary>评估用户是否符合此授权策略的要求。</summary>
      <returns>如果在其他授权策略向 <paramref name="evaluationContext" /> 中添加其他声明时必须调用此授权策略的 <see cref="M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)" /> 方法，则为 false；否则为 true，表示此授权策略不需要任何其他评估。</returns>
      <param name="evaluationContext">一个 <see cref="T:System.IdentityModel.Policy.EvaluationContext" />，其中包含授权策略所评估的声明集。</param>
      <param name="state">一个 <see cref="T:System.Object" />，由表示此授权策略的自定义状态的引用传递。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Policy.IAuthorizationPolicy.Issuer">
      <summary>获取一个表示授权策略颁发者的声明集。</summary>
      <returns>一个表示授权策略颁发者的 <see cref="T:System.IdentityModel.Claims.ClaimSet" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext">
      <summary>表示授权：在授权中定义的 AdditionalContext 元素扩展到 WS-Trust。 这些扩展指定在 WS-Federation 中定义。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.AdditionalContext.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.AdditionalContext.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Protocols.WSTrust.ContextItem})">
      <summary>使用指定的上下文项初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" /> 类的新实例。</summary>
      <param name="items">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 对象的 <see cref="T:System.Collections.Generic.IList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.AdditionalContext.Items">
      <summary>获取此实例的上下文项的集合。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 对象的 <see cref="T:System.Collections.Generic.IList`1" /> 为请求 (RST) 提供上下文作为名称值对的集合。 默认值是空列表。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange">
      <summary>表示 WS-Trust BinaryExchange 元素的内容。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.BinaryExchange.#ctor(System.Byte[],System.Uri)">
      <summary>使用指定的数据和 ValueType URI 创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" /> 类的新实例。</summary>
      <param name="binaryData">交换的二进制数据。</param>
      <param name="valueType">表示二进制数据的值类型的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binaryData" /> 为 null。 - 或 - <paramref name="valueType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="valueType" /> 不是绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.BinaryExchange.#ctor(System.Byte[],System.Uri,System.Uri)">
      <summary>使用指定的数据、ValueType URI 和 EncodingType URI 创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" /> 类的新实例。</summary>
      <param name="binaryData">交换的二进制数据。</param>
      <param name="valueType">表示二进制数据的值类型的 <see cref="T:System.Uri" />。</param>
      <param name="encodingType">指定用于二进制数据编码的编码类型的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binaryData" /> 为 null。 - 或 - <paramref name="encodingType" /> 为 null。 - 或 - <paramref name="valueType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="encodingType" /> 不是绝对 URI。 - 或 - <paramref name="valueType" /> 不是绝对 URI。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.BinaryData">
      <summary>获取与 BinaryExchange 元素关联的二进制数据。</summary>
      <returns>包含二进制数据的 <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.EncodingType">
      <summary>获取 EncodingType URI 。</summary>
      <returns>一个 <see cref="T:System.Uri" />，它包含编码类型。 此为 BinaryExchange 元素的 EncodingType 特性的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.ValueType">
      <summary>获取 ValueType URI。</summary>
      <returns>一个包含值类型的 <see cref="T:System.Uri" />。 此为 BinaryExchange 元素的 ValueType 特性的值。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.ContextItem">
      <summary>表示授权：在授权中定义的 ContextItem 元素扩展到 WS-Trust。 这些扩展指定在 WS-Federation 中定义。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri)">
      <summary>用指定的名称 URI 初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 类的新实例。</summary>
      <param name="name">指示上下文项名称的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNull">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Argument">
        <paramref name="name" /> 不是绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri,System.String)">
      <summary>用指定的名称 URI 和值初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 类的新实例。</summary>
      <param name="name">指示上下文项名称的 <see cref="T:System.Uri" />。</param>
      <param name="value">上下文项值。 可以为 null。</param>
      <exception cref="T:System.ArgumentNull">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Argument">
        <paramref name="name" /> 不是绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri,System.String,System.Uri)">
      <summary>用指定的名称 URI、值和 Scope URI初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 类的新实例。</summary>
      <param name="name">指示上下文项名称的 <see cref="T:System.Uri" />。</param>
      <param name="value">上下文项值。 可以为 null。</param>
      <param name="scope">上下文项区域。 可以为 null。</param>
      <exception cref="T:System.ArgumentNull">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Argument">
        <paramref name="name" /> 不是绝对 URI。 - 或 - <paramref name="scope" /> 不是 null 并且不是绝对 URI。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Name">
      <summary>获取或设置 URI 名称。</summary>
      <returns>一个 <see cref="T:System.Uri" />，包含名称特性的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Scope">
      <summary>获取或设置 URI 范围 。</summary>
      <returns>一个 <see cref="T:System.Uri" />，它包含范围特性的值。 可以为 null。</returns>
      <exception cref="T:System.ArgumentException">尝试设置不是 null 以及不是绝对 URI 的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Value">
      <summary>获取或设置上下文项的值。</summary>
      <returns>ContextItem 元素的值。 可以为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.EndpointReference">
      <summary>表示 wsa:EndpointReference 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.EndpointReference" /> 类的新实例。</summary>
      <param name="uri">绝对 URI 指定终结点引用的地址。 初始化 <see cref="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Uri" /> 属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uri" /> 不是绝对 URI。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Details">
      <summary>获取包含在终点引用中的 XML 元素的集合。 wsa：地址元素不包含在集合中。</summary>
      <returns>终结点引用中包含的 XML 元素的集合。</returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.ReadFrom(System.Xml.XmlDictionaryReader)">
      <summary>从指定的 XML 字典读取器读取 wsa:EndpointReference 元素。</summary>
      <returns>终点引用从 XML 目录读取器读取或在 wsa：EndpointReference 元素不能读取的情况下为 null。</returns>
      <param name="reader">从中读取终结点引用的 XML 词典读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.ReadFrom(System.Xml.XmlReader)">
      <summary>从指定的 XML 读取器读取 wsa:EndpointReference 元素。</summary>
      <returns>终点引用从 XML 目录读取器读取或在 wsa：EndpointReference 元素不能读取的情况下为 null。</returns>
      <param name="reader">从中读取终结点引用的 XML 读取器。</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Uri">
      <summary>获取指定的引用的终结点的地址的 URI。</summary>
      <returns>终结点引用的地址。</returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.WriteTo(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.IdentityModel.Protocols.WSTrust.EndpointReference" /> 作为 &lt;wsa:EndpointReference&gt; 元素写入指定的 XML 写入器。</summary>
      <param name="writer">终结点引用的 XML 编写器。</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Entropy">
      <summary>表示用于令牌请求消息和响应消息的平均信息量。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 类的新实例以二进制保密格式发送平均信息量。</summary>
      <param name="secret">包含密钥材料的字节数组。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 类的新实例以加密密钥格式发送平均信息量。</summary>
      <param name="secret">包含密钥材料的字节数组。</param>
      <param name="wrappingCredentials">表示用于加密密钥材料凭据的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" />。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)">
      <summary>使用指定受保护键初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 类的新实例。</summary>
      <param name="protectedKey">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 表示受保护的密匙，可以是二进制秘密或加密的密钥。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Int32)">
      <summary>使用随机生成的字节初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 类的新实例。</summary>
      <param name="entropySizeInBits">在平均信息量内部的密钥材料的 entropySizeInBits。</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException">
      <summary>当请求 （RST） 无效或错误引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.KeyTypes">
      <summary>定义与协议无关的 URIs 用于该标记的请求的 (RST) 或响应 (RSTR) 指示所需或需要的关键类型。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Asymmetric">
      <summary>表示该非对称密钥类型的 URI；http://schemas.System.com/idfx/keytype/asymmetric。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer">
      <summary>表示持有人密钥类型的 URI；http://schemas.System.com/idfx/keytype/bearer。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Symmetric">
      <summary>表示该对称密钥类型的 URI；http://schemas.System.com/idfx/keytype/symmetric。</summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Lifetime">
      <summary>表示 &lt;wst:Lifetime&gt; 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Lifetime.#ctor(System.DateTime,System.DateTime)">
      <summary>使用指定的创建和过期时间初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> 类的新实例。</summary>
      <param name="created">
        <see cref="T:System.DateTime" /> 表示 UTC 中标记的创建时间。</param>
      <param name="expires">一个 <see cref="T:System.DateTime" />，表示 UTC 中令牌的过期时间。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="created" /> 指定的时间将 <paramref name="expires" />指定的时间之前发生。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Lifetime.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>使用指定的创建和过期时间初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> 类的新实例。</summary>
      <param name="created">
        <see cref="T:System.DateTime" /> 指定 UTC 中标记的创建时间。 可以为 null。</param>
      <param name="expires">
        <see cref="T:System.DateTime" /> 指定 UTC 中标记过期的时间。 可以为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="created" /> 指定的时间将 <paramref name="expires" />指定的时间之前发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Lifetime.Created">
      <summary>获取在 UTC 时间的标记的创建时间。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 表示标记创建的 UTC 时间。 可以为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Lifetime.Expires">
      <summary>获取在 UTC 时间的标记到期的时间。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 表示标记过期的 UTC 时间。 可以为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Participants">
      <summary>表示 WS-Trust 参与者元素。 wst：参与者元素是对 wst 的扩展：RequestSecurityToken 元素和传递双方授权参与标记使用的信息。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Participants.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Participants" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Participants.Participant">
      <summary>获取允许使用该标记的参与者列表。</summary>
      <returns>参与者的列表。 在列表中的每一项都包含 wst:requesttype 元素的内容。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Participants.Primary">
      <summary>获取或设置已颁发令牌的主用户。</summary>
      <returns>包含该标志主用户地址的 <see cref="T:System.ServiceModel.Protocols.WSTrust.EndpointReference" />。 wst的内容：Primary 元素。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey">
      <summary>表示在 RequestSecurityToken 和 RequestSecurityTokenResponse 中 wst:Entropy 或 wst:RequestedProofToken 元素的内容。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.#ctor(System.Byte[])">
      <summary>不带加密初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 类的新实例。</summary>
      <param name="secret">
        <see cref="T:System.Byte" /> 类型的数组，它包含要保护的密钥材料。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>使用指定的加密凭据初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 类的新实例。</summary>
      <param name="secret">
        <see cref="T:System.Byte" /> 类型的数组，它包含要保护的密钥材料。</param>
      <param name="wrappingCredentials">包含用于加密密钥材料凭据的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" />。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.GetKeyBytes">
      <summary>获取密钥材料。</summary>
      <returns>包含密钥材料的 <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ProtectedKey.WrappingCredentials">
      <summary>获取密钥的加密凭据。</summary>
      <returns>表示用于加密密钥材料凭据的 <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" />。 null 指示键没有加密。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Renewing">
      <summary>表示在 WS 信任更新请求中的 wst:Renewing 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Renewing.#ctor">
      <summary>使用默认属性值初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /><see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Renewing.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化用指定值的 <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /><see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /> 类的新实例。</summary>
      <param name="allowRenewal">如果允许更新，则为 true；否则为 false。</param>
      <param name="okForRenewalAfterExpiration">如果请求的标记在其过期后还可以进行更新，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Renewing.AllowRenewal">
      <summary>获取或设置指示是否可以续订标记的值。</summary>
      <returns>如果允许更新，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Renewing.OkForRenewalAfterExpiration">
      <summary>获取或设置指示令牌在过期后是否可以续订的值。</summary>
      <returns>如果请求的标记在其过期后还可以进行更新，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestClaim">
      <summary>表示单个请求的声明（安全标记请求 (RST) 中）。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String)">
      <summary>使用指定的声称类型初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 类的新实例。</summary>
      <param name="claimType">表示声明类型的 URI。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String,System.Boolean)">
      <summary>初始化具有指定的声明类型和指示声明是否可选的值的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 类的新实例。</summary>
      <param name="claimType">表示声明类型的 URI。</param>
      <param name="isOptional">如果 响应中的声明为可选，则为 true；否则为false 。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String,System.Boolean,System.String)">
      <summary>初始化具有指定的声明类型、声明值和指示声明是否可选的值的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 类的新实例。</summary>
      <param name="claimType">表示声明类型的 URI。</param>
      <param name="isOptional">如果 响应中的声明为可选，则为 true；否则为false 。</param>
      <param name="value">声明的值。</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.ClaimType">
      <summary>获取所请求的声称的类型。</summary>
      <returns>表示声明类型的 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.IsOptional">
      <summary>获取或设置指示请求声明在响应中是否可选的值。</summary>
      <returns>如果 响应中的声明为可选，则为 true；否则为false 。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.Value">
      <summary>获取或设置请求的声明值。</summary>
      <returns>声明的值。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection">
      <summary>表示 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 中 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 对象的集合。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection.Dialect">
      <summary>获取或设置 Dialect 特性。</summary>
      <returns>字符串包含标识方言的 URI 。 缺省值是 <see cref="F:System.IdentityModel.Protocols.WSIdentity.WSIdentityConstants.Dialect" />，指示集合中与 Information Card Profile 对应的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 对象。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken">
      <summary>表示 wst:RequestedProofToken 元素的内容。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[])">
      <summary>使用指定的密钥材料初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 类的新实例。</summary>
      <param name="secret">包含密钥材料的 <see cref="T:System.Byte" /> 数组。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>使用指定的密钥材料和加密凭据初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 类的新实例。</summary>
      <param name="secret">包含密钥材料的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="wrappingCredentials">表示用于加密密钥材料凭据的 <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" />。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 对象初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 类的新实例。</summary>
      <param name="protectedKey">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 表示密匙，可以是二进制秘密或加密的密钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="protectedKey" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.String)">
      <summary>使用指定的所得的密钥算法初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 类的新实例。</summary>
      <param name="computedKeyAlgorithm">包含指示用于计算联合的平均信息量用例的会话密钥的 URI 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="computedKeyAlgorithm" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm">
      <summary>获取用于在组合平均信息量示例中计算会话密钥的计算密钥算法。</summary>
      <returns>包含指示密钥算法的 URI 字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey">
      <summary>当 wst:requesttype: RequestedProofToken 元素包含一个键时，获取该键。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 表示密匙，可以是加密的或明文形式的。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken">
      <summary>表示请求（发出）的安全标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用指定的发出标记初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 类的新实例。</summary>
      <param name="token">一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示请求的安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.#ctor(System.Xml.XmlElement)">
      <summary>使用标记 XML 初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 类的新实例。</summary>
      <param name="tokenAsXml">包含该请求的安全标志的 XML 表示形式的 <see cref="T:System.Xml.XmlElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenAsXml" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.SecurityToken">
      <summary>当 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 实例被创建时，获取相应的安全令牌。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示颁发的安全令牌。 如果用标记 XML 创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> ，则 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.SecurityTokenXml">
      <summary>当使用标记 XML 创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 实例时，获取相应的安全令牌 XML 表示形式。</summary>
      <returns>包含该请求的安全标志的 XML 表示形式的 <see cref="T:System.Xml.XmlElement" />。 如果用 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 对象创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 实例，则为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken">
      <summary>表示请求安全标记的 wst:RequestSecurity 元素（RST）。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor(System.String)">
      <summary>使用指定的请求类型初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 类的新实例。</summary>
      <param name="requestType">一个字符串，其中包含请求类型 URI。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor(System.String,System.String)">
      <summary>使用指定的请求类型初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 类的新实例。</summary>
      <param name="requestType">一个字符串，其中包含请求类型 URI。</param>
      <param name="keyType">一个包含键类型 URI 的字符串。 这应是 <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> 类定义的常数之一。</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ActAs">
      <summary>获取或设置请求者尝试充当的标识的安全令牌。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> 表示该标识的请求者正在尝试。 可以为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.AdditionalContext">
      <summary>获取或设置请求的附加上下文信息。</summary>
      <returns>包含请求的附加上下文信息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" />。 可以为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.CancelTarget">
      <summary>获取或设置要在 WS-Trust 取消请求中取消的令牌。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" />，包含要取消的令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims">
      <summary>获取客户端（请求者）请求的声明类型。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection" />，包含所需的声明。 默认值为空集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ComputedKeyAlgorithm">
      <summary>当计算密钥被用于公开的标记时，获取表示拟用期望算法的 URI。</summary>
      <returns>字符串包含表示密钥算法的 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Delegatable">
      <summary>获取或设置指定是否应将颁发的令牌标记为可委派的值。</summary>
      <returns>如果已发布标记为可委托，则为 true；否则为 false。 可以为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.DelegateTo">
      <summary>获取或设置应向其委派已颁发令牌的标识。</summary>
      <returns>表示应委托已发布的标志的标识的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" />。 可以为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Encryption">
      <summary>获取或设置令牌信息以及加密时要使用的密钥。</summary>
      <returns>一个包含加密信息的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Forwardable">
      <summary>获取或设置指定是否应将颁发的令牌标记为可转发的值。</summary>
      <returns>如果已发布标记为可向前的，则为 true；否则为 false。 可以为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Issuer">
      <summary>获取或设置 wst:OnBehalfOf 标记的颁发者。</summary>
      <returns>一个包含颁发者地址的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.OnBehalfOf">
      <summary>获取或设置代表发出请求的标识的令牌。</summary>
      <returns>包含要请求的标识标志的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Participants">
      <summary>获取或设置将授权使用已颁发令牌的参与者。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.Participants" /> 包含授权使用已发布的标识的参与者。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption">
      <summary>获取或设置要用于加密证明令牌的令牌。</summary>
      <returns>一个包含令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Renewing">
      <summary>获取或设置 WS-Trust 续订请求的续订语义。</summary>
      <returns>返回包含续订语义的 <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.RenewTarget">
      <summary>获取或设置要在 WS-Trust 续订请求中续订的令牌。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" />，包含要续订的令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.SecondaryParameters">
      <summary>获取或设置其请求者不是发出方的参数。</summary>
      <returns>包含请求的次要参数的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，即该请求者不是发信方的参数。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ValidateTarget">
      <summary>获取或设置要在 WS-Trust 验证请求中验证的令牌。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> 包含要验证的标志。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse">
      <summary>表示返回安全标记的 wst:RequestSecurityTokenResponse 元素（RST）。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.#ctor(System.IdentityModel.Protocols.WSTrust.WSTrustMessage)">
      <summary>使用指定的请求消息初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 类的新实例。</summary>
      <param name="message">一个表示请求的（RST） <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.IsFinal">
      <summary>获取或设置确定如果 RSTR 为最终消息，是否应序列化的标识。</summary>
      <returns>如果 RSTR 是最终消息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedAttachedReference">
      <summary>获取或设置当请求的令牌附加到消息时的安全令牌引用。</summary>
      <returns>一个包含该引用的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedProofToken">
      <summary>获取或设置用于返回所有权令牌的证明的可选元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" />，表示证明令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedSecurityToken">
      <summary>获取或设置用于返回请求的安全令牌的可选元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 表示安全令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedTokenCancelled">
      <summary>获取或设置 wst:RequestedTokenCancelled 元素。</summary>
      <returns>如果该令牌被取消，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedUnattachedReference">
      <summary>获取或设置请求的令牌未附加到消息时的安全令牌引用。</summary>
      <returns>一个包含该引用的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.Status">
      <summary>获取或设置 RSTR 中的 wst:Status 元素。</summary>
      <returns>包含 WS-Trust 验证请求的状态信息的 <see cref="T:System.IdentityModel.Protocols.WSTrust.Status" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestTypes">
      <summary>定义请求协议不可知的 RequestType URI 字符串。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Cancel">
      <summary>表示 WS 信任取消请求协议不可知的 URI 的字符串常数；http://schemas.System.com/idfx/requesttype/cancel。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.GetMetadata">
      <summary>表示 WS-Trust GetMetadata 请求协议不可知的 URI 的字符串常数；http://schemas.System.com/idfx/requesttype/getMetadata。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue">
      <summary>表示 WS 信任发布请求协议不可知的 URI 的字符串常数；http://schemas.System.com/idfx/requesttype/issue。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.IssueCard">
      <summary>表示 WS-Trust IssueCard 请求协议不可知的 URI 的字符串常数；http://schemas.System.com/idfx/requesttype/issueCard。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Renew">
      <summary>表示 WS 信任续订请求协议不可知的 URI 的字符串常数；http://schemas.System.com/idfx/requesttype/renew。</summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Validate">
      <summary>表示 WS 信任验证请求协议不可知的 URI 的字符串常数；http://schemas.System.com/idfx/requesttype/validate。</summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Status">
      <summary>表示 WS-Trust 验证请求的结果。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Status.#ctor(System.String,System.String)">
      <summary>用指定的状态代码和原因初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Status" /> 类的新实例。</summary>
      <param name="code">一个包含该状态代码 URI 的字符串。</param>
      <param name="reason">包含可读的原因的字符串。 原因是可选的；可以是 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Status.Code">
      <summary>获取或设置 RSTR 中的 WS-Trust 验证绑定的状态代码。</summary>
      <returns>一个包含该状态代码 URI 的字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Status.Reason">
      <summary>获取或设置 RSTR 中的 WS-Trust 验证绑定的可选状态原因。</summary>
      <returns>返回一个字符串，其中包含原因。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.UseKey">
      <summary>表示 wst:UseKeywst 元素的内容。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的安全密钥标识符初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 类的新实例。</summary>
      <param name="ski">
        <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 表示应使用的现有密匙。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用指定的安全密钥标识符和所有者安全令牌类型初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 类的新实例。</summary>
      <param name="ski">
        <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 表示应使用的现有密匙。</param>
      <param name="token">
        <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示应使用的现有密匙。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用指定的安全标记初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 类的新实例。</summary>
      <param name="token">
        <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示应使用的现有密匙。</param>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.UseKey.SecurityKeyIdentifier">
      <summary>获取安全密钥标识符。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示安全密钥标识符。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.UseKey.Token">
      <summary>如果序列化程序不能将其转换为安全密钥标识符，获取安全标记。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示标记。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer">
      <summary>用于序列化和反序列化 WS 信任 1.3 RequestSecurityToken (RST) 消息的类。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>检查是否将给定读取器放置在命名空间为“http://docs.oasis-open.org/ws-sx/ws-trust/200512”的 RequestSecurityToken 元素处。</summary>
      <returns>如果读取器通过命名空间“http://docs.oasis-open.org/ws-sx/ws-trust/200512”放置于 RequestSecurityToken 元素，则为 true；否则为 false。</returns>
      <param name="reader">要从中读取的 <see cref="T:System.Xml.XmlReader" />对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadSecondaryParameters(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在 WS 信任 1.3 RST 内读取 SecondaryParameters 的特殊情况。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />，包含在 RST 中找到的 SecondaryParameters。</returns>
      <param name="reader">指向 RST 内的 SecondaryParameters 元素的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">在处理外部 SecondaryParameter 元素时，找到内部 SecondaryParameter 元素。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>从 <see cref="T:System.Xml.XmlReader" /> 对象到 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象反序列化 RST。</summary>
      <returns>如果序列化成功，则为 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</returns>
      <param name="reader">RST 的一个 XML 读取器。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">分析 RST 时出现错误。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>读取 RST 内的子元素。 对基类方法的重写。</summary>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 对象置于 RST 内读取的一个元素的位置。</param>
      <param name="rst">从读取器填充的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="rst" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">无法对当前参数执行反序列化。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象上将受支持的元素写入流。</summary>
      <param name="rst">正序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象序列化为 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="request">待序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将指定的 RST 参数写入输出流。 对基类方法的重写。</summary>
      <param name="writer">RST 应被序列化的 <see cref="T:System.Xml.XmlWriter" /> 对象.</param>
      <param name="elementName">要编写的元素的本地名称。</param>
      <param name="elementValue">元素的值。</param>
      <param name="rst">将要反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer">
      <summary>用于序列化和反序列化 WS 信任 1.3 RequestSecurityTokenResponse (RSTR) 消息的类。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>检查该指定的 XML 读取器是否通过命名空间放置于 RequestSecurityTokenResponse 元素或 RequestSecurityTokenResponseCollection 元素“http://docs.oasis-open.org/ws-sx/ws-trust/200512”。</summary>
      <returns>如果读取器通过命名空间“http://docs.oasis-open.org/ws-sx/ws-trust/200512”放置于 RequestSecurityTokenResponse 或 RequestSecurityTokenResponseCollection 元素，则为 true；否则为 false。</returns>
      <param name="reader">要从中读取的 <see cref="T:System.Xml.XmlReader" />对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>从 <see cref="T:System.Xml.XmlReader" /> 对象到 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象反序列化 RSTR。</summary>
      <returns>如果序列化成功，则为 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</returns>
      <param name="reader">XML 读取器上的 RSTR。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>读取 RSTR 内的特定子元素。</summary>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 对象置于 RSTR 内读取的一个元素的位置。</param>
      <param name="rstr">从读取器填充的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 元素。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="rstr" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">无法对当前参数执行反序列化。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象上将受支持的元素写入输出流。</summary>
      <param name="rstr">要序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rstr" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象序列化为 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="response">要序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将指定的 RSTR 元素写入该输出流。 对基类方法的重写。</summary>
      <param name="writer">RSTR应被序列化的 <see cref="T:System.Xml.XmlWriter" /> 对象.</param>
      <param name="elementName">要编写的元素的本地名称。</param>
      <param name="elementValue">元素的值。</param>
      <param name="rstr">将要反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rstr" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">elementName 为 null 或为空字符串。</exception>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer">
      <summary>用于序列化和反序列化 WS 信任 Feb 2005 RequestSecurityToken (RST) 消息的类。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>检查给定读取器是否通过命名空间放置于 RequestSecurityTokenResponse 元素“http://schemas.xmlsoap.org/ws/2005/02/trust”。</summary>
      <returns>如果读取器通过命名空间“http://schemas.xmlsoap.org/ws/2005/02/trust”放置于 RequestSecurityToken 元素，则为 true；否则为 false。</returns>
      <param name="reader">要从中读取的 <see cref="T:System.Xml.XmlReader" />对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>从 <see cref="T:System.Xml.XmlReader" /> 对象到 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象反序列化 RST。</summary>
      <returns>如果序列化成功，则为 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</returns>
      <param name="reader">RST 的一个 XML 读取器。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">分析 RST 时出现错误。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>读取 RST 内的子元素。 对基类方法的重写。</summary>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 对象置于 RST 内读取的一个元素的位置。</param>
      <param name="rst">从读取器填充的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="rst" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">无法对当前参数执行反序列化。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象上将受支持的元素写入流。</summary>
      <param name="rst">正序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象序列化为 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="request">待序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将指定的 RST 参数写入输出流。 对基类方法的重写。</summary>
      <param name="writer">RST 应被序列化的 <see cref="T:System.Xml.XmlWriter" /> 对象.</param>
      <param name="elementName">要编写的元素的本地名称。</param>
      <param name="elementValue">元素的值。</param>
      <param name="rst">将要反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rst" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer">
      <summary>用于序列化和反序列化 WS 信任 Feb 2005 RequestSecurityTokenResponse (RSTR) 消息的类。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>检查该指定的 XML 读取器是否通过命名空间放置于 RequestSecurityTokenResponse 元素“http://schemas.xmlsoap.org/ws/2005/02/trust”。</summary>
      <returns>如果读取器通过命名空间“http://schemas.xmlsoap.org/ws/2005/02/trust”放置于 RequestSecurityTokenResponse 元素，则为 true；否则为 false。</returns>
      <param name="reader">要从中读取的 <see cref="T:System.Xml.XmlReader" />对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>从 <see cref="T:System.Xml.XmlReader" /> 对象到 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象反序列化 RSTR。</summary>
      <returns>如果序列化成功，则为 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</returns>
      <param name="reader">XML 读取器上的 RSTR。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>重写在 RSTR 内读取指定子元素的基类。</summary>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 对象置于 RSTR 内读取的一个元素的位置。</param>
      <param name="rstr">从读取器填充的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 元素。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="rstr" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">无法对当前参数执行反序列化。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象上将受支持的元素写入输出流。</summary>
      <param name="rstr">要序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rstr" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象序列化为 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="response">要序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将指定的 RSTR 元素写入该输出流。 对基类方法的重写。</summary>
      <param name="writer">RSTR应被序列化的 <see cref="T:System.Xml.XmlWriter" /> 对象.</param>
      <param name="elementName">要编写的元素的本地名称。</param>
      <param name="elementValue">元素的值。</param>
      <param name="rstr">将要反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rstr" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。 - 或 - <paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">elementName 为 null 或为空字符串。</exception>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage">
      <summary>RST 和 RSTR 的基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AllowPostdating">
      <summary>获取或设置 wst:AllowPostdating 元素的内容。</summary>
      <returns>如果返回的标记应允许填迟标记的请求，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo">
      <summary>获取或设置 wsp:AppliesTo 元素的内容。</summary>
      <returns>表示所需的安全标志的终结点地址的 <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AuthenticationType">
      <summary>获取或设置 wst:AuthenticationType 元素的内容。</summary>
      <returns>一个字符串，它所包含的 URI 显示所希望的认证类型。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.BinaryExchange">
      <summary>获取或设置 wst:BinaryExchange 元素的内容。</summary>
      <returns>包含进行交换的二进制数据的 <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" />。 这包括 ValueType 的内容和 EncodingType 属性和实际数据。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.CanonicalizationAlgorithm">
      <summary>获取或设置 wst:CanonicalizationAlgorithm 元素的内容。</summary>
      <returns>包含指示规范化算法的 URI 字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Context">
      <summary>获取或设置 RST 或 RSTR 上 Context 属性的内容。</summary>
      <returns>包含标识请求的上下文或响应消息的 URI 字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.EncryptionAlgorithm">
      <summary>获取或设置 wst:EncryptionAlgorithm 元素的内容。</summary>
      <returns>包含指示加密算法的 URI 字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.EncryptWith">
      <summary>获取或设置 wst:EncryptWith 元素的内容。</summary>
      <returns>包含指示与发布的安全标识一起使用的所需的加密算法的 URI 字符串。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将此属性设置为 null 或者空字符串。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Entropy">
      <summary>获取或设置 wst:Entropy 元素的内容。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" />，表示平均信息量元素的内容。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeySizeInBits">
      <summary>获取或设置 RequestSecurityToken (RST) 消息内的 wst:KeySize 元素的内容。</summary>
      <returns>密钥的大小（以位为单位）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">尝试将设置一个小于或等于零的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType">
      <summary>获取或设置 RequestSecurityToken (RST) 消息内的 wst:KeyType 元素的内容。</summary>
      <returns>一个包含 URI 的字符串，该 URI 标识所需的密钥类型。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyWrapAlgorithm">
      <summary>获取或设置 wst:KeyWrapAlgorithm 元素的内容。</summary>
      <returns>字符串包含标识 Key Wrap 算法的 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Lifetime">
      <summary>获取或设置 RequestSecurityToken (RST) 消息内的 wst:Lifetime 元素的内容。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> 表示返回的标识有效期间所需的时间。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo">
      <summary>获取或设置用于依赖依赖方的地址。</summary>
      <returns>包含地址的字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType">
      <summary>获取或设置 wst:RequestType 元素。</summary>
      <returns>包含指示请求类型的 URI 字符串；例如，在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestTypes" /> 类中定义的常数中的一个。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.SignatureAlgorithm">
      <summary>获取或设置 wst:SignatureAlgorithm 元素的内容。</summary>
      <returns>包含指示签名算法的 URI 字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.SignWith">
      <summary>获取或设置 wst:SignWith 元素的内容。</summary>
      <returns>包含标识所需的签名算法的 URI 字符串。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将此值设置为 null 或者空字符串。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType">
      <summary>获取或设置 wst:TokenType 元素的内容。</summary>
      <returns>包含指示标记类型的 URI 字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.UseKey">
      <summary>获取或设置wst:UseKey 元素的内容。</summary>
      <returns>一个包含键的 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer">
      <summary>定义用于序列化和反序列化 WS-Trust 请求 (RST) 消息的版本的抽象基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>当在派生类中重写时，如果指定的 XML 读取器定位在 ws-discovery 信任 RequestSecurityToken 元素上，则将进行检查。</summary>
      <returns>如果读取器放置在序列化程序可以读取的 RST 元素，则为 true；否则为 false。</returns>
      <param name="reader">要从中读取的 <see cref="T:System.Xml.XmlReader" />对象。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.CreateRequestSecurityToken">
      <summary>创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 类的实例，该类能将其序列化或反序列化。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadCustomElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在派生的类中重写时，读取自定义元素。</summary>
      <param name="reader">定位当前元素的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在派生类中重写时，对从 <see cref="T:System.Xml.XmlReader" /> 对象到 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象的 RST 进行反序列化。</summary>
      <returns>如果序列化成功，则为 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</returns>
      <param name="reader">RST 的 XML 读取器。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>当在派生类中重写时，将阅读 RST 内的子元素。</summary>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 对象置于 RST 内读取的一个元素的位置。</param>
      <param name="requestSecurityToken">从读取器填充的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>验证已被反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</summary>
      <param name="requestSecurityToken">要验证的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestSecurityToken" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">非对称密钥的 WS 信任发布请求未指定 UseKey 元素。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在派生类中重写时，将在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象上受支持的元素写入到该流。</summary>
      <param name="requestSecurityToken">正序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>当在派生类中重写时，将指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象序列化到 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="request">待序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>当在派生类中重写时，将在 RST 内部写入子元素。</summary>
      <param name="writer">RST 应被序列化的 <see cref="T:System.Xml.XmlWriter" /> 对象.</param>
      <param name="elementName">要编写的元素的本地名称。</param>
      <param name="elementValue">元素的值。</param>
      <param name="requestSecurityToken">将要反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer">
      <summary>定义用于序列化和反序列化 WS-Trust 响应 (RSTR) 消息的版本的抽象基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>当在派生类中重写时，如果指定的 XML 读取器定位在 WS 信任 RequestSecurityTokenResponse 元素中，则进行检查。</summary>
      <returns>如果读取器放置在此序列化程序可以读取的 RSTR 元素，则为 true；否则为 false。</returns>
      <param name="reader">要从中读取的 <see cref="T:System.Xml.XmlReader" />对象。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.CreateInstance">
      <summary>创建 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 类的实例，该类能将其序列化或反序列化。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在派生类中重写时，对从 <see cref="T:System.Xml.XmlReader" /> 对象到 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象的 RSTR 进行反序列化。</summary>
      <returns>如果序列化成功，则为 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</returns>
      <param name="reader">XML 读取器上的 RSTR。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>当在派生类中重写时，将阅读 RSTR 内的子元素。</summary>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 对象置于 RSTR 内读取的一个元素的位置。</param>
      <param name="requestSecurityTokenResponse">从读取器填充的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 元素。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>验证已被反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</summary>
      <param name="requestSecurityTokenResponse">要验证的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestSecurityTokenResponse" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>在派生类中重写时，将在 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象上受支持的元素写入到传出流。</summary>
      <param name="requestSecurityTokenResponse">要序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>当在派生类中重写时，将指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象序列化到 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="response">要序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>当在派生类中重写时，将在 RSTR 内写入子元素。</summary>
      <param name="writer">RSTR应被序列化的 <see cref="T:System.Xml.XmlWriter" /> 对象.</param>
      <param name="elementName">要编写的元素的本地名称。</param>
      <param name="elementValue">元素的值。</param>
      <param name="requestSecurityTokenResponse">将要反序列化的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" />，包含当前的序列化上下文。</param>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext">
      <summary>定义 WS-Trust 消息的序列化上下文。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager)">
      <summary>用指定的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 类的新实例。</summary>
      <param name="securityTokenHandlerCollectionManager">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 对象包含用来序列化和验证在 WS-Trust 信息中找到的令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityTokenHandlerCollectionManager" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象、<see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 和 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 类的新实例。</summary>
      <param name="securityTokenHandlerCollectionManager">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 对象包含用来序列化和验证在 WS-Trust 信息中找到的令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象集。</param>
      <param name="securityTokenResolver">用来解析在大部分 WS-Trust 消息的元素中找到的安全令牌引用的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。</param>
      <param name="useKeyTokenResolver">用来解析在 RST 消息中的 wst:UseKey 元素和 wst:RenewTarget 元素 安全令牌引用的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityTokenHandlerCollectionManager" /> 为 null。 - 或 - <paramref name="securityTokenResolver" /> 为 null。 - 或 - <paramref name="useKeyTokenResolver" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.SecurityTokenHandlerCollectionManager">
      <summary>获取 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 对象包含用来序列化和验证在 WS-Trust 消息中找到的标记的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象集。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.SecurityTokenHandlers">
      <summary>获取或设置用于序列化和验证 WS-Trust 消息中发现的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 对象。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.TokenResolver">
      <summary>获取或设置用于解析 WS 信任消息的大多数元素中发现的安全令牌引用的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。</returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.UseKeyTokenResolver">
      <summary>获取或设置用于解析 RST 消息的 wst:UseKey 元素中发现的安全令牌引用以及 RST 消息中发现的 wst:RenewTarget 元素的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。</returns>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
      <summary>当序列化或反序列化一个 WS-Trust 消息过程中发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> 的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的 <see cref="T:System.Exception" />。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.AudienceUriMode">
      <summary>指定是否应验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />。</summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.Always">
      <summary>总是。</summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.BearerKeyOnly">
      <summary>只有在安全令牌的密钥类型为 BearerKey 并且安全令牌中没有所有权证明密钥时。</summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.Never">
      <summary>从不。</summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.AudienceUriModeValidationHelper">
      <summary>
        <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 类的一个帮助器类，用于验证是否将 <see cref="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AudienceUriMode" /> 属性设置为有效值。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.AudienceUriModeValidationHelper.IsDefined(System.IdentityModel.Selectors.AudienceUriMode)">
      <summary>获取一个值，该值指示指定 <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" /> 的值是否有效。</summary>
      <returns>如果 <paramref name="validationMode" /> 为 <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Always" />、<see cref="F:System.IdentityModel.Selectors.AudienceUriMode.BearerKeyOnly" /> 或 <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Never" />，则为 true；否则为 false。</returns>
      <param name="validationMode">要验证其有效性的 <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" />。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator">
      <summary>使用自定义身份验证方案对 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.UserNamePasswordValidator)">
      <summary>使用指定的验证程序来初始化 <see cref="T:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <param name="validator">一个 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />，它使用自定义身份验证方案对用户名和密码进行身份验证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>对指定的用户名和密码进行身份验证，并返回 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="userName">与安全令牌相关联的用户名。</param>
      <param name="password">与安全令牌相关联的密码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userName" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
        <paramref name="userName" /> 和 <paramref name="password" /> 的组合无效。</exception>
    </member>
    <member name="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator">
      <summary>对 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 安全令牌进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>通过指定是否在对 Windows 用户进行身份验证时获取该用户所属的组，初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <param name="includeWindowsGroups">如果获取 Windows 用户所属的组，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示此安全令牌身份验证器是否可以验证指定的安全令牌。</summary>
      <returns>如果 <paramref name="token" /> 为 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 安全令牌，则为 true；否则为 false。</returns>
      <param name="token">要进行身份验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider">
      <summary>表示为 SOAP 消息发送方提供 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的安全令牌提供程序。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String)">
      <summary>使用指定的服务主体名称初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 类的新实例。</summary>
      <param name="servicePrincipalName">要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel)">
      <summary>通过使用指定的服务主体名称以及有关客户端是否允许 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方模拟客户端的凭据的信息，初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 类的新实例。</summary>
      <param name="servicePrincipalName">要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</param>
      <param name="tokenImpersonationLevel">一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tokenImpersonationLevel" /> 不是 Identification 或 Impersonation。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel,System.Net.NetworkCredential)">
      <summary>通过使用指定的服务主体名称、客户端标识以及有关客户端是否允许 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方模拟客户端的凭据的信息，初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 类的新实例。</summary>
      <param name="servicePrincipalName">要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</param>
      <param name="tokenImpersonationLevel">一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端进程执行操作。</param>
      <param name="networkCredential">一个 <see cref="T:System.Net.NetworkCredential" />，它表示 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 的标识。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tokenImpersonationLevel" /> 不是 Identification 或 Impersonation。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌。</summary>
      <returns>表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.NetworkCredential">
      <summary>获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的标识。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkCredential" />，它表示 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 的标识。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.ServicePrincipalName">
      <summary>获取要获取的 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</summary>
      <returns>要获取的 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.TokenImpersonationLevel">
      <summary>获取一个值，该值指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。</summary>
      <returns>一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator">
      <summary>对 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 安全令牌进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示指定的安全令牌是否可由该安全令牌身份验证器进行验证。</summary>
      <returns>如果 <paramref name="token" /> 为 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 安全令牌，则为 true；否则为 false。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator">
      <summary>对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.#ctor(System.Collections.Generic.IList{System.IdentityModel.Selectors.SecurityTokenAuthenticator})">
      <summary>使用指定的身份验证器集初始化 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <param name="supportingAuthenticators">
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> 的一个 <see cref="T:System.Collections.Generic.IList`1" />，它包含对颁发者的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 安全令牌进行身份验证的身份验证器。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.#ctor(System.Collections.Generic.IList{System.IdentityModel.Selectors.SecurityTokenAuthenticator},System.TimeSpan)">
      <summary>使用指定的身份验证器集以及发送方和接收方时钟之间允许的最大偏差来初始化 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <param name="supportingAuthenticators">
        <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> 的一个 <see cref="T:System.Collections.Generic.IList`1" />，它包含对颁发者的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 安全令牌进行身份验证的身份验证器。</param>
      <param name="maxClockSkew">一个 <see cref="T:System.TimeSpan" />，表示发送方和接收方时钟之间允许的最大偏差。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AllowedAudienceUris">
      <summary>获取 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的目标 URI 集，只有在使用这些目标 URI 时，此 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例才会将该令牌视为有效令牌。</summary>
      <returns>一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，它包含 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的目标 URI 集，只有在使用这些目标 URI 时，此安全令牌身份验证器才会将该令牌视为有效令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AudienceUriMode">
      <summary>获取或设置一个 <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" />，它指定是否应验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" />，指定是否应验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示此安全令牌身份验证器是否可以验证指定的安全令牌。</summary>
      <returns>如果 <paramref name="token" /> 为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌，则为 true；否则为 false。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveClaimSet(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用在创建 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例时提供的支持安全身份验证器解析与指定密钥标识符关联的标识，并将其作为 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 返回。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示指定的密钥标识符的标识。</returns>
      <param name="keyIdentifier">一个要获取其标识的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveClaimSet(System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用在创建 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例时提供的支持令牌身份验证器解析与指定安全令牌关联的标识，并将其作为 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 返回。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示指定的安全令牌的标识。</returns>
      <param name="token">一个要获取其标识的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveIdentity(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用在创建 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例时提供的支持安全令牌身份验证器解析与指定密钥标识符关联的标识，并将其作为 <see cref="T:System.Security.Principal.IIdentity" /> 返回。</summary>
      <returns>一个 <see cref="T:System.Security.Principal.IIdentity" />，表示指定的密钥标识符的标识。</returns>
      <param name="keyIdentifier">一个要获取其标识的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveIdentity(System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用在创建 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例时提供的支持安全令牌身份验证器解析与指定安全令牌关联的标识，并将其作为 <see cref="T:System.Security.Principal.IIdentity" /> 返回。</summary>
      <returns>一个 <see cref="T:System.Security.Principal.IIdentity" />，表示指定的安全令牌的标识。</returns>
      <param name="token">一个要获取其标识的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ValidateAudienceRestriction(System.IdentityModel.Tokens.SamlAudienceRestrictionCondition)">
      <summary>验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌是否针对此 Web 服务。</summary>
      <returns>如果 <paramref name="audienceRestrictionCondition" /> 参数的 <see cref="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.Audiences" /> 属性位于 <see cref="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AllowedAudienceUris" /> 集合中，则为 true，否则为 false。</returns>
      <param name="audienceRestrictionCondition">一个 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />，指定 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌针对的目标 Web 服务集。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含安全令牌身份验证产生的授权策略集。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator">
      <summary>对安全令牌进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示指定的安全令牌是否可由该安全令牌身份验证器进行验证。</summary>
      <returns>如果可以验证令牌，则为 true；否则为 false。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>在派生类中重写时，获取一个值，指示此安全令牌身份验证器是否可以验证指定的安全令牌。</summary>
      <returns>如果可以验证 <paramref name="token" />，则为 true；否则为 false。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">此安全令牌身份验证器无法对 <paramref name="token" /> 进行身份验证 - 或 - <paramref name="token" /> 未通过身份验证。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>在派生类中重写时，对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenManager">
      <summary>表示安全令牌管理器，它指定如何提供、验证以及序列化安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <summary>获取符合指定安全令牌要求的安全令牌身份验证器。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" />，对传入 SOAP 消息中符合指定要求的安全令牌进行身份验证。</returns>
      <param name="tokenRequirement">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />，指定安全令牌要求。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，确定符合指定安全令牌要求的安全令牌。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>获取符合指定安全令牌要求的安全令牌提供程序。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider" />，为传出 SOAP 消息提供符合指定要求的安全令牌。</returns>
      <param name="tokenRequirement">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />，指定安全令牌要求。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)">
      <summary>获取 XML 序列化程序，它可以按指定的 WS-* 规范版本序列化安全令牌。</summary>
      <returns>一个用于序列化安全令牌的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />。</returns>
      <param name="version">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" />，指定安全令牌所遵循的 WS-* 规范版本。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenProvider">
      <summary>表示为 SOAP 消息发送方处理安全令牌的安全令牌提供程序。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以取消安全令牌。</summary>
      <returns>引用异步取消操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为取消安全令牌的消息指定超时值。</param>
      <param name="token">要取消的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以取消安全令牌。</summary>
      <returns>引用异步取消操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为取消安全令牌的消息指定超时值。</param>
      <param name="token">要取消的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetToken(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以获取安全令牌。</summary>
      <returns>引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetTokenCore(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以获取安全令牌。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以续订安全令牌。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为续订安全令牌的消息指定超时值。</param>
      <param name="tokenToBeRenewed">要续订的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以续订安全令牌。</summary>
      <returns>引用异步操作的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为续订安全令牌的消息指定超时值。</param>
      <param name="tokenToBeRenewed">要续订的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <param name="callback">接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.CancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>取消安全令牌。</summary>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为取消安全令牌的消息指定超时值。</param>
      <param name="token">要取消的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.CancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>取消安全令牌。</summary>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为取消安全令牌的消息指定超时值。</param>
      <param name="token">要取消的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndCancelToken(System.IAsyncResult)">
      <summary>完成异步操作以取消安全令牌。</summary>
      <param name="result">由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndCancelTokenCore(System.IAsyncResult)">
      <summary>完成异步操作以取消安全令牌。</summary>
      <param name="result">由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndGetToken(System.IAsyncResult)">
      <summary>完成异步操作以获取安全令牌。</summary>
      <returns>表示安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetToken(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndGetTokenCore(System.IAsyncResult)">
      <summary>完成异步操作以获取安全令牌。</summary>
      <returns>表示安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetTokenCore(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndRenewToken(System.IAsyncResult)">
      <summary>完成异步操作以续订安全令牌。</summary>
      <returns>表示所续订的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndRenewTokenCore(System.IAsyncResult)">
      <summary>完成异步操作以续订安全令牌。</summary>
      <returns>表示所续订的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="result">由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.GetToken(System.TimeSpan)">
      <summary>获取安全令牌。</summary>
      <returns>表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>获取安全令牌。</summary>
      <returns>表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.RenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>续订安全令牌。</summary>
      <returns>表示所续订的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为续订安全令牌的消息指定超时值。</param>
      <param name="tokenToBeRenewed">要续订的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.RenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>续订安全令牌。</summary>
      <returns>表示所续订的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为续订安全令牌的消息指定超时值。</param>
      <param name="tokenToBeRenewed">要续订的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SupportsTokenCancellation">
      <summary>获取一个值，该值指示是否可以取消安全令牌。</summary>
      <returns>如果可以取消安全令牌，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SupportsTokenRenewal">
      <summary>获取一个值，该值指示是否可以续订安全令牌。</summary>
      <returns>如果可以续订安全令牌，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult">
      <summary>封装对委托的异步操作的结果。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.#ctor(System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>创建 <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult" /> 的一个新实例。</summary>
      <param name="token">利用其初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult" /> 的安全令牌</param>
      <param name="callback">要在异步操作完成时调用的回调方法。</param>
      <param name="state">作为异步方法调用的最后一个参数提供的对象。</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.AsyncState">
      <summary>获取作为异步方法调用的最后一个参数传递的对象。</summary>
      <returns>返回 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.AsyncWaitHandle">
      <summary>获取封装 Win32 同步句柄的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>返回 <see cref="T:System.Threading.WaitHandle" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.CompletedSynchronously">
      <summary>如果异步调用已完成，则返回 true；否则，返回 false。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.End(System.IAsyncResult)">
      <summary>使用指定的结果完成异步操作。</summary>
      <returns>返回 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="result">异步操作的结果。</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.IsCompleted">
      <summary>如果异步调用已完成，则返回 true；否则，返回 false。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenRequirement">
      <summary>指定安全令牌要求。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty``1(System.String)">
      <summary>获取当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 实例的指定属性。</summary>
      <returns>要获取的属性的值。</returns>
      <param name="propertyName">要获取的属性的名称。</param>
      <typeparam name="TValue">要获取的属性的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty">
      <summary>如果标记属性为可选属性，获取其值。</summary>
      <returns>标记属性的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize">
      <summary>获取或设置与安全令牌相关联的密钥的要求大小。</summary>
      <returns>与安全令牌相关联的密钥的大小（以位为单位）。 默认值为 0。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> 属性被设置为一个小于 0 的值。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty">
      <summary>获取一个值，该值指定 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</summary>
      <returns>
        <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType">
      <summary>获取或设置与安全令牌相关联的密钥的类型（非对称或对称）。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyType" />，它指定了与安全令牌相关联的密钥的类型（非对称或对称）。 默认值为 SymmetricKey。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty">
      <summary>获取一个值，该值指定 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</summary>
      <returns>
        <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage">
      <summary>获取或设置一个值，该值指定与安全令牌相关联的密钥的使用方式。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyUsage" />，它指定与安全令牌相关联的密钥的使用方式。 默认值为 <see cref="F:System.IdentityModel.Tokens.SecurityKeyUsage.Signature" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty">
      <summary>获取一个值，该值指定 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</summary>
      <returns>
        <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode">
      <summary>获取用于指定对等身份验证方法的属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</summary>
      <returns>用于指定对等身份验证方法的属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties">
      <summary>获取当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 实例的非静态属性的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" />，它包含当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 实例的非静态属性的集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken">
      <summary>获取或设置一个值，该值指示安全令牌是否必须能够执行加密操作（例如加密）。</summary>
      <returns>如果安全令牌必须能够执行加密操作，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty">
      <summary>获取 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</summary>
      <returns>
        <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType">
      <summary>获取或设置要求的安全令牌类型。</summary>
      <returns>要求的安全令牌类型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty">
      <summary>获取一个值，该值指定 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</summary>
      <returns>
        <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty``1(System.String,``0@)">
      <summary>获取当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 实例的指定属性。</summary>
      <returns>如果 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性包含在 <paramref name="propertyName" /> 属性中指定的属性的属性值，则为 true；否则为 false。</returns>
      <param name="propertyName">要获取的属性的名称。</param>
      <param name="result">
        <paramref name="propertyName" /> 属性中指定的属性的值。</param>
      <typeparam name="TValue">要在 <paramref name="result" /> 参数中返回的属性的类型。</typeparam>
      <exception cref="T:System.ArgumentException">属性具有 <paramref name="propertyName" /> 参数中指定的名称，但其类型与 <paramref name="TValue" /> 参数中指定的类型不同。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenResolver">
      <summary>表示一个实用工具类，该类可以在您具有密钥标识符或密钥标识符子句时检索安全令牌或密钥。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)">
      <summary>为指定的安全令牌创建默认安全令牌解析程序。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它解析与 <paramref name="tokens" /> 参数中指定的安全令牌相匹配的密钥标识符和子句。</returns>
      <param name="tokens">一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含此安全令牌解析程序可以将密钥标识符和密钥标识符子句解析到其中的安全令牌集。</param>
      <param name="canMatchLocalId">如果对所引用的安全密钥位于 SOAP 消息中其他某个位置的 &lt;SecurityTokenReference&gt; 密钥标识符子句进行解析，则为 true；否则，为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
      <param name="nodelist">自定义配置元素。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>获取在指定的密钥标识符子句中引用的密钥。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它是指定的密钥标识符子句中引用的密钥。</returns>
      <param name="keyIdentifierClause">要为其检索密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法为 <paramref name="keyIdentifierClause" /> 参数中指定的密钥标识符子句检索密钥。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>检索与指定的密钥标识符中包含的安全密钥标识符子句之一相匹配的安全令牌。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符。</returns>
      <param name="keyIdentifier">要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法为指定的密钥标识符创建安全令牌。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>检索与指定的密钥标识符子句相匹配的安全令牌。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符子句。</returns>
      <param name="keyIdentifierClause">要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>尝试检索在指定的密钥标识符子句中引用的密钥。</summary>
      <returns>如果可以为指定的密钥标识符子句检索密钥，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要为其检索密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <param name="key">当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，其中包含在指定的密钥标识符子句中引用的密钥。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>尝试检索在指定的密钥标识符子句中引用的密钥。</summary>
      <returns>如果可以为指定的密钥标识符子句检索密钥，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要为其检索密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <param name="key">当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，其中包含在指定的密钥标识符子句中引用的密钥。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>尝试检索与指定的密钥标识符中包含的密钥标识符子句之一相匹配的安全令牌。</summary>
      <returns>如果可以为指定的密钥标识符检索安全令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <param name="token">当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>尝试检索与指定的密钥标识符子句相匹配的安全令牌。</summary>
      <returns>如果可以为指定的密钥标识符子句检索安全令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <param name="token">当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符子句。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>当在派生类中重写时，尝试检索至少与指定的密钥标识符中包含的密钥标识符子句之一相匹配的安全令牌。</summary>
      <returns>如果可以为指定的密钥标识符检索安全令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <param name="token">当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>当在派生类中重写时，尝试解析与指定的密钥标识符子句相匹配的安全令牌。</summary>
      <returns>如果可以为指定的密钥标识符子句检索安全令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <param name="token">当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符子句。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenSerializer">
      <summary>表示一个类，它可以读写密钥标识符、密钥标识符子句和安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifier(System.Xml.XmlReader)">
      <summary>确定此序列化程序是否可读取由指定的 XML 读取器引用的 &lt;KeyIdentifier&gt; 元素。</summary>
      <returns>如果可以读取指定的 &lt;KeyIdentifier&gt; XML 元素，则为 true；否则为 false。</returns>
      <param name="reader">读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>确定此序列化程序是否可读取由指定的 XML 读取器引用的 &lt;KeyIdentifier&gt; 元素中的子句。</summary>
      <returns>如果可以读取指定的密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="reader">读取密钥标识符子句的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>确定此序列化程序是否可读取由指定的 XML 读取器引用的 &lt;KeyIdentifier&gt; 元素。 供基类调用。</summary>
      <returns>如果可以读取指定的 &lt;KeyIdentifier&gt; 元素，则为 true；否则为 false。</returns>
      <param name="reader">读取密钥标识符子句的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>确定此序列化程序是否可读取由指定的 XML 读取器引用的 &lt;KeyIdentifier&gt; 元素。 供基类调用。</summary>
      <returns>如果可以读取指定的密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="reader">读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadToken(System.Xml.XmlReader)">
      <summary>确定此序列化程序是否可读取由指定的 XML 读取器指向的安全令牌。</summary>
      <returns>如果可以读取安全令牌，则为 true；否则为 false。</returns>
      <param name="reader">读取安全令牌的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadTokenCore(System.Xml.XmlReader)">
      <summary>确定此序列化程序是否可读取由指定的 XML 读取器指向的安全令牌。 供基类调用。</summary>
      <returns>如果可以读取安全令牌，则为 true；否则为 false。</returns>
      <param name="reader">读取安全令牌的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifier(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>确定此序列化程序是否可以编写指定的密钥标识符。</summary>
      <returns>如果此序列化程序可以编写指定的密钥标识符，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">表示要编写的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>确定此序列化程序是否可以编写指定的密钥标识符子句。</summary>
      <returns>如果此序列化程序可以编写指定的密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">表示要编写的密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierClauseCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>确定此序列化程序是否可以编写指定的密钥标识符子句。 供基类调用。</summary>
      <returns>如果此序列化程序可以编写指定的密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">表示要编写的密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierCore(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>确定此序列化程序是否可以编写指定的密钥标识符。 供基类调用。</summary>
      <returns>如果此序列化程序可以编写指定的密钥标识符，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">表示要编写的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>确定此序列化程序是否可以将指定的安全令牌编写为 XML。</summary>
      <returns>如果可以编写安全令牌，则为 true；否则为 false。</returns>
      <param name="token">要转换为 XML 的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>确定此序列化程序是否可以将指定的安全令牌编写为 XML。 供基类调用。</summary>
      <returns>如果可以编写安全令牌，则为 true；否则为 false。</returns>
      <param name="token">要转换为 XML 的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifier(System.Xml.XmlReader)">
      <summary>使用指定的 XML 读取器读取密钥标识符。</summary>
      <returns>表示所读取的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</returns>
      <param name="reader">读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>使用指定的 XML 读取器读取密钥标识符子句。</summary>
      <returns>表示所读取的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</returns>
      <param name="reader">读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>使用指定的 XML 读取器读取密钥标识符子句。 供基类调用。</summary>
      <returns>表示所读取的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</returns>
      <param name="reader">读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>使用指定的 XML 读取器读取密钥标识符子句。 供基类调用。</summary>
      <returns>表示所读取的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</returns>
      <param name="reader">读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>读取由指定的 XML 读取器指向的安全令牌。</summary>
      <returns>表示所读取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="reader">读取安全令牌的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="tokenResolver">确定安全令牌类型的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="tokenResolver" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadTokenCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>读取由指定的 XML 读取器指向的安全令牌。 供基类调用。</summary>
      <returns>表示所读取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="reader">读取安全令牌的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="tokenResolver">确定安全令牌类型的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="tokenResolver" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifier(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 XML 编写器编写指定的密钥标识符。</summary>
      <param name="writer">编写密钥标识符的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="keyIdentifier">表示要编写的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>使用指定的 XML 编写器编写指定的密钥标识符子句。</summary>
      <param name="writer">编写密钥标识符子句的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="keyIdentifierClause">表示要编写的密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>使用指定的 XML 编写器编写指定的密钥标识符子句。 供基类调用。</summary>
      <param name="writer">编写密钥标识符子句的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="keyIdentifierClause">表示要编写的密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 XML 编写器编写指定的密钥标识符。 供基类调用。</summary>
      <param name="writer">编写密钥标识符的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="keyIdentifier">表示要编写的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用指定的 XML 编写器编写指定的安全令牌。</summary>
      <param name="writer">编写安全令牌的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="token">表示要编写的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteTokenCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用指定的 XML 编写器编写指定的安全令牌。 供基类调用。</summary>
      <param name="writer">编写安全令牌的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="token">表示要编写的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenVersion">
      <summary>表示在其中定义安全令牌的规范，例如 WS-* 规范。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenVersion.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenVersion.GetSecuritySpecifications">
      <summary>获取受支持的安全规范的集合。</summary>
      <returns>一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含受支持的安全规范集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNamePasswordValidator">
      <summary>验证用户名和密码。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.CreateMembershipProviderValidator(System.Web.Security.MembershipProvider)">
      <summary>获取 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> 的实例，它使用指定的成员资格提供程序来验证用户名和密码。</summary>
      <returns>一个使用 <paramref name="provider" /> 来验证用户名和密码的 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />。</returns>
      <param name="provider">一个验证用户名和密码的 <see cref="T:System.Web.Security.MembershipProvider" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.UserNamePasswordValidator.None">
      <summary>获取不对用户名和密码执行验证的验证程序。 因此，用户名和密码总是被视为有效。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />，它不对用户名和密码执行验证。</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate(System.String,System.String)">
      <summary>当在派生类中重写时，验证指定的用户名和密码。</summary>
      <param name="userName">要验证的用户名。</param>
      <param name="password">要验证的密码。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator">
      <summary>对 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示指定的安全令牌是否可由该安全令牌身份验证器进行验证。</summary>
      <returns>如果 <paramref name="token" /> 为 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌，则为 true；否则为 false。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>如果在派生类中重写，则对指定的用户名和密码进行身份验证，并且返回 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="userName">与安全令牌相关联的用户名。</param>
      <param name="password">与安全令牌相关联的密码。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNameSecurityTokenProvider">
      <summary>表示为 SOAP 消息发送方提供 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的安全令牌提供程序。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenProvider.#ctor(System.String,System.String)">
      <summary>使用指定的用户名和密码初始化 <see cref="T:System.IdentityModel.Selectors.UserNameSecurityTokenProvider" /> 类的新实例。</summary>
      <param name="userName">要为其获取 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的用户的用户名。</param>
      <param name="password">要为其获取 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的用户的密码。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>根据构造函数中指定的用户名和密码获取安全令牌。</summary>
      <returns>表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator">
      <summary>使用 Windows 身份验证对 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 安全令牌进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>通过指定是否在对 Windows 用户进行身份验证时将该用户所属的组添加到 <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" /> 属性，初始化 <see cref="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <param name="includeWindowsGroups">如果获取 Windows 用户所属的组，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示指定的安全令牌是否可由该安全令牌身份验证器进行验证。</summary>
      <returns>如果 <paramref name="token" /> 为 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 安全令牌，则为 true；否则为 false。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator">
      <summary>使用 Windows 身份验证对 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌中的用户名和密码进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>通过指定在对用户进行身份验证时，是否起初将标识用户所属 Windows 组的声明添加到 <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" /> 属性，以此来初始化 <see cref="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator" /> 类的新实例。</summary>
      <param name="includeWindowsGroups">如果获取 Windows 用户所属的组，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>对指定的用户名和密码进行身份验证，并返回 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="userName">与安全令牌相关联的用户名。</param>
      <param name="password">与安全令牌相关联的密码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="userName" /> 包含多个反斜杠 (\) 字符。</exception>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509CertificateValidator">
      <summary>验证 X.509 证书。</summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.ChainTrust">
      <summary>获取使用信任链来验证 X.509 证书的验证程序。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它使用信任链来验证 X.509 证书。</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.CreateChainTrustValidator(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>获取一个验证程序，它通过指定用于构建和验证信任链的上下文和链策略来验证 X.509 证书。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它使用信任链来验证 X.509 证书。</returns>
      <param name="useMachineContext">如果为 true，则使用计算机上下文；如果为 false，则使用当前用户上下文。</param>
      <param name="chainPolicy">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" />，它指定用于构建和验证信任链的策略。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.CreatePeerOrChainTrustValidator(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>获取一个验证程序，它验证证书是否位于 TrustedPeople 证书存储区中，或通过指定用于构建证书信任链的上下文和链策略来验证证书。 如果证书通过任一验证方法，就是受信任的。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它通过验证证书是否位于 TrustedPeople 证书存储区中来验证证书，或通过构建证书信任链来验证证书。</returns>
      <param name="useMachineContext">如果为 true，则使用计算机上下文；如果为 false，则使用当前用户上下文。</param>
      <param name="chainPolicy">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" />，它指定用于构建信任链的策略。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
      <param name="nodelist">自定义配置元素。</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.None">
      <summary>获取不对 X.509 证书执行验证的验证程序。 因此，X.509 证书总是被视为有效。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它不对 X.509 证书执行验证。</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.PeerOrChainTrust">
      <summary>获取一个验证程序，它通过验证证书是否位于 TrustedPeople 证书存储区中来验证证书，或通过构建证书信任链来验证证书。 如果证书通过任一验证方法，就是受信任的。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它通过验证证书是否位于 TrustedPeople 证书存储区中来验证证书，或通过构建证书信任链来验证证书。</returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.PeerTrust">
      <summary>获取一个验证程序，它验证证书是否位于 TrustedPeople 证书存储区中。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它验证证书是否位于 TrustedPeople 证书存储区中。</returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>当在派生类中重写时，验证 X.509 证书。</summary>
      <param name="certificate">表示要验证的 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator">
      <summary>对 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>使用指定的证书验证程序初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> 类的新实例。</summary>
      <param name="validator">一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，用于验证证书是否有效。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator,System.Boolean)">
      <summary>使用指定的证书验证方法初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> 类的新实例，并指示是否将证书标识映射到 Windows 标识。</summary>
      <param name="validator">一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，用于验证证书是否有效。</param>
      <param name="mapToWindows">若要将证书标识映射到 Windows 标识，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator,System.Boolean,System.Boolean)">
      <summary>使用指定的证书验证方法初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> 类的新实例，并指示是否将证书标识映射到 Windows 标识以及用户所属的 Windows 组。</summary>
      <param name="validator">一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，用于验证证书是否有效。</param>
      <param name="mapToWindows">若要将证书标识映射到 Windows 标识，则为 true；否则为 false。</param>
      <param name="includeWindowsGroups">若要在整个身份验证过程中将 Windows 用户所属的组包括在构造的 <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" /> 属性中，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>获取一个值，该值指示此安全令牌身份验证器是否可以验证指定的安全令牌。</summary>
      <returns>如果 <paramref name="token" /> 是 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌或从 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 中派生的类，则为 true；否则为 false。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.MapCertificateToWindowsAccount">
      <summary>获取一个值，该值指示是否将 X.509 证书映射到 Windows 帐户。</summary>
      <returns>若要将 X.509 证书映射到 Windows 帐户，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含对此应用程序生效的授权策略集。</returns>
      <param name="token">要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509SecurityTokenProvider">
      <summary>表示为 SOAP 消息发送方提供 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌的安全令牌提供程序。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>通过从指定的证书存储条件中获取 X.509 证书来初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" /> 类的新实例。</summary>
      <param name="storeLocation">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值之一，该值指定了证书存储位置。</param>
      <param name="storeName">
        <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 值之一，该值指定了证书存储名称。</param>
      <param name="findType">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" /> 值之一，该值指定了如何搜索证书存储区。</param>
      <param name="findValue">用于在证书存储区中查找 X.509 证书的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="findValue" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">没有与指定的条件匹配的证书。 - 或 - 有多个证书与指定的条件匹配。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" /> 类的新实例。</summary>
      <param name="certificate">要为其获取安全令牌的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509SecurityTokenProvider.Certificate">
      <summary>获取与 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌相关联的 X.509 证书。</summary>
      <returns>获取用于表示安全令牌的 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.Dispose">
      <summary>释放由 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" /> 使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>使用构造函数中指定的 X.509 证书获取安全令牌。</summary>
      <returns>表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.AggregateTokenResolver">
      <summary>表示安全标记解析程序，其可包装多个标记解析程序，并解析所有包装的解析程序的标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Selectors.SecurityTokenResolver})">
      <summary>使用指定的标记列表来初始化 <see cref="T:System.IdentityModel.Tokens.AggregateTokenResolver" /> 类的新实例。</summary>
      <param name="tokenResolvers">此实例包装的安全标记解析器列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenResolvers" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.AggregateTokenResolver.TokenResolvers">
      <summary>获取实例包装的安全标记解析器。</summary>
      <returns>包含标记的解析器由此实例包装的只读集合。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>尝试检索在指定的密钥标识符子句中引用的密钥。</summary>
      <returns>如果可以为指定的密钥标识符子句检索密钥，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">检索其键的密钥标识符子句。</param>
      <param name="key">当此方法返回时，包含在指定的密钥标识符子句中引用的密钥。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>尝试检索这个安全令牌，即与指定的密钥标识符中包含的至少一个密钥标识符相匹配的安全令牌。</summary>
      <returns>如果可以为指定的密钥标识符检索令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">为安全密钥标识符检索令牌。</param>
      <param name="token">当此方法返回时，包含一个标记，它表示指定的密钥标识符子句。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>尝试解析与指定的密钥标识符子句相匹配的安全令牌。</summary>
      <returns>如果可以为指定的密钥标识符子句检索安全令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">为其创建安全标记的密钥标识符子句。</param>
      <param name="token">当此方法返回时，包含一个安全令牌，它表示指定的密钥标识符子句。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor">
      <summary>这种可用于发布基于标记的非对称密钥。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>根据密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> 类的一个新实例。</summary>
      <param name="keyIdentifier">用于构造验证令牌的密钥标识符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor(System.Security.Cryptography.RSA)">
      <summary>基于 RSA 算法初始化 <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> 类的新实例。</summary>
      <param name="rsaAlgorithm">构造证明令牌的 RSA 算法。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>将属性说明符应用于 RSTR 请求的证明令牌。</summary>
      <param name="response">要应用该描述符到的 RSTR。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.AsymmetricProofDescriptor.KeyIdentifier">
      <summary>获取请求者从使用键中提供的键标识符。 如果需要，它可以在 SAML 标记内回送。</summary>
      <returns>请求者从使用密钥提供的密钥标识符。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.AsymmetricSecurityKey">
      <summary>非对称密钥的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>在派生类中重写时，获取指定的非对称加密算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />，表示指定的非对称加密算法。 通常将 true 传递到 <paramref name="privateKey" /> 参数中，因为解密通常需要使用私钥。</returns>
      <param name="algorithm">要创建的非对称算法。</param>
      <param name="privateKey">如果需要使用私钥来创建算法，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>在派生类中重写时，获取一个用于生成数字签名的哈希值的加密算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.HashAlgorithm" />，它生成数字签名的哈希值。</returns>
      <param name="algorithm">哈希算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>在派生类中重写时，获取数字签名的反格式化程序算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的反格式化程序算法。</returns>
      <param name="algorithm">数字签名的反格式化程序算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
      <summary>在派生类中重写时，获取数字签名的格式化程序算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />，它表示数字签名的格式化程序算法。</returns>
      <param name="algorithm">数字签名的格式化程序算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey">
      <summary>在派生类中重写时，获取一个值，指示私钥是否可用。</summary>
      <returns>如果私钥可用，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.AudienceRestriction">
      <summary>定义设置 AudienceRestriction 验证。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceRestriction.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceRestriction.#ctor(System.IdentityModel.Selectors.AudienceUriMode)">
      <summary>用指定的模式初始化 <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" /> 类的新实例。</summary>
      <param name="audienceMode">用于指定应用受众 URI 限制方式的枚举值之一。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.AudienceRestriction.AllowedAudienceUris">
      <summary>获取允许的观众 URIs 列表。</summary>
      <returns>允许的观众 URIs 列表。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AudienceRestriction.AudienceMode">
      <summary>获取或设置将在其中应用受众 URI 限制的模式。</summary>
      <returns>用于指定应用受众 URI 限制方式的枚举值之一。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException">
      <summary>当一个传入安全标识 Audience URI 验证失败引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含在序列化和反序列化过程中使用的值。</param>
      <param name="context">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" />，它包含有关序列化流的源和目标的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <param name="inner">一个 <see cref="T:System.Exception" />，表示异常的根源。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.AuthenticationContext">
      <summary>此类用于指定身份验证事件的上下文。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AuthenticationContext.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.AuthenticationContext" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.Authorities">
      <summary>获取用于解析身份验证事件的颁发机构的集合。</summary>
      <returns>要用于解析身份验证事件的授权的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.ContextClass">
      <summary>获取或设置用于解析身份验证事件的上下文类。</summary>
      <returns>要用于解析身份验证事件的上下文类。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.ContextDeclaration">
      <summary>获取或设置用于解析身份验证事件的上下文声明。</summary>
      <returns>要用于解析身份验证事件的上下文声明。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.AuthenticationMethods">
      <summary>定义支持的显着的身份验证方法的常数。 定义用于 SAML 身份验证方法的常数。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.HardwareToken">
      <summary>使用硬件标志的身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/hardwaretoken。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Kerberos">
      <summary>使用 Kerberos 协议进行身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/kerberos。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Namespace">
      <summary>熟知授权方法的命名空间， http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Password">
      <summary>使用密码的身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/password。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Pgp">
      <summary>通过使用由一个信任 PGP web 验证身份的密匙进行身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/pgp。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.SecureRemotePassword">
      <summary>使用安全远程密码协议进行身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/secureremotepassword。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Signature">
      <summary>使用 XML 数字签名进行身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/signature。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Smartcard">
      <summary>使用智能卡的身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcard。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.SmartcardPki">
      <summary>使用智能卡 PKI 的身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcardpki。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Spki">
      <summary>使用 SPKI PKI 验证密匙上的身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/spki。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.TlsClient">
      <summary>使用基于证书的客户端身份验证的 SSL 或 TLS 协议进行身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/tlsclient。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Unspecified">
      <summary>使用未指定的方法进行身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/unspecified。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Windows">
      <summary>Windows 身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/windows。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.X509">
      <summary>使用 X.509 PKI 验证密匙上的身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/x509。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Xkms">
      <summary>使用 XKMS 信任服务验证密匙上的身份验证，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/xkms。</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause">
      <summary>表示基于二进制数据的密钥标识符子句的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>使用指定的密钥标识符子句类型、二进制数据以及一个指示是否必须克隆二进制数据的值来初始化 <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="clauseType">密钥标识符子句类型。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> 属性的值。</param>
      <param name="identificationData">一个 <see cref="T:System.Byte" /> 数组，包含表示密钥标识符的二进制数据。</param>
      <param name="cloneBuffer">如果要克隆传入 <paramref name="identificationData" /> 参数的数组，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identificationData" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="identificationData" /> 长度为零。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Boolean,System.Byte[],System.Int32)">
      <summary>使用指定的密钥标识符子句类型、二进制数据、一个指示是否必须克隆二进制数据的值、一个 Nonce 和密钥长度来初始化 <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="clauseType">密钥标识符子句类型。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> 属性的值。</param>
      <param name="identificationData">一个 <see cref="T:System.Byte" /> 数组，包含表示密钥标识符的二进制数据。 设置 <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> 方法所返回的二进制数据。</param>
      <param name="cloneBuffer">如果要克隆传入 <paramref name="identificationData" /> 参数的数组，则为 true；否则为 false。</param>
      <param name="derivationNonce">一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。</param>
      <param name="derivationLength">派生密钥的大小。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identificationData" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="identificationData" /> 长度为零。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer">
      <summary>获取表示密钥标识符的二进制数据。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，包含表示密钥标识符的二进制数据。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetRawBuffer">
      <summary>获取表示密钥标识符的二进制数据。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，包含表示密钥标识符的二进制数据。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.Byte[])">
      <summary>返回一个值，该值指示当前实例的二进制数据是否与指定的二进制数据相匹配。</summary>
      <returns>如果 <paramref name="data " />等效于 <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> 方法所返回的二进制数据，则为 true；否则为 false。</returns>
      <param name="data">要进行比较的 <see cref="T:System.Byte" /> 数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.Byte[],System.Int32)">
      <summary>返回一个值，该值指示当前实例的二进制数据是否与指定偏移处的指定二进制数据等效。</summary>
      <returns>如果从 <paramref name="offset" /> 参数中指定的索引处开始，<paramref name="data " />参数中的二进制数据与 <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> 方法（从索引零开始）所返回的二进制数据等效，则为 true；否则为 false。</returns>
      <param name="data">要进行比较的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="offset">数组中的索引，从此处开始比较。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> 类型并且 <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> 方法所返回的二进制数据对于 <paramref name="keyIdentifierClause" /> 参数和当前实例是相同的，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.BootstrapContext">
      <summary>包含在登录时使用的原始标记的一个序列化版本。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.Byte[])">
      <summary>使用指定的数组初始化 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 类的新实例。</summary>
      <param name="token">一个表示令牌的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>使用指定安全标记标记处理程序初始化 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 类的新实例。</summary>
      <param name="token">要序列化的安全标记。</param>
      <param name="tokenHandler">用于序列化标识处理程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。 - 或 - <paramref name="tokenHandler" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从流中初始化 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 类的新实例。</summary>
      <param name="info">序列化的数据。</param>
      <param name="context">序列化的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 类的新实例。</summary>
      <param name="token">一个表示标记的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化当前<see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 对象所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要填充数据的对象。</param>
      <param name="context">此序列化的目标。 可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.SecurityToken">
      <summary>获取用于初始化上下文的安全标记。</summary>
      <returns>安全令牌或 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.SecurityTokenHandler">
      <summary>获取用于初始化上下文的标记处理程序。</summary>
      <returns>标记处理程序或 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.Token">
      <summary>获取用于初始化上下文的字符串。</summary>
      <returns>用于初始化上下文的字符串或为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.TokenBytes">
      <summary>获取用于初始化上下文的数组。</summary>
      <returns>用于初始化上下文或 null 的数组。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.ComputedKeyAlgorithms">
      <summary>用于 RST，以指示使用其根据来自标记请求者和标记发布者的熵计算密钥的预期算法。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.ComputedKeyAlgorithms.Psha1">
      <summary>P-SHA1 哈希算法；http://schemas.microsoft.com/idfx/computedkeyalgorithm/psha1 的 URI。</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry">
      <summary>表示颁发者名称注册想，其维护一系列可信颁发者，它们加载子应用程序配置文件中的元素，该文件将每个颁发者名称与 X.509 证书关联，该证书为验证颁发者生成的签名所需。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.AddTrustedIssuer(System.String,System.String)">
      <summary>添加一个颁发者到信任发行人字典。</summary>
      <param name="certificateThumbprint">发行人的证书指纹的 ASN.1 已编码形式。</param>
      <param name="name">颁发者的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificateThumbprint" /> 为 null 或为空。 - 或 - <paramref name="name" /> 为 null 或为空。</exception>
      <exception cref="T:System.InvalidOperationException">已经配置了由 <paramref name="certificateThumbprint" /> 指定的颁布者。（发布者已存在于<see cref="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers" /> 字典中。）</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers">
      <summary>获取为当前实例配置的可信颁发者的字典。</summary>
      <returns>包含信任发行人的字典。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
      <summary>返回与指定的 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 相关的发行人名称，通过映射证书指纹到已信任的发行人字典中的名称。</summary>
      <returns>如果在 <see cref="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers" /> 目录中存在令牌的证书指纹的入口为颁布者名称；否则为  null。</returns>
      <param name="securityToken">颁布者姓名被请求的安全令牌。 应可分配为 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityToken" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>加载配置的可信颁发者。</summary>
      <param name="customConfiguration">XML 表示信任发行人的映射将在指定的配置文件中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfiguration" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">配置包含未识别的一个或多个元素。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause">
      <summary>表示空间值标识符子句。 当 &lt;EncryptedData&gt; 或 &lt;Signature&gt; 元素不包含一个 &lt;KeyInfo&gt; 元素时，使用此类，用于描述被要求解密数据或检查署名的密钥。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.#ctor(System.Object)">
      <summary>使用指定的上下文初始化 <see cref="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="context">用于提供提示，当需要解析为 null 的项到将特定密钥。 在 SAML11 和 SAML2 有不含 &lt;KeyInfo&gt; 元素的署名，此物产将包含当前已处理的断言。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.Context">
      <summary>当需要解析为特定密钥时，获取提供提示的对象。</summary>
      <returns>当需要解析为特定密钥时，提供提示的对象。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials">
      <summary>表示凭据加密的加密密钥。 它们通常用于像标记在数据加密的凭据加密。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.IdentityModel.Tokens.EncryptingCredentials,System.Int32,System.String)">
      <summary>根据指定的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 的对象、密钥大小和加密算法来初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> 类的新实例。</summary>
      <param name="wrappingCredentials">用于加密会话密钥的密钥包装凭据。</param>
      <param name="keySizeInBits">包装会话密钥的密钥大小。</param>
      <param name="encryptionAlgorithm">表示使用会话密钥时加密算法的 URI。 这应该是一种对称密钥算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappingCredentials" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> 类的新实例。</summary>
      <param name="certificate">用于加密密钥的证书。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Int32,System.String)">
      <summary>使用指定的 X.509 证书、包装算法、密钥大小和加密算法初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> 类的新实例。</summary>
      <param name="certificate">用于加密密钥的证书。</param>
      <param name="keyWrappingAlgorithm">一个表示密钥包装算法的 URI。 这应该是一种非对称算法。</param>
      <param name="keySizeInBits">包装会话密钥的密钥大小。</param>
      <param name="encryptionAlgorithm">表示使用会话密钥时加密算法的 URI。 这应该是一种对称密钥算法。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials">
      <summary>获取用于加密会话密钥的密钥包装凭据；例如， <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" />。</summary>
      <returns>表示用于加密会话密钥密钥凭据的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause">
      <summary>表示标识加密密钥的密钥标识符子句。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String)">
      <summary>使用指定的加密密钥和用于加密密钥的加密算法初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="encryptedKey">包含加密密钥的 <see cref="T:System.Byte" /> 数组。 设置 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法所返回的值。</param>
      <param name="encryptionMethod">用于加密密钥的加密算法。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptionMethod" /> 为 null。 - 或 - <paramref name="encryptedKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encryptedKey" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的加密密钥、用于加密密钥的加密算法和加密密钥的密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="encryptedKey">包含加密密钥的 <see cref="T:System.Byte" /> 数组。 设置 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法所返回的值。</param>
      <param name="encryptionMethod">用于加密密钥的加密算法。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性的值。</param>
      <param name="encryptingKeyIdentifier">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示 <paramref name="encryptedKey" /> 参数中指定的加密密钥的密钥标识符。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptionMethod" /> 为 null。 - 或 - <paramref name="encryptedKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encryptedKey" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>使用指定的加密密钥、用于加密密钥的加密算法、加密密钥的密钥标识符和用户可读名称初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="encryptedKey">包含加密密钥的 <see cref="T:System.Byte" /> 数组。 设置 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法所返回的值。</param>
      <param name="encryptionMethod">用于加密密钥的加密算法。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性的值。</param>
      <param name="encryptingKeyIdentifier">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示 <paramref name="encryptedKey" /> 参数中指定的加密密钥的密钥标识符。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> 属性的值。</param>
      <param name="carriedKeyName">与 <paramref name="encryptedKey" /> 参数中指定的密钥相关联的用户可读名称。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptionMethod" /> 为 null。 - 或 - <paramref name="encryptedKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encryptedKey" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.Byte[],System.Int32)">
      <summary>使用指定的加密密钥、用于加密密钥的加密算法、密钥的密钥标识符和用户可读名称初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="encryptedKey">包含加密密钥的 <see cref="T:System.Byte" /> 数组。 设置 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法所返回的值。</param>
      <param name="encryptionMethod">用于加密密钥的加密算法。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性的值。</param>
      <param name="encryptingKeyIdentifier">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示 <paramref name="encryptedKey" /> 参数中指定的密钥的密钥标识符。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> 属性的值。</param>
      <param name="carriedKeyName">与 <paramref name="encryptedKey" /> 参数中指定的密钥相关联的用户可读名称。 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> 属性的值。</param>
      <param name="derivationNonce">一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。</param>
      <param name="derivationLength">派生密钥的大小。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptionMethod" /> 为 null。 - 或 - <paramref name="encryptedKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encryptedKey" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName">
      <summary>获取与加密密钥相关联的用户可读名称。</summary>
      <returns>与加密密钥相关联的用户可读名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier">
      <summary>获取加密密钥的密钥标识符。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示加密密钥的密钥标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod">
      <summary>获取用于加密密钥的加密算法。</summary>
      <returns>用于加密密钥的加密算法。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey">
      <summary>获取加密密钥。</summary>
      <returns>包含加密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.Byte[],System.String,System.String)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的加密密钥、加密方法和用户可读名称相同。</summary>
      <returns>如果 <paramref name="encryptedKey" />、<paramref name="encryptionMethod" /> 和 <paramref name="carriedKeyName" /> 参数分别具有 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法以及 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 和 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> 属性所返回的值，则为 true；否则为 false。</returns>
      <param name="encryptedKey">包含加密密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="encryptionMethod">用于加密密钥的加密算法。</param>
      <param name="carriedKeyName">与加密密钥相关联的用户可读名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 的类型为 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" />，并且具有与当前实例相同的加密密钥、加密方法和用户可读名称，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>当前对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedSecurityToken">
      <summary>处理标志的加密在本质上不支持它的包装象征。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.#ctor(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>用指定的加密凭据，为指定的加密凭据初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" /> 类的新实例。</summary>
      <param name="token">要加密的标记。</param>
      <param name="encryptingCredentials">要用于加密标记的凭据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示令牌是否可以创建指定类型的密钥标识符子句。</summary>
      <returns>如果该令牌可以创建指定类型的密钥标识符子句类型，则为 true；否则为 false。</returns>
      <typeparam name="T">密钥标识符子句的类型。</typeparam>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.CreateKeyIdentifierClause``1">
      <summary>为这个令牌创建指定类型的密钥标识符子句。</summary>
      <returns>指定类型的密钥标识符字句。</returns>
      <typeparam name="T">要创建的密钥标识符子句的类型。</typeparam>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.EncryptingCredentials">
      <summary>获取用于加密的凭据。</summary>
      <returns>要用于加密的凭据。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符能否解析为指定的密钥标识符。</summary>
      <returns>如果指定的密匙标识符子句可由该事例解析，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要与此实例进行比较的密钥标识符子句。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>为指定的密钥标识符子句获取密钥。</summary>
      <returns>键。</returns>
      <param name="keyIdentifierClause">获取其键的密钥标识符子句。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>与安全令牌相关联的一组键。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Token">
      <summary>获取加密标记。</summary>
      <returns>加密令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.ValidFrom">
      <summary>获取安全令牌有效的最初时刻。</summary>
      <returns>此安全令牌有效的某一时刻。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.ValidTo">
      <summary>获取安全令牌有效的最后时刻。</summary>
      <returns>安全标记有效的最后时刻。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler">
      <summary>加密的安全标志的标志处理程序。 处理类型 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" /> 的标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>返回一个值，该值指示当前 XML 元素是否指向可通过此实例反序列化为 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 元素的 &lt;xenc:EncryptedKey&gt; 元素。</summary>
      <returns>如果按照 XML 加密语法和处理规范（http://www.w3.org/TR/2002/REC-xmlenc-core-20021210）的第3.5.1节的定义在 &lt;xenc:EncryptedKey&gt; 元素定位 XML 读取器，则为 true，否则为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能将读取器前移。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>返回一个值，该值指示读取器是否指向 &lt;xenc:EncryptedData&gt; 元素。</summary>
      <returns>如果在一 &lt;xenc:EncryptedData&gt; 元素中定位了该读取器，则为 true；否则为 false。</returns>
      <param name="reader">定位到安全标记 （&lt;xenc:EncryptedData&gt; 元素）的读取器。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken">
      <summary>获取指示处理程序是否提供标记的序列化功能的值。</summary>
      <returns>如果处理程序现在可以序列化标记，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>获取当前实例处理的标记的类型标识符 URI。</summary>
      <returns>默认情况下，返回有单个 null 字符串的数组，因为没有与 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" /> 类型关联的一个指定标记类型的标识符。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer">
      <summary>获取或设置将用于从 &lt;xenc:EncryptedData&gt; 元素序列化和反序列化密钥标识符的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />。</summary>
      <returns>要用于读取和写入密钥密钥标识符的标记的标记序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>从 XML 流中读取 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" />。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类型的密钥标识符子句。</returns>
      <param name="reader">如 'http://www.w3.org/TR/2002/REC-xmlenc-core-20021210' 定义，一个 XML 阅读器位于 &lt;xenc:EncryptedKey&gt; 元素处；否则，为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="reader" /> 不放置在 &lt;xenc:EncryptedKey&gt; 元素上。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>读取一个加密的安全标记。</summary>
      <returns>该安全令牌的类型为 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />。</returns>
      <param name="reader">从中读取标记的读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未配置的服务标记解析器。所引用的该标记处理配置的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性或 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> 属性为 null。 请求服务标记的解析器获取解密的密钥。 - 或 - 通过 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" /> 属性引用的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" />无法找到一个能读取已解密的 XML 并返回一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">在 XML 中未找到由读取器指向的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。 - 或 - <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 不是一个  <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />。</exception>
      <exception cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException">在 XML 中找到的<see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 不能被配置服务令牌解析器解析为一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType">
      <summary>获取当前实例处理的标记的类型。</summary>
      <returns>当前实例处理的标记的类型。 默认的 typeof 为 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用 XML 写入器写入加密的安全标记。</summary>
      <param name="writer">用于写入加密令牌的 XML 编写器。</param>
      <param name="token">加密的安全标识，必须是 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 不可作为 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。 此属性为获取加密密钥所必需的。 - 或 - 标记处理程序收集 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" /> 属性返回未能发现可以编写 <see cref="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Token" /> 属性返回的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <see cref="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey" /> 属性不是作为可赋值的  <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException">
      <summary>处理加密安全标记发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含在序列化和反序列化过程中使用的值。</param>
      <param name="context">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" />，它包含有关序列化流的源和目标的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <param name="inner">一个 <see cref="T:System.Exception" />，表示异常的根源。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptingCredentials">
      <summary>表示用于加密校验密钥的加密密钥和加密算法。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptingCredentials.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptingCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>使用指定的加密密钥、密钥标识符和加密算法来初始化 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 类的新实例。</summary>
      <param name="key">
        <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 包含用于加密的密钥。</param>
      <param name="keyIdentifier">
        <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 指定表示用于加密的密匙标识符。</param>
      <param name="algorithm">表示用于加密的加密算法的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。 - 或 - <paramref name="keyIdentifier" /> 为 null。 - 或 - <paramref name="algorithm" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.Algorithm">
      <summary>获取或设置加密算法。</summary>
      <returns>一个 URI，表示用于加密校验密钥的加密算法。</returns>
      <exception cref="T:System.ArgumentException">试图将属性设置为 null 或空字符串。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey">
      <summary>获取或设置加密密钥材料。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它包含用于加密校验密钥的加密密钥 。</returns>
      <exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKeyIdentifier">
      <summary>获取或设置标识加密凭据的标识符。</summary>
      <returns>标识用于校验密钥的密匙的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</returns>
      <exception cref="T:System.ArgumentNullException">已尝试将该属性设置为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause">
      <summary>表示基于 XML 的密钥标识符子句。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.#ctor(System.Xml.XmlElement)">
      <summary>使用指定的 XML 元素初始化 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="referenceXml">表示密钥标识符子句的 XML 元素。 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceXML" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.#ctor(System.Xml.XmlElement,System.Byte[],System.Int32)">
      <summary>使用指定的 XML 元素和派生长度来初始化 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="referenceXml">表示密钥标识符子句的 XML 元素。 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml" /> 属性的值。</param>
      <param name="derivationNonce">一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。</param>
      <param name="derivationLength">派生密钥的大小。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceXML" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示指定的密钥标识符子句是否与当前实例相匹配。</summary>
      <returns>如果指定的密钥标识符子句与当前实例相匹配，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要与当前实例比较的密钥标识符子句。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml">
      <summary>获取表示密钥标识符子句的 XML 元素。</summary>
      <returns>表示密钥标识符子句的 XML 元素。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.GenericXmlSecurityToken">
      <summary>表示基于 XML 的安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.#ctor(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityToken,System.DateTime,System.DateTime,System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" /> 类的新实例。</summary>
      <param name="tokenXml">一个 <see cref="T:System.Xml.XmlElement" />，表示与安全令牌相关联的 XML。 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.TokenXml" /> 属性。</param>
      <param name="proofToken">一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示安全令牌的证明令牌。 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ProofToken" /> 属性。</param>
      <param name="effectiveTime">一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> 属性。</param>
      <param name="expirationTime">一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> 属性。</param>
      <param name="internalTokenReference">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全令牌包含在引用它的 SOAP 消息内时对此安全令牌的引用。 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> 属性。</param>
      <param name="externalTokenReference">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全令牌未包含在引用它的 SOAP 消息内时对此安全令牌的引用。 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> 属性。</param>
      <param name="authorizationPolicies">一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含此安全令牌的授权策略集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenXml" /> 为 null。 - 或 - <paramref name="proofToken" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.AuthorizationPolicies">
      <summary>获取此安全令牌的授权策略集合。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含此安全令牌的授权策略集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示此安全令牌能否创建指定的密钥标识符子句。</summary>
      <returns>如果 <paramref name="T" /> 不为 null，并且与 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> 或 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" /> 属性值的类型相同，则为 true；否则为 false。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定的密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />，它是 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" /> 安全令牌的密钥标识符子句。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="T" /> 不为 null，并且与 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> 或 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" /> 属性值不是同一类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference">
      <summary>获取当此安全令牌未包含在引用它的 SOAP 消息内时引用此安全令牌的安全密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全令牌未包含在引用它的 SOAP 消息内时对此安全令牌的引用。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference">
      <summary>获取当此安全令牌包含在引用它的 SOAP 消息内时引用此安全令牌的安全密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全令牌包含在引用它的 SOAP 消息内时对此安全令牌的引用。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等于指定的密钥标识符。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 不为 null，并且与 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> 或 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" /> 属性值匹配，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">一个要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ProofToken">
      <summary>获取安全令牌的证明令牌。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示安全令牌的证明令牌。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.SecurityKeys">
      <summary>获取与证明令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与证明令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.TokenXml">
      <summary>获取与安全令牌相关联的 XML。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlElement" />，表示与安全令牌相关联的 XML。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.ToString">
      <summary>返回当前对象。</summary>
      <returns>当前对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey">
      <summary>表示使用对称算法生成、并仅存储在本地计算机的随机存取内存中的密钥。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])">
      <summary>使用指定的对称密钥初始化 <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> 类的新实例。</summary>
      <param name="symmetricKey">包含对称密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="symmetricKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="symmetricKey" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)">
      <summary>使用指定的对称密钥和一个指示是否必须克隆二进制数据的值来初始化 <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> 类的新实例。</summary>
      <param name="symmetricKey">包含对称密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="cloneBuffer">如果要克隆传入 <paramref name="symmetricKey" /> 参数的数组，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="symmetricKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="symmetricKey" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>对指定的加密密钥进行解密。</summary>
      <returns>包含解密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">用于对密钥进行加密的加密算法。</param>
      <param name="keyData">包含加密密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <exception cref="T:System.InvalidOperationException">不支持 <paramref name="algorithm" />。 支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>加密指定的密钥。</summary>
      <returns>包含加密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">用于对密钥进行加密的加密算法。</param>
      <param name="keyData">包含密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <exception cref="T:System.InvalidOperationException">不支持 <paramref name="algorithm" />。 受支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
      <summary>使用指定的加密算法和当前密钥的参数生成派生密钥。</summary>
      <returns>包含派生密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">一个 URI，表示用于生成派生密钥的加密算法。</param>
      <param name="label">一个 <see cref="T:System.Byte" /> 数组，它包含加密算法的标签参数。</param>
      <param name="nonce">一个 <see cref="T:System.Byte" /> 数组，它包含用于创建派生密钥的 Nonce。</param>
      <param name="derivedKeyLength">派生密钥的大小。</param>
      <param name="offset">派生密钥在从此方法返回的字节数组中的位置。</param>
      <exception cref="T:System.InvalidOperationException">不支持 <paramref name="algorithm" />。 受支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
      <summary>获取一种使用指定的加密算法对密码文本进行解密的转换。</summary>
      <returns>一个表示解密转换的 <see cref="T:System.Security.Cryptography.ICryptoTransform" />。</returns>
      <param name="algorithm">一种对密码文本（例如加密的 XML）进行解密的加密算法。</param>
      <param name="iv">一个 <see cref="T:System.Byte" /> 数组，它包含指定算法的初始化向量 (IV)。</param>
      <exception cref="T:System.InvalidOperationException">不支持 <paramref name="algorithm" />。 支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
      <summary>获取一种使用指定的加密算法对 XML 进行加密的转换。</summary>
      <returns>一个表示加密转换的 <see cref="T:System.Security.Cryptography.ICryptoTransform" />。</returns>
      <param name="algorithm">一个对 XML 进行加密的加密算法。</param>
      <param name="iv">一个 <see cref="T:System.Byte" /> 数组，它包含指定算法的初始化向量 (IV)。</param>
      <exception cref="T:System.InvalidOperationException">不支持 <paramref name="algorithm" />。 支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)">
      <summary>获取指定加密算法所需的初始化向量 (IV) 的大小（以位为单位）。</summary>
      <returns>
        <paramref name="algorithm" /> 参数中指定的加密算法所需的初始化向量 (IV) 的大小（以位为单位）。</returns>
      <param name="algorithm">用于获取初始化向量 (IV) 的大小的加密算法。</param>
      <exception cref="T:System.InvalidOperationException">不支持 <paramref name="algorithm" />。 支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
      <summary>获取指定的加密哈希算法的实例。</summary>
      <returns>一个表示加密哈希算法的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />。</returns>
      <param name="algorithm">要获取其实例的加密哈希算法。</param>
      <exception cref="T:System.InvalidOperationException">不支持 <paramref name="algorithm" />。 受支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
      <summary>获取指定对称算法的实例。</summary>
      <returns>一个表示对称算法的 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />。</returns>
      <param name="algorithm">要获取其实例的对称算法。</param>
      <exception cref="T:System.InvalidOperationException">不支持 <paramref name="algorithm" />。 受支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey">
      <summary>获取表示对称密钥的字节。</summary>
      <returns>包含对称密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>获取一个值，该值指示指定的算法是否使用非对称密钥。</summary>
      <returns>如果指定的算法使用非对称密钥，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>获取一个值，该值指示此类是否支持指定的算法。</summary>
      <returns>如果此类支持指定的算法，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>获取一个值，该值指示指定的算法是否使用对称密钥。</summary>
      <returns>如果指定的算法使用对称密钥，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize">
      <summary>获取密钥的大小（以位为单位）。</summary>
      <returns>密钥的大小（以位为单位）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.IssuerNameRegistry">
      <summary>发布者名称注册表的抽象基类。 发行人名称注册表用于加密材料的关联助记名称，需要验证由相应发行人生成的标志签名。 颁布者名称注册表维护了一个受依赖一方 （RP） 应用程序信赖的颁布者列表。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
      <summary>当在派生类中重写时，返回指定安全令牌的颁发者名称。</summary>
      <returns>发行人名称。</returns>
      <param name="securityToken">返回颁布者名称的安全令牌。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken,System.String)">
      <summary>当在派生类中重写时，返回指定安全令牌的颁发者名称。 在确定要返回的颁布者名称中要考虑的指定的颁布者名称。</summary>
      <returns>发行人名称。</returns>
      <param name="securityToken">返回颁布者名称的安全令牌。</param>
      <param name="requestedIssuerName">要考虑请求的发行人名称。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName">
      <summary>返回用于 Windows 声明的默认颁发者名称。</summary>
      <returns>Windows 声明的默认颁发者名称。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
      <param name="nodelist">配置 XML 元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.IssuerTokenResolver">
      <summary>解决从服务合作伙伴里接收的颁发者标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.#ctor(System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的标记解析器初始化 <see cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" /> 类的新实例。</summary>
      <param name="wrappedTokenResolver">由此实例包装的安全令牌解析器。 在新实例中设置 <see cref="P:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver" /> 属性。</param>
    </member>
    <member name="F:System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation">
      <summary>用于解析 X.509 证书的默认存储区位置。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName">
      <summary>用于解析 X.509 证书的默认存储区。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>尝试检索在指定的密钥标识符子句中引用的密钥。（对基类方法的重写。）</summary>
      <returns>如果可以为指定的密钥标识符子句检索密钥，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">检索密钥的关键标识符子句。</param>
      <param name="key">当此方法返回时，包含在指定的密钥标识符子句中引用的密钥。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>尝试检索这个安全令牌，即与指定的密钥标识符中包含的至少一个密钥标识符相匹配的安全令牌。（对基类方法的重写。）</summary>
      <returns>如果可以为指定的密钥标识符检索安全令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">为密钥标识符生成安全令牌。</param>
      <param name="token">当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>当在派生类中重写时，尝试解析与指定的密钥标识符子句相匹配的安全令牌。（对基类方法的重写。）</summary>
      <returns>如果可以为指定的密钥标识符子句检索安全令牌，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">为其创建安全标记的密钥标识符子句。</param>
      <param name="token">当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符子句。 该参数未经初始化即被传递。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver">
      <summary>获取实例包装的安全标记解析器。</summary>
      <returns>换行的令牌解析器。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken">
      <summary>表示一个安全令牌，它基于在 SOAP 消息中接收到的 Kerberos 票证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[])">
      <summary>使用指定的 Kerberos 票证初始化 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 类的新实例。</summary>
      <param name="request">包含 Kerberos 票证的 <see cref="T:System.Byte" /> 数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[],System.String)">
      <summary>使用指定的 Kerberos 票证和唯一标识符初始化 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 类的新实例。</summary>
      <param name="request">包含 Kerberos 票证的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="id">安全令牌的唯一标识符。 设置 <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id" /> 属性的值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[],System.String,System.String)">
      <summary>创建 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 的一个新实例。</summary>
      <param name="request">包含 Kerberos 票证的字节数组。</param>
      <param name="id">安全令牌的唯一标识符。</param>
      <param name="valueTypeUri">描述值类型的 URI。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。</summary>
      <returns>如果 <paramref name="T" /> 的类型为 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" />，则为 true；否则为 false。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定的密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.GetRequest">
      <summary>获取 Kerberos 票证。</summary>
      <returns>包含 Kerberos 票证的 <see cref="T:System.Byte" /> 数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的密钥标识符相匹配。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 的类型为 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> 并且 Kerberos 票证匹配，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.SecurityKey">
      <summary>获取与此安全令牌关联的 Kerberos 票证的对称会话密钥。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />，它包含与此安全令牌关联的 Kerberos 票证的对称会话密钥。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValueTypeUri">
      <summary>获取用于描述值类型的 URI。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.WindowsIdentity">
      <summary>获取与此安全令牌关联的 Windows 用户。</summary>
      <returns>一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken">
      <summary>表示一个安全令牌，它基于在 SOAP 请求中发送的 Kerberos 票证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.#ctor(System.String)">
      <summary>使用与指定的服务主体名称关联的服务来初始化 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 类的新实例。</summary>
      <param name="servicePrincipalName">
        <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。 设置 <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">无法为当前用户获取 Kerberos 票证。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel,System.Net.NetworkCredential,System.String)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 类的新实例。</summary>
      <param name="servicePrincipalName">
        <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。 设置 <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName" /> 属性。</param>
      <param name="tokenImpersonationLevel">
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，它指定客户端允许在何种级别上模拟 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌。</param>
      <param name="networkCredential">一个 <see cref="T:System.Net.NetworkCredential" />，它指定要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的用户。</param>
      <param name="id">安全令牌的唯一标识符。 设置 <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="servicePrincipalName" /> 为 null。 - 或 - <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="networkCredential" /> 不为 null 且不等于 <see cref="P:System.Net.CredentialCache.DefaultNetworkCredentials" />，而 <see cref="P:System.Net.NetworkCredential.UserName" /> 属性为空或 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">无法为指定用户获得 Kerberos 票证。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tokenImpersonationLevel" /> 不是 Impersonation 或 Identity。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。</summary>
      <returns>如果 <paramref name="T" /> 的类型为 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" />，则为 true；否则为 false。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定的密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.GetRequest">
      <summary>获取 Kerberos 票证请求。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，它包含 Kerberos 票证请求的结果。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的密钥标识符相匹配。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 的类型为 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> 并且 Kerberos 票证请求的结果匹配，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.SecurityKey">
      <summary>获取与此安全令牌关联的 Kerberos 票证的对称会话密钥。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />，它包含与此安全令牌关联的 Kerberos 票证的对称会话密钥。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName">
      <summary>获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosSecurityTokenHandler">
      <summary>表示安全标记处理程序，其处理 Kerberos 标记。 处理类型 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 的标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.KerberosSecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.CanValidateToken">
      <summary>获取指示当前实例是否能验证安全标记的值。</summary>
      <returns>如果处理程序现在可以验证标记，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>获取 WS-Security Kerberos Security Token 配置文件中定义的 Kerberos Security 标记类型。</summary>
      <returns>Kerberos Security 标记类型 URI。 默认情况下，<see cref="P:System.IdentityModel.Tokens.SecurityTokenTypes.Kerberos" /> 属性的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.TokenType">
      <summary>获取当前实例处理的标记的类型。</summary>
      <returns>当前实例处理的标记的类型。 默认情况下，这属于 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 类的类型。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>确认指定的 Kerberos 安全象征。</summary>
      <returns>包含在标记中的标识。</returns>
      <param name="token">要验证的安全令牌。 这必须是 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">指定的令牌不能赋值为 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" />。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause">
      <summary>表示一个密钥标识符子句，它标识一个 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 或 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>使用 Kerberos 服务票证的指定 SHA-1 哈希值来初始化 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="ticketHash">一个 <see cref="T:System.Byte" /> 数组，它包含 Kerberos 服务票证的 SHA-1 哈希值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ticketHash" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>使用指定的 Kerberos 票证、Nonce 和密钥长度来初始化 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="ticketHash">一个 <see cref="T:System.Byte" /> 数组，它包含 Kerberos 服务票证的 SHA-1 哈希值。</param>
      <param name="derivationNonce">一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。</param>
      <param name="derivationLength">派生密钥的大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ticketHash" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticketHash" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.GetKerberosTicketHash">
      <summary>获取 Kerberos 服务票证的 SHA-1 哈希值。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，它包含 Kerberos 服务票证的 SHA-1 哈希值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.ToString">
      <summary>返回当前对象。</summary>
      <returns>一个表示当前对象的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause">
      <summary>表示一个密钥标识符子句，它标识在 SOAP 消息的安全标头中指定的安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String)">
      <summary>使用指定的标识符和类型数组初始化 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="localId">当前 SOAP 消息中 XML 元素的 wsu:Id 属性值。 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localId" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="localId" /> 为空。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32,System.Type)">
      <summary>使用指定的标识符、Nonce、派生密钥长度和所有者安全令牌类型初始化 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="localId">当前 SOAP 消息中 XML 元素的 wsu:Id 属性值。 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性的值。</param>
      <param name="derivationNonce">一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。</param>
      <param name="derivationLength">派生密钥的大小。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。</param>
      <param name="ownerType">一个 <see cref="T:System.Type" />，它是 <paramref name="localId" /> 参数所引用的安全令牌的类型。 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localId" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="localId" /> 为空。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String,System.Type)">
      <summary>使用指定的标识符和所有者安全令牌类型初始化 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="localId">当前 SOAP 消息中 XML 元素的 wsu:Id 属性值。 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性的值。</param>
      <param name="ownerType">一个 <see cref="T:System.Type" />，它是 <paramref name="localId" /> 参数所引用的安全令牌的类型。 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localId" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="localId" /> 为空。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId">
      <summary>获取当前 SOAP 消息中 XML 元素的 wsu:Id 属性值。</summary>
      <returns>当前 SOAP 消息中 XML 元素的 wsu:Id 属性值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> 类型并且 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 和 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> 属性的值与当前实例相匹配，则为 true；否则为 false。 有关详细信息，请参见备注。</returns>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.Matches(System.String,System.Type)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等效于指定的引用和类型。</summary>
      <returns>如果 <paramref name="localId" /> 和 <paramref name="ownerType" /> 参数与 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 和 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> 属性的值相匹配，则为 true；否则为 false。 有关详细信息，请参见备注。</returns>
      <param name="localId">当前 SOAP 消息中 XML 元素的 wsu:Id 属性值。</param>
      <param name="ownerType">一个 <see cref="T:System.Type" />，它是 <paramref name="localId" /> 参数所引用的安全令牌的类型。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType">
      <summary>获取 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性所引用的安全令牌的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，包含 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性所引用的安全令牌的类型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>一个表示当前对象的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.ProofDescriptor">
      <summary>
        <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 和 <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> 类的基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ProofDescriptor.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.ProofDescriptor" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>根据当前证明说明符实例的属性设置在 RSTR 中的相应属性。</summary>
      <param name="response">被此证明描述符修改的 RSTR 对象。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.ProofDescriptor.KeyIdentifier">
      <summary>在派生类中实现时，获取可在发布标记内部用以定义密钥的密钥标识符。</summary>
      <returns>密钥标识符。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause">
      <summary>表示一个标识 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 安全令牌的密钥标识符子句。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.#ctor(System.Security.Cryptography.RSA)">
      <summary>使用指定的 RSA 算法初始化 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="rsa">一个表示 RSA 算法的 <see cref="T:System.Security.Cryptography.RSA" />。 设置 <see cref="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Rsa" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.CanCreateKey">
      <summary>获取一个值，该值指示是否可以从密钥标识符子句创建密钥。</summary>
      <returns>任何情况下都为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.CreateKey">
      <summary>使用 RSA 算法创建密钥。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.RsaSecurityKey" />，它是使用构造函数中所指定的 RSA 算法创建的密钥。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent">
      <summary>获取 RSA 算法的 Exponent 参数。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，包含 RSA 算法的 Exponent 参数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus">
      <summary>获取 RSA 算法的 Modulus 参数。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，包含 RSA 算法的 Modulus 参数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> 类型并且 <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus" /> 和 <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent" /> 方法对于 <paramref name="keyIdentifierClause" /> 参数返回的数组与当前实例相同，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Matches(System.Security.Cryptography.RSA)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的 RSA 算法相匹配。</summary>
      <returns>如果 <paramref name="rsa" /> 参数的 <see cref="F:System.Security.Cryptography.RSAParameters.Exponent" /> 和 <see cref="F:System.Security.Cryptography.RSAParameters.Modulus" /> 字段与当前实例的 <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus" /> 和 <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent" /> 方法所返回的值相匹配，则为 true；否则为 false。</returns>
      <param name="rsa">一个表示 RSA 算法的 <see cref="T:System.Security.Cryptography.RSA" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Rsa">
      <summary>获取与密钥标识符子句关联的 RSA 算法。</summary>
      <returns>一个表示 RSA 算法的 <see cref="T:System.Security.Cryptography.RSA" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>一个表示当前对象的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.WriteExponentAsBase64(System.Xml.XmlWriter)">
      <summary>将 RSA 算法的 Base64 编码的 Exponent 参数写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个 <see cref="T:System.Xml.XmlWriter" />，它用于写入 RSA 算法的 Base64 编码的 Exponent 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.WriteModulusAsBase64(System.Xml.XmlWriter)">
      <summary>将 RSA 算法的 Base64 编码的 Modulus 参数写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个 <see cref="T:System.Xml.XmlWriter" />，它用于写入 RSA 算法的 Base64 编码的 Modulus 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityKey">
      <summary>表示一个使用 RSA 算法生成的安全密钥。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)">
      <summary>使用指定的 RSA 算法初始化 <see cref="T:System.IdentityModel.Tokens.RsaSecurityKey" /> 类的新实例。</summary>
      <param name="rsa">一个表示 RSA 算法的 <see cref="T:System.Security.Cryptography.RSA" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>对指定的加密密钥进行解密。</summary>
      <returns>包含解密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">用于对密钥进行加密的加密算法。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />。</param>
      <param name="keyData">包含加密密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyData" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>使用指定的算法加密指定的密钥。</summary>
      <returns>包含加密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">用于对密钥进行加密的加密算法。</param>
      <param name="keyData">包含密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyData" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>获取指定的非对称加密算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />，表示指定的非对称加密算法。</returns>
      <param name="algorithm">要创建的非对称算法。</param>
      <param name="requiresPrivateKey">如果需要使用私钥来创建算法，则为 true；否则为 false。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="requiresPrivateKey " />为 true，而私钥不可用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>获取用于生成数字签名的哈希值的加密算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.HashAlgorithm" />，它生成数字签名的哈希值。</returns>
      <param name="algorithm">哈希算法。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>获取数字签名的反格式化程序算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的反格式化程序算法。</returns>
      <param name="algorithm">要获取其实例的数字签名的反格式化程序算法。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)">
      <summary>获取数字签名的格式化程序算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的格式化程序算法。</returns>
      <param name="algorithm">要获取其实例的数字签名的格式化程序算法。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey">
      <summary>获取一个值，该值指示私钥是否可用。</summary>
      <returns>如果私钥可用，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>获取一个值，该值指示指定的算法是否使用非对称密钥。</summary>
      <returns>如果指定的算法使用非对称密钥，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>获取一个值，该值指示此类是否支持指定的算法。</summary>
      <returns>如果指定的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>获取一个值，该值指示指定的算法是否使用对称密钥。</summary>
      <returns>如果指定的算法使用对称密钥，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityKey.KeySize">
      <summary>获取密钥的大小（以位为单位）。</summary>
      <returns>密钥的大小（以位为单位）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityToken">
      <summary>表示一个安全令牌，它基于使用 RSA 算法创建的密钥。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.#ctor(System.Security.Cryptography.RSA)">
      <summary>使用指定的 RSA 算法初始化 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类的新实例。</summary>
      <param name="rsa">一个 <see cref="T:System.Security.Cryptography.RSA" />，表示能够创建非对称密钥的 RSA 算法。 设置 <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.#ctor(System.Security.Cryptography.RSA,System.String)">
      <summary>使用指定的 RSA 算法和唯一标识符初始化 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类的新实例。</summary>
      <param name="rsa">一个 <see cref="T:System.Security.Cryptography.RSA" />，表示能够创建非对称密钥的 RSA 算法。 设置 <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa" /> 属性的值。</param>
      <param name="id">安全令牌的唯一标识符。 设置 <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Id" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rsa" /> 为 null。 - 或 - <paramref name="id" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。</summary>
      <returns>如果 <paramref name="T" /> 为 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> 类型，则为 true；否则为 false。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定的密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.Finalize">
      <summary>允许 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 在垃圾收集器销毁资源之前将这些资源释放。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的密钥标识符相匹配。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> 类型并且密钥匹配，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa">
      <summary>获取能够创建非对称密钥的 RSA 算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.RSA" />，表示能够创建非对称密钥的 RSA 算法。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityTokenHandler">
      <summary>表示 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类型的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 进程安全标志。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.RsaSecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>指示当前的 ML 元素是否可读作 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />。</summary>
      <returns>如果读取器正指向 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />，则为 true；否则为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能将读取器前移。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanValidateToken">
      <summary>获取一个值，该值指示此处理程序是否支持对 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类型的标记进行验证。</summary>
      <returns>如果该处理器支持类型 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 标记的验证，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanWriteToken">
      <summary>获取指示此处理程序能否写入 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类型的标记的值。</summary>
      <returns>如果处理程序现在可以写入类型 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 的标记，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>获取 WS-Security 安全标记文件中定义的 RSA 安全标记类型。</summary>
      <returns>RSA “安全标记”类型 URI。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>从 XML 反序列化 RSA 安全标记。</summary>
      <returns>从 XML 反序列化的 RSA 安全令牌。</returns>
      <param name="reader">在标记的开始元素上指定的 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> 未定位在 RSA 标记上。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.TokenType">
      <summary>获取此处理程序处理的 <see cref="T:System.Type" /> 的标记。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 的类型。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>验证指定的安全标记。</summary>
      <returns>包含在标记中的标识。</returns>
      <param name="token">要验证的安全令牌；必须是一个 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 赋值。</exception>
      <exception cref="T:System.InvalidOperationException">此处理程序的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>对 XML 序列化 RSA 安全标记。</summary>
      <param name="writer">用于序列化令牌的 XML 编写器。</param>
      <param name="token">要序列化的 RSA 安全标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 赋值。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Action">
      <summary>表示由 SAML 2.0 定义的 &lt;saml:Action&gt; 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Action.#ctor(System.String,System.Uri)">
      <summary>用指定的命名空间和操作初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> 类的新实例。</summary>
      <param name="value">要执行的操作。</param>
      <param name="actionNamespace">表示命名空间指定操作名称被解释的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionNamespace" /> 为 null。 - 或 - <paramref name="value" /> 为 null 或空字符串。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="actionNamespace" /> 不是绝对 URI。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Action.Namespace">
      <summary>获取或设置表示其中将解释指定操作的名称的 XML 命名空间的 URI 引用。</summary>
      <returns>表示命名空间的 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
      <exception cref="T:System.ArgumentException">尝试设置一个不是绝对 URI 的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Action.Value">
      <summary>获取或设置 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 的主题可对资源执行的操作。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 的主题可对资源执行的操作。</returns>
      <exception cref="T:System.ArgumentNullException">尝试设置一个为 null 或一个空字符串的值。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Advice">
      <summary>表示在 [Saml2Core, 2.6.1] 中指定的建议元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Advice.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.AssertionIdReferences">
      <summary>获取按 ID 引用的断言的集合。</summary>
      <returns>包含引用断言的 ID 的类型 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 的收集。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.Assertions">
      <summary>获取规则指定的断言的集合。</summary>
      <returns>包断言的 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 类型的的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.AssertionUriReferences">
      <summary>获取由 URI 引用的断言的集合。</summary>
      <returns>包含引用断言的 URI 的类型 <see cref="T:System.Uri" /> 的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Assertion">
      <summary>表示在 [Saml2Core, 2.3.3] 中指定的断言元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Assertion.#ctor(System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>使用指定的颁发者初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 类的新实例。</summary>
      <param name="issuer">
        <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 指定该断言中发表声明的 SAML 颁发机构。[Saml2Core, 2.3.3]。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuer" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Advice">
      <summary>获取或设置与帮助处理特定解决方案的断言相关的其他信息，但不理解该建议或不希望使用它的应用程序可能忽略该断言。[Saml2Core, 2.3.3]</summary>
      <returns>包含有关断言的附加信息的 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.CanWriteSourceData">
      <summary>获取指示此声明是否已从 XML 源反序列化，并且可以按原样再次发出 XML 数据的值。</summary>
      <returns>如果断言可以按原样再次发出 XML 源数据，则为 true ；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Conditions">
      <summary>获取或设置评估验证和/或使用断言时必须提升的条件。[Saml2Core 2.3.3]</summary>
      <returns>一个包含条件的 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.EncryptingCredentials">
      <summary>获取或设置用于加密断言的凭据。 加密凭据中的密钥标识符用于 EncryptedData 元素中的嵌入 EncryptedKey。</summary>
      <returns>返回表示凭证的 <see cref="T:Microsoft.IdentityModel.Tokens.EncryptingCredentials" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.ExternalEncryptedKeys">
      <summary>获取或设置包含所有附加密钥的集合，该密钥被作为 EncryptedAssertion 元素的子集指定为外部 EncryptedData 元素。</summary>
      <returns>包含键的 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类型的的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Id">
      <summary>获取或设置断言的标识符。[Saml2Core, 2.3.3]</summary>
      <returns>一个表示标识符的 <see cref="T:System.IdentityModel.Tokens.Saml2Id" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.IssueInstant">
      <summary>获取或设置 UTC 中问题的时间。[Saml2Core, 2.3.3]</summary>
      <returns>
        <see cref="T:System.DateTime" />表示此断言在 UTC 上发布的时间。 默认值为 <see cref="P:System.DateTime.UtcNow" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Issuer">
      <summary>获取或设置在断言中发出声明的 SAML 颁发机构的标识符。[Saml2Core, 2.3.3]</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />，用于指定颁发者。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.SigningCredentials">
      <summary>颁发者所用的凭据可保护断言的完整性。</summary>
      <returns>一个表示凭据的 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Statements">
      <summary>获取包含与此声明中主题有关的声明的集合。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> 类型的集合，其中包含此断言的语句。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Subject">
      <summary>获取或设置断言中语句的主题。[Saml2Core, 2.3.3]</summary>
      <returns>一个指定主题的 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Version">
      <summary>获取此断言的 SAML 版本。[Saml2Core, 2.3.3]</summary>
      <returns>包含版本的字符串。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Assertion.WriteSourceData(System.Xml.XmlWriter)">
      <summary>写入源数据（如果可用）。</summary>
      <param name="writer">用于写源数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">没有可用的源数据</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause">
      <summary>表示 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 实施，用于引用基于 SAML2 的安全标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.#ctor(System.String)">
      <summary>为指定的 ID初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="id">要生成的定义子句的 ID。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>使用指定的密钥大小、 ID 、 nonce 初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="id">要生成的定义子句的 ID。</param>
      <param name="derivationNonce">一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。</param>
      <param name="derivationLength">派生密钥的大小。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 是与当前实例相同的实例，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.Matches(System.String,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示断言的密钥标识符是否等效于指定的密钥标识符子句。</summary>
      <returns>true ，如果 <paramref name="assertionId" /> 匹配 <paramref name="keyIdentifierClause" /><see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id" /> 的属性；否则， false。</returns>
      <param name="assertionId">断言的 ID。</param>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertionId" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.ToString">
      <summary>返回表示当前实例的字符串。</summary>
      <returns>当前实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Attribute">
      <summary>表示在 [Saml2Core, 2.7.3.1] 中指定的特性元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 类的新实例。</summary>
      <param name="name">属性名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>用指定的名称和值初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 类的新实例。</summary>
      <param name="name">属性名。</param>
      <param name="values">包含特性值的字符串的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。 - 或 - <paramref name="values" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String,System.String)">
      <summary>用指定的名称和值初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 类的新实例。</summary>
      <param name="name">属性名。</param>
      <param name="value">属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。 - 或 - <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.AttributeValueXsiType">
      <summary>获取或设置包含在 SAML 特性中的值的 xsi:type。</summary>
      <returns>包含 xsi:type 的字符串。 默认值为 <see cref="F:System.Security.Claims.ClaimValueTypes.String" />。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个为 null 或空字符串的值。 - 或 - 尝试设置一个格式不正确的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.FriendlyName">
      <summary>获取或设置特性的人工可读名称。[Saml2Core, 2.7.3.1]</summary>
      <returns>一个包含友好的特性名称的字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.Name">
      <summary>获取或设置特性的名称。[Saml2Core, 2.7.3.1]</summary>
      <returns>包含特性名称的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">尝试设置一个为 null 或一个空字符串的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.NameFormat">
      <summary>获取或设置表示为解释该名称的属性名称分类的 URI。[Saml2Core, 2.7.3.1]</summary>
      <returns>一个表示分类的 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.ArgumentException">设置不是 null 并且并不完全是 URI 的值的尝试发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.OriginalIssuer">
      <summary>获取或设置字符串表示此 SAML 特性原始颁发者的字符串的名称。</summary>
      <returns>一个包含原始颁发者特性的字符串。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个引发空字符串的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.Values">
      <summary>获取包含特性值的集合。</summary>
      <returns>包含特性值的字符串的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AttributeStatement">
      <summary>表示在 [Saml2Core, 2.7.3] 中指定的 AttributeStatement 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor">
      <summary>不带特性初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 类的新实例。</summary>
      <param name="attributes">包含此语句包含的 Attribute 元素的类型 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> 为 null。 - 或 - 由 <paramref name="attributes" /> 指定的一个集合元素的是 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor(System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 类的新实例。</summary>
      <param name="attribute">
        <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 表示此语句中包含的单个特性元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AttributeStatement.Attributes">
      <summary>获取此特属性语句中包含的属性集。 这些属性与断言主题有关。[Saml2Core, 2.7.3]</summary>
      <returns>语句中包含的特性的类型 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AudienceRestriction">
      <summary>表示在 [Saml2Core, 2.5.1.4] 中指定的 AudienceRestriction 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor">
      <summary>不带 Audience 元素初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>用指定的 URIs 初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> 类的新实例。</summary>
      <param name="audiences">包含限制中所含的用户元素的 <see cref="T:System.Uri" /> 的集合。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor(System.Uri)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> 类的新实例。</summary>
      <param name="audience">
        <see cref="T:System.Uri" /> 表示此限制中的观众元素的内容。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AudienceRestriction.Audiences">
      <summary>获取指定用户的 URI 集合，该用户是被声明指定的。 如果依赖方为任意指定用户的成员，则条件有效。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 类型的集合，指定受众。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthenticationContext">
      <summary>表示在 [Saml2Core, 2.7.2.2] 中指定的 AuthnContext 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor(System.Uri)">
      <summary>用指定的种类引用初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> 类的新实例。</summary>
      <param name="classReference">身份验证上下文的类引用。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="classReference" /> 不是 null，不是绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor(System.Uri,System.Uri)">
      <summary>使用指定的引用种类和声明引用对 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> 类的新实例进行初始化。</summary>
      <param name="classReference">身份验证上下文的类引用。</param>
      <param name="declarationReference">身份验证上下文的声明引用</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="classReference" /> 不是 null，不是绝对 URI。 - 或 - <paramref name="declarationReference" /> 不是 null，不是绝对 URI。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.AuthenticatingAuthorities">
      <summary>获取由主要身份验证程序调用的身份验证权限的零或更多唯一标识符（ URI ）的集合，身份验证程序不包括声明颁发者（其假定在明确没有被集合包含时调用）。[Saml2Core, 2.7.2.2]</summary>
      <returns>返回类型 <see cref="T:System.Uri" /> 的集合，确认主体身份验证涉及的颁发机构进行身份验证。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.ClassReference">
      <summary>获取或设置标识描述遵循的身份验证上下文声明的身份验证上下文类的 URI 引用。[Saml2Core, 2.7.2.2]</summary>
      <returns>一个标识上下文类的 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.ArgumentException">设置不是 null 并且并不完全是 URI 的值的尝试发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.DeclarationReference">
      <summary>获取或设置标识验证上下文声明的 URI 引用。[Saml2Core, 2.7.2.2]</summary>
      <returns>
        <see cref="T:System.Uri" /> 标识声明的身份验证上下文。</returns>
      <exception cref="T:System.ArgumentException">设置不是 null 并且并不完全是 URI 的值的尝试发生。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement">
      <summary>表示在 [Saml2Core, 2.7.2] 中指定的 AuthnStatement 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationStatement.#ctor(System.IdentityModel.Tokens.Saml2AuthenticationContext)">
      <summary>用指定的身份验证上下文和作为身份验证时刻的当前时间初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 类的新实例。</summary>
      <param name="authenticationContext">该声明的身份验证上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationContext" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationStatement.#ctor(System.IdentityModel.Tokens.Saml2AuthenticationContext,System.DateTime)">
      <summary>用指定的身份验证上下文和身份验证时间初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 类的新实例。</summary>
      <param name="authenticationContext">该声明的身份验证上下文。</param>
      <param name="authenticationInstant">身份验证的时间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationContext" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.AuthenticationContext">
      <summary>获取或设置身份验证颁发机构使用的上下文和包含指示此语句的身份验证事件的上下文。[Saml2Core, 2.7.2]</summary>
      <returns>一个表示上下文的 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试设置一个 null 值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.AuthenticationInstant">
      <summary>获取或设置身份验证执行的时间。[Saml2Core, 2.7.2]</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示 UTC 中的认证时间。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SessionIndex">
      <summary>获取或设置按主题标识的主体和身份验证颁发机构之间的特定会话的索引。[Saml2Core, 2.7.2]</summary>
      <returns>包含会话索引的字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SessionNotOnOrAfter">
      <summary>获取或设置必须考虑结束主体标识的主题和颁发此语句的 SAML 颁发机构之间的会话的时间。[Saml2Core, 2.7.2]</summary>
      <returns>返回在 UTC 表示会话过期时间可以为 null 的 <see cref="T:System.DateTime" />。 一个表示特性未指定的 null 值。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SubjectLocality">
      <summary>获取或设置系统的 DNS 域名和 IP 地址，已从该系统中对断言主题进行了相似的身份验证。[Saml2Core, 2.7.2]</summary>
      <returns>指定 DNS 域名和 IP 地址的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement">
      <summary>表示由 SAML 2.0 定义的 &lt;saml:AuthzDecisionStatement&gt; 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.#ctor(System.Uri,System.IdentityModel.Tokens.SamlAccessDecision)">
      <summary>使用指定的指定资源的决策初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 类的新实例。</summary>
      <param name="resource">关于其授权决定应用的资源的 <see cref="T:System.Uri" />。 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> 属性。</param>
      <param name="decision">一个 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值，指示决策。 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resource" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resource" /> 不是一个绝对 URI 或空的相对 URI。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decision" /> 不是有效的 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.#ctor(System.Uri,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Action})">
      <summary>使用指定的在指定资源上执行指定操作的决策初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 类的新实例。</summary>
      <param name="resource">关于其授权决定应用的资源的 <see cref="T:System.Uri" />。 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> 属性。</param>
      <param name="decision">一个 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值，指示决策。 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision" /> 属性。</param>
      <param name="actions">指定要对资源授权的操作的 <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> 的集合。 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Actions" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resource" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resource" /> 不是一个绝对 URI 或空的相对 URI。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decision" /> 不是有效的 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Actions">
      <summary>获取或设置要对指定资源执行的一组授权的操作。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> 类型的集合，指定认证操作。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision">
      <summary>获取或设置由 SAML 授权机构做出的、与指定资源有关的决定。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值之一，它指定由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">尝试设置一个无效的 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值的值。</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.EmptyResource">
      <summary>获取空 URI 引用。 引用可能用于设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> 属性。 使用时，其将指定当前文档的开头。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Evidence">
      <summary>获取或设置 SAML 颁发机构做出该决定时所依赖的一组断言。[Saml2Core, 2.7.4]</summary>
      <returns>包含断言的 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource">
      <summary>获取或设置标识要查找访问授权的资源的 URI 引用。</summary>
      <returns>一个标识资源的 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试设置一个 null 值。</exception>
      <exception cref="T:System.ArgumentException">尝试设置一个不是绝对 URI 或相对于 URI 不是空值的值。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Conditions">
      <summary>表示在 [Saml2Core, 2.5.1] 中指定的“条件”元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Conditions.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.AudienceRestrictions">
      <summary>获取指定用户的集合，该用户是被声明指定的。[Saml2Core, 2.5.1]</summary>
      <returns>为断言指定用户的类型 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> 的集合。 如果集合为空，则限制对用户不适用。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore">
      <summary>获取或设置断言有效的最早时间。[Saml2Core, 2.5.1]</summary>
      <returns>包含 UTC 中的有效时间的 <see cref="T:System.DateTime" /> 可为空。 一个表示特性不存在的 null 值。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter" /> 属性不是 null ，并尝试设置在由 <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter" /> 属性指定的时间常数之时获之后发生的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter">
      <summary>获取或设置断言到期的时间。[Saml2Core, 2.5.1]</summary>
      <returns>包含 UTC 中的有效时间的 <see cref="T:System.DateTime" /> 可为空。 一个表示特性不存在的 null 值。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore" /> 属性不是 null，并尝试设置在由 <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore" /> 属性指定的时间常数之前发生的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.OneTimeUse">
      <summary>获取指定声明是否应被立即使用并不需在未来使用的值。[Saml2Core, 2.5.1]</summary>
      <returns>如果应立即使用断言，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.ProxyRestriction">
      <summary>获取或设置断言方对依赖方的限制，后者希望不断充当断言方并基于原始断言中包含的信息颁发其自己的断言。[Saml2Core, 2.5.1]</summary>
      <returns>包含放置在后续断言方的限制的 <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" />。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Evidence">
      <summary>表示在 [Saml2Core, 2.7.4.3] 中指定的证据元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>使用指定的断言初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 类的新实例。</summary>
      <param name="assertion">一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，包含证据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.IdentityModel.Tokens.Saml2Id)">
      <summary>用引用断言的 ID 初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 类的新实例。</summary>
      <param name="idReference">引用断言的 <see cref="T:System.IdentityModel.Tokens.Saml2Id" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idReference" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.Uri)">
      <summary>用引用断言的 URI 来初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 类的新实例。</summary>
      <param name="uriReference">引用断言的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriReference" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.AssertionIdReferences">
      <summary>获取按 ID 引用的断言的集合。</summary>
      <returns>包含引用断言的 ID 的类型 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 的收集。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.Assertions">
      <summary>获取规则指定的断言的集合。</summary>
      <returns>包断言的 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 类型的的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.AssertionUriReferences">
      <summary>获取由 URI 引用的断言的集合。</summary>
      <returns>包含引用断言的 URI 的类型 <see cref="T:System.Uri" /> 的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Id">
      <summary>表示用于 SAML 断言的标识符。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.#ctor">
      <summary>使用系统生成值初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.#ctor(System.String)">
      <summary>使用指定的值初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 类的新实例。</summary>
      <param name="value">ID 值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是有效 NCName。</exception>
      <exception cref="T:System.ArgumentNUllException">
        <paramref name="value" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.Equals(System.Object)">
      <summary>确定指定此实例是否等于指定的对象。</summary>
      <returns>如果这两个对象相等，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>一个包含哈希代码的整数。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.ToString">
      <summary>返回此实例的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Id.Value">
      <summary>获取标识符字符串。</summary>
      <returns>ID 字符串。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2NameIdentifier">
      <summary>表示在 [Saml2Core, 2.2.3] 中指定的 NameID 元素或在 [Saml2Core, 2.2.4] 中指定的 EncryptedID 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2NameIdentifier.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 类的新实例。</summary>
      <param name="name">名称标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2NameIdentifier.#ctor(System.String,System.Uri)">
      <summary>用指定的名称和格式 URI 初始化 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 类的新实例。</summary>
      <param name="name">名称标识符。</param>
      <param name="format">一个 <see cref="T:System.Uri" />，用于指定标识符格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">尝试设置一个值的 <paramref name="format" />，该值不为 null，也不是绝对的 URI。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.EncryptingCredentials">
      <summary>获取或设置用于在 EncryptedID 元素中加密名称标识符的的凭据。</summary>
      <returns>表示用于加密名称标识符凭据的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.ExternalEncryptedKeys">
      <summary>获取包含额外密钥的集合，该密钥作为 EncryptedID 元素的子元素被对外指定给 xenc:EncryptedData 元素。</summary>
      <returns>一个包含键的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.Format">
      <summary>获取或设置表示基于字符串的标识符信息类别的 URI 引用。[Saml2Core, 2.2.2]</summary>
      <returns>
        <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.ArgumentException">设置不是 null 并且并不完全是 URI 的值的尝试发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.NameQualifier">
      <summary>获取或设置验证有资格作为名字的安全性或管理域名。[Saml2Core, 2.2.2]</summary>
      <returns>名称限定符。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.SPNameQualifier">
      <summary>获取或设置将用于进一步限定名称 [Saml2Core, 2.2.2] 的服务提供程序的名称或提供程序的关联。</summary>
      <returns>服务提供程序名称限定符。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.SPProvidedId">
      <summary>获取或设置由实体的服务提供程序或程序隶属生成的名称标识符，如果不同于主名称标识符。[Saml2Core, 2.2.2]</summary>
      <returns>一个包含名称标识符的字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.Value">
      <summary>获取或设置名称标识的值。</summary>
      <returns>一个包含名称标识符数值的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">尝试设置一个 null 值。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2ProxyRestriction">
      <summary>表示在 [Saml2Core, 2.5.1.6] 中指定的 ProxyRestriction 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2ProxyRestriction.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2ProxyRestriction.Audiences">
      <summary>获取或设置断言方允许在此断言的基础上对其颁发新断言的受众集。</summary>
      <returns>包含可以发布新断言的实体地址的类型 <see cref="T:System.Uri" /> 的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2ProxyRestriction.Count">
      <summary>获取或设置断言方允许在此断言和具有无限颁发的断言之间存在的指示的最大数量。</summary>
      <returns>可以为 null 的整数。 null 指示特性未设置且间接数没有设置限制。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">尝试设置一个不是 null 且小于零的值。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause">
      <summary>此类用于当 Saml2Assertion 接收 &lt;ds:KeyInfo&gt; 元素内部无署名元素。 KeyInfo 说明了需要检查签名的密钥。 当需要该密钥时，此子句将显示到当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。 它将包含 Saml2Assertion 成功读取，这能查询以确定需要的密钥。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="assertion">当前所处理的断言。 设置 <see cref="P:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.Assertion" /> 属性的值。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.Assertion">
      <summary>获取当前与此实例关联的 Saml2Assertion。</summary>
      <returns>当前与此实例关联的 Saml2Assertion。 可以为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityToken">
      <summary>表示基于 SAML 断言的安全令牌。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>使用指定的 SAML 断言初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 类的新实例。</summary>
      <param name="assertion">一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，表示此安全令牌的 SAML 断言。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.#ctor(System.IdentityModel.Tokens.Saml2Assertion,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey},System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用指定的 SAML 断言、加密密钥和颁发者标记来初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 类的新实例。</summary>
      <param name="assertion">一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，表示此安全令牌的 SAML 断言。</param>
      <param name="keys">与此安全标识相关的密钥集合。</param>
      <param name="issuerToken">颁发者标记的安全标记。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion">
      <summary>获取此安全令牌的 SAML 断言。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，表示此安全令牌的 SAML 断言。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。</summary>
      <returns>如果 <paramref name="T" /> 为 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 类型，则为 true；否则为 false。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定的密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />，它是 SAML 安全令牌的密钥标识符子句。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 并不属于类型 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.IssuerToken">
      <summary>获取颁发者的安全标记。</summary>
      <returns>颁布者的安全令牌。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符与指定的密钥标识符是否相等。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />，并且具有与 <see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Id" /> 属性相同的唯一标识符，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">一个要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler">
      <summary>表示安全标记处理程序，其可从 SAML 2.0 Assertions 创建安全标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.#ctor">
      <summary>使用默认安全标记需求初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.#ctor(System.IdentityModel.Tokens.SamlSecurityTokenRequirement)">
      <summary>使用指定的安全标记需求初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler" /> 类的新实例。</summary>
      <param name="samlSecurityTokenRequirement">当验证令牌时被这个实例使用的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" />。 设置 <see cref="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SamlSecurityTokenRequirement" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSecurityTokenRequirement" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.AddDelegateToAttributes(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.ICollection{System.IdentityModel.Tokens.Saml2Attribute},System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>将所有与该主题相关的委托添加到特性集合中。</summary>
      <param name="subject">此 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象的委托将序列化到 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />。</param>
      <param name="attributes">
        <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 类型的集合。</param>
      <param name="tokenDescriptor">标记描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> 为 null。 - 或 - <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>指示当前 XML 元素是否指向一个可由该事例序列化的密匙标识符子句。</summary>
      <returns>如果 <see cref="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法可读取元素，则为 true；否则，为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>指示当前 XML 元素是否可以读取为实例掌控的类型标志。</summary>
      <returns>如果 <see cref="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可读取元素，则为 true；否则，为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能将读取器前移。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanValidateToken">
      <summary>获取指示此处理程序是否能验证类型 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 的标记的值。</summary>
      <returns>true，指示该管理器可以验证类型 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 标记。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>指示指定的密匙标识符子句是否可由该事例序列化。</summary>
      <returns>如果可以序列化指定的密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="securityKeyIdentifierClause">要序列化的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanWriteToken">
      <summary>获取指示此处理程序能否序列化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 类型的标记的值。</summary>
      <returns>true；指示该管理器可以序列化类型 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 标记。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CertificateValidator">
      <summary>获取或设置当前实例用于验证 X.509 证书的 X.509 证书验证程序。</summary>
      <returns>一个表示验证程序的 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CollectAttributeValues(System.Collections.Generic.ICollection{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>使用通常声明类型、声明值类型集合特性，并使用多个值集合颁发者到单个特性。</summary>
      <returns>包含从输入集合中派生的特性的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 的集合。 输入集合中的特性不共享声明类型、声明值，或其他属性的颁发者合并为具有输出集合中多个值的一个特性。 输入集合中的特性不共享声明类型、声明值，或其他属性的颁发者保持不变的显示在输出集合中。</returns>
      <param name="attributes">包含从声明中派生的特性的类型 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 的集合。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAdvice(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建断言的 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> 对象。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> 对象。 默认值为 null。</returns>
      <param name="tokenDescriptor">标记描述符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAttribute(System.Security.Claims.Claim,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>从声明中创建一个 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 对象。</summary>
      <returns>包含转换的声明的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />。</returns>
      <param name="claim">从 <see cref="T:System.Security.Claims.Claim" />生成 SAML “特性”。</param>
      <param name="tokenDescriptor">标记描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claim" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAttributeStatement(System.Security.Claims.ClaimsIdentity,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>从标记说明符创建 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 对象。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 包含转换的声明。</returns>
      <param name="subject">包含将要被转换为 SAML 特性的声明的 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象。</param>
      <param name="tokenDescriptor">标记描述符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAuthenticationStatement(System.Security.Claims.AuthenticationInformation,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建从指定的身份验证信息中创建 SAML 2.0 身份验证语句。</summary>
      <returns>添加 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 到要创建的断言，或忽略 <see cref="T:System.Security.Claims.AuthenticationInformation" /> 对象（和不创建 SAML 2.0 身份验证语句），则为 null。</returns>
      <param name="authInfo">包含作为 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 对象包装的状态的 <see cref="T:System.Security.Claims.AuthenticationInformation" /> 对象。</param>
      <param name="tokenDescriptor">标记描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。 - 或 - <paramref name="tokenDescriptor" /> 的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject" /> 属性为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="tokenDescriptor" />（<see cref="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject" /> 属性）的主题包含声明类型为 <see cref="F:System.Security.Claims.ClaimTypes.AuthenticationInstant" /> 或 <see cref="F:System.Security.Claims.ClaimTypes.AuthenticationMethod" /> 的声明，但不包含每种类型的至少一个声明。 - 或 - <paramref name="tokenDescriptor" /> 的主题指定的身份验证方法无法解析为绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateClaims(System.IdentityModel.Tokens.Saml2SecurityToken)">
      <summary>从 SAML 2.0 标记创建声明。</summary>
      <returns>包含从标志中提取的声明的 <see cref="T:System.Security.Claims.ClaimsIdentity" />。</returns>
      <param name="samlToken">一个 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />，表示用以创建声明的安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlToken" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="samlToken" /> 的 <see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion" /> 属性为 null。</exception>
      <exception cref="T:System.InvalidOperationException">处理程序未注册或用于处理程序的发布者姓名注册表未被配置。<see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null，<see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" />，其具有 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> 属性，值为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">用于安全标识 (<paramref name="samlToken" />) 的由配置的颁布者名称注册表返回的颁布者名称是 null 或为空。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateConditions(System.IdentityModel.Protocols.WSTrust.Lifetime,System.String,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建断言的条件。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> 对象，包含该断言的条件。</returns>
      <param name="tokenLifetime">标记的生存期。</param>
      <param name="relyingPartyAddress">为其创建标记的终结点地址。 该地址建模为 AudienceRestriction 条件。</param>
      <param name="tokenDescriptor">标记描述符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateIssuerNameIdentifier(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建识别声明颁布者的名称标示符。</summary>
      <returns>一个表示名称标识符的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</returns>
      <param name="tokenDescriptor">用于创建名称标识符的标记说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateSamlSubject(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>为此断言创建 SAML 2.0 主题。</summary>
      <returns>一个表示断言主题的 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" />。</returns>
      <param name="tokenDescriptor">为其创建主题的安全标记说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>标记没附在消息上时创建安全标记引用。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> ，表示令牌引用。实际上返回一个<see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />的实例。</returns>
      <param name="token">SAML 令牌。</param>
      <param name="attached">指示是否创建附加引用或独立引用的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateStatements(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建包含于断言中的 SAML 2.0 语句。</summary>
      <returns>包含声明的 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> 的枚举。</returns>
      <param name="tokenDescriptor">用于创建语句的标记说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建基于标记说明符的安全标记。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示 SAML 2.0 安全令牌。（实际上返回一个<see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />的实例。）</returns>
      <param name="tokenDescriptor">用于创建安全标记的标记说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateWindowsIdentity(System.String)">
      <summary>使用指定用户主名称 （UPN）创建 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象。</summary>
      <returns>已创建的线程的 Windows 标识。</returns>
      <param name="upn">用来创建标识的 UPN。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="upn" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateXmlStringFromAttributes(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>从表示参与者的 SAML 2.0 特性的集合中生成一个 XML 格式的字符串。</summary>
      <returns>使用特性构造的格式良好的 XML 字符串。</returns>
      <param name="attributes">包含该特性的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 类型的枚举。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.DenormalizeAuthenticationType(System.String)">
      <summary>返回与 SAML 身份验证上下文类引用规范化的值相匹配的 <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> 值。</summary>
      <returns>包含 <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> 常数之一的字符串。</returns>
      <param name="normalizedAuthenticationType">规范化的值。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>如果指定标记已存在于标记重播缓存中则引发异常；否则该标记将添加到缓存中。</summary>
      <param name="token">
        <see cref="T:System.IdentityModel.Tokens.SecurityToken" />表示要检查的 SAML 2.0 安全标记（该标记应为 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />类型）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。 - 或 - 在处理程序配置（通过 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性访问）的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.Caches" /> 属性下未配置 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 不能作为 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 实例被转换。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">与标识相关的断言的 ID 是 null 或为空。（令牌的<see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion" />属性引用 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，它具有一个 <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Id" /> 属性，这个属性引用 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> （该引用值具有 <see cref="P:System.IdentityModel.Tokens.Saml2Id.Value" /> 属性，该属性为 null 或为空。））</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">标记已存在于 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" /> 中。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.FindUpn(System.Security.Claims.ClaimsIdentity)">
      <summary>在指定的 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象中查找 UPN 声明值，目的是为了把其标志映射到 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象。</summary>
      <returns>一个字符串，其中包含找到的 UPN 声明值。</returns>
      <param name="claimsIdentity">包含所需 UPN 声明的声明标识对象。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetEncryptingCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>获取标记的加密凭据。 重写此方法以更改标记的加密凭据。</summary>
      <returns>表示标志加密凭据的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" />。</returns>
      <param name="tokenDescriptor">从 Scope 对象中检索某个范围加密凭据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">从标记描述符检索的加密凭据是不对称的。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetSigningCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>获取用于对断言进行签名的凭据。</summary>
      <returns>表示签名断言凭据的 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" />。</returns>
      <param name="tokenDescriptor">标记描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetTokenReplayCacheEntryExpirationTime(System.IdentityModel.Tokens.Saml2SecurityToken)">
      <summary>返回直到应在标记重播缓存中保留的标记的时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示过期时间。</returns>
      <param name="token">返回过期时间的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>获取处理程序支持的标记的类型标识符。</summary>
      <returns>包含此处理程序支持的该标记的类型标识符的字符串数组。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.KeyInfoSerializer">
      <summary>获取或设置用于序列化和反序列化键标识程序的安全令牌序列化程序。</summary>
      <returns>一个表示序列化程序的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该值设置为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>从 XML 加载自定义的配置。</summary>
      <param name="customConfigElements">
        <see cref="T:System.Xml.XmlNodeList" /> 指定 SAML 标志身份验证要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfigElements" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="customConfigElements" /> 中指定的配置无效。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.NormalizeAuthenticationContextClassReference(System.String)">
      <summary>返回与 SAML 身份验证上下文类引用匹配的规范化的值。</summary>
      <returns>一个包含规范化值的字符串。</returns>
      <param name="saml2AuthenticationContextClassReference">
        <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> 常数之一。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAttributeStatement(System.IdentityModel.Tokens.Saml2AttributeStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 2.0 特性语句中创建声明并将它们添加到指定主题。</summary>
      <param name="statement">从 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 生成声明。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> 为 null。 - 或 - <paramref name="subject" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAuthenticationStatement(System.IdentityModel.Tokens.Saml2AuthenticationStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 2.0 身份验证语句中创建声明并将它们添加到指定主题。</summary>
      <param name="statement">从 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 生成声明。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> 为 null。 - 或 - <paramref name="subject" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAuthorizationDecisionStatement(System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 2.0 授权决定语句中创建声明并将它们添加到指定主题。</summary>
      <param name="statement">从 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 生成声明。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessSamlSubject(System.IdentityModel.Tokens.Saml2Subject,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 2.0 主题中创建声明并将它们添加到指定主题。</summary>
      <param name="assertionSubject">从中创建声明的 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" />。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> 为 null。 - 或 - <paramref name="assertionSubject" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessStatement(System.Collections.ObjectModel.Collection{System.IdentityModel.Tokens.Saml2Statement},System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 2.0 语句的集合中创建声明并将它们添加到指定主题。</summary>
      <param name="statements">创建的声明中的 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> 的集合。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAction(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Action&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Action" />，表示所读取的活动元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAdvice(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Advice&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" />，表示所读取的建议元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAssertion(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Assertion&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，表示所读取的断言元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttribute(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Attribute&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，表示所读取的断言元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttributeStatement(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AuthzDecisionStatement&gt; 元素或 &lt;saml:Statement&gt; 元素，其指定 saml:AttributeStatementType 的 xsi:type。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" />，表示所读取的元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttributeValue(System.Xml.XmlReader,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>读取特性值。</summary>
      <returns>包含特性值的字符串。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="attribute">正被读取的属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAudienceRestriction(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AudienceRestriction&gt; 元素或 &lt;saml:Condition&gt; 元素，其指定 saml:AudienceRestrictionType 的一个 xsi:type。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" />，表示所读取的元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthenticationContext(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AuthnContext&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" />，表示所读取的 AuthnContext 元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthenticationStatement(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AuthnStatement&gt; 元素或 &lt;saml:Statement&gt; 元素，其指定 saml:AuthnStatementType 的 xsi:type。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" />，表示所读取的元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthorizationDecisionStatement(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AuthzDecisionStatement&gt; 元素或 &lt;saml:Statement&gt; 元素，其指定 saml:AuthzDecisionStatementType 的 xsi:type。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" />，表示所读取的元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadConditions(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Conditions&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" />，表示所读取的条件元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> 不放置在条件元素上。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadEncryptedId(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:EncryptedId&gt; 元素。</summary>
      <returns>表示读取的 EncryptedId 元素的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</returns>
      <param name="reader">指向 EncryptedId 元素的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> 未定位在 EncryptedID 元素上。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadEvidence(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Evidence&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" />，表示所读取的证据元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadIssuer(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Issuer&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />，表示所读取的颁发者元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>读取 SecurityKeyIdentifierClause。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全密钥标识符字句。</returns>
      <param name="reader">要从其读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadNameId(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:NameID&gt; 元素。</summary>
      <returns>表示读取的 NameID 元素的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</returns>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 置于 NameID 元素位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadNameIdType(System.Xml.XmlReader)">
      <summary>&lt;Issuer&gt; 和 &lt;NameID&gt; 为 NameIDType。 此方法读取这些元素之一的内容。</summary>
      <returns>一个从 XML 构建的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</returns>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 置于 NameID 类型的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadProxyRestriction(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:ProxyRestriction&gt; 元素或 &lt;saml:Statement&gt; 元素，其指定 saml:ProxyRestrictionType 的 xsi:type。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" />，表示所读取的元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSigningKeyInfo(System.Xml.XmlReader,System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>反序列化 SAML Signing KeyInfo。</summary>
      <returns>用来表示用作检查签名的密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</returns>
      <param name="reader">可以放置在 ds:KeyInfo 元素位置的 XmlReader。</param>
      <param name="assertion">已检查签名的断言。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadStatement(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Statement&gt; 元素。</summary>
      <returns>表示读取的 Statement 元素的 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" />。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubject(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Subject&gt; 元素。</summary>
      <returns>表示读取的 Subject 元素的 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" />。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectConfirmation(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:SubjectConfirmation&gt; 元素。</summary>
      <returns>表示读取的 SubjectConfirmation 元素的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" />。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectConfirmationData(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:SubjectConfirmationData&gt; 元素。</summary>
      <returns>表示读取的 SubjectConfirmationData 元素的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" />。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectId(System.Xml.XmlReader,System.String)">
      <summary>此方法处理用于 ID 的 &lt;Subject&gt; 和&lt;SubjectConfirmation&gt; 元素的构造。</summary>
      <returns>一个从 XML 构建的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</returns>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 置于主题 ID XML 的位置。</param>
      <param name="parentElement">包含此“主题” ID 的父元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectKeyInfo(System.Xml.XmlReader)">
      <summary>反序列化 SAML 主题 &lt;ds:KeyInfo&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示 &lt;ds:KeyInfo&gt; 元素的内容。</returns>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 置于 &lt;ds:KeyInfo&gt; 元素位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectLocality(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:SubjectLocality&gt; 元素。</summary>
      <returns>表示读取的 SubjectLocality 元素的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" />。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>从指定流中读取 SAML 2.0 标记。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 的一个实例。</returns>
      <param name="reader">SAML 2.0 安全标志的 <see cref="T:System.Xml.XmlReader" /> 流。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。 - 或 - 由 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性指定的配置的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver" /> 属性是 null。 - 或 - 由 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性指定的配置的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> 属性是 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ResolveIssuerToken(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>将 Signing Key Identifier解析为 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示解析的安全令牌。</returns>
      <param name="assertion">解析颁布者令牌所应用的 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />。</param>
      <param name="issuerResolver">当前与该处理程序关联的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">处理程序不能解析标识。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ResolveSecurityKeys(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>解析在 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />中引用的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 集合。</summary>
      <returns>包含键的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 类型的的集合。</returns>
      <param name="assertion">要处理的 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />。</param>
      <param name="resolver">在解析 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 对象中使用的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">处理程序不能解析键。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SamlSecurityTokenRequirement">
      <summary>获取或设置此实例的安全令牌要求。</summary>
      <returns>指定要求的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该值设置为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SetDelegateFromAttribute(System.IdentityModel.Tokens.Saml2Attribute,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>当检测 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 的特殊类型时调用此方法。 已传入的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 包装一个包含特性值的集合的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> (特性值在 <see cref="P:System.IdentityModel.Tokens.Saml2Attribute.Values" /> 属性中)，每一个特性值将被映射到一个声明。 所有的声明都将返回到 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 。</summary>
      <param name="attribute">要使用的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />。</param>
      <param name="subject">为此标记的主题的 <see cref="T:System.Security.Claims.ClaimsIdentity" />。</param>
      <param name="issuer">声明的颁发者。</param>
      <exception cref="T:System.InvalidOperationException">不包含任何有效特性值的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />。</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TokenProfile11ValueType">
      <summary>由 OASIS Web Services Security SAML Token Profile 1.1所定义的 SAML 2.0 断言 ID 的密钥标识符值类型。 这是一个 URI。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TokenType">
      <summary>获取处理程序支持的标记的类型。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 类的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TryResolveIssuerToken(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>将 Signing Key Identifier解析为 SecurityToken。</summary>
      <returns>如果标记已解决，则为 true。</returns>
      <param name="assertion">解析颁布者令牌所应用的 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />。</param>
      <param name="issuerResolver">当前与该处理程序关联的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</param>
      <param name="token">当此方法返回时，如果解析标记成功，则包含已解析的安全标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateConditions(System.IdentityModel.Tokens.Saml2Conditions,System.Boolean)">
      <summary>验证指定的 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> 对象。</summary>
      <param name="conditions">要验证的 SAML 2.0 条件。</param>
      <param name="enforceAudienceRestriction">检查观众限制条件，则为 true。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateConfirmationData(System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>验证指定的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> 对象。</summary>
      <param name="confirmationData">SAML 2.0 主题确认数据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>验证标记数据并返回其声明。</summary>
      <returns>标记中包含的值标识。</returns>
      <param name="token">要验证的 SAML 2.0 标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Action)">
      <summary>写入 &lt;saml:Action&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAdvice(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Advice)">
      <summary>写入 &lt;saml:Advice&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAssertion(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>序列化指定的 SAML 断言到指定的 XML 编写器。</summary>
      <param name="writer">用于序列化的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">表示要序列化的断言的 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="data" /> 指定的断言具有设置为 null 的 <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.EncryptingCredentials" /> 和 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReceivedEncryptingCredentials" /> 属性。 - 或 - <paramref name="data" />指定的断言中无声明和无主题。<see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Subject" /> 属性和 <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Statements" /> 属性均为null。如果断言不包含声明，则它必须包含主题。 - 或 - 由 <paramref name="data" /> 指定的断言包含身份验证、特性或授权决策声明并且没有主题—这些声明需要主题。（<see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Statements" /> 属性包含 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" />, <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" />, 或者 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 类型的语句方法。并且，<see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Subject" /> 属性是 null）。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">标记的加密凭据没有指定的对称密钥。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>写入 &lt;saml:Attribute&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttributeStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AttributeStatement)">
      <summary>写入 &lt;saml:AttributeStatement&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttributeValue(System.Xml.XmlWriter,System.String,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>写入 saml：特性值。</summary>
      <param name="writer">用其进行写操作的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="value">一个包含要被写入的特性值的字符串。</param>
      <param name="attribute">表示要写入的值的特性的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAudienceRestriction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AudienceRestriction)">
      <summary>写入 &lt;saml:AudienceRestriction&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthenticationContext(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthenticationContext)">
      <summary>写入 &lt;saml:AuthnContext&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthenticationStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthenticationStatement)">
      <summary>写入 &lt;saml:AuthnStatement&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthorizationDecisionStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement)">
      <summary>写入 &lt;saml:AuthzDecisionStatement&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteConditions(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Conditions)">
      <summary>写入 &lt;saml:Conditions&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteEvidence(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Evidence)">
      <summary>写入 &lt;saml:Evidence&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteIssuer(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>写入 &lt;saml:Issuer&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>将 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 序列化为指定的 XML 编写器。</summary>
      <param name="writer">序列化密钥标识符子句的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="securityKeyIdentifierClause">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示要序列化的密钥标识符子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="securityKeyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteNameId(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>写入 &lt;saml:NameID&gt; 元素。</summary>
      <param name="writer">用于序列化 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要序列化的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Saml2NameIdentifier 加密凭据必须有一个指定的“对称密钥”。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteNameIdType(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>&lt;Issuer&gt; 和 &lt;NameID&gt; 为 NameIDType。 此方法写入这些元素之一的内容。</summary>
      <param name="writer">用于序列化 NameID 类型的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteProxyRestriction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2ProxyRestriction)">
      <summary>写入 &lt;saml:ProxyRestriction&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSigningKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 XML 写入器写入 Signing &lt;ds:KeyInfo&gt; 元素。</summary>
      <param name="writer">用于序列化密钥标识符的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">表示要写入的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signingKeyIdentifier" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">处理程序无法序列化由 <paramref name="signingKeyIdentifier" /> 指定的键标识符。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Statement)">
      <summary>写入 Saml2Statement。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubject(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Subject)">
      <summary>写入 &lt;saml:Subject&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectConfirmation(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectConfirmation)">
      <summary>写入 &lt;saml:SubjectConfirmation&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectConfirmationData(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>写入 &lt;saml:SubjectConfirmationData&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 XML 编写器序列化主题 &lt;ds:KeyInfo&gt; 元素。</summary>
      <param name="writer">用于序列化密钥标识符的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">表示要写入的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectLocality(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectLocality)">
      <summary>写入 &lt;saml:SubjectLocality&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="data">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>将 SAML2 令牌写入指定的 XML 写入器。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="token">要写入的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 不是 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 对象。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Statement">
      <summary>表示在 [Saml2Core, 2.7.1] 中指定的 StatementAbstractType。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Statement.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> 类。</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Subject">
      <summary>表示在 [Saml2Core, 2.4.1] 中指定的 Subject元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor(System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>用指定的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 对象初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 类的新实例。</summary>
      <param name="nameId">一个表示名称标识符的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor(System.IdentityModel.Tokens.Saml2SubjectConfirmation)">
      <summary>用指定的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> 对象初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 类的新实例。</summary>
      <param name="subjectConfirmation">一个包含确认信息的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectConfirmation" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Subject.NameId">
      <summary>获取或设置主题的标识符。[Saml2Core, 2.4.1]</summary>
      <returns>包含标识符的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Subject.SubjectConfirmations">
      <summary>获取包含允许将被确认主题信息的集合。[Saml2Core, 2.4.1]</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> 类型的集合。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation">
      <summary>表示在 [Saml2Core, 2.4.1.1] 中指定的 SubjectConfirmation 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmation.#ctor(System.Uri)">
      <summary>使用指定的确认方法初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> 类的新实例。</summary>
      <param name="method">指示确认方法的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmation.#ctor(System.Uri,System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>用指定的确认方法和其他确认信息初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> 类的新实例。</summary>
      <param name="method">指示确认方法的 <see cref="T:System.Uri" />。</param>
      <param name="data">包含附加确认信息的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是绝对 URI。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.Method">
      <summary>获取或设置标识用于确认主题的协议或机制的 URI 引用。[Saml2Core, 2.4.1.1]</summary>
      <returns>一个表示引用的 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null。</exception>
      <exception cref="T:System.ArgumentException">尝试设置一个不是绝对 URI 的值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.NameIdentifier">
      <summary>获取或设置预期满足编码主题确认要求的实体的标识符。[Saml2Core, 2.4.1.1]</summary>
      <returns>一个表示实体的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.SubjectConfirmationData">
      <summary>获取或设置特定确认方法将使用的其他确认信息。[Saml2Core, 2.4.1.1]</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> 包含与配置方法一起使用的信息。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData">
      <summary>表示 SubjectConfirmationData 元素和在 [Saml2Core, 2.4.1.2-2.4.1.3] 中定义的关联的 KeyInfoConfirmationDataType 。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.Address">
      <summary>获取或设置网络地址/位置，以响应证明实体可将断言表示为。[Saml2Core, 2.4.1.2]</summary>
      <returns>包含地址的字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.InResponseTo">
      <summary>获取或设置 SAML 协议消息的 ID，以响应证明实体可呈现断言的情况。[Saml2Core, 2.4.1.2]</summary>
      <returns>表示 Id 的 <see cref="T:System.IdentityModel.Tokens.Saml2Id" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.KeyIdentifiers">
      <summary>获取对证明实体进行身份验证使用的的加密密钥集合。[Saml2Core, 2.4.1.3]</summary>
      <returns>返回包含键的类型的 <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKeyIdentifier" /> 的集合。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.NotBefore">
      <summary>获取或设置时间实例，在此之前主题不能被确认。[Saml2Core, 2.4.1.2]</summary>
      <returns>包含 UTC 中的有效时间的 <see cref="T:System.DateTime" /> 可为空。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.NotOnOrAfter">
      <summary>获取或设置可不再确认主题的时间。[Saml2Core, 2.4.1.2]</summary>
      <returns>包含 UTC 中的有效时间的 <see cref="T:System.DateTime" /> 可为空。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.Recipient">
      <summary>获取或设置指定验证实体能提供断定的实体或位置的 URI。[Saml2Core, 2.4.1.2]</summary>
      <returns>指定主体和位置的 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.ArgumentException">设置不是 null 并且并不完全是 URI 的值的尝试发生。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectLocality">
      <summary>表示在 [Saml2Core, 2.7.2.1] 中指定的 SubjectLocality 元素。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectLocality.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectLocality.#ctor(System.String,System.String)">
      <summary>初始化地址和 DNS 名称中的 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> 类的新实例。</summary>
      <param name="address">包含地址的字符串。</param>
      <param name="dnsName">一个包含 DNS 名称的字符串。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectLocality.Address">
      <summary>获取或设置系统的网络地址，已从该系统中对按主题标识的主题进行了身份验证。[Saml2Core, 2.7.2.1]</summary>
      <returns>包含地址的字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectLocality.DnsName">
      <summary>获取或设置系统的 DNS 域名，已从该系统中对按主题标识的主题进行了身份验证。[Saml2Core, 2.7.2.1]</summary>
      <returns>一个包含 DNS 名称的字符串。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAccessDecision">
      <summary>指定是否授予 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题访问给定资源的权限。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Deny">
      <summary>指定对资源的访问被拒绝。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Indeterminate">
      <summary>指定颁发 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的安全令牌服务不具有足够的信息来确定对特定资源的访问权限。 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的接收方必须使用其他方法来确定用户的访问权限。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Permit">
      <summary>指定对资源的访问权限被授予。</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAction">
      <summary>表示 SAML 断言中的 &lt;saml:Action&gt; 元素，其中包含对指定资源的操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor(System.String)">
      <summary>使用指定的操作初始化 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 安全令牌的主题试图对指定资源执行的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 null。 - 或 - <paramref name="action" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor(System.String,System.String)">
      <summary>使用指定的操作初始化 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 安全令牌的主题试图对指定资源执行的操作。</param>
      <param name="ns">在其中定义 <paramref name="action" /> 参数的 XML 命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 null。 - 或 - <paramref name="action" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.Action">
      <summary>获取或设置 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 的主题可对指定资源执行的操作。</summary>
      <returns>获取或设置 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题试图对指定资源执行的操作。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性设置为 null。 - 或 - <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性设置为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly" /> 属性的值为 true，同时设置了 <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.Namespace">
      <summary>获取或设置定义 <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性的 XML 命名空间。</summary>
      <returns>在其中定义 <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性的 XML 命名空间。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly" /> 属性为 true，同时设置了 <see cref="P:System.IdentityModel.Tokens.SamlAction.Namespace" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 XML 读取器读取 &lt;saml:Action&gt; 元素。</summary>
      <param name="reader">一个用于读取 &lt;saml:Action&gt; XML 元素的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够读取 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定为 &lt;saml:Advice&gt; XML 元素所引用的 SAML 断言创建数字签名的安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 作为 &lt;saml:Action&gt; 元素写入指定的 XML 编写器。</summary>
      <param name="writer">一个用于写入 &lt;saml:Action&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 规范中定义的 &lt;saml:Action&gt; 元素及其子元素和属性。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAdvice">
      <summary>表示 SAML 断言中的 &lt;saml:Advice&gt; 元素，包含 SAML 授权机构提供的附加信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>使用指定的 SAML 断言集合初始化 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 类的新实例。</summary>
      <param name="assertions">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含提供 SAML 断言附加信息的 SAML 断言。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertions" /> 包含一个 null 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 类的新实例。</summary>
      <param name="references">一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含对提供 SAML 断言附加信息的 SAML 断言的引用集合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="references" /> 包含一个 null 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>使用指定的 SAML 断言集合和 SAML 断言引用集合初始化 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 类的新实例。</summary>
      <param name="references">一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含对提供 SAML 断言附加信息的 SAML 断言的引用集合。</param>
      <param name="assertions">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含提供 SAML 断言附加信息的 SAML 断言。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="references" /> 包含一个 null 元素。 - 或 - <paramref name="assertions" /> 包含一个 null 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.AssertionIdReferences">
      <summary>获取对 SAML 断言的引用集合。</summary>
      <returns>一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，包含对提供 SAML 断言附加信息的 SAML 断言的引用集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.Assertions">
      <summary>获取 SAML 断言的集合。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，包含提供 SAML 断言附加信息的 SAML 断言。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 XML 读取器读取 &lt;saml:Advice&gt; XML 元素。</summary>
      <param name="reader">一个用于读取 &lt;saml:Advice&gt; XML 元素的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够读取 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定为包含此 &lt;saml:Advice&gt; XML 元素的 SAML 断言创建数字签名的安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">&lt;saml:Advice&gt; 元素不符合 &lt;saml:Advice&gt; 元素的 XML 架构。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将此 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 作为一个 &lt;saml:Advice&gt; 元素写入指定的 XML 编写器。</summary>
      <param name="writer">一个用于写入 &lt;saml:Advice&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 规范中定义的 &lt;saml:Advice&gt; 元素及其子元素和属性。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAssertion">
      <summary>表示一个安全断言标记语言 1.1 (SAML 1.1) 断言。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.#ctor(System.String,System.String,System.DateTime,System.IdentityModel.Tokens.SamlConditions,System.IdentityModel.Tokens.SamlAdvice,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlStatement})">
      <summary>使用指定的 SAML 断言标识符、断言颁发者、断言的颁发日期和时间、一组处理条件、附加信息和一个 SAML 语句集合来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 类的新实例。</summary>
      <param name="assertionId">断言的标识符。</param>
      <param name="issuer">颁发此 SAML 断言的 SAML 授权机构。</param>
      <param name="issueInstant">一个 <see cref="T:System.DateTime" />，它指定 SAML 断言的颁发时间。</param>
      <param name="samlConditions">一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" />，它指定在评估 SAML 断言的有效性时可能考虑的一组条件。</param>
      <param name="samlAdvice">一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" />，它指定由 SAML 授权机构提供的、有助于处理 SAML 断言的附加信息。</param>
      <param name="samlStatements">一个包含 SAML 语句的、类型为 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertionId" /> 为null - 或 - <paramref name="assertionId" /> 为<see cref="F:System.String.Empty" /> - 或 - <paramref name="assertionId" /> 不是以字母或“_”字符开头。 - 或 - <paramref name="issuer" /> 为null - 或 - <paramref name="issuer" /> 为<see cref="F:System.String.Empty" /> - 或 - <paramref name="samlStatements" /> 为null - 或 - <paramref name="samlStatements" /> 不包含任何元素 - 或 - <paramref name="samlStatements" /> 包含一个 null 元素</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Advice">
      <summary>获取或设置与 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 有关的、由 SAML 授权机构提供的、有助于处理 SAML 断言的附加信息。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" />，它指定由 SAML 授权机构提供的、有助于处理 SAML 断言的附加信息。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Advice" /> 属性已设置，而 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性为 true。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId">
      <summary>获取或设置断言的标识符。</summary>
      <returns>断言的标识符。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性的值为 true，且试图设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">试图将 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId" /> 属性设置为 null 或空字符串。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.CanWriteSourceData">
      <summary>获取指示此声明是否已从 XML 源反序列化，并且可以按原样再次发出 XML 数据的值。</summary>
      <returns>如果断言可以按原样再次发出 XML 源数据，则为 true ；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Conditions">
      <summary>获取或设置在评估 SAML 断言的有效性时可能考虑的一组条件。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" />，它指定在评估 SAML 断言的有效性时可能考虑的一组条件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性为 true，而试图设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Conditions" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.IssueInstant">
      <summary>获取或设置 SAML 断言的颁发日期和时间。</summary>
      <returns>以协调世界时 (UTC) 表示的 <see cref="T:System.DateTime" />，它指定 SAML 断言的颁发时间。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性为 true，而试图设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IssueInstant" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Issuer">
      <summary>获取或设置颁发此 SAML 断言的 SAML 授权机构的名称。</summary>
      <returns>颁发此 SAML 断言的 SAML 授权机构。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性为 true，而试图设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Issuer" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">试图将 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Issuer" /> 属性设置为 null 或空字符串。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.MajorVersion">
      <summary>获取此 SAML 断言所遵循的 SAML 规范的主版本。</summary>
      <returns>此 SAML 断言所遵循的 SAML 规范的主版本。 默认值为 <see cref="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue" /> 属性的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.MinorVersion">
      <summary>获取此 SAML 断言所遵循的 SAML 规范的次版本。</summary>
      <returns>此 SAML 断言所遵循的 SAML 规范的次版本。 默认值为 <see cref="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue" /> 属性的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.ReadSignature(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SamlSerializer)">
      <summary>从 XML 读取器读取 SAML 断言的数字签名。</summary>
      <param name="reader">一个用来读取数字签名的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 XML 元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null - 或 - <paramref name="samlSerializer" /> 为null - 或 - 尚未从 SAML 断言中读取数字签名。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 SAML 断言。</summary>
      <param name="reader">一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它用来读取 SAML 断言。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <exception cref="T:System.InvalidOperationException">先前已经调用过 <see cref="M:System.IdentityModel.Tokens.SamlAssertion.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)" /> 方法且 SAML 断言已进行数字签名。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 不引用遵循 SAML 1.1 规范的 SAML 断言。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials">
      <summary>获取或设置用于对 SAML 断言进行数字签名的安全凭据。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" />，它用于对 SAML 断言进行数字签名。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性为 true，而试图设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.SigningToken">
      <summary>获取由数字签名的 SAML 断言包含或引用的安全令牌。</summary>
      <returns>一个由数字签名的 SAML 断言包含或引用的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Statements">
      <summary>获取与 SAML 断言相关联的 SAML 语句集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，它包含与 SAML 断言相关联的 SAML 语句。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.WriteSourceData(System.Xml.XmlWriter)">
      <summary>写入源数据（如果可用）。</summary>
      <param name="writer">写入源数据的 XML 编写器。</param>
      <exception cref="T:System.InvalidOperationException">没有可用的源数据</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 SAML 断言作为 &lt;saml:Assertion&gt; 元素写入指定的 XML 编写器。</summary>
      <param name="writer">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它用来写入 SAML 断言。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够将 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 中的对象写为 XML。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的配置方式使得在将它序列化为 XML 时，将导致不符合 SAML v1.1 规范。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause">
      <summary>表示一个 &lt;KeyIndentifier&gt; 元素，它引用 SOAP 消息中的 &lt;saml:Assertion&gt; 元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.#ctor(System.String)">
      <summary>使用指定的 SAML 断言标识符来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="assertionId">包含密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的标识符</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertionId" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>使用指定的 SAML 断言标识符、Nonce 和密钥长度来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="assertionId">包含密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的标识符。</param>
      <param name="derivationNonce">一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。</param>
      <param name="derivationLength">派生密钥的大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertionId" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.AssertionId">
      <summary>获取包含密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的标识符。</summary>
      <returns>包含密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>确定指定的密钥标识符是否与当前实例相同。</summary>
      <returns>如果指定的密钥标识符与当前实例相同，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.Matches(System.String)">
      <summary>确定指定的 SAML 断言标识符是否与当前实例相同。</summary>
      <returns>如果 <paramref name="assertionId" /> 与当前实例的 <see cref="P:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.AssertionId" /> 属性具有相同值，则为 true；否则为 false。</returns>
      <param name="assertionId">要进行比较的 SAML 断言标识符。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.ToString">
      <summary>返回一个 <see cref="T:System.String" />，它包含表示当前密钥标识符子句的 SAML 断言标识符。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含表示当前 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 实例的 SAML 断言标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAttribute">
      <summary>表示与 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 的主题相关联的属性。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor(System.IdentityModel.Claims.Claim)">
      <summary>使用指定的声明初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 类的新实例。</summary>
      <param name="claim">一个 <see cref="T:System.IdentityModel.Claims.Claim" />，它表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题的属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claim" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="claim" /> 的 <see cref="P:System.IdentityModel.Claims.Claim.Resource" /> 属性的类型不是 <see cref="T:System.String" />。 - 或 - <paramref name="claim" /> 的 <see cref="P:System.IdentityModel.Claims.Claim.Right" /> 属性不是 <see cref="P:System.IdentityModel.Claims.Rights.PossessProperty" />。 - 或 - <paramref name="claim" /> 的 <see cref="P:System.IdentityModel.Claims.Claim.ClaimType" /> 属性不含有“/”字符，或者它位于第一个或最后一个索引位置。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用指定的属性名称、XML 命名空间和属性值来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 类的新实例。</summary>
      <param name="attributeNamespace">在其中定义 <paramref name="attributeName" /> 参数的 XML 命名空间。</param>
      <param name="attributeName">SAML 属性的名称。</param>
      <param name="attributeValues">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含 SAML 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeNamespace" /> 为 null。 - 或 - <paramref name="attributeName" /> 为 null。 - 或 - <paramref name="attributeValues" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="claim" /> 的 <see cref="P:System.IdentityModel.Claims.Claim.Resource" /> 属性的类型不是 <see cref="T:System.String" />。 - 或 - <paramref name="claim" /> 的 <see cref="P:System.IdentityModel.Claims.Claim.Right" /> 属性不是 <see cref="P:System.IdentityModel.Claims.Rights.PossessProperty" />。 - 或 - <paramref name="claim" /> 的 <see cref="P:System.IdentityModel.Claims.Claim.ClaimType" /> 属性不含有“/”字符，或者它位于第一个或最后一个索引位置。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.AttributeValues">
      <summary>获取 SAML 属性的属性值集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IList`1" />，它包含 SAML 属性的属性值集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.AttributeValueXsiType">
      <summary>获取或设置包含在 SAML 特性中的值的 xsi:type。</summary>
      <returns>包含 xsi:type 的字符串。 默认值为 <see cref="F:System.Security.Claims.ClaimValueTypes.String" />。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个为 null 或空字符串的值。 - 或 - 尝试设置一个格式不正确的值。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.ExtractClaims">
      <summary>获取该 SAML 属性表示的声明的集合。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含该 SAML 属性表示的声明集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.Name">
      <summary>获取或设置 SAML 属性的名称。</summary>
      <returns>SAML 属性的名称。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Name" /> 属性已设置，而 <see cref="P:System.IdentityModel.Tokens.SamlAttribute.IsReadOnly" /> 属性为 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Name" /> 属性设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.Namespace">
      <summary>获取或设置在其中定义 SAML 属性的名称的 XML 命名空间。</summary>
      <returns>在其中定义 SAML 属性的名称的 XML 命名空间。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.OriginalIssuer">
      <summary>获取或设置字符串表示 SAML 特性原始颁发者的字符串的名称。</summary>
      <returns>SAML 特性的原始颁发者。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个引发空字符串的值。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 SAML 属性。</summary>
      <param name="reader">一个用于读取 SAML 属性的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 引用不具有 AttributeName 和 AttributeNamespace 属性的 XML 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 SAML 属性写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写入 SAML 属性的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAttributeStatement">
      <summary>包含一组与特定 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 关联的属性。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>使用指定的主题以及与该主题关联的属性集来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 类的新实例。</summary>
      <param name="samlSubject">一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />，它指定声明的主题。</param>
      <param name="attributes">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含一组与主题关联的属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSubject" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributes" /> 包含一个为 null 的成员。 - 或 - <paramref name="attributes" /> 不包含成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>将指定的声明集作为属性添加到此 SAML 语句中。</summary>
      <param name="claims">一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，它包含要添加到 SAML 语句中的声明集。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttributeStatement.Attributes">
      <summary>获取与 SAML 断言的主题关联的属性集合。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，它包含一组与主题关联的属性。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttributeStatement.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 SAML 属性语句。</summary>
      <param name="reader">用于读取 SAML 属性语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 属性语句中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 引用不包含 &lt;saml:Subject&gt; 元素的 XML 元素。 - 或 - <paramref name="reader" /> 引用一个 XML 元素，该元素包含的 &lt;saml:Attribute&gt; 元素不具有属性值。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 SAML 属性语句写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写 SAML 属性语句的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition">
      <summary>指定 SAML 断言是针对特定受众的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>使用 SAML 断言的指定目标受众集初始化 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 类的新实例。</summary>
      <param name="audiences">一个 <see cref="T:System.Uri" /> 类型的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含一个目标受众集。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="audiences" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.Audiences">
      <summary>获取 SAML 断言的目标受众集。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 类型的 <see cref="T:System.Collections.Generic.IList`1" />，包含一个目标受众集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 &lt;AudienceRestrictionCondition&gt; 元素。</summary>
      <param name="reader">一个用于读取 &lt;AudienceRestrictionCondition&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">&lt;AudienceRestrictionCondition&gt; 元素具有一个没有值的子 &lt;Audience&gt; 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 &lt;AudienceRestrictionCondition&gt; 元素写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写入 &lt;AudienceRestrictionCondition&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够在 SAML 规范中定义的 SAML 断言中写入 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource">
      <summary>表示从 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> 创建的声明的资源类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String)">
      <summary>使用指定的时刻、身份验证方法、DNS 域名以及 IP 地址初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 类的新实例。</summary>
      <param name="authenticationInstant">一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。</param>
      <param name="authenticationMethod">一个 URI 引用，它指定如何对主题进行身份验证。</param>
      <param name="dnsAddress">对主题进行身份验证的计算机所在的 DNS 域名。</param>
      <param name="ipAddress">对主题进行身份验证的计算机的 IP 地址。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>使用指定的时刻、身份验证方法、DNS 域名、IP 地址以及对附加信息的引用来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 类的新实例。</summary>
      <param name="authenticationInstant">一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。</param>
      <param name="authenticationMethod">一个 URI 引用，它指定如何对主题进行身份验证。</param>
      <param name="dnsAddress">对主题进行身份验证的计算机所在的 DNS 域名。</param>
      <param name="ipAddress">对主题进行身份验证的计算机的 IP 地址。</param>
      <param name="authorityBindings">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含关于主题的附加信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="authorityBindings" /> 包含一个为 null 的成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>使用指定的时刻、身份验证方法、DNS 域名、IP 地址以及对附加信息的引用来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 类的新实例。</summary>
      <param name="authenticationInstant">一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。</param>
      <param name="authenticationMethod">一个 URI 引用，它指定如何对主题进行身份验证。</param>
      <param name="dnsAddress">对主题进行身份验证的计算机所在的 DNS 域名。</param>
      <param name="ipAddress">对主题进行身份验证的计算机的 IP 地址。</param>
      <param name="authorityBindings">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含关于主题的附加信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="authorityBindings" /> 包含一个为 null 的成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthenticationInstant">
      <summary>获取对主题进行身份验证的时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthenticationMethod">
      <summary>获取或设置用于对主题进行身份验证的方法。</summary>
      <returns>用于对主题进行身份验证的方法。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthorityBindings">
      <summary>获取关于主题的附加信息。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含关于主题的附加信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.DnsAddress">
      <summary>获取对主题进行身份验证的计算机所在的 DNS 域名。</summary>
      <returns>对主题进行身份验证的计算机所在的 DNS 域名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.Equals(System.Object)">
      <summary>返回一个值，该值指示该实例是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 并与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.GetHashCode">
      <summary>返回 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 的哈希代码。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.IPAddress">
      <summary>获取或设置对主题进行身份验证的计算机的 IP 地址。</summary>
      <returns>对主题进行身份验证的计算机的 IP 地址。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthenticationStatement">
      <summary>表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的声明，它断言在特定时间以特定方式对主题进行身份验证。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.DateTime,System.String,System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>使用指定的身份验证详细信息初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> 类的新实例。</summary>
      <param name="samlSubject">一个表示声明主题的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。</param>
      <param name="authenticationMethod">一个 URI 引用，它指定如何对主题进行身份验证。</param>
      <param name="authenticationInstant">一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。</param>
      <param name="dnsAddress">对主题进行身份验证的计算机所在的 DNS 域名。</param>
      <param name="ipAddress">对主题进行身份验证的计算机的 IP 地址。</param>
      <param name="authorityBindings">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含关于主题的附加信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="authorityBindings" /> 包含一个为 null 的成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>根据此实例的属性将声明添加到指定的声明集合。</summary>
      <param name="claims">一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，包含添加操作的目标声明集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationInstant">
      <summary>获取或设置主题进行身份验证的时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。 异常类型 Condition <see cref="T:System.InvalidOperationException" />设置了 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationInstant" /> 属性，而 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> 属性为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationMethod">
      <summary>获取或设置用于对主题进行身份验证的方法。</summary>
      <returns>用于对主题进行身份验证的方法。 默认值为 urn:oasis:names:tc:SAML:1.0:am:unspecified。</returns>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationMethod" /> 属性，而 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> 属性为 true。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthorityBindings">
      <summary>获取关于主题的附加信息。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 类型的 <see cref="T:System.Collections.Generic.IList`1" />，包含主题的附加信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.ClaimType">
      <summary>获取安全声明的类型。</summary>
      <returns>指定安全声明类型的 <see cref="T:System.IdentityModel.Claims.ClaimTypes" />。 始终为 http://schemas.microsoft.com/mb/2005/09/ClaimType/SamlAuthentication。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.DnsAddress">
      <summary>获取或设置对主题进行身份验证的计算机所在的 DNS 域名。</summary>
      <returns>对主题进行身份验证的计算机所在的 DNS 域名。</returns>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.DnsAddress" /> 属性，而 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> 属性为 true。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IPAddress">
      <summary>获取或设置对主题进行身份验证的计算机的 IP 地址。</summary>
      <returns>对主题进行身份验证的计算机的 IP 地址。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 SAML 身份验证语句。</summary>
      <param name="reader">读取 SAML 身份验证语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 身份验证语句中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 引用不包含 AuthenticationInstant 和 AuthenticationMethod 属性的 XML 元素。 - 或 - <paramref name="reader" /> 引用不包含 &lt;saml:Subject&gt; 子元素的 XML 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 SAML 身份验证语句写入指定的 XML 序列化程序。</summary>
      <param name="writer">用于写入 SAML 身份验证语句的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorityBinding">
      <summary>指定如何检索关于 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌主题的附加信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.#ctor(System.Xml.XmlQualifiedName,System.String,System.String)">
      <summary>使用指定的查询类型、协议绑定和 SAML 授权机构位置初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 类的新实例。</summary>
      <param name="authorityKind">一个 <see cref="T:System.Xml.XmlQualifiedName" />，表示具有主题附加信息的 SAML 授权机构所响应的查询类型。</param>
      <param name="binding">一个 URI 引用，标识与具有主题附加信息的 SAML 授权机构通信时所使用的 SAML 协议绑定。</param>
      <param name="location">一个 URI 引用，描述如何找到并与具有主题附加信息的 SAML 授权机构进行通信。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind">
      <summary>获取或设置具有主题附加信息的 SAML 授权机构所响应的查询类型。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlQualifiedName" />，表示具有主题附加信息的 SAML 授权机构所响应的查询类型。</returns>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind" /> 属性，而 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> 属性为 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind" /> 属性设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding">
      <summary>获取或设置与具有主题附加信息的 SAML 授权机构进行通信时所使用的 SAML 协议绑定。</summary>
      <returns>一个 URI 引用，标识与具有主题附加信息的 SAML 授权机构进行通信时所使用的 SAML 协议绑定。</returns>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding" /> 属性，而 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> 属性为 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding" /> 属性设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location">
      <summary>获取或设置如何找到并与具有主题附加信息的 SAML 授权机构进行通信。</summary>
      <returns>一个 URI 引用，描述如何找到并与具有主题附加信息的 SAML 授权机构进行通信。</returns>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location" /> 属性，而 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> 属性为 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location" /> 属性设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 &lt;AuthorityBinding&gt; 元素。</summary>
      <param name="reader">一个用于读取 &lt;AuthorityBinding&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 不引用 SAML 断言。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 不引用 SAML 断言。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 &lt;AuthorityBinding&gt; 元素写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写入 &lt;AuthorityBinding&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够在 SAML 规范中定义的 SAML 断言中写入 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource">
      <summary>表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的声明，它断言一个与特定资源的访问有关的授权决定。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.#ctor(System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.String,System.String)">
      <summary>使用该主题正试图访问的指定资源、与该资源有关的授权决定、试图对该资源执行的操作以及在其中定义该操作的 XML 命名空间来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> 类的新实例。</summary>
      <param name="resource">该主题正试图访问的资源。</param>
      <param name="accessDecision">由 SAML 授权机构做出的、与该主题访问资源有关的授权决定。</param>
      <param name="actionNamespace">XML 命名空间，在其中定义了 <paramref name="action" /> 参数中指定的操作。</param>
      <param name="actionName">该主题试图对 <paramref name="resource" /> 参数中指定的资源执行的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resource" /> 为 null。 - 或 - <paramref name="actionName" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.AccessDecision">
      <summary>获取由 SAML 授权机构做出的、与该主题访问资源有关的授权决定。</summary>
      <returns>由 SAML 授权机构做出的、与该主题访问资源有关的授权决定。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName">
      <summary>获取该主题试图对 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource" /> 属性中指定的资源执行的操作。</summary>
      <returns>该主题试图对 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource" /> 属性中指定的资源执行的操作。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionNamespace">
      <summary>获取在其中定义了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName" /> 属性中指定的操作的 XML 命名空间。</summary>
      <returns>XML 命名空间，在其中定义了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName" /> 属性中指定的操作。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Equals(System.Object)">
      <summary>返回一个值，该值指示该实例是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> 并与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.GetHashCode">
      <summary>返回 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> 的哈希代码。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> 的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource">
      <summary>获取该主题正试图访问的资源。</summary>
      <returns>一个 URI，它表示该主题正试图访问的资源。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement">
      <summary>表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的一个声明，它断言已做出与该主题访问指定资源有关的授权决定。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAction})">
      <summary>使用指定的主题、资源、授权决定以及该主题试图对资源执行的操作来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 类的新实例。</summary>
      <param name="samlSubject">一个表示声明主题的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 属性。</param>
      <param name="resource">一个 URI 引用，它标识要试图访问的资源。 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource" /> 属性。</param>
      <param name="accessDecision">一个 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" />，它指定由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" /> 属性。</param>
      <param name="samlActions">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它指定主题有权对资源执行的操作集。 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlActions" /> 为 null。 - 或 - <paramref name="samlActions" /> 包含一个为 null 的成员。 - 或 - <paramref name="samlSubject" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authorityBindings" /> 包含一个为 null 的成员。 - 或 - <paramref name="resource" /> 为 null 或为空。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAction},System.IdentityModel.Tokens.SamlEvidence)">
      <summary>使用指定的主题、资源、授权决定以及该主题试图对资源执行的操作来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 类的新实例。</summary>
      <param name="samlSubject">一个表示声明主题的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 属性。</param>
      <param name="resource">一个 URI 引用，它标识要试图访问的资源。 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource" /> 属性。</param>
      <param name="accessDecision">一个 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" />，它指定由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" /> 属性。</param>
      <param name="samlActions">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它指定主题有权对资源执行的操作集。 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions" /> 属性。</param>
      <param name="samlEvidence">一个 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" />，它包含 SAML 授权机构在做出授权决定时所依赖的一组 SAML 断言。 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Evidence" /> 属性。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision">
      <summary>获取或设置由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值之一，它指定由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。 异常类型 Condition <see cref="T:System.InvalidOperationException" />设置了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" /> 属性且 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.IsReadOnly" /> 属性为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>将基于此实例的属性的声明添加指定的声明集合。</summary>
      <param name="claims">一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，包含添加操作的目标声明集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.ClaimType">
      <summary>获取安全声明的类型。</summary>
      <returns>安全声明的类型。 始终为 http://schemas.microsoft.com/mb/2005/09/ClaimType/SamlAuthorizationDecision。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Evidence">
      <summary>获取或设置 SAML 授权机构在做出授权决定时所依赖的证据。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" />，它包含 SAML 授权机构在做出授权决定时所依赖的一组 SAML 断言。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 SAML 授权语句。</summary>
      <param name="reader">一个用于读取 SAML 授权语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 引用不包含 Resource 和 Decision 属性的 XML 元素。 - 或 - <paramref name="reader" /> 引用不具有 &lt;saml:Subject&gt;、&lt;saml:Evidence&gt; 和 &lt;saml:Action&gt; 子元素的 XML 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource">
      <summary>
        <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题要试图访问的资源。</summary>
      <returns>一个 URI 引用，它标识要试图访问的资源。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions">
      <summary>获取该主题有权对资源执行的操作集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，它指定该主题有权对资源执行的操作集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 SAML 授权语句写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写 SAML 授权语句的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlCondition">
      <summary>表示一个在评估 SAML 断言的有效性时必须考虑的条件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlCondition.IsReadOnly">
      <summary>在派生类中重写时，获取一个值，指示此实例的属性是否为只读。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.MakeReadOnly">
      <summary>在派生类中重写时，使此实例为只读。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>在派生类中重写时，从指定的 XML 读取器读取条件。</summary>
      <param name="reader">一个用来读取条件的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>在派生类中重写时，将条件写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写入条件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlConditions">
      <summary>表示评估 SAML 断言的有效性时必须考虑的条件集。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor(System.DateTime,System.DateTime)">
      <summary>使用 SAML 断言有效的指定时间范围来初始化 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 类的新实例。</summary>
      <param name="notBefore">一个 <see cref="T:System.DateTime" />，指定 SAML 断言有效的最初时刻。 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotBefore" /> 属性。</param>
      <param name="notOnOrAfter">一个 <see cref="T:System.DateTime" />，指定 SAML 断言过期的时刻。 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter" /> 属性。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlCondition})">
      <summary>使用 SAML 断言有效的指定时间范围和条件来初始化 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 类的新实例。</summary>
      <param name="notBefore">一个 <see cref="T:System.DateTime" />，指定 SAML 断言有效的最初时刻。 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotBefore" /> 属性。</param>
      <param name="notOnOrAfter">一个 <see cref="T:System.DateTime" />，指定 SAML 断言过期的时刻。 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter" /> 属性。</param>
      <param name="conditions">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它指定了 SAML 断言的接收方在评估断言有效性时必须考虑的条件集。 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.Conditions" /> 属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="conditions" /> 包含一个为 null 的成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.Conditions">
      <summary>获取在评估 SAML 断言有效性时必须考虑的条件集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它指定了 SAML 断言的接收方在评估断言有效性时必须考虑的条件集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.NotBefore">
      <summary>获取 SAML 断言有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，指定 SAML 断言有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter">
      <summary>获取 SAML 断言过期的时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，指定 SAML 断言过期的时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 &lt;saml:Conditions&gt; 元素。</summary>
      <param name="reader">读取 &lt;saml:Conditions&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 &lt;saml:Conditions&gt; 元素写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写入 &lt;saml:Conditions&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlConstants">
      <summary>表示一组用于设置 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的属性的常量。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.EmailName">
      <summary>获取用于指定“将 SAML 断言的主题指定为电子邮件地址”的属性的名称。 此字段为常数。</summary>
      <returns>用于指定“将 SAML 断言的主题指定为电子邮件地址”的属性的名称。 此字段为常数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.EmailNamespace">
      <summary>获取一个 URI，它声明 SAML 断言的主题被指定为电子邮件地址。 此字段为常数。</summary>
      <returns>一个 URI，它声明 SAML 断言的主题被指定为电子邮件地址。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.HolderOfKey">
      <summary>获取一个 URI，它指定 SAML 安全令牌的接收方应使用 &lt;ds:KeyInfo&gt; 元素来确认 SOAP 消息是由 SAML 断言的主题发送的。 此字段为常数。</summary>
      <returns>一个 URI，它指定 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的接收方应使用 &lt;ds:KeyInfo&gt; 元素来确认 SOAP 消息是由 SAML 断言的主题发送的。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue">
      <summary>获取 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌所遵循的 SAML 规范的主版本。 此字段为常数。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌所遵循的 SAML 规范的主版本。 始终为 1。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue">
      <summary>获取 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌所使用的 SAML 规范的次版本。 此字段为常数。</summary>
      <returns>SAML 规范的次版本。 始终为 1。 <see cref="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue" /> 和 <see cref="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue" /> 属性的组合包含 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌所遵循的 SAML 规范的版本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.Namespace">
      <summary>获取在其中定义 SAML 断言的 XML 命名空间。 此字段为常数。</summary>
      <returns>在其中定义 SAML 断言的 XML 命名空间。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlConstants.Prefix">
      <summary>SAML 命名空间前缀。 此字段为常数。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.SenderVouches">
      <summary>获取一个 URI，它指定 SAML 安全令牌的接收方无法使用附加信息来确认 SOAP 消息是由 SAML 断言的主题发送的。 此字段为常数。</summary>
      <returns>一个 URI，指定 SAML 安全令牌的接收方无法使用附加信息来确认 SOAP 消息是由 SAML 断言的主题发送的。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.UserName">
      <summary>获取用于指定“将 SAML 断言的主题指定为 Windows 域帐户”的属性的名称。 此字段为常数。</summary>
      <returns>用于指定“将 SAML 断言的主题指定为 Windows 域帐户”的属性的名称。 此字段为常数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.UserNameNamespace">
      <summary>获取一个 URI，它表明 SAML 断言的主题是使用 Windows 域帐户指定的。 此字段为常数。</summary>
      <returns>一个 URI，表明 SAML 断言的主题是使用 Windows 域帐户指定的。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition">
      <summary>表示一个在评估 SAML 断言的有效性时必须考虑的条件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlDoNotCacheCondition.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 &lt;saml:DoNotCacheCondition&gt; 元素。</summary>
      <param name="reader">用于读取 &lt;saml:DoNotCacheCondition&gt; 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 不指向 &lt;saml:DoNotCacheCondition&gt; 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 &lt;saml:DoNotCacheCondition&gt; 元素写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写入 &lt;saml:DoNotCacheCondition&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null - 或 - <paramref name="samlSerializer" /> 为null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlEvidence">
      <summary>表示用于呈现 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的授权决定的证据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>使用指定的 SAML 断言集初始化 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> 类的新实例。</summary>
      <param name="assertions">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含 SAML 授权机构呈现授权决定时所依赖的证据。 设置 <see cref="P:System.IdentityModel.Tokens.SamlEvidence.Assertions" /> 属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertions" /> 包含一个为 null 的成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用指定的 SAML 断言引用集初始化 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> 类的新实例。</summary>
      <param name="assertionIdReferences">一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含一个 SAML 断言的标识符，该断言指定 SAML 授权机构呈现授权决定时所依赖的证据。 设置 <see cref="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences" /> 属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertionIdReferences" /> 包含一个为 null 或空的成员。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>使用一组指定的 SAML 断言引用和 SAML 断言初始化 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> 类的新实例。</summary>
      <param name="assertionIdReferences">一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含一个 SAML 断言的标识符，该断言指定 SAML 授权机构呈现授权决定时所依赖的证据。 设置 <see cref="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences" /> 属性。</param>
      <param name="assertions">一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含 SAML 授权机构呈现授权决定时所依赖的证据。 设置 <see cref="P:System.IdentityModel.Tokens.SamlEvidence.Assertions" /> 属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assertionIdReferences" /> 包含一个为 null 或空的成员。 - 或 - <paramref name="assertions" /> 包含一个为 null 的成员。 - 或 - <paramref name="assertionIdReferences" /> 和 <paramref name="assertions" /> 均为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences">
      <summary>获取 SAML 断言的标识符的集合，这些断言指定 SAML 授权机构呈现授权决定时所依赖的证据。</summary>
      <returns>一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，它包含 SAML 断言的标识符，这些断言指定 SAML 授权机构呈现授权决定时所依赖的证据。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.Assertions">
      <summary>获取 SAML 断言的集合，这些断言包含 SAML 授权机构呈现授权决定时所依赖的证据。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，它包含 SAML 授权机构呈现授权决定时所依赖的证据。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取证据。</summary>
      <param name="reader">用于读取证据的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 引用未包含至少一个 &lt;saml:AssertionIDReference&gt; 或 &lt;saml:Assertion&gt; 子元素的 XML 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将证据写入指定的 XML 序列化程序。</summary>
      <param name="writer">用于写入证据的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource">
      <summary>表示一个 SAML 安全令牌声明，它断言主题名称。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的名称、该名称所在的域以及名称采用的格式来初始化 <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> 类的新实例。</summary>
      <param name="name">主题名称。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> 属性。</param>
      <param name="nameQualifier">
        <paramref name="name" /> 参数所在的域。 设置 <see cref="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.NameQualifier" /> 属性。</param>
      <param name="format">一个 URI 引用，表示 <paramref name="name" /> 参数所使用的格式。 设置 <see cref="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Format" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Equals(System.Object)">
      <summary>返回一个值，该值指示该实例是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> 并与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Format">
      <summary>获取一个 URI 引用，它表示 SAML 安全令牌的主题名称所采用的格式。</summary>
      <returns>一个 URI 引用，它表示 SAML 安全令牌的主题名称所采用的格式。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.GetHashCode">
      <summary>返回 <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> 的哈希代码。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> 的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Name">
      <summary>获取 SAML 安全令牌的主题名称。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.NameQualifier">
      <summary>获取 SAML 安全令牌的主题名称所在的域。</summary>
      <returns>SAML 安全令牌的主题名称所在的域。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause">
      <summary>此类用于当 SamlAssertion 接收 &lt;ds:KeyInfo&gt; 元素内部无署名元素。 KeyInfo 说明了需要检查签名的密钥。 当需要该密钥时，此子句将显示到当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。 它将包含 SamlAssertion 成功读取，这能查询以确定需要的密钥。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.#ctor(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="assertion">当前所处理的断言。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.Assertion" /> 属性的值。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.Assertion">
      <summary>获取当前与此实例关联的 Saml2Assertion。</summary>
      <returns>当前与此实例关联的 SamlAssertion。 可以为 null。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityToken">
      <summary>表示基于 SAML 断言的安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.#ctor(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>使用指定的 SAML 断言初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 类的新实例。</summary>
      <param name="assertion">一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，表示此安全令牌的 SAML 断言。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion">
      <summary>获取此安全令牌的 SAML 断言。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，表示此安全令牌的 SAML 断言。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。</summary>
      <returns>如果 <paramref name="T" /> 为 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 类型，则为 true；否则为 false。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定的密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />，它是 SAML 安全令牌的密钥标识符子句。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 并不属于类型 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.Initialize(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>使用指定的 SAML 断言初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 类的属性。</summary>
      <param name="assertion">一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，表示此安全令牌的 SAML 断言。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符与指定的密钥标识符是否相等。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />，并且具有与 <see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Id" /> 属性相同的唯一标识符，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">一个要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler">
      <summary>表示安全标记处理程序，其可从 SAML 1.1 Assertions 创建安全标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.#ctor">
      <summary>使用默认安全标记需求初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.#ctor(System.IdentityModel.Tokens.SamlSecurityTokenRequirement)">
      <summary>使用指定的安全标记需求初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler" /> 类的新实例。</summary>
      <param name="samlSecurityTokenRequirement">当验证令牌时被这个实例使用的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" />。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SamlSecurityTokenRequirement" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSecurityTokenRequirement" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.AddDelegateToAttributes(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.ICollection{System.IdentityModel.Tokens.SamlAttribute},System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>将所有与 ActAs 主题相关的委托添加到特性集合中。</summary>
      <param name="subject">此 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象的委托将序列化到 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />。 该委托通过 <see cref="P:System.Security.Claims.ClaimsIdentity.Actor" /> 属性来指定。</param>
      <param name="attributes">将序列化 ActAs 标记的特性集合。</param>
      <param name="tokenDescriptor">标记描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> 为 null。 - 或 - <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Assertion">
      <summary>urn：oasis:names:tc:SAML:1.0:assertion</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.BearerConfirmationMethod">
      <summary>urn：oasis:names:tc:SAML:1.0:cm:bearer</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>指示当前 XML 元素是否可以读取为实例掌控的类型标志。</summary>
      <returns>如果 <see cref="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可读取元素，则为 true；否则，为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能将读取器前移。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanValidateToken">
      <summary>获取指示此处理程序是否能验证类型 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 的标记的值。</summary>
      <returns>true，指示该管理器可以验证类型 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 标记。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanWriteToken">
      <summary>获取一个指示此处理程序能否序列化类型 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />的标记的值。</summary>
      <returns>true；指示该管理器可以序列化类型 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 标记。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CertificateValidator">
      <summary>获取或设置当前实例用于验证 X.509 证书的 X.509 证书验证程序。</summary>
      <returns>一个表示验证程序的 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CollectAttributeValues(System.Collections.Generic.ICollection{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>使用通常声明类型、声明值类型集合特性，并使用多个值集合颁发者到单个特性。</summary>
      <returns>包含从输入集合中派生的特性的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 的集合。 输入集合中的特性不共享声明类型、声明值，或其他属性的颁发者合并为具有输出集合中多个值的一个特性。 输入集合中的特性不共享声明类型、声明值，或其他属性的颁发者保持不变的显示在输出集合中。</returns>
      <param name="attributes">包含从声明中派生的特性的类型 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 的集合。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAdvice(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>当在派生类中重写时，为该断言创建一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 对象。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 对象。 默认值为 null。</returns>
      <param name="tokenDescriptor">标记描述符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAssertion(System.String,System.IdentityModel.Tokens.SamlConditions,System.IdentityModel.Tokens.SamlAdvice,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlStatement})">
      <summary>使用指定颁发者、条件、建议和语句，创建 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 对象。 您可以重写此方法以自定义用于创建断言的参数。</summary>
      <returns>创建的 SAML 断言。</returns>
      <param name="issuer">断言的颁发者。</param>
      <param name="conditions">要添加到断言中的 <see cref="T:System.IdentityModel.Tokens.SamlConditions" />。</param>
      <param name="advice">要添加到断言中的 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" />。</param>
      <param name="statements">要添加到断言中的 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 的集合。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAttribute(System.Security.Claims.Claim,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>从声明中创建一个 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 对象。</summary>
      <returns>包含转换的声明的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />。</returns>
      <param name="claim">从 <see cref="T:System.Security.Claims.Claim" />生成 SAML “特性”。</param>
      <param name="tokenDescriptor">标记描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claim" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAttributeStatement(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.ClaimsIdentity,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>从标记说明符创建 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 对象。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 包含转换的声明。</returns>
      <param name="samlSubject">用于所创建的 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 中的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。</param>
      <param name="subject">包含将要被转换为 SAML 特性的声明的 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象。</param>
      <param name="tokenDescriptor">标记描述符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAuthenticationStatement(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.AuthenticationInformation,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建从指定的身份验证信息中创建 SAML 1.1 身份验证语句。</summary>
      <returns>生成的 SAML 授权说明。</returns>
      <param name="samlSubject">说明的 SamlSubject。</param>
      <param name="authInfo">从 <see cref="T:System.Security.Claims.AuthenticationInformation" /> 生成 SAML 身份验证语句。</param>
      <param name="tokenDescriptor">包含用于令牌颁发的所有其他信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSubject" /> 为 null。 - 或 - <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateClaims(System.IdentityModel.Tokens.SamlSecurityToken)">
      <summary>从 SAML 1.1 标记创建声明。</summary>
      <returns>包含从标志中提取的声明的 <see cref="T:System.Security.Claims.ClaimsIdentity" />。</returns>
      <param name="samlSecurityToken">一个 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />，表示用以创建声明的安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSecurityToken" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="samlSecurityToken" /> 的 <see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion" /> 属性为 null。</exception>
      <exception cref="T:System.InvalidOperationException">处理程序未注册或用于处理程序的发布者姓名注册表未被配置。<see cref="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Configuration" /> 属性为 null，<see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" />，其具有 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> 属性，值为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">用于安全标识 (<paramref name="samlSecurityToken" />) 的由配置的颁布者名称注册表返回的颁布者名称是 null 或为空。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateConditions(System.IdentityModel.Protocols.WSTrust.Lifetime,System.String,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建断言的条件。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 对象，包含该断言的条件。</returns>
      <param name="tokenLifetime">标记的生存期。</param>
      <param name="relyingPartyAddress">为其创建标记的终结点地址。 该地址建模为 AudienceRestriction 条件。</param>
      <param name="tokenDescriptor">标记描述符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateSamlSubject(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>为此断言创建 SAML 1.1 主题。</summary>
      <returns>一个表示断言主题的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。</returns>
      <param name="tokenDescriptor">为其创建主题的安全标记说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>标记没附在消息上时创建安全标记引用。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> ，表示令牌引用。实际上返回一个<see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />的实例。</returns>
      <param name="token">SAML 令牌。</param>
      <param name="attached">指示是否创建附加引用或独立引用的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateStatements(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建包含于断言中的 SAML 1.1 语句。</summary>
      <returns>包含声明的 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 的枚举。</returns>
      <param name="tokenDescriptor">用于创建语句的标记说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建基于标记说明符的安全标记。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示 SAML 1.1 安全令牌。(实际上返回一个<see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />的实例。)</returns>
      <param name="tokenDescriptor">用于创建安全标记的标记说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateWindowsIdentity(System.String)">
      <summary>使用指定用户主名称 （UPN）创建 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象。</summary>
      <returns>已创建的线程的 Windows 标识。</returns>
      <param name="upn">用来创建标识的 UPN。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="upn" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateXmlStringFromAttributes(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>从表示参与者的 SAML 1.1 特性的集合中生成一个 XML 格式的字符串。</summary>
      <returns>使用特性构造的格式良好的 XML 字符串。</returns>
      <param name="attributes">包含该特性的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 类型的枚举。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.DenormalizeAuthenticationType(System.String)">
      <summary>返回对 SAML 身份验证方法的指定的规范化值相匹配的 SAML11 身份验证方法标识符。</summary>
      <returns>匹配指定的规范化的标识符的 SAML11 授权方法标识符 (URI)。 如果未找到匹配的 SAML11 身份验证方法，则 <paramref name="normalizedAuthenticationType" /> URI 返回未更改。</returns>
      <param name="normalizedAuthenticationType">规范化的值。 <see cref="T:System.IdentityModel.Tokens.AuthenticationMethods" /> 值之一。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>如果指定标记已存在于标记重播缓存中则引发异常；否则该标记将添加到缓存中。</summary>
      <param name="token">
        <see cref="T:System.IdentityModel.Tokens.SecurityToken" />表示要检查的 SAML 1.1 安全标记（该标记应为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />类型）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。 - 或 - （通过 P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration 属性访问）处理程序的配置的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TokenReplayCache" /> 属性是<see cref="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 不能作为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 实例被转换。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">与标识相关的断言的 ID 是 null 或为空。（令牌的<see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion" />属性引用 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，它具有一个 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Id" /> 属性，这个属性引用 <see cref="T:System.IdentityModel.Tokens.SamlId" /> （该引用值具有 <see cref="P:System.IdentityModel.Tokens.SamlId.Value" /> 属性，该属性为 null 或为空。））</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">标记已存在于 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" /> 中。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.FindUpn(System.Security.Claims.ClaimsIdentity)">
      <summary>在指定的 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象中查找 UPN 声明值，目的是为了把其标志映射到 <see cref="T:System.Security.Claims.WindowsClaimsIdentity" /> 对象。</summary>
      <returns>一个字符串，其中包含找到的 UPN 声明值。</returns>
      <param name="claimsIdentity">包含所需 UPN 声明的声明标识对象。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetEncryptingCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>获取标记的加密凭据。 重写此方法以更改标记的加密凭据。</summary>
      <returns>表示标志加密凭据的 <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" />。</returns>
      <param name="tokenDescriptor">从 Scope 对象中检索某个范围加密凭据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">从标记描述符检索的加密凭据是不对称的。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetSigningCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>获取用于对断言进行签名的凭据。</summary>
      <returns>表示签名断言凭据的 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" />。</returns>
      <param name="tokenDescriptor">标记描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetTokenReplayCacheEntryExpirationTime(System.IdentityModel.Tokens.SamlSecurityToken)">
      <summary>返回直到应在标记重播缓存中保留的标记的时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示过期时间。</returns>
      <param name="token">返回过期时间的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>获取处理程序支持的标记的类型标识符。</summary>
      <returns>包含此处理程序支持的该标记的类型标识符的字符串数组。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.KeyInfoSerializer">
      <summary>获取或设置用于序列化和反序列化键标识程序的安全令牌序列化程序。</summary>
      <returns>一个表示序列化程序的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该值设置为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>从 XML 加载自定义的配置。</summary>
      <param name="customConfigElements">
        <see cref="T:System.Xml.XmlNodeList" /> 指定 SAML 标志身份验证要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfigElements" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="customConfigElements" /> 中指定的配置无效。</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Namespace">
      <summary>urn:oasis:names:tc:SAML:1.0</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.NormalizeAuthenticationType(System.String)">
      <summary>返回与 SAML 1.1 身份验证方法标识符匹配的规范化值。</summary>
      <returns>规范化的值，是 <see cref="T:System.IdentityModel.Tokens.AuthenticationMethods" /> 其中之一值。 如果不存在任何匹配的值，则 <paramref name="saml11AuthenticationMethod" /> 返回不更改。</returns>
      <param name="saml11AuthenticationMethod">要规范化的 SAML 1.1 授权方法标识符 （URI）。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAttributeStatement(System.IdentityModel.Tokens.SamlAttributeStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 1.1 特性语句中创建声明并将它们添加到指定主题。</summary>
      <param name="samlStatement">从 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 生成声明。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlStatement" /> 为 null。 - 或 - <paramref name="subject" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAuthenticationStatement(System.IdentityModel.Tokens.SamlAuthenticationStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 1.1 身份验证语句中创建声明并将它们添加到指定主题。</summary>
      <param name="samlStatement">从 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> 生成声明。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlStatement" /> 为 null。 - 或 - <paramref name="subject" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAuthorizationDecisionStatement(System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 1.1 授权决定语句中创建声明并将它们添加到指定主题。</summary>
      <param name="samlStatement">从中创建声明的 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" />。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessSamlSubject(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 1.1 主题中创建声明并将它们添加到指定主题。</summary>
      <param name="samlSubject">从中创建声明的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSubject" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessStatement(System.Collections.Generic.IList{System.IdentityModel.Tokens.SamlStatement},System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>从 SAML 1.1 语句的集合中创建声明并将它们添加到指定主题。</summary>
      <param name="statements">从其生成声明的 SAML 说明。</param>
      <param name="subject">向其添加声明的主题。</param>
      <param name="issuer">发行人。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statements" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAction(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Action&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAction" />，表示所读取的活动元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAdvice(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Advice&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" />，表示所读取的建议元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAssertion(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Assertion&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，表示所读取的断言元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttribute(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Attribute&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，表示所读取的断言元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttributeStatement(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AuthzDecisionStatement&gt; 元素或 &lt;saml:Statement&gt; 元素，其指定 saml:AttributeStatementType 的 xsi:type。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" />，表示所读取的元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttributeValue(System.Xml.XmlReader,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>读取特性值。</summary>
      <returns>包含特性值的字符串。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="attribute">正被读取的属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAudienceRestrictionCondition(System.Xml.XmlReader)">
      <summary>从指定的 XML 读取器读取 &lt;saml:AudienceRestrictionCondition&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />，表示所读取的元素。</returns>
      <param name="reader">放置在 &lt;saml:AudienceRestrictionCondition&gt; 元素的位置用于读取的一个 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthenticationStatement(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AuthnStatement&gt; 元素或 &lt;saml:Statement&gt; 元素，其指定 saml:AuthnStatementType 的 xsi:type。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" />，表示所读取的元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthorityBinding(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AuthorityBinding&gt; 元素。</summary>
      <returns>读取的 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" />。</returns>
      <param name="reader">放置在 &lt;saml:AuthorityBinding&gt; 元素的位置的一个 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> 不放置在 saml: AuthorityBinding 元素或包含一个未识别的子元素或无效的子元素。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthorizationDecisionStatement(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:AuthzDecisionStatement&gt; 元素或 &lt;saml:Statement&gt; 元素，其指定 saml:AuthzDecisionStatementType 的 xsi:type。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationStatement" />，表示所读取的元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadCondition(System.Xml.XmlReader)">
      <summary>从指定读取器读取 saml:AudienceRestrictionCondition 或 saml:DoNotCacheCondition</summary>
      <returns>从 XML 中所读取的 <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 。</returns>
      <param name="reader">从中读取元素的读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> 定位在未知元素上。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadConditions(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Conditions&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" />，表示所读取的条件元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> 不放置在条件元素上。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadDoNotCacheCondition(System.Xml.XmlReader)">
      <summary>从指定的 XML 读取器读取 saml:DoNotCacheCondition 元素。</summary>
      <returns>读取的 <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" />。</returns>
      <param name="reader">放置在 saml:DoNotCacheCondition 元素的位置的一个 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> 不放置在 saml:DoNotCacheCondition 元素上。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadEvidence(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Evidence&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" />，表示所读取的证据元素。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSigningKeyInfo(System.Xml.XmlReader,System.IdentityModel.Tokens.SamlAssertion)">
      <summary>反序列化 SAML Signing KeyInfo。</summary>
      <returns>用来表示用作检查签名的密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</returns>
      <param name="reader">可以放置在 ds:KeyInfo 元素位置的 XmlReader。</param>
      <param name="assertion">已检查签名的断言。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadStatement(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Statement&gt; 元素。</summary>
      <returns>表示读取的 Statement 元素的 <see cref="T:System.IdentityModel.Tokens.SamlStatement" />。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSubject(System.Xml.XmlReader)">
      <summary>读取 &lt;saml:Subject&gt; 元素。</summary>
      <returns>表示读取的 Subject 元素的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。</returns>
      <param name="reader">在要读取的元素指定的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSubjectKeyInfo(System.Xml.XmlReader)">
      <summary>反序列化 SAML 主题 &lt;ds:KeyInfo&gt; 元素。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示 &lt;ds:KeyInfo&gt; 元素的内容。</returns>
      <param name="reader">将 <see cref="T:System.Xml.XmlReader" /> 置于 &lt;ds:KeyInfo&gt; 元素位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>从指定流中读取 SAML 1.1 标记。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 的一个实例。</returns>
      <param name="reader">SAML 1.1 安全标志的 <see cref="T:System.Xml.XmlReader" /> 流。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。 - 或 - 由 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性指定的配置的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver" /> 属性是 null。 - 或 - 由 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性指定的配置的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> 属性是 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ResolveIssuerToken(System.IdentityModel.Tokens.SamlAssertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>将 Signing Key Identifier解析为 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示解析的安全令牌。</returns>
      <param name="assertion">为其解析颁布者令牌所的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />。</param>
      <param name="issuerResolver">当前与该处理程序关联的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assertion" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">处理程序不能解析标识。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ResolveSubjectKeyIdentifier(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>解决在 saml:Subject 元素中指定的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</summary>
      <returns>从密钥标识符解析的密钥。</returns>
      <param name="subjectKeyIdentifier">将密钥标识符解析为一个密钥。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SamlSecurityTokenRequirement">
      <summary>获取或设置此实例的安全令牌要求。</summary>
      <returns>指定要求的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该值设置为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SetDelegateFromAttribute(System.IdentityModel.Tokens.SamlAttribute,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>当检测 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 的特殊类型时调用此方法。 已传入的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 包装一个包含特性值的集合的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> (特性值在 <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Values" /> 属性中)，每一个特性值将被映射到一个声明。 所有的声明都将返回到 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 。</summary>
      <param name="attribute">要使用的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />。</param>
      <param name="subject">为此标记的主题的 <see cref="T:System.Security.Claims.ClaimsIdentity" />。</param>
      <param name="issuer">声明的颁发者。</param>
      <exception cref="T:System.InvalidOperationException">不包含任何有效特性值的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.TokenType">
      <summary>获取处理程序支持的标记的类型。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 类的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.TryResolveIssuerToken(System.IdentityModel.Tokens.SamlAssertion,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>将 Signing Key Identifier解析为 SecurityToken。</summary>
      <returns>如果标记已解决，则为 true。</returns>
      <param name="assertion">为其解析颁布者令牌所的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />。</param>
      <param name="issuerResolver">当前与该处理程序关联的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</param>
      <param name="token">当此方法返回时，如果解析标记成功，则包含已解析的安全标记。</param>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.UnspecifiedAuthenticationMethod">
      <summary>urn:oasis:names:tc:SAML:1.0:am:unspecified</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ValidateConditions(System.IdentityModel.Tokens.SamlConditions,System.Boolean)">
      <summary>验证指定的 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 对象。</summary>
      <param name="conditions">要验证的 SAML 1.1 条件。</param>
      <param name="enforceAudienceRestriction">检查观众限制条件，则为 true。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>验证标记数据并返回其声明。</summary>
      <returns>标记中包含的值标识。</returns>
      <param name="token">要验证的 SAML 1.1 标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAction(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAction)">
      <summary>写入 &lt;saml:Action&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="action">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAdvice(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAdvice)">
      <summary>写入 &lt;saml:Advice&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="advice">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="advice" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAssertion(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAssertion)">
      <summary>序列化指定的 SAML 断言到指定的 XML 编写器。</summary>
      <param name="writer">用于序列化的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="assertion">表示要序列化的断言的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="assertion" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="assertion" /> 指定的断言具有设置为 null 的 <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> 和 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReceivedEncryptingCredentials" /> 属性。 - 或 - <paramref name="data" />指定的断言中无声明和无主题。<see cref="P:System.IdentityModel.Tokens.SamlAssertion.Subject" /> 属性和 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Statements" /> 属性均为null。如果断言不包含声明，则它必须包含主题。 - 或 - 由 <paramref name="assertion" /> 指定的断言包含身份验证、特性或授权决策声明并且没有主题—这些声明需要主题。（<see cref="P:System.IdentityModel.Tokens.SamlAssertion.Statements" /> 属性包含 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" />, <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" />, 或者 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 类型的语句方法。并且，<see cref="P:System.IdentityModel.Tokens.SamlAssertion.Subject" /> 属性是 null）。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">标记的加密凭据没有指定的对称密钥。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>写入 &lt;saml:Attribute&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="attribute">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttributeStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAttributeStatement)">
      <summary>写入 &lt;saml:AttributeStatement&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="statement">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttributeValue(System.Xml.XmlWriter,System.String,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>写入 saml：特性值。</summary>
      <param name="writer">用其进行写操作的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="value">一个包含要被写入的特性值的字符串。</param>
      <param name="attribute">表示要写入的值的特性的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAudienceRestrictionCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAudienceRestrictionCondition)">
      <summary>写入 &lt;saml:AudienceRestriction&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="condition">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 在 condition 中指定的 <see cref="P:System.IdentityModel.Tokens.SamlConditions.Conditions" /> 属性是 <paramref name="null" /> 或为空集合。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthenticationStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthenticationStatement)">
      <summary>写入 &lt;saml:AuthnStatement&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="statement">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthorityBinding(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthorityBinding)">
      <summary>写入 &lt;saml:AuthorityBinding&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="authorityBinding">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authorityBinding" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthorizationDecisionStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement)">
      <summary>写入 &lt;saml:AuthzDecisionStatement&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="statement">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlCondition)">
      <summary>序列化指定的 <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 对象。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="condition">要写入的数据。 默认情况下，只支持 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 和 <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> 。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">不支持 <paramref name="condition" />。. 默认情况下，只支持 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 和 <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> 。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteConditions(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlConditions)">
      <summary>写入 &lt;saml:Conditions&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="conditions">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conditions" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteDoNotCacheCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlDoNotCacheCondition)">
      <summary>写入 &lt;saml:DoNotCacheCondition&gt; 元素。</summary>
      <param name="writer">用于写入数据的 XML 编写器。</param>
      <param name="condition">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="condition" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteEvidence(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlEvidence)">
      <summary>写入 &lt;saml:Evidence&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="evidence">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSigningKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 XML 写入器写入 Signing &lt;ds:KeyInfo&gt; 元素。</summary>
      <param name="writer">用于序列化密钥标识符的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="signingKeyIdentifier">表示要写入的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signingKeyIdentifier" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">处理程序无法序列化由 <paramref name="signingKeyIdentifier" /> 指定的键标识符。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlStatement)">
      <summary>写入 SamlStatement。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="statement">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statement" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSubject(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlSubject)">
      <summary>写入 &lt;saml:Subject&gt; 元素。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="subject">要写入的数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSubjectKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 XML 编写器序列化主题 &lt;ds:KeyInfo&gt; 元素。</summary>
      <param name="writer">用于序列化密钥标识符的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="subjectSki">表示要写入的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectSki" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>将 SAML 令牌写入指定的 XML 写入器。</summary>
      <param name="writer">用于写数据的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="token">要写入的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 不是 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 对象。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement">
      <summary>通过添加对已颁发令牌有用的新属性扩展 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor(System.Xml.XmlElement)">
      <summary>从指定的 XML 的初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> 类的新实例。</summary>
      <param name="element">要从其中加载的 XML 元素。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator">
      <summary>获取或设置与此标记要求关联的 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />。</summary>
      <returns>与标记要求有关的 X.509 证书验证程序。 默认值为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.MapToWindows">
      <summary>获取或设置指示令牌处理程序是否将使用唯一主体名 (UPN) 声明将 SAML 映射到 Windows 标识的值。</summary>
      <returns>若欲将 SAML 标识映射到 Windows 标识，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType">
      <summary>获取或设置将用于生成 FederatedIdentity.Name 属性的声明类型。</summary>
      <returns>声明类型。 默认为 <see cref="F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType" /> 字段的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType">
      <summary>获取或设置用于生成 FederatedIdentity.Roles 属性的声明类型。</summary>
      <returns>角色声明类型。 默认为 <see cref="F:System.Security.Claims.ClaimTypes.Role" /> 字段的值。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction(System.IdentityModel.Selectors.AudienceUriMode,System.IdentityModel.Tokens.SecurityToken)">
      <summary>返回指示观众执行检查是否对基于该 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" />设置的指定标记是必需的的值。</summary>
      <returns>如果应该应用 Audience Enforcement，则为 true；否则为 false。</returns>
      <param name="audienceUriMode">用来定义观众要求枚举值之一。</param>
      <param name="token">要测试的用于“观众强化”的安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction(System.Collections.Generic.IList{System.Uri},System.Collections.Generic.IList{System.Uri})">
      <summary>使用 AllowedAudienceUri 列表检查观众 URI 指定的列表。</summary>
      <param name="allowedAudienceUris">AudienceUris 的集合。</param>
      <param name="tokenAudiences">应用于观众 URI 的标志集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAudienceUris" /> 为 null。 - 或 - <paramref name="tokenAudiences" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException">
        <paramref name="tokenAudiences" /> 为空集合。 - 或 - <paramref name="allowedAudienceUris" /> 为空集合。 - 或 - 未通过验证</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSerializer">
      <summary>在 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 对象和 XML 文档之间进行序列化和反序列化操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAdvice(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定 XML 读取器读取 SAML 断言的 &lt;saml:Advice&gt; 元素中 SAML 授权机构所提供的附加信息。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" />，包含 SAML 断言的 &lt;saml:Advice&gt; 元素中 SAML 授权机构所提供的附加信息。</returns>
      <param name="reader">一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它读取 SAML 授权机构所提供的附加信息。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAssertion(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 SAML 断言。</summary>
      <returns>一个表示 SAML 断言的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />。</returns>
      <param name="reader">一个读取 SAML 断言的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAttribute(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 XML 阅读器读取 SAML 安全令牌主题的属性。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />，它表示一个声明，而该声明是 SAML 安全令牌主题的一个属性。</returns>
      <param name="reader">一个读取属性的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadCondition(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 XML 读取器读取评估 SAML 断言有效性时必须考虑的条件。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlCondition" />，它指定评估 SAML 断言有效性时必须考虑的条件。</returns>
      <param name="reader">一个读取 SAML 条件的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadConditions(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 XML 读取器读取评估 SAML 断言有效性时必须考虑的条件集。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" />，它指定评估 SAML 断言有效性时必须考虑的条件集。</returns>
      <param name="reader">一个读取 SAML 条件的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadStatement(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 XML 读取器读取 SAML 语句。</summary>
      <returns>一个表示 SAML 语句的 <see cref="T:System.IdentityModel.Tokens.SamlStatement" />。</returns>
      <param name="reader">一个读取 SAML 语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.PopulateDictionary(System.Xml.IXmlDictionary)">
      <summary>将此序列化程序能识别的 XML 元素和属性默认集替换为指定的元素和属性字典。</summary>
      <param name="dictionary">一个 <see cref="T:System.Xml.IXmlDictionary" />，包含 XML 元素和属性集。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 SAML 安全令牌。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌。</returns>
      <param name="reader">一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它读取 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为null</exception>
      <exception cref="T:System.Security.SecurityException">
        <paramref name="reader" /> 引用不包含数字签名的 XML 元素。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.WriteToken(System.IdentityModel.Tokens.SamlSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将指定的 SAML 安全令牌写入指定的 XML 序列化程序。</summary>
      <param name="token">要写入的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。</param>
      <param name="writer">一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它写入 SAML 授权语句。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为null - 或 - <paramref name="token" /> 为null</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlStatement">
      <summary>表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的声明。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌创建授权策略。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的授权策略。</returns>
      <param name="issuer">一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的颁发者。</param>
      <param name="samlAuthenticator">一个用来对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌进行身份验证的 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlStatement.IsReadOnly">
      <summary>在派生类中重写时，获取一个值，该值指示此实例的属性是否为只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>在派生类中重写时，从指定的 XML 读取器读取 SAML 语句。</summary>
      <param name="reader">读取 SAML 语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 语句中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 SAML 语句写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写入 SAML 语句的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSubject">
      <summary>表示 SAML 安全令牌的主题。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的名称、该名称所在的域以及该名称的格式初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 类的新实例。</summary>
      <param name="nameFormat">一个 URI 引用，表示 <paramref name="name" /> 参数所使用的格式。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameFormat" /> 属性。</param>
      <param name="nameQualifier">
        <paramref name="name" /> 参数所在的域。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier" /> 属性。</param>
      <param name="name">主题名称。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的名称、该名称所在的域、该名称的格式、身份验证协议、附加身份验证信息和密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 类的新实例。</summary>
      <param name="nameFormat">一个 URI 引用，表示 <paramref name="name" /> 参数所使用的格式。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameFormat" /> 属性。</param>
      <param name="nameQualifier">
        <paramref name="name" /> 参数所在的域。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier" /> 属性。</param>
      <param name="name">主题名称。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> 属性。</param>
      <param name="confirmations">一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含多个 URI 引用，这些引用标识用来验证主题身份的协议。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.ConfirmationMethods" /> 属性。</param>
      <param name="confirmationData">可供身份验证协议使用的附加身份验证信息。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.SubjectConfirmationData" /> 属性。</param>
      <param name="securityKeyIdentifier">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，提供对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题所持有的加密密钥的访问。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.KeyIdentifier" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="confirmations" /> 包含一个 null 或 <see cref="F:System.String.Empty" /> 成员。 - 或 - <paramref name="confirmations" /> 不包含任何成员，并且 <paramref name="name" /> 为 null 或为 <see cref="F:System.String.Empty" />。 - 或 - <paramref name="confirmations" /> 不包含任何成员，并且 <paramref name="confirmationData" /> 或 <paramref name="securityKeyIdentifier" /> 不为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.ConfirmationMethods">
      <summary>获取一组 URI 引用，这些引用标识要用于验证主题身份的协议。</summary>
      <returns>一个类型为 <see cref="T:System.String" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，包含一组标识用于验证主题身份的协议的 URI 引用。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.Crypto">
      <summary>获取或设置加密密钥，该密钥用于验证由此 SAML 主题语句标识的数字签名。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，其中包含用于验证 SAML 安全令牌的数字签名的加密密钥。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ExtractClaims">
      <summary>使用此类的属性获取一个声明集。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含此 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 实例所表示的声明集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ExtractSubjectKeyClaimSet(System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>使用此类的属性和指定的 SAML 安全令牌验证器获取一个声明集。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，包含此 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 实例所表示的声明集。</returns>
      <param name="samlAuthenticator">一个 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" />，它对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌中对应于 &lt;saml:Subject&gt; 元素的部分进行验证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlAuthenticator" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.KeyIdentifier">
      <summary>获取或设置一个密钥标识符，该标识符提供对 SAML 安全令牌的主题所持有的加密密钥的访问。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，提供对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题所持有的加密密钥的访问。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.Name">
      <summary>获取或设置 SAML 安全令牌的主题名称。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameClaimType">
      <summary>获取用于表示 SAML 安全令牌的主题名称的声明类型。</summary>
      <returns>用于表示 SAML 安全令牌的主题名称的声明类型 (<see cref="P:System.IdentityModel.Claims.ClaimTypes.NameIdentifier" />)。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameFormat">
      <summary>获取或设置一个 URI 引用，它表示 SAML 安全令牌的主题名称所采用的格式。</summary>
      <returns>一个 URI 引用，它表示 SAML 安全令牌的主题名称所采用的格式。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier">
      <summary>获取或设置 SAML 安全令牌的主题名称所在的域。</summary>
      <returns>SAML 安全令牌的主题名称所在的域。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>从指定的 XML 读取器读取 &lt;saml:Subject&gt; 元素。</summary>
      <param name="reader">一个用于读取 &lt;saml:Subject&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 KeyInfo 子句。</param>
      <param name="outOfBandTokenResolver">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="samlSerializer" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
        <paramref name="reader" /> 引用符合以下任一条件的 XML 元素： 包含没有值的 &lt;saml:NameIdentifier&gt; 元素。 - 或 - 包含没有值的 &lt;saml:ConfirmationMehtod&gt; 元素。 - 或 - 包含一个 &lt;saml:SubjectConfirmation&gt; 元素，但该元素连一个 &lt;saml:ConfirmationMethod&gt; 子元素都没有。 - 或 - 连一个 &lt;saml:ConfirmationMethod&gt; 或 &lt;saml:NameIdentifier&gt; 元素都不包含。</exception>
      <exception cref="T:System.Security.SecurityException">
        <paramref name="reader" /> 引用一个 XML 元素，该元素包含的某个 &lt;ds:KeyInfo&gt; 元素没有可检索的密钥。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.SubjectConfirmationData">
      <summary>获取或设置可供身份验证协议使用的附加身份验证信息。</summary>
      <returns>可供身份验证协议使用的附加身份验证信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>将 &lt;saml:Subject&gt; 元素写入指定的 XML 序列化程序。</summary>
      <param name="writer">一个用于写入 &lt;saml:Subject&gt; 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="samlSerializer">一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。</param>
      <param name="keyInfoSerializer">一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 KeyInfo 子句。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSubjectStatement">
      <summary>表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的声明。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubjectStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.#ctor(System.IdentityModel.Tokens.SamlSubject)">
      <summary>使用指定的主题初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubjectStatement" /> 类的新实例。</summary>
      <param name="samlSubject">一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />，它标识 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>根据此实例的属性将声明添加到指定的声明集合。</summary>
      <param name="claims">一个类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.Generic.IList`1" />，包含添加操作的目标声明集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claims" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌创建授权策略。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的授权策略。</returns>
      <param name="issuer">一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的颁发者。</param>
      <param name="samlAuthenticator">一个用来对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌进行身份验证的 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubjectStatement.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject">
      <summary>获取或设置 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />，它标识 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 属性已设置，而 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.IsReadOnly" /> 属性为 true。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.SetSubject(System.IdentityModel.Tokens.SamlSubject)">
      <summary>设置 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。</summary>
      <param name="samlSubject">一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />，它标识 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="samlSubject" /> 为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityAlgorithms">
      <summary>定义 URI 常数，这些常数表示用于加密 XML 和计算 SOAP 消息数字签名的加密算法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption">
      <summary>指定一个 URI，该 URI 指向用于加密 XML 的 128 位 AES 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap">
      <summary>指定一个 URI，该 URI 指向用于加密和解密对称密钥的 128 位 AES 加密算法 (Key Wrap)。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption">
      <summary>指定一个 URI，该 URI 指向用于加密 XML 的 192 位 AES 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap">
      <summary>指定一个 URI，该 URI 指向用于加密和解密对称密钥的 192 位 AES 加密算法 (Key Wrap)。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption">
      <summary>指定一个 URI，该 URI 指向用于加密 XML 的 256 位 AES 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap">
      <summary>指定一个 URI，该 URI 指向用于加密和解密对称密钥的 256 位 AES 加密算法 (Key Wrap)。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.DesEncryption">
      <summary>指定一个 URI，该 URI 指向用于加密 XML 的 DES 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature">
      <summary>指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 DSA 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.ExclusiveC14n">
      <summary>表示 XML 专用无注释规范化算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.ExclusiveC14nWithComments">
      <summary>表示 XML 专用有注释规范化算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature">
      <summary>指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 HMAC 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha256Signature">
      <summary>指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 256 位 HMAC 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation">
      <summary>表示 P-SHA1 密钥生成算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivationDec2005">
      <summary>表示 P-SHA1 密钥生成算法的 2007 年 12 月版本。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Ripemd160Digest">
      <summary>指定一个 URI，该 URI 指向 RIPEMD-160 加密摘要算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap">
      <summary>指定一个 URI，该 URI 指向用于加密和解密非对称密钥的 RSAES-OAEP-ENCRYPT 加密算法 (Key Wrap)。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature">
      <summary>指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 RSA-SHA1 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature">
      <summary>指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 RSA-SHA256 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap">
      <summary>指定一个 URI，该 URI 指向用于加密和解密非对称密钥的 RSAES-PKCS1-v1_5 加密算法 (Key Wrap)。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha1Digest">
      <summary>指定一个 URI，该 URI 指向 160 位 SHA-1 摘要算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha256Digest">
      <summary>指定一个 URI，该 URI 指向 256 位 SHA-256 摘要算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha512Digest">
      <summary>指定一个 URI，该 URI 指向 512 位 SHA-512 摘要算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.StrTransform">
      <summary>表示安全标记引用转换（STR 转换）算法。 此字段为常数。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TlsSspiKeyWrap">
      <summary>指定一个 URI，该 URI 指向用于加密和解密对称密钥的传输层安全 (TLS) 算法 (Key Wrap)。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption">
      <summary>指定一个 URI，该 URI 指向用于加密 XML 的三重 DES 加密算法。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap">
      <summary>指定一个 URI，该 URI 指向用于加密和解密对称密钥的三重 DES 加密算法 (Key Wrap)。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.WindowsSspiKeyWrap">
      <summary>指定一个 URI，该 URI 指向用于加密和解密 Kerberos 票证会话密钥的 GSS-API 加密算法 (Key Wrap)。 此字段为常数。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKey">
      <summary>安全密钥的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>在派生类中重写时，解密指定的加密密钥。</summary>
      <returns>包含解密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">用于对密钥进行加密的加密算法。</param>
      <param name="keyData">包含加密密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>在派生类中重写时，加密指定的密钥。</summary>
      <returns>包含加密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">用于对密钥进行加密的加密算法。</param>
      <param name="keyData">包含密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>在派生类中重写时，获取一个值，该值指示指定的算法是否使用非对称密钥。</summary>
      <returns>如果指定的算法使用非对称密钥，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>在派生类中重写时，获取一个指示此类是否支持指定算法的值。</summary>
      <returns>如果此类支持指定的算法，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>在派生类中重写时，获取一个指示指定的算法是否使用对称密钥的值。</summary>
      <returns>如果指定的算法使用对称密钥，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKey.KeySize">
      <summary>在派生类中重写时，获取密钥的大小（以位为单位）。</summary>
      <returns>密钥的大小（以位为单位）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyElement">
      <summary>仅当需要加密功能时，通过解析 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 或 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 提供延迟的安全密钥解析。 这允许从不使用未出现任何问题应用程序序列化和反序列化打开和关密钥标识符子句或密钥标识符。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的密钥标识符子句初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyElement" /> 类的新实例。</summary>
      <param name="securityKeyIdentifier">一个表示 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的密钥标识符。</param>
      <param name="securityTokenResolver">可以解决 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />的一个标志解析器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifier" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的密钥标识符子句初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyElement" /> 类的新实例。</summary>
      <param name="securityKeyIdentifierClause">一个表示 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的密钥标识符子句。</param>
      <param name="securityTokenResolver">可以解决 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />的一个标志解析器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])">
      <summary>使用指定的算法解密指定的密钥。</summary>
      <returns>包含解密密钥的数组。</returns>
      <param name="algorithm">用于解密密钥的算法。</param>
      <param name="keyData">包含加密密钥的数组。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])">
      <summary>使用指定的算法加密指定的密钥。</summary>
      <returns>包含加密密钥的数组。</returns>
      <param name="algorithm">用于解密密钥的算法。</param>
      <param name="keyData">包含要加密的密钥的数组。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)">
      <summary>返回一个值，该值指示指定算法是否为非对称。</summary>
      <returns>如果该算法将在运行时作为不对称处理，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)">
      <summary>返回一个值，该值指示此键是否支持指定的算法。</summary>
      <returns>如果此密钥支持对称密钥换行算法，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)">
      <summary>返回一个值，该值指示指定算法是否为对称。</summary>
      <returns>如果该算法将在运行时作为对称处理，则为 true；否则为 false。</returns>
      <param name="algorithm">要检查的算法。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyElement.KeySize">
      <summary>获取密钥的大小（以位为单位）。</summary>
      <returns>密钥大小（以位为单位）。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifier">
      <summary>表示密钥标识符。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause[])">
      <summary>使用指定的密钥标识符子句初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 类的新实例。</summary>
      <param name="clauses">一个包含密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clauses" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.Add(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>在列表末尾添加密钥标识符子句。</summary>
      <param name="clause">一个要添加到列表末尾的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clause" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.IsReadOnly" /> 属性的值为 true。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.CanCreateKey">
      <summary>获取一个值，指示是否可以为至少一个密钥标识符子句创建密钥。</summary>
      <returns>如果可以为至少一个密钥标识符子句创建密钥，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Count">
      <summary>获取密钥标识符子句数。</summary>
      <returns>密钥标识符子句数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.CreateKey">
      <summary>为密钥标识符子句之一创建密钥。</summary>
      <returns>一个表示已创建的密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。</returns>
      <exception cref="T:System.InvalidOperationException">无法为任何密钥标识符子句创建密钥。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.Find``1">
      <summary>搜索指定类型的密钥标识符子句，并返回整个集合中的第一个匹配项。</summary>
      <returns>集合中第一个具有 <paramref name="TClause" /> 参数中指定的类型的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</returns>
      <typeparam name="TClause">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示要在集合中搜索的密钥标识符子句的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="TClause" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">集合不包含具有 <paramref name="TClause" /> 参数中指定的类型的密钥标识符子句。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.GetEnumerator">
      <summary>返回一个枚举数，它循环访问密钥标识符子句集合。</summary>
      <returns>集合的一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 类型 <see cref="T:System.Collections.Generic.List`1.Enumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.IsReadOnly">
      <summary>获取一个值，该值指示此实例的属性是否是只读的。</summary>
      <returns>如果此实例的属性是只读的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Item(System.Int32)">
      <summary>获取指定索引处的密钥标识符子句。</summary>
      <returns>位于指定索引处的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</returns>
      <param name="index">密钥标识符子句集合中的密钥标识符子句的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。 - 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Count" />。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.MakeReadOnly">
      <summary>将此实例设置为只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个枚举数，它循环访问密钥标识符子句集合。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.ToString">
      <summary>返回当前对象。</summary>
      <returns>当前对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.TryFind``1(``0@)">
      <summary>搜索指定类型的密钥标识符子句，并返回一个值，指示是否可以找到该类型的子句。 如果找到一个类型，则在 out 参数中返回它。</summary>
      <returns>如果集合中存在具有 <paramref name="TClause" /> 参数中指定的类型的密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="clause">当此方法返回时，包含一个具有在 <paramref name="TClause" /> 参数中指定的类型的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，但前提是可以在集合中找到该类型的子句。 此参数未经初始化即被传递。</param>
      <typeparam name="TClause">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示要在集合中搜索的密钥标识符子句的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause">
      <summary>表示密钥标识符子句的抽象基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String)">
      <summary>使用指定的密钥标识符子句类型初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="clauseType">密钥标识符子句类型。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> 属性的值。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>使用指定的密钥标识符子句类型、Nonce 和派生密钥长度来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="clauseType">密钥标识符子句类型。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> 属性的值。</param>
      <param name="nonce">一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。</param>
      <param name="length">派生密钥的大小。 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey">
      <summary>获取一个值，该值指示是否可以创建密钥。</summary>
      <returns>如果可以创建密钥，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType">
      <summary>获取密钥标识符子句类型。</summary>
      <returns>密钥标识符子句类型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey">
      <summary>基于传入构造函数的参数创建密钥。</summary>
      <returns>一个包含已创建的密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength">
      <summary>获取派生密钥的大小。</summary>
      <returns>派生密钥的大小。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce">
      <summary>获取用于生成派生密钥的 Nonce。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，包含用于生成派生密钥的 Nonce。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id">
      <summary>获取或设置密钥标识符子句 ID。</summary>
      <returns>密钥标识符子句 ID。 默认值为 null。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 是与当前实例相同的实例，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer">
      <summary>可以序列化和反序列化密钥标识符子句的序列化程序的抽象基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>当在派生类中重写时，将返回一个值，该值指示定位指定读取器的元素是否可由处理程序读取为标识符子句。</summary>
      <returns>如果通过处理程序序列化 XML 密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="reader">放置在密匙标识符子句的开始元素的位置的一个 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>当在派生类中重写时，将返回一个值，该值指示处理程序是否可对密钥标识符子句进行序列化。</summary>
      <returns>如果密钥标识符子句可以由该处理器序列化，则为 true否则为 false。</returns>
      <param name="securityKeyIdentifierClause">要检查的密钥标识符子句。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>在派生类中重写时，通过使用指定 XML 读取器对密钥标识符子句进行反序列化。</summary>
      <returns>从 XML 反序列化的密钥标识符子句。</returns>
      <param name="reader">放置在密匙标识符子句的开始元素的位置，要读取的一个 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>在派生类中重写时，将密钥标识符子句序列化。</summary>
      <param name="writer">用于序列化密钥标识符子句的 XML 编写器。</param>
      <param name="securityKeyIdentifierClause">要序列化的密钥标识符子句 。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyType">
      <summary>指定与安全令牌关联的密钥的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.AsymmetricKey">
      <summary>指定密钥是非对称密钥。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.BearerKey">
      <summary>指定安全令牌不包含所有权证明密钥。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey">
      <summary>指定密钥是对称密钥。</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyUsage">
      <summary>指定如何使用与安全令牌相关联的密钥。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyUsage.Exchange">
      <summary>指定密钥可用于在发送方和接收方之间交换密钥。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyUsage.Signature">
      <summary>指定密钥可用于生成数字签名。</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityToken">
      <summary>表示用于实现所有安全令牌的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.#ctor">
      <summary>由派生类中的构造函数调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。</summary>
      <returns>如果 <paramref name="T" /> 为 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 类型，则为 true；否则为 false。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定的密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符能否解析为指定的密钥标识符。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，并且具有与 <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" /> 属性相同的唯一标识符，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>为指定的密钥标识符子句获取密钥。</summary>
      <returns>一个表示密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。</returns>
      <param name="keyIdentifierClause">要为其获取密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenDescriptor">
      <summary>这是所有属性的占位符与该发布标记相关</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.AddAuthenticationClaims(System.String)">
      <summary>添加指定的身份验证方法的一个声明到当前实例的主题。 身份验证时刻设置为当前时间。</summary>
      <param name="authType">一个认证方法的 URI。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.AddAuthenticationClaims(System.String,System.DateTime)">
      <summary>添加指定的身份验证类型和身份验证时刻的声明到当前实例的主题。</summary>
      <param name="authType">一个认证方法的 URI。</param>
      <param name="time">UTC 中的身份验证时刻。 如果时间不是 UTC 时间，则将其转换为 UTC 时间。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress">
      <summary>获取或设置 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 中 AppliesTo 属性的地址。</summary>
      <returns>表示该地址的绝对 URI。</returns>
      <exception cref="T:System.InvalidOperationException">尝试设置一个值的属性，该值不是绝对的 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>基于当前事例的属性设置指定 RSTR 的相应属性。</summary>
      <param name="response">应用当前实例的设置到的 RSTR。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="response" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AttachedReference">
      <summary>获取或设置当令牌附加到消息时的键标识符子句</summary>
      <returns>密钥标识符子句。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AuthenticationInfo">
      <summary>获取或设置标记的身份验证信息。</summary>
      <returns>令牌的身份验证信息。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials">
      <summary>获取或设置用于加密令牌的凭据。</summary>
      <returns>使用这些凭据加密令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime">
      <summary>获取或设置已颁发令牌的生命周期信息。</summary>
      <returns>已颁发令牌的生存期信息。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof">
      <summary>获取或设置已颁发令牌的证明修饰器，其可用于修改 RSTR 内的一些字段，如请求的证明令牌。</summary>
      <returns>证明说明符。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Properties">
      <summary>获取颁发的令牌的属性包。</summary>
      <returns>表示属性包的字典。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.ReplyToAddress">
      <summary>获取或设置 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 中 ReplyToAddress 属性的地址。</summary>
      <returns>一个表示地址的 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials">
      <summary>获取或设置用于对令牌进行签名的凭据。</summary>
      <returns>使用这些凭据签署令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject">
      <summary>获取或设置已颁发令牌中包含的输入声明。</summary>
      <returns>包含输出声明的声明标识。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token">
      <summary>获取或设置已颁发的安全性标记。</summary>
      <returns>已颁发令牌的安全性标记。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName">
      <summary>获取或设置颁发者名称，其可能还在已颁发令牌中使用。</summary>
      <returns>发行人名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenType">
      <summary>获取或设置已颁发令牌的令牌类型。</summary>
      <returns>令牌类型。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.UnattachedReference">
      <summary>当消息中没有颁发的令牌时的密钥标识符子句。</summary>
      <returns>密钥标识符子句。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenElement">
      <summary>表示编号元素，可在表示安全标记的 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 中找到。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> 对象初始化 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 类的新实例。</summary>
      <param name="securityToken">新实例表示的安全标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.#ctor(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>使用安全标识符 (XML) 的指定二进制表示形式初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> 类的新实例。</summary>
      <param name="securityTokenXml">安全令牌的 XML 表现形式。</param>
      <param name="securityTokenHandlers">用于读取和验证由新实例包装的安全标记的默认标记处理程序集合。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.GetIdentities">
      <summary>获取包含在换行标记中的标识。</summary>
      <returns>包含在标记中的标识。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.GetSecurityToken">
      <summary>获取当前实例表示的安全标记。</summary>
      <returns>当前实例表示的安全标记。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.ReadSecurityToken(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>从指定的 XML 表示形式反序列化 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</summary>
      <returns>从 XML 反序列化的安全令牌。</returns>
      <param name="securityTokenXml">安全令牌的 XML 表现形式。</param>
      <param name="securityTokenHandlers">标记处理程序集合用于读取标记。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenElement.SecurityTokenXml">
      <summary>获取换行的令牌的 XML 表示形式。</summary>
      <returns>令牌的 XML 表现形式。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.ValidateToken(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>创建包含在安全标记的指定 XML 表示形式的标识。</summary>
      <returns>包含在标记中的标识。</returns>
      <param name="securityTokenXml">安全令牌的 XML 表现形式。</param>
      <param name="securityTokenHandlers">标记处理程序集合用于读取标记。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="securityTokenXml" /> 为 null。 - 或 - <paramref name="securityTokenHandlers" /> 为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenException">
      <summary>在处理安全令牌的过程中发生问题时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含在序列化和反序列化过程中使用的值。</param>
      <param name="context">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" />，它包含有关序列化流的源和目标的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <param name="innerException">一个 <see cref="T:System.Exception" />，表示异常的根源。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenExpiredException">
      <summary>当接受到一个在过去具有过期时间的安全标识时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含在序列化和反序列化过程中使用的值。</param>
      <param name="context">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" />，它包含有关序列化流的源和目标的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <param name="inner">一个 <see cref="T:System.Exception" />，表示异常的根源。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandler">
      <summary>安全标记处理程序的抽象基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>返回指示由指定 XML 读取器引用的 XML 元素是否为由此实例反序列化的关键标识符子句的值。</summary>
      <returns>如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法可读取元素，则为 true；否则，为 false。 默认值为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能通过这种方法读取器前移。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
      <summary>返回指示指定字符串是否可以作为由此实例处理类型标记的反序列化的值。</summary>
      <returns>如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> 方法可读取元素，则为 true；否则，为 false。 默认值为 false。</returns>
      <param name="tokenString">读取的标记字符串。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>返回指示由指定 XML 读取器引用的 XML 元素是否可以作为由此实例处理类型标记的读取的值。</summary>
      <returns>如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可读取元素，则为 true；否则，为 false。 默认值为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能通过这种方法读取器前移。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
      <summary>获取一个指示该处理程序是否支持对安全标记进行验证的值。</summary>
      <returns>如果类能够验证安全标记，则为 true，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回指示指定的密钥标识符子句是否可以由此实例序列化的值。</summary>
      <returns>如果可以序列化密钥标识符子句，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="securityKeyIdentifierClause">要检查的密钥标识符子句。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
      <summary>获取一个指示该处理程序能否序列化安全标记。</summary>
      <returns>如果类能够序列化标记，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
      <summary>获取或设置提供配置当前实例的  <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 对象。</summary>
      <returns>对当前实例的配置对象。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
      <summary>获取包含当前实例的标记处理程序集合。</summary>
      <returns>包含当前实例的标记处理程序集合。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>当在派生类中重写，为该类处理的标记创建安全标记引用。 通常通过安全标记服务 (STS) 调用此方法。</summary>
      <returns>一个密钥标识符字句，该字句引用指定的令牌。</returns>
      <param name="token">创建引用的标记。</param>
      <param name="attached">如果应创建附加引用，则为 true；如果应创建独立的引用，则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>在派生类中重写时，使用指定的标记描述符创建新的安全标记。 通过安全标记服务 (STS) 调用此方法。</summary>
      <returns>与标记说明符属性匹配的安全标记。</returns>
      <param name="tokenDescriptor">令牌从其生成的安全令牌说明符。 在调用该方法之前设置标记说明符的属性。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>当在派生类中重写时，如果重播时标记删除，将引发异常。</summary>
      <param name="token">检查的重播标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>当在派生类中重写时，将返回在请求中使用的 URI 集，以标识由该派生类处理的类型标记。</summary>
      <returns>识别该处理程序支持的标识种类 URIs 集合。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
      <param name="nodelist">配置 XML 元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>当在派生类中重写时，使用指定 XML 读取器将 XML 引用的反序列化为由该类处理的主要标志符子句。</summary>
      <returns>从 XML 反序列化的密钥标识符子句。</returns>
      <param name="reader">放置在 XML 开始元素的位置，要反序列化为密匙标识符子句的 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
      <summary>当在派生类中重写时，由派生类反序列化类型处理的指定字符串。</summary>
      <returns>从指定字符串反序列化的安全标记。</returns>
      <param name="tokenString">要进行反序列化的字符串。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>当在派生类中重写时，使用指定 XML 读取器将 XML 引用的反序列化为由该类处理的类型的标记。</summary>
      <returns>从 XML 反序列化的安全令牌。</returns>
      <param name="reader">在标记的开始元素上指定的 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>当在派生类中重写时，由指定的 XML 读取器使用指定的标记解析器处理派生类类型的标记引用的 XML 进行反序列化。</summary>
      <returns>从 XML 反序列化的安全令牌。</returns>
      <param name="reader">在标记的开始元素上指定的 XML 读取器。</param>
      <param name="tokenResolver">包含带外和已缓存的标志的标志的解析器。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
      <summary>当在派生类中重写时，可获取由此实例处理的该安全标记的类型。</summary>
      <returns>这个实例处理的安全标记的类型。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
      <summary>当启用跟踪时，在安全标记的验证过程跟踪失败事件。</summary>
      <param name="token">要验证的安全令牌。</param>
      <param name="errorMessage">要写入跟踪的消息。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
      <summary>当启用跟踪时，跟踪安全标记事件的成功验证。</summary>
      <param name="token">要验证的标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>在派生类中重写时，验证指定安全标记。 该标记必须是派生类处理的类型。</summary>
      <returns>标记中包含的值标识。</returns>
      <param name="token">要验证的标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>在派生类中重写时，将密钥标识符子句序列化到 XML。 密钥标识符子句必须是派生类支持的类型。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="securityKeyIdentifierClause">要序列化的密钥标识符子句 。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>在派生类中重写时，将指定安全标记列化到字符串。 该标记必须是派生类处理的类型。</summary>
      <returns>要序列化的标记。</returns>
      <param name="token">要序列化的标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>在派生类中重写时，将指定安全标记列化到 XML。 该标记必须是派生类处理的类型。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="token">要序列化的标记。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection">
      <summary>表示安全标记处理程序的集合。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityTokenHandler})">
      <summary>使用指定的标记处理程序初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 类的新实例。</summary>
      <param name="handlers">用于初始化新实例的标记处理程序。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityTokenHandler},System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>初始化使用指定的标记处理程序和配置的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 类的新实例。</summary>
      <param name="handlers">用于初始化新实例的标记处理程序。</param>
      <param name="configuration">要与集合关联的基类配置。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>初始化指定的配置的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" />  类的新实例。</summary>
      <param name="configuration">要与集合关联的基类配置。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace(System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>向此集合添加指定的处理程序。 在指定的处理程序已存在于集合中时，如果为具有相同的标记类型标识符的处理程序，则将其替换为指定的处理程序。</summary>
      <param name="handler">要添加到集合中的标记处理程序。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>返回指示指定的密钥标识符子句是否可以由此集合中一个处理程序读取或是由基 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 读取的值。</summary>
      <returns>如果可以读取密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能将读取器前移。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>返回指示指定的密钥标识符子句是否可以由集合中一个处理程序读取或是由基 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" /> 读取的值。</summary>
      <returns>如果可以读取密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能将读取器前移。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.String)">
      <summary>返回指示指定标记的字符串表示形式是否可以由此集合中一个处理程序读取的值。</summary>
      <returns>如果该集合包含指定标记的标记处理程序，则为 true；否则为 false。</returns>
      <param name="tokenString">标记表示的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenString" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.Xml.XmlReader)">
      <summary>返回指示指定标记是否可以由此集合中一个处理程序读取的值。</summary>
      <returns>如果可以读取标记，则为 true；否则为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能将读取器前移。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>返回指示指定标记是否可以由此集合中一个处理程序序列化的值。</summary>
      <returns>如果该象征可以由其中一个处理程序序列化，则为 true；否则为 false。</returns>
      <param name="token">待序列化的安全标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems">
      <summary>清除此集合中的所有处理程序。（对基类方法的重写。）</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration">
      <summary>获取并设置此安全标记处理程序集的基本配置。</summary>
      <returns>标记管理器集合的配置。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateDefaultSecurityTokenHandlerCollection">
      <summary>创建基本安全标记处理程序的系统默认集合，各处理程序都含有系统默认配置。 该集合中的标记处理程序在使用之前，必须配置具有服务特定的数据。</summary>
      <returns>包含默认的基本安全标记处理程序的安全标记处理程序集合。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateDefaultSecurityTokenHandlerCollection(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>创建基本安全标记处理程序的系统默认集合，并把指定配置与此新集合相关联。 处理程序的每一项都有系统默认配置。 该集合中的标记处理程序在使用之前，必须配置具有服务特定的数据。</summary>
      <returns>包含默认的基本安全标记处理程序的安全标记处理程序集合。</returns>
      <param name="configuration">要与处理程序集合关联的配置。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>从指定标记描述符中创建标记。</summary>
      <returns>与标记说明符属性匹配的安全标记。</returns>
      <param name="tokenDescriptor">用于创建标记的标记说明符。 在调用该方法之前设置标记说明符的属性。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem(System.Int32,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>将指定的标记处理程序插入此集合中的指定索引处。（对基类方法的重写。）</summary>
      <param name="index">从零开始的索引，应在该位置插入处理程序。</param>
      <param name="item">插入的标记处理程序。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.IdentityModel.Tokens.SecurityToken)">
      <summary>从可以处理指定的安全标记的集合中获取标记处理程序。</summary>
      <returns>可以处理该指定的标志的标志处理程序。</returns>
      <param name="token">应为其返回处理程序的标记。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.String)">
      <summary>从可以处理指定的类型标识符的集合中获取标记处理程序。</summary>
      <returns>可以处理对应于指定类型标识符的标志的标志处理程序。</returns>
      <param name="tokenTypeIdentifier">用于标识标记类型的 URI。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.Type)">
      <summary>从该集合中获取能够处理特定标记类型的处理程序。</summary>
      <returns>可以处理该指定类型的标志的标志处理程序。</returns>
      <param name="tokenType">要处理的令牌的类型。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>从指定 XML 读取器反序列化密钥标识符子句。</summary>
      <returns>从 XML 反序列化的密钥标识符子句。</returns>
      <param name="reader">放置在 XML 开始元素的位置，要反序列化为密匙标识符子句的 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>从指定 XML 读取器反序列化密钥标识符子句。</summary>
      <returns>从 XML 反序列化的密钥标识符子句。</returns>
      <param name="reader">放置在 XML 开始元素的位置，要反序列化为密匙标识符子句的 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.String)">
      <summary>从指定的字符串反序列化 SAML 安全令牌。</summary>
      <returns>从指定字符串反序列化的标记。</returns>
      <param name="tokenString">要从其序列化标记的字符串。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.Xml.XmlReader)">
      <summary>从指定的 XML 读取器反序列化 SAML 安全令牌。</summary>
      <returns>从 XML 反序列化的安全标记。</returns>
      <param name="reader">在标记的开始元素上指定的 XML 读取器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem(System.Int32)">
      <summary>从集合中移除位于指定处理程序位置的对象。（对基类方法的重写。）</summary>
      <param name="index">要移除的处理程序的从零开始的索引。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem(System.Int32,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>替换该标记的处理程序在指定的索引中（在具有指定处理程序的集合中）。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">指定索引处的新标记处理程序。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers">
      <summary>获取标记的类型标识符列表，此标记在这个集合中由处理程序处理。</summary>
      <returns>类型识别器 URIs 的列表。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes">
      <summary>获取标记的类型列表，此标记在这个集合中由处理程序处理。</summary>
      <returns>类型的列表。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>验证指定的安全标记。</summary>
      <returns>包含在标记中的标识。</returns>
      <param name="token">要验证的标记。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>序列化指定密钥标识符子句到 XML。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="keyIdentifierClause">要序列化的密钥标识符子句 。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>序列化指定密钥标识符子句到 XML。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="keyIdentifierClause">要序列化的密钥标识符子句 。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>序列化指定安全标记到字符串。</summary>
      <returns>从标记的字符串序列化。</returns>
      <param name="token">要序列化的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">集合不包含能够序列化指定标记的处理器。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>序列化指定安全标记到 XML。</summary>
      <param name="writer">XML 编写器。</param>
      <param name="token">要序列化的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">集合不包含能够序列化指定标记的处理器。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager">
      <summary>处理多个已命名的安全标记处理程序集合的类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.#ctor(System.String)">
      <summary>为指定的已命名的服务初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 类的新实例。</summary>
      <param name="serviceName">关联服务的名称。 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ServiceName" /> 属性设置为此名称。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ContainsKey(System.String)">
      <summary>确定该实例是否包含指定用法的安全字符处理程序集合。</summary>
      <returns>如果该实例包含指定的用法的标记管理器的集合，则为 true；否则为 false。</returns>
      <param name="usage">查找标记处理程序集合的用法。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Count">
      <summary>获取由此实例管理的安全标记处理程序集合的数目。</summary>
      <returns>由此实例管理的标记处理程序集合的数目。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.CreateDefaultSecurityTokenHandlerCollectionManager">
      <summary>创建处理程序集合（该集合含有标记处理程序的默认集）的标记处理程序集合管理器。</summary>
      <returns>包含使用默认标记处理程序集合的管理器。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.CreateEmptySecurityTokenHandlerCollectionManager">
      <summary>创建空标记处理程序集合管理器。</summary>
      <returns>不包含处理程序的集合管理器。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Item(System.String)">
      <summary>返回指定用法的安全标记处理程序集合。</summary>
      <returns>与指定用法关联的标记处理程序集合。</returns>
      <param name="usage">标记处理程序集合的名称。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.SecurityTokenHandlerCollections">
      <summary>获取由此实例管理的安全标记处理程序集合。</summary>
      <returns>这个标记处理程序集合由此实例管理。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ServiceName">
      <summary>获取服务名称。</summary>
      <returns>与此实例关联的服务的名称。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage">
      <summary>定义用于框架使用的标准集合名。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.ActAs">
      <summary>用于为 ActAs 元素处理引用处理程序集合。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.Default">
      <summary>用于引用处理程序的默认集合。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.OnBehalfOf">
      <summary>用于为 OnBehalfOf 元素处理引用处理程序集合。</summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration">
      <summary>对所有安全标志处理程序进行常见配置。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction">
      <summary>获取或设置受众限制。</summary>
      <returns>用户限制。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.Caches">
      <summary>获取或设置用于此配置的缓存。</summary>
      <returns>缓存。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.CertificateValidationMode">
      <summary>获取或设置处理程序用来验证颁发者证书的 X.509 证书验证模式。</summary>
      <returns>证书验证模式。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.CertificateValidator">
      <summary>获取或设置处理程序用来验证颁发者证书的 X.509 证书验证程序。</summary>
      <returns>证书验证程序。</returns>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultCertificateValidationMode">
      <summary>指定默认 X.509 证书验证模式。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultCertificateValidator">
      <summary>指定默认 X.509 证书验证程序实例。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultDetectReplayedTokens">
      <summary>指定确定是否检查重播标记的值； false，不检查重播标记。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultIssuerNameRegistry">
      <summary>指定默认问题名称注册实例；基于配置的发行人名称注册的实例。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultIssuerTokenResolver">
      <summary>指定默认发行人标记的解析器实例。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultMaxClockSkew">
      <summary>指定默认最大时钟偏差。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultRevocationMode">
      <summary>指定默认 X.509 证书吊销模式。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultSaveBootstrapContext">
      <summary>指定是否保存启动标记； false，启动标记不会保存。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultTokenReplayCacheExpirationPeriod">
      <summary>指定默认标记的重播贮藏 过期时段。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultTrustedStoreLocation">
      <summary>指定默认 X.509 证书的受信存储区位置。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DetectReplayedTokens">
      <summary>获取或设置指示此配置中的处理程序是否应检测重播标记的值。</summary>
      <returns>如果应检查重播标记，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry">
      <summary>获取或设置此配置的颁发者名称注册表。</summary>
      <returns>颁布者名称注册表。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver">
      <summary>获取或设置此配置的颁发者令牌解析程序。</summary>
      <returns>令牌颁发者的解析器。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.MaxClockSkew">
      <summary>获取或设置使用此配置的处理程序的最大时钟偏差。</summary>
      <returns>最大时钟偏差。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.RevocationMode">
      <summary>获取或设置此配置的 X.509 吊销模式。</summary>
      <returns>X.509 吊销模式。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext">
      <summary>获取或设置指示在验证标记后，是否在 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 和会话中保存启动上下文（标记）的值。</summary>
      <returns>保存引导象征，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver">
      <summary>获取或设置要用于解析服务令牌的安全令牌解析程序。</summary>
      <returns>令牌解析器。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TokenReplayCacheExpirationPeriod">
      <summary>获取或设置令牌重播缓存中放置项目的到期期限。</summary>
      <returns>过期时段。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TrustedStoreLocation">
      <summary>获取或设置处理程序用来验证颁发者证书的 X.509 受信任存储位置。</summary>
      <returns>受信任的存储区位置。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException">
      <summary>当接受到一个在将来具有有效时间的安全标识时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含在序列化和反序列化过程中使用的值。</param>
      <param name="context">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" />，它包含有关序列化流的源和目标的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <param name="inner">一个 <see cref="T:System.Exception" />，表示异常的根源。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">
      <summary>接收已重播的安全标记时引发的异常。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含在序列化和反序列化过程中使用的值。</param>
      <param name="context">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" />，它包含有关序列化流的源和目标的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <param name="inner">一个 <see cref="T:System.Exception" />，表示异常的根源。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenTypes">
      <summary>包含一组静态属性，这些属性返回表示安全令牌类型的字符串。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Kerberos">
      <summary>获取表示基于 Kerberos 票证的安全令牌的字符串。</summary>
      <returns>一个字符串，它表示基于 Kerberos 票证的安全令牌。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Rsa">
      <summary>获取表示基于 RSA 密钥的安全令牌的字符串。</summary>
      <returns>一个字符串，它表示基于 RSA 密钥的安全令牌。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Saml">
      <summary>获取表示基于 SAML 断言的安全令牌的字符串。</summary>
      <returns>一个字符串，它表示基于 SAML 断言的安全令牌。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.UserName">
      <summary>获取表示基于用户名和密码的安全令牌的字符串。</summary>
      <returns>一个字符串，它表示基于用户名和密码的安全令牌。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.X509Certificate">
      <summary>获取表示基于 X.509 证书的安全令牌的字符串。</summary>
      <returns>一个字符串，它表示基于 X.509 证书的安全令牌。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
      <summary>接收到的安全令牌无效时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> 类的新实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含在序列化和反序列化过程中使用的值。</param>
      <param name="context">
        <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" />，它包含有关序列化流的源和目标的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> 类的新实例。</summary>
      <param name="message">标识异常发生原因的消息。</param>
      <param name="innerException">一个 <see cref="T:System.Exception" />，表示异常的根源。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityToken">
      <summary>定义包含数据与会话相关的安全标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
      <param name="info">序列化的对象数据。</param>
      <param name="context">有关源的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal)">
      <summary>从指定的主体初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
      <param name="claimsPrincipal">初始化标记的声明主体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。 - 或 - <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String)">
      <summary>用指定的主体和启动令牌初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
      <param name="claimsPrincipal">从引导标记生成的声明主体。</param>
      <param name="context">一个应用程序特定的可选上下文字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。 - 或 - <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用指定的主体和启动令牌，并结合指定的开始时间和过期时间来初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
      <param name="claimsPrincipal">从引导标记生成的声明主体。</param>
      <param name="context">一个应用程序特定的可选上下文字符串。</param>
      <param name="validFrom">标记变为有效的时间时刻。 null 若要指定<see cref="P:System.DateTime.UtcNow" /></param>
      <param name="validTo">其后时间不再有效的时间时刻。 如果为 null，则指定应通过将 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性的值添加到 <paramref name="validFrom" /> 参数指定的时间来确定值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。 - 或 - <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">无法验证 <paramref name="validFrom" /> 和 <paramref name="validTo" /> 参数；例如，<paramref name="validTo" /> 指定早于 <paramref name="validFrom" /> 发生的时间。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>用指定的主体和启动令牌，并结合指定的开始时间和过期时间来初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。 限定范围为指定的终点的新的标识。</summary>
      <param name="claimsPrincipal">从引导标记生成的声明主体。</param>
      <param name="context">一个应用程序特定的可选上下文字符串。</param>
      <param name="endpointId">此标记所绑定的终点结。 空字符串将创建未区分范围的标记。</param>
      <param name="validFrom">标记变为有效的时间时刻。 如果为 null，则指定 <see cref="P:System.DateTime.UtcNow" />。</param>
      <param name="validTo">其后时间不再有效的时间时刻。 如果为 null，则指定应通过将 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性的值添加到 <paramref name="validFrom" /> 参数指定的时间来确定值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。 - 或 - <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 null。 - 或 - <paramref name="endpointId" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">无法验证 <paramref name="validFrom" /> 和 <paramref name="validTo" /> 参数；例如，<paramref name="validTo" /> 指定早于 <paramref name="validFrom" /> 发生的时间。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.TimeSpan)">
      <summary>从指定的主体初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。 在指定生命期间从 <see cref="P:System.DateTime.UtcNow" /> 开始是合法的新的标识。</summary>
      <param name="claimsPrincipal">初始化标记的声明主体。</param>
      <param name="lifetime">当令牌有效期间从当前时间开始的期间。 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 属性将设置为 <see cref="P:System.DateTime.UtcNow" /> ，并且 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上该参数指定的时期。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。 - 或 - <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.DateTime,System.TimeSpan,System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>使用指定的主体、上下文 ID、上下文、终结点、有效时间戳、生存期和密钥初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
      <param name="claimsPrincipal">与此会话关联的声明主体。</param>
      <param name="contextId">与此标志关联的一个上下文标识符。</param>
      <param name="context">一个应用程序特定的可选上下文字符串。</param>
      <param name="endpointId">此标记所绑定的终点结。 空字符串将创建未区分范围的标记。</param>
      <param name="validFrom">标记变为有效的时间。</param>
      <param name="lifetime">会话令牌的生存期。 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上该参数指定的时期。</param>
      <param name="key">一个可选的对称会话密钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。 - 或 - <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 null。 - 或 - <paramref name="contextId" /> 为 null。 - 或 - <paramref name="endpointId" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>使用指定的主体、上下文 ID、上下文、终结点、开始时间、过期时间和密钥初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
      <param name="claimsPrincipal">与此会话关联的声明主体。</param>
      <param name="contextId">与此标志关联的一个上下文标识符。</param>
      <param name="context">一个应用程序特定的可选上下文字符串。</param>
      <param name="endpointId">此标记所绑定的终点结。 空字符串将创建未区分范围的标记。</param>
      <param name="validFrom">标记变为有效的时间时刻。 null 若要指定<see cref="P:System.DateTime.UtcNow" /></param>
      <param name="validTo">其后时间不再有效的时间时刻。 如果为 null，则指定应通过将 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性的值添加到 <paramref name="validFrom" /> 参数指定的时间来确定值。</param>
      <param name="key">一个可选的对称会话密钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。 - 或 - <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 null。 - 或 - <paramref name="contextId" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="validFrom" /> 大于等于 <paramref name="validTo" />。 - 或 - 当前时间小于 <paramref name="validTo" />。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.TimeSpan,System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>使用指定的主体、上下文 ID、上下文、终结点、生存期和密钥初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。</summary>
      <param name="claimsPrincipal">与此会话关联的声明主体。</param>
      <param name="contextId">与此标志关联的一个上下文标识符。</param>
      <param name="context">一个应用程序特定的可选上下文字符串。</param>
      <param name="endpointId">此标记所绑定的终点结。 空字符串将创建未区分范围的标记。</param>
      <param name="lifetime">会话令牌的生存期。 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 属性将设置为 <see cref="P:System.DateTime.UtcNow" /> ，并且 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上该参数指定的时期。</param>
      <param name="key">一个可选的对称会话密钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。 - 或 - <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 null。 - 或 - <paramref name="contextId" /> 为 null。 - 或 - <paramref name="endpointId" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal">
      <summary>获取与此会话关联的声明主体。</summary>
      <returns>声明主体。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.Context">
      <summary>获取用户指定上下文的值。</summary>
      <returns>用户指定上下文的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId">
      <summary>获取会话上下文标识符。</summary>
      <returns>会话上下文标识符。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId">
      <summary>获取限定此标识范围的终点 ID。</summary>
      <returns>终点的 ID。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置需要序列化会话安全标记的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">序列化的对象数据。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.Id">
      <summary>获取此标记的唯一标识符。</summary>
      <returns>令牌 ID。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent">
      <summary>获取或设置指示是否保留此标记表示的 Cookie 的值。</summary>
      <returns>如果 cookie 为持久的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode">
      <summary>获取或设置指示引用安全令牌是否在会话模式下运行的值。</summary>
      <returns>如果标记在会话模式操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime">
      <summary>获取此安全令牌有效的时间。</summary>
      <returns>密钥生效的有效时间。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime">
      <summary>获取此安全令牌失效之后的有效的时间。</summary>
      <returns>密钥到期的有效时间。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration">
      <summary>获取该标记中用于密钥生成的标识符。</summary>
      <returns>标记中生成密钥的唯一标识符。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion">
      <summary>获取一个 URI，标识用于序列化此会话安全令牌的 WS 安全会话的版本。</summary>
      <returns>一个 URI，标识用于序列化此令牌的 WS 安全会话的版本。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys">
      <summary>获取与此会话关联的键 。 这通常是一个唯一密钥。</summary>
      <returns>与会话关联的密钥。 这通常是一个唯一密钥。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom">
      <summary>获取此标记有效的时间。</summary>
      <returns>从标记变为有效的时间。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo">
      <summary>获取时间不再有效之后的有效的时间。</summary>
      <returns>标记之后的时间不再有效。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenCache">
      <summary>定义会话标记缓冲抽象类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.AddOrUpdate(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityToken,System.DateTime)">
      <summary>当在派生类中重写时，尝试将词条添加到缓存或更新现有词条。</summary>
      <param name="key">要添加或更新的项的键。</param>
      <param name="value">与入口关联的标记。</param>
      <param name="expiryTime">输入的过期时间。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Get(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>在派生类中重写时，尝试从缓存中检索词条。</summary>
      <returns>会话标识与密钥联系或在未找到匹配时为 null。</returns>
      <param name="key">要检索的项的键。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.GetAll(System.String,System.Xml.UniqueId)">
      <summary>当在派生类中重写时，将检索所有与键的标记。</summary>
      <returns>与密钥关联的会话表达式的集合。</returns>
      <param name="endpointId">要搜索的终点 ID。</param>
      <param name="contextId">要搜索的上下文 ID。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
      <param name="nodelist">自定义配置元素。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Remove(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>在派生类中实现时，尝试从缓存中移除任何词条。</summary>
      <param name="key">要移除的项的键。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String)">
      <summary>在派生类中实现时，尝试使用匹配终结点 ID 从缓存中移除所有词条。</summary>
      <param name="endpointId">要为其移除条目的终点 ID。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String,System.Xml.UniqueId)">
      <summary>在派生类中实现时，尝试从缓存中移除所有匹配词条。</summary>
      <param name="endpointId">要为其移除条目的终点 ID。</param>
      <param name="contextId">要为其移除项的上下文。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey">
      <summary>表示在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" /> 中的某一项的键。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.#ctor(System.String,System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类的新实例。</summary>
      <param name="endpointId">缓存输入被限定到终点 ID。 此应为令牌模拟的 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> 属性的值。</param>
      <param name="contextId">缓存项的上下文 ID。 此应为令牌模拟的 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId" /> 属性的值。</param>
      <param name="keyGeneration">缓存入口的密钥生成 此应为令牌模拟的 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration" /> 属性的值。 更新标记后此值可用。 当缓存一个新标记时，它将会 null。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ContextId">
      <summary>获取缓存键的上下文 ID。</summary>
      <returns>缓存键的上下文 ID。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.EndpointId">
      <summary>获取该缓存输入被限定到的 Endpoint ID。</summary>
      <returns>该缓存输入被限定到终点 ID。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.Equals(System.Object)">
      <summary>确定指定的对象是否与当前缓存键相同。</summary>
      <returns>如果指定的对象与当前的缓存键相同，则为 true；否则为 false。</returns>
      <param name="obj">要与当前缓存键进行比较的对象。 应从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />中赋值的。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.GetHashCode">
      <summary>返回当前缓存键的哈希代码。</summary>
      <returns>当前缓存键的哈希代码。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration">
      <summary>获取或设置指示执行索引比较时是否应忽略键生成的值。</summary>
      <returns>忽略关键字生成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration">
      <summary>获取缓存键的键生成</summary>
      <returns>缓存键的密钥生成</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Equality(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>实现 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类的相等运算符。</summary>
      <returns>如果缓存键相等，则为 true；否则为 false。</returns>
      <param name="first">要比较的第一个缓存键。</param>
      <param name="second">要比较的第二个缓存键。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Inequality(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>实现 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类的相等运算符。</summary>
      <returns>如果缓存键不相等，则为 true；否则为 false。</returns>
      <param name="first">要比较的第一个缓存键。</param>
      <param name="second">要比较的第二个缓存键。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ToString">
      <summary>重写 <see cref="M:System.Object.ToString" /> 以提供唯一标识符。</summary>
      <returns>字符串形式的键。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler">
      <summary>
        <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />类型的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 进程安全标志。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor">
      <summary>初始化使用默认 Cookie 转换和令牌生存期的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})">
      <summary>初始化使用指定的 cookie 转换  <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 类的新实例。</summary>
      <param name="transforms">要在编码或解码 Cookie 时应用的转换。 设置 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transforms" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)">
      <summary>初始化使用指定 Cookie 转换和令牌生存期的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 类的新实例。</summary>
      <param name="transforms">要在编码或解码 Cookie 时应用的转换。 设置 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 属性。</param>
      <param name="tokenLifetime">标牌的默认生存期。 设置 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transforms" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="tokenLifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)">
      <summary>将 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 属性指定的转换应用于对指定 Cookie 进行编码或解码。</summary>
      <returns>编码或解码的 cookie。</returns>
      <param name="cookie">将转换的 cookie。</param>
      <param name="outbound">如果应编码 cookie，则为 true；如果应解码 cookie，则为 false。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>返回一个值，该值指示读取器是否放置于 &lt;wsc:SecurityContextToken&gt; 元素处。</summary>
      <returns>如果该读取器指向 &lt;wsc:SecurityContextToken&gt; 元素，则为 true；否则为 false。</returns>
      <param name="reader">在 <see cref="T:System.Xml.XmlReader" /> 上传入 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。 读取器应定位在 &lt;wsc:SecurityContextToken&gt; 元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken">
      <summary>获取一个指示此处理程序是否支持对类型 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的标记进行验证的值。</summary>
      <returns>如果该处理器支持类型 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 标记的验证，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken">
      <summary>获取一个指示此处理程序能否写入类型 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />的标记的值。</summary>
      <returns>如果处理程序现在可以写入类型 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的标记，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName">
      <summary>获取 Cookie 元素的名称。</summary>
      <returns>Cookie 元素的名称。 默认元素名称为“Cookie”。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace">
      <summary>获取 Cookie 元素的命名空间。</summary>
      <returns>Cookie 元素的命名空间。 默认命名空间为“http://schemas.microsoft.com/ws/2006/05/security”。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)">
      <summary>创建基于指定声明主体和时间范围（在此时间范围内标记有效）的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 。</summary>
      <returns>生成的会话安全令牌。 将根据指定的参数设置新会话令牌上的属性。</returns>
      <param name="principal">声明主体。</param>
      <param name="context">调用方定义的上下文字符串。</param>
      <param name="endpointId">限定标识范围的终点的标示符。</param>
      <param name="validFrom">标记变为有效的时间时刻。</param>
      <param name="validTo">其后时间不再有效的时间时刻。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>创建基于指定标记描述符的安全令牌。</summary>
      <returns>创建的安全令牌。 这将是 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的实例。</returns>
      <param name="tokenDescriptor">用于创建标记的标记说明符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokenDescriptor" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。</exception>
    </member>
    <member name="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms">
      <summary>一个只读集合，它包含要应用于 Cookie（<see cref="T:System.IdentityModel.DeflateCookieTransform" /> 和 <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" />）的默认转换的列表。</summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime">
      <summary>一个常量，它指定 Cookie 的默认生存期为 10 小时。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime">
      <summary>获取默认的令牌生存期。</summary>
      <returns>默认的令牌生存期。 始终为 <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>获取由处理程序处理的标记类型的标记标识符 URI。</summary>
      <returns>由处理程序处理的标记类型的标识符 URI。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>从 XML 加载自定义的配置。</summary>
      <param name="customConfigElements">自定义配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfigElements" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="customConfigElements" /> 指定的配置无效。 例如，它不包含 &lt;sessionTokenRequirement&gt; 元素，而包含多个 &lt;sessionTokenRequirement&gt; 元素，不能从 lifetime 特性中读取有效 <see cref="T:System.TimeSpan" /> 值，否则 lifetime 特性将指定小于 <see cref="F:System.TimeSpan.Zero" /> 的值。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>通过使用指定的标记解析器从字节流读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。</summary>
      <returns>读取的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。</returns>
      <param name="token">包含令牌的字节流。</param>
      <param name="tokenResolver">要使用的令牌解析器。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>使用指定的 XML 读取器读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。</summary>
      <returns>读取的会话安全令牌，<see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的一个实例。</returns>
      <param name="reader">在 <see cref="T:System.Xml.XmlReader" /> 上传入 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">读取器不放置在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 或 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 无法读取。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>使用指定的 XML 读取器和标记解析程序读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。</summary>
      <returns>读取的会话安全令牌，<see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的一个实例。</returns>
      <param name="reader">在 <see cref="T:System.Xml.XmlReader" /> 上传入 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <param name="tokenResolver">可用来解决 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="tokenResolver" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">读取器不放置在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 或 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 无法读取。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})">
      <summary>设置要应用在 cookie 上的转换。</summary>
      <param name="transforms">要使用的转换。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime">
      <summary>获取或设置标记生存期。</summary>
      <returns>标记生存期。 默认值为 <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />。</returns>
      <exception cref="T:System.ArgumentException">发生设置小于或等于零的时间范围的尝试。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType">
      <summary>获取此处理程序处理的标记的类型。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms">
      <summary>获取要应用在 cookie 上的转换。</summary>
      <returns>要要应用在 cookie 上的转换列表。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>确定与指定标记相关联的会话是否有效。 通过检查指定标记的 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 和 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 确定有效性。 如果该会话不再有效，则引发异常。</summary>
      <param name="securityToken">要检查的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityToken" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException">令牌的 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 属性迟于 <see cref="P:System.DateTime.UtcNow" />。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException">该令牌的 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 属性早于 <see cref="P:System.DateTime.UtcNow" />。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>验证指定的标记并返回其声明。</summary>
      <returns>包含在标记中的标识。</returns>
      <param name="token">要验证的标记。 必须为可从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 中赋值的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" />null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 赋值。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)">
      <summary>验证指定的会话令牌并返回其声明。</summary>
      <returns>包含在标记中的标识。</returns>
      <param name="token">要验证的标记。 必须为可从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 中赋值的。</param>
      <param name="endpointId">限定标识范围的终点的标示符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。 - 或 - <paramref name="endpointId" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 赋值。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">指定令牌的 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> 属性不为 null 或空并且其值不同于 <paramref name="endpointId" /> 参数指定的值。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>将指定令牌序列化为字节数组。</summary>
      <returns>编码的字节数组。</returns>
      <param name="sessionToken">要写入的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sessiontoken" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用指定 XML 编写器序列化指定令牌。</summary>
      <param name="writer">用于序列化令牌的 XML 编写器。</param>
      <param name="token">要序列化的标记。 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 赋值。 - 或 - 令牌的 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion" /> 指定处理程序不支持的 WS 安全对话的版本。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.SigningCredentials">
      <summary>表示用于生成数字签名的加密密钥和安全算法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> 类的新实例。</summary>
      <param name="signingKey">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它包含用于生成数字签名的加密密钥。</param>
      <param name="signatureAlgorithm">一个 URI，表示用于生成数字签名的加密算法。</param>
      <param name="digestAlgorithm">一个表示加密算法的 URI，该加密算法用于计算要进行数字签名的 SOAP 消息部分的摘要。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> 类的新实例。</summary>
      <param name="signingKey">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它包含用于生成数字签名的加密密钥。</param>
      <param name="signatureAlgorithm">一个 URI，表示用于生成数字签名的加密算法。</param>
      <param name="digestAlgorithm">一个表示加密算法的 URI，该加密算法用于计算要进行数字签名的 SOAP 消息部分的摘要。</param>
      <param name="signingKeyIdentifier">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，指定表示用于创建数字签名的密钥的标识符。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm">
      <summary>获取加密算法，该加密算法用于计算要进行数字签名的 SOAP 消息部分的摘要。</summary>
      <returns>一个表示加密算法的 URI，该加密算法用于计算要进行数字签名的 SOAP 消息部分的摘要。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm">
      <summary>获取用于生成数字签名的加密算法。</summary>
      <returns>一个 URI，表示用于生成数字签名的加密算法。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SigningKey">
      <summary>获取用于生成数字签名的加密密钥。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它包含用于生成数字签名的加密密钥。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier">
      <summary>获取表示用于创建数字签名的密钥的标识符。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，指定表示用于创建数字签名的密钥的标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.SymmetricProofDescriptor">
      <summary>这种可用于发布基于标记的对称密钥。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>使用指定密钥材料初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类的新实例。</summary>
      <param name="key">在发布令牌内部使用的对称密钥。</param>
      <param name="targetWrappingCredentials">依赖的一方的密钥加密凭据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>使用指定的加密凭据初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类的新实例。</summary>
      <param name="targetWrappingCredentials">要使用的 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" />。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>使用自动生成的密钥初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类的新实例。</summary>
      <param name="keySizeInBits">对称密钥的大小。</param>
      <param name="targetWrappingCredentials">请求目标的密钥加密凭据。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>使用自动生成的密钥初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类的新实例。</summary>
      <param name="keySizeInBits">对称密钥的大小。</param>
      <param name="targetWrappingCredentials">请求目标的密钥加密凭据。</param>
      <param name="requestorWrappingCredentials">请求者的密钥加密凭据。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySizeInBits" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类的新实例用以发送联合的平均信息量。</summary>
      <param name="keySizeInBits">对称密钥的大小。</param>
      <param name="targetWrappingCredentials">请求目标的密钥加密凭据。</param>
      <param name="requestorWrappingCredentials">请求者的加密的凭据用于加密平均信息量或证明标识。</param>
      <param name="sourceEntropy">请求者的平均信息量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceEntropy" /> 为 null 或是空数组。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySize" /> 小于零。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类的新实例用以发送联合的平均信息量。</summary>
      <param name="keySizeInBits">对称密钥的大小。</param>
      <param name="targetWrappingCredentials">信赖方的加密凭据用于加密在 SecurityKeyIdentifier 属性中的键。</param>
      <param name="requestorWrappingCredentials">请求者的加密的凭据用于加密平均信息量或证明标识。</param>
      <param name="sourceEntropy">请求者的平均信息量。</param>
      <param name="encryptWith">使用加密校验密钥的 URI 算法。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySizeInBits" /> 小于或等于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceEntropy" /> 为 null 或是空数组。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)">
      <summary>使用此构造函数包含自动生成的 STS 密钥并将其作为加密密钥在证明标记中发送。 此处介绍了两种情况：1. 客户端发送平均信息量，但服务器拒绝 2.，客户端不发送平均信息量，因此只使用服务器的均信息量</summary>
      <param name="keySizeInBits">对称密钥的大小。</param>
      <param name="targetWrappingCredentials">依赖的一方的密钥加密凭据。</param>
      <param name="requestorWrappingCredentials">请求者的密钥加密凭据。</param>
      <param name="encryptWith">RST 的 &lt;EncryptWith&gt; 元素中指定的算法 (URI)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySizeInBits" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>基于证明说明符中的设置修改指定的 RSTR。</summary>
      <param name="response">要向其应用证明说明符的 RSTR。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="response" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes">
      <summary>获取密钥材料。</summary>
      <returns>一个包含密钥材料的字节数组。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy">
      <summary>在纯字节中获取源平均信息量。</summary>
      <returns>一个包含源平均信息量的字节数组。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy">
      <summary>在纯字节中获取目标平均信息量</summary>
      <returns>一个包含目标平均信息量的字节数组。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier">
      <summary>获取可在标记内部使用的键标识符，该标识符可用于定义键。 通常是二进制秘密或加密的密钥。</summary>
      <returns>密钥标识符。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials">
      <summary>获取请求方的加密凭据可能用于在响应中加密请求的证明标记或平均信息量。</summary>
      <returns>请求者的加密凭据。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials">
      <summary>获取依赖方的加密凭据可能用于在响应中加密请求的安全性。</summary>
      <returns>依赖的一方的加密凭据。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.SymmetricSecurityKey">
      <summary>表示使用对称算法生成的所有密钥的抽象基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，使用指定的加密算法和参数生成当前密钥的派生密钥。</summary>
      <returns>包含派生密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">一个 URI，表示用于生成派生密钥的加密算法。</param>
      <param name="label">一个 <see cref="T:System.Byte" /> 数组，它包含加密算法的标签参数。</param>
      <param name="nonce">一个 <see cref="T:System.Byte" /> 数组，它包含用于创建派生密钥的 Nonce。</param>
      <param name="derivedKeyLength">派生密钥的大小。</param>
      <param name="offset">派生密钥在从此方法返回的字节数组中的位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
      <summary>在派生类中重写时，获取一个使用指定的加密算法解密密码文本的转换。</summary>
      <returns>一个表示解密转换的 <see cref="T:System.Security.Cryptography.ICryptoTransform" />。</returns>
      <param name="algorithm">一种对密码文本（例如加密的 XML）进行解密的加密算法。</param>
      <param name="iv">一个 <see cref="T:System.Byte" /> 数组，它包含指定算法的初始化向量 (IV)。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
      <summary>在派生类中重写时，获取一个使用指定的加密算法加密 XML 的转换。</summary>
      <returns>一个表示加密转换的 <see cref="T:System.Security.Cryptography.ICryptoTransform" />。</returns>
      <param name="algorithm">一个对 XML 进行加密的加密算法。</param>
      <param name="iv">一个 <see cref="T:System.Byte" /> 数组，它包含指定算法的初始化向量 (IV)。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)">
      <summary>在派生类中重写时，获取指定的加密算法所需的初始化向量 (IV) 的大小（以位为单位）。</summary>
      <returns>
        <paramref name="algorithm" /> 参数中指定的加密算法所需的初始化向量 (IV) 的大小（以位为单位）。</returns>
      <param name="algorithm">用于获取初始化向量 (IV) 的大小的加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
      <summary>在派生类中重写时，获取指定的加密哈希算法的实例。</summary>
      <returns>一个表示加密哈希算法的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />。</returns>
      <param name="algorithm">要获取其实例的加密哈希算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
      <summary>在派生类中重写时，获取指定的对称算法的实例。</summary>
      <returns>一个表示对称算法的 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />。</returns>
      <param name="algorithm">要获取其实例的对称算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey">
      <summary>在派生类中重写时，获取表示对称密钥的字节。</summary>
      <returns>包含对称密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.TokenReplayCache">
      <summary>定义用于检测重播标记的缓存的方法的抽象基类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.AddOrUpdate(System.String,System.IdentityModel.Tokens.SecurityToken,System.DateTime)">
      <summary>当在派生类中重写时，尝试添加新词条或更新和现有词条。</summary>
      <param name="key">要在添加项时使用的键。</param>
      <param name="securityToken">要添加到缓存中可以是 null 的标记。</param>
      <param name="expirationTime">缓存到期的时间。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Contains(System.String)">
      <summary>当在派生类中重写时，将返回指示匹配词条是否存在于缓冲中的值。</summary>
      <returns>如果未在缓存中找到匹配的项，则 true；否则，为 false。</returns>
      <param name="key">要搜索的键。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Get(System.String)">
      <summary>在派生类中重写时，尝试获取指定的输入。</summary>
      <returns>如果未找到标记，此标记匹配密钥或 null。</returns>
      <param name="key">要搜索的键。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>在派生类中重写时，将从指定 XML 中加载自定义配置。</summary>
      <param name="nodelist">自定义配置 XML 元素。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Remove(System.String)">
      <summary>在派生类中重写时，尝试从缓存中移除词条。</summary>
      <param name="key">要移除的标识项的键。</param>
    </member>
    <member name="T:System.IdentityModel.Tokens.UserNameSecurityToken">
      <summary>表示基于用户名和密码的安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityToken.#ctor(System.String,System.String)">
      <summary>用指定的用户名和密码初始化 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 类的新实例。</summary>
      <param name="userName">用户名。 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> 属性。</param>
      <param name="password">用户名的密码。 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userName" /> 为 null。 - 或 - <paramref name="password" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityToken.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的用户名、密码和唯一标识符来初始化 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 类的新实例。</summary>
      <param name="userName">用户名。 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> 属性。</param>
      <param name="password">用户名的密码。 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password" /> 属性。</param>
      <param name="id">安全令牌的唯一标识符。 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Id" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userName" /> 为 null。 - 或 - <paramref name="password" /> 为 null。 - 或 - <paramref name="id" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password">
      <summary>获取与安全令牌关联的用户名的密码。</summary>
      <returns>与安全令牌关联的用户名的密码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName">
      <summary>获取与安全令牌关联的用户名。</summary>
      <returns>与安全令牌关联的用户名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler">
      <summary>定义抽象基类 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 进行安全标记类 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor">
      <summary>从派生类中的构造函数中调用，用于初始化 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>获取一个值，该值指示现在的 XML 元素是否可读做 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。</summary>
      <returns>如果该读取器正指向 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />，则为 true；否则为 false。</returns>
      <param name="reader">在开始元素上指定的 XML 读取器。 不能将读取器前移。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken">
      <summary>获取一个指示此处理程序能否写入类型 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的标记的值。</summary>
      <returns>如果处理程序现在可以写入类型 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的标记，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>返回用于请求辨认可由该管理器处理的标记类型的 URIs。</summary>
      <returns>识别该处理程序支持的标识种类 URIs 集合。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>从指定读取器读取 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。</summary>
      <returns>从 XML 反序列化的用户名安全标记。</returns>
      <param name="reader">在标记的开始元素上指定的 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">标记无法读取。</exception>
      <exception cref="T:System.NotSupportedException">该密码不是纯文本格式。</exception>
      <exception cref="T:System.InvalidOperationException">在安全标志中找到一个未知元素，或未指定用户名。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword">
      <summary>获取或设置指定是否在附加到由 <see cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" /> 方法返回的 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 的启动标记中保留密码的值。</summary>
      <returns>如果该密码应在引导标记中保留，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType">
      <summary>获取此处理程序处理的 <see cref="T:System.Type" /> 的标记。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的类型。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>将指定的 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 序列化为 XML。</summary>
      <param name="writer">用于序列化令牌的 XML 编写器。</param>
      <param name="token">要序列化的标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。 - 或 - <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 赋值。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.WindowsSecurityToken">
      <summary>表示基于 Windows 域或用户帐户标识的安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>使用 Windows 用户初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。</summary>
      <param name="windowsIdentity">一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsIdentity" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity,System.String)">
      <summary>使用 Windows 用户初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。</summary>
      <param name="windowsIdentity">一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</param>
      <param name="id">安全令牌的唯一标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsIdentity" /> 为 null。 - 或 - <paramref name="id" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity,System.String,System.String)">
      <summary>创建 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 的一个新实例。</summary>
      <param name="windowsIdentity">一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</param>
      <param name="id">安全令牌的唯一标识符。</param>
      <param name="authenticationType">安全令牌的身份验证类型。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.AuthenticationType">
      <summary>获取令牌的身份验证类型。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose">
      <summary>释放由 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Initialize(System.String,System.DateTime,System.DateTime,System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>使用指定的唯一标识符、Windows 用户以及安全令牌有效的最初时刻和最后时刻来初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。</summary>
      <param name="id">安全令牌的唯一标识符。 设置 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.Id" /> 属性的值。</param>
      <param name="effectiveTime">一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。 请设置 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidFrom" /> 属性的值。</param>
      <param name="expirationTime">一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。 设置 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidTo" /> 属性的值。</param>
      <param name="windowsIdentity">一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。 设置 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" /> 属性的值。</param>
      <param name="clone">若要创建与 <paramref name="windowsIdentity" /> 参数相同的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象并将其分配给 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" /> 属性，则为 true；否则，将 <paramref name="windowsIdentity" /> 参数的值分配给 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsIdentity" /> 为 null。 - 或 - <paramref name="id" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Initialize(System.String,System.String,System.DateTime,System.DateTime,System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。</summary>
      <param name="id">安全令牌的唯一标识符。</param>
      <param name="authenticationType">安全令牌的身份验证类型。</param>
      <param name="effectiveTime">一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</param>
      <param name="expirationTime">一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</param>
      <param name="windowsIdentity">表示 Windows 用户。</param>
      <param name="clone">若要创建与 <paramref name="windowsIdentity" /> 参数相同的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象并将其分配给 <paramref name="WindowsIdentity" /> 属性，则为 true；否则，将 <paramref name="windowsIdentity" /> 参数的值分配给 <paramref name="WindowsIdentity" /> 属性。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.ThrowIfDisposed">
      <summary>如果已为此实例调用了 <see cref="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose" /> 方法，则会引发异常。</summary>
      <exception cref="T:System.ObjectDisposedException">已为此实例调用了 <see cref="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose" /> 方法。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity">
      <summary>获取与此安全令牌关联的 Windows 用户。</summary>
      <returns>一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler">
      <summary>定义Windows用户标记 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 过程 Windows 用户名象征。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.CanValidateToken">
      <summary>获取一个值，该值指示此处理程序是否支持对类型 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的标记进行验证的值。</summary>
      <returns>如果该处理器支持类型 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 标记的验证，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>验证指定的标记并返回其声明。</summary>
      <returns>包含在标记中的标识。</returns>
      <param name="token">要验证的标记。 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 赋值。 - 或 - 指定标识的 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> 属性不是 user\domain 的形式。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">LogonUser 使用指定的令牌失败。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey">
      <summary>表示 X.509 证书的非对称密钥。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" /> 类的新实例。</summary>
      <param name="certificate">表示 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>使用指定的加密算法解密指定的加密密钥。</summary>
      <returns>包含解密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">用于解密密钥的加密算法。</param>
      <param name="keyData">包含加密密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <exception cref="T:System.NotSupportedException">构造函数中指定的 X.509 证书不具有私钥。 - 或 - X.509 证书具有私钥，但它不是使用 <see cref="T:System.Security.Cryptography.RSA" /> 算法生成的。 - 或 - X.509 证书具有私钥，并且是使用 <see cref="T:System.Security.Cryptography.RSA" /> 算法生成的，但是 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm" /> 属性为 null。 - 或 - 不支持 <paramref name="algorithm" /> 参数。 支持的算法为 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> 和 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>使用指定的加密算法加密指定的加密密钥。</summary>
      <returns>包含加密密钥的 <see cref="T:System.Byte" /> 数组。</returns>
      <param name="algorithm">用于加密密钥的加密算法。</param>
      <param name="keyData">包含要加密的密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <exception cref="T:System.NotSupportedException">构造函数中指定的 X.509 证书所具有的公钥不是使用 <see cref="T:System.Security.Cryptography.RSA" /> 算法生成的。 - 或 - 不支持 <paramref name="algorithm" /> 参数。 支持的算法为 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> 和 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>获取指定的非对称加密算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />，表示指定的非对称加密算法。</returns>
      <param name="algorithm">要创建的非对称算法。</param>
      <param name="privateKey">如果需要使用私钥来创建算法，则为 true；否则为 false。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="privateKey" /> 为 true，并且构造函数中指定的 X.509 证书不具有私钥。 - 或 - <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />，并且构造函数中指定的 X.509 证书的公钥或私钥类型不是 <see cref="T:System.Security.Cryptography.DSA" />。 - 或 - <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />，并且构造函数中指定的 X.509 证书的公钥或私钥类型不是 <see cref="T:System.Security.Cryptography.RSA" />。 - 或 - 不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>获取用于生成数字签名的哈希值的加密算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.HashAlgorithm" />，它生成数字签名的哈希值。</returns>
      <param name="algorithm">哈希算法。</param>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>获取数字签名的反格式化程序算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的反格式化程序算法。</returns>
      <param name="algorithm">要获取其实例的数字签名的反格式化程序算法。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />，并且构造函数中指定的 X.509 证书的公钥类型不是 <see cref="T:System.Security.Cryptography.DSA" />。 - 或 - <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />，并且构造函数中指定的 X.509 证书的公钥类型不是 <see cref="T:System.Security.Cryptography.RSA" />。 - 或 - 不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
      <summary>获取数字签名的格式化程序算法。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的格式化程序算法。</returns>
      <param name="algorithm">要获取其实例的数字签名的格式化程序算法。</param>
      <exception cref="T:System.NotSupportedException">构造函数中指定的 X.509 证书不具有私钥。 - 或 - <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />，并且构造函数中指定的 X.509 证书的私钥类型不是 <see cref="T:System.Security.Cryptography.DSA" />。 - 或 - <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />，并且构造函数中指定的 X.509 证书的私钥类型不是 <see cref="T:System.Security.Cryptography.RSA" />。 - 或 - 不支持 <paramref name="algorithm" />。 支持的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey">
      <summary>获取一个值，该值指示该私钥是否可用。</summary>
      <returns>如果私钥可用，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>获取一个值，该值指示指定的算法是否使用非对称密钥。</summary>
      <returns>如果指定的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" />，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>获取一个值，该值指示此类是否支持指定的算法。</summary>
      <returns>如果指定的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />，并且公钥的类型是正确的，则为 true；否则为 false。 有关详细信息，请参见备注。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>获取一个值，该值指示指定的算法是否使用对称密钥。</summary>
      <returns>如果指定的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />，则为 true；否则为 false。</returns>
      <param name="algorithm">加密算法。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize">
      <summary>获取与 X.509 证书关联的公钥的大小（以位为单位）。</summary>
      <returns>与 X.509 证书关联的公钥的大小（以位为单位）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver">
      <summary>表示标记解析程序，其了对照指定的 X.509 证书存储解析 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 类型的标记。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor">
      <summary>使用指定的默认 X.509 证书存储初始化 <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>使用用以令牌解析程序的指定位置和名称的 X.509 证书储存区来初始化 <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> 类的新实例。</summary>
      <param name="storeName">指定 X.509 证书存储区名称的枚举值之一。</param>
      <param name="storeLocation">指定 X.509 证书存储区位置的枚举值之一。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>使用用以令牌解析程序的指定位置和名称的 X.509 证书储存区来初始化 <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> 类的新实例。</summary>
      <param name="storeName">X.509 证书存储区的名称。</param>
      <param name="storeLocation">指定 X.509 证书存储区位置的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="storeLocation" /> 为 null 或空字符串。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation">
      <summary>获取被该标记解析器使用的 X.509 证书存储区的位置。</summary>
      <returns>指定 X.509 证书存储区位置的枚举值之一。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName">
      <summary>获取被该标记解析器使用的 X.509 证书存储区的名称。</summary>
      <returns>被此令牌解析器所使用的 X.509 证书存储的名称。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>尝试解析指定的密钥标识符字句为一个安全密钥。</summary>
      <returns>如果已成功解析密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">从密钥标识符子句解析安全密钥。</param>
      <param name="key">当此方法返回时，包含从密钥标识符子句解析的安全密钥。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>将指定的密钥标识符解析为安全令牌。</summary>
      <returns>如果已成功解析密钥标识符，则为 true；否则为 false。</returns>
      <param name="keyIdentifier">要解决的密钥标识符。</param>
      <param name="token">当此方法返回时，包含从密钥标识符解析的安全标记。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifier" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>将指定的密钥标识符子句解析为安全令牌。</summary>
      <returns>如果已成功解析密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要解决的密钥标识符子句。</param>
      <param name="token">当此方法返回时，包含从密钥标识符子句解析的安全标记。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer">
      <summary>表示 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer" />，其可处理 X.509 证书参考类型。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>返回一个值，该值指示指定读取器是否放置于 &lt;ds:X509Data&gt; 元素处。</summary>
      <returns>如果在一 &lt;ds:X509Data&gt; 元素中引用了该读取器，则为 true；否则为 false。</returns>
      <param name="reader">放置在密匙标识符子句的开始元素的位置的一个 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回指示指定的密钥标识符子句是否可以由此处理程序序列化的值。</summary>
      <returns>如果此处理器支持密钥标识符子句，则为 true否则为 false。</returns>
      <param name="securityKeyIdentifierClause">要检查的密钥标识符子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>从 XML 使用指定 XML 读取器反序列化密钥标识符子句。</summary>
      <returns>从 XML 反序列化的密钥标识符子句时或者 null （密钥标识符子句无法读取时）。</returns>
      <param name="reader">放置在密匙标识符子句的开始元素的位置，要读取的一个 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="reader" /> 不放置在 &lt;ds:X509Data&gt; 元素上。（<see cref="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法返回false。）</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>序列化指定密钥标识符子句。</summary>
      <param name="writer">用于序列化密钥标识符子句的 XML 编写器。</param>
      <param name="securityKeyIdentifierClause">要序列化的密钥标识符子句 。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。 - 或 - <paramref name="securityKeyIdentifierClause" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityKeyIdentifierClause" /> 不属于受支持的子句类型。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509EncryptingCredentials">
      <summary>表示 X.509 标记，其用作加密凭据。 此类通常用作密钥包装凭据。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 X.509 证书和安全密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书。</param>
      <param name="ski">安全密钥标识符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>根据指定的 X.509 证书、密钥包装算法、密钥大小和安全密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书。</param>
      <param name="ski">安全密钥标识符。</param>
      <param name="keyWrappingAlgorithm">密钥包装算法。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
      <summary>根据指定的 X.509 证书和密钥包装算法初始化 <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书。</param>
      <param name="keyWrappingAlgorithm">密钥包装算法。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509EncryptingCredentials.Certificate">
      <summary>获取 X.509 证书。</summary>
      <returns>X.509 证书。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause">
      <summary>表示一个密钥标识符子句，它使用证书颁发者的可分辨名称和 X.509 证书的序列号来标识 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.#ctor(System.String,System.String)">
      <summary>使用指定的证书颁发者可分辨名称和 X.509 证书的序列号初始化 <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="issuerName">颁发 X.509 证书的证书颁发机构的可分辨名称。 设置 <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName" /> 属性的值。</param>
      <param name="issuerSerialNumber">X.509 证书的序列号。 设置 <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuerName" /> 为 null。 - 或 - <paramref name="issuerSerialNumber" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName">
      <summary>获取颁发 X.509 证书的证书颁发机构的可分辨名称。</summary>
      <returns>颁发 X.509 证书的证书颁发机构的可分辨名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber">
      <summary>获取 X.509 证书的序列号。</summary>
      <returns>X.509 证书的序列号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的密钥标识符相匹配。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> 类型，并且密钥标识符子句匹配，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的 X.509 证书相匹配。</summary>
      <returns>如果 <paramref name="certificate" /> 具有与当前实例相同的颁发者名称和颁发者序列号，则为 true；否则为 false。</returns>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />，包含要进行比较的 X.509 证书。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.String,System.String)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的颁发者名称和颁发者序列号相同。</summary>
      <returns>如果 <paramref name="issuerName " />和 <paramref name="issuerSerialNumber" /> 参数与 <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName" /> 和 <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber" /> 属性匹配，则为 true；否则为 false。</returns>
      <param name="issuerName">颁发 X.509 证书的证书颁发机构的可分辨名称。</param>
      <param name="issuerSerialNumber">X.509 证书的序列号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.ToString">
      <summary>返回当前对象。</summary>
      <returns>一个表示当前对象的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator">
      <summary>表示 X.509 证书验证程序，其将验证指定的 X.509 证书和验证证书是否可映射至 Windows 帐户以及证书链是否可信。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.#ctor(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>初始化 <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" /> 类的新实例。</summary>
      <param name="useMachineContext">使用位置计算机上下文生产证书链，则为 true；否则为 false。</param>
      <param name="chainPolicy">要在生成 X.509 证书链时要使用的链策略。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>验证指定的 X.509 证书。</summary>
      <param name="certificate">要验证的 X.509 证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">X.509 证书验证失败的验证。</exception>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause">
      <summary>表示一个密钥标识符子句，它使用 X.509 证书的原始数据标识 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>使用指定的 X.509 证书原始数据初始化 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="certificateRawData">包含 X.509 证书的原始数据的 <see cref="T:System.Byte" /> 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificateRawData" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="certificateRawData" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.CanCreateKey">
      <summary>获取一个值，该值指示是否可以从 X.509 证书的原始数据或从构造函数中指定的字节数组来创建密钥。</summary>
      <returns>任何情况下都为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.CreateKey">
      <summary>从 X.509 证书的原始数据或从构造函数中指定的字节数组创建密钥。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" />，它包含与 X.509 证书相关联的密钥。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.GetX509RawData">
      <summary>获取与 X.509 证书相关联的原始数据。</summary>
      <returns>包含与 X.509 证书相关联的原始数据的 <see cref="T:System.Byte" /> 数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定的 X.509 证书相等。</summary>
      <returns>如果 <paramref name="certificate" /> 具有与当前实例相匹配的原始数据，则为 true；否则为 false。</returns>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />，包含要进行比较的 X.509 证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.ToString">
      <summary>返回当前对象。</summary>
      <returns>一个表示当前对象的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SecurityToken">
      <summary>表示基于 X.509 证书的安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 类的新实例。</summary>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
      <summary>使用指定的 X.509 证书和唯一标识符初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 类的新实例。</summary>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate" /> 属性。</param>
      <param name="id">安全令牌的唯一标识符。 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Id" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。 - 或 - <paramref name="id" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。</summary>
      <returns>如果 <paramref name="T" /> 的类型为 <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />、<see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" />、<see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> 或 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" />，则为 true；否则为 false。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate">
      <summary>获取与安全令牌关联的 X.509 证书。</summary>
      <returns>一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建指定的密钥标识符子句。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。</returns>
      <typeparam name="T">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.Dispose">
      <summary>释放由 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.Id">
      <summary>获取安全令牌的唯一标识符。</summary>
      <returns>安全令牌的唯一标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回一个值，该值指示此实例的密钥标识符与指定的密钥标识符是否相等。</summary>
      <returns>如果 <paramref name="keyIdentifierClause" /> 为 <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />、<see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" />、<see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> 或 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> 类型之一，并且密钥标识符子句匹配，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">一个要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.SecurityKeys">
      <summary>获取与安全令牌相关联的加密密钥。</summary>
      <returns>一个类型为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含与安全令牌相关联的密钥集。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed">
      <summary>如果已为此实例调用了 <see cref="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed" /> 方法，则会引发异常。</summary>
      <exception cref="T:System.ObjectDisposedException">已为此实例调用了 <see cref="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed" /> 方法。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.ValidFrom">
      <summary>获取此安全令牌有效的最初时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.ValidTo">
      <summary>获取此安全令牌有效的最后时刻。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SecurityTokenHandler">
      <summary>表示安全标记处理程序，请处理 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 类型的标记。 默认情况下，该处理程序将执行 X.509 证书的链信任验证。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.Boolean)">
      <summary>使用指定的证书验证方法初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> 类的新实例，并指示是否将证书标识映射到 Windows 账户。</summary>
      <param name="mapToWindows">如果证书应映射到 Windows 帐户，则为 true；否则为 false。 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.Boolean,System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>使用指定的证书验证方法初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> 类的新实例，并指示是否将证书标识映射到 Windows 账户和指定的证书验证程序。</summary>
      <param name="mapToWindows">如果证书应映射到 Windows 帐户，则为 true；否则为 false。 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows" /> 属性。</param>
      <param name="certificateValidator">要使用的证书验证程序。 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>使用指定的证书验证程序初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> 类的新实例。</summary>
      <param name="certificateValidator">要使用的证书验证程序。 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator" /> 属性。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>返回一个值，该值指示指定读取器是否引用 &lt;ds:X509Data&gt; 元素。</summary>
      <returns>如果在一 &lt;ds:X509Data&gt; 元素中引用了该读取器，则为 true；否则为 false。</returns>
      <param name="reader">放置在密匙标识符子句的开始元素的位置的一个 XML 读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>返回指示该读者是否指向在 ws-security 规范定义的 X.509 安全标记的值。</summary>
      <returns>如果读取器正指向 X.509 安全标记，则为 true；否则为 false。</returns>
      <param name="reader">指向标记 XML 的读者。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanValidateToken">
      <summary>获取一个指示此处理程序是否支持对类型 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 的标记进行验证的值。</summary>
      <returns>如果该处理器支持类型 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 标记的验证，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>返回指示指定的密钥标识符子句是否可以由此处理程序序列化的值。</summary>
      <returns>如果支持 <paramref name="securityKeyIdentifierClause" /> 且如果将 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes" /> 属性设置为 true，则为 true，否则为 false。</returns>
      <param name="securityKeyIdentifierClause">要序列化的密钥标识符子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifierClause" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanWriteToken">
      <summary>获取一个指示此处理程序能否写入类型 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 的标记的值。</summary>
      <returns>如果处理程序现在可以写入类型 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 的标记，则为 true；否则为 false。 始终为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator">
      <summary>获取或设置当前实例所使用的 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 。</summary>
      <returns>当前实例使用的 X.509 证书验证程序。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>获取 WS-Security X.509 标记配置文件中定义的 X.509 安全标记类型。</summary>
      <returns>X.509 令牌类型 URI。 默认情况下，<see cref="P:System.IdentityModel.Tokens.SecurityTokenTypes.X509Certificate" /> 属性的值。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>从 XML 加载自定义的配置。</summary>
      <param name="customConfigElements">包含自定义配置的 XML 元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customConfigElements" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定自定义配置无效。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows">
      <summary>获取或设置指示验证令牌是否应映射到 Windows 帐户的值。</summary>
      <returns>如果验证标记应映射到 Windows 帐户，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>指定 XML 读取器所引用的反序列化密钥标识符子句。</summary>
      <returns>从 XML 反序列化的密钥标识符子句。</returns>
      <param name="reader">XML 读取器引用的密钥标识符子句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>反序列化指定 XML 读取器所引用的 X.509 安全标记。</summary>
      <returns>从 XML 反序列化的安全标记。 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 的一个实例。</returns>
      <param name="reader">一个 XML 读取器指向 X.509 安全标记。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> 不指向一个合法的 X.509 安全标记（如 ws-security X.509 标记配置文件定义）。 或则除了指定的 encodingType 是 Base64 or HexBinary 之外。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.TokenType">
      <summary>获取此处理程序处理的 <see cref="T:System.Type" /> 的标记。</summary>
      <returns>默认情况下，<see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 类的类型。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>验证指定的 X.509 安全标记。</summary>
      <returns>标记中包含的值标识。</returns>
      <param name="token">要验证的标记。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 赋值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 null。 - 或 - 没有 (<see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" />) 的颁发者名称注册表配置。<see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性所引用的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> 属性为 null。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">当前 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 无法验证标记中的证书。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">在尝试解析标记中的证书颁发者时，当前 <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> 返回 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>序列化指定密钥标识符子句到 XML 编写器。</summary>
      <param name="writer">应位于序列化密钥标识符子句的 XML 编写器。</param>
      <param name="securityKeyIdentifierClause">要序列化的密钥标识符子句 。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityKeyIdentifierClause" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes" /> 属性为 false。</exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>将指定的 X.509 安全标记序列化到指定的 XML 编写器。</summary>
      <param name="writer">应将令牌序列化为的 XML 编写器 。</param>
      <param name="token">X.509 安全令牌将进行序列化。 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。 - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 无法从 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 赋值。</exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes">
      <summary>获取或设置指定 XmlDsig-defined 子句类型是否是首选项的值。</summary>
      <returns>如果优先 XmlDsig 定义的项类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.X509NTAuthChainTrustValidator">
      <summary>获取或设置当传入 X.509 证书映射至 windows 帐户时，证书验证过程中当前实例使用的 <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" />。</summary>
      <returns>X.509 证书验证程序，其将验证指定的 X.509 证书并验证证书是否可映射至 Windows 帐户以及证书链是否可信。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SigningCredentials">
      <summary>表示 X.509 标记，其用作签名凭据。</summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>使用指定的 X.509 证书和安全密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书。</param>
      <param name="ski">安全密钥标识符。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)">
      <summary>根据指定的 X.509 证书、安全密钥标识符、签名算法和摘要算法初始化 <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书。</param>
      <param name="ski">安全密钥标识符。</param>
      <param name="signatureAlgorithm">签名算法。</param>
      <param name="digestAlgorithm">摘要算法。</param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)">
      <summary>根据指定的 X.509 证书、签名算法和摘要算法初始化 <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书。</param>
      <param name="signatureAlgorithm">签名算法。</param>
      <param name="digestAlgorithm">摘要算法。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SigningCredentials.Certificate">
      <summary>获取 X.509 证书。</summary>
      <returns>X.509 证书。</returns>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause">
      <summary>表示一个密钥标识符子句，它使用 X.509 证书的主题密钥标识符扩展来标识 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>使用指定的主题密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="ski">一个 <see cref="T:System.Byte" /> 数组，它包含主题密钥标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ski" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.CanCreateFrom(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>获取一个值，该值指示是否可以为指定的 X.509 证书创建密钥标识符子句。</summary>
      <returns>如果可以为 <paramref name="certificate" /> 创建密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.GetX509SubjectKeyIdentifier">
      <summary>获取主题密钥标识符。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，它包含主题密钥标识符。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否与指定 X.509 证书的密钥标识符等效。</summary>
      <returns>如果 <paramref name="certificate" /> 与当前实例具有相同的主题密钥标识符，则为 true；否则为 false。</returns>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />，包含要进行比较的 X.509 证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>一个表示当前对象的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.TryCreateFrom(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause@)">
      <summary>使用指定的 X.509 证书创建密钥标识符子句。</summary>
      <returns>如果可以为指定的 X.509 证书创建密钥标识符子句，则为 true；否则为 false。</returns>
      <param name="certificate">要为其创建密钥标识符子句的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <param name="keyIdentifierClause">当此方法返回时，它包含一个表示密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause">
      <summary>表示一个密钥标识符子句，它使用 X.509 证书的指纹来标识 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>使用 X.509 证书的指定指纹初始化 <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="thumbprint">一个 <see cref="T:System.Byte" /> 数组，包含 X.509 证书的指纹。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="thumbprint" /> 为 null。 - 或 - <paramref name="thumbprint" /> 长度为零。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.GetX509Thumbprint">
      <summary>返回 X.509 证书的指纹。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，包含 X.509 证书的指纹。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>返回一个值，该值指示此实例的密钥标识符是否等效于指定 X.509 证书的指纹。</summary>
      <returns>如果 <paramref name="certificate" /> 与当前实例含有相同的指纹，则为 true；否则为 false。</returns>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />，包含要进行比较的 X.509 证书。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>一个表示当前对象的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509WindowsSecurityToken">
      <summary>表示基于 X.509 证书的安全令牌以及将证书映射到 Windows 域用户或本地计算机用户帐户。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity)">
      <summary>使用指定的 X.509 证书和 Windows 域或计算机帐户来初始化 <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> 类的新实例。</summary>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <param name="windowsIdentity">一个 <see cref="T:System.Security.Principal.WindowsIdentity" />，表示 Windows 域或计算机帐户的标识。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity,System.String)">
      <summary>使用指定的 X.509 证书、Windows 域或计算机帐户以及唯一标识符来初始化 <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> 类的新实例。</summary>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <param name="windowsIdentity">一个 <see cref="T:System.Security.Principal.WindowsIdentity" />，表示 Windows 域或计算机帐户的标识。</param>
      <param name="id">安全令牌的唯一标识符。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity,System.String,System.String)">
      <summary>创建 <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> 的一个新实例。</summary>
      <param name="certificate">一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <param name="windowsIdentity">标识 Windows 域或计算机帐户的标识。</param>
      <param name="authenticationType">令牌的身份验证类型。</param>
      <param name="id">安全令牌的唯一标识符。</param>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509WindowsSecurityToken.AuthenticationType">
      <summary>获取令牌的身份验证类型。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.Dispose">
      <summary>释放由 <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> 使用的所有资源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509WindowsSecurityToken.WindowsIdentity">
      <summary>获取 Windows 域或计算机帐户的标识。</summary>
      <returns>一个 <see cref="T:System.Security.Principal.WindowsIdentity" />，表示 Windows 域或计算机帐户的标识。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Security.Claims.AuthenticationInformation">
      <summary>在为一个主题创建一个标志时，包含断言的证书颁发机构的身份验证信息。</summary>
    </member>
    <member name="M:System.Security.Claims.AuthenticationInformation.#ctor">
      <summary>初始化 <see cref="T:System.Security.Claims.AuthenticationInformation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.Address">
      <summary>获取或设置创建了令牌的颁发机构的地址。</summary>
      <returns>地址。</returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.AuthorizationContexts">
      <summary>颁发令牌时，获取 <see cref="T:System.Security.Claims.AuthorizationContext" /> 使用身份验证机构。</summary>
      <returns>表示认证上下文的 <see cref="T:System.IdentityModel.Tokens.AuthenticationContext" /> 的集合。</returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.DnsName">
      <summary>获取或设置生成标记的授权的 DNS 名称。</summary>
      <returns>机构的 DNS 名称。</returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.NotOnOrAfter">
      <summary>获取或设置必须考虑结束会话索引中引用的会话的时间。</summary>
      <returns>必须考虑该会话结束的时间。</returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.Session">
      <summary>获取或设置描述颁发机构和客户端之间的会话的会话索引。</summary>
      <returns>会话索引。</returns>
    </member>
    <member name="T:System.Security.Claims.AuthenticationTypes">
      <summary>定义 <see cref="P:System.Security.Principal.WindowsIdentity.AuthenticationType" /> 属性的身份验证类型。</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Basic">
      <summary>基本认证。</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Federation">
      <summary>联合身份验证。</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Kerberos">
      <summary>Kerberos 身份验证。</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Negotiate">
      <summary>已协商的身份验证。</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Password">
      <summary>用户名和密码身份验证。</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Signature">
      <summary>使用数字签名的身份验证。</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Windows">
      <summary>Windows 身份验证。</summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.X509">
      <summary>通过 X.509 证书进行认证。</summary>
    </member>
    <member name="T:System.Security.Claims.AuthorizationContext">
      <summary>提供授权事件的上下文信息。 这包括表示该调用方的主体，请求的资源和执行的操作。</summary>
    </member>
    <member name="M:System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})">
      <summary>用指定的主体、资源声称和操作声称初始化 <see cref="T:System.Security.Claims.AuthorizationContext" /> 类的新实例。</summary>
      <param name="principal">其授权要被核对的主体。</param>
      <param name="resource">表示为主体授权的资源的声明的集合。 该集合通常包括单一元素。</param>
      <param name="action">表示对资源要执行的操作的声明的集合。 该集合通常包括单一元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> 为 null。 - 或 - <paramref name="resource" /> 为 null。 - 或 - <paramref name="action" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String)">
      <summary>初始化指定的主体、资源名称和操作名称的 <see cref="T:System.Security.Claims.AuthorizationContext" /> 类的新实例。</summary>
      <param name="principal">其授权要被核对的主体。</param>
      <param name="resource">授权其主题的资源。 该资源被指定作为名称声明的值。</param>
      <param name="action">要对资源执行的操作。 该操作指定为名称声明的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> 为 null。 - 或 - <paramref name="resource" /> 为 null。 - 或 - <paramref name="action" /> 为 null。</exception>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Action">
      <summary>获取将授权主体的操作。</summary>
      <returns>表示与请求相关的操作的声明的集合。</returns>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Principal">
      <summary>获取授权正在被请求的主体。</summary>
      <returns>其授权正在被请求的主体。</returns>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Resource">
      <summary>获取授权其主题的资源。</summary>
      <returns>表示资源的声明的集合。</returns>
    </member>
    <member name="T:System.Security.Claims.ClaimProperties">
      <summary>定义在 <see cref="P:System.Security.Claims.Claim.Properties" /> 属性包含的密钥属性。</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.Namespace">
      <summary>声明属性命名空间。</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlAttributeDisplayName">
      <summary>SAML 显示名称特性。</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlAttributeNameFormat">
      <summary>SAML 名称格式特性。</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierFormat">
      <summary>SAML 名称标识符格式。</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierNameQualifier">
      <summary>定义 SAML &lt;NameID&gt; 元素的 SAML NameQualifier 的特性的键的常数。 NameQualifier 特性指定安全或管理域名来限定名称。</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierSPNameQualifier">
      <summary>定义 SAML &lt;NameID&gt; 元素的 SAML SPNameQualifier 的特性的键的常数。 SPNameQualifier 将用于进一步限定名称的服务提供程序的特性指定名称或提供程序的关联。</summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierSPProvidedId">
      <summary>定义 SAML &lt;NameID&gt; 元素的 SAML SPProvidedId 的特性的键的常数。 SPProvidedId 特性指定由实体的服务提供程序或程序隶属生成的名称标识符，如果不同于主名称标识符。</summary>
    </member>
    <member name="T:System.Security.Claims.ClaimsAuthenticationManager">
      <summary>定义身份验证管理器的基本实现。 声明验证管理器在声明处理管道中提供某一位置以便将处理逻辑（筛选、验证、扩展）在执行到达您的应用程序代码之前应用于传入主体的声明集合。</summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor">
      <summary>初始化 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)">
      <summary>在派生中重写时，将返回与 RP 应用程序的要求一致的 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 对象。 默认实现未修改传入的 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。</summary>
      <returns>包含 RP 应用程序所需任何修改的声明主体。 默认实现返回未被修改的传入声明主体。</returns>
      <param name="resourceName">请求的资源的地址。</param>
      <param name="incomingPrincipal">表示正在尝试访问资源的经过身份验证的用户的声明主体。</param>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
      <param name="nodelist">自定义配置元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
    </member>
    <member name="T:System.Security.Claims.ClaimsAuthorizationManager">
      <summary>定义身份验证管理器的基本实现。</summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor">
      <summary>初始化 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)">
      <summary>在派生类中实现时，检查对指定上下文中的主题的授权，以在指定资源上执行指定操作。</summary>
      <returns>如果授权该主题在指定的资源上执行指定操作，则为 true；否则为 false。</returns>
      <param name="context">包含要为其检查身份授权的主题、资源和操作。</param>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
      <param name="nodelist">自定义配置元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
    </member>
    <member name="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause">
      <summary>表示二进制秘密安全令牌中的密钥标识符子句。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>使用指定的密钥初始化 <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="key">一个表示密钥的 <see cref="T:System.Byte" /> 数组。</param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean)">
      <summary>使用指定的值初始化 <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="key">一个表示密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="cloneBuffer">克隆缓冲区，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean,System.Byte[],System.Int32)">
      <summary>使用指定的值初始化 <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="key">一个表示密钥的 <see cref="T:System.Byte" /> 数组。</param>
      <param name="cloneBuffer">克隆缓冲区，则为 true；否则为 false。</param>
      <param name="derivationNonce">用于派生密钥的“只用一次的数字”(Nonce)。</param>
      <param name="derivationLength">要派生的密钥的长度。</param>
    </member>
    <member name="P:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.CanCreateKey">
      <summary>获取一个值，该值指示该类实例是否可以创建安全密钥。</summary>
      <returns>始终为 true。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.CreateKey">
      <summary>创建安全密钥。</summary>
      <returns>新生成的安全密钥。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.GetKeyBytes">
      <summary>获取表示密钥的字节数组。</summary>
      <returns>表示密钥的字节数组。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>比较指定子句的密钥是否与此实例的密钥相匹配。</summary>
      <returns>如果存在匹配项，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要匹配的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
    </member>
    <member name="T:System.ServiceModel.Security.KeyNameIdentifierClause">
      <summary>表示安全令牌中的密钥名称标识符子句。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.KeyNameIdentifierClause" /> 类的新实例。</summary>
      <param name="keyName">密钥名称。</param>
    </member>
    <member name="P:System.ServiceModel.Security.KeyNameIdentifierClause.KeyName">
      <summary>获取密钥名称。</summary>
      <returns>密钥名称。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>检查 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 是否与该类的当前实例相匹配。</summary>
      <returns>如果存在匹配项，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.Matches(System.String)">
      <summary>检查指定的密钥名称是否与当前实例的密钥名称相匹配。</summary>
      <returns>如果存在匹配项，则为 true；否则为 false。</returns>
      <param name="keyName">安全密钥名称子句。</param>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.ToString">
      <summary>返回表示当前 <see cref="Object" /> 的 T:System.String。（从 <see cref="T:System.Object" /> 继承）</summary>
      <returns>当前 Object。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause">
      <summary>表示安全上下文令牌的密钥标识符子句。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId)">
      <summary>使用指定的上下文标识符来初始化 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="contextId">安全上下文 的唯一 ID。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>使用指定的上下文标识符和生成对象初始化 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="contextId">一个 <see cref="T:System.Xml.UniqueId" />，表示安全上下文的上下文 ID。</param>
      <param name="generation">一个 <see cref="T:System.Xml.UniqueId" />，表示安全上下文令牌的密钥生成。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId,System.Xml.UniqueId,System.Byte[],System.Int32)">
      <summary>用指定的值初始化 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的新实例。</summary>
      <param name="contextId">标识符子句的上下文 ID 部分。</param>
      <param name="generation">标识符子句的生成部分。</param>
      <param name="derivationNonce">用于派生令牌的“只用一次的数字”(Nonce)。</param>
      <param name="derivationLength">正在派生的密钥的长度。</param>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.ContextId">
      <summary>获取安全上下文 ID。</summary>
      <returns>安全上下文 的唯一 ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Generation">
      <summary>获取生成。</summary>
      <returns>生成。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>将指定的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 与 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的当前实例进行比较。</summary>
      <returns>如果两个实例相等，则为 true；否则为 false。</returns>
      <param name="keyIdentifierClause">要比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Matches(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>指定的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 与使用指定的上下文标识符和生成的 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的当前实例比较。</summary>
      <returns>如果两个实例相等，则为 true；否则为 false。</returns>
      <param name="contextId">标识符子句的上下文 ID 部分。</param>
      <param name="generation">标识符子句的生成部分。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.ToString">
      <summary>提供该类实例的文本表示形式。</summary>
      <returns>该类实例的文本表示形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateValidationMode">
      <summary>一个列出验证证书方法的枚举。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust">
      <summary>如果该链在受信任的根存储区生成证书颁发机构，则证书有效。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.Custom">
      <summary>用户必须插入自定义 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 以验证证书。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.None">
      <summary>未执行任何证书验证。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust">
      <summary>如果证书位于被信任的人的存储区或该链在受信任的根存储区生成证书颁发机构，则证书有效。</summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerTrust">
      <summary>如果证书位于被信任的人的存储区中，则有效。</summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken">
      <summary>表示二进制秘密安全令牌。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。</summary>
      <param name="key">一个表示密钥的字节数组。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。</summary>
      <param name="keySizeInBits">密钥的大小（以位为单位）。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Byte[])">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。</summary>
      <param name="id">令牌 ID。</param>
      <param name="key">一个表示密钥的字节数组。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。</summary>
      <param name="id">令牌 ID。</param>
      <param name="key">一个表示密钥的字节数组。</param>
      <param name="allowCrypto">一个 <see cref="T:System.Boolean" />，指出是否允许加密。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。</summary>
      <param name="id">令牌 ID。</param>
      <param name="keySizeInBits">密钥的大小（以位为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySizeInBits" /> 小于或等于零，或者大于或等于 512，或者不是 8 的倍数。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。</summary>
      <param name="id">令牌 ID。</param>
      <param name="keySizeInBits">密钥的大小（以位为单位）。</param>
      <param name="allowCrypto">一个 <see cref="T:System.Boolean" />，指出是否允许加密。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keySizeInBits" /> 小于或等于零，或者大于或等于 512，或者不是 8 的倍数。</exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.GetKeyBytes">
      <summary>获取表示密钥的字节。</summary>
      <returns>键。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.Id">
      <summary>获取令牌 ID。</summary>
      <returns>令牌 ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.KeySize">
      <summary>获取令牌密钥大小。</summary>
      <returns>令牌密钥大小。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.SecurityKeys">
      <summary>获取安全密钥的集合。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.ValidFrom">
      <summary>获取令牌的有效起始时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示令牌的有效起始时间。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.ValidTo">
      <summary>获取令牌的有效起始时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示令牌的有效起始时间。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken">
      <summary>表示在其他令牌中包装密钥的安全令牌。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.#ctor(System.String,System.Byte[],System.String,System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>初始化 <see cref="T:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken" /> 类的新实例。</summary>
      <param name="id">密钥令牌的 ID。</param>
      <param name="keyToWrap">要包装的密钥。</param>
      <param name="wrappingAlgorithm">用于执行包装的算法。</param>
      <param name="wrappingToken">一个表示包装令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <param name="wrappingTokenReference">一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示对包装令牌的引用。</param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>获取一个值，该值指示令牌是否可以创建密钥标识符子句。</summary>
      <returns>如果令牌可以创建密钥标识符子句，则为 true；否则为 false。 默认值为 false。</returns>
      <typeparam name="T">
        <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.CreateKeyIdentifierClause``1">
      <summary>创建密钥标识符子句。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 的类型。</returns>
      <typeparam name="T">
        <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 的类型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.GetWrappedKey">
      <summary>获取已包装的密钥。</summary>
      <returns>已包装的密钥。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.Id">
      <summary>获取令牌 ID。</summary>
      <returns>令牌 ID。</returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>比较当前的安全密钥标识符子句和指定的密钥标识符子句是否相等。</summary>
      <returns>如果当前的安全密钥标识符子句与指定的相等，则为 true；否则为 false。 默认值为 false。</returns>
      <param name="keyIdentifierClause">指定的安全密钥标识符子句。</param>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.SecurityKeys">
      <summary>获取安全密钥的集合。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的集合。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.ValidFrom">
      <summary>获取令牌的有效起始日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示令牌的有效起始日期。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.ValidTo">
      <summary>获取令牌的过期日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" />，表示令牌的过期日期。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingAlgorithm">
      <summary>获取包装算法。</summary>
      <returns>一个 <see cref="T:System.String" />，指定包装算法或用于加密对称密钥的算法。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingToken">
      <summary>获取包装令牌。</summary>
      <returns>一个表示包装令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingTokenReference">
      <summary>获取包装令牌引用。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示对包装令牌的引用。</returns>
    </member>
  </members>
</doc>