<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Activities</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.Activities.CSharpReference`1">
      <summary>指定有关 C# 参考的信息。</summary>
      <typeparam name="TResult">
      </typeparam>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.#ctor">
      <summary>初始化 <see cref="T:Microsoft.CSharp.Activities.CSharpReference`1" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.#ctor(System.String)">
      <summary>使用指定的表达式文本初始化 <see cref="T:Microsoft.CSharp.Activities.CSharpReference`1" /> 的新实例。</summary>
      <param name="expressionText">表达式文本。</param>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>将新的元数据编译到 C# 引用。</summary>
      <param name="metadata">编译的元数据。</param>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.Execute(System.Activities.CodeActivityContext)">
      <summary>执行C#引用。</summary>
      <returns>执行的引用。</returns>
      <param name="context">上下文。</param>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpReference`1.ExpressionText">
      <summary>获取或设置引用的表达式文本。</summary>
      <returns>引用的表达式文本。</returns>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpReference`1.GetExpressionTree">
      <summary>为 C# 引用获取表达式树。</summary>
      <returns>该表达式树。</returns>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpReference`1.Language">
      <summary>获取引用所使用的语言。</summary>
      <returns>引用所使用的语言。</returns>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpReference`1.RequiresCompilation">
      <summary>获取引用是否需要编译。</summary>
      <returns>如果引用需要编辑，则为 True，否则为 false。</returns>
    </member>
    <member name="T:Microsoft.CSharp.Activities.CSharpValue`1">
      <summary>指定有关 C# 值的信息。</summary>
      <typeparam name="TResult">值的类型。</typeparam>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.#ctor">
      <summary>初始化 <see cref="T:Microsoft.CSharp.Activities.CSharpValue`1" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.#ctor(System.String)">
      <summary>使用指定的表达式文本初始化 <see cref="T:Microsoft.CSharp.Activities.CSharpValue`1" /> 的新实例。</summary>
      <param name="expressionText">表达式文本。</param>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>将新的元数据编译到 C# 值。</summary>
      <param name="metadata">编译的元数据。</param>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.Execute(System.Activities.CodeActivityContext)">
      <summary>执行C#值。</summary>
      <returns>执行的引用。</returns>
      <param name="context">上下文。</param>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpValue`1.ExpressionText">
      <summary>获取或设置要使用的表达式文本。</summary>
      <returns>使用的表达式文本。</returns>
    </member>
    <member name="M:Microsoft.CSharp.Activities.CSharpValue`1.GetExpressionTree">
      <summary>为 C# 值获取表达式树。</summary>
      <returns>该表达式树。</returns>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpValue`1.Language">
      <summary>获取使用的语言。</summary>
      <returns>使用的语言。</returns>
    </member>
    <member name="P:Microsoft.CSharp.Activities.CSharpValue`1.RequiresCompilation">
      <summary>获取值是否需要编译。</summary>
      <returns>如果值需要编辑，则为 True，否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasic">
      <summary>提供 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 的附加属性存储。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.GetSettings(System.Object)">
      <summary>检索附加到指定对象的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例。</summary>
      <returns>附加到指定对象的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例。</returns>
      <param name="target">要检查的对象。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.SetSettings(System.Object,Microsoft.VisualBasic.Activities.VisualBasicSettings)">
      <summary>将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例附加到指定对象。</summary>
      <param name="target">
        <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例所附加到的对象。</param>
      <param name="value">要附加的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.SetSettingsForImplementation(System.Object,Microsoft.VisualBasic.Activities.VisualBasicSettings)">
      <summary>将一个 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例附加到一个对象供其实现使用。</summary>
      <param name="target">
        <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例所附加到的对象。</param>
      <param name="value">要附加的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasic.ShouldSerializeSettings(System.Object)">
      <summary>返回一个值，该值指示是否应序列化与指定对象关联的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例。</summary>
      <returns>如果 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例应被序列化，则为 true；否则为 false。</returns>
      <param name="target">要检查的对象。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper">
      <summary>创建并编译 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 和 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 表达式。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.CreatePrecompiledVisualBasicReference(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Activities.LocationReferenceEnvironment,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Creates and returns a precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</summary>
      <returns>预编译的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 表达式。</returns>
      <param name="targetType">期望的表达式类型。</param>
      <param name="expressionText">采用 Visual Basic 语法的表达式。</param>
      <param name="namespaces">导入的命名空间。</param>
      <param name="referencedAssemblies">引用的程序集。</param>
      <param name="environment">用于将名称解析为其关联的 <see cref="T:System.Activities.Argument" /> 和 <see cref="T:System.Activities.Variable" /> 对象的机制。</param>
      <param name="returnType">当此方法返回时，包含表达式的结果类型。 该参数未经初始化即被传递。</param>
      <param name="compileError">当此方法返回时，包含所发生的任何编译错误，或者，如果编译成功，则包含 null。 该参数未经初始化即被传递。</param>
      <param name="vbSettings">当此方法返回时，包含编译表达式所需的设置。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.CreatePrecompiledVisualBasicValue(System.Type,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Activities.LocationReferenceEnvironment,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>Creates and returns a precompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</summary>
      <returns>预编译的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 表达式。</returns>
      <param name="targetType">期望的表达式类型。</param>
      <param name="expressionText">采用 Visual Basic 语法的表达式。</param>
      <param name="namespaces">导入的命名空间。</param>
      <param name="referencedAssemblies">引用的程序集。</param>
      <param name="environment">用于将名称解析为其关联的 <see cref="T:System.Activities.Argument" /> 和 <see cref="T:System.Activities.Variable" /> 对象的机制。</param>
      <param name="returnType">当此方法返回时，包含表达式的结果类型。 该参数未经初始化即被传递。</param>
      <param name="compileError">当此方法返回时，包含所发生的任何编译错误，或者，如果编译成功，则包含 null。 该参数未经初始化即被传递。 该参数未经初始化即被传递。</param>
      <param name="vbSettings">当此方法返回时，包含编译表达式所需的设置。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.NameShadowingConstraint">
      <summary>获取名称影化中使用的约束。</summary>
      <returns>用于名称隐藏的约束。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.RecompileVisualBasicReference(System.Activities.ActivityWithResult,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>重新编译以前编译的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 表达式。</summary>
      <returns>The recompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> expression.</returns>
      <param name="visualBasicReference">要重新编译的表达式。</param>
      <param name="returnType">当此方法返回时，包含表达式的结果类型。 该参数未经初始化即被传递。</param>
      <param name="compileError">当此方法返回时，包含所发生的任何编译错误，或者，如果编译成功，则包含 null。 该参数未经初始化即被传递。</param>
      <param name="vbSettings">当此方法返回时，包含编译表达式所需的设置。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper.RecompileVisualBasicValue(System.Activities.ActivityWithResult,System.Type@,System.Activities.ExpressionParser.SourceExpressionException@,Microsoft.VisualBasic.Activities.VisualBasicSettings@)">
      <summary>重新编译以前编译的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 表达式。</summary>
      <returns>The recompiled <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> expression.</returns>
      <param name="visualBasicValue">要重新编译的表达式。</param>
      <param name="returnType">当此方法返回时，包含表达式的结果类型。 该参数未经初始化即被传递。</param>
      <param name="compileError">当此方法返回时，包含所发生的任何编译错误，或者，如果编译成功，则包含 null。 该参数未经初始化即被传递。 该参数未经初始化即被传递。</param>
      <param name="vbSettings">当此方法返回时，包含编译表达式所需的设置。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference">
      <summary>表示程序集引用以及从该程序集导入的命名空间。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Assembly">
      <summary>获取或设置此 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 所引用的程序集的全名。</summary>
      <returns>此 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 所引用的程序集的全名。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Equals(Microsoft.VisualBasic.Activities.VisualBasicImportReference)">
      <summary>确定指定的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 是否等于当前的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />。</summary>
      <returns>如果指定的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 等于当前的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 进行比较的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicImportReference.GetHashCode">
      <summary>返回 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 实例的哈希代码。</summary>
      <returns>
        <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 实例的哈希代码。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicImportReference.Import">
      <summary>获取或设置此 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 所引用的导入的命名空间。</summary>
      <returns>此 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 所引用的导入的命名空间。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1">
      <summary>包含一个计算结果为左值的表达式（采用 Visual Basic 语法），该表达式支持绑定 <see cref="F:System.Activities.ArgumentDirection.Out" /> 参数。</summary>
      <typeparam name="TResult">表达式类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.#ctor(System.String)">
      <summary>使用特定表达式初始化 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 类的新实例。</summary>
      <param name="expressionText">采用 Visual Basic 语法的表达式字符串。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>如果 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" />能被转换为字符串，则为 true，否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 的字符串表示形式。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.ExpressionText">
      <summary>获取或设置由此 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 表示的 Visual Basic 表达式。</summary>
      <returns>Visual Basic 表达式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicReference`1.GetExpressionTree">
      <summary>获取在引用中使用的表达式树。</summary>
      <returns>在引用中使用的表达式树。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.Language">
      <summary>获取在引用中使用的语言。</summary>
      <returns>在引用中使用的语言。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicReference`1.RequiresCompilation">
      <summary>获取引用是否需要编译。</summary>
      <returns>如果引用需要编辑，则为 True，否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicSettings">
      <summary>包含一些设置，<see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 和 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 实例使用这些设置来编译它们所包含表达式的源文本。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicSettings.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicSettings.Default">
      <summary>获取一个 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" />，其中包含一组默认程序集引用和导入的命名空间。 这一组程序集引用和导入的命名空间可用于给定 <see cref="T:System.AppDomain" /> 中的所有 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 和 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicReference`1" /> 实例。</summary>
      <returns>一个 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" />，其中包含一组默认程序集引用和导入的命名空间。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicSettings.ImportReferences">
      <summary>获取 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 对象的集合，其中每个对象都表示该程序集的一个程序集引用和导入的命名空间。</summary>
      <returns>
        <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicImportReference" /> 对象的集合，其中每个对象都表示该程序集的一个程序集引用和导入的命名空间。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1">
      <summary>包含一个计算结果为右值的表达式（采用 Visual Basic 语法），该表达式支持绑定 <see cref="F:System.Activities.ArgumentDirection.In" /> 参数。</summary>
      <typeparam name="TResult">表达式类型。</typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.#ctor(System.String)">
      <summary>使用指定的表达式初始化 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 类的新实例。</summary>
      <param name="expressionText">采用 Visual Basic 语法的表达式字符串。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>如果 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" />能被转换为字符串，则为 true，否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 的字符串表示形式。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.ExpressionText">
      <summary>获取或设置由此 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicValue`1" /> 表示的 Visual Basic 表达式。</summary>
      <returns>Visual Basic 表达式。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.VisualBasicValue`1.GetExpressionTree">
      <summary>返回值的表达式树。</summary>
      <returns>值的表达式树。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.Language">
      <summary>获取值所使用的语言。</summary>
      <returns>使用的语言。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Activities.VisualBasicValue`1.RequiresCompilation">
      <summary>获取值是否需要编译。</summary>
      <returns>如果值需要编辑，则为 True，否则为 false。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter">
      <summary>将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例转换为指定类型。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将指定类型的对象转换为 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例。</summary>
      <returns>如果可以将指定的类型从中转换，则为 true；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="sourceType">要转换的类型。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例转换为指定类型的实例。</summary>
      <returns>如果可将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例转换为指定类型的实例，则为  true；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定类型转换为 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例。</summary>
      <returns>一个对象，表示转换后的值。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的对象。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例转换为指定类型。</summary>
      <returns>转换后的值。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer">
      <summary>将 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例序列化为 XAML。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将指定的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要转换的值。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将指定的 <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:Microsoft.VisualBasic.Activities.VisualBasicSettings" /> 实例的字符串表示形式。</returns>
      <param name="value">要转换的值。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Activities.Activity">
      <summary>用于从预先存在的 <see cref="T:System.Activities.Activity" /> 对象创建复合活动的抽象基类。</summary>
    </member>
    <member name="M:System.Activities.Activity.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Activity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Activity.CacheId">
      <summary>获取缓存的标识符，该标识符在工作流定义的作用域内是唯一的。</summary>
      <returns>缓存的标识符，该标识符在工作流定义的作用域内是唯一的。</returns>
    </member>
    <member name="M:System.Activities.Activity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>创建并验证活动的参数、变量、子活动和活动委托的说明。</summary>
      <param name="metadata">活动的元数据，用于封装活动的参数、变量、子活动和活动委托。</param>
    </member>
    <member name="P:System.Activities.Activity.Constraints">
      <summary>获取可配置的 <see cref="T:System.Activities.Validation.Constraint" /> 活动的集合，用于为 <see cref="T:System.Activities.Activity" /> 提供验证。</summary>
      <returns>约束的集合。</returns>
    </member>
    <member name="P:System.Activities.Activity.DisplayName">
      <summary>获取或设置用于调试、验证、异常处理和跟踪的可选友好名称。</summary>
      <returns>用于调试、验证、异常处理和跟踪的友好名称。</returns>
    </member>
    <member name="P:System.Activities.Activity.Id">
      <summary>获取一个标识符，该标识符在工作流定义的作用域内是唯一的。</summary>
      <returns>一个标识符，该标识符在工作流定义的作用域内是唯一的。</returns>
    </member>
    <member name="P:System.Activities.Activity.Implementation">
      <summary>获取或设置返回包含执行逻辑的 <see cref="T:System.Activities.Activity" /> 的委托。</summary>
      <returns>包含执行逻辑的委托。</returns>
    </member>
    <member name="P:System.Activities.Activity.ImplementationVersion">
      <summary>获取或设置用于实现的版本。</summary>
      <returns>实现的版本。</returns>
    </member>
    <member name="M:System.Activities.Activity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>创建动态更新映射时引发事件。</summary>
      <param name="metadata">使用的元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="M:System.Activities.Activity.ShouldSerializeDisplayName">
      <summary>指示是否应序列化 <see cref="P:System.Activities.Activity.DisplayName" /> 属性。</summary>
      <returns>如果应当将 <see cref="P:System.Activities.Activity.DisplayName" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Activity.ToString">
      <summary>返回包含 <see cref="T:System.Activities.Activity" /> 的 <see cref="P:System.Activities.Activity.Id" /> 和 <see cref="P:System.Activities.Activity.DisplayName" /> 的 <see cref="T:System.String" />。</summary>
      <returns>活动的 ID 和显示名称。</returns>
    </member>
    <member name="T:System.Activities.Activity`1">
      <summary>用于从预先存在的 <see cref="T:System.Activities.Activity" /> 对象创建复合活动的抽象基类，此类使用活动的类型说明符指定结果类型。</summary>
      <typeparam name="TResult">活动返回值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Activity`1.#ctor">
      <summary>在派生类中实现时，创建派生类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Activity`1.FromValue(`0)">
      <summary>返回计算结果为给定值的 <see cref="T:System.Activities.Activity`1" /> 表达式。</summary>
      <returns>计算结果为给定值的工作流表达式。</returns>
      <param name="constValue">用于创建 <see cref="T:System.Activities.Activity`1" /> 表达式的值。</param>
    </member>
    <member name="M:System.Activities.Activity`1.FromVariable(System.Activities.Variable)">
      <summary>返回计算结果为给定的 <see cref="T:System.Activities.Variable" /> 的 <see cref="T:System.Activities.Activity`1" /> 表达式。</summary>
      <returns>计算结果为给定变量的工作流表达式。</returns>
      <param name="variable">表达式的值。</param>
    </member>
    <member name="M:System.Activities.Activity`1.FromVariable(System.Activities.Variable{`0})">
      <summary>返回计算结果为给定的 <see cref="T:System.Activities.Variable`1" /> 的 <see cref="T:System.Activities.Activity`1" /> 表达式。</summary>
      <returns>计算结果为给定变量的工作流表达式。</returns>
      <param name="variable">表达式的值。</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(System.Activities.Variable)~System.Activities.Activity{`0}">
      <summary>返回计算结果为给定的 <see cref="T:System.Activities.Variable" /> 的 <see cref="T:System.Activities.Activity`1" /> 表达式。</summary>
      <returns>计算结果为给定变量的工作流表达式。</returns>
      <param name="variable">表达式的值。</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(System.Activities.Variable{`0})~System.Activities.Activity{`0}">
      <summary>返回计算结果为给定的 <see cref="T:System.Activities.Variable`1" /> 的 <see cref="T:System.Activities.Activity`1" /> 表达式。</summary>
      <returns>计算结果为给定变量的工作流表达式。</returns>
      <param name="variable">表达式的值。</param>
    </member>
    <member name="M:System.Activities.Activity`1.op_Implicit(`0)~System.Activities.Activity{`0}">
      <summary>返回计算结果为给定值的 <see cref="T:System.Activities.Activity`1" /> 表达式。</summary>
      <returns>计算结果为给定值的工作流表达式。</returns>
      <param name="constValue">用于创建表达式的值。</param>
    </member>
    <member name="P:System.Activities.Activity`1.Result">
      <summary>获取或设置 <see cref="T:System.Activities.Activity`1" /> 的结果参数。</summary>
      <returns>
        <see cref="T:System.Activities.Activity`1" /> 的结果参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction">
      <summary>定义一个不含 In 参数并且不返回值的活动委托。</summary>
    </member>
    <member name="M:System.Activities.ActivityAction.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Activities.ActivityAction`1">
      <summary>定义一个具有一个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T">活动委托的 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`1.Argument">
      <summary>获取或设置活动委托的 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`10">
      <summary>定义一个具有十个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`10.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`10" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`10.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`11">
      <summary>定义一个具有十一个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`11.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`11" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`11.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`12">
      <summary>定义一个具有十二个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`12.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`12" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`12.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`13">
      <summary>定义一个具有十三个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
      <typeparam name="T13">活动委托的第十三个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`13.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`13" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument13">
      <summary>获取或设置活动委托的第十三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`13.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`14">
      <summary>定义一个具有十四个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
      <typeparam name="T13">活动委托的第十三个 In 参数的类型。</typeparam>
      <typeparam name="T14">活动委托的第十四个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`14.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`14" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument13">
      <summary>获取或设置活动委托的第十三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument14">
      <summary>获取或设置活动委托的第十四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`14.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`15">
      <summary>定义一个具有十五个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
      <typeparam name="T13">活动委托的第十三个 In 参数的类型。</typeparam>
      <typeparam name="T14">活动委托的第十四个 In 参数的类型。</typeparam>
      <typeparam name="T15">活动委托的第十五个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`15.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`15" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument13">
      <summary>获取或设置活动委托的第十三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument14">
      <summary>获取或设置活动委托的第十四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument15">
      <summary>获取或设置活动委托的第十五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`15.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`16">
      <summary>定义一个具有十六个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">第一个委托参数的类型。</typeparam>
      <typeparam name="T2">第二个委托参数的类型。</typeparam>
      <typeparam name="T3">第三个委托参数的类型。</typeparam>
      <typeparam name="T4">第四个委托参数的类型。</typeparam>
      <typeparam name="T5">第五个委托参数的类型。</typeparam>
      <typeparam name="T6">第六个委托参数的类型。</typeparam>
      <typeparam name="T7">第七个委托参数的类型。</typeparam>
      <typeparam name="T8">第八个委托参数的类型。</typeparam>
      <typeparam name="T9">第九个委托参数的类型。</typeparam>
      <typeparam name="T10">第十个委托参数的类型。</typeparam>
      <typeparam name="T11">第十一个委托参数的类型。</typeparam>
      <typeparam name="T12">第十二个委托参数的类型。</typeparam>
      <typeparam name="T13">第十三个委托参数的类型。</typeparam>
      <typeparam name="T14">第十四个委托参数的类型。</typeparam>
      <typeparam name="T15">第十五个委托参数的类型。</typeparam>
      <typeparam name="T16">第十六个委托参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`16.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`16" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument13">
      <summary>获取或设置活动委托的第十三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument14">
      <summary>获取或设置活动委托的第十四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument15">
      <summary>获取或设置活动委托的第十五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument16">
      <summary>获取或设置活动委托的第十六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`16.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`2">
      <summary>定义一个具有两个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`2.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`2.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`2.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`3">
      <summary>定义一个具有三个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`3.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`3.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`4">
      <summary>定义一个具有四个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`4.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`4" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`4.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`5">
      <summary>定义一个具有五个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`5.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`5" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`5.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`6">
      <summary>定义一个具有六个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`6.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`6" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`6.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`7">
      <summary>定义一个具有七个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`7.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`7" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`7.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`8">
      <summary>定义一个具有八个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`8.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`8" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`8.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityAction`9">
      <summary>定义一个具有九个 In 参数并且不返回值的活动委托。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityAction`9.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityAction`9" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityAction`9.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityBuilder">
      <summary>为工作流活动提供属性数据。</summary>
    </member>
    <member name="M:System.Activities.ActivityBuilder.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityBuilder" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Attributes">
      <summary>获取要在活动树构造过程中使用的特性的集合。</summary>
      <returns>指定类型的集合。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Constraints">
      <summary>获取控制活动树构造的约束的集合。</summary>
      <returns>指定类型的集合。</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder.GetPropertyReference(System.Object)">
      <summary>为从指定对象检索到的属性返回 <see cref="T:System.Activities.ActivityPropertyReference" />。</summary>
      <returns>对属性的引用。</returns>
      <param name="target">包含属性的对象。</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.GetPropertyReferences(System.Object)">
      <summary>为从指定对象检索到的属性返回 <see cref="T:System.Activities.ActivityPropertyReference" /> 的列表。</summary>
      <returns>对属性的引用。</returns>
      <param name="target">包含属性的对象。</param>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Implementation">
      <summary>获取或设置由 <see cref="T:System.Activities.ActivityBuilder" /> 的当前实例表示的活动树。</summary>
      <returns>活动。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.ImplementationVersion">
      <summary>获取或设置活动生成器的实现版本。</summary>
      <returns>用于活动生成器的实现版本。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Name">
      <summary>获取或设置由 <see cref="T:System.Activities.ActivityBuilder" /> 的当前实例表示的活动树的名称。</summary>
      <returns>活动树的名称。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder.Properties">
      <summary>获取当前 <see cref="T:System.Activities.ActivityBuilder" /> 实例的属性值的集合。</summary>
      <returns>属性值的集合。</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder.SetPropertyReference(System.Object,System.Activities.ActivityPropertyReference)">
      <summary>设置指定存储中的指定可附加属性的值。</summary>
      <param name="target">属性存储区。</param>
      <param name="value">要设置的值。</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.ShouldSerializePropertyReference(System.Object)">
      <summary>指定是否活动生成器会序列化属性引用 。</summary>
      <returns>如果活动生成器会序列化属性引用，则为 True；否则为 false。</returns>
      <param name="target">属性存储区。</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.ShouldSerializePropertyReferences(System.Object)">
      <summary>指定是否活动生成器会序列化属性引用 。</summary>
      <returns>如果活动生成器会序列化属性引用，则为 True；否则为 false。</returns>
      <param name="target">属性存储区。</param>
    </member>
    <member name="M:System.Activities.ActivityBuilder.System#Activities#Debugger#IDebuggableWorkflowTree#GetWorkflowRoot">
      <summary>在基类中实现时，返回工作流活动树的根。</summary>
      <returns>活动。</returns>
    </member>
    <member name="T:System.Activities.ActivityBuilder`1">
      <summary>为通用工作流活动提供属性数据。</summary>
      <typeparam name="TResult">要实现的活动的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityBuilder`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityBuilder`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Attributes">
      <summary>获取要在活动树构造过程中使用的特性的通用集合。</summary>
      <returns>一个通用集合。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Constraints">
      <summary>获取控制活动树构造的约束的通用集合。</summary>
      <returns>一个通用集合。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Implementation">
      <summary>获取或设置由 <see cref="T:System.Activities.ActivityBuilder`1" /> 的当前实例表示的通用活动树。</summary>
      <returns>一个活动对象。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.ImplementationVersion">
      <summary>获取或设置活动生成器的实现版本。</summary>
      <returns>活动生成器的实现版本。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Name">
      <summary>获取或设置由 <see cref="T:System.Activities.ActivityBuilder`1" /> 的当前实例表示的通用活动树的名称。</summary>
      <returns>活动树的名称。</returns>
    </member>
    <member name="P:System.Activities.ActivityBuilder`1.Properties">
      <summary>获取 <see cref="T:System.Activities.ActivityBuilder`1" /> 的当前实例属性的 <see cref="T:System.Collections.ObjectModel.KeyedCollection" />。</summary>
      <returns>活动属性的键/值对集合。</returns>
    </member>
    <member name="M:System.Activities.ActivityBuilder`1.System#Activities#Debugger#IDebuggableWorkflowTree#GetWorkflowRoot">
      <summary>返回当前工作流树的根。</summary>
      <returns>一个活动。</returns>
    </member>
    <member name="T:System.Activities.ActivityContext">
      <summary>表示活动执行环境的上下文类的基类。</summary>
    </member>
    <member name="P:System.Activities.ActivityContext.ActivityInstanceId">
      <summary>获取当前正在执行的活动实例的唯一标识符。</summary>
      <returns>当前正在执行的活动实例的唯一标识符。</returns>
    </member>
    <member name="P:System.Activities.ActivityContext.DataContext">
      <summary>获取当前正在执行的活动的数据上下文。</summary>
      <returns>当前正在执行的活动的工作流数据上下文。</returns>
    </member>
    <member name="M:System.Activities.ActivityContext.GetExtension``1">
      <summary>返回指定类型的扩展。</summary>
      <returns>指定类型的扩展名（若存在）；否则为 null。</returns>
      <typeparam name="T">要检索的扩展的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetLocation``1(System.Activities.LocationReference)">
      <summary>返回当前活动上下文的指定引用位置的类型化位置。</summary>
      <returns>类型化位置。</returns>
      <param name="locationReference">引用的位置。</param>
      <typeparam name="T">要返回的位置的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue(System.Activities.Argument)">
      <summary>获取指定的 <see cref="T:System.Activities.Argument" /> 的值。</summary>
      <returns>参数的值。</returns>
      <param name="argument">要检查的参数。</param>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.InArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.InArgument`1" />.</summary>
      <returns>参数的值。</returns>
      <param name="argument">要检查的参数。</param>
      <typeparam name="T">参数类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.InOutArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.InOutArgument`1" />.</summary>
      <returns>参数的值。</returns>
      <param name="argument">要检查的参数。</param>
      <typeparam name="T">参数类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.LocationReference)">
      <summary>获取指定的 <see cref="T:System.Activities.LocationReference" /> 的值。</summary>
      <returns>引用位置的值。</returns>
      <param name="locationReference">要检查的引用位置。</param>
      <typeparam name="T">值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue``1(System.Activities.OutArgument{``0})">
      <summary>Gets the value of the specified <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <returns>参数的值。</returns>
      <param name="argument">要检查的参数。</param>
      <typeparam name="T">参数类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.GetValue(System.Activities.RuntimeArgument)">
      <summary>Gets the value of the specified <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <returns>参数的值。</returns>
      <param name="runtimeArgument">要检查的参数。</param>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue(System.Activities.Argument,System.Object)">
      <summary>为指定的 <see cref="T:System.Activities.Argument" /> 赋值。</summary>
      <param name="argument">要接收新值的参数。</param>
      <param name="value">参数的新值。</param>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.InArgument{``0},``0)">
      <summary>为指定的 <see cref="T:System.Activities.InArgument`1" /> 赋值。</summary>
      <param name="argument">要接收新值的参数。</param>
      <param name="value">参数的新值。</param>
      <typeparam name="T">参数类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.InOutArgument{``0},``0)">
      <summary>为指定的 <see cref="T:System.Activities.InOutArgument`1" /> 赋值。</summary>
      <param name="argument">要接收新值的参数。</param>
      <param name="value">参数的新值。</param>
      <typeparam name="T">参数类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.LocationReference,``0)">
      <summary>为指定的 <see cref="T:System.Activities.LocationReference" /> 赋值。</summary>
      <param name="locationReference">要接收新值的引用位置。</param>
      <param name="value">引用位置的新值。</param>
      <typeparam name="T">位置的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityContext.SetValue``1(System.Activities.OutArgument{``0},``0)">
      <summary>为指定的 <see cref="T:System.Activities.OutArgument`1" /> 赋值。</summary>
      <param name="argument">要接收新值的参数。</param>
      <param name="value">参数的新值。</param>
      <typeparam name="T">参数类型。</typeparam>
    </member>
    <member name="P:System.Activities.ActivityContext.WorkflowInstanceId">
      <summary>获取当前正在执行的工作流实例的唯一标识符。</summary>
      <returns>当前正在执行的工作流实例的唯一标识符。</returns>
    </member>
    <member name="T:System.Activities.ActivityDelegate">
      <summary>表示基于活动的回调。</summary>
    </member>
    <member name="M:System.Activities.ActivityDelegate.#ctor">
      <summary>由派生类的构造函数调用以初始化对象。</summary>
    </member>
    <member name="P:System.Activities.ActivityDelegate.DisplayName">
      <summary>获取或设置用于调试、验证、异常处理和跟踪的可选友好名称。</summary>
      <returns>用于调试、验证、异常处理和跟踪的友好名称。</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.GetResultArgument">
      <summary>在派生类中实现时，返回 <see cref="T:System.Activities.ActivityDelegate" /> 的 <see cref="T:System.Activities.DelegateOutArgument" />。</summary>
      <returns>
        <see cref="T:System.Activities.ActivityDelegate" /> 的 Out 参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityDelegate.Handler">
      <summary>获取或设置由此 <see cref="T:System.Activities.ActivityDelegate" /> 表示的活动。</summary>
      <returns>由此 <see cref="T:System.Activities.ActivityDelegate" /> 表示的活动。</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.OnGetRuntimeDelegateArguments(System.Collections.Generic.IList{System.Activities.RuntimeDelegateArgument})">
      <summary>提供 <see cref="T:System.Activities.ActivityDelegate" /> 的运行时参数列表。</summary>
      <param name="runtimeDelegateArguments">要使用运行时参数填充的列表。</param>
    </member>
    <member name="M:System.Activities.ActivityDelegate.ShouldSerializeDisplayName">
      <summary>指示 <see cref="P:System.Activities.ActivityDelegate.DisplayName" /> 属性值是否应序列化为 XAML。</summary>
      <returns>如果应当将 <see cref="P:System.Activities.ActivityDelegate.DisplayName" /> 属性值序列化，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.Activities.ActivityDelegate.ToString">
      <summary>返回包含 <see cref="P:System.Activities.ActivityDelegate.DisplayName" /> 的 <see cref="T:System.Activities.ActivityDelegate" /> 的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>包含 <see cref="P:System.Activities.ActivityDelegate.DisplayName" /> 的 <see cref="T:System.Activities.ActivityDelegate" /> 的表示形式。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`1">
      <summary>定义一个活动委托，它不含 in 参数但具有一个类型为 Tresult 的 out 参数。</summary>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`1.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`10">
      <summary>定义一个活动委托，它具有九个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`10.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`10" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`10.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`11">
      <summary>定义一个活动委托，它具有一个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`11.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`11" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`11.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`12">
      <summary>定义一个活动委托，它具有一个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`12.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`12" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`12.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`13">
      <summary>定义一个活动委托，它具有一个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`13.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`13" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`13.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`14">
      <summary>定义一个活动委托，它具有一个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
      <typeparam name="T13">活动委托的第十三个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`14.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`14" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument13">
      <summary>获取或设置活动委托的第十三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`14.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`15">
      <summary>定义一个活动委托，它具有一个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
      <typeparam name="T13">活动委托的第十三个 In 参数的类型。</typeparam>
      <typeparam name="T14">活动委托的第十四个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`15.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`15" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument13">
      <summary>获取或设置活动委托的第十三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument14">
      <summary>获取或设置活动委托的第十四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`15.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`16">
      <summary>定义一个活动委托，它具有一个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
      <typeparam name="T13">活动委托的第十三个 In 参数的类型。</typeparam>
      <typeparam name="T14">活动委托的第十四个 In 参数的类型。</typeparam>
      <typeparam name="T15">活动委托的第十五个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`16.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`16" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument13">
      <summary>获取或设置活动委托的第十三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument14">
      <summary>获取或设置活动委托的第十四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument15">
      <summary>获取或设置活动委托的第十五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`16.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`17">
      <summary>定义一个活动委托，它具有一个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="T9">活动委托的第九个 In 参数的类型。</typeparam>
      <typeparam name="T10">活动委托的第十个 In 参数的类型。</typeparam>
      <typeparam name="T11">活动委托的第十一个 In 参数的类型。</typeparam>
      <typeparam name="T12">活动委托的第十二个 In 参数的类型。</typeparam>
      <typeparam name="T13">活动委托的第十三个 In 参数的类型。</typeparam>
      <typeparam name="T14">活动委托的第十四个 In 参数的类型。</typeparam>
      <typeparam name="T15">活动委托的第十五个 In 参数的类型。</typeparam>
      <typeparam name="T16">活动委托的第十六个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`17.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`17" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument10">
      <summary>获取或设置活动委托的第十个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument11">
      <summary>获取或设置活动委托的第十一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument12">
      <summary>获取或设置活动委托的第十二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument13">
      <summary>获取或设置活动委托的第十三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument14">
      <summary>获取或设置活动委托的第十四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument15">
      <summary>获取或设置活动委托的第十五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument16">
      <summary>获取或设置活动委托的第十六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Argument9">
      <summary>获取或设置活动委托的第九个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`17.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`2">
      <summary>定义一个活动委托，它具有一个类型为 <paramref name="T" /> 的 In 参数和一个类型为 <paramref name="TResult" /> 的 out 参数。</summary>
      <typeparam name="T">活动委托的 in 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`2.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`2.Argument">
      <summary>获取或设置活动委托的 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`2.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`3">
      <summary>定义一个活动委托，它具有一个类型为 T 的 In 参数和一个类型为 TResult 的 out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`3.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`3.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>结果参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`4">
      <summary>定义一个活动委托，它具有三个类型为 T 的 In 参数和一个类型为 TResult 的 out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`4.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`4" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`4.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`5">
      <summary>定义一个活动委托，它具有四个类型为 T 的 In 参数和一个类型为 TResult 的 out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`5.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`5" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`5.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`6">
      <summary>定义一个活动委托，它具有五个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`6.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`6" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`6.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`7">
      <summary>定义一个活动委托，它具有六个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`7.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`7" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`7.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`8">
      <summary>定义一个活动委托，它具有七个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`8.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`8" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`8.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityFunc`9">
      <summary>定义一个活动委托，它具有八个类型为 T 的 In 参数和一个类型为 TResult 的 Out 参数。</summary>
      <typeparam name="T1">活动委托的第一个 In 参数的类型。</typeparam>
      <typeparam name="T2">活动委托的第二个 In 参数的类型。</typeparam>
      <typeparam name="T3">活动委托的第三个 In 参数的类型。</typeparam>
      <typeparam name="T4">活动委托的第四个 In 参数的类型。</typeparam>
      <typeparam name="T5">活动委托的第五个 In 参数的类型。</typeparam>
      <typeparam name="T6">活动委托的第六个 In 参数的类型。</typeparam>
      <typeparam name="T7">活动委托的第七个 In 参数的类型。</typeparam>
      <typeparam name="T8">活动委托的第八个 In 参数的类型。</typeparam>
      <typeparam name="TResult">活动委托的 Out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityFunc`9.#ctor">
      <summary>创建 <see cref="T:System.Activities.ActivityFunc`9" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument1">
      <summary>获取或设置活动委托的第一个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument2">
      <summary>获取或设置活动委托的第二个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument3">
      <summary>获取或设置活动委托的第三个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument4">
      <summary>获取或设置活动委托的第四个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument5">
      <summary>获取或设置活动委托的第五个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument6">
      <summary>获取或设置活动委托的第六个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument7">
      <summary>获取或设置活动委托的第七个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Argument8">
      <summary>获取或设置活动委托的第八个 In 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityFunc`9.Result">
      <summary>获取或设置活动委托的 Out 参数。</summary>
      <returns>活动委托的参数。</returns>
    </member>
    <member name="T:System.Activities.ActivityInstance">
      <summary>表示在运行时活动的实例状态。</summary>
    </member>
    <member name="P:System.Activities.ActivityInstance.Activity">
      <summary>获取由当前 <see cref="T:System.Activities.ActivityInstance" /> 表示的活动。</summary>
      <returns>由此 <see cref="T:System.Activities.ActivityInstance" /> 表示的活动。</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.Id">
      <summary>获取唯一标识 <see cref="T:System.Activities.ActivityInstance" /> 的标识符。</summary>
      <returns>唯一标识 <see cref="T:System.Activities.ActivityInstance" /> 的标识符。</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.ImplementationVersion">
      <summary>获取或设置实例的实现版本。</summary>
      <returns>用于实例的实现版本。</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.IsCompleted">
      <summary>获取一个值，该值指示由当前 <see cref="T:System.Activities.ActivityInstance" /> 表示的活动是否已完成。</summary>
      <returns>如果活动已完成，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.ActivityInstance.State">
      <summary>获取当前 <see cref="T:System.Activities.ActivityInstance" /> 的 <see cref="T:System.Activities.ActivityInstanceState" />。</summary>
      <returns>活动实例的状态。</returns>
    </member>
    <member name="T:System.Activities.ActivityInstanceState">
      <summary>描述活动实例的状态。</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Canceled">
      <summary>指定活动处于已取消状态。</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Closed">
      <summary>指定活动处于已关闭状态。</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Executing">
      <summary>指定活动处于执行状态。</summary>
    </member>
    <member name="F:System.Activities.ActivityInstanceState.Faulted">
      <summary>指定活动处于出错状态。</summary>
    </member>
    <member name="T:System.Activities.ActivityMetadata">
      <summary>代表参数、子活动、变量和委托的集合，通过一个已配置的 <see cref="T:System.Activities.Activity" /> 引入执行环境。</summary>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>将一个参数添加到某个活动的参数集合中。</summary>
      <param name="argument">要添加到集合中的参数。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>将指定的扩展提供程序添加到活动的默认扩展提供程序的集合中。</summary>
      <param name="extensionProvider">返回扩展的函数。</param>
      <typeparam name="T">扩展提供程序的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedChild(System.Activities.Activity)">
      <summary>将指定的活动添加到导入的子活动的元数据列表中。</summary>
      <param name="importedChild">要添加的活动。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedChild(System.Activities.Activity,System.Object)">
      <summary>将指定的活动添加到导入的子活动的元数据列表中。</summary>
      <param name="importedChild">要添加的活动。</param>
      <param name="origin">源 。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate)">
      <summary>将指定的委托添加到导入的委托的元数据列表中。</summary>
      <param name="importedDelegate">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate,System.Object)">
      <summary>将指定的委托添加到导入的委托的元数据列表中。</summary>
      <param name="importedDelegate">要添加的委托。</param>
      <param name="origin">源 。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>将指定的验证错误添加到验证错误的元数据集合中。</summary>
      <param name="validationError">要添加的验证错误。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddValidationError(System.String)">
      <summary>使用指定的说明将一个验证错误添加到验证错误的元数据集合中。</summary>
      <param name="validationErrorMessage">描述验证错误的消息。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddVariable(System.Activities.Variable)">
      <summary>将指定的变量添加到变量的元数据集合中。</summary>
      <param name="variable">要添加的变量。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.AddVariable(System.Activities.Variable,System.Object)">
      <summary>将指定的变量添加到变量的元数据集合中。</summary>
      <param name="variable">要添加的变量。</param>
      <param name="origin">源 。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>将指定的 <see cref="T:System.Activities.Argument" /> 绑定到指定的 <see cref="T:System.Activities.RuntimeArgument" />。</summary>
      <param name="binding">要绑定的 <see cref="T:System.Activities.Argument" />。</param>
      <param name="argument">要绑定的 <see cref="T:System.Activities.RuntimeArgument" />。</param>
    </member>
    <member name="P:System.Activities.ActivityMetadata.Environment">
      <summary>获取活动的由 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 引入的参数、变量、委托参数或符号的 <see cref="T:System.Activities.LocationReferenceEnvironment" />。</summary>
      <returns>活动的由 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 引入的参数、变量、委托参数或符号的位置引用环境。</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.Equals(System.Object)">
      <summary>确定指定的对象是否等于此元数据实例。</summary>
      <returns>如果指定的对象等于此元数据实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetArgumentsWithReflection">
      <summary>返回通过使用反射获取的参数的集合。</summary>
      <returns>参数的集合。</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetHashCode">
      <summary>返回此元数据实例的唯一标识符。</summary>
      <returns>一个整数，唯一标识此元数据实例。</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetImportedChildrenWithReflection">
      <summary>使用反射返回导入的子活动的集合。</summary>
      <returns>导入的子活动的集合。</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetImportedDelegatesWithReflection">
      <summary>使用反射返回委托的集合。</summary>
      <returns>委托的集合。</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.GetVariablesWithReflection">
      <summary>使用反射返回变量的集合。</summary>
      <returns>变量的集合。</returns>
    </member>
    <member name="P:System.Activities.ActivityMetadata.HasViolations">
      <summary>获取指示元数据中是否存在任何验证错误的值。</summary>
      <returns>如果存在验证错误，则返回的值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.ActivityMetadata.op_Equality(System.Activities.ActivityMetadata,System.Activities.ActivityMetadata)">
      <summary>返回一个值，该值指示两个指定的元数据实例是否相等。</summary>
      <returns>如果两个项相等，则为 true；否则，为 false。</returns>
      <param name="left">要比较的第一项。</param>
      <param name="right">要比较的第二项。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.op_Inequality(System.Activities.ActivityMetadata,System.Activities.ActivityMetadata)">
      <summary>返回一个值，该值指示两个指定的元数据实例是否不相等。</summary>
      <returns>如果两个项不相等，则为 true；否则，为 false。</returns>
      <param name="left">要比较的第一项。</param>
      <param name="right">要比较的第二项。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.RequireExtension``1">
      <summary>指定活动在运行时需要一个指定泛型类型的扩展。</summary>
      <typeparam name="T">扩展的类型。</typeparam>
    </member>
    <member name="M:System.Activities.ActivityMetadata.RequireExtension(System.Type)">
      <summary>指定活动在运行时需要一个指定类型的扩展。</summary>
      <param name="extensionType">扩展的类型。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>将指定的参数集合添加到活动的参数中。</summary>
      <param name="arguments">要添加的参数。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetImportedChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>将指定的集合添加为活动的导入子活动。</summary>
      <param name="importedChildren">要添加的活动。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetImportedDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>将指定的集合添加为活动的导入委托。</summary>
      <param name="importedDelegates">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>将指定的验证错误集合添加到验证错误的元数据集合中。</summary>
      <param name="validationErrors">要添加的验证错误。</param>
    </member>
    <member name="M:System.Activities.ActivityMetadata.SetVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>将指定的变量集合添加到活动的变量中。</summary>
      <param name="variables">要添加的变量。</param>
    </member>
    <member name="T:System.Activities.ActivityPropertyReference">
      <summary>表示一个属性引用，该引用在 <see cref="T:System.Activities.ActivityBuilder" /> 中使用，并在 x:Class 活动反序列化为 <see cref="T:System.Activities.ActivityBuilder" /> 时，在 x:Class 活动中映射到 <see cref="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1" />。</summary>
    </member>
    <member name="M:System.Activities.ActivityPropertyReference.#ctor">
      <summary>初始化 <see cref="T:System.Activities.ActivityPropertyReference" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ActivityPropertyReference.SourceProperty">
      <summary>获取或设置与 x:Class 活动定义中的属性名称对应的源属性名称。</summary>
      <returns>与  x:Class 活动定义中的属性名称对应的源属性名称。</returns>
    </member>
    <member name="P:System.Activities.ActivityPropertyReference.TargetProperty">
      <summary>获取或设置对目标对象设置的属性的名称。</summary>
      <returns>要对目标对象设置的属性的名称。</returns>
    </member>
    <member name="T:System.Activities.ActivityWithResult">
      <summary>检索活动 out 参数的值或类型。 此类为抽象类，是从 <see cref="T:System.Activities.Activity" /> 类派生的。</summary>
    </member>
    <member name="P:System.Activities.ActivityWithResult.Result">
      <summary>在派生类中实现时，获取或设置类型为 <see cref="T:System.Activities.OutArgument" /> 的对象的值。</summary>
      <returns>out 参数。</returns>
    </member>
    <member name="P:System.Activities.ActivityWithResult.ResultType">
      <summary>在派生类中实现时，获取 <see cref="T:System.Activities.OutArgument" /> 活动的类型。</summary>
      <returns>一个类型对象。</returns>
    </member>
    <member name="T:System.Activities.Argument">
      <summary>表示支持数据流入和流出某一活动的绑定终端的抽象基类。</summary>
    </member>
    <member name="P:System.Activities.Argument.ArgumentType">
      <summary>获取数据绑定到此 <see cref="T:System.Activities.Argument" /> 的数据类型。</summary>
      <returns>数据绑定到此 <see cref="T:System.Activities.Argument" /> 的数据类型。</returns>
    </member>
    <member name="M:System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)">
      <summary>初始化并返回一个新的 <see cref="T:System.Activities.Argument" />。</summary>
      <returns>新创建的参数。</returns>
      <param name="type">
        <see cref="T:System.Activities.Argument" /> 的数据类型。</param>
      <param name="direction">通过 <see cref="T:System.Activities.Argument" /> 指定数据流方向的其中一个枚举值。</param>
    </member>
    <member name="M:System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)">
      <summary>使用指定的引用参数名称创建一个引用指定的目标参数的新参数。</summary>
      <returns>引用指定的目标参数的新参数。</returns>
      <param name="argumentToReference">要引用的目标参数。</param>
      <param name="referencedArgumentName">所引用参数的名称。</param>
    </member>
    <member name="P:System.Activities.Argument.Direction">
      <summary>获取 <see cref="T:System.Activities.ArgumentDirection" />，该值指定 <see cref="T:System.Activities.Argument" /> 是表示数据流入活动、流出活动还是流入和流出活动。</summary>
      <returns>通过 <see cref="T:System.Activities.Argument" /> 指定数据流方向的其中一个枚举值。</returns>
    </member>
    <member name="P:System.Activities.Argument.EvaluationOrder">
      <summary>获取或设置一个从零开始的值，该值指定参数的计算顺序。</summary>
      <returns>一个指定参数计算顺序的从零开始的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不等于 <see cref="F:System.Activities.Argument.UnspecifiedEvaluationOrder" /> 且小于 0。</exception>
    </member>
    <member name="P:System.Activities.Argument.Expression">
      <summary>获取或设置一个 <see cref="T: System.Activities.ActivityWithResult" />，表示绑定到此 <see cref="T:System.Activities.Argument" /> 的数据的值。</summary>
      <returns>绑定到此 <see cref="T:System.Activities.Argument" /> 的数据的值。</returns>
    </member>
    <member name="M:System.Activities.Argument.Get(System.Activities.ActivityContext)">
      <summary>使用指定活动上下文获取参数的值。</summary>
      <returns>参数的值。</returns>
      <param name="context">当前活动上下文。</param>
    </member>
    <member name="M:System.Activities.Argument.Get``1(System.Activities.ActivityContext)">
      <summary>使用指定类型和活动上下文获取参数的值。</summary>
      <returns>参数的值。</returns>
      <param name="context">当前活动上下文。</param>
      <typeparam name="T">参数类型。</typeparam>
    </member>
    <member name="M:System.Activities.Argument.GetLocation(System.Activities.ActivityContext)">
      <summary>获取此 <see cref="T:System.Activities.Argument" /> 的 <see cref="T:System.Activities.Location" />。</summary>
      <returns>此 <see cref="T:System.Activities.Argument" /> 的位置。</returns>
      <param name="context">执行活动的活动上下文。</param>
    </member>
    <member name="F:System.Activities.Argument.ResultValue">
      <summary>表示“结果”的常量值，该值对应于表达式基类 <see cref="T:System.Activities.ActivityWithResult" /> 中类型为 <see cref="T:System.Activities.OutArgument" /> 的 <see cref="P:System.Activities.ActivityWithResult.Result" /> 属性的名称。</summary>
    </member>
    <member name="M:System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)">
      <summary>使用指定活动上下文设置参数的值。</summary>
      <param name="context">当前活动上下文。</param>
      <param name="value">参数的值。</param>
    </member>
    <member name="F:System.Activities.Argument.UnspecifiedEvaluationOrder">
      <summary>代表未指定计算顺序的参数的 <see cref="P:System.Activities.Argument.EvaluationOrder" /> 属性的值。 此值为只读。</summary>
    </member>
    <member name="T:System.Activities.ArgumentDirection">
      <summary>为 <see cref="T:System.Activities.Argument" /> 指定数据流的方向。</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.In">
      <summary>表示数据流入工作流或活动的 <see cref="T:System.Activities.Argument" />。</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.InOut">
      <summary>表示数据流入和流出工作流或活动的 <see cref="T:System.Activities.Argument" />。</summary>
    </member>
    <member name="F:System.Activities.ArgumentDirection.Out">
      <summary>表示数据流出工作流或活动的 <see cref="T:System.Activities.Argument" />。</summary>
    </member>
    <member name="T:System.Activities.AsyncCodeActivity">
      <summary>自始至终管理异步代码活动的执行。 这是一个抽象类。</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.#ctor">
      <summary>创建 <see cref="T:System.Activities.AsyncCodeActivity" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.BeginExecute(System.Activities.AsyncCodeActivityContext,System.AsyncCallback,System.Object)">
      <summary>当在派生类中实现并使用指定的执行上下文、回调方法和用户状态时，将异步活动排入运行时工作流队列中。</summary>
      <returns>为异步活动的实例保存变量信息的对象。</returns>
      <param name="context">定义 <see cref="T:System.Activities.AsyncCodeActivity" /> 的执行环境的信息。</param>
      <param name="callback">要在异步活动和完成通知发生之后调用的方法。</param>
      <param name="state">为异步活动的实例保存变量信息的对象。</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>未实现。 请改用 <see cref="M:System.Activities.AsyncCodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" />。</summary>
      <param name="metadata">未实现。</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>用作虚拟方法并将通过缓存反射获取的信息转换为异步活动的参数。</summary>
      <param name="metadata">包含一组异步活动参数的数据的 <see cref="T:System.Activities.CodeActivityMetadata" /> 对象。</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.Cancel(System.Activities.AsyncCodeActivityContext)">
      <summary>当在派生类中实现并使用指定的执行环境信息时，通知工作流运行时异步活动操作已提前完成。 用作虚拟方法。</summary>
      <param name="context">定义 <see cref="T:System.Activities.AsyncCodeActivity" /> 的执行环境的信息。</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.EndExecute(System.Activities.AsyncCodeActivityContext,System.IAsyncResult)">
      <summary>当在派生类中实现并使用指定的执行环境信息时，通知工作流运行时关联异步活动操作已完成。</summary>
      <param name="context">定义 <see cref="T:System.Activities.AsyncCodeActivity" /> 的执行环境的信息。</param>
      <param name="result">执行结束时返回异步活动状态的已实现 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity.Implementation">
      <summary>获取 null 或尝试设置此属性的值时引发错误。</summary>
      <returns>一个活动函数。</returns>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity.ImplementationVersion">
      <summary>获取或设置活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>为动态更新创建映射时，将引发事件。</summary>
      <param name="metadata">使用的元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="T:System.Activities.AsyncCodeActivity`1">
      <summary>自始至终管理指定类型活动的异步代码活动的执行。 这是一个抽象的泛型类。</summary>
      <typeparam name="TResult">此类处理的异步活动的类型。</typeparam>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.AsyncCodeActivity" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.BeginExecute(System.Activities.AsyncCodeActivityContext,System.AsyncCallback,System.Object)">
      <summary>当在派生类中实现并使用指定的执行上下文、回调方法和用户状态时，将异步活动排入运行时工作流队列中。</summary>
      <returns>一个对象。</returns>
      <param name="context">定义 <see cref="T:System.Activities.AsyncCodeActivity" /> 的执行环境的信息。</param>
      <param name="callback">要在异步活动和完成通知发生之后调用的方法。</param>
      <param name="state">为异步活动的实例保存变量信息的对象。</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>未实现。 请改用 <see cref="M:System.Activities.AsyncCodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)" />。</summary>
      <param name="metadata">未实现。</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>用作虚拟方法并将通过缓存反射获取的信息转换为异步活动的参数。</summary>
      <param name="metadata">包含一组异步活动参数的数据的 <see cref="T:System.Activities.CodeActivityMetadata" /> 对象。</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.Cancel(System.Activities.AsyncCodeActivityContext)">
      <summary>当在派生类中实现并使用指定的执行环境信息时，通知工作流运行时异步活动操作已取消。 此方法用作虚拟方法。</summary>
      <param name="context">定义 <see cref="T:System.Activities.AsyncCodeActivity" /> 的执行环境的信息。</param>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.EndExecute(System.Activities.AsyncCodeActivityContext,System.IAsyncResult)">
      <summary>当在派生类中实现并使用指定的执行环境信息时，通知工作流运行时关联异步活动操作已完成。</summary>
      <returns>一种泛型类型。</returns>
      <param name="context">定义 <see cref="T:System.Activities.AsyncCodeActivity" /> 的执行环境的信息。</param>
      <param name="result">执行结束时返回异步活动状态的已实现 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity`1.Implementation">
      <summary>获取 null 或尝试设置此属性的值时引发错误。</summary>
      <returns>一个活动函数。</returns>
    </member>
    <member name="P:System.Activities.AsyncCodeActivity`1.ImplementationVersion">
      <summary>获取或设置活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
    </member>
    <member name="M:System.Activities.AsyncCodeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>为动态更新创建映射时，将引发事件。</summary>
      <param name="metadata">元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="T:System.Activities.AsyncCodeActivityContext">
      <summary>异步活动的执行上下文。</summary>
    </member>
    <member name="P:System.Activities.AsyncCodeActivityContext.IsCancellationRequested">
      <summary>获取用于指示是否要取消当前正在执行的 <see cref="T:System.Activities.AsyncCodeActivity" /> 的值。</summary>
      <returns>如果要取消当前正在执行的 <see cref="T:System.Activities.AsyncCodeActivity" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.AsyncCodeActivityContext.MarkCanceled">
      <summary>将当前活动实例标记为已取消。</summary>
    </member>
    <member name="P:System.Activities.AsyncCodeActivityContext.UserState">
      <summary>获取或设置与当前异步活动关联的用户定义的对象。</summary>
      <returns>用户定义的对象。</returns>
    </member>
    <member name="T:System.Activities.Bookmark">
      <summary>表示工作流或活动可以被动等待恢复的点。</summary>
    </member>
    <member name="M:System.Activities.Bookmark.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.Activities.Bookmark" /> 类的新实例。</summary>
      <param name="name">标识书签的名称。</param>
    </member>
    <member name="M:System.Activities.Bookmark.Equals(System.Activities.Bookmark)">
      <summary>确定当前 <see cref="T:System.Activities.Bookmark" /> 和指定的 <see cref="T:System.Activities.Bookmark" /> 是否引用工作流中的同一延续点。</summary>
      <returns>如果 <see cref="T:System.Activities.Bookmark" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="other">要比较的书签。</param>
    </member>
    <member name="M:System.Activities.Bookmark.Equals(System.Object)">
      <summary>确定当前 <see cref="T:System.Activities.Bookmark" /> 和指定的对象是否引用工作流中的同一延续点。</summary>
      <returns>如果 <see cref="T:System.Activities.Bookmark" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Activities.Bookmark.GetHashCode">
      <summary>返回此 <see cref="T:System.Activities.Bookmark" /> 实例的唯一标识符。</summary>
      <returns>此 <see cref="T:System.Activities.Bookmark" /> 实例的唯一标识符。</returns>
    </member>
    <member name="P:System.Activities.Bookmark.Name">
      <summary>获取书签名。</summary>
      <returns>书签名。</returns>
    </member>
    <member name="M:System.Activities.Bookmark.ToString">
      <summary>返回已命名书签的书签名，或返回未命名书签的书签 ID。</summary>
      <returns>书签名或书签 ID。</returns>
    </member>
    <member name="T:System.Activities.BookmarkCallback">
      <summary>表示在恢复 <see cref="T:System.Activities.Bookmark" /> 后调用的方法。</summary>
      <param name="context">处理 <see cref="T:System.Activities.Bookmark" /> 恢复任务的活动的执行环境。</param>
      <param name="bookmark">要恢复的 <see cref="T:System.Activities.Bookmark" />。</param>
      <param name="value">与 <see cref="T:System.Activities.Bookmark" /> 恢复关联的数据。</param>
    </member>
    <member name="T:System.Activities.BookmarkOptions">
      <summary>为 <see cref="T:System.Activities.Bookmark" /> 指定选项。</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.MultipleResume">
      <summary>可多次恢复的 <see cref="T:System.Activities.Bookmark" />。</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.NonBlocking">
      <summary>不会阻止工作流的 <see cref="T:System.Activities.Bookmark" />。</summary>
    </member>
    <member name="F:System.Activities.BookmarkOptions.None">
      <summary>默认 <see cref="T:System.Activities.Bookmark" /> 选项。</summary>
    </member>
    <member name="T:System.Activities.BookmarkResumptionResult">
      <summary>定义一个成员表示书签安排请求结果的枚举。</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.NotFound">
      <summary>由于找不到书签，因此未安排书签恢复。</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.NotReady">
      <summary>由于运行时尚未创建书签，因此未安排书签恢复。 宿主应等到另一个空闲点再重试恢复。</summary>
    </member>
    <member name="F:System.Activities.BookmarkResumptionResult.Success">
      <summary>已成功安排书签恢复。</summary>
    </member>
    <member name="T:System.Activities.BookmarkScope">
      <summary>限定分类为在同一协议下运行的一组 <see cref="T:System.Activities.Bookmark" /> 对象的范围。</summary>
    </member>
    <member name="M:System.Activities.BookmarkScope.#ctor(System.Guid)">
      <summary>用指定的 GUID 范围标识号创建 <see cref="T:System.Activities.BookmarkScope" /> 类的新实例。</summary>
      <param name="id">GUID 范围标识号。</param>
    </member>
    <member name="P:System.Activities.BookmarkScope.Default">
      <summary>获取默认的 <see cref="T:System.Activities.BookmarkScope" />。</summary>
      <returns>默认为 <see cref="T:System.Activities.BookmarkScope" />。</returns>
    </member>
    <member name="M:System.Activities.BookmarkScope.Equals(System.Activities.BookmarkScope)">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Activities.BookmarkScope" /> 和指定 <see cref="T:System.Activities.BookmarkScope" /> 是否相同。</summary>
      <returns>如果书签范围相同，则为 true；否则为 false。</returns>
      <param name="other">书签范围对象。</param>
    </member>
    <member name="M:System.Activities.BookmarkScope.GetHashCode">
      <summary>为当前 <see cref="T:System.Activities.BookmarkScope" /> 生成标识号。</summary>
      <returns>一个哈希代码。</returns>
    </member>
    <member name="P:System.Activities.BookmarkScope.Id">
      <summary>获取标识当前 <see cref="T:System.Activities.BookmarkScope" /> 的 GUID。</summary>
      <returns>一个 GUID。</returns>
    </member>
    <member name="M:System.Activities.BookmarkScope.Initialize(System.Activities.NativeActivityContext,System.Guid)">
      <summary>使用指定 GUID 初始化当前 <see cref="T:System.Activities.BookmarkScope" />。</summary>
      <param name="context">当前活动的执行环境。</param>
      <param name="id">要分配给 <see cref="T:System.Activities.BookmarkScope" /> 的 GUID。</param>
    </member>
    <member name="P:System.Activities.BookmarkScope.IsInitialized">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Activities.BookmarkScope" /> 是否已初始化。</summary>
      <returns>如果 <see cref="T:System.Activities.BookmarkScope" />已被初始化，则为 true；否则，为 false。</returns>
    </member>
    <member name="T:System.Activities.BookmarkScopeHandle">
      <summary>用于管理 <see cref="T:System.Activities.BookmarkScope" /> 的生存期的 T:System.Handle。</summary>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.#ctor">
      <summary>创建 <see cref="T:System.Activities.BookmarkScopeHandle" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.BookmarkScopeHandle.BookmarkScope">
      <summary>与此 <see cref="T:System.Activities.BookmarkScopeHandle" /> 关联的 <see cref="T:System.Activities.BookmarkScope" />。</summary>
      <returns>
        <see cref="T:System.Activities.BookmarkScope" />。</returns>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.CreateBookmarkScope(System.Activities.NativeActivityContext)">
      <summary>创建一个新的 <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" />。</summary>
      <param name="context">活动上下文。</param>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.CreateBookmarkScope(System.Activities.NativeActivityContext,System.Guid)">
      <summary>创建一个新的 <see cref="T:System.Activities.BookmarkScope" />。</summary>
      <param name="context">活动上下文。</param>
      <param name="scopeId">与 <see cref="T:System.Activities.BookmarkScope" /> 关联的全局唯一标识符。</param>
    </member>
    <member name="P:System.Activities.BookmarkScopeHandle.Default">
      <summary>默认为 <see cref="T:System.Activities.BookmarkScopeHandle" />。</summary>
      <returns>
        <see cref="T:System.Activities.BookmarkScopeHandle" />。</returns>
    </member>
    <member name="M:System.Activities.BookmarkScopeHandle.Initialize(System.Activities.NativeActivityContext,System.Guid)">
      <summary>使用指定的活动上下文和 GUID 标识符初始化 <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" />。</summary>
      <param name="context">活动上下文。</param>
      <param name="scope">与 <see cref="P:System.Activities.BookmarkScopeHandle.BookmarkScope" /> 关联的 GUID 标识符。</param>
    </member>
    <member name="T:System.Activities.CodeActivity">
      <summary>一种抽象类，用于创建具有强制行为（该行为是使用 <see cref="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)" /> 方法定义的，利用该方法可以访问变量以及参数解析和扩展）的自定义活动。</summary>
    </member>
    <member name="M:System.Activities.CodeActivity.#ctor">
      <summary>在派生类中实现时，创建派生类的实例。</summary>
    </member>
    <member name="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>未实现。 请改用 <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" />。</summary>
      <param name="metadata">未实现。</param>
    </member>
    <member name="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>创建并验证活动的参数、变量、子活动和活动委托的说明。</summary>
      <param name="metadata">活动的元数据，用于封装活动的参数、变量、子活动和活动委托。</param>
    </member>
    <member name="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)">
      <summary>在派生类中实现时，执行该活动。</summary>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="P:System.Activities.CodeActivity.Implementation">
      <summary>不支持。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="P:System.Activities.CodeActivity.ImplementationVersion">
      <summary>获取或设置活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
    </member>
    <member name="M:System.Activities.CodeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>为动态更新创建映射时，将引发事件。</summary>
      <param name="metadata">元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="T:System.Activities.CodeActivity`1">
      <summary>一个抽象类，用于创建具有强制行为（该行为使用 <see cref="M:System.Activities.CodeActivity.Execute(System.Activities.CodeActivityContext)" /> 方法定义）的自定义活动，从而提供对变量和参数解析及扩展的访问。</summary>
      <typeparam name="TResult">活动返回的结果。</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivity`1.#ctor">
      <summary>在派生类中实现时，创建派生类的实例。</summary>
    </member>
    <member name="M:System.Activities.CodeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>未实现。 请改用 <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" />。</summary>
      <param name="metadata">未实现。</param>
    </member>
    <member name="M:System.Activities.CodeActivity`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>创建并验证活动的参数、变量、子活动和活动委托的说明。</summary>
      <param name="metadata">活动的元数据，用于封装活动的参数、变量、子活动和活动委托。</param>
    </member>
    <member name="M:System.Activities.CodeActivity`1.Execute(System.Activities.CodeActivityContext)">
      <summary>在派生类中实现时，执行该活动。</summary>
      <returns>活动执行的结果。</returns>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="P:System.Activities.CodeActivity`1.Implementation">
      <summary>不支持。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="P:System.Activities.CodeActivity`1.ImplementationVersion">
      <summary>获取或设置活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
    </member>
    <member name="M:System.Activities.CodeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>为动态更新创建映射时，将引发事件。</summary>
      <param name="metadata">元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="T:System.Activities.CodeActivityContext">
      <summary>扩展 <see cref="T:System.Activities.ActivityContext" /> 并为 <see cref="T:System.Activities.CodeActivity" /> 提供附加功能。</summary>
    </member>
    <member name="M:System.Activities.CodeActivityContext.GetProperty``1">
      <summary>获取指定类型的执行属性。</summary>
      <returns>执行属性。</returns>
      <typeparam name="THandle">执行属性的类型。</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityContext.Track(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>将指定的自定义跟踪记录发送到已注册的任何跟踪提供程序。</summary>
      <param name="record">要跟踪的数据。</param>
    </member>
    <member name="T:System.Activities.CodeActivityMetadata">
      <summary>代表参数的集合，通过一个已配置 <see cref="T:System.Activities.CodeActivity" /> 引入执行环境。</summary>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>将一个参数添加到某个活动的参数集合中。</summary>
      <param name="argument">要添加到集合中的参数。</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>将指定的扩展提供程序添加到活动的默认扩展提供程序的集合中。</summary>
      <param name="extensionProvider">返回扩展的函数。</param>
      <typeparam name="T">扩展提供程序的类型。</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>将指定的验证错误添加到验证错误的元数据集合中。</summary>
      <param name="validationError">要添加的验证错误。</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.AddValidationError(System.String)">
      <summary>使用指定的说明将一个验证错误添加到验证错误的元数据集合中。</summary>
      <param name="validationErrorMessage">描述验证错误的消息。</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>将指定的 <see cref="T:System.Activities.Argument" /> 绑定到指定的 <see cref="T:System.Activities.RuntimeArgument" />。</summary>
      <param name="binding">要绑定的 <see cref="T:System.Activities.Argument" />。</param>
      <param name="argument">要绑定的 <see cref="T:System.Activities.RuntimeArgument" />。</param>
    </member>
    <member name="P:System.Activities.CodeActivityMetadata.Environment">
      <summary>获取活动的由 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 引入的参数或符号的 <see cref="T:System.Activities.LocationReferenceEnvironment" />。</summary>
      <returns>活动的由 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 引入的参数或符号的位置引用环境。</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.Equals(System.Object)">
      <summary>确定指定的对象是否等于此元数据实例。</summary>
      <returns>如果指定的对象等于此元数据实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.GetArgumentsWithReflection">
      <summary>返回通过使用反射获取的参数的集合。</summary>
      <returns>参数的集合。</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.GetHashCode">
      <summary>返回此元数据实例的唯一标识符。</summary>
      <returns>一个整数，唯一标识此元数据实例。</returns>
    </member>
    <member name="P:System.Activities.CodeActivityMetadata.HasViolations">
      <summary>获取指示元数据中是否存在任何验证错误的值。</summary>
      <returns>如果存在验证错误，则返回的值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.op_Equality(System.Activities.CodeActivityMetadata,System.Activities.CodeActivityMetadata)">
      <summary>返回一个值，该值指示两个指定的元数据实例是否相等。</summary>
      <returns>如果两个项相等，则为 true；否则，为 false。</returns>
      <param name="left">要比较的第一项。</param>
      <param name="right">要比较的第二项。</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.op_Inequality(System.Activities.CodeActivityMetadata,System.Activities.CodeActivityMetadata)">
      <summary>返回一个值，该值指示两个指定的元数据实例是否不相等。</summary>
      <returns>如果两个项不相等，则为 true；否则，为 false。</returns>
      <param name="left">要比较的第一项。</param>
      <param name="right">要比较的第一项。</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.RequireExtension``1">
      <summary>指定活动在运行时需要一个指定泛型类型的扩展。</summary>
      <typeparam name="T">扩展的类型。</typeparam>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.RequireExtension(System.Type)">
      <summary>指定活动在运行时需要一个指定类型的扩展。</summary>
      <param name="extensionType">扩展的类型。</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>将指定的参数集合添加到活动的参数中。</summary>
      <param name="arguments">要添加的参数。</param>
    </member>
    <member name="M:System.Activities.CodeActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>将指定的验证错误集合添加到验证错误的元数据集合中。</summary>
      <param name="validationErrors">要添加的验证错误。</param>
    </member>
    <member name="T:System.Activities.CodeActivityPublicEnvironmentAccessor">
      <summary>指定有关公共环境访问器的信息。</summary>
    </member>
    <member name="P:System.Activities.CodeActivityPublicEnvironmentAccessor.ActivityMetadata">
      <summary>获取活动的参数、变量、子活动和活动委托。</summary>
      <returns>活动的参数、变量、子活动和活动委托。</returns>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.Create(System.Activities.CodeActivityMetadata)">
      <summary>创建参数、子活动、变量、和活动委托的描述信息。</summary>
      <returns>参数、子活动、变量、和活动委托的描述。</returns>
      <param name="metadata">活动的元数据，用于封装活动的参数、变量、子活动和活动委托。</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.Equals(System.Object)">
      <summary>确定指定的对象是否等于公共环境访问器。</summary>
      <returns>如果指定的对象等于公共环境访问器，则为 True；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.GetHashCode">
      <summary>返回此公共环境访问器的唯一标识符。</summary>
      <returns>此公共环境访问器的唯一标识符。</returns>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.op_Equality(System.Activities.CodeActivityPublicEnvironmentAccessor,System.Activities.CodeActivityPublicEnvironmentAccessor)">
      <summary>返回一个值，该值指示两个指定的元数据实例是否相等。</summary>
      <returns>如果两个指定的元数据实例完全相等，则为 True；否则，为 false。</returns>
      <param name="left">要比较的第一项。</param>
      <param name="right">要比较的第二项。</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.op_Inequality(System.Activities.CodeActivityPublicEnvironmentAccessor,System.Activities.CodeActivityPublicEnvironmentAccessor)">
      <summary>返回一个值，该值指示两个指定的元数据实例是否不相等。</summary>
      <returns>如果两个指定的元数据实例不相等，则为 True；否则，为 false。</returns>
      <param name="left">要比较的第一项。</param>
      <param name="right">要比较的第二项。</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.TryGetAccessToPublicLocation(System.Activities.LocationReference,System.Activities.ArgumentDirection,System.Activities.LocationReference@)">
      <summary>返回指示活动是否会尝试获取对公共位置的访问的值。</summary>
      <returns>如果尝试的活动将获取对公共位置的访问，则为 True；否则为 false。</returns>
      <param name="publicLocation">公共位置参考。</param>
      <param name="accessDirection">访问方向引用。</param>
      <param name="equivalentLocation">等效位置引用。</param>
    </member>
    <member name="M:System.Activities.CodeActivityPublicEnvironmentAccessor.TryGetReferenceToPublicLocation(System.Activities.LocationReference,System.Activities.LocationReference@)">
      <summary>返回指示活动是否会尝试获取公共位置的引用的值。</summary>
      <returns>如果活动将尝试获取公共位置的引用，则为 True；否则为 false。</returns>
      <param name="publicReference">公共参考位置。</param>
      <param name="equivalentReference">等效引用位置。</param>
    </member>
    <member name="T:System.Activities.CompletionCallback">
      <summary>活动完成后调用的方法。</summary>
      <param name="context">活动的执行环境。</param>
      <param name="completedInstance">已完成的活动。</param>
    </member>
    <member name="T:System.Activities.CompletionCallback`1">
      <summary>活动完成后调用的方法。</summary>
      <param name="context">活动的执行环境。</param>
      <param name="completedInstance">已完成的活动。</param>
      <param name="result">已完成的活动的 <see cref="P:System.Activities.WorkflowElement`1.Result" /> 值。</param>
      <typeparam name="TResult">结果值的类型。</typeparam>
    </member>
    <member name="T:System.Activities.DelegateArgument">
      <summary>表示支持数据流入和流出 <see cref="T:System.Activities.ActivityDelegate" /> 的绑定终端的抽象基类。</summary>
    </member>
    <member name="P:System.Activities.DelegateArgument.Direction">
      <summary>获取 <see cref="T:System.Activities.ArgumentDirection" />，该值指定 <see cref="T:System.Activities.DelegateArgument" /> 是表示数据流入 <see cref="T:System.Activities.ActivityDelegate" />、流出 <see cref="T:System.Activities.ActivityDelegate" /> 还是流入和流出 <see cref="T:System.Activities.ActivityDelegate" />。</summary>
      <returns>指定数据流通过 <see cref="T:System.Activities.DelegateArgument" /> 的方向的枚举值之一。</returns>
    </member>
    <member name="M:System.Activities.DelegateArgument.Get(System.Activities.ActivityContext)">
      <summary>使用指定的活动上下文返回参数的值。</summary>
      <returns>参数的值。</returns>
      <param name="context">当前活动上下文。</param>
    </member>
    <member name="M:System.Activities.DelegateArgument.GetLocation(System.Activities.ActivityContext)">
      <summary>返回由 <see cref="T:System.Activities.DelegateArgument" /> 引用的值的 <see cref="T:System.Activities.Location" />。</summary>
      <returns>由 <see cref="T:System.Activities.DelegateArgument" /> 引用的值的位置。</returns>
      <param name="context">当前活动上下文。</param>
    </member>
    <member name="P:System.Activities.DelegateArgument.Name">
      <summary>获取或设置 <see cref="T:System.Activities.DelegateArgument" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Activities.DelegateArgument" /> 的名称。</returns>
    </member>
    <member name="P:System.Activities.DelegateArgument.NameCore">
      <summary>获取 <see cref="P:System.Activities.DelegateArgument.Name" /> 使用的字符串值。</summary>
      <returns>
        <see cref="T:System.Activities.DelegateArgument" /> 的名称。</returns>
    </member>
    <member name="T:System.Activities.DelegateCompletionCallback">
      <summary>表示在 <see cref="T:System.Activities.ActivityDelegate" /> 完成后调用的方法。</summary>
      <param name="context">处理回调的活动的执行环境。</param>
      <param name="completedInstance">
        <see cref="T:System.Activities.ActivityDelegate" /> 处理程序的已完成活动实例。</param>
      <param name="outArguments">已完成的 <see cref="T:System.Activities.ActivityDelegate" /> 的输出参数。</param>
    </member>
    <member name="T:System.Activities.DelegateInArgument">
      <summary>抽象基类，表示支持数据流入 <see cref="T:System.Activities.ActivityDelegate" /> 的绑定终端。</summary>
    </member>
    <member name="T:System.Activities.DelegateInArgument`1">
      <summary>表示数据流入 <see cref="T:System.Activities.ActivityDelegate" /> 的绑定终端。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.DelegateInArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DelegateInArgument`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.Activities.DelegateInArgument`1" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Activities.DelegateInArgument`1" /> 的名称。</param>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.Get(System.Activities.ActivityContext)">
      <summary>获取 <see cref="T:System.Activities.DelegateInArgument`1" /> 的值。</summary>
      <returns>
        <see cref="T:System.Activities.DelegateInArgument`1" /> 的值。</returns>
      <param name="context">当前活动上下文。</param>
    </member>
    <member name="M:System.Activities.DelegateInArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.DelegateInArgument`1" />.</summary>
      <param name="context">当前活动上下文。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.Activities.DelegateOutArgument">
      <summary>表示支持数据流出 <see cref="T:System.Activities.ActivityDelegate" /> 的绑定终端的抽象基类。</summary>
    </member>
    <member name="T:System.Activities.DelegateOutArgument`1">
      <summary>表示数据流出 <see cref="T:System.Activities.ActivityDelegate" /> 的绑定终端。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.DelegateOutArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DelegateOutArgument`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.Activities.DelegateOutArgument`1" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Activities.DelegateOutArgument`1" /> 的名称。</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>获取 <see cref="T:System.Activities.DelegateOutArgument`1" /> 的值。</summary>
      <returns>
        <see cref="T:System.Activities.DelegateOutArgument`1" /> 的值。</returns>
      <param name="context">当前活动上下文。</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Returns the <see cref="T:System.Activities.Location`1" /> for this <see cref="T:System.Activities.DelegateOutArgument`1" />.</summary>
      <returns>此 <see cref="T:System.Activities.DelegateOutArgument`1" /> 的位置。</returns>
      <param name="context">包含此 <see cref="T:System.Activities.DelegateOutArgument`1" /> 的位置的活动上下文。</param>
    </member>
    <member name="M:System.Activities.DelegateOutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>Sets the value of the <see cref="T:System.Activities.DelegateOutArgument`1" />.</summary>
      <param name="context">当前活动上下文。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.Activities.DynamicActivity">
      <summary>提供一个对象模型，该模型允许您使用 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 以动态方式构造与 WF 设计器和运行时交互的活动。</summary>
    </member>
    <member name="M:System.Activities.DynamicActivity.#ctor">
      <summary>创建 <see cref="T:System.Activities.DynamicActivity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.DynamicActivity.Attributes">
      <summary>获取动态生成的活动的特性的集合。</summary>
      <returns>特性的集合。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Constraints">
      <summary>返回配置为用于验证 <see cref="T:System.Activities.DynamicActivity" /> 的 <see cref="T:System.Activities.Validation.Constraint" /> 活动的集合。</summary>
      <returns>约束集合。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Implementation">
      <summary>获取或设置活动的执行逻辑。</summary>
      <returns>执行逻辑。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.ImplementationVersion">
      <summary>获取或设置活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Name">
      <summary>在工作流设计器中显示的活动的名称。</summary>
      <returns>活动名称。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity.Properties">
      <summary>获取映射到动态生成的活动的参数的属性的集合。</summary>
      <returns>属性的集合。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回动态活动的特性集合。</summary>
      <returns>动态活动的特性。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回动态活动的类名称。</summary>
      <returns>类名。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回动态活动的组件名称。</summary>
      <returns>组件名称。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回动态活动的类型转换器。</summary>
      <returns>此动态活动实例的类型转换器。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回动态活动的默认事件。</summary>
      <returns>默认事件。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回动态活动的默认属性。</summary>
      <returns>默认属性。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>使用指定的基类型返回编辑器。</summary>
      <returns>可被强制转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 null。</returns>
      <param name="editorBaseType">要查找的编辑器的基类型。</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回动态活动的事件集合。</summary>
      <returns>事件集合。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>通过将指定的特性数组用作筛选器来返回动态活动的事件的集合。</summary>
      <returns>与指定特性匹配的事件的集合。</returns>
      <param name="attributes">可以用作筛选器的数组。</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回动态活动的属性集合。</summary>
      <returns>属性的集合。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>通过将指定的特性数组用作筛选器来返回动态活动的属性的集合。</summary>
      <returns>与指定特性匹配的属性的集合。</returns>
      <param name="attributes">可以用作筛选器的数组。</param>
    </member>
    <member name="M:System.Activities.DynamicActivity.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回 <see cref="T:System.Activities.DynamicActivity" /> 类的此实例。</summary>
      <returns>此 <see cref="T:System.Activities.DynamicActivity" /> 实例。</returns>
      <param name="pd">要查找其所有者的属性。</param>
    </member>
    <member name="T:System.Activities.DynamicActivity`1">
      <summary>提供一种与文档对象模型 (DOM) 一致的方法，该方法允许您使用 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 以动态方式构造与 WF 设计器和工作流运行时交互的活动。</summary>
      <typeparam name="TResult">活动返回的结果。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.DynamicActivity`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Attributes">
      <summary>获取动态生成的活动的特性的集合。</summary>
      <returns>特性的集合。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Constraints">
      <summary>返回配置为用于验证 <see cref="T:System.Activities.DynamicActivity`1" /> 的 <see cref="T:System.Activities.Validation.Constraint" /> 活动的集合。</summary>
      <returns>约束集合。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Implementation">
      <summary>获取或设置活动的执行逻辑。</summary>
      <returns>执行逻辑。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.ImplementationVersion">
      <summary>获取或设置活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Name">
      <summary>获取要在工作流设计器中显示的活动的名称。</summary>
      <returns>活动名称。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivity`1.Properties">
      <summary>获取映射到动态生成的活动的参数的属性的集合。</summary>
      <returns>属性的集合。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回动态活动的特性集合。</summary>
      <returns>动态活动的特性。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回动态活动的类名称。</summary>
      <returns>类名。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回动态活动的组件名称。</summary>
      <returns>组件名称。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回动态活动的类型转换器。</summary>
      <returns>此动态活动实例的类型转换器。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回动态活动的默认事件。</summary>
      <returns>默认事件。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回动态活动的默认属性。</summary>
      <returns>默认属性。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>使用指定的基类型返回编辑器。</summary>
      <returns>可被强制转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 null。</returns>
      <param name="editorBaseType">要查找的编辑器的基类型。</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回动态活动的事件集合。</summary>
      <returns>事件集合。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>通过将指定的特性数组用作筛选器来返回动态活动的事件的集合。</summary>
      <returns>与指定特性匹配的事件的集合。</returns>
      <param name="attributes">可以用作筛选器的数组。</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回动态活动的属性集合。</summary>
      <returns>属性的集合。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>通过将指定的特性数组用作筛选器来返回动态活动的属性的集合。</summary>
      <returns>与指定特性匹配的属性的集合。</returns>
      <param name="attributes">可以用作筛选器的数组。</param>
    </member>
    <member name="M:System.Activities.DynamicActivity`1.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回 <see cref="T:System.Activities.DynamicActivity`1" /> 类的此实例。</summary>
      <returns>此 <see cref="T:System.Activities.DynamicActivity`1" /> 实例。</returns>
      <param name="pd">要查找其所有者的属性。</param>
    </member>
    <member name="T:System.Activities.DynamicActivityProperty">
      <summary>表示在运行时创建并在 <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> 中执行的 <see cref="T:System.Activities.DynamicActivity" /> 的一个属性。</summary>
    </member>
    <member name="M:System.Activities.DynamicActivityProperty.#ctor">
      <summary>创建 <see cref="T:System.Activities.DynamicActivityProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Attributes">
      <summary>返回 <see cref="T:System.Activities.DynamicActivityProperty" /> 对象的特性。</summary>
      <returns>特性的集合。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Name">
      <summary>获取或设置 <see cref="T:System.Activities.DynamicActivityProperty" /> 对象的名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Activities.DynamicActivityProperty.ToString">
      <summary>返回一条字符串消息，其中包含 <see cref="T:System.Activities.DynamicActivityProperty" /> 实例的类型和名称。</summary>
      <returns>一条字符串消息。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Type">
      <summary>获取或设置 <see cref="T:System.Activities.DynamicActivityProperty" /> 对象的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 类型的对象。</returns>
    </member>
    <member name="P:System.Activities.DynamicActivityProperty.Value">
      <summary>获取或设置 <see cref="T:System.Activities.DynamicActivityProperty" /> 对象的值。</summary>
      <returns>
        <see cref="T:System.Object" /> 类型的对象。</returns>
    </member>
    <member name="T:System.Activities.ExceptionPersistenceExtension">
      <summary>指定异常持久性。</summary>
    </member>
    <member name="M:System.Activities.ExceptionPersistenceExtension.#ctor">
      <summary>初始化 <see cref="T:System.Activities.ExceptionPersistenceExtension" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.ExceptionPersistenceExtension.PersistExceptions">
      <summary>获取或设置一个值，该值指示异常是否将保持。</summary>
      <returns>如果将保存异常，则为 True；否则为 false。</returns>
    </member>
    <member name="T:System.Activities.ExclusiveHandle">
      <summary>向书签添加补充信息，使书签能够访问其范围句柄的子集，从而排除不需要的句柄。</summary>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.#ctor">
      <summary>创建 <see cref="T:System.Activities.ExclusiveHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)">
      <summary>从指定的句柄初始化上下文中的句柄变量创建默认 <see cref="T:System.Activities.BookmarkScopeHandle" /> 对象列表。</summary>
      <param name="context">在其中创建句柄的环境。</param>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)">
      <summary>使用指定的上下文将指定书签范围句柄添加到 <see cref="T:System.Activities.BookmarkScopeHandle" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</summary>
      <param name="context">在其中创建句柄的环境。</param>
      <param name="bookmarkScopeHandle">用于标识和访问在工作流活动操作中于同一协议下运行的一组书签的令牌。</param>
    </member>
    <member name="P:System.Activities.ExclusiveHandle.RegisteredBookmarkScopes">
      <summary>获取 <see cref="T:System.Activities.BookmarkScopeHandle" /> 对象的新的或现有 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</summary>
      <returns>书签范围句柄的只读集合。</returns>
    </member>
    <member name="M:System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)">
      <summary>将已注册书签范围句柄恢复为默认值。</summary>
      <param name="context">在其中创建句柄的环境。</param>
    </member>
    <member name="T:System.Activities.ExecutionProperties">
      <summary>表示特定范围内的属性的集合。</summary>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Add(System.String,System.Object)">
      <summary>使用指定的名称注册一个新属性。</summary>
      <param name="name">属性的名称。</param>
      <param name="property">表示该属性的对象。</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)">
      <summary>使用指定的名称和子级可见性注册一个属性。</summary>
      <param name="name">属性的名称。</param>
      <param name="property">表示该属性的对象。</param>
      <param name="onlyVisibleToPublicChildren">确定此属性是否对所属活动的子级可见的值。</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Find(System.String)">
      <summary>返回与给定名称最接近的属性。</summary>
      <returns>与给定名称最接近的属性。</returns>
      <param name="name">属性的名称。</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.GetEnumerator">
      <summary>返回一个循环访问属性集合的枚举器。</summary>
      <returns>一个循环访问属性集合的枚举器。</returns>
    </member>
    <member name="P:System.Activities.ExecutionProperties.IsEmpty">
      <summary>获取一个值，该值指示当前范围内是否存在已注册的属性。</summary>
      <returns>如果存在已注册的属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.ExecutionProperties.Remove(System.String)">
      <summary>注销具有指定名称的属性。</summary>
      <returns>如果属性已注销，则为 true；否则，为 false。</returns>
      <param name="name">要注销的属性的名称。</param>
    </member>
    <member name="M:System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问属性集合的枚举器。</summary>
      <returns>一个循环访问属性集合的枚举器。</returns>
    </member>
    <member name="T:System.Activities.FaultCallback">
      <summary>表示计划活动或其中的一个子活动进入 <see cref="F:System.Activities.ActivityInstanceState.Faulted" /> 状态时调用的方法。</summary>
      <param name="faultContext">为检查工作流错误而提供的 <see cref="T:System.Activities.ActivityFaultContext" />。</param>
      <param name="propagatedException">导致错误的异常。</param>
      <param name="propagatedFrom">引发异常并生成错误的活动。</param>
    </member>
    <member name="T:System.Activities.Handle">
      <summary>表示一种生存期由工作流运行时控制的类型。</summary>
    </member>
    <member name="M:System.Activities.Handle.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Handle" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Handle.ExecutionPropertyName">
      <summary>当添加到活动的执行属性时，获取此 <see cref="T:System.Activities.Handle" /> 要使用的名称。</summary>
      <returns>由 <see cref="P:System.Type.FullName" /> 提供的派生类型的名称。</returns>
    </member>
    <member name="M:System.Activities.Handle.OnInitialize(System.Activities.HandleInitializationContext)">
      <summary>当初始化包含 <see cref="T:System.Activities.Handle" /> 的环境时，由工作流运行时调用。</summary>
      <param name="context">将在其中创建句柄的环境。</param>
    </member>
    <member name="M:System.Activities.Handle.OnUninitialize(System.Activities.HandleInitializationContext)">
      <summary>当 <see cref="T:System.Activities.Handle" /> 的 <see cref="T:System.Activities.Variable" /> 超出作用域时，由工作流运行时调用。</summary>
      <param name="context">在其中创建了句柄的环境。</param>
    </member>
    <member name="P:System.Activities.Handle.Owner">
      <summary>获取包含 <see cref="T:System.Activities.Variable" />（其中包含 <see cref="T:System.Activities.Handle" />）的 <see cref="T:System.Activities.ActivityInstance" />。</summary>
      <returns>包含 <see cref="T:System.Activities.Variable" />（其中包含 <see cref="T:System.Activities.Handle" />）的活动实例。</returns>
    </member>
    <member name="M:System.Activities.Handle.ThrowIfUninitialized">
      <summary>如果尚未初始化 <see cref="T:System.Activities.Handle" />，则将引发 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="T:System.Activities.HandleInitializationContext">
      <summary>表示 <see cref="T:System.Activities.Handle" /> 的初始化环境。</summary>
    </member>
    <member name="M:System.Activities.HandleInitializationContext.CreateAndInitializeHandle``1">
      <summary>创建并初始化类型参数指定的句柄类型的新实例。</summary>
      <returns>类型参数指定的句柄类型的已初始化的新实例。</returns>
      <typeparam name="THandle">要创建并初始化的 <see cref="T:System.Activities.Handle" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.HandleInitializationContext.GetExtension``1">
      <summary>检索类的扩展名。</summary>
      <returns>类的扩展名。</returns>
      <typeparam name="T">类。</typeparam>
    </member>
    <member name="M:System.Activities.HandleInitializationContext.UninitializeHandle(System.Activities.Handle)">
      <summary>取消对指定的 <see cref="T:System.Activities.Handle" /> 的初始化。</summary>
      <param name="handle">要取消初始化的 <see cref="T:System.Activities.Handle" />。</param>
    </member>
    <member name="T:System.Activities.IExecutionProperty">
      <summary>为执行属性提供一种在关联活动的工作项前后配置线程本地存储区的机制。</summary>
    </member>
    <member name="M:System.Activities.IExecutionProperty.CleanupWorkflowThread">
      <summary>使执行属性有机会关闭线程本地存储区。</summary>
    </member>
    <member name="M:System.Activities.IExecutionProperty.SetupWorkflowThread">
      <summary>使执行属性有机会设置线程本地存储区。</summary>
    </member>
    <member name="T:System.Activities.InArgument">
      <summary>表示支持数据流入某一活动的绑定终端的抽象基类。</summary>
    </member>
    <member name="M:System.Activities.InArgument.CreateReference(System.Activities.InArgument,System.String)">
      <summary>使用指定的引用参数名称创建一个引用指定目标 <see cref="T:System.Activities.InArgument" /> 的新 <see cref="T:System.Activities.InArgument" />。</summary>
      <returns>一个新的 in，它引用指定的目标 <see cref="T:System.Activities.InArgument" />。</returns>
      <param name="argumentToReference">要引用的 in 目标参数。</param>
      <param name="referencedArgumentName">所引用参数的名称。</param>
    </member>
    <member name="M:System.Activities.InArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>使用指定的引用参数名称创建一个引用指定目标 <see cref="T:System.Activities.InOutArgument" /> 的新 <see cref="T:System.Activities.InArgument" />。</summary>
      <returns>一个新的 in，它引用指定的目标 <see cref="T:System.Activities.InOutArgument" />。</returns>
      <param name="argumentToReference">要引用的in/out目标参数。</param>
      <param name="referencedArgumentName">所引用参数的名称。</param>
    </member>
    <member name="T:System.Activities.InArgument`1">
      <summary>表示数据流入活动的绑定终端。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor">
      <summary>用默认值初始化 <see cref="T:System.Activities.InArgument`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.Activity{`0})">
      <summary>使用指定 <see cref="T:System.Activities.Activity`1" /> 初始化 <see cref="T:System.Activities.InArgument`1" /> 类的新实例。</summary>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.DelegateArgument)">
      <summary>使用指定 <see cref="T:System.Activities.DelegateArgument" /> 初始化 <see cref="T:System.Activities.InArgument`1" /> 类的新实例。</summary>
      <param name="delegateArgument">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Activities.Variable)">
      <summary>使用指定 <see cref="T:System.Activities.Variable" /> 初始化 <see cref="T:System.Activities.InArgument`1" /> 类的新实例。</summary>
      <param name="variable">通过此参数传递的数据。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>使用指定的表达式初始化 <see cref="T:System.Activities.InArgument`1" /> 类的新实例。</summary>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.#ctor(`0)">
      <summary>使用指定的值初始化 <see cref="T:System.Activities.InArgument`1" /> 类的新实例。</summary>
      <param name="constValue">参数的值。</param>
    </member>
    <member name="P:System.Activities.InArgument`1.Expression">
      <summary>获取一个表示此 <see cref="T:System.Activities.InArgument`1" /> 的值的 <see cref="T:System.Activities.Activity`1" />。</summary>
      <returns>表示参数值的活动。</returns>
    </member>
    <member name="M:System.Activities.InArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>新参数。</returns>
      <param name="delegateArgument">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromExpression(System.Activities.Activity{`0})">
      <summary>使用指定的 <see cref="T:System.Activities.Activity`1" /> 初始化或返回一个新的 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromValue(`0)">
      <summary>使用指定值初始化并返回一个新的 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="constValue">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.FromVariable(System.Activities.Variable)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>新参数。</returns>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.Get(System.Activities.ActivityContext)">
      <summary>使用指定的活动上下文获取 <see cref="T:System.Activities.InArgument`1" /> 的值。</summary>
      <returns>参数的值。</returns>
      <param name="context">当前活动上下文。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.Activity{`0})~System.Activities.InArgument{`0}">
      <summary>使用指定的 <see cref="T:System.Activities.Activity`1" /> 初始化或返回一个新的 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>新参数。</returns>
      <param name="delegateArgument">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.InArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InArgument`1" /> using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>新参数。</returns>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.op_Implicit(`0)~System.Activities.InArgument{`0}">
      <summary>使用指定值初始化并返回一个新的 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="constValue">参数的值。</param>
    </member>
    <member name="M:System.Activities.InArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>使用指定值设置 <see cref="T:System.Activities.InArgument`1" /> 的值。</summary>
      <param name="context">当前活动上下文。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.Activities.InOutArgument">
      <summary>表示支持数据流入和流出某一活动的绑定终端的抽象基类。</summary>
    </member>
    <member name="M:System.Activities.InOutArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>使用指定的引用参数名称创建一个引用指定目标 <see cref="T:System.Activities.InOutArgument" /> 的新 <see cref="T:System.Activities.InOutArgument" />。</summary>
      <returns>一个新的 in/out，它引用指定的目标 <see cref="T:System.Activities.InOutArgument" />。</returns>
      <param name="argumentToReference">要引用的in/out目标参数。</param>
      <param name="referencedArgumentName">所引用参数的名称。</param>
    </member>
    <member name="T:System.Activities.InOutArgument`1">
      <summary>表示数据流入和流出活动的绑定终端。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.InOutArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor">
      <summary>用默认值初始化 <see cref="T:System.Activities.InOutArgument`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>使用指定 <see cref="T:System.Activities.Activity`1" /> 初始化 <see cref="T:System.Activities.InOutArgument`1" /> 类的新实例。</summary>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Variable)">
      <summary>使用指定 <see cref="T:System.Activities.Variable" /> 初始化 <see cref="T:System.Activities.InOutArgument`1" /> 类的新实例。</summary>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Activities.Variable{`0})">
      <summary>使用指定 <see cref="T:System.Activities.Variable`1" /> 初始化 <see cref="T:System.Activities.InOutArgument`1" /> 类的新实例。</summary>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>使用指定的表达式初始化 <see cref="T:System.Activities.InOutArgument`1" /> 类的新实例。</summary>
      <param name="expression">参数的值。</param>
    </member>
    <member name="P:System.Activities.InOutArgument`1.Expression">
      <summary>获取一个表示此 <see cref="T:System.Activities.InOutArgument`1" /> 的值的 <see cref="T:System.Activities.Activity`1" />。</summary>
      <returns>参数的值。</returns>
    </member>
    <member name="M:System.Activities.InOutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>新参数。</returns>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.FromVariable(System.Activities.Variable{`0})">
      <summary>初始化并返回一个使用指定的 <see cref="T:System.Activities.Variable`1" /> 构造的新 <see cref="T:System.Activities.InOutArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.InOutArgument`1" /> using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <returns>参数的值。</returns>
      <param name="context">包含参数的值的活动上下文。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>获取 <see cref="T:System.Activities.InOutArgument`1" /> 的值的位置。</summary>
      <returns>对用于存储参数值的位置的引用。</returns>
      <param name="context">包含参数值的位置的活动上下文。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.InOutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.InOutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Activity`1" />.</summary>
      <returns>新参数。</returns>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.op_Implicit(System.Activities.Variable{`0})~System.Activities.InOutArgument{`0}">
      <summary>初始化和返回使用指定的 <see cref="T:System.Activities.Variable`1" /> 构造的新 <see cref="T:System.Activities.InOutArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.InOutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>使用指定值设置参数的值。</summary>
      <param name="context">当前活动上下文。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.Activities.InvalidWorkflowException">
      <summary>处理工作流无效时发生的异常。</summary>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor">
      <summary>使用默认值创建 <see cref="T:System.Activities.InvalidWorkflowException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文创建 <see cref="T:System.Activities.InvalidWorkflowException" /> 类的新实例。</summary>
      <param name="info">包含有关要引发的异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">序列化流的源和目标。</param>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.String)">
      <summary>使用指定的无效工作流异常说明创建 <see cref="T:System.Activities.InvalidWorkflowException" /> 类的新实例。</summary>
      <param name="message">异常的字符串说明。</param>
    </member>
    <member name="M:System.Activities.InvalidWorkflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定的无效工作流异常说明和内部异常创建 <see cref="T:System.Activities.InvalidWorkflowException" /> 类的新实例。</summary>
      <param name="message">异常说明。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.Activities.InvokeCompletedEventArgs">
      <summary>为 <see cref="E:System.Activities.WorkflowInvoker.InvokeCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="P:System.Activities.InvokeCompletedEventArgs.Outputs">
      <summary>从完成的工作流中获取根活动的输出参数值的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>来自已完成工作流的根活动的输出参数值字典。</returns>
    </member>
    <member name="T:System.Activities.IPropertyRegistrationCallback">
      <summary>允许工作流执行属性提供自定义注册和注销逻辑。</summary>
    </member>
    <member name="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)">
      <summary>当通过 <see cref="Overload:System.Activities.ExecutionProperties.Add" /> 添加工作流执行属性时调用。 这会为属性提供一个验证挂钩。</summary>
      <param name="context">
        <see cref="T:System.Activities.RegistrationContext" />，引用要向其中注册属性的执行属性的集合。</param>
    </member>
    <member name="M:System.Activities.IPropertyRegistrationCallback.Unregister(System.Activities.RegistrationContext)">
      <summary>当工作流执行属性超出作用域时调用。</summary>
      <param name="context">
        <see cref="T:System.Activities.RegistrationContext" />，引用属性所属的执行属性的集合。</param>
    </member>
    <member name="T:System.Activities.Location">
      <summary>提供对 <see cref="T:System.Activities.Argument" /> 或 <see cref="T:System.Activities.Variable" /> 所用值的引用。</summary>
    </member>
    <member name="M:System.Activities.Location.#ctor">
      <summary>由派生类的构造函数调用以初始化对象。</summary>
    </member>
    <member name="P:System.Activities.Location.LocationType">
      <summary>当在派生类中重写时，获取引用对象的类型。</summary>
      <returns>引用对象的类型。</returns>
    </member>
    <member name="P:System.Activities.Location.Value">
      <summary>获取或设置引用对象的值。</summary>
      <returns>对象的值。</returns>
    </member>
    <member name="P:System.Activities.Location.ValueCore">
      <summary>当在派生类中重写时，获取或设置该位置引用的对象的值。</summary>
      <returns>对象的值。</returns>
    </member>
    <member name="T:System.Activities.Location`1">
      <summary>提供对 <see cref="T:System.Activities.Argument" /> 或 <see cref="T:System.Activities.Variable" /> 所用值的类型化引用。</summary>
      <typeparam name="T">值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Location`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Location`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Location`1.LocationType">
      <summary>获取由位置引用的值的类型。</summary>
      <returns>值的类型。</returns>
    </member>
    <member name="M:System.Activities.Location`1.ToString">
      <summary>返回引用对象的值的字符串表示形式。</summary>
      <returns>引用对象的值。</returns>
    </member>
    <member name="P:System.Activities.Location`1.Value">
      <summary>获取或设置引用对象的值。</summary>
      <returns>引用对象的值。</returns>
    </member>
    <member name="P:System.Activities.Location`1.ValueCore">
      <summary>获取或设置引用对象的值。</summary>
      <returns>引用对象的值。</returns>
    </member>
    <member name="T:System.Activities.LocationReference">
      <summary>提供一种用于在运行时对 <see cref="T:System.Activities.Location" /> 进行解析的机制。</summary>
    </member>
    <member name="M:System.Activities.LocationReference.#ctor">
      <summary>创建 <see cref="T:System.Activities.LocationReference" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.LocationReference.GetLocation(System.Activities.ActivityContext)">
      <summary>当在派生类中实现时，从 <see cref="T:System.Activities.ActivityContext" /> 对象中提取 <see cref="T:System.Activities.LocationReference" /> 的位置。</summary>
      <returns>变量、参数或委托参数值的位置。</returns>
      <param name="context">有关活动执行环境的信息，包括与该环境相关的变量、参数和委托参数的值。</param>
    </member>
    <member name="P:System.Activities.LocationReference.Name">
      <summary>获取或设置 <see cref="T:System.Activities.LocationReference" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Activities.LocationReference" /> 的名称。</returns>
    </member>
    <member name="P:System.Activities.LocationReference.NameCore">
      <summary>通过派生类实现时，获取或设置 <see cref="T:System.Activities.LocationReference" /> 的名称已经过区域性本地化的版本。</summary>
      <returns>
        <see cref="T:System.Activities.LocationReference" /> 名称的本地化版本。</returns>
    </member>
    <member name="P:System.Activities.LocationReference.Type">
      <summary>获取或设置 <see cref="T:System.Activities.LocationReference" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Activities.LocationReference" /> 的类型。</returns>
    </member>
    <member name="P:System.Activities.LocationReference.TypeCore">
      <summary>在派生类中实现时，获取或设置 <see cref="T:System.Activities.LocationReference" /> 的类型已经过区域性本地化的版本。</summary>
      <returns>
        <see cref="T:System.Activities.LocationReference" /> 类型的本地化版本。</returns>
    </member>
    <member name="T:System.Activities.LocationReferenceEnvironment">
      <summary>提供在运行时活动可用的变量和参数环境的表示形式。</summary>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.#ctor">
      <summary>由派生类的构造函数调用以初始化对象。</summary>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.GetLocationReferences">
      <summary>在派生类中重写时，返回当前范围内的 <see cref="T:System.Activities.LocationReference" /> 对象的集合。</summary>
      <returns>当前范围内的位置引用对象的集合。</returns>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.IsVisible(System.Activities.LocationReference)">
      <summary>在派生类中重写时，确定指定的 <see cref="T:System.Activities.LocationReference" /> 在当前范围内是否可见。</summary>
      <returns>如果 <see cref="T:System.Activities.LocationReference" /> 在当前范围内可见，则为 true；否则为 false。</returns>
      <param name="locationReference">要计算的位置。</param>
    </member>
    <member name="P:System.Activities.LocationReferenceEnvironment.Parent">
      <summary>获取或设置作为容器的 <see cref="T:System.Activities.LocationReferenceEnvironment" />。</summary>
      <returns>作为容器的 <see cref="T:System.Activities.LocationReferenceEnvironment" />。</returns>
    </member>
    <member name="P:System.Activities.LocationReferenceEnvironment.Root">
      <summary>获取用于确定此环境的范围规则的活动。</summary>
      <returns>用于确定此环境的范围规则的活动。</returns>
    </member>
    <member name="M:System.Activities.LocationReferenceEnvironment.TryGetLocationReference(System.String,System.Activities.LocationReference@)">
      <summary>在派生类中重写时，尝试获取指定的 <see cref="T:System.Activities.LocationReference" />。</summary>
      <returns>如果存在指定名称的 <see cref="T:System.Activities.LocationReference" />，则为 true；否则为 false 。</returns>
      <param name="name">要检索的 <see cref="T:System.Activities.LocationReference" /> 的名称。</param>
      <param name="result">当此方法返回 true 时，<paramref name="result" /> 包含指定名称的 <see cref="T:System.Activities.LocationReference" />；否则为 null。 该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Activities.NativeActivity">
      <summary>适用于特定自定义活动（这些活动使用 <see cref="M:System.Activities.NativeActivity.Execute(System.Activities.ActivityExecutionContext)" /> 方法实现执行逻辑，该方法具有对运行时功能的完全访问权限）的抽象基类。</summary>
    </member>
    <member name="M:System.Activities.NativeActivity.#ctor">
      <summary>在派生类中实现时，创建派生类的新实例。</summary>
    </member>
    <member name="M:System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)">
      <summary>在派生类中实现时，采取措施响应要放弃的活动。</summary>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>未实现。 请改用 <see cref="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)" /> 方法。</summary>
      <param name="metadata">未实现。</param>
    </member>
    <member name="M:System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>创建并验证活动的参数、变量、子活动和活动委托的说明。</summary>
      <param name="metadata">活动的元数据，用于封装活动的参数、变量、子活动和活动委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)">
      <summary>在派生类中实现时，运行逻辑以正常方式提前实现活动。</summary>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="P:System.Activities.NativeActivity.CanInduceIdle">
      <summary>获取或设置一个值，该值指示活动是否会使工作流进入空闲状态。</summary>
      <returns>当活动使工作流进入空闲状态时，则为 true。 默认情况下，此值为 false。</returns>
    </member>
    <member name="M:System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)">
      <summary>在派生类中实现时，运行活动的执行逻辑。</summary>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="P:System.Activities.NativeActivity.Implementation">
      <summary>活动的执行逻辑。</summary>
      <returns>执行逻辑。</returns>
    </member>
    <member name="P:System.Activities.NativeActivity.ImplementationVersion">
      <summary>获取或设置活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
    </member>
    <member name="M:System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)">
      <summary>为动态更新创建映射时，将引发事件。</summary>
      <param name="metadata">元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>为动态更新创建映射时，将引发事件。</summary>
      <param name="metadata">元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)">
      <summary>更新 <see cref="T:System.Activities.NativeActivity" /> 的该实例。</summary>
      <param name="updateContext">更新上下文。</param>
    </member>
    <member name="T:System.Activities.NativeActivity`1">
      <summary>适用于特定自定义活动（这些活动使用 <see cref="M:System.Activities.NativeActivity`1.Execute(System.Activities.ActivityExecutionContext)" /> 方法实现执行逻辑，该方法具有对运行时功能的完全访问权限）的抽象基类。</summary>
      <typeparam name="TResult">活动返回的结果。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivity`1.#ctor">
      <summary>在派生类中实现时，创建派生类的新实例。</summary>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Abort(System.Activities.NativeActivityAbortContext)">
      <summary>在派生类中实现时，采取措施响应要放弃的活动。</summary>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)">
      <summary>未实现。 请改用 <see cref="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.NativeActivityMetadata)" />。</summary>
      <param name="metadata">未实现。</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>创建并验证活动的参数、变量、子活动和活动委托的说明。</summary>
      <param name="metadata">活动的元数据，用于封装活动的参数、变量、子活动和活动委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Cancel(System.Activities.NativeActivityContext)">
      <summary>在派生类中实现时，运行逻辑以正常方式提前实现活动。</summary>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="P:System.Activities.NativeActivity`1.CanInduceIdle">
      <summary>获取或设置一个值，该值指示活动是否会使工作流进入空闲状态。</summary>
      <returns>当活动使工作流进入空闲状态时，则为 true，否则为false。 默认情况下，此值为 false。</returns>
    </member>
    <member name="M:System.Activities.NativeActivity`1.Execute(System.Activities.NativeActivityContext)">
      <summary>在派生类中实现时，运行活动的执行逻辑。</summary>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="P:System.Activities.NativeActivity`1.Implementation">
      <summary>活动的执行逻辑。</summary>
      <returns>执行逻辑。</returns>
    </member>
    <member name="P:System.Activities.NativeActivity`1.ImplementationVersion">
      <summary>获取或设置活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
    </member>
    <member name="M:System.Activities.NativeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)">
      <summary>为动态更新创建映射时，将引发事件。</summary>
      <param name="metadata">元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)">
      <summary>为动态更新创建映射时，将引发事件。</summary>
      <param name="metadata">元数据。</param>
      <param name="originalActivity">原始活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivity`1.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)">
      <summary>更新 <see cref="T:System.Activities.NativeActivity`1" /> 的该实例。</summary>
      <param name="updateContext">更新上下文。</param>
    </member>
    <member name="T:System.Activities.NativeActivityAbortContext">
      <summary>表示正在中止的活动的执行环境。</summary>
    </member>
    <member name="P:System.Activities.NativeActivityAbortContext.Reason">
      <summary>获取包含活动中止原因的 <see cref="T:System.Exception" />。</summary>
      <returns>包含活动中止原因的异常。</returns>
    </member>
    <member name="T:System.Activities.NativeActivityContext">
      <summary>
        <see cref="T:System.Activities.NativeActivity" /> 的执行上下文。</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Abort">
      <summary>在运行时中止当前工作流实例。</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Abort(System.Exception)">
      <summary>由于特定原因在运行时中止当前工作流实例。</summary>
      <param name="reason">导致工作流中止的错误。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.AbortChildInstance(System.Activities.ActivityInstance)">
      <summary>中止 <see cref="T:System.Activities.NativeActivity" /> 子活动的指定实例。</summary>
      <param name="activity">当前正在执行的 <see cref="T:System.Activities.NativeActivity" /> 的子级。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.AbortChildInstance(System.Activities.ActivityInstance,System.Exception)">
      <summary>由于特定原因中止 <see cref="T:System.Activities.NativeActivity" /> 子活动的指定实例。</summary>
      <param name="activity">当前正在执行的 <see cref="T:System.Activities.NativeActivity" /> 的子级。</param>
      <param name="reason">导致子活动中止的错误。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CancelChild(System.Activities.ActivityInstance)">
      <summary>取消指定的子活动实例。</summary>
      <param name="activityInstance">当前正在执行的 <see cref="T:System.Activities.NativeActivity" /> 的子级。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CancelChildren">
      <summary>导致提前完成正在执行的 <see cref="T:System.Activities.NativeActivity" /> 的所有子活动。</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark">
      <summary>创建一个点，以便 <see cref="T:System.Activities.NativeActivity" /> 能够在该点被动等待恢复。</summary>
      <returns>一个书签。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.Activities.BookmarkCallback)">
      <summary>创建一个点，以便 <see cref="T:System.Activities.NativeActivity" /> 能够在该点被动等待恢复，并计划在通知恢复操作完成时要执行的指定方法。</summary>
      <returns>回调方法。</returns>
      <param name="callback">当通知指示要 <see cref="T:System.Activities.NativeActivity" /> 恢复时，要调用的方法。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>创建一个点，以便 <see cref="T:System.Activities.NativeActivity" /> 能够在该点被动等待恢复，提供在通知恢复操作完成时要执行的指定方法，以及在当前 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中控制书签使用方式的指定选项。</summary>
      <returns>包括回调方法和书签执行选项的书签。</returns>
      <param name="callback">当通知指示要 <see cref="T:System.Activities.NativeActivity" /> 恢复时，要调用的方法。</param>
      <param name="options">在当前 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中控制书签运行方式（相对于其他线程）的枚举设置。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String)">
      <summary>创建具有指定名称的点，以便 <see cref="T:System.Activities.NativeActivity" /> 能够在该点被动等待恢复。</summary>
      <returns>包括书签名称的书签。</returns>
      <param name="name">书签的名称。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback)">
      <summary>创建一个点，以便 <see cref="T:System.Activities.NativeActivity" /> 能够在该点被动等待恢复，该点具有指定名称，还提供在通知恢复操作完成时要执行的指定方法。</summary>
      <returns>包括书签名称和回调方法的书签。</returns>
      <param name="name">书签的名称。</param>
      <param name="callback">当通知指示要 <see cref="T:System.Activities.NativeActivity" /> 恢复时，要调用的方法。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>创建一个点，以便 <see cref="T:System.Activities.NativeActivity" /> 能够在该点被动等待恢复，该点具有指定名称，提供在通知恢复操作完成时要执行的指定方法，以及在当前 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中控制书签使用方式的指定选项。</summary>
      <returns>该书签包括书签名称、回调方法和书签执行选项。</returns>
      <param name="name">书签的名称。</param>
      <param name="callback">当通知指示要 <see cref="T:System.Activities.NativeActivity" /> 恢复时，要调用的方法。</param>
      <param name="options">在当前 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中控制书签使用方式的书签选项。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope)">
      <summary>创建一个点，以便 <see cref="T:System.Activities.NativeActivity" /> 能够在该点被动等待恢复，该点具有指定名称，提供在通知恢复操作完成时要执行的指定方法，以及书签的指定范围。</summary>
      <returns>该书签包括书签名称、回调方法和书签范围。</returns>
      <param name="name">书签的名称。</param>
      <param name="callback">当通知指示要 <see cref="T:System.Activities.NativeActivity" /> 恢复时，要调用的方法。</param>
      <param name="scope">工作流运行时期间在同一协议下运行的一组书签所应用的标识符。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope,System.Activities.BookmarkOptions)">
      <summary>创建一个点，以便 <see cref="T:System.Activities.NativeActivity" /> 能够在该点被动等待恢复，该点具有指定名称，提供在通知恢复操作完成时要执行的指定方法，还提供书签的指定范围，以及在当前 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中控制书签使用方式的指定选项。</summary>
      <returns>该书签包括书签名称、回调方法、书签范围和书签执行选项。</returns>
      <param name="name">书签的名称。</param>
      <param name="callback">当通知指示要 <see cref="T:System.Activities.NativeActivity" /> 恢复时，要调用的方法。</param>
      <param name="scope">工作流运行时期间在同一协议下运行的一组书签所应用的标识符。</param>
      <param name="options">在当前 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中控制书签使用方式的书签选项。</param>
    </member>
    <member name="P:System.Activities.NativeActivityContext.DefaultBookmarkScope">
      <summary>获取与工作流的根关联的书签范围。</summary>
      <returns>唯一 GUID 标识符。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetChildren">
      <summary>返回当前 <see cref="T:System.Activities.NativeActivity" /> 的子活动集合。</summary>
      <returns>子 <see cref="T:System.Activities.NativeActivity" /> 对象的泛型只读集合。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetValue(System.Activities.Variable)">
      <summary>返回当前 <see cref="T:System.Activities.NativeActivity" /> 实例中的指定变量的值。</summary>
      <returns>指定变量的值。</returns>
      <param name="variable">在当前 <see cref="T:System.Activities.NativeActivity" /> 实例的执行过程中要检索其值的变量。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.GetValue``1(System.Activities.Variable{``0})">
      <summary>返回当前 <see cref="T:System.Activities.NativeActivity" /> 实例中指定泛型变量的值。</summary>
      <returns>指定变量的值。</returns>
      <param name="variable">在当前 <see cref="T:System.Activities.NativeActivity" /> 实例的执行过程中要检索其值的泛型变量。</param>
      <typeparam name="T">要检索其值的变量的类型。</typeparam>
    </member>
    <member name="P:System.Activities.NativeActivityContext.IsCancellationRequested">
      <summary>获取或设置用于指示是否要取消当前正在执行的 <see cref="T:System.Activities.NativeActivity" /> 实例的值。</summary>
      <returns>如果要取消当前正在执行的 <see cref="T:System.Activities.NativeActivity" /> 实例，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.MarkCanceled">
      <summary>将当前正在执行的 <see cref="T:System.Activities.NativeActivity" /> 实例指定为已取消。</summary>
    </member>
    <member name="P:System.Activities.NativeActivityContext.Properties">
      <summary>获取处理当前 <see cref="T:System.Activities.NativeActivityContext" /> 的执行属性的对象。</summary>
      <returns>处理执行属性的对象。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveAllBookmarks">
      <summary>移除与当前正在执行的 <see cref="T:System.Activities.NativeActivity" /> 实例关联的所有书签。</summary>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.Activities.Bookmark)">
      <summary>从当前正在执行的 <see cref="T:System.Activities.NativeActivity" /> 实例中移除指定书签。</summary>
      <returns>如果移除了书签，则为 true；否则为 false。</returns>
      <param name="bookmark">
        <see cref="T:System.Activities.NativeActivity" /> 实例可以被动等待恢复的点。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.String)">
      <summary>移除具有指定名称的书签。</summary>
      <returns>如果移除了书签，则为 true；否则为 false。</returns>
      <param name="name">书签的名称。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.RemoveBookmark(System.String,System.Activities.BookmarkScope)">
      <summary>移除具有指定名称和指定书签范围的书签。</summary>
      <returns>如果移除了书签，则为 true；否则为 false。</returns>
      <param name="name">书签的名称。</param>
      <param name="scope">在同一协议下运行的一组 <see cref="T:System.Activities.Bookmark" /> 对象的唯一 GUID 标识符。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ResumeBookmark(System.Activities.Bookmark,System.Object)">
      <summary>继续指定书签。</summary>
      <returns>在书签点尝试恢复 <see cref="T:System.Activities.NativeActivity" /> 操作的后果。</returns>
      <param name="bookmark">
        <see cref="T:System.Activities.NativeActivity" /> 可以被动等待恢复的点。</param>
      <param name="value">与书签恢复相关的信息。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction(System.Activities.ActivityAction,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction" /> 的执行，该操作没有参数，并在 <see cref="T:System.Activities.ActivityAction" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>活动操作的新实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction" /> 终止的情况下将恢复父活动执行的位置。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``1(System.Activities.ActivityAction{``0},``0,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`1" /> 的执行，该操作的 in 实参具有一个形参，并且在 <see cref="T:System.Activities.ActivityAction`1" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument">发送到活动的数据。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction`1" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`1" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T">将数据传送到活动中的参数。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``10(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`10" /> 的执行，该操作的 in 实参具有十个形参，并且在 <see cref="T:System.Activities.ActivityAction`10" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`10" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`10" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``11(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`11" /> 的执行，该操作的 in 实参具有十一个形参，并在 <see cref="T:System.Activities.ActivityAction`11" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction`11" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`11" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``12(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`12" /> 的执行，该操作的 in 实参具有十二个形参，并在 <see cref="T:System.Activities.ActivityAction`12" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction`12" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`12" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``13(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`13" /> 的执行，该操作的 in 实参具有十三个形参，并在 <see cref="T:System.Activities.ActivityAction`13" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction`13" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`13" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``14(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`14" /> 的执行，该操作的 in 实参具有十四个形参，并在 <see cref="T:System.Activities.ActivityAction`14" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction`14" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`14" />.</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``15(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`15" /> 的执行，该操作的 in 实参具有十五个形参，并在 <see cref="T:System.Activities.ActivityAction`15" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="argument15">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction`15" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityAction`15" />.</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="T15">表示传送到活动中的数据的泛型参数。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``16(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`16" /> 的执行，该操作的 in 实参具有十六个形参，并在 <see cref="T:System.Activities.ActivityAction`16" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="argument15">将数据传送到活动中的参数。</param>
      <param name="argument16">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`16" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`16" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="T15">传送到活动中的数据。</typeparam>
      <typeparam name="T16">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``2(System.Activities.ActivityAction{``0,``1},``0,``1,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`2" /> 的执行，该操作的 in 实参具有两个形参，并且在 <see cref="T:System.Activities.ActivityAction`2" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`2" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`2" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``3(System.Activities.ActivityAction{``0,``1,``2},``0,``1,``2,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`3" /> 的执行，该操作的 in 实参具有十三个形参，并在 <see cref="T:System.Activities.ActivityAction`3" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`3" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`3" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``4(System.Activities.ActivityAction{``0,``1,``2,``3},``0,``1,``2,``3,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`4" /> 的执行，该操作的 in 实参具有四个形参，并且在 <see cref="T:System.Activities.ActivityAction`4" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`4" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`4" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``5(System.Activities.ActivityAction{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`5" /> 的执行，该操作的 in 实参具有五个形参，并且在 <see cref="T:System.Activities.ActivityAction`5" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`5" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`5" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``6(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`6" /> 的执行，该操作的 in 实参具有六个形参，并且在 <see cref="T:System.Activities.ActivityAction`6" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`6" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`6" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``7(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`7" /> 的执行，该操作的 in 实参具有七个形参，并在 <see cref="T:System.Activities.ActivityAction`7" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`7" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`7" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``8(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`8" /> 的执行，该操作的 in 实参具有八个形参，并在 <see cref="T:System.Activities.ActivityAction`8" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`8" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`8" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleAction``9(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityAction`9" /> 的执行，该操作的 in 实参具有九个形参，并且在 <see cref="T:System.Activities.ActivityAction`9" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`9" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction`9" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity)">
      <summary>计划指定的 <see cref="T:System.Activities.NativeActivity" /> 子活动的执行。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activity">该子活动是由在父 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中发生的事件触发。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.NativeActivity" /> 子活动的执行，使用指定的完成回调位置，活动完成后在该位置恢复父进程。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activity">该子活动是由在父 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中发生的事件触发。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction" /> 完成后恢复父活动执行的位置。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.NativeActivity" /> 子活动的执行，并在子活动完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activity">该子活动是由在父 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中发生的事件触发。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction" /> 完成后恢复 <see cref="T:System.Activities.NativeActivity" /> 执行的位置。</param>
      <param name="onFaulted">该书签用于指示在错误导致 <see cref="T:System.Activities.ActivityAction" /> 终止的情况下将恢复 <see cref="T:System.Activities.NativeActivity" /> 执行的位置。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity(System.Activities.Activity,System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.NativeActivity" /> 子活动的执行，使用指定的错误回调位置，当活动进入错误状态时，在该位置恢复父进程。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activity">该子活动是由在父 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中发生的事件触发。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction" /> 终止的情况下将恢复父活动执行的位置。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleActivity``1(System.Activities.Activity{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.NativeActivity" /> 子活动的执行，该函数的 in 实参具有一个形参，并在 <see cref="T:System.Activities.ActivityAction`1" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activity">该子活动是由在父 <see cref="T:System.Activities.NativeActivity" /> 的执行过程中发生的事件触发。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityAction`1" /> 完成后恢复 <see cref="T:System.Activities.NativeActivity" /> 执行的位置。</param>
      <param name="onFaulted">该书签用于指示在错误导致 <see cref="T:System.Activities.ActivityAction" /> 终止的情况下将恢复 <see cref="T:System.Activities.NativeActivity" /> 执行的位置。</param>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleDelegate(System.Activities.ActivityDelegate,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.DelegateCompletionCallback,System.Activities.FaultCallback)">
      <summary>将活动的回调方法推送到工作项池中。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityDelegate">当指定的活动操作完成时，活动返回到的回调方法。</param>
      <param name="inputParameters">活动参数名称和值的字典列表。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityAction" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityAction" /> 终止的情况下将恢复父活动执行的位置。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``1(System.Activities.ActivityFunc{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`1" /> 的执行，该函数具有一个用于保存返回值的参数，并在 <see cref="T:System.Activities.ActivityFunc`1" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`1" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`1" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``10(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback{``9},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`10" /> 的执行，该函数的 in 实参具有十个形参，并在 <see cref="T:System.Activities.ActivityFunc`10" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="onCompleted">该书签用于指示 <see cref="T:System.Activities.ActivityFunc`10" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`10" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``11(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback{``10},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`11" /> 的执行，该函数的 in 实参具有十一个形参，用于保存返回值，并在 <see cref="T:System.Activities.ActivityFunc`11" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`11" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`11" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``12(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback{``11},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`12" /> 的执行，该函数的 in 实参具有十二个形参，并在 <see cref="T:System.Activities.ActivityFunc`12" /> 完成后恢复父进程的指定回调位置用书签标记。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`12" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`12" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``13(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback{``12},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`13" /> 的执行，该函数的 in 实参具有十三个形参，并在 <see cref="T:System.Activities.ActivityFunc`13" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`13" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`13" /> 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``14(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback{``13},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`14" /> 的执行，该函数的 in 实参具有十四个形参，并在 <see cref="T:System.Activities.ActivityFunc`14" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`14" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">该书签用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`14" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``15(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback{``14},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`15" /> 的执行，该函数的 in 实参具有十四个形参，并在 <see cref="T:System.Activities.ActivityFunc`15" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`15" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`15" />.</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``16(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback{``15},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`16" /> 的执行，该函数的 in 实参具有十六个形参，并在 <see cref="T:System.Activities.ActivityFunc`16" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="argument15">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`16" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">A bookmark that indicates where the parent activity execution resumes if an error causes the termination of the <see cref="T:System.Activities.ActivityFunc`16" />.</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="T15">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``17(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback{``16},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`17" /> 的执行，该函数的 in 实参具有十七个形参，用于保存返回值，并在 <see cref="T:System.Activities.ActivityFunc`17" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="argument15">将数据传送到活动中的参数。</param>
      <param name="argument16">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`17" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`17" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="T15">传送到活动中的数据。</typeparam>
      <typeparam name="T16">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``2(System.Activities.ActivityFunc{``0,``1},``0,System.Activities.CompletionCallback{``1},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`2" /> 的执行，该函数的 in 的实参具有两个形参，用于保存返回值，并在 <see cref="T:System.Activities.ActivityFunc`2" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`2" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`2" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``3(System.Activities.ActivityFunc{``0,``1,``2},``0,``1,System.Activities.CompletionCallback{``2},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`3" /> 的执行，该函数的 in 实参具有三个形参，并在 <see cref="T:System.Activities.ActivityFunc`3" /> 完成后恢复父进程的指定回调位置用书签标记。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`3" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`3" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``4(System.Activities.ActivityFunc{``0,``1,``2,``3},``0,``1,``2,System.Activities.CompletionCallback{``3},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`4" /> 的执行，该函数的 in 实参具有四个形参，用于保存返回值，并在 <see cref="T:System.Activities.ActivityFunc`4" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`4" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`4" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``5(System.Activities.ActivityFunc{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Activities.CompletionCallback{``4},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`5" /> 的执行，该函数的 in 实参具有五个形参，并在 <see cref="T:System.Activities.ActivityFunc`5" /> 完成后恢复父进程的指定回调位置用书签标记。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`5" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`5" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``6(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Activities.CompletionCallback{``5},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`6" /> 的执行，该函数的 in 实参具有六个形参，用于保存返回值，并在 <see cref="T:System.Activities.ActivityFunc`6" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`6" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`6" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``7(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback{``6},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`7" /> 的执行，该函数的 in 实参具有七个形参，用于保存返回值，并在 <see cref="T:System.Activities.ActivityFunc`7" /> 完成后恢复父进程的指定回调位置标记书签。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`7" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`7" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``8(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback{``7},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`8" /> 的执行，该函数的 in 实参具有八个形参，并在 <see cref="T:System.Activities.ActivityFunc`8" /> 完成后恢复父进程的指定回调位置用书签标记。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`8" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`8" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.ScheduleFunc``9(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback{``8},System.Activities.FaultCallback)">
      <summary>计划指定的 <see cref="T:System.Activities.ActivityFunc`9" /> 的执行，该函数的 in 实参具有九个形参，并在 <see cref="T:System.Activities.ActivityFunc`9" /> 完成后恢复父进程的指定回调位置用书签标记。</summary>
      <returns>一个活动的实例。</returns>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 <see cref="T:System.Activities.ActivityFunc`9" /> 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 <see cref="T:System.Activities.ActivityFunc`9" /> 终止的情况下恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">
        <see cref="T:System.Activities.NativeActivity" /> 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.SetValue(System.Activities.Variable,System.Object)">
      <summary>将指定值对象分配给指定变量对象。</summary>
      <param name="variable">可以分配给值对象的没有指定类型的变量对象。</param>
      <param name="value">可以分配给变量对象的没有指定类型的对象。</param>
    </member>
    <member name="M:System.Activities.NativeActivityContext.SetValue``1(System.Activities.Variable{``0},``0)">
      <summary>将指定泛型值对象分配给指定泛型变量对象。</summary>
      <param name="variable">可以分配给值对象的具有指定类型的变量对象。</param>
      <param name="value">可以分配给变量对象的具有指定类型的对象。</param>
      <typeparam name="T">
        <paramref name="variable" /> 值和 <paramref name="value" /> 值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityContext.Track(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>将活动跟踪记录添加到当前工作流实例。</summary>
      <param name="record">当被跟踪事件发生时发送给跟踪参与者的数据。</param>
    </member>
    <member name="T:System.Activities.NativeActivityFaultContext">
      <summary>表示当处理由子活动引发的异常时，<see cref="T:System.Activities.NativeActivity" /> 的执行环境。</summary>
    </member>
    <member name="M:System.Activities.NativeActivityFaultContext.HandleFault">
      <summary>记录正在处理异常。</summary>
    </member>
    <member name="T:System.Activities.NativeActivityMetadata">
      <summary>代表参数、子活动、变量和委托的集合，通过一个已配置的 <see cref="T:System.Activities.NativeActivity" /> 引入执行环境。</summary>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddArgument(System.Activities.RuntimeArgument)">
      <summary>将一个参数添加到某个活动的参数集合中。</summary>
      <param name="argument">要添加到集合中的参数。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddChild(System.Activities.Activity)">
      <summary>将指定的活动添加到子活动的元数据列表中。</summary>
      <param name="child">要添加的活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddChild(System.Activities.Activity,System.Object)">
      <summary>将指定的活动添加到子活动的元数据列表中。</summary>
      <param name="child">要添加的活动。</param>
      <param name="origin">活动的源。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddDefaultExtensionProvider``1(System.Func{``0})">
      <summary>将指定的扩展提供程序添加到活动的默认扩展提供程序的集合中。</summary>
      <param name="extensionProvider">返回扩展的函数。</param>
      <typeparam name="T">扩展提供程序的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddDelegate(System.Activities.ActivityDelegate)">
      <summary>将指定的委托添加到委托的元数据列表中。</summary>
      <param name="activityDelegate">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddDelegate(System.Activities.ActivityDelegate,System.Object)">
      <summary>将指定的委托添加到委托的元数据列表中。</summary>
      <param name="activityDelegate">要添加的委托。</param>
      <param name="origin">委托的源。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationChild(System.Activities.Activity)">
      <summary>将指定的活动添加到实现活动的元数据列表中。</summary>
      <param name="implementationChild">要添加的活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationDelegate(System.Activities.ActivityDelegate)">
      <summary>将指定的委托添加到实现委托的元数据列表中。</summary>
      <param name="implementationDelegate">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImplementationVariable(System.Activities.Variable)">
      <summary>将指定的变量添加到实现变量的元数据集合中。</summary>
      <param name="implementationVariable">要添加的变量。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedChild(System.Activities.Activity)">
      <summary>将指定的活动添加到导入的子活动的元数据列表中。</summary>
      <param name="importedChild">要添加的活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedChild(System.Activities.Activity,System.Object)">
      <summary>将指定的活动添加到导入的子活动的元数据列表中。</summary>
      <param name="importedChild">要添加的活动。</param>
      <param name="origin">活动的源。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate)">
      <summary>将指定的委托添加到导入的委托的元数据列表中。</summary>
      <param name="importedDelegate">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddImportedDelegate(System.Activities.ActivityDelegate,System.Object)">
      <summary>将指定的委托添加到导入的委托的元数据列表中。</summary>
      <param name="importedDelegate">要添加的委托。</param>
      <param name="origin">委托的源。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddValidationError(System.Activities.Validation.ValidationError)">
      <summary>将指定的验证错误添加到验证错误的元数据集合中。</summary>
      <param name="validationError">要添加的验证错误。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddValidationError(System.String)">
      <summary>使用指定的说明将一个验证错误添加到验证错误的元数据集合中。</summary>
      <param name="validationErrorMessage">描述验证错误的消息。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddVariable(System.Activities.Variable)">
      <summary>将指定的变量添加到变量的元数据集合中。</summary>
      <param name="variable">要添加的变量。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.AddVariable(System.Activities.Variable,System.Object)">
      <summary>将指定的变量添加到变量的元数据集合中。</summary>
      <param name="variable">要添加的变量。</param>
      <param name="origin">变量的源。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.Bind(System.Activities.Argument,System.Activities.RuntimeArgument)">
      <summary>将指定的 <see cref="T:System.Activities.Argument" /> 绑定到指定的 <see cref="T:System.Activities.RuntimeArgument" />。</summary>
      <param name="binding">要绑定的 <see cref="T:System.Activities.Argument" />。</param>
      <param name="argument">要绑定的 <see cref="T:System.Activities.RuntimeArgument" />。</param>
    </member>
    <member name="P:System.Activities.NativeActivityMetadata.Environment">
      <summary>获取活动的由 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 引入的参数、变量、委托参数或符号的 <see cref="T:System.Activities.LocationReferenceEnvironment" />。</summary>
      <returns>活动的由 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 引入的参数、变量、委托参数或符号的位置引用环境。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.Equals(System.Object)">
      <summary>确定指定的对象是否等于此元数据实例。</summary>
      <returns>如果指定的对象等于此元数据实例，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetArgumentsWithReflection">
      <summary>返回通过使用反射获取的参数的集合。</summary>
      <returns>参数的集合。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetChildrenWithReflection">
      <summary>使用反射返回子活动的集合。</summary>
      <returns>子活动的集合。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetDelegatesWithReflection">
      <summary>使用反射返回委托的集合。</summary>
      <returns>委托的集合。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetHashCode">
      <summary>返回此元数据实例的唯一标识符。</summary>
      <returns>一个整数，唯一标识此元数据实例。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.GetVariablesWithReflection">
      <summary>使用反射返回变量的集合。</summary>
      <returns>变量的集合。</returns>
    </member>
    <member name="P:System.Activities.NativeActivityMetadata.HasViolations">
      <summary>获取指示元数据中是否存在任何验证错误的值。</summary>
      <returns>如果存在验证错误，则返回的值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.op_Equality(System.Activities.NativeActivityMetadata,System.Activities.NativeActivityMetadata)">
      <summary>返回一个值，该值指示两个指定的元数据实例是否相等。</summary>
      <returns>如果两个项相等，则为 true；否则，为 false。</returns>
      <param name="left">要比较的第一项。</param>
      <param name="right">要比较的第二项。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.op_Inequality(System.Activities.NativeActivityMetadata,System.Activities.NativeActivityMetadata)">
      <summary>返回一个值，该值指示两个指定的元数据实例是否不相等。</summary>
      <returns>如果两个项不相等，则为 true；否则，为 false。</returns>
      <param name="left">要比较的第一项。</param>
      <param name="right">要比较的第二项。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.RequireExtension``1">
      <summary>指定活动在运行时需要一个指定泛型类型的扩展。</summary>
      <typeparam name="T">扩展的类型。</typeparam>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.RequireExtension(System.Type)">
      <summary>指定活动在运行时需要一个指定类型的扩展。</summary>
      <param name="extensionType">扩展的类型。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetArgumentsCollection(System.Collections.ObjectModel.Collection{System.Activities.RuntimeArgument})">
      <summary>将指定的参数集合添加到活动的参数中。</summary>
      <param name="arguments">要添加的参数。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>将指定的集合添加为活动的子活动。</summary>
      <param name="children">要添加的活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>将指定的集合添加为活动的委托。</summary>
      <param name="delegates">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>将指定的集合添加为活动的实现子活动。</summary>
      <param name="implementationChildren">要添加的活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>将指定的集合添加为活动的实现委托。</summary>
      <param name="implementationDelegates">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImplementationVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>将指定的集合添加为活动的实现变量。</summary>
      <param name="implementationVariables">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImportedChildrenCollection(System.Collections.ObjectModel.Collection{System.Activities.Activity})">
      <summary>将指定的集合添加为活动的导入子活动。</summary>
      <param name="importedChildren">要添加的活动。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetImportedDelegatesCollection(System.Collections.ObjectModel.Collection{System.Activities.ActivityDelegate})">
      <summary>将指定的集合添加为活动的导入委托。</summary>
      <param name="importedDelegates">要添加的委托。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetValidationErrorsCollection(System.Collections.ObjectModel.Collection{System.Activities.Validation.ValidationError})">
      <summary>将指定的验证错误集合添加到验证错误的元数据集合中。</summary>
      <param name="validationErrors">要添加的验证错误。</param>
    </member>
    <member name="M:System.Activities.NativeActivityMetadata.SetVariablesCollection(System.Collections.ObjectModel.Collection{System.Activities.Variable})">
      <summary>将指定的变量集合添加到活动的变量中。</summary>
      <param name="variables">要添加的变量。</param>
    </member>
    <member name="T:System.Activities.NativeActivityTransactionContext">
      <summary>需要向运行时提供事务的 <see cref="T:System.Activities.NativeActivity" /> 的执行上下文。</summary>
    </member>
    <member name="M:System.Activities.NativeActivityTransactionContext.SetRuntimeTransaction(System.Transactions.Transaction)">
      <summary>向运行时提供指定的事务。</summary>
      <param name="transaction">事务。</param>
    </member>
    <member name="T:System.Activities.NoPersistHandle">
      <summary>管理非持久性块的生存期。</summary>
    </member>
    <member name="M:System.Activities.NoPersistHandle.#ctor">
      <summary>初始化 <see cref="T:System.Activities.NoPersistHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.NoPersistHandle.Enter(System.Activities.NativeActivityContext)">
      <summary>标记非持久性块的开头。</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.NoPersistHandle.Exit(System.Activities.NativeActivityContext)">
      <summary>标记非持久性块的结尾。</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="T:System.Activities.OutArgument">
      <summary>表示支持数据流出某一活动的绑定终端的抽象基类。</summary>
    </member>
    <member name="M:System.Activities.OutArgument.CreateReference(System.Activities.InOutArgument,System.String)">
      <summary>使用指定的引用参数名称创建一个引用指定目标 <see cref="T:System.Activities.InOutArgument" /> 的新 <see cref="T:System.Activities.OutArgument" />。</summary>
      <returns>一个新的 out，它引用指定的目标 <see cref="T:System.Activities.InOutArgument" />。</returns>
      <param name="argumentToReference">要引用的in/out目标参数。</param>
      <param name="referencedArgumentName">所引用参数的名称。</param>
    </member>
    <member name="M:System.Activities.OutArgument.CreateReference(System.Activities.OutArgument,System.String)">
      <summary>使用指定的引用参数名称创建一个引用指定目标 <see cref="T:System.Activities.OutArgument" /> 的新 <see cref="T:System.Activities.OutArgument" />。</summary>
      <returns>一个新的 out，它引用指定的目标 <see cref="T:System.Activities.OutArgument" />。</returns>
      <param name="argumentToReference">要引用的out目标参数。</param>
      <param name="referencedArgumentName">所引用参数的名称。</param>
    </member>
    <member name="T:System.Activities.OutArgument`1">
      <summary>表示数据流出活动的绑定终端。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.OutArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Activities.OutArgument`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>使用指定 <see cref="T:System.Activities.Activity`1" /> 初始化 <see cref="T:System.Activities.OutArgument`1" /> 类的新实例。</summary>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)">
      <summary>使用指定 <see cref="T:System.Activities.DelegateArgument" /> 初始化 <see cref="T:System.Activities.OutArgument`1" /> 类的新实例。</summary>
      <param name="delegateArgument">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Activities.Variable)">
      <summary>使用指定 <see cref="T:System.Activities.Variable" /> 初始化 <see cref="T:System.Activities.OutArgument`1" /> 类的新实例。</summary>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>使用指定的表达式初始化 <see cref="T:System.Activities.OutArgument`1" /> 类的新实例。</summary>
      <param name="expression">参数的值。</param>
    </member>
    <member name="P:System.Activities.OutArgument`1.Expression">
      <summary>获取一个表示此 <see cref="T:System.Activities.OutArgument`1" /> 的值的 <see cref="T:System.Activities.Activity`1" />。</summary>
      <returns>表示参数值的活动。</returns>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>新参数。</returns>
      <param name="delegateArgument">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})">
      <summary>初始化和返回使用指定的 <see cref="T:System.Activities.Activity`1" /> 构造的新 <see cref="T:System.Activities.OutArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.Variable" />.</summary>
      <returns>新参数。</returns>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.OutArgument`1" /> using the specified activity context.</summary>
      <returns>参数的值。</returns>
      <param name="context">当前活动上下文。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)">
      <summary>Gets the location of the value for the <see cref="T:System.Activities.OutArgument`1" />.</summary>
      <returns>对用于存储参数值的位置的引用。</returns>
      <param name="context">包含变量的值的活动上下文。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.OutArgument{`0}">
      <summary>初始化和返回使用指定的 <see cref="T:System.Activities.Activity`1" /> 构造的新 <see cref="T:System.Activities.OutArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="expression">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.OutArgument{`0}">
      <summary>Initializes and returns a new <see cref="T:System.Activities.OutArgument`1" /> constructed using the specified <see cref="T:System.Activities.DelegateArgument" />.</summary>
      <returns>新参数。</returns>
      <param name="delegateArgument">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.OutArgument{`0}">
      <summary>初始化和返回使用指定的 <see cref="T:System.Activities.Variable" /> 构造的新 <see cref="T:System.Activities.OutArgument`1" />。</summary>
      <returns>新参数。</returns>
      <param name="variable">参数的值。</param>
    </member>
    <member name="M:System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)">
      <summary>使用指定活动上下文设置 <see cref="T:System.Activities.OutArgument`1" /> 的值。</summary>
      <param name="context">当前活动上下文。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.Activities.OverloadGroupAttribute">
      <summary>提供一种方法，指示哪些参数组合在活动中有效。</summary>
    </member>
    <member name="M:System.Activities.OverloadGroupAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Activities.OverloadGroupAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.OverloadGroupAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Activities.OverloadGroupAttribute" /> 类的新实例。</summary>
      <param name="groupName">参数组的名称。</param>
    </member>
    <member name="P:System.Activities.OverloadGroupAttribute.GroupName">
      <summary>获取 <see cref="T:System.Activities.OverloadGroupAttribute" /> 的名称。</summary>
      <returns>相关参数组的名称。</returns>
    </member>
    <member name="P:System.Activities.OverloadGroupAttribute.TypeId">
      <summary>获取此特性的唯一标识符。</summary>
      <returns>此特性的唯一标识符。</returns>
    </member>
    <member name="T:System.Activities.PersistableIdleAction">
      <summary>指定在允许持久性的情况下，当工作流进入空闲状态时发生的操作。</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.None">
      <summary>指定不执行任何操作。</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.Persist">
      <summary>指定 <see cref="T:System.Activities.WorkflowApplication" /> 应保持工作流。</summary>
    </member>
    <member name="F:System.Activities.PersistableIdleAction.Unload">
      <summary>指定 <see cref="T:System.Activities.WorkflowApplication" /> 应保持并卸载工作流。</summary>
    </member>
    <member name="T:System.Activities.RegistrationContext">
      <summary>提供对工作流执行属性的当前集合的访问。</summary>
    </member>
    <member name="M:System.Activities.RegistrationContext.FindProperty(System.String)">
      <summary>返回具有指定名称的工作流执行属性。</summary>
      <returns>工作流执行属性。</returns>
      <param name="name">工作流执行属性的名称。</param>
    </member>
    <member name="T:System.Activities.RequiredArgumentAttribute">
      <summary>可以对其应用参数的应用程序元素。</summary>
    </member>
    <member name="M:System.Activities.RequiredArgumentAttribute.#ctor">
      <summary>创建 <see cref="T:System.Activities.RequiredArgumentAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.RequiredArgumentAttribute.TypeId">
      <summary>当在派生类中实现时，获取该 <see cref="T:System.Attribute" /> 的唯一标识符。</summary>
      <returns>返回 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Activities.RuntimeArgument">
      <summary>向运行时描述活动的参数特征。</summary>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection)">
      <summary>使用名称、数据类型和参数方向初始化 <see cref="T:System.Activities.RuntimeArgument" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Activities.RuntimeArgument" /> 的名称。</param>
      <param name="argumentType">
        <see cref="T:System.Activities.RuntimeArgument" /> 的类型。</param>
      <param name="direction">参数的数据流方向。</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Boolean)">
      <summary>使用名称、数据类型、参数方向以及一个指示是否需要将 <see cref="T:System.Activities.RuntimeArgument" /> 绑定到一个值的值初始化 <see cref="T:System.Activities.RuntimeArgument" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Activities.RuntimeArgument" /> 的名称。</param>
      <param name="argumentType">
        <see cref="T:System.Activities.RuntimeArgument" /> 的数据类型。</param>
      <param name="direction">参数的数据流方向。</param>
      <param name="isRequired">如果指示需要将 <see cref="T:System.Activities.RuntimeArgument" /> 绑定到一个值；则为 true否则为 false。</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Boolean,System.Collections.Generic.List{System.String})">
      <summary>使用名称、数据类型、参数方向、是否需要将 <see cref="T:System.Activities.RuntimeArgument" /> 绑定到一个值以及重载组名称的列表初始化 <see cref="T:System.Activities.RuntimeArgument" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Activities.RuntimeArgument" /> 的名称。</param>
      <param name="argumentType">
        <see cref="T:System.Activities.RuntimeArgument" /> 的数据类型。</param>
      <param name="direction">参数的数据流方向。</param>
      <param name="isRequired">如果指示需要将 <see cref="T:System.Activities.RuntimeArgument" /> 绑定到一个值；则为 true否则为 false。</param>
      <param name="overloadGroupNames">应用于此 <see cref="T:System.Activities.RuntimeArgument" /> 的重载组的名称。</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Collections.Generic.List{System.String})">
      <summary>使用名称、数据类型、参数方向以及重载组名称的列表初始化 <see cref="T:System.Activities.RuntimeArgument" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Activities.RuntimeArgument" /> 的名称。</param>
      <param name="argumentType">
        <see cref="T:System.Activities.RuntimeArgument" /> 的数据类型。</param>
      <param name="direction">参数的数据流方向。</param>
      <param name="overloadGroupNames">应用于此 <see cref="T:System.Activities.RuntimeArgument" /> 的重载组。</param>
    </member>
    <member name="P:System.Activities.RuntimeArgument.Direction">
      <summary>获取此 <see cref="T:System.Activities.RuntimeArgument" /> 的数据流的方向。</summary>
      <returns>参数的数据流方向。</returns>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Get(System.Activities.ActivityContext)">
      <summary>使用指定的活动上下文获取 <see cref="T:System.Activities.RuntimeArgument" /> 的值。</summary>
      <returns>
        <see cref="T:System.Activities.RuntimeArgument" /> 的值。</returns>
      <param name="context">当前活动上下文。</param>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Get``1(System.Activities.ActivityContext)">
      <summary>使用指定活动上下文获取 <see cref="T:System.Activities.RuntimeArgument" /> 的强类型值。</summary>
      <returns>
        <see cref="T:System.Activities.RuntimeArgument" /> 的值。</returns>
      <param name="context">当前活动上下文。</param>
      <typeparam name="T">返回值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.RuntimeArgument.GetLocation(System.Activities.ActivityContext)">
      <summary>返回此 <see cref="T:System.Activities.RuntimeArgument" /> 的 <see cref="T:System.Activities.Location" />。</summary>
      <returns>
        <see cref="T:System.Activities.RuntimeArgument" /> 的位置。</returns>
      <param name="context">参数位置。</param>
    </member>
    <member name="P:System.Activities.RuntimeArgument.IsRequired">
      <summary>获取一个值，该值指示是否需要将 <see cref="T:System.Activities.RuntimeArgument" /> 绑定到一个值。</summary>
      <returns>如果需要将 <see cref="T:System.Activities.RuntimeArgument" /> 绑定到一个值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.RuntimeArgument.OverloadGroupNames">
      <summary>获取此 <see cref="T:System.Activities.RuntimeArgument" /> 所属的重载组的列表。</summary>
      <returns>重载组名称的列表。</returns>
    </member>
    <member name="M:System.Activities.RuntimeArgument.Set(System.Activities.ActivityContext,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Activities.RuntimeArgument" />.</summary>
      <param name="context">当前活动上下文。</param>
      <param name="value">
        <see cref="T:System.Activities.RuntimeArgument" /> 的新值。</param>
    </member>
    <member name="T:System.Activities.RuntimeDelegateArgument">
      <summary>向运行时描述 <see cref="T:System.Activities.DelegateArgument" /> 的特征。</summary>
    </member>
    <member name="M:System.Activities.RuntimeDelegateArgument.#ctor(System.String,System.Type,System.Activities.ArgumentDirection,System.Activities.DelegateArgument)">
      <summary>使用指定的名称、数据类型、参数方向和 <see cref="T:System.Activities.DelegateArgument" /> 初始化 <see cref="T:System.Activities.RuntimeDelegateArgument" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Activities.RuntimeDelegateArgument" /> 的名称。</param>
      <param name="type">
        <see cref="T:System.Activities.RuntimeDelegateArgument" /> 的数据类型。</param>
      <param name="direction">指定某个参数的数据流方向的枚举值之一。</param>
      <param name="boundArgument">由此 <see cref="T:System.Activities.RuntimeDelegateArgument" /> 表示的委托参数。</param>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.BoundArgument">
      <summary>获取由此 <see cref="T:System.Activities.RuntimeDelegateArgument" /> 表示的 <see cref="T:System.Activities.DelegateArgument" />。</summary>
      <returns>由此 <see cref="T:System.Activities.RuntimeDelegateArgument" /> 表示的绑定参数。</returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Direction">
      <summary>获取 <see cref="T:System.Activities.RuntimeDelegateArgument" /> 的数据流的方向。</summary>
      <returns>指定某个参数的数据流方向的枚举值之一。</returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Name">
      <summary>获取 <see cref="T:System.Activities.RuntimeDelegateArgument" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Activities.RuntimeDelegateArgument" /> 的名称。</returns>
    </member>
    <member name="P:System.Activities.RuntimeDelegateArgument.Type">
      <summary>获取 <see cref="T:System.Activities.RuntimeDelegateArgument" /> 的数据类型。</summary>
      <returns>
        <see cref="T:System.Activities.RuntimeDelegateArgument" /> 的数据类型。</returns>
    </member>
    <member name="T:System.Activities.RuntimeTransactionHandle">
      <summary>提供对工作流实例中运行时事务的访问。</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.#ctor">
      <summary>初始化 <see cref="T:System.Activities.RuntimeTransactionHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.#ctor(System.Transactions.Transaction)">
      <summary>使用指定的根事务来初始化 <see cref="T:System.Activities.RuntimeTransactionHandle" /> 类的新实例。</summary>
      <param name="rootTransaction">根事务。</param>
    </member>
    <member name="P:System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure">
      <summary>获取或设置一个值，该值指示当事务失败时是否应放弃工作流实例。</summary>
      <returns>如果事务失败时应放弃该工作流实例，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext)">
      <summary>完成当前的运行时事务。</summary>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback)">
      <summary>完成当前的运行时事务并在事务完成时安排书签回调。</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">完成事务时要调用的书签回调。</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.AsyncCodeActivityContext)">
      <summary>返回对当前运行时事务的引用。</summary>
      <returns>当前事务。</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.CodeActivityContext)">
      <summary>返回对当前运行时事务的引用。</summary>
      <returns>当前事务。</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.NativeActivityContext)">
      <summary>返回对当前运行时事务的引用。</summary>
      <returns>当前的运行时事务。</returns>
      <param name="context">The current execution environment.</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.RequestTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)">
      <summary>开始创建一个 <see cref="T:System.Activities.NativeActivityTransactionContext" /> 供新事务使用。</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">要在创建 <see cref="T:System.Activities.NativeActivityTransactionContext" /> 时调用的方法。</param>
      <param name="state">一个用户指定的可选状态，该状态包含相关请求信息。</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.RequireTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)">
      <summary>开始创建一个 <see cref="T:System.Activities.NativeActivityTransactionContext" /> 供现有事务使用。</summary>
      <param name="context">The current execution environment.</param>
      <param name="callback">要在创建 <see cref="T:System.Activities.NativeActivityTransactionContext" /> 时调用的方法。</param>
      <param name="state">一个用户指定的可选状态，该状态包含相关请求信息。</param>
    </member>
    <member name="P:System.Activities.RuntimeTransactionHandle.SuppressTransaction">
      <summary>获取或设置一个值，该值指示是否取消此运行时事务。</summary>
      <returns>如果取消此运行时事务，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Activities.IExecutionProperty.CleanupWorkflowThread" />。</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Activities.IExecutionProperty.SetupWorkflowThread" />。</summary>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register(System.Activities.RegistrationContext)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)" />。</summary>
      <param name="context">有关此参数的说明，请参见 <see cref="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)" />。</param>
    </member>
    <member name="M:System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister(System.Activities.RegistrationContext)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Activities.IPropertyRegistrationCallback.UnRegister(System.Activities.RegistrationContext)" />。</summary>
      <param name="context">有关此参数的说明，请参见 <see cref="M:System.Activities.IPropertyRegistrationCallback.UnRegister(System.Activities.RegistrationContext)" />。</param>
    </member>
    <member name="T:System.Activities.UnhandledExceptionAction">
      <summary>指定当异常转义工作流的根时发生的操作。</summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Abort">
      <summary>指定 <see cref="T:System.Activities.WorkflowApplication" /> 应中止工作流。</summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Cancel">
      <summary>指定 <see cref="T:System.Activities.WorkflowApplication" /> 应安排取消根活动并恢复执行。</summary>
    </member>
    <member name="F:System.Activities.UnhandledExceptionAction.Terminate">
      <summary>指定 <see cref="T:System.Activities.WorkflowApplication" /> 应安排终止根活动并恢复执行。</summary>
    </member>
    <member name="T:System.Activities.ValidationException">
      <summary>当工作流或活动处于无效状态时引发的异常。</summary>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor">
      <summary>用默认值初始化 <see cref="T:System.Activities.ValidationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Activities.ValidationException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Activities.ValidationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Activities.ValidationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Activities.ValidationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Activities.Variable">
      <summary>可以从中派生工作流数据成员支持类 <see cref="T:System.Activities.Variable`1" /> 的抽象基类。</summary>
    </member>
    <member name="M:System.Activities.Variable.Create(System.String,System.Type,System.Activities.VariableModifiers)">
      <summary>初始化并返回 <see cref="T:System.Activities.Variable" /> 类的新实例。</summary>
      <returns>新变量。</returns>
      <param name="name">
        <see cref="T:System.Activities.Variable" /> 的名称。</param>
      <param name="type">
        <see cref="T:System.Activities.Variable" /> 的类型。</param>
      <param name="modifiers">
        <see cref="T:System.Activities.Variable" /> 的配置选项。</param>
    </member>
    <member name="P:System.Activities.Variable.Default">
      <summary>Gets or sets the <see cref="T:System.Activities.ActivityWithResult" /> that represents the default value for this <see cref="T:System.Activities.Variable" />.</summary>
      <returns>此 <see cref="T:System.Activities.Variable" /> 的默认值。</returns>
    </member>
    <member name="M:System.Activities.Variable.Get(System.Activities.ActivityContext)">
      <summary>Gets the value of the <see cref="T:System.Activities.Variable" /> using the specified <see cref="T:System.Activities.ActivityContext" />.</summary>
      <returns>
        <see cref="T:System.Activities.Variable" /> 的值。</returns>
      <param name="context">当前执行上下文。</param>
    </member>
    <member name="M:System.Activities.Variable.GetLocation(System.Activities.ActivityContext)">
      <summary>获取此 <see cref="T:System.Activities.Variable" /> 的 <see cref="T:System.Activities.Location" />。</summary>
      <returns>此 <see cref="T:System.Activities.Variable" /> 的位置。</returns>
      <param name="context">执行活动的活动上下文。</param>
    </member>
    <member name="P:System.Activities.Variable.Modifiers">
      <summary>获取或设置此 <see cref="T:System.Activities.Variable" /> 的 <see cref="T:System.Activities.VariableModifiers" /> 值。</summary>
      <returns>此 <see cref="T:System.Activities.Variable" /> 的变量修饰符值。</returns>
    </member>
    <member name="P:System.Activities.Variable.Name">
      <summary>获取或设置 <see cref="T:System.Activities.Variable" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Activities.Variable" /> 的名称。</returns>
    </member>
    <member name="P:System.Activities.Variable.NameCore">
      <summary>获取 <see cref="T:System.Activities.Variable" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Activities.Variable" /> 的名称。</returns>
    </member>
    <member name="M:System.Activities.Variable.Set(System.Activities.ActivityContext,System.Object)">
      <summary>使用指定的 <see cref="T:System.Activities.ActivityContext" /> 设置 <see cref="T:System.Activities.Variable" /> 的值。</summary>
      <param name="context">当前执行上下文。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.Activities.Variable`1">
      <summary>表示工作流中的变量。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.Variable`1" /> 的 <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Variable`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>使用默认表达式初始化 <see cref="T:System.Activities.Variable`1" /> 类的新实例。</summary>
      <param name="defaultExpression">默认表达式。</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String)">
      <summary>使用变量名称初始化 <see cref="T:System.Activities.Variable`1" /> 类的新实例。</summary>
      <param name="name">变量名称。</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>使用变量名称和默认表达式初始化 <see cref="T:System.Activities.Variable`1" /> 类的新实例。</summary>
      <param name="name">变量名称。</param>
      <param name="defaultExpression">默认表达式。</param>
    </member>
    <member name="M:System.Activities.Variable`1.#ctor(System.String,`0)">
      <summary>使用变量名称和默认值初始化 <see cref="T:System.Activities.Variable`1" /> 类的新实例。</summary>
      <param name="name">变量名称。</param>
      <param name="defaultValue">默认值。</param>
    </member>
    <member name="P:System.Activities.Variable`1.Default">
      <summary>获取或设置表示此 <see cref="T:System.Activities.Variable`1" /> 的默认值的 <see cref="T:System.Activities.Activity`1" />。</summary>
      <returns>此 <see cref="T:System.Activities.Variable`1" /> 的默认值。</returns>
    </member>
    <member name="M:System.Activities.Variable`1.Get(System.Activities.ActivityContext)">
      <summary>使用指定的 <see cref="T:System.Activities.ActivityContext" /> 获取变量的值。</summary>
      <returns>变量的值。</returns>
      <param name="context">执行活动的活动上下文。</param>
    </member>
    <member name="M:System.Activities.Variable`1.GetLocation(System.Activities.ActivityContext)">
      <summary>返回变量的 <see cref="T:System.Activities.Location`1" />。</summary>
      <returns>变量的位置。</returns>
      <param name="context">包含变量位置的活动上下文。</param>
    </member>
    <member name="M:System.Activities.Variable`1.Set(System.Activities.ActivityContext,`0)">
      <summary>设置变量的值。</summary>
      <param name="context">执行活动的活动上下文。</param>
      <param name="value">变量的值。</param>
    </member>
    <member name="T:System.Activities.VariableModifiers">
      <summary>指定工作流运行时处理 <see cref="T:System.Activities.Variable" /> 对象的方式。</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.Mapped">
      <summary>映射 <see cref="T:System.Activities.Variable" /> 以便获得持久性。</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.None">
      <summary>没有为 <see cref="T:System.Activities.Variable" /> 指定修饰符。</summary>
    </member>
    <member name="F:System.Activities.VariableModifiers.ReadOnly">
      <summary>无法更改 <see cref="T:System.Activities.Variable" /> 的值。</summary>
    </member>
    <member name="T:System.Activities.VersionMismatchException">
      <summary>指定有关版本不匹配异常的信息。</summary>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor">
      <summary>初始化 <see cref="T:System.Activities.VersionMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
      <summary>使用预期的版本和实际的版本初始化 <see cref="T:System.Activities.VersionMismatchException" /> 类的新实例。</summary>
      <param name="expectedVersion">预期的版本。</param>
      <param name="actualVersion">文件的实际版本。</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用信息和上下文初始化 <see cref="T:System.Activities.VersionMismatchException" /> 类的新实例。</summary>
      <param name="info">保留有关引发异常的序列化对象数据的 SerializationInfo。</param>
      <param name="context">包含有关源或目标的上下文信息的 StreamingContext。</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.String)">
      <summary>在不带消息的情况下初始化 <see cref="T:System.Activities.VersionMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
      <summary>使用消息，预期的版本和实际的版本初始化 <see cref="T:System.Activities.VersionMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="expectedVersion">预期的版本。</param>
      <param name="actualVersion">文件的实际版本。</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity,System.Exception)">
      <summary>初始化 <see cref="T:System.Activities.VersionMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="expectedVersion">预期的版本。</param>
      <param name="actualVersion">文件的实际版本。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Activities.VersionMismatchException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Activities.VersionMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="P:System.Activities.VersionMismatchException.ActualVersion">
      <summary>从不匹配的异常中获取或设置实际版本。</summary>
      <returns>不匹配异常中的实际版本。</returns>
    </member>
    <member name="P:System.Activities.VersionMismatchException.ExpectedVersion">
      <summary>获取或设置预期的不匹配异常的版本。</summary>
      <returns>预期存在不匹配的异常的版本。</returns>
    </member>
    <member name="M:System.Activities.VersionMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 SerializationInfo。</summary>
      <param name="info">保留有关引发异常的序列化对象数据的 SerializationInfo。</param>
      <param name="context">包含有关源或目标的上下文信息的 StreamingContext。</param>
    </member>
    <member name="T:System.Activities.WorkflowApplication">
      <summary>为工作流的单个实例提供宿主。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
      <summary>使用指定的工作流定义创建 <see cref="T:System.Activities.WorkflowApplication" /> 类的新实例。</summary>
      <param name="workflowDefinition">工作流定义。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
      <summary>使用指定的工作流定义和定义标识创建 <see cref="T:System.Activities.WorkflowApplication" /> 类的新实例。</summary>
      <param name="workflowDefinition">工作流定义。</param>
      <param name="definitionIdentity">定义标识。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>创建 <see cref="T:System.Activities.WorkflowApplication" /> 类的新实例，该实例使用指定的工作流定义和参数值。</summary>
      <param name="workflowDefinition">工作流定义。</param>
      <param name="inputs">在工作流定义的根活动上定义的参数的值，由参数名称键控。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)">
      <summary>使用指定的工作流定义、参数值以及定义标识创建 <see cref="T:System.Activities.WorkflowApplication" /> 类的新实例。</summary>
      <param name="workflowDefinition">工作流定义。</param>
      <param name="inputs">定义标识。</param>
      <param name="definitionIdentity">在工作流定义的根活动上定义的参数的值，由参数名称键控。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Abort">
      <summary>通知工作流运行时应中止此工作流实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Abort(System.String)">
      <summary>通知工作流运行时由于特定原因应中止此工作流实例。</summary>
      <param name="reason">请求中止的原因。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Aborted">
      <summary>获取或设置中止工作流实例时调用的 <see cref="T:System.Action`1" />。</summary>
      <returns>中止工作流实例时调用的操作。</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>指定与新实例的首个保留内容一起包含的实例元数据值。</summary>
      <param name="writeOnlyValues">要与首个保留内容一起包含的元数据值。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式取消工作流实例。</summary>
      <returns>对异步取消操作的引用。</returns>
      <param name="callback">要在取消操作完成时调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的超时间隔、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式取消工作流实例。</summary>
      <returns>对异步取消操作的引用。</returns>
      <param name="timeout">必须在此时间内完成取消操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在取消操作完成时调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
      <summary>异步使用带指定实例存储、定义标识、标识筛选器、回拨和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型创建默认实例所有者。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="definitionIdentity">定义标识。</param>
      <param name="identityFilter">标识筛选器。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>异步使用带指定实例存储、定义标识、标识筛选器、超时间隔、回拨和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型创建默认实例所有者。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="definitionIdentity">定义标识。</param>
      <param name="identityFilter">标识筛选器。</param>
      <param name="timeout">必须在此时间内完成开始加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
      <summary>异步使用带指定实例存储区、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型检索可运行的实例所有者。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>异步使用带指定实例存储区、超时间隔、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型删除默认实例的所有者。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="timeout">必须在此时间内完成开始加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
      <summary>使用带指定的实例标识符、实例存储区、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模式异步检索实例所有者。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceId">实例标识符。</param>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用带指定的实例标识符、实例存储区、超时间隔、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模式异步检索实例所有者。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceId">实例标识符。</param>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="timeout">必须在此时间内完成开始加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
      <summary>异步使用带指定实例存储区、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型检索可运行的实例所有者。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>异步使用带指定实例存储区、超时间隔、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型检索可运行的实例所有者。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="timeout">必须在此时间内完成开始加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
      <summary>使用带指定实例、更新映射、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型从实例存储区中异步加载工作流。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instance">实例。</param>
      <param name="updateMap">更新映射。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用带指定实例、更新映射、超时间隔、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型从实例存储区中异步加载工作流。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instance">实例。</param>
      <param name="updateMap">更新映射。</param>
      <param name="timeout">必须在此时间内完成开始加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)">
      <summary>使用带指定实例、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型从实例存储区中异步加载工作流。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instance">实例。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用带指定实例、超时间隔、回调和状态的 <see cref="T:System.IAsyncResult" /> 异步设计模型从实例存储区中异步加载工作流。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instance">实例。</param>
      <param name="timeout">必须在此时间内完成开始加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
      <summary>使用指定的实例标识符、回调方法和用户提供的状态以异步方式从实例存储区中加载工作流。</summary>
      <returns>异步操作的状态。</returns>
      <param name="instanceId">工作流实例的全局唯一标识符（128 位）。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的实例标识符、超时期限、回调方法和用户提供的状态以异步方式从实例存储区中加载工作流。</summary>
      <returns>异步操作的状态。</returns>
      <param name="instanceId">工作流实例的全局唯一标识符（128 位）。</param>
      <param name="timeout">必须在此时间内完成开始加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在开始加载操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
      <summary>启动一项操作，从 <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> 中加载可运行工作流实例。</summary>
      <returns>对异步操作的引用</returns>
      <param name="callback">操作完成后要调用的方法。</param>
      <param name="state">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的超时间隔启动操作，以从 <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> 加载可运行的工作流实例。</summary>
      <returns>对异步操作的引用</returns>
      <param name="timeout">必须在此时间内完成加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">操作完成后要调用的方法。</param>
      <param name="state">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
      <summary>使用指定的回调方法和用户提供的状态将工作流实例以异步方式保留到实例存储区中。</summary>
      <returns>对异步保留操作的引用。</returns>
      <param name="callback">要在保留操作完成时调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的超时间隔、回调方法和用户提供的状态将工作流实例以异步方式保留到实例存储区中。</summary>
      <returns>对异步保留操作的引用。</returns>
      <param name="timeout">必须在此时间内完成保留操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在保留操作完成时调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
      <summary>使用指定的值、回调方法和状态启动操作以恢复书签。</summary>
      <returns>对异步书签恢复操作的引用。</returns>
      <param name="bookmark">要恢复的书签。</param>
      <param name="value">作为参数传递给书签恢复时所调用的方法的对象。</param>
      <param name="callback">要在恢复操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的值、超时间隔、回调方法和状态启动操作以恢复书签。</summary>
      <returns>对异步书签恢复操作的引用。</returns>
      <param name="bookmark">要恢复的书签。</param>
      <param name="value">作为参数传递给书签恢复时所调用的方法的对象。</param>
      <param name="timeout">必须在此时间内完成恢复操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在恢复操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
      <summary>使用指定的值、回调方法和状态启动异步操作以恢复具有指定名称的书签。 要恢复的书签是此前由工作流实例内的活动创建的。</summary>
      <returns>书签恢复操作的结果。</returns>
      <param name="bookmarkName">要恢复的书签的名称。</param>
      <param name="value">作为参数传递给书签恢复时所调用的方法的对象。</param>
      <param name="callback">异步操作完成后调用的方法。</param>
      <param name="state">异步操作开始前由调用线程保留的工作流的执行状态。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的值、超时间隔、回调方法和状态启动异步操作以恢复具有指定名称的书签。 要恢复的书签是此前由工作流实例内的活动创建的。</summary>
      <returns>书签恢复操作的结果。</returns>
      <param name="bookmarkName">要恢复的书签的名称。</param>
      <param name="value">作为参数传递给书签恢复时所调用的方法的对象。</param>
      <param name="timeout">必须在此期间恢复书签的时间间隔。</param>
      <param name="callback">异步操作完成后调用的方法。</param>
      <param name="state">异步操作开始前由调用线程保存的工作流的执行状态。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
      <summary>使用指定的回调方法和用户提供的状态以异步方式启动或恢复工作流实例。</summary>
      <returns>对异步运行操作的引用。</returns>
      <param name="callback">要在恢复操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的超时间隔、回调方法和用户提供的状态以异步方式启动或恢复工作流实例。</summary>
      <returns>对异步运行操作的引用。</returns>
      <param name="timeout">必须在此时间内完成恢复操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在恢复操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
      <summary>使用指定的异常、回调方法和用户提供的状态以异步方式终止工作流实例。</summary>
      <returns>对当前 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作的引用。</returns>
      <param name="reason">终止工作流实例的原因。</param>
      <param name="callback">当 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的异常、超时间隔、回调方法和用户提供的状态以异步方式终止工作流实例。</summary>
      <returns>对当前 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作的引用。</returns>
      <param name="reason">终止工作流实例的原因。</param>
      <param name="timeout">必须在此时间内完成 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">当 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
      <summary>使用指定的错误消息、回调方法和用户提供的状态以异步方式终止工作流实例。</summary>
      <returns>对当前 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作的引用。</returns>
      <param name="reason">终止工作流实例的原因。</param>
      <param name="callback">当 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的错误消息、超时间隔、回调方法和用户提供的状态以异步方式终止工作流实例。</summary>
      <returns>对异步 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作的引用。</returns>
      <param name="reason">终止工作流实例的原因。</param>
      <param name="timeout">必须在此时间内完成 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">当 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
      <summary>使用指定的回调方法和用户提供的状态以异步方式保留和释放工作流实例。</summary>
      <returns>对异步 <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> 操作的引用。</returns>
      <param name="callback">当 <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> 操作完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的超时间隔、回调方法和用户提供的状态以异步方式保留和释放工作流实例。</summary>
      <returns>对异步 <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> 操作的引用。</returns>
      <param name="timeout">必须在此时间内完成 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">当 <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> 操作完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Cancel">
      <summary>取消工作流实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
      <summary>使用指定的超时间隔取消工作流实例。</summary>
      <param name="timeout">必须在此时间内完成取消操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Completed">
      <summary>获取或设置工作流实例完成时调用的 <see cref="T:System.Action`1" />。</summary>
      <returns>工作流实例完成时调用的操作。</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)">
      <summary>使用指定实例存储、定义标识和标识筛选器和超时间隔，创建工作流的默认实例所有者。</summary>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="definitionIdentity">工作流的定义标识。</param>
      <param name="identityFilter">标识筛选器。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)">
      <summary>使用指定实例存储、定义标识和标识筛选器和超时间隔，创建工作流的默认实例所有者。</summary>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="definitionIdentity">工作流的定义标识。</param>
      <param name="identityFilter">标识筛选器。</param>
      <param name="timeout">开始加载操作必须在取消操作前的间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore)">
      <summary>使用指定的实例存储区和检索工作流的可运行实例。</summary>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
      <summary>使用指定的实例存储区和超时间隔检索工作流的可运行实例。</summary>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="timeout">开始加载操作必须在取消操作前的间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
      <summary>等待挂起的异步取消操作完成。</summary>
      <param name="result">异步取消操作。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndCreateDefaultInstanceOwner(System.IAsyncResult)">
      <summary>等待完成对默认实例所有者的创建。</summary>
      <param name="asyncResult">异步结果。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndDeleteDefaultInstanceOwner(System.IAsyncResult)">
      <summary>等待完成对默认实例所有者的删除。</summary>
      <param name="asyncResult">异步结果。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndGetInstance(System.IAsyncResult)">
      <summary>等待完成实例检索。</summary>
      <returns>操作的结果。</returns>
      <param name="asyncResult">异步结果。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndGetRunnableInstance(System.IAsyncResult)">
      <summary>等待异步检索可运行实例操作完成。</summary>
      <returns>操作的结果。</returns>
      <param name="asyncResult">异步结果。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
      <summary>等待挂起的异步加载操作完成。</summary>
      <param name="result">异步加载操作。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
      <summary>等待异步加载可运行实例操作完成。</summary>
      <param name="result">对异步加载操作的引用。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
      <summary>等待挂起的异步保留操作完成。</summary>
      <param name="result">异步保留操作。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
      <summary>等待书签恢复操作完成。</summary>
      <returns>一个枚举值，指示书签恢复操作的结果。</returns>
      <param name="result">对异步书签恢复操作的引用。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
      <summary>等待挂起的异步运行操作完成。</summary>
      <param name="result">异步运行操作。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
      <summary>等待挂起的异步终止操作完成。</summary>
      <param name="result">异步终止操作。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
      <summary>等待挂起的异步卸载操作完成。</summary>
      <param name="result">异步卸载操作。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Extensions">
      <summary>获取当前工作流实例的扩展的集合。</summary>
      <returns>对象的集合。</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetBookmarks">
      <summary>返回工作流实例的书签的集合。</summary>
      <returns>工作流实例的书签的只读集合。</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
      <summary>使用指定的超时间隔返回工作流实例的书签的集合。</summary>
      <returns>工作流实例的书签的只读集合。</returns>
      <param name="timeout">必须在此时间内完成此方法的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore)">
      <summary>使用指定的实例标识符和实例存储区检索工作流实例。</summary>
      <returns>检索到的实例。</returns>
      <param name="instanceId">实例标识符。</param>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
      <summary>使用指定的实例标识符、实例存储区和超时间隔检索工作流实例。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="instanceId">实例标识符。</param>
      <param name="instanceStore">对工作流应用程序的当前实例保留状态的访问。</param>
      <param name="timeout">开始加载操作必须在取消操作前的间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore)">
      <summary>使用指定的实例存储区检索工作流的可运行实例。</summary>
      <returns>“可运行”实例。</returns>
      <param name="instanceStore">工作流应用程序的当前实例保留状态的访问。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
      <summary>使用指定的实例存储区和超时间隔检索工作流的可运行实例。</summary>
      <returns>“可运行”实例。</returns>
      <param name="instanceStore">工作流应用程序的当前实例保留状态的访问。</param>
      <param name="timeout">开始加载操作必须在取消操作前的间隔。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Id">
      <summary>获取当前工作流应用程序实例的 128 位 GUID 标识符。</summary>
      <returns>128 位 GUID 标识符。</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Idle">
      <summary>获取或设置当前工作流实例进入空闲状态时调用的 <see cref="T:System.Action`1" />。</summary>
      <returns>工作流实例进入空闲状态时执行的操作。</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplication.InstanceStore">
      <summary>获取或设置一个对象，该对象提供对工作流应用程序的当前实例保留状态的访问。</summary>
      <returns>实例存储区。</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance)">
      <summary>从带指定实例的实例存储区加载工作流实例。</summary>
      <param name="instance">实例。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>从带指定实例和更新映射的实例存储区加载工作流实例。</summary>
      <param name="instance">实例。</param>
      <param name="updateMap">更新映射。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)">
      <summary>从带指定实例、更新映射和超时间隔的实例存储区加载工作流实例。</summary>
      <param name="instance">实例。</param>
      <param name="updateMap">更新映射。</param>
      <param name="timeout">开始加载操作必须在取消操作前的间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.TimeSpan)">
      <summary>从带指定实例和超时间隔的实例存储区加载工作流实例。</summary>
      <param name="instance">实例。</param>
      <param name="timeout">开始加载操作必须在取消操作前的间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Guid)">
      <summary>将指定的工作流实例从实例存储区加载到内存中。</summary>
      <param name="instanceId">工作流实例的全局唯一标识符（128 位）。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
      <summary>使用指定的超时间隔将指定的工作流实例从实例存储区加载到内存中。</summary>
      <param name="instanceId">工作流实例的全局唯一标识符（128 位）。</param>
      <param name="timeout">必须在此时间内完成加载操作的时间间隔，否则，将取消加载操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.LoadRunnableInstance">
      <summary>从 <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> 加载可运行的工作流实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
      <summary>使用指定的超时间隔从 <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> 加载可运行的工作流实例。</summary>
      <param name="timeout">必须在此时间内完成加载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.OnUnhandledException">
      <summary>获取或设置当前工作流实例遇到未处理的异常时调用的 <see cref="T:System.Func`2" />。</summary>
      <returns>工作流实例遇到未处理的异常时调用的委托。</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Persist">
      <summary>将工作流实例保留到实例存储区。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
      <summary>使用指定的超时间隔将工作流实例保留到实例存储区。</summary>
      <param name="timeout">必须在此时间内完成保留操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.PersistableIdle">
      <summary>获取或设置当前工作流实例处于空闲状态并可被保留时调用的 <see cref="T:System.Activities.ActivityFunc" />。</summary>
      <returns>当前工作流实例处于空闲状态并可被保留时调用的 <see cref="T:System.Activities.ActivityFunc" />。</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
      <summary>使用指定的值启动操作以恢复指定的书签。 要恢复的书签是此前由工作流实例内的活动创建的。</summary>
      <returns>书签恢复操作的结果。</returns>
      <param name="bookmark">要恢复的书签。</param>
      <param name="value">作为参数传递给书签恢复时所调用的方法的对象。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
      <summary>使用指定的值和超时间隔启动操作以恢复指定的书签。 要恢复的书签是此前由工作流实例内的活动创建的。</summary>
      <returns>书签恢复操作的结果。</returns>
      <param name="bookmark">要恢复的书签。</param>
      <param name="value">作为参数传递给书签恢复时所调用的方法的对象。</param>
      <param name="timeout">必须在此期间恢复书签的时间间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
      <summary>使用指定的值启动操作以恢复具有指定名称的书签。 要恢复的书签是此前由工作流实例内的活动创建的。</summary>
      <returns>书签恢复操作的结果。</returns>
      <param name="bookmarkName">要恢复的书签的名称。</param>
      <param name="value">作为参数传递给书签恢复时所调用的方法的对象。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
      <summary>使用指定的值和超时间隔启动操作以恢复具有指定名称的书签。 要恢复的书签是此前由工作流实例内的活动创建的。</summary>
      <returns>书签恢复操作的结果。</returns>
      <param name="bookmarkName">要恢复的书签的名称。</param>
      <param name="value">作为参数传递给书签恢复时所调用的方法的对象。</param>
      <param name="timeout">必须在此期间恢复书签的时间间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Run">
      <summary>开始或恢复执行工作流实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
      <summary>使用指定的超时间隔开始或恢复执行工作流实例。</summary>
      <param name="timeout">调用此方法可开始执行新创建的工作流实例。 必须在此时间内完成运行操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
      <summary>使用指定的异常终止工作流实例。</summary>
      <param name="reason">终止工作流实例的原因。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
      <summary>使用指定的异常和超时间隔终止工作流实例。</summary>
      <param name="reason">终止工作流实例的原因。</param>
      <param name="timeout">必须在此时间内完成 <see cref="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" /> 操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.String)">
      <summary>使用指定的错误消息终止工作流实例。</summary>
      <param name="reason">终止工作流实例的原因。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
      <summary>使用指定的错误消息和超时间隔终止工作流实例。</summary>
      <param name="reason">终止工作流实例的原因。</param>
      <param name="timeout">必须在此时间内完成 <see cref="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" /> 操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Unload">
      <summary>保留或卸载工作流实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
      <summary>使用指定的超时间隔保留和卸载工作流实例。</summary>
      <param name="timeout">必须在此时间内完成卸载操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplication.Unloaded">
      <summary>获取或设置卸载当前工作流时调用的 <see cref="T:System.Action`1" />。</summary>
      <returns>卸载工作流实例时调用的操作。</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationAbortedEventArgs">
      <summary>提供已中止的工作流实例的有关数据。</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationAbortedEventArgs.Reason">
      <summary>获取提供有关工作流实例中止原因信息的异常</summary>
      <returns>提供有关工作流实例中止原因信息的异常。</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationAbortedException">
      <summary>表示由于工作流示例已中止导致对该实例执行的操作无效时引发的异常。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor">
      <summary>创建 <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用从序列化的流检索有关此异常的数据所需的上下文和序列化信息创建 <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化中止异常对象所需的所有信息。</param>
      <param name="context">给定序列化流的源和目标，以及由调用方定义的附加上下文。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String)">
      <summary>使用异常的文本字符串说明创建 <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> 类的新实例。</summary>
      <param name="message">中止异常的说明。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Exception)">
      <summary>使用异常的文本字符串说明和导致中止异常的其他异常创建 <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> 类的新实例。</summary>
      <param name="message">中止异常的说明。</param>
      <param name="innerException">与应用程序中止异常有因果关系的异常。 应用程序中止异常因响应内部异常而引发，并且可以使用来自内部异常的信息更恰当地处理错误。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Guid)">
      <summary>使用中止异常的文本字符串说明及其唯一标识符创建 <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> 类的新实例。</summary>
      <param name="message">中止异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationAbortedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>使用中止异常的文本字符串说明、其唯一标识符和导致中止异常的其他异常创建 <see cref="T:System.Activities.WorkflowApplicationAbortedException" /> 类的新实例。</summary>
      <param name="message">中止异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
      <param name="innerException">与应用程序中止异常有因果关系的异常。 应用程序中止异常因响应内部异常而引发，并且可以使用来自内部异常的信息更恰当地处理错误。</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationCompletedEventArgs">
      <summary>提供有关已执行完成的工作流实例的信息。</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.CompletionState">
      <summary>获取工作流实例的完成状态，该状态指示工作流实例已成功完成、已取消还是出错。</summary>
      <returns>工作流实例的完成状态，该状态指示工作流实例已成功完成、已取消还是出错。</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.Outputs">
      <summary>获取一个字典，该字典包含工作流实例的根活动的 <see cref="T:System.Activities.OutArgument" /> 的值（由参数名称键控）。</summary>
      <returns>一个包含工作流实例根活动的 <see cref="T:System.Activities.OutArgument" /> 的值（由参数名称键控）的字典。</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationCompletedEventArgs.TerminationException">
      <summary>获取与工作流实例终止关联的异常。</summary>
      <returns>与工作流实例终止关联的异常。</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationCompletedException">
      <summary>表示由于工作流示例已完成导致对该实例执行的操作无效时引发的异常。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor">
      <summary>创建 <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用从序列化的流检索有关此异常的数据所需的上下文和序列化信息创建 <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化应用程序完成异常对象所需的所有信息。</param>
      <param name="context">给定序列化流的源和目标，以及由调用方定义的附加上下文。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String)">
      <summary>使用异常的文本字符串说明创建 <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> 类的新实例。</summary>
      <param name="message">应用程序完成异常的说明。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Exception)">
      <summary>使用异常的文本字符串说明和导致应用程序完成异常的其他异常创建 <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> 类的新实例。</summary>
      <param name="message">应用程序完成异常的说明。</param>
      <param name="innerException">与应用程序完成异常有因果关系的异常。 应用程序完成异常因响应内部异常而引发，并且可以使用来自内部异常的信息更恰当地处理错误。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Guid)">
      <summary>使用异常的文本字符串说明及异常的唯一标识符创建 <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> 类的新实例。</summary>
      <param name="message">应用程序完成异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationCompletedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>使用异常的文本字符串说明、其唯一标识符和导致应用程序完成异常的其他异常创建 <see cref="T:System.Activities.WorkflowApplicationCompletedException" /> 类的新实例。</summary>
      <param name="message">应用程序完成异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
      <param name="innerException">与应用程序完成异常有因果关系的异常。 应用程序完成异常因响应内部异常而引发，并且可以使用来自内部异常的信息更恰当地处理错误。</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationEventArgs">
      <summary>与 <see cref="T:System.Activities.WorkflowApplication" /> 关联的事件的基类。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationEventArgs.GetInstanceExtensions``1">
      <summary>获取指定类型的扩展的集合。</summary>
      <returns>扩展的集合。</returns>
      <typeparam name="T">扩展的类型。</typeparam>
    </member>
    <member name="P:System.Activities.WorkflowApplicationEventArgs.InstanceId">
      <summary>工作流实例的唯一标识符。</summary>
      <returns>一个唯一标识符。</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationException">
      <summary>提供用于处理工作流应用程序执行期间发生的错误的基类。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor">
      <summary>创建 <see cref="T:System.Activities.WorkflowApplicationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用从序列化的流检索有关此异常的数据所需的上下文和序列化信息创建 <see cref="T:System.Activities.WorkflowApplicationException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化应用程序异常对象所需的信息。</param>
      <param name="context">给定序列化流的源和目标，以及由调用方定义的附加上下文。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String)">
      <summary>使用异常的文本字符串说明创建 <see cref="T:System.Activities.WorkflowApplicationException" /> 类的新实例。</summary>
      <param name="message">应用程序异常的说明。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Exception)">
      <summary>使用异常的文本字符串说明和导致应用程序异常的其他异常创建 <see cref="T:System.Activities.WorkflowApplicationException" /> 类的新实例。</summary>
      <param name="message">应用程序异常的说明。</param>
      <param name="innerException">与应用程序异常有因果关系的异常。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Guid)">
      <summary>使用异常的文本字符串说明及其唯一标识符创建 <see cref="T:System.Activities.WorkflowApplicationException" /> 类的新实例。</summary>
      <param name="message">应用程序异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>使用异常的文本字符串说明、其唯一标识符和导致应用程序异常的其他异常创建 <see cref="T:System.Activities.WorkflowApplicationException" /> 类的新实例。</summary>
      <param name="message">应用程序异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
      <param name="innerException">与应用程序异常有因果关系的异常。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">序列化或反序列化中止异常对象所需的信息。</param>
      <param name="context">给定序列化流的源和目标，以及由调用方定义的附加上下文。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplicationException.InstanceId">
      <summary>获取当前异常的唯一标识符。</summary>
      <returns>一个唯一标识符。</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationIdleEventArgs">
      <summary>保存有关进入空闲状态的工作流实例的信息。</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationIdleEventArgs.Bookmarks">
      <summary>获取工作流实例的书签的只读集合。</summary>
      <returns>书签的只读集合。</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationInstance">
      <summary>指定有关工作流应用程序实例的信息。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.Abandon">
      <summary>使状态机转换到放弃状态。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.Abandon(System.TimeSpan)">
      <summary>使状态机转换到带指定超时值的放弃状态。</summary>
      <param name="timeout">完成放弃操作的超时值。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.BeginAbandon(System.AsyncCallback,System.Object)">
      <summary>开始异步放弃操作。</summary>
      <returns>异步放弃操作。</returns>
      <param name="callback">可接收异步操作完成通知的异步回调委托。</param>
      <param name="state">用户定义的状态数据。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.BeginAbandon(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始异步放弃操作。</summary>
      <returns>异步放弃操作。</returns>
      <param name="timeout">包含执行放弃操作的原因的超时值。</param>
      <param name="callback">可接收异步操作完成通知的异步回调委托。</param>
      <param name="state">用户定义的状态数据。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.CanApplyUpdate(System.Activities.DynamicUpdate.DynamicUpdateMap,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}@)">
      <summary>返回指示 WorkflowApplicationInstance 是否可以应用更新的值。</summary>
      <returns>如果 WorkflowApplicationInstance 可以应用更新，则为 True；否则为 false。</returns>
      <param name="updateMap">更新映射。</param>
      <param name="activitiesBlockingUpdate">阻止更新的活动。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplicationInstance.DefinitionIdentity">
      <summary>获取或设置工作流的定义标识。</summary>
      <returns>工作流的定义标识。</returns>
    </member>
    <member name="M:System.Activities.WorkflowApplicationInstance.EndAbandon(System.IAsyncResult)">
      <summary>完成异步放弃操作。</summary>
      <param name="asyncResult">BeginAbandon 方法之一的调用所返回的 IAsyncResult。</param>
    </member>
    <member name="P:System.Activities.WorkflowApplicationInstance.InstanceId">
      <summary>获取工作流实例的唯一标识符。</summary>
      <returns>工作流实例的唯一标识符。</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationInstance.InstanceStore">
      <summary>获取或设置一个对象，该对象提供对工作流应用程序的当前实例保留状态的访问。</summary>
      <returns>一个对象，该对象提供对工作流应用程序的当前实例保留状态的访问。</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationTerminatedException">
      <summary>由于工作流示例已终止导致对该实例执行的操作无效时引发的异常。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor">
      <summary>创建 <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用从序列化的流检索有关此异常的数据所需的上下文和序列化信息创建 <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化应用程序终止异常对象所需的所有信息。</param>
      <param name="context">给定序列化流的源和目标，以及由调用方定义的附加上下文。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String)">
      <summary>使用异常的文本字符串说明创建 <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> 类的新实例。</summary>
      <param name="message">应用程序终止异常的说明。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Exception)">
      <summary>使用异常的文本字符串说明和导致应用程序终止异常的异常创建 <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> 类的新实例。</summary>
      <param name="message">应用程序终止异常的说明。</param>
      <param name="innerException">与应用程序终止异常有因果关系的异常。 应用程序终止异常因响应内部异常而引发，并且可以使用来自内部异常的信息更恰当地处理错误。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Guid)">
      <summary>使用异常的文本字符串说明及其唯一标识符创建 <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> 类的新实例。</summary>
      <param name="message">应用程序终止异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationTerminatedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>使用异常的文本字符串说明、其唯一标识符和导致当前异常的异常创建 <see cref="T:System.Activities.WorkflowApplicationTerminatedException" /> 类的新实例。</summary>
      <param name="message">应用程序终止异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
      <param name="innerException">与应用程序终止异常有因果关系的异常。 应用程序终止异常因响应内部异常而引发，并且可以使用来自内部异常的信息更恰当地处理错误。</param>
    </member>
    <member name="T:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs">
      <summary>提供有关工作流实例中发生的未处理异常的信息。</summary>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource">
      <summary>获取作为未处理异常的源的活动。</summary>
      <returns>一个活动。</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId">
      <summary>获取作为未处理异常源的活动实例的唯一标识符。</summary>
      <returns>作为未处理异常源的活动实例的唯一标识符。</returns>
    </member>
    <member name="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException">
      <summary>获取工作流实例未处理的 <see cref="T:System.Exception" />。</summary>
      <returns>工作流实例未处理的 <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="T:System.Activities.WorkflowApplicationUnloadedException">
      <summary>由于工作流示例已卸载导致对该实例执行的操作无效时引发的异常。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor">
      <summary>创建 <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用从序列化的流检索有关此异常的数据所需的上下文和序列化信息创建 <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化应用程序卸载异常对象所需的所有信息。</param>
      <param name="context">给定序列化流的源和目标，以及由调用方定义的附加上下文。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String)">
      <summary>使用异常的指定文本字符串说明创建 <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> 类的新实例。</summary>
      <param name="message">应用程序卸载异常的说明。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Exception)">
      <summary>使用异常的指定文本字符串说明和与 <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> 有因果关系的指定异常创建 <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> 类的新实例。</summary>
      <param name="message">应用程序卸载异常的说明。</param>
      <param name="innerException">与应用程序卸载异常有因果关系的异常。 应用程序卸载异常因响应内部异常而引发，并且可以使用来自内部异常的信息更恰当地处理错误。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Guid)">
      <summary>使用异常的指定文本字符串说明和为其指定的唯一标识符创建 <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> 类的新实例。</summary>
      <param name="message">应用程序卸载异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
    </member>
    <member name="M:System.Activities.WorkflowApplicationUnloadedException.#ctor(System.String,System.Guid,System.Exception)">
      <summary>使用异常的指定文本字符串说明、其唯一标识符和导致 <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> 的异常创建 <see cref="T:System.Activities.WorkflowApplicationUnloadedException" /> 类的新实例。</summary>
      <param name="message">应用程序卸载异常的说明。</param>
      <param name="instanceId">全局唯一标识符。</param>
      <param name="innerException">与应用程序卸载异常有因果关系的异常。 应用程序卸载异常因响应内部异常而引发，并且可以使用来自内部异常的信息更恰当地处理错误。</param>
    </member>
    <member name="T:System.Activities.WorkflowDataContext">
      <summary>表示当前工作流环境的数据上下文，并为将工作流参数和变量纳入 avalon1 数据绑定范围提供桥梁。</summary>
    </member>
    <member name="M:System.Activities.WorkflowDataContext.Dispose">
      <summary>释放由 <see cref="T:System.Activities.WorkflowDataContext" /> 占用的资源。</summary>
    </member>
    <member name="M:System.Activities.WorkflowDataContext.GetProperties">
      <summary>返回此 <see cref="T:System.Activities.WorkflowDataContext" /> 管理的属性的集合。</summary>
      <returns>此 <see cref="T:System.Activities.WorkflowDataContext" /> 管理的属性的集合。</returns>
    </member>
    <member name="E:System.Activities.WorkflowDataContext.PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="T:System.Activities.WorkflowIdentity">
      <summary>将保留的工作流实例映射到其对应的工作流定义。</summary>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.#ctor">
      <summary>初始化 <see cref="T:System.Activities.WorkflowIdentity" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.#ctor(System.String,System.Version,System.String)">
      <summary>使用名称、版本和包初始化 <see cref="T:System.Activities.WorkflowIdentity" /> 类的新实例。</summary>
      <param name="name">工作流标识名称。</param>
      <param name="version">工作流标识版本。</param>
      <param name="package">工作流标识包。</param>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.Equals(System.Activities.WorkflowIdentity)">
      <summary>确定当前的 WorkflowIdentity 和指定的 WorkflowIdentity 相同。</summary>
      <returns>如果当前工作流标识与指定工作流标识相同，则为 True；否则为 false。</returns>
      <param name="other">用于比较的工作流表示。</param>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前对象，则为 True；否则为 。 false.</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.GetHashCode">
      <summary>返回此工作流标识的哈希代码。</summary>
      <returns>该工作流标识的哈希代码。</returns>
    </member>
    <member name="P:System.Activities.WorkflowIdentity.Name">
      <summary>获取或设置工作流标识的名称。</summary>
      <returns>工作流实体的名称。</returns>
    </member>
    <member name="P:System.Activities.WorkflowIdentity.Package">
      <summary>获取或设置工作流标识的包。</summary>
      <returns>工作流标识的包。</returns>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.Parse(System.String)">
      <summary>转换 WorkflowIdentity 的字符串表示形式。</summary>
      <returns>WorkflowIdentity 的字符串表示形式。</returns>
      <param name="identity">新的标识。</param>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.Activities.WorkflowIdentity.TryParse(System.String,System.Activities.WorkflowIdentity@)">
      <summary>分析字符串并创建 WorkflowIdentity 的新实例。</summary>
      <returns>如果已为此工作流标识实例创建了一个值，则为 True；否则为 false。</returns>
      <param name="identity">新的标识。</param>
      <param name="result">从字符串生成的结果。</param>
    </member>
    <member name="P:System.Activities.WorkflowIdentity.Version">
      <summary>获取或设置工作流标识的版本。</summary>
      <returns>工作流标识的版本。</returns>
    </member>
    <member name="T:System.Activities.WorkflowIdentityFilter">
      <summary>指定工作流标识筛选器。</summary>
    </member>
    <member name="F:System.Activities.WorkflowIdentityFilter.Any">
      <summary>指定任何工作流标识筛选器。</summary>
    </member>
    <member name="F:System.Activities.WorkflowIdentityFilter.AnyRevision">
      <summary>指定任何工作流标识筛选器修订。</summary>
    </member>
    <member name="F:System.Activities.WorkflowIdentityFilter.Exact">
      <summary>精确的工作流标识筛选器。</summary>
    </member>
    <member name="T:System.Activities.WorkflowInspectionServices">
      <summary>提供用于处理活动树的运行时元数据的方法。</summary>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity)">
      <summary>缓存指定活动树的运行时元数据。</summary>
      <param name="rootActivity">活动树的根活动。</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)">
      <summary>使用指定的环境缓存指定活动树的运行时元数据。</summary>
      <param name="rootActivity">活动树的根活动。</param>
      <param name="hostEnvironment">与活动树关联的环境。</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.CanInduceIdle(System.Activities.Activity)">
      <summary>指定是否服务可包含空闲活动。</summary>
      <returns>如果此项服务可包含空闲活动，则为 True；否则为 false。</returns>
      <param name="activity">活动。</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.GetActivities(System.Activities.Activity)">
      <summary>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它表示与输入活动关联的所有活动。</summary>
      <returns>一个表示与输入活动关联的所有活动的枚举。</returns>
      <param name="activity">根活动。</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.GetImplementationVersion(System.Activities.Activity)">
      <summary>检索活动的实现版本。</summary>
      <returns>活动的实现版本。</returns>
      <param name="activity">活动。</param>
    </member>
    <member name="M:System.Activities.WorkflowInspectionServices.Resolve(System.Activities.Activity,System.String)">
      <summary>从指定的活动树返回具有指定 <paramref name="id" /> 的活动。</summary>
      <returns>指定的活动（若找到）；否则将引发 <see cref="T:System.ArgumentException" />。</returns>
      <param name="root">要搜索的活动树。</param>
      <param name="id">要查找的活动的标识符。</param>
    </member>
    <member name="T:System.Activities.WorkflowInvoker">
      <summary>提供一种调用工作流的方法，调用过程如同方法调用。</summary>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
      <summary>初始化 <see cref="T:System.Activities.WorkflowInvoker" /> 类的新实例。</summary>
      <param name="workflow">要由 <see cref="T:System.Activities.WorkflowInvoker" /> 类的这一实例调用的工作流的工作流定义。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
      <summary>使用指定的 <see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</summary>
      <returns>对异步调用操作的引用。</returns>
      <param name="callback">工作流已完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</summary>
      <returns>对异步调用操作的引用。</returns>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="callback">工作流已完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、超时间隔、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</summary>
      <returns>对异步调用操作的引用。</returns>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
      <param name="callback">工作流已完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的超时间隔、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</summary>
      <returns>对异步调用操作的引用。</returns>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
      <param name="callback">工作流已完成后要调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
      <summary>尝试取消使用指定的 <paramref name="userState" /> 调用的工作流。</summary>
      <param name="userState">要取消的工作流的标记。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
      <summary>返回使用一种 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 重载调用的工作流的结果。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
      <param name="result">引用启动工作流的 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 操作的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.Activities.WorkflowInvoker.Extensions">
      <summary>获取对 <see cref="T:System.Activities.WorkflowInvoker" /> 实例调用的工作流可用的扩展的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</summary>
      <returns>由 <see cref="T:System.Activities.WorkflowInvoker" /> 实例调用的工作流可用的扩展的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke">
      <summary>使用传递给 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 构造函数的工作流定义以同步方式调用工作流。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
      <summary>使用指定的工作流定义以同步方式调用工作流。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
      <param name="workflow">要调用的工作流的工作流定义。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的工作流定义和输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以同步方式调用工作流。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
      <param name="workflow">要调用的工作流的工作流定义。</param>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
      <param name="workflow">要调用的工作流的工作流定义。</param>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
      <summary>使用指定的工作流定义和超时间隔以同步方式调用工作流。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
      <param name="workflow">要调用的工作流的工作流定义。</param>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
      <summary>使用传递给 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 构造函数的工作流定义以同步方式调用工作流。</summary>
      <returns>用于活动执行结果的 TResult 类型的值。</returns>
      <param name="workflow">要调用的工作流的工作流定义。 工作流定义需要从 <see cref="T:System.Activities.ActivityWithResult" /> 派生。</param>
      <typeparam name="TResult">工作流的类型。</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的工作流定义和输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以同步方式调用工作流。</summary>
      <returns>用于活动执行结果的 TResult 类型的值。</returns>
      <param name="workflow">要调用的工作流的工作流定义。</param>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <typeparam name="TResult">工作流的类型。</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
      <summary>使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、其他输出参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</summary>
      <returns>用于活动执行结果的 TResult 类型的值。</returns>
      <param name="workflow">要调用的工作流的工作流定义。</param>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="additionalOutputs">工作流的其他输出参数字典，由参数名称键控。</param>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
      <typeparam name="TResult">工作流的类型。</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</summary>
      <returns>用于活动执行结果的 TResult 类型的值。</returns>
      <param name="workflow">要调用的工作流的工作流定义。</param>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
      <typeparam name="TResult">工作流的类型。</typeparam>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以同步方式调用传递到 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 构造函数的活动。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和指定的超时间隔以同步方式调用传递到 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 构造函数的活动。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
      <summary>使用指定的超时间隔以同步方式调用工作流。</summary>
      <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的参数名键控。</returns>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync">
      <summary>以异步方式调用工作流。</summary>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以异步方式调用工作流。</summary>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和唯一标识符以异步方式调用工作流。</summary>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="userState">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
      <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和指定的超时间隔以异步方式调用工作流。</summary>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
      <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、指定的超时间隔和唯一标识符以异步方式调用工作流。</summary>
      <param name="inputs">由参数名称键控的工作流输入参数字典。</param>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
      <param name="userState">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
      <summary>使用指定的唯一标识符以异步方式调用工作流。</summary>
      <param name="userState">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
      <summary>使用指定的超时间隔以异步方式调用工作流。</summary>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
    </member>
    <member name="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
      <summary>使用指定的超时间隔和唯一标识符以异步方式调用工作流。</summary>
      <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
      <param name="userState">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</param>
    </member>
    <member name="E:System.Activities.WorkflowInvoker.InvokeCompleted">
      <summary>在完成或取消由一种 <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> 重载调用的工作流时发生。</summary>
    </member>
    <member name="T:System.Activities.Debugger.DebugInfo">
      <summary>表示调试信息。</summary>
    </member>
    <member name="T:System.Activities.Debugger.IDebuggableWorkflowTree">
      <summary>提供一个接口，该接口的实现使工作流调试器能够调试序列化的工作流对象。</summary>
    </member>
    <member name="M:System.Activities.Debugger.IDebuggableWorkflowTree.GetWorkflowRoot">
      <summary>返回工作流树的根。</summary>
      <returns>一个活动，表示工作流树的根。</returns>
    </member>
    <member name="T:System.Activities.Debugger.LocalsItemDescription">
      <summary>表示工作流调试器“局部变量”窗口中显示的早期绑定项的名称和类型。</summary>
    </member>
    <member name="M:System.Activities.Debugger.LocalsItemDescription.#ctor(System.String,System.Type)">
      <summary>使用定义的本地项的名称和类型创建 <see cref="T:System.Activities.Debugger.LocalsItemDescription" /> 类的新实例。</summary>
      <param name="name">指定的早期绑定本地项的名称。</param>
      <param name="type">指定的早期绑定本地项的类型。</param>
    </member>
    <member name="P:System.Activities.Debugger.LocalsItemDescription.Name">
      <summary>返回在调试工作流时访问的本地项的名称。</summary>
      <returns>一个表示本地项名称的字符串。</returns>
    </member>
    <member name="M:System.Activities.Debugger.LocalsItemDescription.ToString">
      <summary>返回一个字符串，该字符串表示工作流调试器“局部变量”窗口中显示的早期绑定本地项的名称和类型。</summary>
      <returns>一个字符串，表示本地项的名称和类型。</returns>
    </member>
    <member name="P:System.Activities.Debugger.LocalsItemDescription.Type">
      <summary>返回在调试工作流时访问的本地项的类型。</summary>
      <returns>一个表示本地项类型的字符串。</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocation">
      <summary>标识目标源代码文件中的特定位置。</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.#ctor(System.String,System.Int32)">
      <summary>创建 <see cref="T:System.Activities.Debugger.SourceLocation" /> 类的新实例，它指定源代码文件名和该文件中某一行的行号。</summary>
      <param name="fileName">源代码文件。</param>
      <param name="line">源代码文件中某一行的行号。</param>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>创建 <see cref="T:System.Activities.Debugger.SourceLocation" /> 类的新实例，它指定源代码文件名和该文件内一定范围数据的参数。</summary>
      <param name="fileName">源代码文件的名称。</param>
      <param name="startLine">一个数字，该数字指定源代码文件中读取操作开始时的行。</param>
      <param name="startColumn">一个数字，该数字指定源代码文件中读取操作开始时的列。</param>
      <param name="endLine">一个数字，该数字指定源代码文件中读取操作结束时的行。</param>
      <param name="endColumn">一个数字，该数字指定源代码文件中读取操作结束时的列。</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.EndColumn">
      <summary>获取源代码文件中由一个或多个列组成的范围中的最后一列。</summary>
      <returns>一个表示列范围中最后一列的整数。</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.EndLine">
      <summary>获取源代码文件中由一个或多个行组成的范围中的最后一行。</summary>
      <returns>一个表示行范围中最后一行的整数。</returns>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.Equals(System.Object)">
      <summary>返回一个值，该值指示 <see cref="T:System.Activities.Debugger.SourceLocation" /> 对象引用的源代码文件行和列设置是否与另一个指定 <see cref="T:System.Activities.Debugger.SourceLocation" /> 对象中的行和列设置完全匹配。</summary>
      <returns>一个指示是否存在匹配项的布尔值。</returns>
      <param name="obj">指定的 <see cref="T:System.Activities.Debugger.SourceLocation" /> 对象。</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.FileName">
      <summary>获取目标源代码文件的名称。</summary>
      <returns>目标源代码文件名称的字符串实例。</returns>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocation.GetHashCode">
      <summary>返回一个唯一值来表示 <see cref="T:System.Activities.Debugger.SourceLocation" /> 对象。</summary>
      <returns>一个表示哈希代码的整数。</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.IsSingleWholeLine">
      <summary>获取一个值，该值指示行和列设置是否在源代码文件中定义单个完整的行，而不是多个行。</summary>
      <returns>一个表示列设置所定义内容的布尔值。</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.StartColumn">
      <summary>获取源代码文件中由一个或多个列组成的范围中的第一列。</summary>
      <returns>一个表示列范围中某一列的整数。</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocation.StartLine">
      <summary>获取源代码文件中由一个或多个行组成的范围中的第一行。</summary>
      <returns>一个表示行范围中某一行的整数。</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocationFoundEventArgs">
      <summary>表示 SourceLocationFoundEventArgs。</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationFoundEventArgs.#ctor(System.Object,System.Activities.Debugger.SourceLocation)">
      <summary>使用源位置和目标初始化 <see cref="T:System.Activities.Debugger.SourceLocationFoundEventArgs" /> 类的新实例。</summary>
      <param name="target">目标位置。</param>
      <param name="sourceLocation">源位置。</param>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocationFoundEventArgs.SourceLocation">
      <summary>获取标识目标源代码文件中的特定位置。</summary>
      <returns>该目标源代码文件中的特定位置。</returns>
    </member>
    <member name="P:System.Activities.Debugger.SourceLocationFoundEventArgs.Target">
      <summary>获取指定位置的目标源代码文件。</summary>
      <returns>特定位置的目标源代码文件。</returns>
    </member>
    <member name="T:System.Activities.Debugger.SourceLocationProvider">
      <summary>提供用于将根活动及其子代映射到其对应源位置的 <see cref="T:System.Activities.Debugger.SourceLocation" /> 信息。</summary>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationProvider.CollectMapping(System.Activities.Activity,System.Activities.Activity,System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation},System.String)">
      <summary>创建到一个字典类型集合，该集合由根活动及其子代到其对应源位置的映射组成。</summary>
      <param name="rootActivity1">一个工作流元素，该元素表示未映射到源位置的活动。</param>
      <param name="rootActivity2">一个工作流元素，该元素隐藏 <paramref name="rootActivity1" />，但具有其成员映射到的特定源位置。</param>
      <param name="mapping">一个包含根活动及其子代的字典对象，其中每个活动都映射到一个源位置。</param>
      <param name="path">要使用的源文件的路径。</param>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationProvider.GetSourceLocations(System.Activities.Activity,System.Activities.Debugger.Symbol.WorkflowSymbol)">
      <summary>获取指定的根活动和工作流标志的源位置。</summary>
      <returns>一个包含源位置的 <see cref="T:System.Collections.Generic.Dictionary`2" /> 对象。</returns>
      <param name="rootActivity">表示从中获取源位置的根活动的工作流元素。</param>
      <param name="symbol">包含工作流标志的对象。</param>
    </member>
    <member name="M:System.Activities.Debugger.SourceLocationProvider.GetSymbols(System.Activities.Activity,System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation})">
      <summary>获取指定的根活动和源位置的工作流符号。</summary>
      <returns>包含工作流标志的 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象。</returns>
      <param name="rootActivity">表示从中获取工作流符号的根活动的工作流元素。</param>
      <param name="sourceLocations">一个包含源位置的对象。</param>
    </member>
    <member name="T:System.Activities.Debugger.State">
      <summary>维护可查明源代码位置的属性信息，这些位置充当断点，或可由解释器单步执行到该位置。</summary>
    </member>
    <member name="T:System.Activities.Debugger.StateManager">
      <summary>返回由调试基础结构映射到状态的每个活动的调试。</summary>
    </member>
    <member name="M:System.Activities.Debugger.StateManager.Dispose">
      <summary>退出逻辑线程列表中的每个线程，然后清除该列表。</summary>
    </member>
    <member name="M:System.Activities.Debugger.StateManager.Exit(System.Int32)">
      <summary>退出指定线程，并将其在逻辑线程列表中的位置设置为 null。</summary>
      <param name="threadIndex">一个数字，该数字表示逻辑线程列表中的索引。</param>
    </member>
    <member name="T:System.Activities.Debugger.ThreadWorkerController">
      <summary>支持在专用工作线程上创建和执行辅助调试线程或岛。 此类型是框架使用的实用工具类，不应以公共方式使用。</summary>
    </member>
    <member name="M:System.Activities.Debugger.ThreadWorkerController.#ctor">
      <summary>创建 <see cref="T:System.Activities.Debugger.ThreadWorkerController" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Debugger.ThreadWorkerController.IslandWorker(System.Activities.Debugger.ThreadWorkerController)">
      <summary>将执行定向到特定辅助调试器线程。</summary>
      <param name="controller">要执行的辅助调试器线程。</param>
    </member>
    <member name="T:System.Activities.Debugger.VirtualStackFrame">
      <summary>提供解释器的虚拟调用堆栈帧。</summary>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.#ctor(System.Activities.Debugger.State)">
      <summary>使用指定的状态创建 <see cref="T:System.Activities.Debugger.VirtualStackFrame" /> 类的新实例。</summary>
      <param name="state">对于此实现，为一个包含属性集的对象，这些属性定义调用堆栈上某个帧的虚拟环境。</param>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.#ctor(System.Activities.Debugger.State,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>使用指定的状态和局部变量创建 <see cref="T:System.Activities.Debugger.VirtualStackFrame" /> 类的新实例。</summary>
      <param name="state">对于此实现，为一个包含属性集的对象，这些属性定义调用堆栈上某个帧的虚拟环境。</param>
      <param name="locals">与状态关联的早期和后期绑定变量。</param>
    </member>
    <member name="P:System.Activities.Debugger.VirtualStackFrame.Locals">
      <summary>获取调用堆栈上某个帧的局部变量。</summary>
      <returns>一个键/值对集合，这些键/值对定义与指定状态关联的早期和后期绑定变量。</returns>
    </member>
    <member name="P:System.Activities.Debugger.VirtualStackFrame.State">
      <summary>获取一些属性，这些属性定义调用堆栈上某个帧的虚拟环境。</summary>
      <returns>一个 State 对象，该对象包含定义指定虚拟环境的属性。</returns>
    </member>
    <member name="M:System.Activities.Debugger.VirtualStackFrame.ToString">
      <summary>状态信息的字符串实例。</summary>
      <returns>虚拟环境的状态信息。</returns>
    </member>
    <member name="T:System.Activities.Debugger.XamlDebuggerXmlReader">
      <summary>提供将 XAML 标记代码分析为对象或对象树的功能。</summary>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.IO.TextReader)">
      <summary>使用指定的文本读取器初始化 <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> 类的新实例。</summary>
      <param name="underlyingTextReader">基础文本数据的文本读取器。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>使用特定文本阅读器和构架上下文来解释或映射 XAML 类型来初始化 <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> 类的新实例。</summary>
      <param name="underlyingTextReader">基础文本数据的文本读取器。</param>
      <param name="schemaContext">解释或映射 XAML 类型的架构上下文。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.Xaml.XamlReader,System.IO.TextReader)">
      <summary>用指定的XAML读取器和文本读取器初始化 <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> 类的新实例。</summary>
      <param name="underlyingReader">基础 XML 数据的 XAML 读取器。</param>
      <param name="textReader">基础文本数据的文本读取器。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.#ctor(System.Xaml.XamlReader,System.Xaml.IXamlLineInfo,System.IO.TextReader)">
      <summary>用指定的XAML读取器，XAML行消息和文本读取器初始化 <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> 类的新实例。</summary>
      <param name="underlyingReader">基础 XML 数据的 XAML 读取器。</param>
      <param name="xamlLineInfo">报告 XAML 行信息的对象。</param>
      <param name="textReader">基础文本数据的文本读取器。</param>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.CollectNonActivitySourceLocation">
      <summary>获取或设置指示是否应收集不活动的源位置的值。</summary>
      <returns>如果收集非活动源位置，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.CopyAttachedSourceLocation(System.Object,System.Object)">
      <summary>从指定活动对象中检索行和列值，并将这些值分配给 XAML 读取器的当前实例。</summary>
      <param name="source">要从中读取源位置值的 XAML 活动实例。</param>
      <param name="destination">一个活动的实例。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Activities.Debugger.XamlDebuggerXmlReader" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源；否则为 false。</param>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndColumnName">
      <summary>附加属性的名称，该属性表示采用其 XAML 格式的活动元素的结束列。</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.EndLineName">
      <summary>附加属性的名称，该属性表示采用其 XAML 格式的活动元素的结束行。</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.FileNameName">
      <summary>附加属性的名称，该属性表示要分析的文件的名称。</summary>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetEndColumn(System.Object)">
      <summary>获取在 XAML 读取器的指定实例的 EndColumnName 依赖项属性字段中命名的附加属性的值。</summary>
      <returns>一个附加属性对象。</returns>
      <param name="instance">一个活动的实例。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetEndLine(System.Object)">
      <summary>获取在 XAML 读取器的指定实例的 EndLineName 依赖项属性字段中命名的附加属性的值。</summary>
      <returns>一个附加属性对象。</returns>
      <param name="instance">一个活动的实例。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetFileName(System.Object)">
      <summary>获取在 XAML 读取器的指定实例 FileNameName 依赖项属性字段中命名的附加属性的值。</summary>
      <returns>一个附加属性对象。</returns>
      <param name="instance">一个活动的实例。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetStartColumn(System.Object)">
      <summary>获取在 XAML 读取器的指定实例的 StartColumnName 依赖项属性字段中命名的附加属性的值。</summary>
      <returns>一个附加属性对象。</returns>
      <param name="instance">一个活动的实例。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.GetStartLine(System.Object)">
      <summary>获取在 XAML 读取器的指定实例的 StartLineName 依赖项属性字段中命名的附加属性的值。</summary>
      <returns>一个附加属性对象。</returns>
      <param name="instance">一个活动的实例。</param>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.HasLineInfo">
      <summary>获取一个值，该值指示行信息是否可用。</summary>
      <returns>如果行信息可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.IsEof">
      <summary>获取一个值，该值指示基础读取器是否已到达所分析的 XAML 文件的结尾。</summary>
      <returns>如果该读取器已到达所分析的文件的结尾，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.LineNumber">
      <summary>获取 XAML 文件中读取器当前正在读取的行。</summary>
      <returns>XAML 文件中读取器当前正在读取的行。</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.LinePosition">
      <summary>获取 XAML 文件中 XML 读取器当前正在读取的行的位置。</summary>
      <returns>当前 XML 读取器正在读取的 XAML 文件中行的位置。</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Member">
      <summary>获取将所分析文档的起始成员添加到 XAML 成员基。</summary>
      <returns>正添加到 XAML 成员基的文档的起始成员。</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Namespace">
      <summary>获取 XAML 文档的根元素中用于在 XAML 代码与其架构之间建立关系的路径。</summary>
      <returns>用于在 XAML 文档的根元素中使用的命名空间声明。</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.NodeType">
      <summary>获取当前正在 XAML 文件中读取的节点的类型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 枚举的枚举值之一。</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.Read">
      <summary>提供所加载的源中的下一个 XAML 节点（如果 XAML 节点可用）。</summary>
      <returns>如果某节点可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.SchemaContext">
      <summary>获取基础 XAML 读取器的架构上下文。</summary>
      <returns>架构上下文信息。</returns>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetEndColumn(System.Object,System.Object)">
      <summary>设置在 XAML 读取器的指定实例的 EndColumnName 依赖项属性字段中命名的附加属性的值。</summary>
      <param name="instance">XAML 读取器的当前实例。</param>
      <param name="value">EndColumnName 属性标识符或名称。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetEndLine(System.Object,System.Object)">
      <summary>设置在 XAML 读取器的指定实例的 EndLineName 依赖项属性字段中命名的附加属性的值。</summary>
      <param name="instance">XAML 读取器的当前实例。</param>
      <param name="value">EndLineName 标示符或名称。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetFileName(System.Object,System.Object)">
      <summary>设置在 XAML 读取器的指定实例 FileNameName 依赖项属性字段中命名的附加属性的值。</summary>
      <param name="instance">XAML 读取器的当前实例。</param>
      <param name="value">FileNameName 属性标识符或名称。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetStartColumn(System.Object,System.Object)">
      <summary>设置在 XAML 读取器的指定实例的 StartColumnName 依赖项属性字段中命名的附加属性的值。</summary>
      <param name="instance">XAML 读取器的当前实例。</param>
      <param name="value">StartColumnName 属性标识符或名称。</param>
    </member>
    <member name="M:System.Activities.Debugger.XamlDebuggerXmlReader.SetStartLine(System.Object,System.Object)">
      <summary>设置在 XAML 读取器的指定实例的 StartLineName 依赖项属性字段中命名的附加属性的值。</summary>
      <param name="instance">XAML 读取器的当前实例。</param>
      <param name="value">StartLineName 属性标识符或名称。</param>
    </member>
    <member name="E:System.Activities.Debugger.XamlDebuggerXmlReader.SourceLocationFound">
      <summary>当找到源位置时发生。</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartColumnName">
      <summary>附加属性的名称，该属性表示采用其 XAML 格式的活动的起始列。</summary>
    </member>
    <member name="F:System.Activities.Debugger.XamlDebuggerXmlReader.StartLineName">
      <summary>附加属性的名称，该属性表示采用其 XAML 格式的活动的起始行。</summary>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Type">
      <summary>获取位于 XAML 开始节点处的记录类型。</summary>
      <returns>XAML 记录类型。</returns>
    </member>
    <member name="P:System.Activities.Debugger.XamlDebuggerXmlReader.Value">
      <summary>获取位于当前读取的节点处的元素。</summary>
      <returns>XAML 文件中的元素。</returns>
    </member>
    <member name="T:System.Activities.Debugger.Symbol.ActivitySymbol">
      <summary>表示活动符号。</summary>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.EndColumn">
      <summary>获取源代码文件中由一个或多个列组成的范围中的最后一列。</summary>
      <returns>在一列或多列范围中的最后一列。</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.EndLine">
      <summary>获取源代码文件中由一个或多个行组成的范围中的最后一行。</summary>
      <returns>源代码文件中由一行或多行组成的范围中的最后一行。</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.Id">
      <summary>获取活动的标识。</summary>
      <returns>活动的标识。</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.StartColumn">
      <summary>获取源代码文件中由一个或多个列组成的范围中的第一列。</summary>
      <returns>源代码文件中由一列或多列组成的范围中的第一列。</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.ActivitySymbol.StartLine">
      <summary>获取源代码文件中由一个或多个行组成的范围中的第一行。</summary>
      <returns>源代码文件中由一行或多行组成的范围中的第一行。</returns>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.ActivitySymbol.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Activities.Debugger.Symbol.DebugSymbol">
      <summary>表示调试符号。</summary>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.DebugSymbol.GetSymbol(System.Object)">
      <summary>获取调试标志的标志。</summary>
      <returns>符号。</returns>
      <param name="instance">对象的实例。</param>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.DebugSymbol.SetSymbol(System.Object,System.Object)">
      <summary>调试符号的符号。</summary>
      <param name="instance">对象的实例。</param>
      <param name="value">符号的值。</param>
    </member>
    <member name="F:System.Activities.Debugger.Symbol.DebugSymbol.SymbolName">
      <summary>指定符号名称。</summary>
    </member>
    <member name="T:System.Activities.Debugger.Symbol.WorkflowSymbol">
      <summary>表示工作流符号。</summary>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Debugger.Symbol.WorkflowSymbol" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.CalculateChecksum">
      <summary>指示工作流标志是否要计算校验和标志。</summary>
      <returns>如果要计算校验和标志的工作流标志，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.Decode(System.String)">
      <summary>将数据代码格式转换为指定类型的数据对象。</summary>
      <returns>该数据编码格式转换为指定类型的数据对象。</returns>
      <param name="symbolString">符号字符串 。</param>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.Encode">
      <summary>指定符号的编码格式。</summary>
      <returns>符号的编码格式。</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.WorkflowSymbol.FileName">
      <summary>获取或设置工作流符号的文件名。</summary>
      <returns>用于工作流符号的文件名。</returns>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.GetChecksum">
      <summary>获取工作流符号的校验。</summary>
      <returns>用于工作流符号的校验。</returns>
    </member>
    <member name="P:System.Activities.Debugger.Symbol.WorkflowSymbol.Symbols">
      <summary>获取或设置符号集合。</summary>
      <returns>符号的集合。</returns>
    </member>
    <member name="M:System.Activities.Debugger.Symbol.WorkflowSymbol.ToString">
      <summary>返回表示该工作流符号的字符串。</summary>
      <returns>表示该工作流符号的字符串。</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult">
      <summary>包含通过针对实例存储执行 <see cref="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand" /> 而产生的结果。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> 类的实例。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>创建 <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> 类的实例，并使用以参数形式传入的字典对象中的数据实例化 <see cref="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters" /> 属性。</summary>
      <param name="parameters">一个包含激活参数的字典对象。</param>
    </member>
    <member name="M:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}})">
      <summary>创建 <see cref="T:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult" /> 类的实例，并使用以参数形式传入的可枚举字典对象中的数据实例化 <see cref="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters" /> 属性。</summary>
      <param name="parameters">一个包含激活参数的可枚举字典对象。</param>
    </member>
    <member name="P:System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult.ActivationParameters">
      <summary>泛型宿主用于创建工作流宿主的激活参数的列表。</summary>
      <returns>一个包含激活参数的 List 对象。</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand">
      <summary>使用此持久性命令将工作流服务宿主注册为持久性数据库中的锁所有者。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand" /> 类的实例。</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand.InstanceOwnerMetadata">
      <summary>使用 XName 对象作为键以及 <see cref="T:System.Runtime.Persistence.InstanceValue" /> 对象作为值，获取有关字典中的实例所有者（当前具有到服务宿主的一对一映射）的元数据。</summary>
      <returns>有关实例所有者的元数据。</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand">
      <summary>指定具有标识命令的工作流所有者的创建。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand.InstanceOwnerMetadata">
      <summary>在字典中获取与实例所有者相关的元数据，该元数据中以 XName 对象为键，以 InstanceValue 对象为值。</summary>
      <returns>有关实例所有者的元数据。</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand">
      <summary>从持久性数据库中删除锁所有者信息。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand" /> 类的实例。</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.HasActivatableWorkflowEvent">
      <summary>表示一个事件，实例存储将引发该事件，将持久性数据库中是否存在可激活实例的相关信息通知泛型宿主。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.HasActivatableWorkflowEvent.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.HasActivatableWorkflowEvent" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent">
      <summary>表示一个事件，SQL 工作流实例存储将引发该事件，将持久性数据库中是否存在可运行实例的信息通知工作流宿主。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.HasRunnableWorkflowEvent.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" /> 类的实例。</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand">
      <summary>一个持久性命令，该命令通过使用与工作流实例关联的实例键来加载该实例。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" /> 类的实例。</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.AcceptUninitializedInstance">
      <summary>获取一个值，该值指示是否允许加载处于未初始化状态的工作流实例。</summary>
      <returns>如果允许在此工作流实例处于未初始化状态时加载该实例，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.AssociateInstanceKeyToInstanceId">
      <summary>获取或设置与实例键关联的实例标识符。</summary>
      <returns>实例标识符。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.InstanceKeysToAssociate">
      <summary>获取要与持久性存储中的某个实例关联的实例键。</summary>
      <returns>实例键。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand.LookupInstanceKey">
      <summary>获取用于标识要加载的实例的实例键。</summary>
      <returns>实例键。</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.LoadWorkflowCommand">
      <summary>一个持久性命令，该命令基于持久性存储中工作流实例的状态信息加载该实例。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.LoadWorkflowCommand.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> 类的实例。</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.LoadWorkflowCommand.AcceptUninitializedInstance">
      <summary>获取一个值，该值指示是否允许加载未初始化的实例。</summary>
      <returns>如果允许加载未初始化的实例，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand">
      <summary>表示泛型宿主针对实例存储执行以便检索激活参数的命令。 泛型宿主使用这些激活参数来创建工作流宿主，后者又依次加载可运行的服务实例。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand" /> 类的实例。</summary>
    </member>
    <member name="T:System.Activities.DurableInstancing.SaveWorkflowCommand">
      <summary>一个持久性命令，该命令允许您将实例状态信息保存到持久性存储中。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.SaveWorkflowCommand.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" /> 类的实例。</summary>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.CompleteInstance">
      <summary>将持久性数据库中实例的状态设置为“已完成”并从数据库中删除状态信息，除非 <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceCompletionAction" /> 属性设置为“Delete Nothing”。</summary>
      <returns>如果实例的状态为“已完成”并且删除了该状态信息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData">
      <summary>获取要保存到持久性存储中的实例数据。 一个字典，其中包含属性的名称及其值。</summary>
      <returns>包含属性的名称及其值的字典。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeyMetadataChanges">
      <summary>获取一个使用实例键作为键并使用 XName 和 <see cref="T:System.Runtime.Persistence.InstanceValue" /> 对作为值的字典。</summary>
      <returns>包含键/值对的字典。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToAssociate">
      <summary>包含必须与实例关联的实例键。 一个字典，其中包含与实例键关联的 GUID，以及与该实例键关联的元数据。</summary>
      <returns>必须与实例关联的实例键。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToComplete">
      <summary>获取必须与实例解除关联的实例键的集合。</summary>
      <returns>必须与实例解除关联的实例键的集合。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceKeysToFree">
      <summary>获取要从持久性存储中删除的实例键的集合。</summary>
      <returns>要从持久性存储中删除的实例键的集合。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceMetadataChanges">
      <summary>获取包含实例元数据更改的字典。</summary>
      <returns>对实例元数据的更改。</returns>
    </member>
    <member name="P:System.Activities.DurableInstancing.SaveWorkflowCommand.UnlockInstance">
      <summary>移除实例上的锁。 将实例的所有者设置为 null。</summary>
      <returns>如果移除了实例上的锁，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand">
      <summary>表示工作流宿主将针对实例存储执行的命令，用于将持久性存储中的可运行实例加载到内存中。</summary>
    </member>
    <member name="M:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand" /> 类的实例。</summary>
    </member>
    <member name="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate">
      <summary>表示活动拦截更新。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.ActivityBlockingUpdate.#ctor(System.Activities.Activity,System.String,System.String)">
      <summary>使用指定的活动，原始活动标识符和原因初始化 <see cref="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate" /> 类的新实例。</summary>
      <param name="activity">活动工作流定义。</param>
      <param name="originalActivityId">原始活动标识符。</param>
      <param name="reason">块活动的原因。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.ActivityBlockingUpdate.#ctor(System.Activities.Activity,System.String,System.String,System.String)">
      <summary>使用指定的活动，原始活动标识符，原因和活动实例标识符来初始化 <see cref="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate" /> 类的新实例。</summary>
      <param name="activity">活动工作流定义。</param>
      <param name="originalActivityId">原始活动标识符。</param>
      <param name="reason">块活动的原因。</param>
      <param name="activityInstanceId">执行操作实例的标识符。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.ActivityBlockingUpdate.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的更新活动标识符，原始活动标识符和原因来初始化 <see cref="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate" /> 类的新实例。</summary>
      <param name="updatedActivityId">更新活动标识符。</param>
      <param name="originalActivityId">原始活动标识符。</param>
      <param name="reason">块活动的原因。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.ActivityBlockingUpdate.#ctor(System.String,System.String,System.String,System.String)">
      <summary>使用指定的更新活动标识符，原始活动标识符，原因和活动实例标识符来初始化 <see cref="T:System.Activities.DynamicUpdate.ActivityBlockingUpdate" /> 类的新实例。</summary>
      <param name="updatedActivityId">更新活动标识符。</param>
      <param name="originalActivityId">原始活动标识符。</param>
      <param name="reason">块活动的原因。</param>
      <param name="activityInstanceId">执行操作实例的标识符。</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.Activity">
      <summary>获取工作流定义的活动。</summary>
      <returns>工作流定义的活动。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.ActivityInstanceId">
      <summary>获取或设置当前正在执行的活动实例的唯一标识符。</summary>
      <returns>当前正在执行的活动实例的唯一标识符。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.OriginalActivityId">
      <summary>获取或设置工作流定义中的原始活动的标识符。</summary>
      <returns>在工作流中定义中原始活动标识符。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.Reason">
      <summary>获取或设置活动阻止的原因。</summary>
      <returns>活动阻止的原因。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.ActivityBlockingUpdate.UpdatedActivityId">
      <summary>获取或设置工作流定义中的更新后活动标识符。</summary>
      <returns>在工作流中定义更新活动标识符。</returns>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateInfo">
      <summary>指定动态更新信息。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.GetMapItem(System.Object)">
      <summary>获取 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" /> 的映射项。</summary>
      <returns>映射项。</returns>
      <param name="instance">指定对象的实例。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.GetOriginalActivityBuilder(System.Object)">
      <summary>获取 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" /> 的原始活动生成器。</summary>
      <returns>原始活动生成器。</returns>
      <param name="instance">指定对象的实例。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.GetOriginalDefinition(System.Object)">
      <summary>
        <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" /> 的原始定义。</summary>
      <returns>原始定义。</returns>
      <param name="instance">指定对象的实例。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.SetMapItem(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMapItem)">
      <summary>为 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" /> 设置映射项。</summary>
      <param name="instance">指定对象的实例。</param>
      <param name="mapItem">要设置的映射项。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.SetOriginalActivityBuilder(System.Object,System.Activities.ActivityBuilder)">
      <summary>为 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" />设置原始活动生成器。</summary>
      <param name="instance">指定对象的实例。</param>
      <param name="originalActivityBuilder">要设置的原始的活动生成器。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateInfo.SetOriginalDefinition(System.Object,System.Activities.Activity)">
      <summary>设置 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateInfo" /> 的原始定义。</summary>
      <param name="instance">指定对象的实例。</param>
      <param name="originalDefinition">要设置的原始的定义。</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateMap">
      <summary>指定动态更新映射的选择。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.CalculateImplementationMapItems(System.Activities.Activity)">
      <summary>计算用于使用指定的活动定义的 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMap" /> 的实现的映射项。</summary>
      <returns>计算的映射项。</returns>
      <param name="activityDefinitionToBeUpdated">要更新的活动定义。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.CalculateImplementationMapItems(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)">
      <summary>计算用于使用指定的活动定义和环境的 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMap" /> 的实现的映射项。</summary>
      <returns>计算的映射项。</returns>
      <param name="activityDefinitionToBeUpdated">要更新的活动定义。</param>
      <param name="environment">该环境。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.CalculateMapItems(System.Activities.Activity)">
      <summary>计算用于使用指定的工作流定义的 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMap" /> 的映射项。</summary>
      <returns>计算的映射项。</returns>
      <param name="workflowDefinitionToBeUpdated">要更新的活动定义。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.CalculateMapItems(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)">
      <summary>计算用于使用指定的工作流定义和环境的 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMap" /> 的映射项。</summary>
      <returns>计算的映射项。</returns>
      <param name="workflowDefinitionToBeUpdated">要更新的活动定义。</param>
      <param name="environment">该环境。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.Merge(System.Activities.DynamicUpdate.DynamicUpdateMap[])">
      <summary>合并动态更新映射。</summary>
      <returns>合并动态更新映射。</returns>
      <param name="maps">要合并的映射的集合。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.Merge(System.Collections.Generic.IEnumerable{System.Activities.DynamicUpdate.DynamicUpdateMap})">
      <summary>合并动态更新映射。</summary>
      <returns>合并动态更新映射。</returns>
      <param name="maps">要合并的映射。</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMap.NoChanges">
      <summary>获取动态更新映射而不对其进行更改。</summary>
      <returns>不更改的动态更新映射。</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMap.Query(System.Activities.Activity,System.Activities.Activity)">
      <summary>显示动态更新映射查询。</summary>
      <returns>动态更新映射查询。</returns>
      <param name="updatedWorkflowDefinition">工作流信息已更新。</param>
      <param name="originalWorkflowDefinition">原始工作流定义。</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder">
      <summary>表示动态更新映射生成器。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.CreateMap">
      <summary>为 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 创建映射。</summary>
      <returns>创建的映射。</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.CreateMap(System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}@)">
      <summary>创建具有指定活动阻塞更新的 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 的映射。</summary>
      <returns>创建的映射。</returns>
      <param name="activitiesBlockingUpdate">阻止更新的活动。</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.DisallowUpdateInside">
      <summary>为 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 获取禁止更新内部。</summary>
      <returns>禁止更新内部。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.ForImplementation">
      <summary>获取或设置 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 是否用于实现。</summary>
      <returns>如果 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 适用于实现，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.LookupImplementationMap">
      <summary>获取或设置 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 的查找实现映射。</summary>
      <returns>查找实现映射。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.LookupMapItem">
      <summary>获取或设置 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 的查找映射项。</summary>
      <returns>查找映射项。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.OriginalEnvironment">
      <summary>获取或设置 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 的位置引用环境。</summary>
      <returns>位置引用环境。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.OriginalWorkflowDefinition">
      <summary>获取或设置原始工作流定义。</summary>
      <returns>原始工作流定义。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.UpdatedEnvironment">
      <summary>获取或设置该<see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 的更新环境。</summary>
      <returns>更新环境。</returns>
    </member>
    <member name="P:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder.UpdatedWorkflowDefinition">
      <summary>为<see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapBuilder" /> 获取或设置工作流服务的定义标识。</summary>
      <returns>更新的工作流的定义。</returns>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateMapItem">
      <summary>表示包含在动态更新映射中单个映射项目。</summary>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery">
      <summary>表示动态更新映射查询。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.CanApplyUpdateWhileRunning(System.Activities.Activity)">
      <summary>指定是否 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> 在运行时可以更新。</summary>
      <returns>如果 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> 可以在运行时更新，则为 True；否则为 false。</returns>
      <param name="activity">当前活动。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.FindMatch(System.Activities.Activity)">
      <summary>使用指定的活动搜索与 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> 匹配的。</summary>
      <returns>活动的匹配。</returns>
      <param name="activity">要搜索其匹配项的活动。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.FindMatch(System.Activities.Variable)">
      <summary>使用指定的变量搜索与 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> 匹配的</summary>
      <returns>变量的匹配。</returns>
      <param name="variable">搜索匹配的变量。</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.DynamicUpdateServices">
      <summary>表示动态更新服务。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.Activity)">
      <summary>创建指定工作流定义的更新映射。</summary>
      <returns>创建的更新映射。</returns>
      <param name="updatedWorkflowDefinition">更新的工作流的定义。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.Activity,System.Collections.Generic.IEnumerable{System.Activities.Activity})">
      <summary>创建指定工作流定义和禁止更新内部活动列表的更新映射。</summary>
      <returns>创建的更新映射。</returns>
      <param name="updatedWorkflowDefinition">更新的工作流的定义。</param>
      <param name="disallowUpdateInsideActivities">活动列表。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.Activity,System.Collections.Generic.IEnumerable{System.Activities.Activity},System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}@)">
      <summary>创建指定工作流定义、禁止更新内部活动列表和阻塞更新的更新映射。</summary>
      <returns>创建的更新映射。</returns>
      <param name="updatedWorkflowDefinition">更新的工作流的定义。</param>
      <param name="disallowUpdateInsideActivities">活动列表。</param>
      <param name="activitiesBlockingUpdate">禁止更新的列表。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.ActivityBuilder)">
      <summary>创建指定活动定义的更新映射。</summary>
      <returns>创建的更新映射。</returns>
      <param name="updatedActivityDefinition">更新活动定义。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.ActivityBuilder,System.Collections.Generic.IEnumerable{System.Activities.Activity})">
      <summary>创建指定活动定义、禁止更新内部活动列表的更新映射。</summary>
      <returns>创建的更新映射。</returns>
      <param name="updatedActivityDefinition">更新活动定义。</param>
      <param name="disallowUpdateInsideActivities">活动列表。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.CreateUpdateMap(System.Activities.ActivityBuilder,System.Collections.Generic.IEnumerable{System.Activities.Activity},System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}@)">
      <summary>创建指定活动定义、禁止更新内部活动和阻塞更新列表的更新映射。</summary>
      <returns>创建的更新映射。</returns>
      <param name="updatedActivityDefinition">更新活动定义。</param>
      <param name="disallowUpdateInsideActivities">活动列表。</param>
      <param name="activitiesBlockingUpdate">禁止更新的列表。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.GetImplementationMap(System.Activities.Activity)">
      <summary>获取 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateServices" /> 的实现图像。</summary>
      <returns>要检索的实现映射。</returns>
      <param name="targetActivity">目标活动。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate(System.Activities.Activity)">
      <summary>准备要更新的工作流定义。</summary>
      <param name="workflowDefinitionToBeUpdated">要更新的工作流。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate(System.Activities.ActivityBuilder)">
      <summary>准备要更新的工作流定义。</summary>
      <param name="activityDefinitionToBeUpdated">要更新的活动。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.DynamicUpdateServices.SetImplementationMap(System.Activities.Activity,System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>设置 <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateServices" /> 的实现映射。</summary>
      <param name="targetActivity">目标活动。</param>
      <param name="implementationMap">设置实现映射。</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.InstanceUpdateException">
      <summary>表示实例更新异常。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor">
      <summary>初始化 <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
      <summary>使用指定的阻塞活动初始化 <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> 类的新实例。</summary>
      <param name="blockingActivities">要在此实例中阻止的活动。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.String)">
      <summary>用指定消息初始化 <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.String,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
      <summary>使用指定的消息和阻塞活动初始化 <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="blockingActivities">要在此实例中阻止的活动。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.String,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate},System.Exception)">
      <summary>初始化 <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="blockingActivities">要在此实例中阻止的活动。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Activities.DynamicUpdate.InstanceUpdateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.InstanceUpdateException.BlockingActivities">
      <summary>获取此实例的阻止活动的集合。</summary>
      <returns>石林的阻止活动的集合。</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.InstanceUpdateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用其他异常信息设置 SerializationInfo 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.NativeActivityUpdateContext">
      <summary>表示本机活动更新上下文。</summary>
    </member>
    <member name="P:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ActivityInstanceId">
      <summary>获取当前正在执行的活动实例的唯一标识符。</summary>
      <returns>当前正在执行的活动实例的唯一标识符。</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark">
      <summary>创建一个点，以便 NativeActivity 能够在该点被动等待恢复。</summary>
      <returns>一个书签。</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.Activities.BookmarkCallback)">
      <summary>创建一个点，以便 NativeActivity 能够在该点被动等待恢复，并计划在通知恢复操作完成时要执行的指定方法。</summary>
      <returns>回调方法</returns>
      <param name="callback">通知指示 NativeActivity 恢复时要调用的方法。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>创建一个点，以便 NativeActivity 能够在该点被动等待恢复，提供在通知恢复操作完成时要执行的指定方法，以及在当前 NativeActivity 的执行过程中控制书签使用方式的指定选项。</summary>
      <returns>包括回调方法和书签执行选项的书签。</returns>
      <param name="callback">通知指示 NativeActivity 恢复时要调用的方法。</param>
      <param name="options">在当前 NativeActivity 的执行过程中控制书签运行方式（相对于其他线程）的枚举设置。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String)">
      <summary>创建具有指定名称的点，以便 NativeActivity 能够在该点被动等待恢复。</summary>
      <returns>包括书签名称的书签。</returns>
      <param name="name">书签的名称。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String,System.Activities.BookmarkCallback)">
      <summary>创建一个点，以便 NativeActivity 能够在该点被动等待恢复，该点具有指定名称，还提供在通知恢复操作完成时要执行的指定方法。</summary>
      <returns>包括书签名称和回调方法的书签。</returns>
      <param name="name">书签的名称。</param>
      <param name="callback">通知指示 NativeActivity 恢复时要调用的方法。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkOptions)">
      <summary>创建一个点，以便 NativeActivity 能够在该点被动等待恢复，该点具有指定名称，提供在通知恢复操作完成时要执行的指定方法，以及在当前 NativeActivity 的执行过程中控制书签使用方式的指定选项。</summary>
      <returns>该书签包括书签名称、回调方法和书签执行选项。</returns>
      <param name="name">书签的名称。</param>
      <param name="callback">通知指示 NativeActivity 恢复时要调用的方法。</param>
      <param name="options">在当前 NativeActivity 的执行过程中控制书签使用方式的书签选项。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope)">
      <summary>创建一个点，以便 NativeActivity 能够在该点被动等待恢复，该点具有指定名称，提供在通知恢复操作完成时要执行的指定方法，以及书签的指定范围。</summary>
      <returns>该书签包括书签名称、回调方法和书签范围。</returns>
      <param name="name">书签的名称。</param>
      <param name="callback">通知指示 NativeActivity 恢复时要调用的方法。</param>
      <param name="scope">工作流运行时期间在同一协议下运行的一组书签所应用的标识符。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.CreateBookmark(System.String,System.Activities.BookmarkCallback,System.Activities.BookmarkScope,System.Activities.BookmarkOptions)">
      <summary>创建一个点，以便 NativeActivity 能够在该点被动等待恢复，该点具有指定名称，提供在通知恢复操作完成时要执行的指定方法，还提供书签的指定范围，以及在当前 NativeActivity 的执行过程中控制书签使用方式的指定选项。</summary>
      <returns>该书签包括书签名称、回调方法、书签范围和书签执行选项。</returns>
      <param name="name">书签的名称。</param>
      <param name="callback">通知指示 NativeActivity 恢复时要调用的方法。</param>
      <param name="scope">工作流运行时期间在同一协议下运行的一组书签所应用的标识符。</param>
      <param name="options">在当前 NativeActivity 的执行过程中控制书签使用方式的书签选项。</param>
    </member>
    <member name="P:System.Activities.DynamicUpdate.NativeActivityUpdateContext.DefaultBookmarkScope">
      <summary>获取与工作流的根关联的书签范围。</summary>
      <returns>与工作流的根关联的书签范围。</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.DisallowUpdate(System.String)">
      <summary>禁止更新 <see cref="T:System.Activities.DynamicUpdate.NativeActivityUpdateContext" />。</summary>
      <param name="reason">不允许上下文原因。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.FindExecutionProperty(System.String)">
      <summary>查找具有指定名称的工作流执行属性。</summary>
      <returns>具有指定名称的工作流执行属性。</returns>
      <param name="name">工作流执行属性的名称。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetLocation``1(System.Activities.Variable)">
      <summary>返回指定引用的位置的类型位置。</summary>
      <returns>指定的引用的位置的类型位置。</returns>
      <param name="variable">来自该位置的变量。</param>
      <typeparam name="T">要返回的位置的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetSavedOriginalValue(System.Activities.Activity)">
      <summary>指示是否要为当前活动保存初始值的对象。</summary>
      <returns>用于当前活动保存原始值的对象。</returns>
      <param name="childActivity">子活动。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetSavedOriginalValue(System.String)">
      <summary>指示是否要为当前活动保存初始值的对象。</summary>
      <returns>用于当前活动保存原始值的对象。</returns>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetValue(System.Activities.Argument)">
      <summary>获取指定“参数”的值。</summary>
      <returns>指定参数的值。</returns>
      <param name="argument">要检查的参数。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetValue(System.Activities.RuntimeArgument)">
      <summary>获取指定 RuntimeArgument 的值。</summary>
      <returns>指定的 RuntimeArgument 的值。</returns>
      <param name="runtimeArgument">要检查的参数。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetValue(System.Activities.Variable)">
      <summary>获取当前 NativeActivity 实例中指定变量的值。</summary>
      <returns>当前 NativeActivity 实例中指定变量的值。</returns>
      <param name="variable">在当前 NativeActivity 实例的执行过程中要检索其值的变量。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.GetValue``1(System.Activities.Variable{``0})">
      <summary>返回当前 NativeActivity 实例中指定泛型变量的值。</summary>
      <returns>当前 NativeActivity 实例中指定泛型变量的值。</returns>
      <param name="variable">值在执行当前 NativeActivity 实例期间需检索的泛型变量。</param>
      <typeparam name="T">要检索其值的变量的类型。</typeparam>
    </member>
    <member name="P:System.Activities.DynamicUpdate.NativeActivityUpdateContext.IsCancellationRequested">
      <summary>获取或设置用于指示是否要取消当前正在执行的 NativeActivity 实例的值。</summary>
      <returns>如果要取消当前正在执行的 NativeActivity 实例，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.IsNewlyAdded(System.Activities.Activity)">
      <summary>初始化 <see cref="T:System.Activities.DynamicUpdate.NativeActivityUpdateContext" /> 是否已新添加。</summary>
      <returns>如果新增 <see cref="T:System.Activities.DynamicUpdate.NativeActivityUpdateContext" />，则为 True；否则为 false。</returns>
      <param name="childActivity">子活动。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.RemoveAllBookmarks">
      <summary>移除与当前正在执行的 NativeActivity 实例关联的所有书签。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.RemoveBookmark(System.Activities.Bookmark)">
      <summary>从当前正在执行的 NativeActivity 实例中移除指定书签。</summary>
      <returns>如果从当前执行的 NativeActivity 事例中移除指定书签，则为 True；否则为 false。</returns>
      <param name="bookmark">NativeActivity 实例可以被动等待恢复的点。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.RemoveBookmark(System.String)">
      <summary>移除具有指定名称的书签。</summary>
      <returns>如果已移除具有指定名称的书签，则为 True；否则为 false。</returns>
      <param name="name">书签的名称。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.RemoveBookmark(System.String,System.Activities.BookmarkScope)">
      <summary>移除具有指定名称和指定书签范围的书签。</summary>
      <returns>如果移除具有指定名称和指定书签范围的书签，则为 True，否则为 false。</returns>
      <param name="name">书签的名称。</param>
      <param name="scope">在同一协议下运行的一组“书签”对象的唯一 GUID 标识符。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction(System.Activities.ActivityAction,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 ActivityAction 的执行，该操作没有参数，并在 ActivityAction 完成后恢复父进程的指定回调位置标记书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction 终止的情况下将恢复父活动执行的位置。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``1(System.Activities.ActivityAction{``0},``0,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T&gt; 的执行，该操作的实参中有一个形参，并将 ActivityAction&lt;T&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``10(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T101&gt; 的执行，该操作的实参中有十个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``11(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt; 的执行，该操作的实参中有十一个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``12(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt; 的执行，该操作的实参中有十二个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``13(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt; 的执行，该操作的实参中有十三个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``14(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt; 的执行，该操作的实参中有十四个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``15(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt; 的执行，该操作的实参中有十五个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="argument15">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="T15">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``16(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt; 的执行，该操作的实参中有十六个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="argument15">将数据传送到活动中的参数。</param>
      <param name="argument16">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="T15">传送到活动中的数据。</typeparam>
      <typeparam name="T16">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``2(System.Activities.ActivityAction{``0,``1},``0,``1,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2&gt; 的执行，该操作的实参中有两个形参，并将 ActivityAction&lt;T1, T2&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``3(System.Activities.ActivityAction{``0,``1,``2},``0,``1,``2,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3&gt; 的执行，该操作的实参中有三个形参，并将 ActivityAction&lt;T1, T2, T3&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``4(System.Activities.ActivityAction{``0,``1,``2,``3},``0,``1,``2,``3,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4&gt; 的执行，该操作的实参中有四个形参，并将 ActivityAction&lt;T1, T2, T3, T4&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``5(System.Activities.ActivityAction{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5&gt; 的执行，该操作的实参中有五个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``6(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6&gt; 的执行，该操作的实参中有六个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``7(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt; 的执行，该操作的实参中有七个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``8(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; 的执行，该操作的实参中有八个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleAction``9(System.Activities.ActivityAction{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt; 的执行，该操作的实参中有九个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityAction">在父活动中发生特定事件时执行的操作。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity(System.Activities.Activity)">
      <summary>计划指定的 NativeActivity 子活动的执行。</summary>
      <param name="activity">该子活动是由在父 NativeActivity 的执行过程中发生的事件触发。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback)">
      <summary>计划指定的 NativeActivity 子活动的执行，使用指定的完成回调位置，活动完成后在该位置恢复父进程。</summary>
      <param name="activity">该子活动是由在父 NativeActivity 的执行过程中发生的事件触发。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction 完成后恢复父活动执行的位置。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity(System.Activities.Activity,System.Activities.CompletionCallback,System.Activities.FaultCallback)">
      <summary>计划指定的 NativeActivity 子活动的执行，使用指定的错误回调位置，当活动进入错误状态时，在该位置恢复父进程。</summary>
      <param name="activity">该子活动是由在父 NativeActivity 的执行过程中发生的事件触发。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction 终止的情况下将恢复 NativeActivity 执行的位置。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity(System.Activities.Activity,System.Activities.FaultCallback)">
      <summary>计划指定的 NativeActivity 子活动的执行，使用指定的错误回调位置，当活动进入错误状态时，在该位置恢复父进程。</summary>
      <param name="activity">该子活动是由在父 NativeActivity 的执行过程中发生的事件触发。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction 终止的情况下将恢复 NativeActivity 执行的位置。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleActivity``1(System.Activities.Activity{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>计划指定的 NativeActivity 子活动的执行，in 实参具有一个形参，并在 ActivityAction&lt;T&gt; 完成后恢复父进程的指定回调位置标记书签。</summary>
      <param name="activity">该子活动是由在父 NativeActivity 的执行过程中发生的事件触发。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction&lt;T&gt; 完成后恢复 NativeActivity 执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction 终止的情况下将恢复 NativeActivity 执行的位置。</param>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleDelegate(System.Activities.ActivityDelegate,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.DelegateCompletionCallback,System.Activities.FaultCallback)">
      <summary>将活动的回调方法推送到工作项池中。</summary>
      <param name="activityDelegate">当指定的活动操作完成时，活动返回到的回调方法。</param>
      <param name="inputParameters">活动参数名称和值的字典列表。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityAction 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityAction 终止的情况下将恢复父活动执行的位置。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``1(System.Activities.ActivityFunc{``0},System.Activities.CompletionCallback{``0},System.Activities.FaultCallback)">
      <summary>计划指定的 ActivityFunc&lt;TResult&gt; 的执行，该函数具有一个用于保存返回值的参数，并在 ActivityFunc&lt;TResult&gt; 完成后恢复父进程的指定回调位置标记书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``10(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Activities.CompletionCallback{``9},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt; 的执行，该操作的实参中有十个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9,   TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``11(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Activities.CompletionCallback{``10},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt; 的执行，该操作的实参中有十一个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``12(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Activities.CompletionCallback{``11},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt; 的执行，该操作的实参中有十二个返回值个形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``13(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Activities.CompletionCallback{``12},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,TResult&gt; 的执行，该操作的实参中有十三返回值个形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``14(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Activities.CompletionCallback{``13},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt; 的执行，该操作的实参中有十四个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``15(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Activities.CompletionCallback{``14},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt; 的执行，该操作的实参中有十五个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``16(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Activities.CompletionCallback{``15},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt; 的执行，该操作的实参中有十六个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="argument15">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="T15">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``17(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Activities.CompletionCallback{``16},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt; 的执行，该操作的实参中有十七个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="argument9">将数据传送到活动中的参数。</param>
      <param name="argument10">将数据传送到活动中的参数。</param>
      <param name="argument11">将数据传送到活动中的参数。</param>
      <param name="argument12">将数据传送到活动中的参数。</param>
      <param name="argument13">将数据传送到活动中的参数。</param>
      <param name="argument14">将数据传送到活动中的参数。</param>
      <param name="argument15">将数据传送到活动中的参数。</param>
      <param name="argument16">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt; 完成后将恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="T9">传送到活动中的数据。</typeparam>
      <typeparam name="T10">传送到活动中的数据。</typeparam>
      <typeparam name="T11">传送到活动中的数据。</typeparam>
      <typeparam name="T12">传送到活动中的数据。</typeparam>
      <typeparam name="T13">传送到活动中的数据。</typeparam>
      <typeparam name="T14">传送到活动中的数据。</typeparam>
      <typeparam name="T15">传送到活动中的数据。</typeparam>
      <typeparam name="T16">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``2(System.Activities.ActivityFunc{``0,``1},``0,System.Activities.CompletionCallback{``1},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T, TResult&gt; 的执行，该操作的实参中有两个返回值的形参，并将 ActivityFunc&lt;T, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``3(System.Activities.ActivityFunc{``0,``1,``2},``0,``1,System.Activities.CompletionCallback{``2},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, TResult&gt; 的执行，该操作的实参中有三个返回值的形参，并将 ActivityFunc&lt;T1, T2, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``4(System.Activities.ActivityFunc{``0,``1,``2,``3},``0,``1,``2,System.Activities.CompletionCallback{``3},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, TResult&gt; 的执行，该操作的实参中有四个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3,TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``5(System.Activities.ActivityFunc{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Activities.CompletionCallback{``4},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, TResult&gt; 的执行，该操作的实参中有五个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4,TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``6(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Activities.CompletionCallback{``5},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, TResult&gt; 的执行，该操作的实参中有六个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``7(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.Activities.CompletionCallback{``6},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt; 的执行，该操作的实参中有七个形参，并将 ActivityAction&lt;T1, T2, T3, T4, T5, T6, T7&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``8(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.Activities.CompletionCallback{``7},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt; 的执行，该操作的实参中有八个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7,TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.ScheduleFunc``9(System.Activities.ActivityFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.Activities.CompletionCallback{``8},System.Activities.FaultCallback)">
      <summary>计划指定 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt; 的执行，该操作的实参中有九个返回值的形参，并将 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt; 完成时父进程继续执行的指定回调位置加上书签。</summary>
      <param name="activityFunc">在父活动中发生特定事件并返回值时运行的子活动。</param>
      <param name="argument1">将数据传送到活动中的参数。</param>
      <param name="argument2">将数据传送到活动中的参数。</param>
      <param name="argument3">将数据传送到活动中的参数。</param>
      <param name="argument4">将数据传送到活动中的参数。</param>
      <param name="argument5">将数据传送到活动中的参数。</param>
      <param name="argument6">将数据传送到活动中的参数。</param>
      <param name="argument7">将数据传送到活动中的参数。</param>
      <param name="argument8">将数据传送到活动中的参数。</param>
      <param name="onCompleted">一个书签，用于指示 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt; 完成后恢复父活动执行的位置。</param>
      <param name="onFaulted">一个书签，用于指示在错误导致 ActivityFunc&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt; 终止的情况下将恢复父活动执行的位置。</param>
      <typeparam name="T1">传送到活动中的数据。</typeparam>
      <typeparam name="T2">传送到活动中的数据。</typeparam>
      <typeparam name="T3">传送到活动中的数据。</typeparam>
      <typeparam name="T4">传送到活动中的数据。</typeparam>
      <typeparam name="T5">传送到活动中的数据。</typeparam>
      <typeparam name="T6">传送到活动中的数据。</typeparam>
      <typeparam name="T7">传送到活动中的数据。</typeparam>
      <typeparam name="T8">传送到活动中的数据。</typeparam>
      <typeparam name="TResult">NativeActivity 子活动 out 参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.SetValue(System.Activities.Argument,System.Object)">
      <summary>为指定的参数赋值。</summary>
      <param name="argument">要接收新值的参数。</param>
      <param name="value">参数的新值。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.SetValue(System.Activities.Variable,System.Object)">
      <summary>将指定值对象分配给指定变量对象。</summary>
      <param name="variable">可以分配给值对象的没有指定类型的变量对象。</param>
      <param name="value">可以分配给变量对象的没有指定类型的对象。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateContext.SetValue``1(System.Activities.Variable{``0},``0)">
      <summary>将指定泛型值对象分配给泛型变量对象。</summary>
      <param name="variable">可以分配给值对象的具有指定类型的变量对象。</param>
      <param name="value">可以分配给变量对象的具有指定类型的对象。</param>
      <typeparam name="T">变量的类型。</typeparam>
    </member>
    <member name="T:System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata">
      <summary>表示本机活动更新映射元数据。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata.SaveOriginalValue(System.Activities.Activity,System.Object)">
      <summary>指示是否要为当前活动保存初始值的对象。</summary>
      <param name="updatedChildActivity">更新子活动。</param>
      <param name="originalValue">原始值。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata.SaveOriginalValue(System.String,System.Object)">
      <summary>指示是否要为当前活动保存初始值的对象。</summary>
      <param name="propertyName">属性名称。</param>
      <param name="originalValue">原始值。</param>
    </member>
    <member name="T:System.Activities.DynamicUpdate.UpdateMapMetadata">
      <summary>指定更新映射元数据的选择。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.AddMatch(System.Activities.Activity,System.Activities.Activity)">
      <summary>添加具有指定子级的 <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> 的匹配。</summary>
      <param name="updatedChild">更新子。</param>
      <param name="originalChild">原始的子项。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.AddMatch(System.Activities.Variable,System.Activities.Variable)">
      <summary>添加具有指定变量的 <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> 的匹配。</summary>
      <param name="updatedVariable">更新的变量。</param>
      <param name="originalVariable">原始变量。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.AllowUpdateInsideThisActivity">
      <summary>允许更新当前活动中的映射元数据。</summary>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.DisallowUpdateInsideThisActivity(System.String)">
      <summary>禁止更新当前活动中的映射元数据。</summary>
      <param name="reason">禁止的原因。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.GetMatch(System.Activities.Activity)">
      <summary>获取有指定子段的 <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> 的匹配。</summary>
      <returns>用于 <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" />的匹配。</returns>
      <param name="updatedChild">更新子。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.GetMatch(System.Activities.Variable)">
      <summary>获取有指定变量的 <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> 的匹配。</summary>
      <returns>用于 <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" />的匹配。</returns>
      <param name="updatedVariable">更新的变量。</param>
    </member>
    <member name="M:System.Activities.DynamicUpdate.UpdateMapMetadata.IsReferenceToImportedChild(System.Activities.Activity)">
      <summary>指示 <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> 是否是导入子集的引用。</summary>
      <returns>如果 <see cref="T:System.Activities.DynamicUpdate.UpdateMapMetadata" /> 为对导入子级的引用，则为 True；否则为 false。</returns>
      <param name="childActivity">子活动。</param>
    </member>
    <member name="T:System.Activities.ExpressionParser.SourceExpressionException">
      <summary>表示在无法将基本文本的表达式转换为可执行形式时引发的异常。</summary>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor">
      <summary>初始化 <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> 类的新实例。</summary>
      <param name="info">保存有关所引发异常的序列化对象数据的对象。</param>
      <param name="context">包含有关源或目标的上下文信息的对象。</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>使用指定的错误消息和编译器错误集合初始化 <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="errors">编译器错误数据的集合。</param>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Activities.ExpressionParser.SourceExpressionException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="P:System.Activities.ExpressionParser.SourceExpressionException.Errors">
      <summary>获取编译器错误的可枚举类型集合。</summary>
      <returns>编译器错误的可枚举集合。</returns>
    </member>
    <member name="M:System.Activities.ExpressionParser.SourceExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>当在派生类中重写时，使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">保存有关所引发异常的序列化对象数据的对象。</param>
      <param name="context">包含有关源或目标的上下文信息的对象。</param>
    </member>
    <member name="T:System.Activities.Expressions.Add`3">
      <summary>计算两个值的和。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Add`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Add`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Checked">
      <summary>获取或设置一个值，该值指示加运算是否在 checked 上下文中执行。</summary>
      <returns>如果加运算在所检查的上下文中执行，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Add`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.And`3">
      <summary>计算两个值的按位逻辑 AND。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.And`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.And`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.And`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>表示左操作数的 <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.And`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>表示右操作数的 <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" />。</returns>
    </member>
    <member name="T:System.Activities.Expressions.AndAlso">
      <summary>计算两个值的逻辑 AND。 两个值均转换为布尔值，并且，如果两者均为 true，则此表达式返回 true。 如果一个值或两个值的计算结果为 false，则此表达式返回 false。 <see cref="T:System.Activities.Expressions.AndAlso" /> 是逻辑 AND 运算符的“短路”版本，只要其中一个操作数的计算结果为 false 即返回 false。</summary>
    </member>
    <member name="M:System.Activities.Expressions.AndAlso.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.AndAlso" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.AndAlso.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.AndAlso.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArgumentReference`1">
      <summary>表示用作表达式中的左值的 <see cref="T:System.Activities.Argument" />。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> 返回的参数的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.#ctor(System.String)">
      <summary>使用参数名称初始化 <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> 类的新实例。</summary>
      <param name="argumentName">参数名称。</param>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentReference`1.ArgumentName">
      <summary>获取或设置要向其返回引用的参数的名称。</summary>
      <returns>参数名称。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentReference`1.LocationReference">
      <summary>获取引用的位置。</summary>
      <returns>位置引用。</returns>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentReference`1.ToString">
      <summary>返回 <see cref="T:System.Activities.Expressions.ArgumentReference`1" /> 的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>如果设置了 <see cref="P:System.Activities.Expressions.ArgumentReference`1.ArgumentName" />，则为参数名称，否则为活动 ID 和名称。</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArgumentValue`1">
      <summary>表示用作表达式中的右值的 <see cref="T:System.Activities.Argument" />。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> 返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.#ctor(System.String)">
      <summary>使用指定的参数名称初始化 <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> 类的新实例。</summary>
      <param name="argumentName">参数名称。</param>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentValue`1.ArgumentName">
      <summary>获取或设置要返回其值的参数的名称。</summary>
      <returns>参数名称。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArgumentValue`1.LocationReference">
      <summary>获取参数值的位置引用。</summary>
      <returns>参数值的引用位置。</returns>
    </member>
    <member name="M:System.Activities.Expressions.ArgumentValue`1.ToString">
      <summary>
        <see cref="T:System.Activities.Expressions.ArgumentValue`1" /> 的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>如果设置了 <see cref="P:System.Activities.Expressions.ArgumentValue`1.ArgumentName" />，则为参数名称；否则为活动 ID 和名称。</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArrayItemReference`1">
      <summary>对数组内的项的引用。</summary>
      <typeparam name="TItem">数组内的项的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArrayItemReference`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.ArrayItemReference`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemReference`1.Array">
      <summary>获取或设置正在引用其项的数组。</summary>
      <returns>正在引用其项的数组。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemReference`1.Index">
      <summary>获取或设置所引用的项的数组索引号。</summary>
      <returns>所引用的项的数组索引号。</returns>
    </member>
    <member name="T:System.Activities.Expressions.ArrayItemValue`1">
      <summary>数组内的项。</summary>
      <typeparam name="TItem">数组内的项的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ArrayItemValue`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.ArrayItemValue`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemValue`1.Array">
      <summary>获取或设置项所属的数组。</summary>
      <returns>项所属的数组。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ArrayItemValue`1.Index">
      <summary>获取或设置数组项的数组索引号。</summary>
      <returns>数组项索引。</returns>
    </member>
    <member name="T:System.Activities.Expressions.As`2">
      <summary>尝试将操作数转换为给定类型。 如果无法进行转换，则结果设置为 null。</summary>
      <typeparam name="TOperand">操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.As`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.As`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.As`2.Operand">
      <summary>获取或设置操作数。</summary>
      <returns>操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.AssemblyReference">
      <summary>表示程序集引用。</summary>
    </member>
    <member name="M:System.Activities.Expressions.AssemblyReference.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.AssemblyReference" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.AssemblyReference.Assembly">
      <summary>获取或设置程序集引用的程序集。</summary>
      <returns>程序集引用的程序集。</returns>
    </member>
    <member name="P:System.Activities.Expressions.AssemblyReference.AssemblyName">
      <summary>获取或设置程序集的名称。</summary>
      <returns>程序集的名称。</returns>
    </member>
    <member name="M:System.Activities.Expressions.AssemblyReference.LoadAssembly">
      <summary>尝试加载程序集。</summary>
    </member>
    <member name="M:System.Activities.Expressions.AssemblyReference.op_Implicit(System.Reflection.Assembly)~System.Activities.Expressions.AssemblyReference">
      <summary>转换指定的程序集引用。</summary>
      <returns>实例 <see cref="T:System.Activities.Expressions.AssemblyReference" /> 对象。</returns>
      <param name="assembly">程序集。</param>
    </member>
    <member name="M:System.Activities.Expressions.AssemblyReference.op_Implicit(System.Reflection.AssemblyName)~System.Activities.Expressions.AssemblyReference">
      <summary>将使用指定程序集名称转换指定的程序集引用。</summary>
      <returns>
        <see cref="T:System.Activities.Expressions.AssemblyReference" /> 对象的实例。</returns>
      <param name="assemblyName">程序集名称。</param>
    </member>
    <member name="T:System.Activities.Expressions.Cast`2">
      <summary>尝试将操作数转换为给定类型。 如果无法进行转换，则生成运行时错误。</summary>
      <typeparam name="TOperand">操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Cast`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Cast`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.Cast`2.Checked">
      <summary>获取或设置一个值，该值指示强制转换运算是否在 checked 上下文中执行。</summary>
      <returns>如果强制转换运算在所检查的上下文中执行，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Cast`2.Operand">
      <summary>获取或设置操作数。</summary>
      <returns>操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.CompiledExpressionInvoker">
      <summary>表示已编译的表达式调用程序。</summary>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.#ctor(System.Activities.Expressions.ITextExpression,System.Boolean,System.Activities.CodeActivityMetadata)">
      <summary>使用表达式，isReference和元数据初始化 <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" /> 类的新实例。</summary>
      <param name="expression">表达式。</param>
      <param name="isReference">如果保留对象引用数据，则为 True；否则为 false。</param>
      <param name="metadata">活动元数据。</param>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.GetCompiledExpressionRoot(System.Object)">
      <summary>设置已编译的表达式根。</summary>
      <returns>已编译的表达式根。</returns>
      <param name="target">目标。</param>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.GetCompiledExpressionRootForImplementation(System.Object)">
      <summary>获取用于实现 <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" /> 的已编译表达式根。</summary>
      <returns>已编译的表达式根。</returns>
      <param name="target">目标。</param>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.InvokeExpression(System.Activities.ActivityContext)">
      <summary>调用已编译的表达式。</summary>
      <returns>调用的表达式。</returns>
      <param name="activityContext">活动上下文。</param>
    </member>
    <member name="P:System.Activities.Expressions.CompiledExpressionInvoker.IsStaticallyCompiled">
      <summary>获取或设置是否已静态编译已编译表达式调用程序。</summary>
      <returns>如果编译的表达调用程序静态编译，则为true，否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.SetCompiledExpressionRoot(System.Object,System.Activities.XamlIntegration.ICompiledExpressionRoot)">
      <summary>设置已编译的表达式根。</summary>
      <param name="target">目标。</param>
      <param name="compiledExpressionRoot">要设置的编译表达式根。</param>
    </member>
    <member name="M:System.Activities.Expressions.CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation(System.Object,System.Activities.XamlIntegration.ICompiledExpressionRoot)">
      <summary>为 <see cref="T:System.Activities.Expressions.CompiledExpressionInvoker" />实现设置已编译的表达式根。</summary>
      <param name="target">目标。</param>
      <param name="compiledExpressionRoot">要设置的编译表达式根。</param>
    </member>
    <member name="T:System.Activities.Expressions.DelegateArgumentReference`1">
      <summary>表示用作表达式中的左值的 <see cref="T:System.Activities.DelegateArgument" />。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.DelegateArgument" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentReference`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentReference`1.#ctor(System.Activities.DelegateArgument)">
      <summary>使用指定 <see cref="T:System.Activities.DelegateArgument" /> 初始化 <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> 类的新实例。</summary>
      <param name="delegateArgument">表达式的值。</param>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentReference`1.DelegateArgument">
      <summary>获取或设置由 <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> 表示的 <see cref="T:System.Activities.DelegateArgument" />。</summary>
      <returns>由 <see cref="T:System.Activities.Expressions.DelegateArgumentReference`1" /> 表示的 <see cref="T:System.Activities.DelegateArgument" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentReference`1.LocationReference">
      <summary>获取代理参数的位置引用。</summary>
      <returns>代理参数的位置引用。</returns>
    </member>
    <member name="T:System.Activities.Expressions.DelegateArgumentValue`1">
      <summary>表示用作表达式中的右值的 <see cref="T:System.Activities.DelegateArgument" />。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.DelegateArgument" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentValue`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Expressions.DelegateArgumentValue`1.#ctor(System.Activities.DelegateArgument)">
      <summary>使用指定 <see cref="T:System.Activities.DelegateArgument" /> 初始化 <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> 类的新实例。</summary>
      <param name="delegateArgument">表达式的值。</param>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentValue`1.DelegateArgument">
      <summary>获取或设置由 <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> 表示的 <see cref="T:System.Activities.DelegateArgument" />。</summary>
      <returns>由 <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> 表示的 <see cref="T:System.Activities.DelegateArgument" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.DelegateArgumentValue`1.LocationReference">
      <summary>获取 <see cref="T:System.Activities.Expressions.DelegateArgumentValue`1" /> 引用的位置。</summary>
      <returns>位置引用。</returns>
    </member>
    <member name="T:System.Activities.Expressions.Divide`3">
      <summary>计算除法运算的商。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Divide`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Divide`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.Divide`3.Left">
      <summary>获取或设置左操作数。 左操作数为除数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Divide`3.Right">
      <summary>获取或设置右操作数。 右操作数为被除数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.EnvironmentLocationReference`1">
      <summary>表示环境位置参考。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.Expressions.EnvironmentLocationReference`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.EnvironmentLocationReference`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>创建并验证活动的参数、变量、子活动和活动委托的说明。</summary>
      <param name="metadata">活动的元数据，用于封装活动的参数、变量、子活动和活动委托。</param>
    </member>
    <member name="M:System.Activities.Expressions.EnvironmentLocationReference`1.Execute(System.Activities.CodeActivityContext)">
      <summary>执行活动的执行。</summary>
      <returns>活动的执行。</returns>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="P:System.Activities.Expressions.EnvironmentLocationReference`1.LocationReference">
      <summary>获取位置引用的值。</summary>
      <returns>位置引用值。</returns>
    </member>
    <member name="T:System.Activities.Expressions.EnvironmentLocationValue`1">
      <summary>表示位置值环境。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.Expressions.EnvironmentLocationValue`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.EnvironmentLocationValue`1.CacheMetadata(System.Activities.CodeActivityMetadata)">
      <summary>创建并验证活动的参数、变量、子活动和活动委托的说明。</summary>
      <param name="metadata">活动的元数据，用于封装活动的参数、变量、子活动和活动委托。</param>
    </member>
    <member name="M:System.Activities.Expressions.EnvironmentLocationValue`1.Execute(System.Activities.CodeActivityContext)">
      <summary>执行活动的执行。</summary>
      <returns>活动的执行。</returns>
      <param name="context">执行活动时所处的执行上下文。</param>
    </member>
    <member name="P:System.Activities.Expressions.EnvironmentLocationValue`1.LocationReference">
      <summary>获取位置引用的值。</summary>
      <returns>位置引用值。</returns>
    </member>
    <member name="T:System.Activities.Expressions.Equal`3">
      <summary>在两个值之间执行相等性测试。 如果两个值相等，则表达式返回 true；否则返回 false。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Equal`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Equal`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.Equal`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Equal`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.ExpressionServices">
      <summary>用于将环境感知表达式转换为活动树的转换 API。</summary>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})">
      <summary>将工作流环境感知表达式转换为活动树。</summary>
      <returns>转换后的表达式。</returns>
      <param name="expression">所转换的表达式。</param>
      <typeparam name="TResult">所转换为的表达式的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})">
      <summary>将对工作流环境感知表达式的引用转换为活动树。</summary>
      <returns>转换后的表达式。</returns>
      <param name="expression">所转换的表达式。</param>
      <typeparam name="TResult">所转换为的表达式的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)">
      <summary>将工作流环境感知表达式转换为活动树。</summary>
      <returns>如果表达式可被转换，则为 true；否则为 false。</returns>
      <param name="expression">所转换的表达式。</param>
      <param name="result">转换后的表达式。</param>
      <typeparam name="TResult">所转换为的表达式的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)">
      <summary>将对工作流环境感知表达式的引用转换为活动树。</summary>
      <returns>如果表达式可被转换，则为 true；否则为 false。</returns>
      <param name="expression">所转换的表达式。</param>
      <param name="result">转换后的表达式。</param>
      <typeparam name="TResult">所转换为的表达式的类型。</typeparam>
    </member>
    <member name="T:System.Activities.Expressions.FieldReference`2">
      <summary>对字段的引用。</summary>
      <typeparam name="TOperand">操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.FieldReference`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.FieldReference`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.FieldReference`2.FieldName">
      <summary>获取或设置所引用的字段的名称。</summary>
      <returns>所引用的字段的名称。</returns>
    </member>
    <member name="P:System.Activities.Expressions.FieldReference`2.Operand">
      <summary>获取或设置字段引用。</summary>
      <returns>字段引用。</returns>
    </member>
    <member name="T:System.Activities.Expressions.FieldValue`2">
      <summary>一个字段值。</summary>
      <typeparam name="TOperand">操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.FieldValue`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.FieldValue`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.FieldValue`2.FieldName">
      <summary>获取或设置字段名。</summary>
      <returns>字段名。</returns>
    </member>
    <member name="P:System.Activities.Expressions.FieldValue`2.Operand">
      <summary>获取或设置字段的值。</summary>
      <returns>字段值。</returns>
    </member>
    <member name="T:System.Activities.Expressions.GreaterThan`3">
      <summary>在两个值之间执行关系测试。 如果左操作数大于右操作数，则表达式返回 true。 否则，该调用将返回 false。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.GreaterThan`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.GreaterThan`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThan`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>表示左操作数的 <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThan`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>表示右操作数的 <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" />。</returns>
    </member>
    <member name="T:System.Activities.Expressions.GreaterThanOrEqual`3">
      <summary>在两个值之间执行关系测试。 如果左操作数大于或等于右操作数，则表达式返回 true；否则返回 false。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.GreaterThanOrEqual`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.GreaterThanOrEqual`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThanOrEqual`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.GreaterThanOrEqual`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.IndexerReference`2">
      <summary>表示由对象索引器引用的一个元素，该元素可用作表达式中的左值。</summary>
      <typeparam name="TOperand">带有索引器的类型。</typeparam>
      <typeparam name="TItem">索引器数组的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.IndexerReference`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.IndexerReference`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.IndexerReference`2.Indices">
      <summary>获取一个参数集合，这些参数表示元素在索引器数组中的索引。</summary>
      <returns>元素在索引器数组中的索引。</returns>
    </member>
    <member name="P:System.Activities.Expressions.IndexerReference`2.Operand">
      <summary>获取或设置包含索引器的对象。</summary>
      <returns>包含索引器的对象。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`1">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`1" />。</summary>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`1" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`1.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`1" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`10">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`10" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T9">其值传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`10" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`10.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`10" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 2 个参数。返回 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Argument9">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 9 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`10" /> 的第 9 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`10.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`10" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`11">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`11" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T9">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T10">其值传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`11" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`11.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`11" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument10">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 10 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 10 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Argument9">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 9 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`11" /> 的第 9 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`11.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`11" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`12">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`12" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T9">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T10">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T11">其值传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`12" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`12.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`12" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument10">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 10 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 10 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument11">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 11 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 11 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Argument9">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 9 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`12" /> 的第 9 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`12.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`12" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`13">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`13" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T9">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T10">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T11">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T12">其值传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`13" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`13.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`13" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument10">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 10 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 10 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument11">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 11 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 11 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument12">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 12 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 12 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Argument9">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 9 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`13" /> 的第 9 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`13.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`13" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`14">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`14" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T9">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T10">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T11">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T12">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T13">其值传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`14" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`14.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`14" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument10">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 10 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 10 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument11">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 11 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 11 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument12">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 12 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 12 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument13">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 13 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 13 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Argument9">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 9 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`14" /> 的第 9 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`14.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`14" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`15">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`15" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T9">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T10">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T11">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T12">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T13">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T14">其值传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`15" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`15.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`15" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument10">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 10 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 10 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument11">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 11 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 11 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument12">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 12 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 12 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument13">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 13 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 13 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument14">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 14 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 14 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Argument9">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 9 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`15" /> 的第 9 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`15.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`15" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`16">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`16" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T9">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T10">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T11">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T12">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T13">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T14">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T15">其值传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 15 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`16" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`16.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`16" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument10">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 10 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 10 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument11">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 11 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 11 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument12">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 12 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 12 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument13">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 13 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 13 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument14">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 14 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 14 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument15">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 15 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 15 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 2 个参数。返回 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Argument9">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 9 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`16" /> 的第 9 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`16.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`16" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`17">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`17" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T9">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T10">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T11">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T12">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T13">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T14">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T15">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 15 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T16">其值传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 16 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`17" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`17.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`17" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument10">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 10 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 10 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument11">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 11 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 11 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument12">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 12 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 12 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument13">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 13 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 13 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument14">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 14 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 14 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument15">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 15 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 15 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument16">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 16 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 16 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 2 个参数。返回 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Argument9">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 9 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`17" /> 的第 9 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`17.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`17" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`2">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`2" />。</summary>
      <typeparam name="T">其值传递到 <see cref="T:System.Activities.ActivityFunc`2" /> 的 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`2" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`2.Argument">
      <summary>获取或设置传递给 <see cref="T:System.Activities.ActivityFunc`2" /> 的参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`2" /> 的参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`2.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`2" />。</summary>
      <returns>要调用的 <see cref="T:System.Activities.ActivityFunc`2" />。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`3">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`3" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`3" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`3" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`3" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`3" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`3" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`3" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`3" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`3.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`3" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`4">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`4" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`4" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`4.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`4" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`4" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`4.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`4" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`5">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`5" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`5" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`5.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`5" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`5" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`5.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`5" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`6">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`6" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`6" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`6.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`6" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`6" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`6.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`6" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`7">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`7" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`7" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`7.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`7" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`7" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`7.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`7" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`8">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`8" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`8" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`8.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`8" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 2 个参数。返回 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`8" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`8.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`8" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeFunc`9">
      <summary>调用 <see cref="T:System.Activities.ActivityFunc`9" />。</summary>
      <typeparam name="T1">其值传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T2">其值传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T3">其值传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T4">其值传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T5">其值传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T6">其值传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T7">其值传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="T8">其值传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的类型。</typeparam>
      <typeparam name="TResult">其值从 <see cref="T:System.Activities.ActivityFunc`9" /> 中返回的返回 <see cref="T:System.Activities.OutArgument`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeFunc`9.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeFunc`9" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument1">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 1 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument2">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 2 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument3">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 3 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument4">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 4 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument5">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 5 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument6">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 6 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument7">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 7 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Argument8">
      <summary>获取或设置传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 8 个参数。</summary>
      <returns>传递到 <see cref="T:System.Activities.ActivityFunc`9" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeFunc`9.Func">
      <summary>获取或设置要调用的 <see cref="T:System.Activities.ActivityFunc`9" />。</summary>
      <returns>要调用的活动函数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.InvokeMethod`1">
      <summary>调用指定对象或类型的公共方法。</summary>
      <typeparam name="TResult">活动返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.InvokeMethod`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.InvokeMethod`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.GenericTypeArguments">
      <summary>所包含的方法的泛型类型参数。</summary>
      <returns>参数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.MethodName">
      <summary>要在执行活动时调用的方法的名称。</summary>
      <returns>方法名。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.Parameters">
      <summary>要调用的方法的参数集合。</summary>
      <returns>参数集合。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.RunAsynchronously">
      <summary>获取或设置一个值，该值指示是否以异步方式调用活动的方法。</summary>
      <returns>如果方法以异步方式执行，则为 true，否则，为 false。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.TargetObject">
      <summary>获取或设置包含要调用的方法的对象。</summary>
      <returns>要调用的方法。</returns>
    </member>
    <member name="P:System.Activities.Expressions.InvokeMethod`1.TargetType">
      <summary>获取或设置 <see cref="P:System.Activities.Expressions.InvokeMethod`1.TargetObject" />的类型。</summary>
      <returns>目标对象类型。</returns>
    </member>
    <member name="T:System.Activities.Expressions.ITextExpression">
      <summary>表示文本表达式。</summary>
    </member>
    <member name="P:System.Activities.Expressions.ITextExpression.ExpressionText">
      <summary>获取要计算的表达式文本。</summary>
      <returns>要计算的表达式文本。</returns>
    </member>
    <member name="M:System.Activities.Expressions.ITextExpression.GetExpressionTree">
      <summary>获取表达式树。</summary>
      <returns>该表达式树。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ITextExpression.Language">
      <summary>获取被应用于接口文本表达式的语言信息。</summary>
      <returns>应用于接口文本表达式的语言信息。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ITextExpression.RequiresCompilation">
      <summary>获取一个值，该值指示 ITextExpression 是否需要编译。</summary>
      <returns>如果 ITextExpression 需要编辑，则为 True，否则为 false。</returns>
    </member>
    <member name="T:System.Activities.Expressions.LambdaReference`1">
      <summary>表示一个用作左值的 lambda 表达式，它支持绑定 <see cref="F:System.Activities.ArgumentDirection.Out" /> 参数。</summary>
      <typeparam name="T">表达式返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>初始化 <see cref="T:System.Activities.Expressions.LambdaReference`1" /> 类的新实例。</summary>
      <param name="locationExpression">表达式的值。</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>此方法始终返回 true，并与 <see cref="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> 结合使用以便在尝试将此活动序列化为 XAML 时提供描述性错误消息。</summary>
      <returns>此方法通常返回 true。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaReference`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>引发 <see cref="T:System.Activities.Expressions.LambdaSerializationException" />，并与 <see cref="M:System.Activities.Expressions.LambdaReference`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> 结合使用以便在尝试将此活动序列化为 XAML 时提供描述性错误消息。</summary>
      <returns>此方法在调用时会引发 <see cref="T:System.Activities.Expressions.LambdaSerializationException" />。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Activities.Expressions.LambdaSerializationException">
      <summary>尝试对 <see cref="T:System.Activities.Expressions.LambdaValue`1" /> 或 <see cref="T:System.Activities.Expressions.LambdaReference`1" /> 进行 XAML 序列化时引发的异常。</summary>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> 类的新实例。</summary>
      <param name="info">有关引发的异常的序列化对象数据。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaSerializationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Activities.Expressions.LambdaSerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Activities.Expressions.LambdaValue`1">
      <summary>表示一个用作右值的 lambda 表达式，它支持绑定 <see cref="F:System.Activities.ArgumentDirection.In" /> 参数。</summary>
      <typeparam name="TResult">表达式返回的值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>使用指定的表达式初始化 <see cref="T:System.Activities.Expressions.LambdaValue`1" /> 类的新实例。</summary>
      <param name="lambdaValue">表示 <see cref="T:System.Activities.Expressions.LambdaValue`1" /> 的值的 lambda 表达式。</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>此方法始终返回 true，并与 <see cref="M:System.Activities.Expressions.LambdaValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)" /> 结合使用以便在尝试将此活动序列化为 XAML 时提供描述性错误消息。</summary>
      <returns>此方法通常返回 true。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Activities.Expressions.LambdaValue`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>引发 <see cref="T:System.Activities.Expressions.LambdaSerializationException" />，并与 <see cref="M:System.Activities.Expressions.LambdaValue`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)" /> 结合使用以便在尝试将此活动序列化为 XAML 时提供描述性错误消息。</summary>
      <returns>在调用时引发 <see cref="T:System.Activities.Expressions.LambdaSerializationException" />。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Activities.Expressions.LessThan`3">
      <summary>在两个值之间执行关系测试。 如果左操作数小于右操作数，则表达式返回 true。 否则，该调用将返回 false。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LessThan`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.LessThan`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.LessThan`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.LessThan`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.LessThanOrEqual`3">
      <summary>在两个值之间执行关系测试。 如果左操作数小于或等于右操作数，则表达式返回 true。 否则，该调用将返回 false。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.LessThanOrEqual`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.LessThanOrEqual`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.LessThanOrEqual`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>表示左操作数的 <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.LessThanOrEqual`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>表示右操作数的 <see cref="F:System.Activities.Design.View.PropertyKind.InArgument" />。</returns>
    </member>
    <member name="T:System.Activities.Expressions.Literal`1">
      <summary>表示一个表达式活动，该活动返回指定类型的文本值。</summary>
      <typeparam name="T">值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Literal`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.#ctor(`0)">
      <summary>使用指定的值初始化 <see cref="T:System.Activities.Expressions.Literal`1" /> 类的新实例。</summary>
      <param name="value">表达式的文本值。</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>获取一个值，该值指示是否可将 <see cref="T:System.Activities.Expressions.Literal`1" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将该值转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Activities.Expressions.Literal`1" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>文本表达式。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ShouldSerializeValue">
      <summary>返回一个值，该值指示 <see cref="P:System.Activities.Expressions.Literal`1.Value" /> 属性是否已更改（不再是默认值）而且应进行序列化。</summary>
      <returns>如果应当将 <see cref="P:System.Activities.Expressions.Literal`1.Value" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Expressions.Literal`1.ToString">
      <summary>返回表示文本的值的 <see cref="T:System.String" />。</summary>
      <returns>文本的值的字符串表示形式。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Literal`1.Value">
      <summary>获取或设置文本表达式的值。</summary>
      <returns>文本表达式的值。</returns>
    </member>
    <member name="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1">
      <summary>表示多维数组中的一个元素，该元素可用作表达式中的左值。</summary>
      <typeparam name="TItem">数组中的元素类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.MultidimensionalArrayItemReference`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Array">
      <summary>获取或设置由 <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" /> 引用的数组。</summary>
      <returns>由 <see cref="T:System.Activities.Expressions.MultidimensionalArrayItemReference`1" /> 引用的数组。</returns>
    </member>
    <member name="P:System.Activities.Expressions.MultidimensionalArrayItemReference`1.Indices">
      <summary>获取一个参数集合，这些参数表示元素在数组中的索引。</summary>
      <returns>元素在数组中的索引。</returns>
    </member>
    <member name="T:System.Activities.Expressions.Multiply`3">
      <summary>计算两个值的积。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Multiply`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Multiply`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Checked">
      <summary>获取或设置一个值，该值指示乘运算是否在 checked 上下文中执行。</summary>
      <returns>如果乘法运算在所检查的上下文中执行，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Multiply`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.New`1">
      <summary>创建由 <paramref name="TResult" /> 类型所指定的类型的新实例。</summary>
      <typeparam name="TResult">所创建实例的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.New`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.New`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.New`1.Arguments">
      <summary>获取构造函数所需的参数。</summary>
      <returns>构造函数所需的参数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.NewArray`1">
      <summary>创建由 <paramref name="Tresult" /> 类型所指定的数组类型的新实例。</summary>
      <typeparam name="TResult">所创建实例的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.NewArray`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.NewArray`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.NewArray`1.Bounds">
      <summary>获取数组各个维度的界限。</summary>
      <returns>数组各个维度的界限。</returns>
    </member>
    <member name="T:System.Activities.Expressions.Not`2">
      <summary>计算值表达式的逻辑非。</summary>
      <typeparam name="TOperand">值表达式的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Not`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Not`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.Not`2.Operand">
      <summary>获取求反的值表达式。</summary>
      <returns>求反的值表达式。</returns>
    </member>
    <member name="T:System.Activities.Expressions.NotEqual`3">
      <summary>在两个值之间执行不相等性测试。 如果两个值不等，则表达式返回 true；否则返回 false。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.NotEqual`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.NotEqual`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.NotEqual`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.NotEqual`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.Or`3">
      <summary>计算两个值的按位逻辑 OR。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Or`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Or`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.Or`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Or`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.OrElse">
      <summary>计算两个值的逻辑 OR。 为此，两个操作数的计算结果均为布尔值。 如果两个操作数均为 false，则表达式将返回 false。 如果两个操作数或其中一个的计算结果为 true，则表达式将返回 true。</summary>
    </member>
    <member name="M:System.Activities.Expressions.OrElse.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.OrElse" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.OrElse.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>表示左操作数的 <see cref="T:System.Activities.Activity" />。</returns>
    </member>
    <member name="P:System.Activities.Expressions.OrElse.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>表示右操作数的 <see cref="T:System.Activities.Activity" />。</returns>
    </member>
    <member name="T:System.Activities.Expressions.PropertyReference`2">
      <summary>对属性的引用。</summary>
      <typeparam name="TOperand">操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.PropertyReference`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.PropertyReference`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.PropertyReference`2.Operand">
      <summary>获取或设置属性引用。</summary>
      <returns>属性引用。</returns>
    </member>
    <member name="P:System.Activities.Expressions.PropertyReference`2.PropertyName">
      <summary>获取或设置所引用的属性的名称。</summary>
      <returns>所引用的属性的名称。</returns>
    </member>
    <member name="T:System.Activities.Expressions.PropertyValue`2">
      <summary>属性值。</summary>
      <typeparam name="TOperand">操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.PropertyValue`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.PropertyValue`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.PropertyValue`2.Operand">
      <summary>获取或设置属性值。</summary>
      <returns>属性值。</returns>
    </member>
    <member name="P:System.Activities.Expressions.PropertyValue`2.PropertyName">
      <summary>获取或设置属性名称。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="T:System.Activities.Expressions.Subtract`3">
      <summary>计算两个值之间的差。</summary>
      <typeparam name="TLeft">左操作数的类型。</typeparam>
      <typeparam name="TRight">右操作数的类型。</typeparam>
      <typeparam name="TResult">结果的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.Subtract`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.Subtract`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Checked">
      <summary>获取或设置一个值，该值指示减运算是否在 checked 上下文中执行。</summary>
      <returns>如果减运算在所检查的上下文中执行，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Left">
      <summary>获取或设置左操作数。</summary>
      <returns>左操作数。</returns>
    </member>
    <member name="P:System.Activities.Expressions.Subtract`3.Right">
      <summary>获取或设置右操作数。</summary>
      <returns>右操作数。</returns>
    </member>
    <member name="T:System.Activities.Expressions.TextExpression">
      <summary>表示文本表达式。</summary>
    </member>
    <member name="P:System.Activities.Expressions.TextExpression.DefaultNamespaces">
      <summary>获取活动内部的默认命名空间。</summary>
      <returns>活动内部的默认命名空间。</returns>
    </member>
    <member name="P:System.Activities.Expressions.TextExpression.DefaultReferences">
      <summary>获取活动内部的默认引用。</summary>
      <returns>活动内部的默认引用。</returns>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetNamespaces(System.Object)">
      <summary>获取文本表达式中使用的命名空间的集合。</summary>
      <returns>命名空间的集合。</returns>
      <param name="target">目标。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetNamespacesForImplementation(System.Object)">
      <summary>获取文本表达式实现的命名空间的集合。</summary>
      <returns>命名空间的集合。</returns>
      <param name="target">目标。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetNamespacesInScope(System.Activities.Activity)">
      <summary>获取范围中使用的命名空间。</summary>
      <returns>在范围内使用的命名空间。</returns>
      <param name="activity">范围的活动。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetReferences(System.Object)">
      <summary>获取用于文本表达式的引用的列表。</summary>
      <returns>所使用引用的列表。</returns>
      <param name="target">目标。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetReferencesForImplementation(System.Object)">
      <summary>获取用于实现文本表达式的引用的列表。</summary>
      <returns>所使用引用的列表。</returns>
      <param name="target">目标。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.GetReferencesInScope(System.Activities.Activity)">
      <summary>获取范围中使用的引用。</summary>
      <returns>在范围内使用的引用。</returns>
      <param name="activity">范围的活动。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetNamespaces(System.Object,System.Collections.Generic.IList{System.String})">
      <summary>为有指定的目标和命名空间的文本表示形式设置命名空间。</summary>
      <param name="target">目标。</param>
      <param name="namespaces">命名空间的泛型列表。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetNamespaces(System.Object,System.String[])">
      <summary>为有指定的目标和命名空间的文本表示形式设置命名空间。</summary>
      <param name="target">目标。</param>
      <param name="namespaces">命名空间的数组。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetNamespacesForImplementation(System.Object,System.Collections.Generic.IList{System.String})">
      <summary>表示对象，以使用指定的目标和命名空间对文本表达式的实施设置命名空间。</summary>
      <param name="target">目标。</param>
      <param name="namespaces">命名空间的列表。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetNamespacesForImplementation(System.Object,System.String[])">
      <summary>表示对象，以使用指定的目标和命名空间对文本表达式的实施设置命名空间。</summary>
      <param name="target">目标。</param>
      <param name="namespaces">命名空间的集合。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetReferences(System.Object,System.Activities.Expressions.AssemblyReference[])">
      <summary>表示对象，以使用指定的目标和参考对文本表达式设置参考。</summary>
      <param name="target">目标。</param>
      <param name="references">引用的集合</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetReferences(System.Object,System.Collections.Generic.IList{System.Activities.Expressions.AssemblyReference})">
      <summary>表示对象，以使用指定的目标和参考对文本表达式设置参考。</summary>
      <param name="target">目标。</param>
      <param name="references">引用的泛型列表。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetReferencesForImplementation(System.Object,System.Activities.Expressions.AssemblyReference[])">
      <summary>表示对象，以使用指定的目标和参考对文本表达式的实施设置参考。</summary>
      <param name="target">目标。</param>
      <param name="references">程序集引用的集合。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.SetReferencesForImplementation(System.Object,System.Collections.Generic.IList{System.Activities.Expressions.AssemblyReference})">
      <summary>表示对象，以使用指定的目标和参考对文本表达式的实施设置参考。</summary>
      <param name="target">目标。</param>
      <param name="references">程序集引用的泛型列表。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.ShouldSerializeNamespaces(System.Object)">
      <summary>表示一个值，该值指示该对象是否应序列化命名空间。</summary>
      <returns>如果对象应序列化命名空间，则为 True；否则为 false。</returns>
      <param name="target">目标对象。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.ShouldSerializeNamespacesForImplementation(System.Object)">
      <summary>表示一个值，该值指示该目标是否应序列化命名空间以实施。</summary>
      <returns>如果目标序列化实现的命名空间，则为 True；否则为 false。</returns>
      <param name="target">目标对象。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.ShouldSerializeReferences(System.Object)">
      <summary>表示一个值，该值指示该对象是否应序列化参考。</summary>
      <returns>如果对象应序列化引用，则为 True；否则为 false。</returns>
      <param name="target">目标对象。</param>
    </member>
    <member name="M:System.Activities.Expressions.TextExpression.ShouldSerializeReferencesForImplementation(System.Object)">
      <summary>表示一个值，该值指示该文本表达式是否应序列化命名空间以实施。</summary>
      <returns>如果文本表达式实现的命名空间，则为 True；否则为 false。</returns>
      <param name="target">目标对象。</param>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypeFieldReference`2">
      <summary>表示值类型上的一个字段，该字段可用作表达式中的左值。</summary>
      <typeparam name="TOperand">值类型。</typeparam>
      <typeparam name="TResult">字段类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypeFieldReference`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.ValueTypeFieldReference`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeFieldReference`2.FieldName">
      <summary>获取或设置字段的名称。</summary>
      <returns>字段名。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeFieldReference`2.OperandLocation">
      <summary>获取或设置包含字段的值类型的实例。</summary>
      <returns>包含字段的值类型的实例。</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypeIndexerReference`2">
      <summary>表示由值类型上的索引器引用的一个元素，该元素可用作表达式中的左值。</summary>
      <typeparam name="TOperand">带有索引器的值类型。</typeparam>
      <typeparam name="TItem">索引器数组的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypeIndexerReference`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.ValueTypeIndexerReference`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeIndexerReference`2.Indices">
      <summary>获取一个参数集合，这些参数表示元素在索引器数组中的索引。</summary>
      <returns>元素在索引器数组中的索引。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypeIndexerReference`2.OperandLocation">
      <summary>获取或设置包含索引器的值类型的实例。</summary>
      <returns>包含索引器的值类型的实例。</returns>
    </member>
    <member name="T:System.Activities.Expressions.ValueTypePropertyReference`2">
      <summary>表示值类型上的一个属性，该属性可用作表达式中的左值。</summary>
      <typeparam name="TOperand">值类型。</typeparam>
      <typeparam name="TResult">属性类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.ValueTypePropertyReference`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.ValueTypePropertyReference`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypePropertyReference`2.OperandLocation">
      <summary>获取或设置包含属性的值类型的实例。</summary>
      <returns>包含属性的值类型的实例。</returns>
    </member>
    <member name="P:System.Activities.Expressions.ValueTypePropertyReference`2.PropertyName">
      <summary>获取或设置属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="T:System.Activities.Expressions.VariableReference`1">
      <summary>Represents a <see cref="T:System.Activities.Variable" /> used as an l-value in an expression.</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.Expressions.VariableReference`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.VariableReference`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.#ctor(System.Activities.Variable)">
      <summary>使用指定的变量初始化 <see cref="T:System.Activities.Expressions.VariableReference`1" /> 类的新实例。</summary>
      <param name="variable">表达式的值。</param>
    </member>
    <member name="P:System.Activities.Expressions.VariableReference`1.LocationReference">
      <summary>获取 <see cref="T:System.Activities.Expressions.VariableReference`1" /> 引用程序集的变量。</summary>
      <returns>变量引用。</returns>
    </member>
    <member name="M:System.Activities.Expressions.VariableReference`1.ToString">
      <summary>返回 <see cref="T:System.Activities.Expressions.VariableReference`1" /> 的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>变量引用。</returns>
    </member>
    <member name="P:System.Activities.Expressions.VariableReference`1.Variable">
      <summary>获取或设置由 <see cref="T:System.Activities.Expressions.VariableReference`1" /> 表示的 <see cref="T:System.Activities.Variable" />。</summary>
      <returns>变量。</returns>
    </member>
    <member name="T:System.Activities.Expressions.VariableValue`1">
      <summary>表示用作表达式中的右值的 <see cref="T:System.Activities.Variable" />。</summary>
      <typeparam name="T">
        <see cref="T:System.Activities.Expressions.VariableValue`1" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Expressions.VariableValue`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.#ctor(System.Activities.Variable)">
      <summary>使用指定的变量初始化 <see cref="T:System.Activities.Expressions.VariableValue`1" /> 类的新实例。</summary>
      <param name="variable">表达式的值。</param>
    </member>
    <member name="P:System.Activities.Expressions.VariableValue`1.LocationReference">
      <summary>获取 <see cref="T:System.Activities.Expressions.VariableValue`1" /> 引用程序集的位置。</summary>
      <returns>位置引用。</returns>
    </member>
    <member name="M:System.Activities.Expressions.VariableValue`1.ToString">
      <summary>返回 <see cref="T:System.Activities.Expressions.VariableValue`1" /> 的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>变量的值。</returns>
    </member>
    <member name="P:System.Activities.Expressions.VariableValue`1.Variable">
      <summary>获取或设置由 <see cref="T:System.Activities.Expressions.VariableValue`1" /> 表示的 <see cref="T:System.Activities.Variable" />。</summary>
      <returns>变量。</returns>
    </member>
    <member name="T:System.Activities.Hosting.BookmarkInfo">
      <summary>表示有关命名 <see cref="T:System.Activities.Bookmark" /> 的信息。</summary>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.BookmarkName">
      <summary>获取与 <see cref="T:System.Activities.Bookmark" /> 关联的名称。</summary>
      <returns>与 <see cref="T:System.Activities.Bookmark" /> 关联的名称。</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.OwnerDisplayName">
      <summary>获取一个可选友好名称，该名称用于调试、验证、异常处理以及跟踪。</summary>
      <returns>用于调试、验证、异常处理和跟踪的友好名称。</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkInfo.ScopeInfo">
      <summary>获取与 <see cref="T:System.Activities.Bookmark" /> 关联的 <see cref="T:System.Activities.BookmarkScope" /> 的 <see cref="T:System.Activities.Hosting.BookmarkScopeInfo" />。</summary>
      <returns>与 <see cref="T:System.Activities.Bookmark" /> 关联的 <see cref="T:System.Activities.BookmarkScope" /> 的书签范围信息。</returns>
    </member>
    <member name="T:System.Activities.Hosting.BookmarkScopeInfo">
      <summary>包含有关 <see cref="T:System.Activities.BookmarkScope" /> 对象的标识和初始化信息。</summary>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.Id">
      <summary>获取 <see cref="T:System.Activities.BookmarkScope" /> 的唯一标识符。</summary>
      <returns>
        <see cref="T:System.Activities.BookmarkScope" /> 的唯一标识符。</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.IsInitialized">
      <summary>获取一个值，该值指示 <see cref="T:System.Activities.BookmarkScope" /> 是否已初始化。</summary>
      <returns>如果 <see cref="T:System.Activities.BookmarkScope" />已被初始化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Hosting.BookmarkScopeInfo.TemporaryId">
      <summary>获取一个值，该值在 <see cref="T:System.Activities.BookmarkScope" /> 处于未初始化状态时唯一标识 <see cref="T:System.Activities.BookmarkScope" />。</summary>
      <returns>一个值，该值在 <see cref="T:System.Activities.BookmarkScope" /> 处于未初始化状态时唯一标识 <see cref="T:System.Activities.BookmarkScope" />。</returns>
    </member>
    <member name="T:System.Activities.Hosting.IWorkflowInstanceExtension">
      <summary>此接口由复合扩展或需要访问工作流实例的扩展实现。 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 将在执行之前调用此接口的实现者，以便提供附加扩展，或通过 <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy" /> 访问 <see cref="T:System.Activities.Hosting.WorkflowInstance" />。</summary>
    </member>
    <member name="M:System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions">
      <summary>在实现时，返回实现类所需的任何附加扩展。</summary>
      <returns>一个附加工作流扩展的集合。</returns>
    </member>
    <member name="M:System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>设置指定的目标 <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy" />。</summary>
      <param name="instance">要设置的目标工作流实例。</param>
    </member>
    <member name="T:System.Activities.Hosting.LocationInfo">
      <summary>提供有关相关 <see cref="T:System.Activities.Location" /> 的信息。</summary>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.Name">
      <summary>获取一个 <see cref="T:System.String" /> 值，该值标识相关 <see cref="T:System.Activities.Location" />。</summary>
      <returns>相关位置。</returns>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.OwnerDisplayName">
      <summary>获取一个可选友好名称，该名称用于调试、验证、异常处理以及跟踪。</summary>
      <returns>一个可选友好名称，该名称用于调试、验证、异常处理以及跟踪。</returns>
    </member>
    <member name="P:System.Activities.Hosting.LocationInfo.Value">
      <summary>获取存储在相关 <see cref="T:System.Activities.Location" /> 处的值。</summary>
      <returns>存储在相关 <see cref="T:System.Activities.Location" /> 处的值。</returns>
    </member>
    <member name="T:System.Activities.Hosting.SymbolResolver">
      <summary>
        <see cref="T:System.Activities.Hosting.SymbolResolver" /> 是一种用于提供宿主 <see cref="T:System.Activities.LocationReferenceEnvironment" />（包含可通过字符串名称取消引用的对象）的扩展。不会保留通过 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 提供的值。宿主负责保留 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 值。</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>使用指定的键/值对添加符号。</summary>
      <param name="item">要添加的符号。</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object)">
      <summary>使用指定的符号名称和值添加符号。</summary>
      <param name="key">符号的名称。</param>
      <param name="value">要引用的符号的值。</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object,System.Type)">
      <summary>使用指定的符号名称、值和类型添加符号。</summary>
      <param name="key">符号的名称。</param>
      <param name="value">要引用的符号的值。</param>
      <param name="type">符号值的类型。</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Add(System.String,System.Type)">
      <summary>使用指定的符号名称和类型添加符号。</summary>
      <param name="key">符号的名称。</param>
      <param name="type">符号值的类型。</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment">
      <summary>返回 <see cref="T:System.Activities.LocationReferenceEnvironment" /> 实例，利用该实例可访问 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中以 <see cref="T:System.Activities.LocationReference" /> 对象形式表示的符号值引用。</summary>
      <returns>一个位置引用，利用它可以访问 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中以 <see cref="T:System.Activities.LocationReference" /> 对象形式表示的符号值引用。</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Clear">
      <summary>从 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中移除所有符号。</summary>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>返回一个值，该值指示 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 是否包含指定的符号。</summary>
      <returns>如果 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 包含指定的符号，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中查找的键/值对形式的符号。</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.ContainsKey(System.String)">
      <summary>返回一个值，该值指示 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 是否包含具有指定键的符号。</summary>
      <returns>如果 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 包含具有指定键的符号，则为 true；否则为 false。</returns>
      <param name="key">要查找的符号的键。</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>将 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中的符号复制到现有的键/值对一维数组，从指定的数组索引处开始。</summary>
      <param name="array">要将符号复制到其中的键/值对一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">目标数组中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Count">
      <summary>获取 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中包含的符号数。</summary>
      <returns>
        <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中包含的符号数。</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.GetEnumerator">
      <summary>返回一个循环访问键/值对集合的枚举器，其中键为符号名称，值为符号值。</summary>
      <returns>一个循环访问键/值对集合的枚举器。</returns>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中由符号组成的字典是否为只读。</summary>
      <returns>false.</returns>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Item(System.String)">
      <summary>获取或设置与指定键关联的项的值。</summary>
      <returns>与指定键关联的项的值。</returns>
      <param name="key">项的键。</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Keys">
      <summary>获取 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中的所有键的集合。</summary>
      <returns>
        <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中所有键的集合。</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中移除指定的符号。</summary>
      <returns>如果成功找到并移除该符号，则为 true；否则为 false。 如果符号不存在，则此方法返回 false。</returns>
      <param name="item">要移除的符号。</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.Remove(System.String)">
      <summary>使用指定的键从 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中移除符号。</summary>
      <returns>如果成功找到并移除该符号，则为 true；否则为 false。 如果符号不存在，则此方法返回 false。</returns>
      <param name="key">要移除的符号的键。</param>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问键/值对集合的枚举器，其中键为符号名称，值为符号值。</summary>
      <returns>一个循环访问键/值对集合的枚举器。</returns>
    </member>
    <member name="M:System.Activities.Hosting.SymbolResolver.TryGetValue(System.String,System.Object@)">
      <summary>获取与指定的键相关联的值。</summary>
      <returns>如果 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定的键，则包含与该关联的值；否则包含值参数的类型默认值。 该参数未经初始化即被传递。</param>
    </member>
    <member name="P:System.Activities.Hosting.SymbolResolver.Values">
      <summary>获取 <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中的所有值的集合。</summary>
      <returns>
        <see cref="T:System.Activities.Hosting.SymbolResolver" /> 中所有值的集合。</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstance">
      <summary>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 是一种基于实例的轻量运行时，用于执行工作流程序。 可以构造它来创建新工作流实例，或依据现有实例状态来创建它。 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />公开的 API 是最小运行时控件集，可依据这些控件来实现更高级别的操作。 此 API 集表示运行时的整个范围的功能。 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 是一个抽象类，并依赖于宿主对其抽象方法的实现，以便提供诸如同步、保留、跟踪和扩展等宿主功能。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)">
      <summary>使用指定的工作流定义初始化 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 类的新实例。</summary>
      <param name="workflowDefinition">对工作流加以定义的活动。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
      <summary>使用指定的工作流定义和定义标识来初始化 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 类的新实例。</summary>
      <param name="workflowDefinition">对工作流加以定义的活动。</param>
      <param name="definitionIdentity">定义标识。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>由工作流运行时调用，用于开始将挂起的跟踪记录以异步方式发送给跟踪参与者。</summary>
      <returns>当前跟踪操作的状态。</returns>
      <param name="timeout">时间段，在该时间段后将中止尝试。</param>
      <param name="callback">要在跟踪操作完成时调用的方法。</param>
      <param name="state">有关异步操作的信息。</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.Controller">
      <summary>获取此 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> 实例。</summary>
      <returns>此工作流实例的控制器实例。</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.DefinitionIdentity">
      <summary>获取或设置 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的定义标识。</summary>
      <returns>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的定义标识。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.DisposeExtensions">
      <summary>对实现 <see cref="T:System.IDisposable" /> 的所有扩展调用 <see cref="M:System.Disposable.Dispose" />。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(System.IAsyncResult)">
      <summary>由工作流运行时调用，用于结束跟踪操作。</summary>
      <param name="result">异步跟踪操作的状态。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(System.TimeSpan)">
      <summary>由工作流运行时调用，用于将挂起的跟踪记录发送给跟踪参与者。</summary>
      <param name="timeout">时间段，在该时间段后将中止尝试。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>检索阻塞工作流更新的活动列表。</summary>
      <returns>正在禁止更新的活动列表。</returns>
      <param name="deserializedRuntimeState">反序列化的运行时状态。</param>
      <param name="updateMap">更新映射。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtension``1">
      <summary>返回指定类型的扩展。</summary>
      <returns>指定类型的扩展。</returns>
      <typeparam name="T">要查找的扩展的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.GetExtensions``1">
      <summary>返回针对指定类型找到的所有扩展。</summary>
      <returns>针对指定类型找到的所有扩展。</returns>
      <typeparam name="T">要查找的扩展的类型。</typeparam>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.HostEnvironment">
      <summary>获取或设置工作流实例的参数和变量的根环境。</summary>
      <returns>工作流实例的参数和变量的根环境。</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.Id">
      <summary>获取工作流实例的唯一标识符。</summary>
      <returns>工作流实例的唯一标识符。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})">
      <summary>由宿主调用，用于使用参数值和执行属性初始化工作流实例。</summary>
      <param name="workflowArgumentValues">工作流的输入参数，由参数名进行键控。</param>
      <param name="workflowExecutionProperties">工作流执行属性的列表。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)">
      <summary>由宿主调用，用于使用工作流运行时状态初始化工作流实例。</summary>
      <param name="deserializedRuntimeState">用于执行工作流的运行时状态。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>由宿主调用，用于使用工作流运行时状态和更新映射初始化工作流实例。</summary>
      <param name="deserializedRuntimeState">用于执行工作流的运行时状态。</param>
      <param name="updateMap">更新映射。</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly">
      <summary>获取一个值，该值指示工作流实例是否已初始化。</summary>
      <returns>如果该工作流实例已初始化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)">
      <summary>由工作流运行时调用，用于通知宿主新的实例键应与此实例关联。</summary>
      <returns>对异步关联键操作的引用。</returns>
      <param name="keys">要与此工作流实例关联的实例键。</param>
      <param name="callback">要在操作完成时调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)">
      <summary>异步调用，用于要求主机针对跟踪参与者刷新挂起的跟踪记录。</summary>
      <returns>当前跟踪操作的状态。</returns>
      <param name="callback">要在跟踪操作完成时调用的方法。</param>
      <param name="state">有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)">
      <summary>要求宿主保留工作流的异步调用。</summary>
      <returns>对当前保留操作的引用。</returns>
      <param name="callback">要在保留操作完成时调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>由工作流运行时调用，用于通知宿主恢复书签操作已开始。</summary>
      <returns>对异步恢复操作的引用。</returns>
      <param name="bookmark">要恢复的书签。</param>
      <param name="value">要传递给创建 <see cref="T:System.Activities.Bookmark" /> 的活动的数据。</param>
      <param name="timeout">必须在此时间内完成恢复操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在恢复操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})">
      <summary>由工作流运行时调用，用于通知宿主某些实例键集不应再与此实例关联。</summary>
      <param name="keys">要取消关联的键的列表。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)">
      <summary>由工作流运行时调用，用于通知宿主关联键操作已完成。</summary>
      <param name="result">对异步关联键操作的引用。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)">
      <summary>由工作流运行时调用，用于在刷新跟踪记录操作完成时通知宿主。</summary>
      <param name="result">异步刷新跟踪记录操作的状态。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)">
      <summary>由工作流运行时调用，用于通知宿主保留操作已完成。</summary>
      <param name="result">对异步保留操作的引用。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)">
      <summary>由工作流运行时调用，用于通知宿主恢复书签操作已完成。</summary>
      <returns>指示 <see cref="T:System.Activities.Bookmark" /> 恢复操作结果的枚举值之一。</returns>
      <param name="result">对异步恢复书签操作的引用。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused">
      <summary>由工作流运行时调用，用于通知宿主工作流已从“正在运行”状态转换为“已暂停”状态。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)">
      <summary>由工作流运行时调用，用于通知宿主工作流实例中发生了未经处理的异常。</summary>
      <param name="exception">未处理的异常。</param>
      <param name="source">引发异常的活动。</param>
      <param name="sourceInstanceId">
        <see cref="T:System.Activities.ActivityInstance" /> 的唯一标识符，表示引发异常的活动。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)">
      <summary>由工作流运行时调用，用于通知宿主已请求对工作流实例进行中止操作。</summary>
      <param name="reason">中止工作流实例的原因。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)">
      <summary>由宿主调用，用于注册指定的扩展管理器、验证所有必需的扩展是否存在，以及初始化要使用的扩展的集合。</summary>
      <param name="extensionManager">要注册的扩展管理器。</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys">
      <summary>获取一个值，该值指示宿主是否支持 <see cref="P:System.Runtime.Persistence.InstanceView.InstanceKeys" /> 与运行时实例的关联。</summary>
      <returns>如果宿主支持 <see cref="P:System.Runtime.Persistence.InstanceView.InstanceKeys" /> 与工作流实例的关联，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.SynchronizationContext">
      <summary>获取或设置用于调度工作流实例的 <see cref="T:System.Threading.SynchronizationContext" />。</summary>
      <returns>用于调度工作流实例的同步上下文。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly">
      <summary>如果工作流实例已初始化，则引发 <see cref="T:System.InvalidOperationException" />（由 <see cref="P:System.Activities.Hosting.WorkflowInstance.IsReadOnly" /> 确定）。</summary>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowDefinition">
      <summary>获取工作流实例的工作流定义。</summary>
      <returns>工作流实例的工作流定义。</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl">
      <summary>提供 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 派生类的方法，用于访问工作流运行时的功能。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort">
      <summary>中止 <see cref="T:System.Activities.Hosting.WorkflowInstance" />。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort(System.Exception)">
      <summary>使用指定的异常中止 <see cref="T:System.Activities.Hosting.WorkflowInstance" />。</summary>
      <param name="reason">中止 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的原因。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>由工作流运行时调用，用于开始将挂起的跟踪记录以异步方式发送给跟踪参与者。</summary>
      <returns>当前跟踪操作的状态。</returns>
      <param name="timeout">时间段，在该时间段后将中止尝试。</param>
      <param name="callback">要在跟踪操作完成时调用的方法。</param>
      <param name="state">有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.EndFlushTrackingRecords(System.IAsyncResult)">
      <summary>由工作流运行时调用，用于结束跟踪操作。</summary>
      <param name="result">异步跟踪操作的状态。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> 是否与指定对象相等。</summary>
      <returns>如果该对象与当前的 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />  相同，则为 true；否则为 false 。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.FlushTrackingRecords(System.TimeSpan)">
      <summary>由工作流运行时调用，用于将挂起的跟踪记录发送给跟踪参与者。</summary>
      <param name="timeout">时间段，在该时间段后将中止尝试。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetAbortReason">
      <summary>返回导致 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 中止的异常。</summary>
      <returns>导致 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 中止的异常，或者如果  <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 未中止为 null。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks">
      <summary>返回 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的可用书签的集合。</summary>
      <returns>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的书签的集合。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetBookmarks(System.Activities.BookmarkScope)">
      <summary>返回在指定 <see cref="T:System.Activities.BookmarkScope" /> 中创建的 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的可用书签的集合。</summary>
      <returns>在指定 <see cref="T:System.Activities.BookmarkScope" /> 中创建的书签的集合。</returns>
      <param name="scope">要检查的书签范围。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState">
      <summary>返回 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的最终 <see cref="T:System.Activities.ActivityInstanceState" />。</summary>
      <returns>描述活动实例的状态的枚举成员之一。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Exception@)">
      <summary>返回 <see cref="T:System.Activities.Hosting.WorkflowInstance" />（包括工作流输出和终止异常）的最终 <see cref="T:System.Activities.ActivityInstanceState" />。</summary>
      <returns>描述活动实例的状态的枚举成员之一。</returns>
      <param name="outputs">此方法返回时，<paramref name="outputs" /> 包含由工作流的 <see cref="F:System.Activities.ArgumentDirection.Out" /> 参数组成的字典，由参数名称进行键控。 该参数未经初始化即被传递。</param>
      <param name="terminationException">此方法返回时，<paramref name="terminationException" /> 包含导致 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 终止的异常，或者，如果 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 未终止，则为 null 。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetCompletionState(System.Exception@)">
      <summary>返回 <see cref="T:System.Activities.Hosting.WorkflowInstance" />（包括终止异常）的最终 <see cref="T:System.Activities.ActivityInstanceState" />。</summary>
      <returns>描述活动实例的状态的枚举成员之一。</returns>
      <param name="terminationException">此方法返回时，<paramref name="terminationException" /> 包含导致 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 终止的异常，或者，如果 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 未终止，则为 null 。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetHashCode">
      <summary>返回该 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> 的哈希代码。</summary>
      <returns>此 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.GetMappedVariables">
      <summary>返回由当前范围中的变量组成的字典，已使用 <see cref="F:System.Activities.VariableModifiers.Mapped" /> 指定了这些变量。</summary>
      <returns>由当前位于范围中的已映射变量组成的字典。</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.HasPendingTrackingRecords">
      <summary>由工作流运行时调用，用于确定此工作流实例是否具有挂起的跟踪记录和跟踪参与者。</summary>
      <returns>如果此工作流实例具有挂起的跟踪记录和跟踪参与者，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.IsPersistable">
      <summary>获取一个值，该值指示 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 是否处于可保持的状态。</summary>
      <returns>如果可以保留 <see cref="T:System.Activities.Hosting.WorkflowInstance" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Equality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> 实例是否相等。</summary>
      <returns>如果两个 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> 实例相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />。</param>
      <param name="right">要比较的第二个 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.op_Inequality(System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl,System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl)">
      <summary>返回一个值，该值指示 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> 的两个实例是否相等。</summary>
      <returns>如果这两个 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" /> 实例不相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />。</param>
      <param name="right">要比较的第二个 <see cref="T:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl" />。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable">
      <summary>请求工作流运行时在能够进行保持的下一个执行点暂停 <see cref="T:System.Activities.Hosting.WorkflowInstance" />。 请注意，此执行点的计划程序队列不能为空。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PrepareForSerialization">
      <summary>准备 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 状态来进行序列化。</summary>
      <returns>工作流实例状态。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause">
      <summary>请求计划程序停止。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run">
      <summary>指示 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 开始执行。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object)">
      <summary>使用指定值安排书签恢复。</summary>
      <returns>用于指示 <see cref="T:System.Activities.Bookmark" /> 计划操作结果的枚举值之一。</returns>
      <param name="bookmark">要恢复的书签。</param>
      <param name="value">要传递给创建 <see cref="T:System.Activities.Bookmark" /> 的活动的数据。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleBookmarkResumption(System.Activities.Bookmark,System.Object,System.Activities.BookmarkScope)">
      <summary>从指定的 <see cref="T:System.Activities.BookmarkScope" /> 中安排 <see cref="T:System.Activities.Bookmark" /> 恢复。</summary>
      <returns>用于指示 <see cref="T:System.Activities.Bookmark" /> 计划操作结果的枚举值之一。</returns>
      <param name="bookmark">要恢复的书签。</param>
      <param name="value">要传递给创建 <see cref="T:System.Activities.Bookmark" /> 的活动的数据。</param>
      <param name="scope">创建 <see cref="T:System.Activities.Bookmark" /> 所依据的 <see cref="T:System.Activities.Bookmark" />。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.ScheduleCancel">
      <summary>安排 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的取消。</summary>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State">
      <summary>获取 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的状态。</summary>
      <returns>用于指定 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 状态的枚举值之一。</returns>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Terminate(System.Exception)">
      <summary>使用指定的异常将 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 转换为最终 <see cref="F:System.Activities.ActivityInstanceState.Faulted" /> 状态。</summary>
      <param name="reason">导致终止 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的异常。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Track(System.Activities.Tracking.WorkflowInstanceRecord)">
      <summary>由工作流运行时调用，用于将指定的挂起记录添加到挂起记录的列表。</summary>
      <param name="instanceRecord">要添加的跟踪记录。</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.TrackingEnabled">
      <summary>由工作流运行时调用，用于确定是否在此工作流实例中启用了跟踪。</summary>
      <returns>如果在此工作流实例中启用了跟踪，则为 true；否则，为 false。</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceExtensionManager">
      <summary>管理 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的扩展的集合。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add``1(System.Func{``0})">
      <summary>注册 <see cref="T:System.Func`1" />，其用于提供扩展实例（在通过工作流实例注册时）。</summary>
      <param name="extensionCreationFunction">创建扩展的方法。</param>
      <typeparam name="T">要添加的扩展的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add(System.Object)">
      <summary>将指定的扩展添加到扩展的集合。</summary>
      <param name="singletonExtension">要添加的扩展。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceExtensionManager.MakeReadOnly">
      <summary>将扩展的集合标记为只读。</summary>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceProxy">
      <summary>一个允许 <see cref="T:System.Activities.Hosting.IWorkflowInstanceExtensions" /> 扩展访问工作流服务宿主的类。</summary>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
      <summary>使用指定的书签、值、回调方法和用户提供的状态数据，以异步方式从书签中恢复工作流。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="bookmark">书签。</param>
      <param name="value">要传递到创建了书签的活动的数据。</param>
      <param name="callback">要在异步恢复操作完成时调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>使用指定的书签、值、超时间隔、回调方法和用户提供的状态，以异步方式从书签中恢复工作流。</summary>
      <returns>对异步操作的引用。</returns>
      <param name="bookmark">书签。</param>
      <param name="value">要传递到创建了书签的活动的数据。</param>
      <param name="timeout">必须在此时间内完成恢复操作的时间间隔，否则，将取消该操作并引发 <see cref="T:System.TimeoutException" />。</param>
      <param name="callback">要在恢复操作完成后调用的方法。</param>
      <param name="state">一个可选的应用程序特定的对象，包含有关异步操作的信息。</param>
    </member>
    <member name="M:System.Activities.Hosting.WorkflowInstanceProxy.EndResumeBookmark(System.IAsyncResult)">
      <summary>等待挂起的异步 <see cref="Overload:System.Activities.Hosting.WorkflowInstanceProxy.BeginResumeBookmark" /> 完成。</summary>
      <returns>返回 <see cref="T:System.Activities.BookmarkResumptionResult" />。</returns>
      <param name="result">引用恢复操作的 <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstanceProxy.Id">
      <summary>获取工作流实例 ID。</summary>
      <returns>工作流实例 ID。</returns>
    </member>
    <member name="P:System.Activities.Hosting.WorkflowInstanceProxy.WorkflowDefinition">
      <summary>获取工作流定义。</summary>
      <returns>工作流定义。</returns>
    </member>
    <member name="T:System.Activities.Hosting.WorkflowInstanceState">
      <summary>指定 <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 的状态。</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Aborted">
      <summary>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 已中止。</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Complete">
      <summary>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 已完成。</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Idle">
      <summary>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 处于空闲状态。</summary>
    </member>
    <member name="F:System.Activities.Hosting.WorkflowInstanceState.Runnable">
      <summary>
        <see cref="T:System.Activities.Hosting.WorkflowInstance" /> 可运行。</summary>
    </member>
    <member name="T:System.Activities.Persistence.PersistenceIOParticipant">
      <summary>
        <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 类的派生类，其中的方法除通过持久性进程保留和加载工作流实例外，还执行输入和输出操作。</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> 类的实例。</summary>
      <param name="isSaveTransactionRequired">如果保存操作需要事务，则为 true。 如果在此参数设置为 true 的情况下创建了 <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> 对象，则在调用 BeginOnSave 时必定会设置 Transaction.Current。 事务将在持久性提供程序、所有 PersistenceIOParticipant 扩展并可能在其他事务参与者之间共享。</param>
      <param name="isLoadTransactionRequired">如果加载操作需要事务，则为 true。 如果在此参数设置为 true 的情况下创建了 <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> 对象，则在调用 BeginOnLoad 时必定会设置 Transaction.Current。 事务将在持久性提供程序、所有 PersistenceIOParticipant 扩展并可能在其他事务参与者之间共享。</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.Abort">
      <summary>中止挂起的 IO（加载或保存）操作。</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnLoad(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，以便连同正在从实例存储中加载的实例一起加载附加状态。</summary>
      <returns>异步操作的状态。</returns>
      <param name="readWriteValues">由持久性提供程序所加载的读/写值组成的字典。 这对应于在此实例最近的持久性段中传递到 BeginOnSave 的读/写值集。</param>
      <param name="timeout">时间跨度，操作应在该时间跨度内完成而不超时。</param>
      <param name="callback">可接收异步加载操作完成通知的异步回调委托。</param>
      <param name="state">与异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作，以便连同正在保留到实例存储中的实例一起保存附加状态。</summary>
      <returns>异步操作的状态。</returns>
      <param name="readWriteValues">由 CollectValues 和 MapValues 阶段中收集的读/写值组成的字典。</param>
      <param name="writeOnlyValues">由 CollectValues 和 MapValues 阶段中收集的只写值组成的字典。</param>
      <param name="timeout">时间跨度，操作应在该时间跨度内完成而不超时。</param>
      <param name="callback">可接收异步操作完成通知的异步回调接收委托。</param>
      <param name="state">与异步操作关联的状态信息。</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnLoad(System.IAsyncResult)">
      <summary>完成异步加载操作。</summary>
      <param name="result">对 <see cref="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法的调用所返回的异步结果。</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceIOParticipant.EndOnSave(System.IAsyncResult)">
      <summary>完成异步保存操作。</summary>
      <param name="result">对 <see cref="M:System.Activities.Persistence.PersistenceIOParticipant.BeginOnSave(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法的调用所返回的异步结果。</param>
    </member>
    <member name="T:System.Activities.Persistence.PersistenceParticipant">
      <summary>此类允许 <see cref="T:System.Activities.WorkflowApplication" /> 和 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 均参与保留过程。 持久性参与者派生自 <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 类或 <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> 类（<see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 类的派生类），实现抽象方法，然后添加类的实例作为工作流实例扩展。 <see cref="T:System.Activities.WorkflowApplication" /> 和 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 在保留实例时查找此类扩展，并在适当的时间调用适当的方法。</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 类的实例。</summary>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)">
      <summary>宿主对自定义持久性参与者调用此方法，以收集要保留的读/写值和只写值。</summary>
      <param name="readWriteValues">要保持的读/写值。</param>
      <param name="writeOnlyValues">要保持的只写值。</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>当宿主完成在第一个阶段中收集值的工作后，将调用此方法。 宿主会将由其在第一个阶段（CollectValues 阶段）中从所有持久性参与者中收集的值组成的两个只读字典转发给此方法用于映射。 宿主会将此方法的返回的字典中的值添加到只写值的集合。</summary>
      <returns>包含要保留的附加只写值的字典。</returns>
      <param name="readWriteValues">要保持的读/写值。</param>
      <param name="writeOnlyValues">要保持的只写值。</param>
    </member>
    <member name="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>宿主调用此方法，并传递 <see cref="P:System.Activities.Persistence.SaveWorkflowCommand.InstanceData" /> 集合中所有加载的值（由 <see cref="T:System.Activities.Persistence.LoadWorkflowCommand" /> 或 <see cref="T:System.Activities.Persistence.LoadWorkflowByInstanceKeyCommand" /> 填充）作为字典参数。</summary>
      <param name="readWriteValues">从持久性存储中加载的读/写值。 此字典与由在最近的持久性段中保留的读/写值组成的字典相对应。</param>
    </member>
    <member name="T:System.Activities.Statements.AddToCollection`1">
      <summary>向指定集合中添加项。</summary>
      <typeparam name="T">指定集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.AddToCollection`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.AddToCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.AddToCollection`1.Collection">
      <summary>接收新项的集合。</summary>
      <returns>集合。</returns>
    </member>
    <member name="P:System.Activities.Statements.AddToCollection`1.Item">
      <summary>要添加到指定集合中的项。</summary>
      <returns>项。</returns>
    </member>
    <member name="T:System.Activities.Statements.Assign">
      <summary>从工作流内设置 <see cref="T:System.Activities.Argument" /> 值。</summary>
    </member>
    <member name="M:System.Activities.Statements.Assign.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Assign" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Assign.To">
      <summary>指定活动将为其分配活动的 <see cref="P:System.Activities.Statements.Assign.Value" /> 值的 <see cref="T:System.Activities.Argument" />。</summary>
      <returns>指定的 <see cref="T:System.Activities.Argument" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.Assign.Value">
      <summary>指定分配的值。</summary>
      <returns>要分配的值。</returns>
    </member>
    <member name="T:System.Activities.Statements.Assign`1">
      <summary>用于从工作流内设置 <see cref="T:System.Activities.Argument" /> 值的 <see cref="T:System.Activities.Statements.Assign" /> 活动。</summary>
      <typeparam name="T">分配的值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Assign`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Assign`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Assign`1.To">
      <summary>指定活动将为其分配活动的 <see cref="P:System.Activities.Statements.Assign.Value" /> 值的 <see cref="T:System.Activities.Argument" />。</summary>
      <returns>指定的 <see cref="T:System.WorkflowModel.Argument" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.Assign`1.Value">
      <summary>指定分配的值。</summary>
      <returns>要分配的值。</returns>
    </member>
    <member name="T:System.Activities.Statements.CancellationScope">
      <summary>以 <see cref="T:System.Activities.Activity" /> 形式将取消逻辑与执行的主路径相关联（也表示为 <see cref="T:System.Activities.Activity" />）。</summary>
    </member>
    <member name="M:System.Activities.Statements.CancellationScope.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.CancellationScope" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.Body">
      <summary>获取表示执行主路径的 <see cref="T:System.Activities.Statements.CancellationScope" /> 所包含的 <see cref="T:System.Activities.Activity" />。</summary>
      <returns>执行的主路径。</returns>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.CancellationHandler">
      <summary>在取消时执行的 <see cref="T:System.Activities.Activity" />。</summary>
      <returns>取消处理程序。</returns>
    </member>
    <member name="P:System.Activities.Statements.CancellationScope.Variables">
      <summary>获取与 <see cref="T:System.Activities.Statements.CancellationScope" /> 关联的 <see cref="T:System.Activities.Activity" /> 对象的集合。</summary>
      <returns>与 <see cref="T:System.Activities.Statements.CancellationScope" /> 关联的 <see cref="T:System.Activities.Activity" /> 对象的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.Catch">
      <summary>包含要在 <see cref="T:System.Activities.Statements.TryCatchFinally" /> 活动的对应 Try 块中引发了异常之后执行的操作。</summary>
    </member>
    <member name="P:System.Activities.Statements.Catch.ExceptionType">
      <summary>
        <see cref="T:System.Activities.Statements.Catch" /> 块正在处理的异常的类型。</summary>
      <returns>异常类型。</returns>
    </member>
    <member name="T:System.Activities.Statements.Catch`1">
      <summary>包含要在 <see cref="T:System.Activities.Statements.TryCatchFinally" /> 活动的对应 Try 块中引发了异常之后执行的操作。</summary>
      <typeparam name="TException">
        <see cref="T:System.Activities.Statements.Catch`1" /> 块正在处理的异常的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Catch`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Catch`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Catch`1.Action">
      <summary>所捕获异常的处理程序。</summary>
      <returns>活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.Catch`1.ExceptionType">
      <summary>
        <see cref="T:System.Activities.Statements.Catch" /> 块正在处理的异常的类型。</summary>
      <returns>异常类型。</returns>
    </member>
    <member name="T:System.Activities.Statements.ClearCollection`1">
      <summary>清除所有项的指定集合。</summary>
      <typeparam name="T">
        <see cref="P:System.Activities.Statements.ClearCollection`1.Collection" /> 参数中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ClearCollection`1.#ctor">
      <summary>创建 <see cref="M:System.Activities.Statements.ClearCollection`1.#ctor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.ClearCollection`1.Collection">
      <summary>要清除其内容的集合。</summary>
      <returns>集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.CompensableActivity">
      <summary>一个活动，该活动支持对其子活动的补偿。</summary>
    </member>
    <member name="M:System.Activities.Statements.CompensableActivity.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.CompensableActivity" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.Body">
      <summary>获取或设置在 <see cref="T:System.Activities.Statements.CompensableActivity" /> 执行时安排的活动。</summary>
      <returns>在 <see cref="T:System.Activities.Statements.CompensableActivity" /> 执行时安排的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.CancellationHandler">
      <summary>获取或设置在取消活动时安排的活动。</summary>
      <returns>在取消活动时安排的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.CompensationHandler">
      <summary>获取或设置在对 <see cref="T:System.Activities.Statements.CompensableActivity" /> 执行补偿时安排的活动。</summary>
      <returns>在对 <see cref="T:System.Activities.Statements.CompensableActivity" /> 执行补偿时安排的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.ConfirmationHandler">
      <summary>获取或设置在为此 <see cref="T:System.Activities.Statements.CompensableActivity" /> 执行确认时安排的活动。</summary>
      <returns>在为此 <see cref="T:System.Activities.Statements.CompensableActivity" /> 执行确认时安排的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.CompensableActivity.Variables">
      <summary>获取此 <see cref="T:System.Activities.Statements.CompensableActivity" /> 的 <see cref="T:System.WorkflowModel.Variable" /> 对象的集合。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.CompensableActivity" /> 的 <see cref="T:System.WorkflowModel.Variable" /> 对象的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.Compensate">
      <summary>一种用于显式调用 <see cref="T:System.Activities.Statements.CompensableActivity" /> 的补偿处理程序的活动。</summary>
    </member>
    <member name="M:System.Activities.Statements.Compensate.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.Compensate" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Compensate.Target">
      <summary>获取或设置 <see cref="T:System.WorkflowModel.InArgument`1" />，其中包含此 <see cref="T:System.Activities.Statements.Compensate" /> 活动的 <see cref="T:System.Activities.Statements.CompensationHandle" />。</summary>
      <returns>一个 <see cref="T:System.WorkflowModel.InArgument`1" />，其中包含此 <see cref="T:System.Activities.Statements.Compensate" /> 的 <see cref="T:System.Activities.Statements.CompensationHandle" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.CompensationExtension">
      <summary>表示一个扩展，该扩展与补偿活动挂钩，并保持与补偿相关的实例状态。</summary>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.CompensationExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)">
      <summary>由宿主调用以收集与要保持的补偿相关的读/写值和只写值。</summary>
      <param name="readWriteValues">要保持的读/写值。</param>
      <param name="writeOnlyValues">要保持的只写值。</param>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>由宿主调用以传递所加载的与补偿相关的所有值，这些值是最近的保持事件的一部分。</summary>
      <param name="readWriteValues">从持久性存储中加载的读/写值。</param>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions">
      <summary>返回任何附加扩展到补偿活动。</summary>
      <returns>一个附加工作流扩展的集合。</returns>
    </member>
    <member name="M:System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>设置任何附加扩展到补偿活动。</summary>
      <param name="instance">要设置的目标工作流实例。</param>
    </member>
    <member name="T:System.Activities.Statements.CompensationToken">
      <summary>提供在 <see cref="T:System.Activities.Statements.CompensableActivity" /> 的 <see cref="P:System.Activities.Statements.CompensableActivity.Body" /> 成功完成时显式确认或补偿 <see cref="T:System.Activities.Statements.CompensableActivity" /> 的方法。</summary>
    </member>
    <member name="T:System.Activities.Statements.Confirm">
      <summary>一种用于显式调用 <see cref="T:System.Activities.Statements.CompensableActivity" /> 的确认处理程序的活动。</summary>
    </member>
    <member name="M:System.Activities.Statements.Confirm.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.Confirm" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Confirm.Target">
      <summary>获取或设置 <see cref="T:System.WorkflowModel.InArgument`1" />，其中包含此 <see cref="T:System.Activities.Statements.Confirm" /> 活动的 <see cref="T:System.Activities.Statements.CompensationHandle" />。</summary>
      <returns>
        <see cref="T:System.WorkflowModel.InArgument`1" />，其中包含此 <see cref="T:System.Activities.Statements.Confirm" /> 活动的 <see cref="T:System.Activities.Statements.CompensationHandle" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.CreateBookmarkScope">
      <summary>创建一个 <see cref="T:System.Activities.BookmarkScope" />。</summary>
    </member>
    <member name="M:System.Activities.Statements.CreateBookmarkScope.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.CreateBookmarkScope" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Activities.Statements.Delay">
      <summary>使用 <see cref="T:System.Activities.Statements.TimerExtension" /> 为指定持续时间创建计时器。</summary>
    </member>
    <member name="M:System.Activities.Statements.Delay.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Delay" /> 活动的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Delay.Duration">
      <summary>
        <see cref="T:System.Activities.Statements.Delay" /> 活动创建的计时器的持续时间。 如果持续时间设置为 <see cref="P:System.TimeSpan.MaxValue" />，则延迟为无限。</summary>
      <returns>计时器持续时间。</returns>
    </member>
    <member name="T:System.Activities.Statements.DeleteBookmarkScope">
      <summary>删除 <see cref="P:System.Activities.Statements.DeleteBookmarkScope.Scope" /> 引用的 <see cref="T:System.Activities.BookmarkScope" />。</summary>
    </member>
    <member name="M:System.Activities.Statements.DeleteBookmarkScope.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.DeleteBookmarkScope" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.DeleteBookmarkScope.Scope">
      <summary>获取或设置关联的 <see cref="T:System.Activities.BookmarkScope" />。</summary>
      <returns>关联的 <see cref="T:System.Activities.BookmarkScope" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.DoWhile">
      <summary>一个循环活动，该活动将执行包含的活动至少一次，直至条件不再为 true 为止。</summary>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.DoWhile" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>创建 <see cref="T:System.Activities.Statements.DoWhile" /> 类的新实例。</summary>
      <param name="condition">活动依据其继续迭代的条件。</param>
    </member>
    <member name="M:System.Activities.Statements.DoWhile.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>创建 <see cref="T:System.Activities.Statements.DoWhile" /> 类的新实例。</summary>
      <param name="condition">活动依据其继续迭代的条件。</param>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Body">
      <summary>要随每次迭代一起执行的子活动。</summary>
      <returns>子活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Condition">
      <summary>在循环结尾进行检查以确定是否再次执行循环的 <see cref="T:System.Activities.Activity’1" />。</summary>
      <returns>用于重新执行循环的条件。</returns>
    </member>
    <member name="P:System.Activities.Statements.DoWhile.Variables">
      <summary>与 <see cref="T:System.Activities.Statements.DoWhile" /> 活动关联的 <see cref="T:System.Activity.Variable" /> 对象的集合。</summary>
      <returns>变量的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.DurableTimerExtension">
      <summary>表示可保留的活动计时器扩展。</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.DurableTimerExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.Dispose">
      <summary>终止所有注册的计时器。</summary>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.GetAdditionalExtensions">
      <summary>返回一个循环访问计时器扩展集合的枚举器。</summary>
      <returns>枚举数。</returns>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.OnCancelTimer(System.Activities.Bookmark)">
      <summary>从当前工作流操作的已注册计时器表中移除计时器对象。</summary>
      <param name="bookmark">工作流或活动可在计时器对象过期后被动等待恢复的点。</param>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.OnRegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>将包含指定时间跨度和书签信息的计时器对象添加到当前工作流操作的已注册计时器表。</summary>
      <param name="timeout">一个随回调信息一起添加到工作流操作中的计时器注册表条目的时间跨度对象。</param>
      <param name="bookmark">工作流或活动可在计时器对象过期后被动等待恢复的点。</param>
    </member>
    <member name="M:System.Activities.Statements.DurableTimerExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
      <summary>使指定的工作流实例成为当前实例。</summary>
      <param name="instance">要设为当前实例的工作流实例。</param>
    </member>
    <member name="T:System.Activities.Statements.ExistsInCollection`1">
      <summary>指示给定项是否存在于给定集合中。</summary>
      <typeparam name="T">指定集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ExistsInCollection`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.ExistsInCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.ExistsInCollection`1.Collection">
      <summary>要进行搜索以查找指定元素的集合。</summary>
      <returns>集合。</returns>
    </member>
    <member name="P:System.Activities.Statements.ExistsInCollection`1.Item">
      <summary>要在指定集合中搜索的项。</summary>
      <returns>项。</returns>
    </member>
    <member name="T:System.Activities.Statements.Flowchart">
      <summary>表示使用熟悉的流程图范例建立工作流的模型。</summary>
    </member>
    <member name="M:System.Activities.Statements.Flowchart.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Flowchart" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.Nodes">
      <summary>获取或设置包含在流程图中的 <see cref="T:System.Activities.Statements.FlowNode" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Activities.Statements.FlowNode" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.StartNode">
      <summary>获取或设置要在流程图启动时执行的 <see cref="T:System.Activities.Statements.FlowNode" />。</summary>
      <returns>起始节点。</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.ValidateUnconnectedNodes">
      <summary>获取或设置一个指示是否验证未连接节点的值。</summary>
      <returns>如果验证未连接的节点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Statements.Flowchart.Variables">
      <summary>获取或设置与 <see cref="T:System.Activities.Statements.Flowchart" /> 关联的 <see cref="T:System.WorkflowModel.Variable" /> 对象的集合，这些对象可用于在流程图内包含的子活动之间共享状态。</summary>
      <returns>变量的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowDecision">
      <summary>一个专用的 <see cref="T:System.Activities.Statements.FlowNode" />，提供建立有两种结果的条件节点模型的能力。</summary>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.FlowDecision" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>使用指定的条件创建 <see cref="T:System.Activities.Statements.FlowDecision" /> 类的新实例。</summary>
      <param name="condition">
        <see cref="T:System.Activities.Statements.FlowDecision" /> 正在测试的条件。</param>
    </member>
    <member name="M:System.Activities.Statements.FlowDecision.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>使用指定的条件创建 <see cref="T:System.Activities.Statements.FlowDecision" /> 类的新实例。</summary>
      <param name="condition">
        <see cref="T:System.Activities.Statements.FlowDecision" /> 正在测试的条件。</param>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.Condition">
      <summary>指定 <see cref="T:System.Activities.Statements.FlowDecision" /> 正在测试的条件。</summary>
      <returns>表示条件的值表达式。</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.DisplayName">
      <summary>要在活动设计器中显示的此流决策的名称。</summary>
      <returns>流决定的名称。</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.False">
      <summary>获取或设置在条件计算为 false 时执行的 <see cref="T:System.Activities.Statements.FlowNode" />。</summary>
      <returns>在条件的计算结果为 false 时执行的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowDecision.True">
      <summary>获取或设置在条件计算为 true 时执行的 <see cref="T:System.Activities.Statements.FlowNode" />。</summary>
      <returns>在条件的计算结果为 true 时执行的活动。</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowNode">
      <summary>可包含于 <see cref="T:System.Activities.Statements.Flowchart" /> 活动中的所有不同节点类型的抽象基类。</summary>
    </member>
    <member name="T:System.Activities.Statements.FlowStep">
      <summary>执行指定的 <see cref="P:System.Activities.Statements.FlowStep.Action" /> 且具有 <see cref="P:System.Activities.Statements.FlowStep.Next" /> 指针的 <see cref="T:System.Activities.Statements.FlowNode" /> 元素。</summary>
    </member>
    <member name="M:System.Activities.Statements.FlowStep.#ctor">
      <summary>返回 <see cref="T:System.Activities.Statements.FlowStep" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.FlowStep.Action">
      <summary>
        <see cref="T:System.Activities.Statements.FlowStep" /> 执行的 <see cref="T:System.Activities.Activity" />。</summary>
      <returns>要作为流程图的此步骤的一部分执行的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowStep.Next">
      <summary>流程图中要在执行当前 <see cref="T:System.Activities.Statements.FlowStep" /> 之后执行的下一个 <see cref="T:System.Activities.Statements.FlowNode" />。</summary>
      <returns>指定的元素。</returns>
    </member>
    <member name="T:System.Activities.Statements.FlowSwitch`1">
      <summary>一个专用的 <see cref="T:System.Activities.Statements.FlowNode" />，可建立 switch 结构的模型，该结构有一个表达式并且每个匹配项有一个结果。</summary>
      <typeparam name="T">要针对事例计算的表达式的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.FlowSwitch`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.FlowSwitch`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Cases">
      <summary>获取由 <see cref="T:System.Activities.Statements.FlowSwitch`1" /> 元素处理的事例的字典。</summary>
      <returns>事例的集合。</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Default">
      <summary>要执行的 <see cref="T:System.Activities.Statements.FlowNode" />（如果 <see cref="P:System.Activities.Statements.FlowSwitch`1.Cases" /> 集合中没有元素与 <see cref="P:System.Activities.Statements.FlowSwitch`1.Expression" /> 的计算结果相匹配）。</summary>
      <returns>要执行的默认 <see cref="T:System.Activities.Statements.FlowNode" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.DisplayName">
      <summary>获取在活动设计器中显示的此流开关的名称。</summary>
      <returns>流开关的名称。</returns>
    </member>
    <member name="P:System.Activities.Statements.FlowSwitch`1.Expression">
      <summary>要针对 <see cref="P:System.Activities.Statements.FlowSwitch`1.Cases" /> 的集合计算的表达式。</summary>
      <returns>要计算的表达式。</returns>
    </member>
    <member name="T:System.Activities.Statements.ForEach`1">
      <summary>为 <see cref="P:System.Activities.Statements.ForEach`1.Values" /> 集合中提供的每个值执行活动操作一次。</summary>
      <typeparam name="T">
        <see cref="P:System.Activities.Statements.ForEach`1.Values" /> 集合中提供的值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ForEach`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.ForEach`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.ForEach`1.Body">
      <summary>要为 <see cref="P:System.Activities.Statements.ForEach`1.Values" /> 集合中的每一项执行的 <see cref="T:System.Activities.ActivityAction" />。</summary>
      <returns>要执行的操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.ForEach`1.Values">
      <summary>活动的输入集合，用于执行 <see cref="P:System.Activities.Statements.ForEach`1.Body" /> 活动操作。</summary>
      <returns>值的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.HandleScope`1">
      <summary>提供 <see cref="T:System.Activities.Handle" /> 对象的默认确定范围行为。</summary>
      <typeparam name="THandle">
        <see cref="P:System.Activities.Statements.HandleScope`1.Handle" /> 的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.HandleScope`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.HandleScope`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.HandleScope`1.Body">
      <summary>要由此活动确定范围的活动。</summary>
      <returns>确定了范围的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.HandleScope`1.Handle">
      <summary>
        <see cref="T:System.Activities.Handle" /> 从父范围中流入。</summary>
      <returns>句柄。</returns>
    </member>
    <member name="T:System.Activities.Statements.If">
      <summary>建立 If-Then-Else 条件的模型。</summary>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.If" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>使用指定的条件创建 <see cref="T:System.Activities.Statements.If" /> 类的新实例。</summary>
      <param name="condition">执行条件。</param>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Activities.InArgument{System.Boolean})">
      <summary>使用指定的条件创建 <see cref="T:System.Activities.Statements.If" /> 类的新实例。</summary>
      <param name="condition">执行条件。</param>
    </member>
    <member name="M:System.Activities.Statements.If.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>使用指定的条件创建 <see cref="T:System.Activities.Statements.If" /> 类的新实例。</summary>
      <param name="condition">执行条件。</param>
    </member>
    <member name="P:System.Activities.Statements.If.Condition">
      <summary>用于确定要执行哪个子活动的条件。 解析为 true 的情况下执行 <see cref="P:System.Activities.Statements.If.Then" /> 活动。 解析为 false 的情况下执行 <see cref="P:System.Activities.Statements.If.Else" /> 活动。</summary>
      <returns>执行条件。</returns>
    </member>
    <member name="P:System.Activities.Statements.If.Else">
      <summary>要在活动的 <see cref="P:System.Activities.Statements.If.Condition" /> 解析为 false 的情况下执行的活动。</summary>
      <returns>子活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.If.Then">
      <summary>要在活动的 <see cref="P:System.Activities.Statements.If.Condition" /> 解析为 true 的情况下执行的活动。</summary>
      <returns>子活动。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction" /> 处理程序。</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction" /> 调用的 <see cref="T:System.Activities.ActivityAction" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction" /> 调用的 <see cref="T:System.Activities.ActivityAction" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`1">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`1" /> 处理程序。</summary>
      <typeparam name="T">传递到 <see cref="T:System.Activities.ActivityAction`1" /> 的 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`1.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`1" /> 调用的 <see cref="T:System.Activities.ActivityAction`1" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`1" /> 调用的 <see cref="T:System.Activities.ActivityAction`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`1.Argument">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`1" /> 的 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`1" /> 的 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`10">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`10" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T9">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T10">传递到 <see cref="T:System.Activities.ActivityAction`10" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`10.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`10" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`10" /> 调用的 <see cref="T:System.Activities.ActivityAction`10" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`10" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 1 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument10">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 10 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 2 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 3 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 4 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 5 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 6 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 7 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 8 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`10.Argument9">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`10" /> 的第 9 个  In 参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`11">
      <summary>调用 <see cref="T:System.Activities.ActivityAction`11" />。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T9">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T10">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T11">传递到 <see cref="T:System.Activities.ActivityAction`11" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`11.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`11" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`11" /> 调用的 <see cref="T:System.Activities.ActivityAction`11" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`11" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 1 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument10">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 10 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument11">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第11个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 2 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 3 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 4 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 5 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 6 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 7 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 8 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`11.Argument9">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`11" /> 的第 9 个  In 参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`12">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`12" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T9">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T10">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T11">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T12">传递到 <see cref="T:System.Activities.ActivityAction`12" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`12.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`12" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Action">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`12" /> 类的新实例。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`12" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 1 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument10">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 10 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument11">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第11个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument12">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 12 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 2 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 3 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 4 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 5 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 6 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 7 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 8 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`12.Argument9">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`12" /> 的第 9 个  In 参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`13">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`13" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T9">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T10">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T11">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T12">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T13">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`13.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`13" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`13" /> 调用的 <see cref="T:System.Activities.ActivityAction`13" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`13" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 1 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument10">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 10 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument11">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 11 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument12">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 12 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument13">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的<see cref="T:System.Activities.ActivityAction`13" /> 的第 13 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 2 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 3 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 4 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 5 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 6 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 7 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 8 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`13.Argument9">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`13" /> 的第 9 个 In 参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`14">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`14" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T9">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T10">传递到 <see cref="T:System.Activities.ActivityAction`13" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T11">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T12">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T13">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T14">传递到 <see cref="T:System.Activities.ActivityAction`14" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`14.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`14" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`14" /> 调用的 <see cref="T:System.Activities.ActivityAction`14" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`14" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 1 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument10">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 10 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument11">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 11 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument12">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 12 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument13">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的<see cref="T:System.Activities.ActivityAction`14" /> 的第 13 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument14">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 14 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 2 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 3 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 4 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 5 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 6 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 7 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 8 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`14.Argument9">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`14" /> 的第 9 个  In 参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`15">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`15" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T9">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T10">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T11">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T12">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T13">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T14">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T15">传递到 <see cref="T:System.Activities.ActivityAction`15" /> 的第 15 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`15.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`15" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`15" /> 调用的 <see cref="T:System.Activities.ActivityAction`15" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`15" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 1 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument10">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 10 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument11">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 11 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument12">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 12 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument13">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 13 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument14">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 14 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument15">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 15 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 15 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 2 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 3 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 4 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 5 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 6 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 7 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 8 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`15.Argument9">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`15" /> 的第 9 个 In 参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`16">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`16" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T9">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T10">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T11">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T12">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T13">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T14">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T15">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 15 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T16">传递到 <see cref="T:System.Activities.ActivityAction`16" /> 的第 16 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`16.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`16" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`16" /> 调用的 <see cref="T:System.Activities.ActivityAction`16" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`16" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 1 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument10">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 10 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 10 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument11">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 11 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第11个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument12">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 12 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 12 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument13">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 13 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的<see cref="T:System.Activities.ActivityAction`16" /> 的第 13 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument14">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 14 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 14 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument15">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 15 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 15 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument16">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 16 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 16 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 2 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 3 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 4 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 5 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 6 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 7 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 8 个 In 参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`16.Argument9">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`16" /> 的第 9 个  In 参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`2">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`2" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`2" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`2" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`2.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`2" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`2" /> 调用的 <see cref="T:System.Activities.ActivityAction`2" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`2" /> 调用的 <see cref="T:System.Activities.ActivityAction`2" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`2" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`2" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`2.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`2" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`2" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`3">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`3" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`3" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`3" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`3" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`3.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`3" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`3" /> 调用的 <see cref="T:System.Activities.ActivityAction`3" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`3" /> 调用的 <see cref="T:System.Activities.ActivityAction`3" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`3" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`3" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`3" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`3" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`3.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`3" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`3" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`4">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`4" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`4" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`4" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`4" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`4" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`4.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`4" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`4" /> 调用的 <see cref="T:System.Activities.ActivityAction`4" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`4" /> 调用的 <see cref="T:System.Activities.ActivityAction`4" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`4" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`4" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`4" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`4" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`4" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`4" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`4.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`4" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`4" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`5">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`5" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`5" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`5" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`5" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`5" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`5" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`5.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`5" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`5" /> 调用的 <see cref="T:System.Activities.ActivityAction`5" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`5" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`5.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`5" /> 的第 5 个参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`6">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`6" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`6" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`6" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`6" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`6" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`6" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`6" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`6.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`6" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`6" /> 调用的 <see cref="T:System.Activities.ActivityAction`6" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`6" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`6.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`6" /> 的第 6 个参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`7">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`7" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`7" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`7" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`7" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`7" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`7" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`7" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`7" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`7.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`7" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`7" /> 调用的 <see cref="T:System.Activities.ActivityAction`7" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`7" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`7.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`7" /> 的第 7 个参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`8">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`8" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`8" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`8" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`8" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`8" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`8" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`8" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`8" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`8" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`8.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`8" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`8" /> 调用的 <see cref="T:System.Activities.ActivityAction`8" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`8" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`8.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`8" /> 的第 8 个参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeAction`9">
      <summary>调用活动的 <see cref="T:System.Activities.ActivityAction`9" /> 处理程序。</summary>
      <typeparam name="T1">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T2">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T3">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T4">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T5">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T6">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T7">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T8">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
      <typeparam name="T9">传递到 <see cref="T:System.Activities.ActivityAction`9" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" /> 的数据类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.InvokeAction`9.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.InvokeAction`9" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Action">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.InvokeAction`9" /> 调用的 <see cref="T:System.Activities.ActivityAction`9" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.InvokeAction`9" /> 调用的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument1">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 1 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 1 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument2">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 2 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 2 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument3">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 3 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 3 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument4">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 4 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 4 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument5">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 5 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 5 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument6">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 6 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 6 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument7">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 7 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 7 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument8">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 8 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 8 个参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeAction`9.Argument9">
      <summary>获取或设置传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 9 个 <see cref="T:System.Activities.InArgument`1" />。</summary>
      <returns>传递到关联的 <see cref="T:System.Activities.ActivityAction`9" /> 的第 9 个参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeDelegate">
      <summary>调用指定的 <see cref="T:System.Activities.ActivityDelegate" />。</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeDelegate.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.InvokeDelegate" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.Default">
      <summary>获取或设置不需要调用时的默认活动。</summary>
      <returns>默认活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.Delegate">
      <summary>获取要调用的 <see cref="T:System.Activities.ActivityDelegate" />。</summary>
      <returns>委托。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeDelegate.DelegateArguments">
      <summary>要传递到 <see cref="P:System.Activities.Statements.InvokeDelegate.ActivityDelegate" /> 的参数。</summary>
      <returns>要传递到委托的参数。</returns>
    </member>
    <member name="T:System.Activities.Statements.InvokeMethod">
      <summary>调用指定对象或类型的公共方法。</summary>
    </member>
    <member name="M:System.Activities.Statements.InvokeMethod.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.InvokeMethod" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.GenericTypeArguments">
      <summary>所包含的方法的泛型类型参数。</summary>
      <returns>参数。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.MethodName">
      <summary>要在执行活动时调用的方法的名称。</summary>
      <returns>方法名。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.Parameters">
      <summary>要调用的方法的参数集合。</summary>
      <returns>参数集合。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.Result">
      <summary>方法操作的返回值。</summary>
      <returns>操作的返回值。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.RunAsynchronously">
      <summary>获取或设置一个值，该值指示是否以异步方式调用活动的方法。</summary>
      <returns>如果方法异步执行，则为 true。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.TargetObject">
      <summary>包含要执行的方法的对象。</summary>
      <returns>设置的对象。</returns>
    </member>
    <member name="P:System.Activities.Statements.InvokeMethod.TargetType">
      <summary>
        <see cref="P:System.Activities.Statements.InvokeMethod.TargetObject" /> 的类型。</summary>
      <returns>目标对象类型。</returns>
    </member>
    <member name="T:System.Activities.Statements.NoPersistScope">
      <summary>表示 NoPersistScope 活动。</summary>
    </member>
    <member name="M:System.Activities.Statements.NoPersistScope.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.NoPersistScope" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.NoPersistScope.Body">
      <summary>获取或设置 NoPersistScope 活动的正文。</summary>
      <returns>NoPersistScope 活动的正文。</returns>
    </member>
    <member name="T:System.Activities.Statements.Parallel">
      <summary>一个以异步方式同时执行所有子活动的活动。</summary>
    </member>
    <member name="M:System.Activities.Statements.Parallel.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Parallel" /> 活动的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Parallel.Branches">
      <summary>要并行执行的子元素。</summary>
      <returns>元素。</returns>
    </member>
    <member name="P:System.Activities.Statements.Parallel.CompletionCondition">
      <summary>在任何分支完成后计算。</summary>
      <returns>完成表达式。</returns>
    </member>
    <member name="P:System.Activities.Statements.Parallel.Variables">
      <summary>包含的变量的集合。</summary>
      <returns>包含的变量。</returns>
    </member>
    <member name="T:System.Activities.Statements.ParallelForEach`1">
      <summary>枚举集合元素并对集合中的每个元素并行执行嵌入语句。</summary>
      <typeparam name="T">
        <see cref="P:System.Activities.Statements.ParallelForEach`1.Values" /> 集合中提供的值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.ParallelForEach`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.ParallelForEach`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.Body">
      <summary>为 <see cref="P:System.Activities.Statements.ParallelForEach`1.Values" /> 集合中包含的每个值执行一次的 <see cref="T:System.Activities.ActivityAction" />。</summary>
      <returns>包含的活动操作。</returns>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.CompletionCondition">
      <summary>在每个迭代完成后计算。</summary>
      <returns>完成表达式。</returns>
    </member>
    <member name="P:System.Activities.Statements.ParallelForEach`1.Values">
      <summary>值的集合，用作 <see cref="P:System.Activities.Statements.ParallelForEach`1.Body" /> 中所包含活动的每个迭代的参数。</summary>
      <returns>值的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.Persist">
      <summary>请求工作流实例保留。</summary>
    </member>
    <member name="M:System.Activities.Statements.Persist.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Persist" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Activities.Statements.Pick">
      <summary>提供基于事件的控制流建模。</summary>
    </member>
    <member name="M:System.Activities.Statements.Pick.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Pick" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Pick.Branches">
      <summary>
        <see cref="T:System.Activities.Statements.PickBranch" /> 对象的集合，<see cref="T:System.Activities.Statements.Pick" /> 活动可能会基于传入的事件执行其中的一个活动。</summary>
      <returns>分支集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.PickBranch">
      <summary>
        <see cref="T:System.Activities.Statements.Pick" /> 活动内的可能执行路径。</summary>
    </member>
    <member name="M:System.Activities.Statements.PickBranch.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.PickBranch" /> 活动的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Action">
      <summary>要在已触发执行此分支的情况下执行的 <see cref="T:System.Activities.Activity" />。</summary>
      <returns>要执行的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.DisplayName">
      <summary>在活动设计器中显示的此分支的名称。</summary>
      <returns>分支名称。</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Trigger">
      <summary>其完成激活此 pick 分支的活动。</summary>
      <returns>触发活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.PickBranch.Variables">
      <summary>与此活动关联的用户定义变量的集合。</summary>
      <returns>变量集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.RemoveFromCollection`1">
      <summary>从指定集合中移除项。</summary>
      <typeparam name="T">指定集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.RemoveFromCollection`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.RemoveFromCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.RemoveFromCollection`1.Collection">
      <summary>要从中移除 <see cref="P:System.Activities.Statements.RemoveFromCollection`1.Item" /> 的集合。</summary>
      <returns>集合。</returns>
    </member>
    <member name="P:System.Activities.Statements.RemoveFromCollection`1.Item">
      <summary>要从指定的 <see cref="P:System.Activities.Statements.RemoveFromCollection`1.Collection" /> 中移除的项。</summary>
      <returns>要移除的项。</returns>
    </member>
    <member name="T:System.Activities.Statements.Rethrow">
      <summary>从 <see cref="T:System.Activities.Statements.Catch" /> 活动内引发以前已引发的异常。</summary>
    </member>
    <member name="M:System.Activities.Statements.Rethrow.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Rethrow" /> 活动的新实例。</summary>
    </member>
    <member name="T:System.Activities.Statements.Sequence">
      <summary>根据一种已定义的排序方式，执行一组子活动。</summary>
    </member>
    <member name="M:System.Activities.Statements.Sequence.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Sequence" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Sequence.Activities">
      <summary>要按顺序执行的包含的活动的集合。</summary>
      <returns>活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.Sequence.Variables">
      <summary>包含的变量的集合。</summary>
      <returns>变量的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.State">
      <summary>建立状态机可具有的状态的模型。</summary>
    </member>
    <member name="M:System.Activities.Statements.State.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.State" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.State.DisplayName">
      <summary>获取或设置用于调试、验证、异常处理和跟踪的可选友好名称。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.State.Entry">
      <summary>获取或设置进入该状态时要执行的活动。</summary>
      <returns>返回 <see cref="T:System.Activities.Activity" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.State.Exit">
      <summary>获取或设置退出该状态时要执行的活动。</summary>
      <returns>返回 <see cref="T:System.Activities.Activity" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.State.IsFinal">
      <summary>获取或设置该状态是否是最终状态。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.State.Transitions">
      <summary>获取来自此状态的转换集合。</summary>
      <returns>返回 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.State.Variables">
      <summary>获取或设置与该状态相关联的变量对象集合。</summary>
      <returns>返回 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.StateMachine">
      <summary>使用熟悉的状态机范例建立工作流的模型。</summary>
    </member>
    <member name="M:System.Activities.Statements.StateMachine.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.StateMachine" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.StateMachine.InitialState">
      <summary>获取或设置 <see cref="T:System.Activities.Statements.StateMachine" /> 的起始状态。</summary>
      <returns>返回 <see cref="T:System.Activities.Statements.State" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.StateMachine.States">
      <summary>获取 <see cref="T:System.Activities.Statements.StateMachine" /> 中所有根级别状态的集合。</summary>
      <returns>返回 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.StateMachine.Variables">
      <summary>获取可在 <see cref="T:System.Activities.Statements.StateMachine" /> 范围内使用的变量的集合。</summary>
      <returns>返回 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.Switch`1">
      <summary>基于给定表达式（其类型在此对象的类别说明符中指定）的值，从要执行的多个活动中选择一个活动。</summary>
      <typeparam name="T">
        <see cref="P:System.Activities.Statements.Switch`1.Cases" /> 集合中提供的值的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Switch`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Activities.Activity{`0})">
      <summary>使用指定的表达式创建 <see cref="T:System.Activities.Statements.Switch`1" /> 类的新实例。</summary>
      <param name="expression">要计算并与 <see cref="P:System.Activities.Statements.Switch`1.Cases" /> 字典中的值进行比较的表达式。</param>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Activities.InArgument{`0})">
      <summary>使用指定的表达式创建 <see cref="T:System.Activities.Statements.Switch`1" /> 类的新实例。</summary>
      <param name="expression">要计算并与 <see cref="P:System.Activities.Statements.Switch`1.Cases" /> 字典中的值进行比较的表达式。</param>
    </member>
    <member name="M:System.Activities.Statements.Switch`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})">
      <summary>使用指定的表达式创建 <see cref="T:System.Activities.Statements.Switch`1" /> 类的新实例。</summary>
      <param name="expression">要计算并与 <see cref="P:System.Activities.Statements.Switch`1.Cases" /> 字典中的值进行比较的表达式。</param>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Cases">
      <summary>表示可能执行路径的字典。 每个条目都包含一个键以及一个将在表达式结果与该键匹配时执行的活动。</summary>
      <returns>执行路径。</returns>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Default">
      <summary>表示在 <see cref="P:System.Activities.Statements.Switch.Cases" /> 集合中没有条目键与 <see cref="P:System.Activities.Statements.Switch.Expression" /> 属性匹配的情况下执行的活动。</summary>
      <returns>要执行的默认活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.Switch`1.Expression">
      <summary>获取要与 <see cref="P:System.Activities.Statements.Switch.Cases" /> 集合中的键进行比较的对象。</summary>
      <returns>要与 <see cref="P:System.Activities.Statements.Switch.Cases" /> 集合中的键进行比较的对象。</returns>
    </member>
    <member name="T:System.Activities.Statements.TerminateWorkflow">
      <summary>终止正在运行的工作流实例，在宿主中引发 <see cref="P:System.Activities.WorkflowApplication.Completed" /> 事件，并报告错误信息。 工作流终止后将无法恢复。</summary>
    </member>
    <member name="M:System.Activities.Statements.TerminateWorkflow.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.TerminateWorkflow" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.TerminateWorkflow.Exception">
      <summary>获取或设置导致实例终止的异常。</summary>
      <returns>异常。</returns>
    </member>
    <member name="P:System.Activities.Statements.TerminateWorkflow.Reason">
      <summary>一个字符串输入参数，其中包含工作流实例终止的原因。</summary>
      <returns>工作流中止的原因。</returns>
    </member>
    <member name="T:System.Activities.Statements.Throw">
      <summary>引发一个异常。</summary>
    </member>
    <member name="M:System.Activities.Statements.Throw.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.Throw" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Throw.Exception">
      <summary>活动引发的异常。</summary>
      <returns>异常。</returns>
    </member>
    <member name="T:System.Activities.Statements.TimerExtension">
      <summary>计时器扩展的抽象基类。</summary>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.#ctor">
      <summary>在派生类中实现时，创建派生类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.CancelTimer(System.Activities.Bookmark)">
      <summary>移除计时器。</summary>
      <param name="bookmark">与计时器关联的书签。</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.OnCancelTimer(System.Activities.Bookmark)">
      <summary>由 <see cref="M:System.Activities.Statements.TimerExtension.CancelTimer(System.Activities.Bookmark) " /> 方法调用。</summary>
      <param name="bookmark">与计时器关联的书签。</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.OnRegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>由 <see cref="M:System.Activities.Statements.TimerExtension.RegisterTimer(System.TimeSpan,System.Activities.Bookmark)" /> 方法调用。</summary>
      <param name="timeout">计时器的持续时间。</param>
      <param name="bookmark">与计时器关联的书签（要在计时器过期时恢复）。</param>
    </member>
    <member name="M:System.Activities.Statements.TimerExtension.RegisterTimer(System.TimeSpan,System.Activities.Bookmark)">
      <summary>使用指定的持续时间和关联的书签创建计时器。</summary>
      <param name="timeout">计时器的持续时间。</param>
      <param name="bookmark">与计时器关联的书签（要在计时器过期时恢复）。</param>
    </member>
    <member name="T:System.Activities.Statements.TransactionScope">
      <summary>一个划分事务边界的活动。</summary>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.TransactionScope" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.AbortInstanceOnTransactionFailure">
      <summary>获取或设置值，该值指示在事务中止的情况下是否应中止工作流。</summary>
      <returns>如果应中止该工作流，则为 true。</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.Body">
      <summary>获取或设置在 <see cref="T:System.Activities.Statements.TransactionScope" /> 执行时安排的活动。</summary>
      <returns>在 <see cref="T:System.Activities.Statements.TransactionScope" /> 执行时安排的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.IsolationLevel">
      <summary>获取或设置此 <see cref="T:System.Activities.Statements.TransactionScope" /> 的 <see cref="T:System.Transactions.IsolationLevel" />。</summary>
      <returns>此 <see cref="T:System.Activities.Statements.TransactionScope" /> 的 <see cref="T:System.Transactions.IsolationLevel" />。</returns>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.ShouldSerializeIsolationLevel">
      <summary>指示是否应序列化此 <see cref="T:System.Activities.Statements.TransactionScope" /> 的 <see cref="P:System.Activities.Statements.TransactionScope.IsolationLevel" />。</summary>
      <returns>如果应当将 <see cref="P:System.Activities.Statements.TransactionScope.IsolationLevel" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Activities.Statements.TransactionScope.ShouldSerializeTimeout">
      <summary>指示是否应序列化此 <see cref="T:System.Activities.Statements.TransactionScope" /> 的 <see cref="P:System.Activities.Statements.TransactionScope.Timeout" />。</summary>
      <returns>如果应当将 <see cref="P:System.Activities.Statements.TransactionScope.Timeout" /> 属性值序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Statements.TransactionScope.Timeout">
      <summary>获取或设置 <see cref="T:System.TimeSpan" />，它指示用于此 <see cref="T:System.Activities.Statements.TransactionScope" /> 的事务的超时期限。</summary>
      <returns>指示用于此 <see cref="T:System.Activities.Statements.TransactionScope" /> 的事务的超时期限的 <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.Transition">
      <summary>建立可能的状态变化列表的模型。</summary>
    </member>
    <member name="M:System.Activities.Statements.Transition.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.Transition" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Transition.Action">
      <summary>获取或设置在转换过程中要执行的活动。</summary>
      <returns>返回 <see cref="T:System.Activities.Activity" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.Transition.Condition">
      <summary>指定当触发活动激活时转换要测试的条件。</summary>
      <returns>表示条件的布尔值表达式。</returns>
    </member>
    <member name="P:System.Activities.Statements.Transition.DisplayName">
      <summary>获取或设置用于调试、验证、异常处理和跟踪的可选友好名称。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.Transition.To">
      <summary>获取或设置完成转换后要执行的状态机中的下一个状态。</summary>
      <returns>返回 <see cref="T:System.Activities.Statements.State" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.Transition.Trigger">
      <summary>获取或设置完成后会激活此转换的活动。</summary>
      <returns>返回 <see cref="T:System.Activities.Activity" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.TryCatch">
      <summary>包含要由工作流运行时在异常处理块中执行的活动。</summary>
    </member>
    <member name="M:System.Activities.Statements.TryCatch.#ctor">
      <summary>创建 <see cref="M:System.Activities.Statements.TryCatch.#ctor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Catches">
      <summary>
        <see cref="P:System.Activities.Statements.TryCatch.Try" /> 活动引发异常时要检查的 Catch 元素的集合。</summary>
      <returns>Catch 集合。</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Finally">
      <summary>执行完 <see cref="P:System.Activities.Statements.TryCatch.Try" /> 以及 <see cref="P:System.Activities.Statements.TryCatch.Catches" /> 集合中的任何必要活动时要执行的活动。</summary>
      <returns>表示 <see cref="P:System.Activities.Statements.TryCatch.Finally" /> 逻辑的活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Try">
      <summary>在 <see cref="T:System.Activities.Statements.TryCatch" /> 执行时首先执行的活动。</summary>
      <returns>活动。</returns>
    </member>
    <member name="P:System.Activities.Statements.TryCatch.Variables">
      <summary>包含的变量的集合。</summary>
      <returns>变量的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.While">
      <summary>当条件计算结果为 true 时，执行所包含的活动。</summary>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.While" /> 活动的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor(System.Activities.Activity{System.Boolean})">
      <summary>创建 <see cref="T:System.Activities.Statements.While" /> 活动的新实例。</summary>
      <param name="condition">活动依据其进行迭代的条件。</param>
    </member>
    <member name="M:System.Activities.Statements.While.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})">
      <summary>创建 <see cref="T:System.Activities.Statements.While" /> 活动的新实例。</summary>
      <param name="condition">活动依据其进行迭代的条件。</param>
    </member>
    <member name="P:System.Activities.Statements.While.Body">
      <summary>要在 While 循环中执行的 <see cref="T:System.Activities.Activity" />。</summary>
      <returns>要执行的激活。</returns>
    </member>
    <member name="P:System.Activities.Statements.While.Condition">
      <summary>要在 While 循环每次迭代之前执行的 <see cref="T:System.Activities.Activity`1" />。</summary>
      <returns>条件。</returns>
    </member>
    <member name="P:System.Activities.Statements.While.Variables">
      <summary>与 <see cref="T:System.Activities.Statements.While" /> 活动关联的 <see cref="T:System.Activities.Variable" /> 对象的集合。</summary>
      <returns>变量的集合。</returns>
    </member>
    <member name="T:System.Activities.Statements.WorkflowTerminatedException">
      <summary>对终止的 <see cref="T:System.Activities.WorkflowApplication" /> 调用操作时引发的异常。</summary>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor">
      <summary>用默认值初始化 <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Activities.Statements.WorkflowTerminatedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Activities.Statements.WorkflowTerminatedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Activities.Statements.WriteLine">
      <summary>将指定的字符串写入指定 <see cref="T:System.IO.TextWriter" /> 对象。</summary>
    </member>
    <member name="M:System.Activities.Statements.WriteLine.#ctor">
      <summary>创建 <see cref="T:System.Activities.Statements.WriteLine" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.WriteLine.Text">
      <summary>要编写的文本。</summary>
      <returns>文本。</returns>
    </member>
    <member name="P:System.Activities.Statements.WriteLine.TextWriter">
      <summary>要向其中写入 <see cref="P:System.Activities.Statements.WriteLine.Text" /> 的 <see cref="T:System.IO.TextWriter" />。</summary>
      <returns>文本编写器。</returns>
    </member>
    <member name="T:System.Activities.Statements.Tracking.StateMachineStateQuery">
      <summary>当添加到查询中时，订阅状态机状态执行记录。</summary>
    </member>
    <member name="M:System.Activities.Statements.Tracking.StateMachineStateQuery.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.Tracking.StateMachineStateQuery" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Tracking.StateMachineStateQuery.Name">
      <summary>获取可区分此跟踪记录的名称。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Activities.Statements.Tracking.StateMachineStateRecord">
      <summary>表示在状态机实例转换为某种状态时创建的一条跟踪记录。</summary>
    </member>
    <member name="M:System.Activities.Statements.Tracking.StateMachineStateRecord.#ctor">
      <summary>初始化 <see cref="T:System.Activities.Statements.Tracking.StateMachineStateRecord" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Statements.Tracking.StateMachineStateRecord.StateMachineName">
      <summary>获取包含该状态的状态机活动的显示名称。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Activities.Statements.Tracking.StateMachineStateRecord.StateName">
      <summary>获取生成记录时所执行状态的显示名称。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityInfo">
      <summary>包含有关跟踪的 <see cref="T:System.Activities.Activity" /> 的信息。</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityInfo.#ctor(System.String,System.String,System.String,System.String)">
      <summary>使用指定的名称、ID、实例 ID 和类型名称初始化 <see cref="T:System.Activities.Tracking.ActivityInfo" /> 类的新实例。</summary>
      <param name="name">活动的名称。</param>
      <param name="id">活动 ID。</param>
      <param name="instanceId">活动的实例 ID。</param>
      <param name="typeName">活动的类型名称。</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.Id">
      <summary>获取活动的 ID。</summary>
      <returns>活动 ID。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.InstanceId">
      <summary>获取活动实例的运行时 ID。</summary>
      <returns>活动的实例 ID。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.Name">
      <summary>获取与活动关联的名称。</summary>
      <returns>活动名称。</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityInfo.ToString">
      <summary>获取 <see cref="T:System.Activities.Tracking.ActivityInfo" /> 对象的字符串表示形式。</summary>
      <returns>活动名称、ID、实例 ID 和类型名称。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityInfo.TypeName">
      <summary>获取活动的类型名称。</summary>
      <returns>活动的类型名称。</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityScheduledQuery">
      <summary>添加到 <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> 集合时，当创建了跟踪配置文件来订阅跟踪记录时订阅已安排活动记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledQuery.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.ActivityScheduledQuery" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledQuery.ActivityName">
      <summary>获取跟踪查询从中进行订阅的活动的名称。</summary>
      <returns>安排此活动的活动的名称。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledQuery.ChildActivityName">
      <summary>获取跟踪查询订阅的已安排活动的名称。</summary>
      <returns>已安排活动的名称。</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityScheduledRecord">
      <summary>表示所安排执行的活动的跟踪记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo)">
      <summary>使用指定的实例 ID、记录号、活动和子活动初始化 <see cref="T:System.Activities.Tracking.ActivityScheduledRecord" /> 类的新实例。</summary>
      <param name="instanceId">所安排活动的实例 ID。</param>
      <param name="recordNumber">一个指示跟踪记录生成顺序的序列。</param>
      <param name="activity">发出已安排执行请求的活动。</param>
      <param name="child">安排的活动。</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledRecord.Activity">
      <summary>获取活动的 <see cref="T:System.Activities.Tracking.ActivityInfo" />。</summary>
      <returns>活动信息。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityScheduledRecord.Child">
      <summary>获取子活动的 <see cref="T:System.Activities.Tracking.ActivityInfo" />。</summary>
      <returns>子活动信息。</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityScheduledRecord.ToString">
      <summary>返回一个字符串，其中包含 <see cref="T:System.Activities.Tracking.ActivityScheduledRecord" /> 的所有详细信息。</summary>
      <returns>跟踪记录详细信息。</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStateQuery">
      <summary>当添加到 <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> 时，订阅活动状态记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateQuery.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.ActivityStateQuery" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.ActivityName">
      <summary>获取从中订阅跟踪记录的活动的名称。</summary>
      <returns>活动名称。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.Arguments">
      <summary>获取与此活动查询关联的参数的集合。</summary>
      <returns>参数的集合。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.States">
      <summary>获取应为其发出跟踪记录的已订阅活动的状态。</summary>
      <returns>状态的集合。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateQuery.Variables">
      <summary>获取与此活动查询关联的变量的集合。</summary>
      <returns>变量的集合。</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStateRecord">
      <summary>表示在活动更改状态时创建的跟踪记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.String)">
      <summary>使用指定的实例 ID、记录号、活动和活动状态初始化 <see cref="T:System.Activities.Tracking.ActivityStateRecord" /> 类的新实例。</summary>
      <param name="instanceId">活动的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
      <param name="activity">活动。</param>
      <param name="state">活动状态。</param>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Activity">
      <summary>获取一个 <see cref="T:System.Activities.Tracking.ActivityInfo" />，其中包含在生成记录时有关活动的信息。</summary>
      <returns>活动信息。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Arguments">
      <summary>获取在生成记录时与活动关联的跟踪参数的值。</summary>
      <returns>一个包含参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.State">
      <summary>获取在生成记录时活动的当前状态。</summary>
      <returns>活动状态。</returns>
    </member>
    <member name="M:System.Activities.Tracking.ActivityStateRecord.ToString">
      <summary>返回一个字符串，其中包含跟踪记录的所有详细信息。</summary>
      <returns>跟踪数据。</returns>
    </member>
    <member name="P:System.Activities.Tracking.ActivityStateRecord.Variables">
      <summary>获取在生成记录时与活动关联的跟踪变量的当前值。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="T:System.Activities.Tracking.ActivityStates">
      <summary>指定活动的状态。</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Canceled">
      <summary>活动状态为已取消。</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Closed">
      <summary>活动状态为已关闭。</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Executing">
      <summary>活动状态为正在执行。</summary>
    </member>
    <member name="F:System.Activities.Tracking.ActivityStates.Faulted">
      <summary>活动状态为已出错。</summary>
    </member>
    <member name="T:System.Activities.Tracking.BookmarkResumptionQuery">
      <summary>添加到 <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> 集合时，当查询跟踪配置文件来搜索 <see cref="T:System.Activities.Tracking.TrackingRecord" /> 对象时订阅书签恢复记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionQuery.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.BookmarkResumptionQuery" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionQuery.Name">
      <summary>获取或设置要订阅的书签记录的名称。</summary>
      <returns>书签名。</returns>
    </member>
    <member name="T:System.Activities.Tracking.BookmarkResumptionRecord">
      <summary>包含运行时跟踪基础结构在恢复 <see cref="T:System.Activities.Bookmark" /> 时发送给跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionRecord.#ctor(System.Guid,System.Int64,System.Guid,System.String,System.Activities.Tracking.ActivityInfo)">
      <summary>使用指定的实例 ID、记录号、书签范围、书签名称和所有者初始化 <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> 类的新实例。</summary>
      <param name="instanceId">关联活动的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
      <param name="bookmarkScope">关联活动的 <see cref="T:System.Activities.BookmarkScope" /> 的 ID。</param>
      <param name="bookmarkName">书签名。</param>
      <param name="owner">正在等待书签恢复的活动。</param>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.BookmarkName">
      <summary>获取工作流执行引擎恢复的 <see cref="T:System.Activities.Bookmark" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> 引用的 <see cref="T:System.Activities.Bookmark" /> 的名称。</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.BookmarkScope">
      <summary>获取与此书签关联的 <see cref="T:System.Activities.BookmarkScope" /> 的范围 ID。</summary>
      <returns>范围 ID。</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.Owner">
      <summary>获取有关正在等待书签恢复的 <see cref="T:System.Activities.Tracking.ActivityInfo" /> 对象的信息。</summary>
      <returns>活动信息。</returns>
    </member>
    <member name="P:System.Activities.Tracking.BookmarkResumptionRecord.Payload">
      <summary>获取在恢复 <see cref="T:System.Activities.Bookmark" /> 时提供的值。</summary>
      <returns>在恢复 <see cref="T:System.Activities.Bookmark" /> 时提供的值。</returns>
    </member>
    <member name="M:System.Activities.Tracking.BookmarkResumptionRecord.ToString">
      <summary>返回一个表示当前 <see cref="T:System.Activities.Tracking.BookmarkResumptionRecord" /> 对象的 <see cref="T:System.String" />。</summary>
      <returns>当前对象。</returns>
    </member>
    <member name="T:System.Activities.Tracking.CancelRequestedQuery">
      <summary>添加到 <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> 集合时，当查询跟踪配置文件来搜索跟踪记录时订阅取消请求记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedQuery.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.CancelRequestedQuery" /> 对象的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedQuery.ActivityName">
      <summary>请求取消的活动的名称</summary>
      <returns>活动名称。</returns>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedQuery.ChildActivityName">
      <summary>已请求将其取消的子活动的名称。</summary>
      <returns>子活动名称。</returns>
    </member>
    <member name="T:System.Activities.Tracking.CancelRequestedRecord">
      <summary>表示在调用 <see cref="M:System.Activities.ActivityExecutionContext.CancelChild" /> 或 <see cref="M:System.Activities.ActivityExecutionContext.CancelChildren" /> 时由工作流运行时发送给跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo)">
      <summary>使用指定的实例 ID、记录号、活动和子活动创建 <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成事件的活动的实例 ID。</param>
      <param name="recordNumber">一个定义生成的跟踪事件顺序的序列。</param>
      <param name="activity">发出取消请求的活动。</param>
      <param name="child">要取消的活动。</param>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedRecord.Activity">
      <summary>获取请求取消的活动的 <see cref="T:System.Activities.Tracking.ActivityInfo" />。</summary>
      <returns>活动信息。</returns>
    </member>
    <member name="P:System.Activities.Tracking.CancelRequestedRecord.Child">
      <summary>获取要取消的活动的 <see cref="T:System.Activities.Tracking.ActivityInfo" />。</summary>
      <returns>活动信息。</returns>
    </member>
    <member name="M:System.Activities.Tracking.CancelRequestedRecord.ToString">
      <summary>返回表示当前 <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> 对象的字符串。</summary>
      <returns>跟踪数据。</returns>
    </member>
    <member name="T:System.Activities.Tracking.CustomTrackingQuery">
      <summary>添加到 <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> 时，当查询跟踪配置文件来搜索自定义记录时订阅自定义跟踪记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingQuery.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.CustomTrackingQuery" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingQuery.ActivityName">
      <summary>获取或设置生成跟踪记录的活动的名称。</summary>
      <returns>发出自定义跟踪记录的活动的名称。</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingQuery.Name">
      <summary>获取或设置发出的自定义跟踪记录的名称。</summary>
      <returns>自定义跟踪记录名称。</returns>
    </member>
    <member name="T:System.Activities.Tracking.CustomTrackingRecord">
      <summary>包含由运行时跟踪基础结构在引发自定义跟踪记录时发送到跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.Activities.Tracking.CustomTrackingRecord)">
      <summary>基于指定 <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> 实例中的信息创建 <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> 类的新实例。</summary>
      <param name="record">要使用的自定义跟踪记录实例。</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.Guid,System.String,System.Diagnostics.TraceLevel)">
      <summary>使用指定的实例 ID、自定义跟踪记录名称和跟踪级别创建 <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> 类的新实例。</summary>
      <param name="instanceId">活动的 ID。</param>
      <param name="name">自定义跟踪记录的名称。</param>
      <param name="level">跟踪记录使用的跟踪级别。</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.String)">
      <summary>使用指定的自定义跟踪记录名称创建 <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> 类的新实例。</summary>
      <param name="name">自定义跟踪记录的名称。</param>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.#ctor(System.String,System.Diagnostics.TraceLevel)">
      <summary>使用指定的自定义跟踪记录名称和跟踪级别创建 <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> 类的新实例。</summary>
      <param name="name">自定义跟踪记录的名称。</param>
      <param name="level">跟踪记录使用的跟踪级别。</param>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Activity">
      <summary>返回与此记录关联的活动的 <see cref="T:System.Activities.Tracking.ActivityInfo" />。</summary>
      <returns>活动信息。</returns>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.Clone">
      <summary>创建 <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> 的副本。</summary>
      <returns>
        <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> 实例的副本。</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Data">
      <summary>获取与此跟踪记录关联的用户定义数据。</summary>
      <returns>用户定义的数据。</returns>
    </member>
    <member name="P:System.Activities.Tracking.CustomTrackingRecord.Name">
      <summary>获取可区分此跟踪记录的名称。</summary>
      <returns>可区分此跟踪记录的名称。</returns>
    </member>
    <member name="M:System.Activities.Tracking.CustomTrackingRecord.ToString">
      <summary>返回一个字符串，其中包含跟踪记录数据。</summary>
      <returns>跟踪记录数据。</returns>
    </member>
    <member name="T:System.Activities.Tracking.EtwTrackingParticipant">
      <summary>工作流跟踪数据的使用者，它将向包含跟踪记录中的数据的 ETW 会话发出 Windows 事件跟踪 (ETW) 事件。</summary>
    </member>
    <member name="M:System.Activities.Tracking.EtwTrackingParticipant.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.EtwTrackingParticipant" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.EtwTrackingParticipant.ApplicationReference">
      <summary>获取此跟踪参与者创建的 ETW 提供程序所使用的引用值。</summary>
      <returns>引用值。</returns>
    </member>
    <member name="P:System.Activities.Tracking.EtwTrackingParticipant.EtwProviderId">
      <summary>获取此跟踪参与者创建的 ETW 提供程序所使用的提供程序 ID。</summary>
      <returns>提供程序 ID。</returns>
    </member>
    <member name="T:System.Activities.Tracking.FaultPropagationQuery">
      <summary>添加到 <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> 集合时，当查询跟踪配置文件来搜索跟踪记录时订阅错误传播记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationQuery.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.FaultPropagationQuery" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationQuery.FaultHandlerActivityName">
      <summary>获取传播错误的错误处理程序活动的名称。</summary>
      <returns>活动名称。</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationQuery.FaultSourceActivityName">
      <summary>获取导致错误的活动的名称。</summary>
      <returns>活动名称</returns>
    </member>
    <member name="T:System.Activities.Tracking.FaultPropagationRecord">
      <summary>包含在从工作流活动中传播错误时运行时跟踪基础结构发送给跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationRecord.#ctor(System.Guid,System.Int64,System.Activities.Tracking.ActivityInfo,System.Activities.Tracking.ActivityInfo,System.Boolean,System.Exception)">
      <summary>创建 <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成事件的活动的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪事件生成顺序的序列。</param>
      <param name="faultSource">作为错误源的活动。</param>
      <param name="faultHandler">作为错误处理器的活动。</param>
      <param name="isFaultSource">如果此处理器是异常的第一个处理器，则为 true；如果此处理器是错误的后续处理器，则为 false。</param>
      <param name="fault">异常详细信息。</param>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.Fault">
      <summary>获取错误中包含的异常数据。</summary>
      <returns>异常数据。</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.FaultHandler">
      <summary>获取错误处理器的 <see cref="T:System.Activities.Tracking.ActivityInfo" />。</summary>
      <returns>活动信息。</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.FaultSource">
      <summary>获取生成错误的活动的 <see cref="T:System.Activities.Tracking.ActivityInfo" />。</summary>
      <returns>活动信息。</returns>
    </member>
    <member name="P:System.Activities.Tracking.FaultPropagationRecord.IsFaultSource">
      <summary>一个值，该值指示此处理器是否为错误的第一个处理器。</summary>
      <returns>如果这是异常的第一个处理器，则为 true。 如果此处理器是错误的后续处理器，则为 false。</returns>
    </member>
    <member name="M:System.Activities.Tracking.FaultPropagationRecord.ToString">
      <summary>返回表示当前 <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> 对象的字符串。</summary>
      <returns>跟踪数据。</returns>
    </member>
    <member name="T:System.Activities.Tracking.ImplementationVisibility">
      <summary>描述跟踪配置文件内的可见性模式。</summary>
    </member>
    <member name="F:System.Activities.Tracking.ImplementationVisibility.All">
      <summary>发出所有跟踪记录。</summary>
    </member>
    <member name="F:System.Activities.Tracking.ImplementationVisibility.RootScope">
      <summary>只会发出根活动及其工作流实现。</summary>
    </member>
    <member name="T:System.Activities.Tracking.TrackingParticipant">
      <summary>与工作流跟踪基础结构交互并访问跟踪记录的工作流扩展的基类。</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.#ctor">
      <summary>在派生类中实现时，创建派生类的新实例。</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.BeginTrack(System.Activities.Tracking.TrackingRecord,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>在派生类中实现时，开始跟踪记录的异步处理。</summary>
      <returns>操作的结果。</returns>
      <param name="record">生成的跟踪记录。</param>
      <param name="timeout">时间段，在该时间段后提供程序将中止尝试。</param>
      <param name="callback">要在操作完成时调用的方法。</param>
      <param name="state">一个用户定义的对象，该对象唯一标识此异步操作。</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.EndTrack(System.IAsyncResult)">
      <summary>在派生类中实现时，表示异步跟踪操作结束。</summary>
      <param name="result">操作的状态。</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingParticipant.Track(System.Activities.Tracking.TrackingRecord,System.TimeSpan)">
      <summary>在派生类中实现时，用于以异步方式处理跟踪记录。</summary>
      <param name="record">生成的跟踪记录。</param>
      <param name="timeout">时间段，在该时间段后提供程序将中止尝试。</param>
    </member>
    <member name="P:System.Activities.Tracking.TrackingParticipant.TrackingProfile">
      <summary>跟踪参与者使用的跟踪配置文件对象。 将跟踪参与者添加到工作流扩展之前，将在参与者上设置跟踪配置文件。</summary>
      <returns>跟踪配置文件。</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingProfile">
      <summary>在 <see cref="T:System.Activities.Tracking.TrackingParticipant" /> 中创建工作流跟踪记录订阅。</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingProfile.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.TrackingProfile" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.ActivityDefinitionId">
      <summary>获取或设置跟踪配置文件的活动定义 ID。</summary>
      <returns>活动定义 ID。</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.ImplementationVisibility">
      <summary>获取或设置一个值，该值对从顶级活动内的嵌套活动（构成另一个活动的实现的活动）中发出的跟踪记录进行筛选。</summary>
      <returns>一个 <see cref="T:System.Activities.Tracking.ImplementationVisibility" /> 对象，该对象指示要筛选的记录的范围。 默认值为 <see cref="F:System.Activities.Tracking.ImplementationVisibility.RootScope" />。</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.Name">
      <summary>获取跟踪配置文件的显示名称。</summary>
      <returns>配置文件名称。</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingProfile.Queries">
      <summary>获取 <see cref="T:System.Activities.Tracking.TrackingQuery" /> 对象的集合，这些对象定义此跟踪配置文件订阅的记录。</summary>
      <returns>查询的集合。</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingQuery">
      <summary>所有跟踪查询的基类。 用于为 <see cref="T:System.Activities.Tracking.TrackingProfile" /> 创建订阅定义的跟踪查询。</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingQuery.#ctor">
      <summary>在派生类中实现时，创建派生类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.TrackingQuery.QueryAnnotations">
      <summary>名称/值对形式的数据集合，它与此查询返回的数据包括在一起。</summary>
      <returns>批注的集合。</returns>
    </member>
    <member name="T:System.Activities.Tracking.TrackingRecord">
      <summary>所有工作流跟踪记录均派生自其中的抽象类。 跟踪记录表示在跟踪的事件发生时发送到跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Activities.Tracking.TrackingRecord)">
      <summary>在派生类中实现时，使用指定的实例跟踪记录创建派生类的新实例。</summary>
      <param name="record">生成工作流活动的跟踪记录。</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Guid)">
      <summary>在派生类中实现时，使用指定的实例 ID 创建派生类的新实例。</summary>
      <param name="instanceId">生成工作流实例的 ID。</param>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.#ctor(System.Guid,System.Int64)">
      <summary>在派生类中实现时，使用指定的实例 ID 和记录号创建派生类的新实例。</summary>
      <param name="instanceId">生成工作流实例的 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.Annotations">
      <summary>在派生类中实现时，表示添加到此跟踪记录的名称/值对的集合。</summary>
      <returns>要添加到此跟踪记录的元素的字典。</returns>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.Clone">
      <summary>创建 <see cref="T:System.Activities.Tracking.TrackingRecord" /> 的副本。</summary>
      <returns>
        <see cref="T:System.Activities.Tracking.TrackingRecord" /> 的副本。</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.EventTime">
      <summary>在派生类中实现时，表示跟踪记录发生时的时间。</summary>
      <returns>事件时间。</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.InstanceId">
      <summary>在派生类中实现时，表示生成工作流实例的 ID。</summary>
      <returns>元素 ID。</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.Level">
      <summary>获取事件的 <see cref="T:System.Diagnostics.TraceLevel" />。</summary>
      <returns>跟踪级别。</returns>
    </member>
    <member name="P:System.Activities.Tracking.TrackingRecord.RecordNumber">
      <summary>一个定义跟踪记录生成顺序的序列。</summary>
      <returns>序列顺序。</returns>
    </member>
    <member name="M:System.Activities.Tracking.TrackingRecord.ToString">
      <summary>在派生类中实现时，返回一个包含记录中的所有跟踪数据的字符串。</summary>
      <returns>跟踪数据。</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord">
      <summary>包含运行时跟踪基础结构在工作流实例中止时发送给跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已中止工作流的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
      <param name="activityDefinitionId">根工作流活动的显示名称。</param>
      <param name="reason">中止工作流的原因。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已中止工作流的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
      <param name="activityDefinitionId">根工作流活动的显示名称。</param>
      <param name="reason">中止工作流的原因。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已中止工作流的实例 ID。</param>
      <param name="activityDefinitionId">根工作流活动的显示名称。</param>
      <param name="reason">中止工作流的原因。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.#ctor(System.Guid,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceAbortedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已中止工作流的实例 ID。</param>
      <param name="activityDefinitionId">根工作流活动的显示名称。</param>
      <param name="reason">中止工作流的原因。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceAbortedRecord.Reason">
      <summary>获取一个字符串，该字符串描述中止工作流的原因。</summary>
      <returns>中止工作流的原因。</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceAbortedRecord.ToString">
      <summary>返回一个字符串，其中包含跟踪记录数据。</summary>
      <returns>跟踪记录数据。</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceQuery">
      <summary>添加到 <see cref="P:System.Activities.Tracking.TrackingProfile.Queries" /> 集合时，当创建了跟踪配置文件来订阅跟踪记录时订阅工作流实例记录。</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceQuery.#ctor">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceQuery" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceQuery.States">
      <summary>创建跟踪记录时已跟踪工作流实例中的一个已订阅状态。</summary>
      <returns>工作流状态。</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceRecord">
      <summary>包含运行时跟踪基础结构在工作流实例更改状态时发送给跟踪服务的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Activities.Tracking.WorkflowInstanceRecord)">
      <summary>从现有 <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> 实例创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> 类的新实例。</summary>
      <param name="record">要使用的工作流实例记录的实例。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流实例的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪事件生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="state">在生成记录时工作流的当前状态。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流实例的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪事件生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="state">在生成记录时工作流的当前状态。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流实例的实例 ID。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="state">在生成记录时工作流的当前状态。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.#ctor(System.Guid,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流实例的实例 ID。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="state">在生成记录时工作流的当前状态。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.ActivityDefinitionId">
      <summary>返回生成此记录的工作流的根活动的显示名称。</summary>
      <returns>活动定义 ID。</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.Clone">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> 的深层副本。</summary>
      <returns>
        <see cref="T:System.Activities.Tracking.WorkflowInstanceRecord" /> 的深层副本。</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.State">
      <summary>在生成记录时工作流的当前状态。</summary>
      <returns>工作流状态。</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceRecord.ToString">
      <summary>返回一个字符串，其中包含跟踪记录数据。</summary>
      <returns>跟踪数据。</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceRecord.WorkflowDefinitionIdentity">
      <summary>获取或设置工作流标识的信息。</summary>
      <returns>关于工作流标识的信息。</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceStates">
      <summary>指定工作流实例的状态。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Aborted">
      <summary>工作流实例已中止。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Canceled">
      <summary>工作流实例已取消。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Completed">
      <summary>工作流实例已完成。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Deleted">
      <summary>工作流实例已删除。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Idle">
      <summary>工作流实例处于空闲状态。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Persisted">
      <summary>工作流实例已保留。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Resumed">
      <summary>工作流实例已恢复。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Started">
      <summary>工作流实例已启动。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Suspended">
      <summary>工作流实例已挂起。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Terminated">
      <summary>工作流实例已终止。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.UnhandledException">
      <summary>工作流实例遇到了未经处理的异常。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Unloaded">
      <summary>工作流实例已卸载。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Unsuspended">
      <summary>工作流实例已取消挂起。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.Updated">
      <summary>工作流实例已更新。</summary>
    </member>
    <member name="F:System.Activities.Tracking.WorkflowInstanceStates.UpdateFailed">
      <summary>未能更新的工作流实例。</summary>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord">
      <summary>包含运行时跟踪基础结构在工作流实例挂起时发送给跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已挂起工作流的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="reason">挂起工作流的原因。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已挂起工作流的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="reason">挂起工作流的原因。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已挂起工作流的实例 ID。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="reason">挂起工作流的原因。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.#ctor(System.Guid,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceSuspendedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已挂起工作流的实例 ID。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="reason">挂起工作流的原因。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.Reason">
      <summary>获取一个字符串，该字符串描述挂起工作流实例的原因。</summary>
      <returns>挂起工作流的原因。</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceSuspendedRecord.ToString">
      <summary>返回一个字符串，其中包含跟踪记录数据。</summary>
      <returns>跟踪记录数据。</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord">
      <summary>包含运行时跟踪基础结构在工作流终止时发送给跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.Int64,System.String,System.String)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已终止工作流的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="reason">终止工作流的原因。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.Int64,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已终止工作流的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪记录生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="reason">终止工作流的原因。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.String,System.String)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已终止工作流的实例 ID。</param>
      <param name="activityDefinitionId">活动定义的 ID。</param>
      <param name="reason">终止工作流的原因。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.#ctor(System.Guid,System.String,System.String,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceTerminatedRecord" /> 类的新实例。</summary>
      <param name="instanceId">已终止工作流的实例 ID。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="reason">终止工作流的原因。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.Reason">
      <summary>获取一个字符串，该字符串描述终止工作流实例的原因。</summary>
      <returns>终止工作流的原因。</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceTerminatedRecord.ToString">
      <summary>返回一个字符串，其中包含跟踪记录数据。</summary>
      <returns>跟踪记录数据。</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord">
      <summary>包含运行时跟踪基础结构在工作流实例遇到未经处理的异常时发送给跟踪参与者的数据。</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.Tracking.ActivityInfo,System.Exception)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流实例的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪事件生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="faultSource">生成错误的活动。</param>
      <param name="exception">未经处理的异常数据。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.Tracking.ActivityInfo,System.Exception,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流实例的实例 ID。</param>
      <param name="recordNumber">一个定义跟踪事件生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="faultSource">生成错误的活动。</param>
      <param name="exception">未经处理的异常数据。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.String,System.Activities.Tracking.ActivityInfo,System.Exception)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流实例的实例 ID。</param>
      <param name="activityDefinitionId">生成工作流活动的活动定义 ID。</param>
      <param name="faultSource">生成错误的活动。</param>
      <param name="exception">未经处理的异常数据。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.#ctor(System.Guid,System.String,System.Activities.Tracking.ActivityInfo,System.Exception,System.Activities.WorkflowIdentity)">
      <summary>创建 <see cref="T:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流实例的实例 ID。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="faultSource">生成错误的活动。</param>
      <param name="exception">未经处理的异常数据。</param>
      <param name="workflowDefinitionIdentity">关于工作流标识的信息。</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.FaultSource">
      <summary>返回生成错误的活动。</summary>
      <returns>出现错误的活动。</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.ToString">
      <summary>返回跟踪记录数据。</summary>
      <returns>跟踪数据。</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord.UnhandledException">
      <summary>获取未经处理的异常数据。</summary>
      <returns>异常数据。</returns>
    </member>
    <member name="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord">
      <summary>指定有关更新记录的信息。</summary>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
      <summary>初始化 <see cref="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流的实例标识。</param>
      <param name="recordNumber">一个定义跟踪事件生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="originalDefinitionIdentity">工作流的原始定义标识。</param>
      <param name="updatedDefinitionIdentity">工作流的更新和定义标识。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.Int64,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
      <summary>初始化 <see cref="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流的实例标识。</param>
      <param name="recordNumber">一个定义跟踪事件生成顺序的序列。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="originalDefinitionIdentity">工作流的原始定义标识。</param>
      <param name="updatedDefinitionIdentity">工作流的更新和定义标识。</param>
      <param name="blockingActivities">工作流的阻止活动。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity)">
      <summary>初始化 <see cref="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流的实例标识。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="originalDefinitionIdentity">工作流的原始定义标识。</param>
      <param name="updatedDefinitionIdentity">工作流的更新和定义标识。</param>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.#ctor(System.Guid,System.String,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentity,System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate})">
      <summary>初始化 <see cref="T:System.Activities.Tracking.WorkflowInstanceUpdatedRecord" /> 类的新实例。</summary>
      <param name="instanceId">生成工作流的实例标识。</param>
      <param name="activityDefinitionId">工作流的根活动的显示名称。</param>
      <param name="originalDefinitionIdentity">工作流的原始定义标识。</param>
      <param name="updatedDefinitionIdentity">工作流的更新和定义标识。</param>
      <param name="blockingActivities">工作流的阻止活动。</param>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.BlockingActivities">
      <summary>获取或设置已更新记录的实例的阻止活动列表。</summary>
      <returns>阻止活动的列表。</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.IsSuccessful">
      <summary>获取指示工作流事例的更新记录是否成功的值。</summary>
      <returns>如果工作流事例更新记录成功，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.OriginalDefinitionIdentity">
      <summary>获取或设置工作流标识的原始定义。</summary>
      <returns>工作流标识的原始定义。</returns>
    </member>
    <member name="M:System.Activities.Tracking.WorkflowInstanceUpdatedRecord.ToString">
      <summary>返回一个字符串，其中包含跟踪记录数据。</summary>
      <returns>一个字符串，其中包含跟踪记录数据。</returns>
    </member>
    <member name="T:System.Activities.Validation.ActivityValidationServices">
      <summary>提供验证工作流的功能。</summary>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Resolve(System.Activities.Activity,System.String)">
      <summary>在指定工作流中检索具有指定 ID 的工作流活动。</summary>
      <returns>工作流活动。</returns>
      <param name="root">包含要访问的活动元素的根工作流活动。</param>
      <param name="id">与活动关联的标识符。</param>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)">
      <summary>验证是否已依据验证逻辑正确配置了工作流活动。 此逻辑可以是要验证的活动的 <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> 方法，也可以是生成和策略约束。</summary>
      <returns>验证错误的集合，其中每个错误都可包含验证活动的名称、描述性消息、错误代码及其他信息。</returns>
      <param name="toValidate">工作流活动树中的元素。</param>
    </member>
    <member name="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity,System.Activities.Validation.ValidationSettings)">
      <summary>验证是否已依据验证逻辑正确配置了工作流活动。 此逻辑可以是要验证的活动的 cacheMetadata 方法，也可以是生成和策略约束。</summary>
      <returns>验证错误的集合，其中每个错误都可包含未正确配置的活动的名称、描述性消息、错误或警告代码及其他信息。</returns>
      <param name="toValidate">工作流活动树中的活动。</param>
      <param name="settings">一个确定工作流上验证方法的行为的对象，可以取消内部验证逻辑，也可以包含策略约束。</param>
    </member>
    <member name="T:System.Activities.Validation.AddValidationError">
      <summary>在执行之前将指定的活动验证错误添加到活动中。</summary>
    </member>
    <member name="M:System.Activities.Validation.AddValidationError.#ctor">
      <summary>创建 <see cref="T:System.Activities.Validation.AddValidationError" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.IsWarning">
      <summary>获取或设置一个值，该值指示发生的验证错误是否为警告而不是错误。</summary>
      <returns>如果发生的错误是警告而不是错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.Message">
      <summary>获取或设置包含错误说明的字母数字字符串。</summary>
      <returns>错误说明。</returns>
    </member>
    <member name="P:System.Activities.Validation.AddValidationError.PropertyName">
      <summary>获取或设置导致错误的属性的名称。</summary>
      <returns>导致错误的属性的名称。</returns>
    </member>
    <member name="T:System.Activities.Validation.AssertValidation">
      <summary>在断言条件的计算结果为 false 的情况下，将约束冲突添加到约束冲突的列表。</summary>
    </member>
    <member name="M:System.Activities.Validation.AssertValidation.#ctor">
      <summary>创建 <see cref="T:System.Activities.Validation.AssertValidation" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.Assertion">
      <summary>获取或设置一个值，该值指示断言验证解析为 true 还是 false。</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.IsWarning">
      <summary>获取或设置值，该值指示断言验证的结果是警告还是错误。</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.Message">
      <summary>获取或设置声明断言验证结果的文本字符串。</summary>
      <returns>
        <see cref="T:System.Activities.InArgument`1" />.</returns>
    </member>
    <member name="P:System.Activities.Validation.AssertValidation.PropertyName">
      <summary>获取或设置与断言验证关联的属性的名称。</summary>
      <returns>一个 InArgument，其中包含与断言验证关联的属性的名称。</returns>
    </member>
    <member name="T:System.Activities.Validation.Constraint">
      <summary>处理用于验证活动的验证约束。</summary>
    </member>
    <member name="M:System.Activities.Validation.Constraint.AddValidationError(System.Activities.NativeActivityContext,System.Activities.Validation.ValidationError)">
      <summary>将验证错误添加到附加到执行上下文的运行时验证错误的列表。</summary>
      <param name="context">工作流活动的执行环境。</param>
      <param name="error">在工作流运行时期间发生的验证错误。</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>创建一个 <see cref="T:System.Activities.NativeActivityMetadata" /> 对象，该对象包含工作流验证过程的运行时参数。</summary>
      <param name="metadata">一个 <see cref="T:System.Activities.NativeActivityMetadata" /> 对象，该对象将成为验证运行时参数列表的容器。</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.Execute(System.Activities.NativeActivityContext)">
      <summary>调用验证活动的进程。</summary>
      <param name="context">工作流活动的执行环境。</param>
    </member>
    <member name="M:System.Activities.Validation.Constraint.OnExecute(System.Activities.NativeActivityContext,System.Object,System.Activities.Validation.ValidationContext)">
      <summary>由派生类实现时，使用指定的本机活动和验证上下文来验证指定的对象。</summary>
      <param name="context">工作流活动执行。</param>
      <param name="objectToValidate">要验证的活动。</param>
      <param name="objectToValidateContext">要验证的活动的上下文。</param>
    </member>
    <member name="F:System.Activities.Validation.Constraint.ValidationErrorListPropertyName">
      <summary>活动约束属性的名称，该属性是工作流运行验证错误的列表。</summary>
    </member>
    <member name="T:System.Activities.Validation.Constraint`1">
      <summary>处理用于对类型为 T 的元素进行验证的约束。</summary>
      <typeparam name="T">要验证的元素的类型。</typeparam>
    </member>
    <member name="M:System.Activities.Validation.Constraint`1.#ctor">
      <summary>创建 <see cref="T:System.Activities.Validation.Constraint`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Validation.Constraint`1.Body">
      <summary>获取或设置验证逻辑。</summary>
      <returns>
        <see cref="T:System.Activities.ActivityAction" /> 委托。</returns>
    </member>
    <member name="T:System.Activities.Validation.GetChildSubtree">
      <summary>从活动的实例中检索工作流子活动。</summary>
    </member>
    <member name="M:System.Activities.Validation.GetChildSubtree.#ctor">
      <summary>创建 <see cref="T:System.Activities.Validation.GetChildSubtree" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Validation.GetChildSubtree.ValidationContext">
      <summary>获取或设置充当活动参数并向活动提供其验证过程所需信息的属性。</summary>
      <returns>活动的一个参数，该参数为活动的验证过程提供信息。</returns>
    </member>
    <member name="T:System.Activities.Validation.GetParentChain">
      <summary>检索属于活动的父轴的所有活动的集合。</summary>
    </member>
    <member name="M:System.Activities.Validation.GetParentChain.#ctor">
      <summary>创建 <see cref="T:System.Activities.Validation.GetParentChain" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Validation.GetParentChain.ValidationContext">
      <summary>获取或设置充当活动参数并向活动提供其验证过程所需信息的属性。</summary>
      <returns>活动的一个参数，该参数为活动的验证过程提供信息。</returns>
    </member>
    <member name="T:System.Activities.Validation.GetWorkflowTree">
      <summary>从活动的实例中检索工作流树。</summary>
    </member>
    <member name="M:System.Activities.Validation.GetWorkflowTree.#ctor">
      <summary>创建 <see cref="T:System.Activities.Validation.GetWorkflowTree" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Validation.GetWorkflowTree.ValidationContext">
      <summary>获取或设置充当活动参数并向活动提供其验证过程所需信息的属性。</summary>
      <returns>活动的一个参数，该参数为活动的验证过程提供信息。</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationContext">
      <summary>基于工作流树中当前节点的正确上下文生成结果。</summary>
    </member>
    <member name="T:System.Activities.Validation.ValidationError">
      <summary>表示在执行工作流之前发生的验证错误的实例。</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String)">
      <summary>使用指定的错误消息创建 <see cref="T:System.Activities.Validation.ValidationError" /> 类的新实例。</summary>
      <param name="message">有关错误的信息。</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean)">
      <summary>使用指定的错误消息和警告指示创建 <see cref="T:System.Activities.Validation.ValidationError" /> 类的新实例。</summary>
      <param name="message">错误消息。</param>
      <param name="isWarning">如果错误是警告，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean,System.String)">
      <summary>使用指定的错误消息、警告指示器和导致错误的属性的名称创建 <see cref="T:System.Activities.Validation.ValidationError" /> 类的新实例。</summary>
      <param name="message">错误消息。</param>
      <param name="isWarning">指示错误是否为警告的指示器。</param>
      <param name="propertyName">生成错误的属性的字母数字名称。</param>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.#ctor(System.String,System.Boolean,System.String,System.Object)">
      <summary>使用指定的错误消息、警告指示器、属性名称和导致错误的源细节创建 <see cref="T:System.Activities.Validation.ValidationError" /> 类的新实例。</summary>
      <param name="message">错误消息。</param>
      <param name="isWarning">指示错误是否为警告的指示器。</param>
      <param name="propertyName">生成错误的属性的字母数字名称。</param>
      <param name="sourceDetail">有关该错误源的详细信息。</param>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Id">
      <summary>作为错误源的 <see cref="T:System.Activities.Activity" /> 的唯一字母数字标识符。 此标识符对于特定工作流中的每个活动是唯一的。</summary>
      <returns>该活动的标识符为该错误的源。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.IsWarning">
      <summary>获取一个值，该值指示验证错误是否为警告而不是错误。</summary>
      <returns>如果验证错误是警告，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Message">
      <summary>获取一条提供有关验证错误的信息的字母数字消息。</summary>
      <returns>提供验资错误相关信息的消息。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.PropertyName">
      <summary>获取生成错误的属性的字母数字名称。</summary>
      <returns>生成错误的属性的名称。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.Source">
      <summary>获取作为错误源的活动。</summary>
      <returns>作为错误源的活动。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationError.SourceDetail">
      <summary>获取有关该错误源的详细信息。</summary>
      <returns>有关该错误源的详细信息。</returns>
    </member>
    <member name="M:System.Activities.Validation.ValidationError.ToString">
      <summary>将验证错误属性名称和值转换为列出这些名称和值的消息字符串。</summary>
      <returns>验证错误的字符串表示形式。</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationResults">
      <summary>包含由 <see cref="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" /> 在验证工作流时生成的所有验证错误。这些错误包含在 <see cref="P:System.Activities.Validation.ValidationResults.Errors" /> 和 <see cref="P:System.Activities.Validation.ValidationResults.Warnings" /> 集合中。</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationResults.#ctor(System.Collections.Generic.IList{System.Activities.Validation.ValidationError})">
      <summary>初始化 <see cref="T:System.Activities.Validation.ValidationResults" /> 类的新实例。</summary>
      <param name="allValidationErrors">验证错误和警告的集合。</param>
    </member>
    <member name="P:System.Activities.Validation.ValidationResults.Errors">
      <summary>获取工作流验证错误的只读集合。</summary>
      <returns>验证错误的只读集合。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationResults.Warnings">
      <summary>获取工作流验证警告的只读集合。</summary>
      <returns>验证警告的只读集合。</returns>
    </member>
    <member name="T:System.Activities.Validation.ValidationSettings">
      <summary>表示可对 <see cref="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" /> 将展现的行为进行自定义的设置集合。 它还使活动用户能够将策略约束应用于工作流。</summary>
    </member>
    <member name="M:System.Activities.Validation.ValidationSettings.#ctor">
      <summary>创建 <see cref="T:System.Activities.Validation.ValidationSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.AdditionalConstraints">
      <summary>获取类型/约束对的字典。 添加至字典的每个附加约束将应用于要验证的工作流中指定类型的每个活动。</summary>
      <returns>约束和类型的字典类型列表。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.CancellationToken">
      <summary>获取或设置用于通知是否应取消活动的取消标记。</summary>
      <returns>用于通知应取消活动的取消标记。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.Environment">
      <summary>获取或设置与此验证设置关联的变量和参数的环境。</summary>
      <returns>与该验证设置相关的变量和参数的环境。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints">
      <summary>获取或设置一个值，该值指示是否要以独占方式使用附加验证约束来验证工作流。 如果设置为 true，则将忽略活动本身内包含的所有验证。</summary>
      <returns>如果要以独占方式使用附加约束，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.PrepareForRuntime">
      <summary>获取或设置一个值，该值指示是否为运行时准备好此实例。</summary>
      <returns>如果该实例准备运行时，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.SingleLevel">
      <summary>获取或设置一个值，该值指示是否对提供的活动以及所提供活动的所有子级和孙级进行验证，或者验证程序是否应只验证到提供的活动。</summary>
      <returns>如果要验证元素而不验证其子元素，则为 true；否则，如果要验证元素及其子级和孙级，则为    false。</returns>
    </member>
    <member name="P:System.Activities.Validation.ValidationSettings.SkipValidatingRootConfiguration">
      <summary>获取或设置一个值，该值指示根配置是否验证主题</summary>
      <returns>如果根配置不是验证对象，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityWithResultConverter">
      <summary>为工作流活动操作的结果类型提供类型转换。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultConverter.#ctor">
      <summary>创建 <see cref="T:System.Activities.XamlIntegration.ActivityWithResultConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultConverter.#ctor(System.Type)">
      <summary>使用活动结果所转换为的指定类型创建 <see cref="T:System.Activities.XamlIntegration.ActivityWithResultConverter" /> 类的新实例。</summary>
      <param name="type">活动结果所转换为的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer">
      <summary>确保将活动的结果正确地转换为可用于串行传输的字符串。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.#ctor">
      <summary>创建 <see cref="T:System.Activities.XamlIntegration.ActivityWithResultValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>返回一个指示，表明输入对象是否为可序列化为字符串的 <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" />。</summary>
      <returns>如果表达式可被序列化，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" /> 对象，将对该对象进行验证，以确定是否可将其转换为用于串行传输的字符串。</param>
      <param name="context">定义 <see cref="T:System.Activities.XamlIntegration.IValueSerializableExpression" /> 的序列化上下文。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityWithResultValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将指定的对象序列化为字符串。</summary>
      <returns>可序列化表达式的字符串版本。</returns>
      <param name="value">已转换为用于串行传输的字符串。</param>
      <param name="context">定义正在转换为字符串的对象的序列化上下文。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityXamlServices">
      <summary>创建以 XAML 形式描述的活动树的实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(System.Xaml.XamlReader)">
      <summary>将 x:Class 活动树从指定读取器映射到 <see cref="T:System.Activities.ActivityBuilder" /> 或 <see cref="T:System.Activities.ActivityBuilder`1" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlReader" />，它处理 <see cref="T:System.Activities.ActivityBuilder" /> 和活动 x:Class XAML 之间的转换。</returns>
      <param name="innerReader">x:Class 内容。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader(System.Xaml.XamlReader,System.Xaml.XamlSchemaContext)">
      <summary>使用指定的架构上下文将 x:Class 活动树从指定的读取器映射到 <see cref="T:System.Activities.ActivityBuilder" /> 或 <see cref="T:System.Activities.ActivityBuilder`1" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlReader" />，它处理 <see cref="T:System.Activities.ActivityBuilder" /> 和活动 x:Class XAML 之间的转换。</returns>
      <param name="innerReader">x:Class 内容。</param>
      <param name="schemaContext">架构上下文。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderWriter(System.Xaml.XamlWriter)">
      <summary>将 <see cref="T:System.Activities.ActivityBuilder" /> 或 <see cref="T:System.Activities.ActivityBuilder`1" /> 从指定写入器映射到 x:Class 活动树。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlWriter" />，它处理 <see cref="T:System.Activities.ActivityBuilder" /> 和活动 x:Class XAML 之间的转换。</returns>
      <param name="innerWriter">
        <see cref="T:System.Activities.ActivityBuilder" /> 或 <see cref="T:System.Activities.ActivityBuilder`1" /> 的内容。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateFactory``1(System.Xaml.XamlReader)">
      <summary>为指定 XAML 使用指定类型的返回值返回委托方法。</summary>
      <returns>具有 <paramref name="T" /> 类型返回值的指定的 XAML 读取器的委托方法。</returns>
      <param name="reader">XAML 读取器。</param>
      <typeparam name="T">此委托封装的方法的返回值类型。</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateFactory(System.Xaml.XamlReader,System.Type)">
      <summary>为指定 XAML 使用指定类型的返回值返回委托方法。</summary>
      <returns>具有指定类型返回值的指定的 XAML 读取器的委托方法。</returns>
      <param name="reader">XAML 读取器。</param>
      <param name="resultType">此委托封装的方法的返回值类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.IO.Stream)">
      <summary>将 x:Class 活动树从指定流映射到 <see cref="T:System.Activities.DynamicActivity" /> 或 <see cref="T:System.Activities.DynamicActivity`1" />。</summary>
      <returns>
        <see cref="T:System.Activities.ActivityBuilder" /> 或 <see cref="T:System.Activities.ActivityBuilder`1" /> 内容。</returns>
      <param name="stream">x:Class 内容。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.Xaml.XamlReader)">
      <summary>将 x:Class 活动树从指定读取器映射到 <see cref="T:System.Activities.DynamicActivity" /> 或 <see cref="T:System.Activities.DynamicActivity`1" />。</summary>
      <returns>
        <see cref="T:System.Activities.ActivityBuilder" /> 或 <see cref="T:System.Activities.ActivityBuilder`1" /> 内容。</returns>
      <param name="innerReader">x:Class 内容。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.CreateReader(System.Xaml.XamlReader,System.Xaml.XamlSchemaContext)">
      <summary>使用指定的架构上下文将 x:Class 活动树从指定的读取器映射到 <see cref="T:System.Activities.DynamicActivity" /> 或 <see cref="T:System.Activities.DynamicActivity`1" />。</summary>
      <returns>
        <see cref="T:System.Activities.ActivityBuilder" /> 或 <see cref="T:System.Activities.ActivityBuilder`1" /> 内容。</returns>
      <param name="innerReader">x:Class 内容。</param>
      <param name="schemaContext">架构上下文。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.InitializeComponent(System.Type,System.Object)">
      <summary>初始化指定的组件。</summary>
      <param name="componentType">组件的类型。</param>
      <param name="componentInstance">组件实例。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.Stream)">
      <summary>创建指定流中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="stream">工作流定义。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.Stream,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>创建指定流中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="stream">工作流定义。</param>
      <param name="settings">XAML 服务设置。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.TextReader)">
      <summary>创建指定文本读取器中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="textReader">工作流定义。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.IO.TextReader,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>创建指定文本读取器中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="textReader">工作流定义。</param>
      <param name="settings">XAML 服务设置。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.String)">
      <summary>创建指定文件中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="fileName">包含工作流定义的文件。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.String,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>创建指定文件中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="fileName">包含工作流定义的文件。</param>
      <param name="settings">XAML 服务设置。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xaml.XamlReader)">
      <summary>创建指定 XAML 读取器中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="xamlReader">工作流定义。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xaml.XamlReader,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>创建指定 XAML 读取器中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="xamlReader">工作流定义。</param>
      <param name="settings">XAML 服务设置。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xml.XmlReader)">
      <summary>创建指定 XML 读取器中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="xmlReader">工作流定义。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServices.Load(System.Xml.XmlReader,System.Activities.XamlIntegration.ActivityXamlServicesSettings)">
      <summary>创建指定 XML 读取器中描述的声明性工作流的实例。</summary>
      <returns>描述工作流的活动树的实例。</returns>
      <param name="xmlReader">工作流定义。</param>
      <param name="settings">XAML 服务设置。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ActivityXamlServicesSettings">
      <summary>指定 XAML 服务设置。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ActivityXamlServicesSettings.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.ActivityXamlServicesSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions">
      <summary>获取或设置一个指示是否编译表达式的值。</summary>
      <returns>如果表达式完成编译，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.ActivityXamlServicesSettings.LocationReferenceEnvironment">
      <summary>获取或设置活动的位置引用环境。</summary>
      <returns>活动的位置引用环境。</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.ArgumentValueSerializer">
      <summary>将 <see cref="T:System.Activities.Argument" /> 的实例转换为 <see cref="T:System.String" /> 的实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.ArgumentValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定能否将指定的对象转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ArgumentValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将指定对象转换为 <see cref="T:System.String" />。</summary>
      <returns>指定对象的 <see cref="T:System.String" /> 表示形式。</returns>
      <param name="value">要转换为 <see cref="T:System.String" /> 的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.AssemblyReferenceConverter">
      <summary>表示程序集引用的转换器。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.AssemblyReferenceConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将...转换成指定类型。</summary>
      <returns>如果可以将指定的类型从中转换，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="sourceType">要转换的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将指定类型转换成...</summary>
      <returns>如果可以将指定的类型转换为，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定值转换为派生类指定的新的表示形式。</summary>
      <returns>如果指定值转换为新的表示形式，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">可选的区域性信息。</param>
      <param name="value">要转换的对象。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.AssemblyReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的值转换为指定的表示形式。</summary>
      <returns>如果指定值转换为指定表示形式，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">可选的区域性信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.CompiledDataContext">
      <summary>表示编译数据上下文。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.#ctor(System.Collections.Generic.IList{System.Activities.Location})">
      <summary>使用位置的初始化 <see cref="T:System.Activities.XamlIntegration.CompiledDataContext" /> 类的新实例。</summary>
      <param name="locations">位置。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.#ctor(System.Collections.Generic.IList{System.Activities.LocationReference})">
      <summary>将使用引用位置的 <see cref="T:System.Activities.XamlIntegration.CompiledDataContext" /> 类的新实例初始化。</summary>
      <param name="locationReferences">引用位置。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.#ctor(System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)">
      <summary>使用引用位置和活动上下文初始化 <see cref="T:System.Activities.XamlIntegration.CompiledDataContext" /> 类的新实例，是节点。</summary>
      <param name="locationReferences">引用位置。</param>
      <param name="activityContext">活动上下文。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetCompiledDataContextCache(System.Object,System.Activities.ActivityContext,System.Activities.Activity,System.Boolean,System.Int32)">
      <summary>检索由数据上下文使用的缓存。</summary>
      <returns>数据上下文。</returns>
      <param name="dataContextActivities">数据上下文活动。</param>
      <param name="activityContext">活动上下文。</param>
      <param name="compiledRoot">已编译的根。</param>
      <param name="forImplementation">如果编译数据上下文为实现，则为 True；否则为 false。</param>
      <param name="compiledDataContextCount">编译数据上下文的数目。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetDataContextActivities(System.Activities.Activity,System.Boolean)">
      <summary>获取使用指定已编译根和实现的已编译数据的活动。</summary>
      <returns>编译数据的活动。</returns>
      <param name="compiledRoot">已编译的根。</param>
      <param name="forImplementation">如果编译数据上下文为实现，则为 True；否则为 false。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetLocation``1(System.Func{``0},System.Action{``0})">
      <summary>使用指定的获取和设置方法检索编译数据上下文的位置。</summary>
      <returns>编译数据上下文的位置。</returns>
      <param name="getMethod">使用的 get 方法。</param>
      <param name="setMethod">使用的设置方法。</param>
      <typeparam name="T">函数。</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetLocation``1(System.Func{``0},System.Action{``0},System.Int32,System.Activities.Activity,System.Activities.ActivityContext)">
      <summary>检索编译数据上下文的位置。</summary>
      <returns>编译数据上下文的位置。</returns>
      <param name="getMethod">使用的 get 方法。</param>
      <param name="setMethod">使用的设置方法。</param>
      <param name="expressionId">表达式标识符。</param>
      <param name="compiledRootActivity">已编译的根活动。</param>
      <param name="activityContext">活动上下文。</param>
      <typeparam name="T">函数。</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetValueTypeValues">
      <summary>获取由数据上下文使用的值类型的值。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.GetVariableValue(System.Int32)">
      <summary>获取使用数据上下文的变量的值。</summary>
      <returns>使用数据上下文的变量的值。</returns>
      <param name="index">变量的索引</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.RewriteExpressionTree(System.Linq.Expressions.Expression)">
      <summary>重写数据上下文使用的表达式。</summary>
      <returns>重写表达式。</returns>
      <param name="originalExpression">要重写的原始表达式。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.SetValueTypeValues">
      <summary>返回由数据上下文使用的值类型的值。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.CompiledDataContext.SetVariableValue(System.Int32,System.Object)">
      <summary>返回由数据上下文使用的变量的值。</summary>
      <param name="index">变量的索引。</param>
      <param name="value">变量的值。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.DynamicUpdateMapConverter">
      <summary>表示动态更新映射转换器。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.DynamicUpdateMapConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将指定类型转换成...</summary>
      <returns>如果可以将指定的类型转换为，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的值转换为指定的表示形式。</summary>
      <returns>如果指定值转换为指定表示形式，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">可选的区域性信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.DynamicUpdateMapExtension">
      <summary>指定动态更新映射引伸选择。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapExtension.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.DynamicUpdateMapExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapExtension.#ctor(System.Activities.DynamicUpdate.DynamicUpdateMap)">
      <summary>使用更新了的映射初始化 <see cref="T:System.Activities.XamlIntegration.DynamicUpdateMapExtension" /> 类的新实例。</summary>
      <param name="updateMap">更新映射。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapExtension.ProvideValue(System.IServiceProvider)">
      <summary>为服务提供程序指定值。</summary>
      <param name="serviceProvider">服务提供程序。</param>
    </member>
    <member name="P:System.Activities.XamlIntegration.DynamicUpdateMapExtension.UpdateMap">
      <summary>获取动态更新映射的扩展。</summary>
      <returns>动态更新映射的扩展。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.DynamicUpdateMapExtension.XmlContent">
      <summary>获取动态更新映射扩展的 Xml 内容。</summary>
      <returns>动态更新映射扩展的 Xml 内容。</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter">
      <summary>表示转换器，用于动态更新映射项目。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将...转换成指定类型。</summary>
      <returns>如果可以将指定的类型从中转换，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="sourceType">要转换的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将指定类型转换成...</summary>
      <returns>如果可以将指定的类型转换为，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定值转换为派生类指定的新的表示形式。</summary>
      <returns>如果指定值转换为新的表示形式，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">可选的区域性信息。</param>
      <param name="value">要转换的对象。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.DynamicUpdateMapItemConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的值转换为指定的表示形式。</summary>
      <returns>如果指定值转换为指定表示形式，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">可选的区域性信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.FuncDeferringLoader">
      <summary>表示一个对象，该对象加载已保存函数的实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.#ctor">
      <summary>创建 <see cref="T:System.Activities.XamlIntegration.FuncDeferringLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>加载可用于在任意位置反序列化节点列表的函数的实例。</summary>
      <returns>函数的实例。</returns>
      <param name="xamlReader">序列化节点的列表。</param>
      <param name="context">一个提供进行分析所需信息的上下文。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.FuncDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>将指定的 <see cref="T:System.Object" /> 序列化为 Xaml 节点列表。</summary>
      <returns>Xaml 读取器。</returns>
      <param name="value">要转换为 Xaml 节点列表的对象。</param>
      <param name="serviceProvider">一个为序列化提供上下文信息的对象。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ICompiledExpressionRoot">
      <summary>指定有关已编译的表达式根的信息。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.CanExecuteExpression(System.String,System.Boolean,System.Collections.Generic.IList{System.Activities.LocationReference},System.Int32@)">
      <summary>指示 <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" /> 是否可以执行查询。</summary>
      <returns>如果 <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" /> 可执行表达式，则为 True；否则为 false。</returns>
      <param name="expressionText">使用的表达式文本。</param>
      <param name="isReference">如果引用则为 True；否则为 false。</param>
      <param name="locations">位置的集合。</param>
      <param name="expressionId">表达式标识符。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetExpressionTreeForExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference})">
      <summary>获取用于该表达式的表达式树。</summary>
      <returns>用于表达式的表达式树。</returns>
      <param name="expressionId">表达式标识符。</param>
      <param name="locationReferences">位置引用。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetLanguage">
      <summary>获取用于表达式的根的语言。</summary>
      <returns>使用的语言。</returns>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.GetRequiredLocations(System.Int32)">
      <summary>获取表达式根所需位置的列表。</summary>
      <returns>用于表达式的根的必须的位置列表。</returns>
      <param name="expressionId">表达式标识符。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.Location})">
      <summary>调用 <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" />, 使用指定的表达式标识符和位置。</summary>
      <returns>调用的表达式。</returns>
      <param name="expressionId">表达式标识符。</param>
      <param name="locations">使用的位置。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ICompiledExpressionRoot.InvokeExpression(System.Int32,System.Collections.Generic.IList{System.Activities.LocationReference},System.Activities.ActivityContext)">
      <summary>调用 <see cref="T:System.Activities.XamlIntegration.ICompiledExpressionRoot" />, 使用指定的表达式标识符、位置和活动上下文。</summary>
      <returns>调用的表达式。</returns>
      <param name="expressionId">表达式标识符。</param>
      <param name="locations">位置。</param>
      <param name="activityContext">活动上下文。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.ImplementationVersionConverter">
      <summary>表示实施版本的转换器。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.ImplementationVersionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将...转换成指定类型。</summary>
      <returns>如果可以将指定的类型从中转换，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="sourceType">要转换的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将指定类型转换成...</summary>
      <returns>如果可以将指定的类型转换为，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定值转换为派生类指定的新的表示形式。</summary>
      <returns>如果指定值转换为新的表示形式，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">可选的区域性信息。</param>
      <param name="value">要转换的对象。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.ImplementationVersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的值转换为指定的表示形式。</summary>
      <returns>如果指定值转换为指定表示形式，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">可选的区域性信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.InArgumentConverter">
      <summary>提供用于在 <see cref="T:System.Activities.InArgument" /> 类与其他各种表示形式之间执行转换的类型转换器。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InArgumentConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.InArgumentConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InArgumentConverter.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.Activities.XamlIntegration.InArgumentConverter" /> 类的新实例。</summary>
      <param name="type">关联 <see cref="T:System.Activities.InArgument" /> 的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.InOutArgumentConverter">
      <summary>提供用于在 <see cref="T:System.Activities.InOutArgument" /> 类与其他各种表示形式之间执行转换的类型转换器。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InOutArgumentConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.InOutArgumentConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.InOutArgumentConverter.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.Activities.XamlIntegration.InOutArgumentConverter" /> 类的新实例。</summary>
      <param name="type">关联 <see cref="T:System.Activities.InOutArgument" /> 的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.IValueSerializableExpression">
      <summary>提供用于将表达式转换为字符串的方法。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.IValueSerializableExpression.CanConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将表达式转换为字符串。</summary>
      <returns>如果表达式能被转换为字符串，则为 true，否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.IValueSerializableExpression.ConvertToString(System.Windows.Markup.IValueSerializerContext)">
      <summary>将表达式转换为字符串。</summary>
      <returns>表达式的字符串表示形式。</returns>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.OutArgumentConverter">
      <summary>提供用于在 <see cref="T:System.Activities.OutArgument" /> 类与其他各种表示形式之间执行转换的类型转换器。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.OutArgumentConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.OutArgumentConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.OutArgumentConverter.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.Activities.XamlIntegration.OutArgumentConverter" /> 类的新实例。</summary>
      <param name="type">关联 <see cref="T:System.Activities.OutArgument" /> 的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1">
      <summary>提供对 x:Class 文档包含的属性的访问。</summary>
      <typeparam name="T">关联属性的类型。</typeparam>
    </member>
    <member name="M:System.Activities.XamlIntegration.PropertyReferenceExtension`1.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.PropertyReferenceExtension`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.PropertyReferenceExtension`1.PropertyName">
      <summary>获取或设置关联属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="M:System.Activities.XamlIntegration.PropertyReferenceExtension`1.ProvideValue(System.IServiceProvider)">
      <summary>检索关联属性的值。</summary>
      <returns>属性值。</returns>
      <param name="serviceProvider">为标记扩展提供服务的对象。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.SerializableFuncDeferringLoader">
      <summary>表示延迟加载程序的可序列化函数。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.SerializableFuncDeferringLoader.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.SerializableFuncDeferringLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.SerializableFuncDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>加载可用于在任意位置反序列化节点列表的函数的实例。</summary>
      <returns>函数的实例。</returns>
      <param name="xamlReader">序列化节点的列表。</param>
      <param name="context">一个提供进行分析所需信息的上下文。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.SerializableFuncDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>将指定的对象序列化为 Xaml 节点列表。</summary>
      <returns>指定的对象 Xaml 节点列表。</returns>
      <param name="value">要转换为 Xaml 节点列表的对象。</param>
      <param name="serviceProvider">一个为序列化提供上下文信息的对象。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.TextExpressionCompiler">
      <summary>表示文本表达式编译器。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.TextExpressionCompiler.#ctor(System.Activities.XamlIntegration.TextExpressionCompilerSettings)">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" /> 类的新实例。</summary>
      <param name="settings">使用的设置。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TextExpressionCompiler.Compile">
      <summary>编译 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" />。</summary>
      <returns>编译 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" /> 的结果。</returns>
    </member>
    <member name="M:System.Activities.XamlIntegration.TextExpressionCompiler.GenerateSource(System.IO.TextWriter)">
      <summary>指示 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" /> 是否会生成源。</summary>
      <returns>如果 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompiler" /> 生成源，则为 True，否则为 false。</returns>
      <param name="textWriter">使用的参数。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.TextExpressionCompilerError">
      <summary>表示文本表达式编译器错误。</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerError.IsWarning">
      <summary>获取或设置一个值，该值指示编译器错误是否是警告。</summary>
      <returns>如果编译器错误是警告，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerError.Message">
      <summary>获取或设置用于包含有关错误的信息的消息。</summary>
      <returns>包含错误信息的消息。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerError.Number">
      <summary>获取或设置错误的数量。</summary>
      <returns>错误号。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerError.SourceLineNumber">
      <summary>获取或设置错误的源行号。</summary>
      <returns>错误的源行号。</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.TextExpressionCompilerResults">
      <summary>指定有关文本表达式编译器结果的信息。</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerResults.CompilerMessages">
      <summary>获取编译器消息的结果。</summary>
      <returns>编译器消息的结果。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerResults.HasErrors">
      <summary>获取或设置一个值，该值结果是否有错误。</summary>
      <returns>如果该结果具有错误，则为 True；否则，为 false。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerResults.HasSourceInfo">
      <summary>获取或设置一个指示信息是否为源的值。</summary>
      <returns>如果信息有源，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerResults.ResultType">
      <summary>获取或设置结果类型。</summary>
      <returns>结果类型。</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings">
      <summary>指定文本表达示编译器设置。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.TextExpressionCompilerSettings.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.Activity">
      <summary>获取或设置编译器设置的活动。</summary>
      <returns>编译器设置的活动。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.ActivityName">
      <summary>获取或设置编译器设置的活动名称。</summary>
      <returns>活动的名称。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.ActivityNamespace">
      <summary>获取或设置活动的命名空间。</summary>
      <returns>活动的命名空间。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.AlwaysGenerateSource">
      <summary>获取或设置指示文本表达式编译器设置是否始终生成源的值。</summary>
      <returns>如果文本表达式编译器设置始终会生成源，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.ForImplementation">
      <summary>获取或设置 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 是否用于实现。</summary>
      <returns>实现 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.GenerateAsPartialClass">
      <summary>获取或设置 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 是否生成为分部类。</summary>
      <returns>如果 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 生成作为部分类，则为 True，否则为 false。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.Language">
      <summary>获取或设置要 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 使用的语言。</summary>
      <returns>
        <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 使用的语言。
。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.LogSourceGenerationMessage">
      <summary>获取或设置 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 的日志源生成消息。</summary>
      <returns>用于 <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 的日志源生成消息。</returns>
    </member>
    <member name="P:System.Activities.XamlIntegration.TextExpressionCompilerSettings.RootNamespace">
      <summary>获取或设置<see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 的根命名空间。</summary>
      <returns>
        <see cref="T:System.Activities.XamlIntegration.TextExpressionCompilerSettings" /> 的根命名空间。</returns>
    </member>
    <member name="T:System.Activities.XamlIntegration.TypeConverterBase">
      <summary>提供一些方法，派生的类型转换器类可使用这些方法将对象与其他各种表示形式相互转换。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>在派生类中重写时，确定是否可以从指定的类型转换。</summary>
      <returns>如果可以将指定的类型从中转换，则为 true；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="sourceType">要转换的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>在派生类中重写时，确定是否可以转换为指定的类型。</summary>
      <returns>如果可以将指定的类型转换为，则为 true；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>在派生类中重写时，将指定的值转换为派生类指定的新表示形式。</summary>
      <returns>转换后的值。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的对象。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>在派生类中重写时，将指定的值转换为指定的表示形式。</summary>
      <returns>转换后的值。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="T:System.Activities.XamlIntegration.WorkflowIdentityConverter">
      <summary>表示工作流标识转换器。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.WorkflowIdentityConverter.#ctor">
      <summary>初始化 <see cref="T:System.Activities.XamlIntegration.WorkflowIdentityConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Activities.XamlIntegration.WorkflowIdentityConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将...转换成指定类型。</summary>
      <returns>如果可以将指定的类型从中转换，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="sourceType">要转换的类型。</param>
    </member>
    <member name="M:System.Activities.XamlIntegration.WorkflowIdentityConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定值转换为派生类指定的新的表示形式。</summary>
      <returns>如果指定值转换为新的表示形式，则为 True；否则为 false。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">可选的区域性信息。</param>
      <param name="value">要转换的对象。</param>
    </member>
  </members>
</doc>