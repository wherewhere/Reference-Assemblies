<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Messaging</name>
  </assembly>
  <members>
    <member name="T:System.Messaging.AccessControlEntry">
      <summary>为受信者（用户、组或计算机）指定访问权限，以执行常规任务的应用程序特定的实现。</summary>
    </member>
    <member name="M:System.Messaging.AccessControlEntry.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.AccessControlEntry" /> 类的新实例，该类指定受信者和权限集均不应用。</summary>
    </member>
    <member name="M:System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee)">
      <summary>初始化 <see cref="T:System.Messaging.AccessControlEntry" /> 类的新实例，指定要向其授予或拒绝向其授予权限的受信者。</summary>
      <param name="trustee">指定用户、组、计算机、域或别名的 <see cref="T:System.Messaging.Trustee" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="trustee" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.GenericAccessRights,System.Messaging.StandardAccessRights,System.Messaging.AccessControlEntryType)">
      <summary>初始化 <see cref="T:System.Messaging.AccessControlEntry" /> 类的新实例，该类指定受信者、要分配的权限以及是授予还是拒绝这些权限。</summary>
      <param name="trustee">指定用户、组、计算机、域或别名的 <see cref="T:System.Messaging.Trustee" />。</param>
      <param name="genericAccessRights">
        <see cref="T:System.Messaging.GenericAccessRights" /> 值的按位组合。</param>
      <param name="standardAccessRights">
        <see cref="T:System.Messaging.StandardAccessRights" /> 值的按位组合。</param>
      <param name="entryType">
        <see cref="T:System.Messaging.AccessControlEntryType" /> 值之一，指定是允许、拒绝、设置还是撤消指定的权限。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="trustee" /> 参数为 null。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="genericAccessRights" />、<paramref name="standardAccessRights" /> 或 <paramref name="entryType" /> 参数不是有效的枚举值。</exception>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.CustomAccessRights">
      <summary>获取或设置自定义访问权限。</summary>
      <returns>应用程序特定的访问权限，通常定义为位标志。</returns>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.EntryType">
      <summary>获取或设置一个值，该值指示如何将访问权限应用于受信者。</summary>
      <returns>
        <see cref="T:System.Messaging.AccessControlEntryType" /> 值之一，指定是允许、拒绝、设置还是撤消指定的权限。 默认值为 Allow。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">项类型不是有效的 <see cref="T:System.Messaging.AccessControlEntryType" /> 枚举值。</exception>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.GenericAccessRights">
      <summary>获取或设置一组公共访问权限，这些权限映射到标准和对象特定的访问权限以用于读取、写入和执行。</summary>
      <returns>
        <see cref="T:System.Messaging.GenericAccessRights" /> 值的按位组合。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">您设置的值不是 <see cref="T:System.Messaging.GenericAccessRights" /> 位标志成员的有效组合。</exception>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.StandardAccessRights">
      <summary>获取或设置一组标准访问权限，这些权限与大多数安全对象类型所共有的操作相对应。</summary>
      <returns>
        <see cref="T:System.Messaging.StandardAccessRights" /> 值的按位组合。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">您设置的值不是 <see cref="T:System.Messaging.StandardAccessRights" /> 位标志成员的有效组合。</exception>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.Trustee">
      <summary>获取或设置向其分配访问权限的用户、组、域或别名。</summary>
      <returns>一个 <see cref="T:System.Messaging.Trustee" />，它指定 <see cref="T:System.Messaging.AccessControlEntry" /> 应用于的用户帐户、组帐户或登录会话。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Messaging.AccessControlEntry.Trustee" /> 属性为 null。</exception>
    </member>
    <member name="T:System.Messaging.AccessControlEntryType">
      <summary>指定是允许、拒绝还是撤消受信者的访问权限。</summary>
    </member>
    <member name="F:System.Messaging.AccessControlEntryType.Allow">
      <summary>一个允许访问的项，它导致新权限被添加到受信者所具有的任何现有权限中。</summary>
    </member>
    <member name="F:System.Messaging.AccessControlEntryType.Deny">
      <summary>一个访问被拒绝的项，它拒绝除受信者的任何当前拒绝的权限之外的指定的权限。</summary>
    </member>
    <member name="F:System.Messaging.AccessControlEntryType.Revoke">
      <summary>一个项，它移除指定受信者的现有所有允许或拒绝的权限。</summary>
    </member>
    <member name="F:System.Messaging.AccessControlEntryType.Set">
      <summary>一个允许访问的项，它与 Allow 类似，只是新项只允许指定的权限。 使用该项将放弃所有现有权限，包括该受信者的现有所有访问被拒绝的项。</summary>
    </member>
    <member name="T:System.Messaging.AccessControlList">
      <summary>包含一组访问控制项，并为一个或多个受信者指定访问权限。</summary>
    </member>
    <member name="M:System.Messaging.AccessControlList.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.AccessControlList" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)">
      <summary>将访问控制项追加到访问控制列表。</summary>
      <returns>在该处插入新访问控制项的位置。</returns>
      <param name="entry">要追加到访问控制列表末尾的 <see cref="T:System.Messaging.AccessControlEntry" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entry" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)">
      <summary>确定访问控制列表是否包含特定的访问控制项。</summary>
      <returns>如果在访问控制列表中找到该访问控制项，则为 true；否则为 false。</returns>
      <param name="entry">要在访问控制列表中查找的 <see cref="T:System.Messaging.AccessControlEntry" />。</param>
    </member>
    <member name="M:System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)">
      <summary>将整个访问控制列表复制到访问控制项的兼容的一维数组，并且从目标数组的指定索引开始。</summary>
      <param name="array">一个 <see cref="T:System.Messaging.AccessControlEntry" /> 类型的数组，访问控制列表项将被复制到其中。 该数组的索引必须从零开始。</param>
      <param name="index">数组中将从其开始复制访问控制列表项的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 参数大于或等于 <paramref name="array" /> 参数的长度。 - 或 - 源访问控制列表中元素的数目大于从 <paramref name="index" /> 到访问控制项的目标数组的结尾的可用空间。</exception>
    </member>
    <member name="M:System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)">
      <summary>确定访问控制列表中访问控制项的特定索引。</summary>
      <returns>如果在列表中找到该项，则为该项的索引；否则为 -1</returns>
      <param name="entry">要在访问控制列表中查找的 <see cref="T:System.Messaging.AccessControlEntry" />。</param>
    </member>
    <member name="M:System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)">
      <summary>将访问控制项插入访问控制列表中的指定位置处。</summary>
      <param name="index">访问控制项应在该位置插入的从零开始的索引。</param>
      <param name="entry">要插入访问控制列表的 <see cref="T:System.Messaging.AccessControlEntry" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数在此访问控制列表中不是有效索引。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entry" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)">
      <summary>从访问控制列表移除特定访问控制项的第一个匹配项。</summary>
      <param name="entry">要从访问控制列表移除的 <see cref="T:System.Messaging.AccessControlEntry" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entry" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Messaging.AcknowledgeTypes">
      <summary>指定消息队列返回到发送应用程序的确认消息类型。</summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.FullReachQueue">
      <summary>一个掩码，用于在原始消息到达队列时请求肯定确认，或者用于到达队列时间计时器过期后请求否定确认，或者用于不能对原始消息进行身份验证时请求否定确认。</summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.FullReceive">
      <summary>一个掩码，用于在接收时间计时器过期前从队列收到原始消息时请求肯定确认，否则请求否定确认。</summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.NegativeReceive">
      <summary>一个掩码，用于当未能从队列接收原始消息时请求否定确认。</summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.None">
      <summary>一个掩码，用于请求不发送任何确认消息（无论是肯定的还是否定的）。</summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.NotAcknowledgeReachQueue">
      <summary>一个掩码，用于在原始消息不能到达队列时请求否定确认。 当到达队列时间计时器过期时或不能对消息进行身份验证时，可能请求否定确认。</summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.NotAcknowledgeReceive">
      <summary>一个掩码，用于当发生错误时请求否定确认，防止在其接收时间计时器过期前从队列接收原始消息。</summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.PositiveArrival">
      <summary>一个掩码，用于在原始消息到达队列时请求肯定确认。</summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.PositiveReceive">
      <summary>一个掩码，用于在成功从队列检索到原始消息时请求肯定确认。</summary>
    </member>
    <member name="T:System.Messaging.Acknowledgment">
      <summary>指定尝试的消息传递的结果。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.AccessDenied">
      <summary>一个否定到达确认，它指示发送应用程序不具有将消息发送到目标队列所需的权限。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.BadDestinationQueue">
      <summary>一个否定到达确认，它指示目标队列不可用于发送应用程序。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.BadEncryption">
      <summary>一个否定到达确认，它指示目标队列管理器未能解密私有消息。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.BadSignature">
      <summary>一个否定到达确认，它指示原始消息的数字签名无效并且未能由消息队列进行身份验证。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.CouldNotEncrypt">
      <summary>一个否定到达确认，它指示源队列管理器未能加密私有消息。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.HopCountExceeded">
      <summary>一个否定到达确认，它指示已超出了原始消息的跳数（跳数指示中间服务器的数目）。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.None">
      <summary>该消息不是确认消息。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.NotTransactionalMessage">
      <summary>一个否定到达确认，它指示非事务性消息被发送到了事务性队列。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.NotTransactionalQueue">
      <summary>一个否定到达确认，它指示已将事务性消息发送到非事务性队列。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.Purged">
      <summary>一个否定到达确认，它指示消息在到达其目标队列前已被清除。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.QueueDeleted">
      <summary>一个否定读取确认，它指示在可以读取消息前队列已被删除。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.QueueExceedMaximumSize">
      <summary>一个否定到达确认，它指示原始消息因其目标队列已满而未被传送。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.QueuePurged">
      <summary>一个否定读取确认，它指示在可以读取消息前队列已被清除。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.ReachQueue">
      <summary>一个肯定到达确认，它指示原始消息已到达其目标队列。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.ReachQueueTimeout">
      <summary>一个否定到达确认，它指示在原始消息可到达目标队列前到达队列时间计时器或接收时间计时器已过期。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.Receive">
      <summary>一个肯定读取确认，它指示原始消息已由接收应用程序接收。</summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.ReceiveTimeout">
      <summary>一个否定读取确认，它指示在其接收时间计时器过期前没有从队列接收原始消息。</summary>
    </member>
    <member name="T:System.Messaging.ActiveXMessageFormatter">
      <summary>使用与 MSMQ ActiveX 组件兼容的格式，将基元数据类型和其他对象序列化成“消息队列”消息体或从“消息队列”消息体反序列化基元数据类型和其他对象。</summary>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)">
      <summary>确定格式化程序是否可以反序列化消息的内容。</summary>
      <returns>如果 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 可以反序列化消息，则为 true；否则为 false。</returns>
      <param name="message">要检查的 <see cref="T:System.Messaging.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.Clone">
      <summary>创建与当前 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 相同的 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 类的实例。</summary>
      <returns>一个对象，其属性与此 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 的那些属性相同。</returns>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)">
      <summary>提供帮助序列化 COM 对象的实用工具，这些对象实现 IPersistStream 并要求调用 IPersistStreamInit。</summary>
      <param name="streamedObject">实现 IPersistStreamInit 的 OLE 对象。</param>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)">
      <summary>从给定的消息中读取内容，并创建包含反序列化消息的对象。</summary>
      <returns>反序列化的消息。</returns>
      <param name="message">要反序列化的 <see cref="T:System.Messaging.Message" />（采用 MSMQ ActiveX 控件格式）。</param>
      <exception cref="T:System.InvalidOperationException">作为参数传递的 <paramref name="message" /> 的 <see cref="P:System.Messaging.Message.BodyType" /> 属性既不能被映射到基元类型，也不表示流对象。</exception>
      <exception cref="T:System.NotSupportedException">消息体表示存储对象。 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 不支持存储对象的反序列化。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)">
      <summary>将对象序列化为消息体。</summary>
      <param name="message">
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 属性将包含序列化的对象。</param>
      <param name="obj">要序列化到消息体中的对象。</param>
      <exception cref="T:System.InvalidOperationException">要序列化的对象既不是基元类型，也不是实现 OLE IPersistStream 接口的流对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Messaging.BinaryMessageFormatter">
      <summary>使用二进制格式，将一个对象（或连接的对象的整个图形）序列化成“消息队列”消息体或从“消息队列”消息体反序列化一个对象。</summary>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 类的新实例，不指定类型样式或顶级对象程序集样式。</summary>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.#ctor(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.Formatters.FormatterTypeStyle)">
      <summary>初始化 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 类的新实例，并指定根对象和类型说明的格式。</summary>
      <param name="topObjectFormat">确定图形的顶级（根）对象在序列化流中的布局方式。</param>
      <param name="typeFormat">确定类型说明在序列化流中的布局方式。</param>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)">
      <summary>确定格式化程序是否可以反序列化消息的内容。</summary>
      <returns>如果二进制消息格式化程序可以反序列化消息，则为 true；否则为 false。</returns>
      <param name="message">要检查的 <see cref="T:System.Messaging.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.Clone">
      <summary>创建 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 类的实例，其读/写属性（根对象和类型说明格式）与当前 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 相同。</summary>
      <returns>一个对象，其属性与此 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 的属性相同，但其元数据并不将其指定为格式化程序类实例。</returns>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)">
      <summary>从给定的消息中读取内容，并创建包含反序列化消息的对象。</summary>
      <returns>反序列化的消息。</returns>
      <param name="message">要反序列化的 <see cref="T:System.Messaging.Message" />（二进制格式）。</param>
      <exception cref="T:System.InvalidOperationException">消息的 <see cref="P:System.Messaging.Message.BodyType" /> 属性不指示二进制对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.BinaryMessageFormatter.TopObjectFormat">
      <summary>获取或设置一个值，该值定义如何图形的顶级（根）对象如何进行与查找和加载其程序集相关的反序列化。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> 值之一，它定义反序列化行为。</returns>
    </member>
    <member name="P:System.Messaging.BinaryMessageFormatter.TypeFormat">
      <summary>获取或设置一个值，该值定义类型说明在序列化流中的布局方式。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.Formatters.FormatterTypeStyle" />，它定义类型说明格式。</returns>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)">
      <summary>将对象序列化为消息体。</summary>
      <param name="message">
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 属性将包含序列化的对象。</param>
      <param name="obj">要序列化到消息体中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Messaging.CryptographicProviderType">
      <summary>指定可用于验证数字签名的加密服务提供程序。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.Dss">
      <summary>仅支持哈希和数字签名的提供程序类型（例如 RsqSig）。 Dss 指定 DSA（数字签名算法）签名算法。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.Fortezza">
      <summary>包含国家标准与技术协会拥有的一组加密协议和算法的提供程序类型。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.MicrosoftExchange">
      <summary>为满足 Microsoft Exchange 邮件应用程序和其他与 Microsoft Mail 兼容的应用程序的加密需要而设计的提供程序类型。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.None">
      <summary>不指定任何加密提供程序类型。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.RsaFull">
      <summary>完全 RSA 提供程序类型，它支持数字签名和数据加密。 它被视作通用的加密服务提供程序。 RSA 公钥算法用于所有公钥操作。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.RsqSig">
      <summary>RsaFull 提供程序类型的子集，它只支持哈希和数字签名所需的那些函数和算法。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.Ssl">
      <summary>支持安全套接字层 (SSL) 协议的提供程序类型。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttAcq">
      <summary>安全事务技术提供程序获得者。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttBrnd">
      <summary>安全事务技术提供程序品牌。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttIss">
      <summary>安全事务技术提供程序颁发者。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttMer">
      <summary>提供安全事务技术的企业。</summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttRoot">
      <summary>安全事务技术提供程序根。</summary>
    </member>
    <member name="T:System.Messaging.Cursor">
      <summary>
        <see cref="T:System.Messaging.Cursor" /> 用于在读取队列的消息时保持 <see cref="T:System.Messaging.MessageQueue" /> 中的特定位置。</summary>
    </member>
    <member name="M:System.Messaging.Cursor.Close">
      <summary>关闭游标，允许“消息队列”释放关联的资源。</summary>
    </member>
    <member name="M:System.Messaging.Cursor.Dispose">
      <summary>释放由 <see cref="T:System.Messaging.Cursor" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.Messaging.DefaultPropertiesToSend">
      <summary>指定在向消息队列发送 <see cref="T:System.Messaging.Message" /> 实例以外的对象时所使用的默认属性值。</summary>
    </member>
    <member name="M:System.Messaging.DefaultPropertiesToSend.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.DefaultPropertiesToSend" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType">
      <summary>获取或设置返回给发送应用程序的确认消息的类型。</summary>
      <returns>
        <see cref="T:System.Messaging.AcknowledgeTypes" /> 枚举值之一。 此值用于确定系统在管理队列中传递的确认消息的类型以及向发送应用程序返回确认消息的时间。 默认值为 AcknowledgeTypes.None。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.AdministrationQueue">
      <summary>获取或设置队列，该队列接收由消息队列生成的确认消息。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueue" />，指定用于系统生成的确认消息的管理队列。 默认值为 null。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.AppSpecific">
      <summary>获取或设置应用程序特定的附加信息。</summary>
      <returns>应用程序特定的信息。 默认值为 0。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.AttachSenderId">
      <summary>获取或设置一个值，该值指示发送方 ID 是否应附在消息中。</summary>
      <returns>如果发送方 ID 应附在消息中，则为 true，否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm">
      <summary>获取或设置用于加密私有消息体的加密算法。</summary>
      <returns>
        <see cref="T:System.Messaging.EncryptionAlgorithm" /> 枚举值之一。 默认值为 RC2。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.Extension">
      <summary>获取或设置与消息关联的附加信息。</summary>
      <returns>字节数组，提供与消息关联的、应用程序定义的附加信息。 默认值为零长度的数组。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.HashAlgorithm">
      <summary>获取或设置在验证消息或为消息创建数字签名时使用的哈希算法。</summary>
      <returns>
        <see cref="T:System.Messaging.HashAlgorithm" /> 枚举值之一。 默认值为 MD5。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.Label">
      <summary>获取或设置应用程序定义的、描述消息的字符串。</summary>
      <returns>消息的标签。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.Priority">
      <summary>获取或设置消息优先级，用于确定消息在队列中的位置。</summary>
      <returns>表示非事务性消息优先级的 <see cref="T:System.Messaging.MessagePriority" /> 枚举值之一。 默认值为 Normal。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.Recoverable">
      <summary>获取或设置一个值，该值指示在出现计算机故障或网络问题时是否保证传递消息。</summary>
      <returns>如果通过在消息传递过程中将消息保存到磁盘上来保证消息的传递，则为 true；如果不能保证传递，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.ResponseQueue">
      <summary>获取或设置接收应用程序生成的响应消息的队列。</summary>
      <returns>应用程序生成的响应消息所返回到的 <see cref="T:System.Messaging.MessageQueue" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived">
      <summary>获取或设置从目标队列中检索消息的时间限制。</summary>
      <returns>从目标队列中接收已发送消息的总时间（以秒计）。 默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue">
      <summary>获取或设置消息到达队列的时间限制。</summary>
      <returns>从发送消息的时间算起，消息到达目标队列的时间限制（以秒计）。 默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue">
      <summary>获取源计算机中的事务状态队列。</summary>
      <returns>源计算机中的事务状态队列，用于将确认消息发回发送应用程序。 默认值为 null。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseAuthentication">
      <summary>获取或设置一个值，该值指示发送前是否必须验证消息。</summary>
      <returns>如果发送应用程序请求对消息进行验证，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue">
      <summary>获取或设置一个值，该值指示是否将未能传递的消息的副本发送到死信队列。</summary>
      <returns>如果消息传递失败应导致向死信队列发送消息的副本，则为 true，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseEncryption">
      <summary>获取或设置一个值，该值指示是否使消息成为私有的。</summary>
      <returns>要求消息队列加密消息时为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseJournalQueue">
      <summary>获取或设置一个值，该值指示是否在始发计算机的计算机日记中保留消息的副本。</summary>
      <returns>要求在消息成功地从发件计算机传送到下一步后，将消息的副本保存在发件计算机的计算机日记中时为 true，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseTracing">
      <summary>获取或设置一个值，该值指示是否在消息向目标队列移动的过程中跟踪消息。</summary>
      <returns>如果在发往目标队列的过程中，由原始消息产生的每个中间步骤都生成发送给系统报告队列的报告，则为 true，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.Messaging.EncryptionAlgorithm">
      <summary>指定用于对私有消息的消息体进行加密的加密算法。</summary>
    </member>
    <member name="F:System.Messaging.EncryptionAlgorithm.None">
      <summary>无加密。</summary>
    </member>
    <member name="F:System.Messaging.EncryptionAlgorithm.Rc2">
      <summary>值 MQMSG_CALG_RC2。 该值是消息队列应用程序的消息对象的加密属性的默认值。</summary>
    </member>
    <member name="F:System.Messaging.EncryptionAlgorithm.Rc4">
      <summary>值 MQMSG_CALG_RC4。 该值对应于消息队列应用程序的消息对象的加密属性的不太安全选项。</summary>
    </member>
    <member name="T:System.Messaging.EncryptionRequired">
      <summary>指定队列接收的消息的隐私等级。</summary>
    </member>
    <member name="F:System.Messaging.EncryptionRequired.Body">
      <summary>只接受私有（加密）消息。</summary>
    </member>
    <member name="F:System.Messaging.EncryptionRequired.None">
      <summary>只接受非私有（非加密）消息。</summary>
    </member>
    <member name="F:System.Messaging.EncryptionRequired.Optional">
      <summary>不强制私有。 接受私有（加密的）消息和非私有（非加密）消息。</summary>
    </member>
    <member name="T:System.Messaging.GenericAccessRights">
      <summary>使用 Windows 2000 和 Windows NT 访问格式指定一组公共访问权限，消息队列将这些权限映射为标准的和对象特定的读取、写入和执行访问权限。</summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.All">
      <summary>读取、写入和执行访问。</summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.Execute">
      <summary>执行访问。</summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.None">
      <summary>无访问权限。</summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.Read">
      <summary>读取访问。</summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.Write">
      <summary>写入访问。</summary>
    </member>
    <member name="T:System.Messaging.HashAlgorithm">
      <summary>指定消息队列在对消息进行身份验证时所使用的哈希算法。</summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Mac">
      <summary>MAC 键控哈希算法。</summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Md2">
      <summary>MD2 哈希算法。</summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Md4">
      <summary>MD4 哈希算法。</summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Md5">
      <summary>MD5 哈希算法。</summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.None">
      <summary>无哈希算法。</summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Sha">
      <summary>SHA 哈希算法。</summary>
    </member>
    <member name="T:System.Messaging.IMessageFormatter">
      <summary>从“消息队列”消息体序列化或反序列化对象。</summary>
    </member>
    <member name="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)">
      <summary>在类中实现时，确定格式化程序是否可以反序列化消息的内容。</summary>
      <returns>如果格式化程序可以反序列化消息，则为 true；否则为 false。</returns>
      <param name="message">要检查的 <see cref="T:System.Messaging.Message" />。</param>
    </member>
    <member name="M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)">
      <summary>在类中实现时，读取给定消息中的内容并创建包含该消息中的数据的对象。</summary>
      <returns>反序列化的消息。</returns>
      <param name="message">要反序列化的 <see cref="T:System.Messaging.Message" />。</param>
    </member>
    <member name="M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)">
      <summary>在类中实现时，将对象序列化到消息体中。</summary>
      <param name="message">
        <see cref="T:System.Messaging.Message" />，它将包含序列化的对象。</param>
      <param name="obj">要序列化到消息中的对象。</param>
    </member>
    <member name="T:System.Messaging.Message">
      <summary>提供对定义消息队列消息所需的属性的访问。</summary>
    </member>
    <member name="M:System.Messaging.Message.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.Message" /> 类的新实例（主体为空）。</summary>
    </member>
    <member name="M:System.Messaging.Message.#ctor(System.Object)">
      <summary>通过用 <see cref="T:System.Messaging.XmlMessageFormatter" /> 将指定的对象序列化到消息体中，初始化 <see cref="T:System.Messaging.Message" /> 类的新实例。</summary>
      <param name="body">要序列化到消息体中的对象。</param>
    </member>
    <member name="M:System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)">
      <summary>初始化 <see cref="T:System.Messaging.Message" /> 类的新实例，使用指定的格式化程序将指定的对象序列化到消息体中。</summary>
      <param name="body">要序列化到消息体中的对象。</param>
      <param name="formatter">
        <see cref="T:System.Messaging.IMessageFormatter" />，指定用于序列化消息体的格式化程序。</param>
    </member>
    <member name="P:System.Messaging.Message.AcknowledgeType">
      <summary>获取或设置返回给发送应用程序的确认消息的类型。</summary>
      <returns>
        <see cref="T:System.Messaging.AcknowledgeTypes" /> 值之一，该值表示系统在管理队列中传递的确认消息类型，以及在何种条件下将确认消息返回发送应用程序。 默认值为 None。</returns>
      <exception cref="T:System.InvalidOperationException">消息经过筛选后忽略了 <see cref="P:System.Messaging.Message.AcknowledgeType" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.Acknowledgment">
      <summary>获取该消息表示的确认分类。</summary>
      <returns>
        <see cref="T:System.Messaging.Acknowledgment" /> 枚举值之一。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.AdministrationQueue">
      <summary>获取或设置接收由消息队列生成的确认消息的队列。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueue" />，指定用于系统生成的确认消息的管理队列。 默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AdministrationQueue" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.AppSpecific">
      <summary>获取或设置应用程序特定的附加信息。</summary>
      <returns>应用程序特定的信息。 默认值为零。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AppSpecific" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.ArrivedTime">
      <summary>获取消息到达目标队列的时间。</summary>
      <returns>
        <see cref="T:System.DateTime" />，表示消息到达目标队列的时间。 该时间被从 GMT 调整为目标队列驻留的计算机上的本地时间。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.ArrivedTime" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.AttachSenderId">
      <summary>获取或设置一个值，该值指示发送方 ID 是否应附在消息中。</summary>
      <returns>如果 <see cref="P:System.Messaging.Message.SenderId" /> 应附在消息中，则为 true；否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AttachSenderId" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.Authenticated">
      <summary>获取一个值，该值指示是否已验证消息。</summary>
      <returns>如果在消息进入队列时请求了验证，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Authenticated" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.AuthenticationProviderName">
      <summary>获取或设置用于生成消息数字签名的加密提供程序的名称。</summary>
      <returns>用于生成消息数字签名的加密提供程序的名称。 默认值为 Microsoft 基础加密提供程序版本 1.0.</returns>
      <exception cref="T:System.InvalidOperationException">未能设置 <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> 属性。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> 被设置成了 null。</exception>
    </member>
    <member name="P:System.Messaging.Message.AuthenticationProviderType">
      <summary>获取或设置用于生成消息数字签名的加密提供程序类型。</summary>
      <returns>
        <see cref="T:System.Messaging.CryptographicProviderType" /> 值之一。 默认值为 RSA_FULL。</returns>
      <exception cref="T:System.InvalidOperationException">未能设置 <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> 属性。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.Body">
      <summary>获取或设置消息的内容。</summary>
      <returns>指定消息内容的对象。 该对象可以是字符串、日期、货币、数字、字节数组或任何托管对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Messaging.Message.Formatter" /> 属性为 null。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Body" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.BodyStream">
      <summary>获取或设置消息正文中的信息。</summary>
      <returns>
        <see cref="T:System.IO.Stream" />，包含消息的 <see cref="P:System.Messaging.Message.Body" /> 中包括的已序列化信息。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Body" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.BodyType">
      <summary>获取或设置消息体所含数据的类型。</summary>
      <returns>消息体的真实类型，如字符串、日期、货币或数字。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Body" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.ConnectorType">
      <summary>获取或设置一个值，该值指示由发送应用程序设置通常由消息队列设置的某些消息属性。</summary>
      <returns>由应用程序定义的 <see cref="T:System.Guid" />，与连接器应用程序或消息加密一起使用。 此 <see cref="T:System.Guid" /> 允许接收应用程序解释由发送应用程序设置、但通常由消息队列设置的消息属性。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.ConnectorType" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.CorrelationId">
      <summary>获取或设置确认、报告和响应消息用来引用原始消息的消息标识符。</summary>
      <returns>原始消息的 <see cref="P:System.Messaging.Message.Id" /> 属性指定的消息标识符。 消息队列在生成确认或报告消息时使用相关标识符；而应用程序在生成响应消息时使用相关标识符。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.CorrelationId" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.Message.CorrelationId" /> 为 null。</exception>
    </member>
    <member name="P:System.Messaging.Message.DestinationQueue">
      <summary>获取消息的预期目标队列。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueue" />，指定消息的预期目标队列。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.DestinationQueue" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.DestinationSymmetricKey">
      <summary>获取或设置用于对应用程序加密的消息或发送到外部队列的消息进行加密的对称密钥。</summary>
      <returns>字节值的数组，指定用于加密消息的目标对称密钥。 默认值为零长度的数组。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> 为 null。</exception>
    </member>
    <member name="P:System.Messaging.Message.DigitalSignature">
      <summary>获取或设置消息队列用于验证消息的数字签名。</summary>
      <returns>字节值的数组，指定用于对消息进行身份验证的消息队列 1.0 数字签名。 默认值为零长度的数组。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.DigitalSignature" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.Message.DigitalSignature" /> 属性为 null。</exception>
    </member>
    <member name="P:System.Messaging.Message.EncryptionAlgorithm">
      <summary>获取或设置用于加密私有消息体的加密算法。</summary>
      <returns>
        <see cref="T:System.Messaging.EncryptionAlgorithm" /> 枚举值之一。 默认值为 RC2。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.EncryptionAlgorithm" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.Extension">
      <summary>获取或设置与消息关联的、应用程序定义的附加信息。</summary>
      <returns>字节值的数组，提供与消息关联的、应用程序定义的信息。 默认值为零长度的数组。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Extension" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.Message.Extension" /> 属性为 null。</exception>
    </member>
    <member name="P:System.Messaging.Message.Formatter">
      <summary>获取或设置用于将对象序列化到消息体中，或从消息体中反序列化对象的格式化程序。</summary>
      <returns>该 <see cref="T:System.Messaging.IMessageFormatter" /> 产生要写入消息体或要从消息体中读取的流。 默认值为 <see cref="T:System.Messaging.XmlMessageFormatter" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.Message.Formatter" /> 属性为 null。</exception>
    </member>
    <member name="P:System.Messaging.Message.HashAlgorithm">
      <summary>获取或设置消息队列在验证消息或为消息创建数字签名时使用的哈希算法。</summary>
      <returns>
        <see cref="T:System.Messaging.HashAlgorithm" /> 枚举值之一。 对于 Windows XP，默认值为 SHA。 其他情况下，默认值为 MD5。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.HashAlgorithm" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.Id">
      <summary>获取消息的标识符。</summary>
      <returns>消息的唯一标识符，由消息队列生成。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Id" /> 属性。</exception>
    </member>
    <member name="F:System.Messaging.Message.InfiniteTimeout">
      <summary>指定不存在超时。</summary>
    </member>
    <member name="P:System.Messaging.Message.IsFirstInTransaction">
      <summary>获取一个值，该值指示消息是否是事务中发送的第一条消息。</summary>
      <returns>如果消息是事务中发送的第一条消息，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.IsFirstInTransaction" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.IsLastInTransaction">
      <summary>获取一个值，该值指示消息是否是事务中发送的最后一条消息。</summary>
      <returns>如果消息是单个事务中发送的最后一条消息，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.IsLastInTransaction" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.Label">
      <summary>获取或设置描述消息的、应用程序定义的 Unicode 字符串。</summary>
      <returns>消息的标签。 默认值为空字符串 ("")。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Label" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.LookupId">
      <summary>在 MSMQ 3.0 中引入。 获取消息的查找标识符。</summary>
      <returns>消息的查找标识符，由消息队列生成，对消息驻留的队列是唯一的。</returns>
      <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.LookupId" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.MessageType">
      <summary>获取消息类型： Normal、Acknowledgment 或 Report。</summary>
      <returns>
        <see cref="P:System.Messaging.Message.MessageType" /> 值之一。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.MessageType" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.Priority">
      <summary>获取或设置消息优先级，该优先级确定消息在队列中的位置。</summary>
      <returns>
        <see cref="T:System.Messaging.MessagePriority" /> 值之一，表示非事务性消息的优先级。 默认值为 Normal。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Priority" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.Recoverable">
      <summary>获取或设置一个值，该值指示在出现计算机故障或网络问题时是否保证传递消息。</summary>
      <returns>如果通过在消息传递过程中将消息保存到磁盘上来保证消息的传递，则为 true；如果不能保证传递，则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Recoverable" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.ResponseQueue">
      <summary>获取或设置接收应用程序生成的响应消息的队列。</summary>
      <returns>应用程序生成的响应消息所返回到的 <see cref="T:System.Messaging.MessageQueue" />。 默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.ResponseQueue" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.SecurityContext">
      <summary>获取或设置消息的安全上下文。</summary>
      <returns>如果以前曾经设置该属性，则为 <see cref="T:System.Messaging.SecurityContext" /> 对象，其中包含用于消息的安全上下文；否则为 NULL。</returns>
    </member>
    <member name="P:System.Messaging.Message.SenderCertificate">
      <summary>获取或设置用于验证消息的安全证书。</summary>
      <returns>表示安全证书的字节值数组，消息队列用该数组验证消息的发送方。 默认值为零长度的数组。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SenderCertificate" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.SenderId">
      <summary>获取发送用户的标识符。</summary>
      <returns>标识发送方的字节值数组。 接收队列管理器在对消息进行身份验证时使用标识符 — 以验证消息的发送方和发送方对队列的访问权限。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SenderId" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.SenderVersion">
      <summary>获取用于发送消息的消息队列版本。</summary>
      <returns>用于发送消息的消息队列版本。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SenderVersion" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.SentTime">
      <summary>获取发送计算机上源队列管理器发送消息的日期和时间。</summary>
      <returns>表示消息发送时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SentTime" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.SourceMachine">
      <summary>获取发出消息的计算机。</summary>
      <returns>发送消息的计算机的名称。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SourceMachine" /> 属性。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">未能访问计算机信息和目录服务。</exception>
    </member>
    <member name="P:System.Messaging.Message.TimeToBeReceived">
      <summary>获取或设置要从目标队列接收消息所需的最长时间。</summary>
      <returns>从目标队列接收已发送消息所需的总时间。 默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.TimeToBeReceived" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">为 <see cref="P:System.Messaging.Message.TimeToBeReceived" /> 指定的值无效。</exception>
    </member>
    <member name="P:System.Messaging.Message.TimeToReachQueue">
      <summary>获取或设置消息到达队列所用的最长时间。</summary>
      <returns>从发送消息的时间开始算起，消息到达目标队列的时间限制。 默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.TimeToReachQueue" /> 属性。</exception>
      <exception cref="T:System.ArgumentException">为 <see cref="P:System.Messaging.Message.TimeToReachQueue" /> 指定的值无效。 它可能表示负数。</exception>
    </member>
    <member name="P:System.Messaging.Message.TransactionId">
      <summary>获取曾包含消息的事务的标识符。</summary>
      <returns>与消息关联的事务的标识符。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.TransactionId" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.TransactionStatusQueue">
      <summary>获取源计算机中的事务状态队列。</summary>
      <returns>源计算机中的事务状态队列，用于将确认消息发回发送应用程序。 默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">消息尚未发送。 该属性只能在从队列中检索的消息上读取。 - 或 - 消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.TransactionStatusQueue" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.UseAuthentication">
      <summary>获取或设置一个值，该值指示消息发送前是否验证了（或是否必须验证）。</summary>
      <returns>如果发送应用程序请求对消息进行验证，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseAuthentication" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.UseDeadLetterQueue">
      <summary>获取或设置一个值，该值指示是否将未能传递的消息的副本发送到死信队列。</summary>
      <returns>如果消息传递失败应导致向死信队列发送消息的副本，则为 true，否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseDeadLetterQueue" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.UseEncryption">
      <summary>获取或设置一个值，该值指示是否使消息成为私有的。</summary>
      <returns>要求消息队列加密消息时为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseEncryption" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.UseJournalQueue">
      <summary>获取或设置一个值，该值指示是否在始发计算机的计算机日记中保留消息的副本。</summary>
      <returns>在成功地将消息从始发计算机传输到下一个服务器后，要求在始发计算机的计算机日记中保留消息副本时为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseJournalQueue" /> 属性。</exception>
    </member>
    <member name="P:System.Messaging.Message.UseTracing">
      <summary>获取或设置一个值，该值指示是否在消息向目标队列移动的过程中跟踪消息。</summary>
      <returns>如果在发往目标队列的过程中，由原始消息产生的每个中间步骤都生成发送给系统报告队列的报告，则为 true，否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseTracing" /> 属性。</exception>
    </member>
    <member name="T:System.Messaging.MessageEnumerator">
      <summary>提供一个只进游标，以枚举通过消息队列中的消息。</summary>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.Close">
      <summary>释放与枚举数关联的资源。</summary>
    </member>
    <member name="P:System.Messaging.MessageEnumerator.Current">
      <summary>获取该枚举数指向的当前 <see cref="T:System.Messaging.Message" />。</summary>
      <returns>当前消息。</returns>
      <exception cref="T:System.InvalidOperationException">您在第一次调用 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 之前调用了 <see cref="P:System.Messaging.MessageEnumerator.Current" />。 游标位于消息枚举的第一个元素之前。 - 或 - 您在对 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 的调用返回 false（指示游标位于消息枚举中的最后一个元素之后）之后调用了 <see cref="P:System.Messaging.MessageEnumerator.Current" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">枚举数当前所指向的消息不再存在。 可能已将其删除。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageEnumerator.CursorHandle">
      <summary>获取用于浏览队列消息的本机消息队列游标句柄。</summary>
      <returns>本机游标句柄。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">此句柄不存在。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.Dispose">
      <summary>释放由 <see cref="T:System.Messaging.MessageEnumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Messaging.MessageEnumerator" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.MoveNext">
      <summary>如果当前队列中有下一条可用的消息，则使枚举数前进到该消息。</summary>
      <returns>枚举数成功地前进到下一条消息时为 true；枚举数已经到达队列的末尾时为 false。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">引发了消息队列特定的异常。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
      <summary>使枚举数前进到队列中的下一条消息。 如果枚举数位于队列的末尾，则 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 将一直等到消息可用或给定 timeout 到期为止。</summary>
      <returns>如果枚举数成功地前进到下一条消息，为 true；如果枚举数已经到达队列的末尾，并且在 <paramref name="timeout" /> 参数所指定的时间内没有消息变得可用，则为 false。</returns>
      <param name="timeout">枚举数位于队列的末尾时，等待消息变得可用的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentException">为 timeout 参数指定的值无效。 它可能表示负数。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">引发了消息队列特定的异常。 - 或 - 超时已过期。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent">
      <summary>从事务性或非事务性队列中移除当前消息，并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
      <summary>从事务性队列中移除当前消息，并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="transaction">指定从中移除消息的事务的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transaction" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
      <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
      <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="timeout">等待消息到达队列的时间间隔。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
      <summary>从事务性队列中移除当前消息，并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="timeout">等待消息被移除的时间间隔。</param>
      <param name="transaction">为消息指定事务上下文的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transaction" /> 参数为 null。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
      <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="timeout">等待消息被移除的时间间隔。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.Reset">
      <summary>重置当前枚举数，使其指向队列开头。</summary>
    </member>
    <member name="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取该枚举数指向的当前 <see cref="T:System.Messaging.Message" />。</summary>
      <returns>当前消息。</returns>
      <exception cref="T:System.InvalidOperationException">您在第一次调用 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 之前访问了此属性。 游标位于消息枚举的第一个元素之前。 - 或 - 您在对 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 的调用返回 false（指示游标位于消息枚举中的最后一个元素之后）之后访问了此属性。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">枚举数当前所指向的消息不再存在。 可能已将其删除。</exception>
    </member>
    <member name="T:System.Messaging.MessageLookupAction">
      <summary>指定要从消息队列中查看或接收的消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageLookupAction.Current">
      <summary>读取当前消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageLookupAction.First">
      <summary>读取队列中的第一条消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageLookupAction.Last">
      <summary>读取队列中的最后一条消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageLookupAction.Next">
      <summary>读取下一条消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageLookupAction.Previous">
      <summary>读取前一条消息。</summary>
    </member>
    <member name="T:System.Messaging.MessagePriority">
      <summary>指定消息队列在消息传递到队列的过程中应用于该消息的优先级，以及指定何时将消息插入目标队列。</summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.AboveNormal">
      <summary>位于 <see cref="F:System.Messaging.MessagePriority.High" /> 和 <see cref="F:System.Messaging.MessagePriority.Normal" /> 消息优先级之间。</summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.High">
      <summary>高消息优先级。</summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.Highest">
      <summary>最高消息优先级。</summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.Low">
      <summary>低消息优先级。</summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.Lowest">
      <summary>最低消息优先级。</summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.Normal">
      <summary>普通消息优先级。</summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.VeryHigh">
      <summary>位于 Highest 和 High 消息优先级之间。</summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.VeryLow">
      <summary>位于 Low 和 Lowest 消息优先级之间。</summary>
    </member>
    <member name="T:System.Messaging.MessagePropertyFilter">
      <summary>控制并选择从消息队列查看或接收消息时检索的属性。</summary>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.MessagePropertyFilter" /> 类的新实例并为所有属性设置默认值。</summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AcknowledgeType">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.AcknowledgeType" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.AcknowledgeType" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Acknowledgment">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.Acknowledgment" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.Acknowledgment" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AdministrationQueue">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.AdministrationQueue" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.AdministrationQueue" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AppSpecific">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.AppSpecific" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.AppSpecific" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.ArrivedTime">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.ArrivedTime" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.ArrivedTime" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AttachSenderId">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.AttachSenderId" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.AttachSenderId" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Authenticated">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.Authenticated" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.Authenticated" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AuthenticationProviderName">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AuthenticationProviderType">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Body">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.Body" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.Body" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.ClearAll">
      <summary>将所有布尔型筛选器的值设置为 false，以便在接收消息时不检索消息属性。</summary>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.Clone">
      <summary>创建对象的浅表副本。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示 <see cref="T:System.Messaging.MessagePropertyFilter" /> 类的实例。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.ConnectorType">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.ConnectorType" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.ConnectorType" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.CorrelationId">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.CorrelationId" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.CorrelationId" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DefaultBodySize">
      <summary>获取或设置默认主体缓冲区的大小（以字节为单位）。</summary>
      <returns>接收消息时创建的默认主体缓冲区大小。 默认值为 1024 个字节。</returns>
      <exception cref="T:System.ArgumentException">分配的值为负。</exception>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DefaultExtensionSize">
      <summary>获取或设置默认扩展缓冲区的大小（以字节为单位）。</summary>
      <returns>接收消息时创建的默认扩展缓冲区大小。 默认值为 255 个字节。</returns>
      <exception cref="T:System.ArgumentException">分配的值为负。</exception>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DefaultLabelSize">
      <summary>获取或设置默认标签缓冲区的大小（以字节为单位）。</summary>
      <returns>接收消息时创建的默认标签缓冲区大小。 默认值为 255 个字节。</returns>
      <exception cref="T:System.ArgumentException">分配的值为负。</exception>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DestinationQueue">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.DestinationQueue" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.DestinationQueue" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DestinationSymmetricKey">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DigitalSignature">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.DigitalSignature" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.DigitalSignature" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.EncryptionAlgorithm">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.EncryptionAlgorithm" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.EncryptionAlgorithm" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Extension">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.Extension" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.Extension" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.HashAlgorithm">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.HashAlgorithm" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.HashAlgorithm" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Id">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.Id" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.Id" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.IsFirstInTransaction">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.IsFirstInTransaction" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.IsFirstInTransaction" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.IsLastInTransaction">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.IsLastInTransaction" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.IsLastInTransaction" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Label">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.Label" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.Label" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.LookupId">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.LookupId" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.LookupId" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.MessageType">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.MessageType" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.MessageType" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Priority">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.Priority" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.Priority" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Recoverable">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.Recoverable" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.Recoverable" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.ResponseQueue">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.ResponseQueue" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.ResponseQueue" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SenderCertificate">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.SenderCertificate" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.SenderCertificate" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SenderId">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.SenderId" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.SenderId" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SenderVersion">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.SenderVersion" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.SenderVersion" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SentTime">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.SentTime" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.SentTime" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.SetAll">
      <summary>指定在接收消息时检索消息的所有属性。</summary>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.SetDefaults">
      <summary>将公共消息队列属性的筛选器值设置为 true，并将整数值属性设置为它们的默认值。</summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SourceMachine">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.SourceMachine" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.SourceMachine" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.TimeToBeReceived">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.TimeToBeReceived" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.TimeToBeReceived" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.TimeToReachQueue">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.TimeToReachQueue" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.TimeToReachQueue" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.TransactionId">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.TransactionId" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.TransactionId" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.TransactionStatusQueue">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.TransactionStatusQueue" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.TransactionStatusQueue" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseAuthentication">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.UseAuthentication" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.UseAuthentication" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseDeadLetterQueue">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.UseDeadLetterQueue" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.UseDeadLetterQueue" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseEncryption">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.UseEncryption" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.UseEncryption" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseJournalQueue">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.UseJournalQueue" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.UseJournalQueue" /> 信息，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseTracing">
      <summary>获取或设置一个值，该值指示接收或查看消息时是否检索 <see cref="P:System.Messaging.Message.UseTracing" /> 属性信息。</summary>
      <returns>如果接收 <see cref="P:System.Messaging.Message.UseTracing" /> 信息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.Messaging.MessageQueue">
      <summary>提供对“消息队列”服务器上的队列的访问。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueue" /> 类的新实例。 默认构造函数初始化新实例后，必须设置该实例的 <see cref="P:System.Messaging.MessageQueue.Path" /> 属性才能使用该实例。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueue" /> 类的新实例，该实例引用指定路径处的“消息队列”队列。</summary>
      <param name="path">此 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列的位置。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.MessageQueue.Path" /> 属性无效，很可能因为尚未设置该属性。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueue" /> 类的新实例，该实例引用位于指定路径处而且具有指定读访问限制的“消息队列”队列。</summary>
      <param name="path">此 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列的位置，它对于本地计算机可以是“.”。 有关此参数的正确语法的信息，请参见备注部分。</param>
      <param name="sharedModeDenyReceive">true，授予访问该队列的第一个应用程序独占读访问权；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.MessageQueue.Path" /> 属性无效，很可能因为尚未设置该属性。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueue" /> 类的新实例。</summary>
      <param name="path">此 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列的位置，它对于本地计算机可以是“.”。</param>
      <param name="sharedModeDenyReceive">true，授予访问该队列的第一个应用程序独占读访问权；否则为 false。</param>
      <param name="enableCache">如果创建和使用连接缓存，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueue" /> 类的新实例。</summary>
      <param name="path">此 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列的位置，它对于本地计算机可以是“.”。</param>
      <param name="sharedModeDenyReceive">true，授予访问该队列的第一个应用程序独占读访问权；否则为 false。</param>
      <param name="enableCache">如果创建和使用连接缓存，则为 true；否则为 false。</param>
      <param name="accessMode">
        <see cref="T:System.Messaging.QueueAccessMode" /> 值之一。</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueue" /> 类的新实例。</summary>
      <param name="path">此 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列的位置，它对于本地计算机可以是“.”。</param>
      <param name="accessMode">
        <see cref="T:System.Messaging.QueueAccessMode" /> 值之一。</param>
    </member>
    <member name="P:System.Messaging.MessageQueue.AccessMode">
      <summary>获取一个值，该值指示队列的访问模式。</summary>
      <returns>
        <see cref="T:System.Messaging.QueueAccessMode" /> 值之一。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueue.Authenticate">
      <summary>获取或设置一个值，该值指示队列是否仅接受经过身份验证的消息。</summary>
      <returns>如果队列仅接受已经过身份验证的消息，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.BasePriority">
      <summary>获取或设置基优先级，“消息队列”使用该基优先级在网络上传送公共队列的消息。</summary>
      <returns>发送到（公共）队列的所有消息的单个基本优先级。 默认值为零 (0)。</returns>
      <exception cref="T:System.ArgumentException">基优先级被设置为无效值。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek">
      <summary>启动一个没有超时设定的异步查看操作。 直到队列中出现消息时，才完成此操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)">
      <summary>启动一个具有指定超时设定的异步查看操作。 直到队列中出现消息时或发生超时时才完成操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待消息变为可用所用的时间间隔。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)">
      <summary>启动异步查看操作，此操作具有指定的超时并使用指定的游标、指定的查看操作和指定的状态对象。 状态对象在操作的整个生存期内提供相关的信息。 此重载通过回调接收操作的事件处理程序标识的通知。 直到队列中出现消息时或发生超时时才完成操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待消息变为可用所用的时间间隔。</param>
      <param name="cursor">维持消息队列中特定位置的 <see cref="T:System.Messaging.Cursor" />。</param>
      <param name="action">
        <see cref="T:System.Messaging.PeekAction" /> 值之一。 指示是查看队列中的当前消息还是下一条消息。</param>
      <param name="state">应用程序指定的状态对象，包含与异步操作关联的信息。</param>
      <param name="callback">该 <see cref="T:System.AsyncCallback" /> 将接收异步操作完成通知。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">为 <paramref name="action" /> 参数指定的值不是 PeekAction.Current 和 PeekAction.Next。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursor" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)">
      <summary>启动具有指定超时设定和指定状态对象的异步查看操作，此状态对象在操作的整个生存期内提供相关信息。 直到队列中出现消息时或发生超时时才完成操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待消息变为可用所用的时间间隔。</param>
      <param name="stateObject">应用程序指定的状态对象，包含与异步操作关联的信息。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)">
      <summary>启动具有指定超时设定和指定状态对象的异步查看操作，此状态对象在操作的整个生存期内提供相关信息。 此重载通过回调接收操作的事件处理程序标识的通知。 直到队列中出现消息时或发生超时时才完成操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待消息变为可用所用的时间间隔。</param>
      <param name="stateObject">应用程序指定的状态对象，包含与异步操作关联的信息。</param>
      <param name="callback">该 <see cref="T:System.AsyncCallback" /> 将接收异步操作完成通知。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive">
      <summary>启动一个没有超时设定的异步接收操作。 直到队列中出现消息时，才完成此操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)">
      <summary>启动具有指定超时设定的异步接收操作。 直到队列中出现消息时或发生超时时才完成操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待消息变为可用所用的时间间隔。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是因为它表示负数。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)">
      <summary>启动异步接收操作，此操作具有指定的超时并使用指定的游标和指定的状态对象。 状态对象在操作的整个生存期内提供相关的信息。 此重载通过回调接收操作的事件处理程序标识的通知。 直到队列中出现消息时或发生超时时才完成操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待消息变为可用所用的时间间隔。</param>
      <param name="cursor">维持消息队列中特定位置的 <see cref="T:System.Messaging.Cursor" />。</param>
      <param name="state">应用程序指定的状态对象，包含与异步操作关联的信息。</param>
      <param name="callback">该 <see cref="T:System.AsyncCallback" /> 将接收异步操作完成通知。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursor" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)">
      <summary>启动具有指定超时设定和指定状态对象的异步接收操作，此状态对象在操作的整个生存期内提供相关信息。 直到队列中出现消息时或发生超时时才完成操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待消息变为可用所用的时间间隔。</param>
      <param name="stateObject">应用程序指定的状态对象，包含与异步操作关联的信息。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)">
      <summary>启动具有指定超时设定和指定状态对象的异步接收操作，此状态对象在操作的整个生存期内提供相关信息。 此重载通过回调接收操作的事件处理程序标识的通知。 直到队列中出现消息时或发生超时时才完成操作。</summary>
      <returns>该 <see cref="T:System.IAsyncResult" /> 标识已发布的异步请求的。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待消息变为可用所用的时间间隔。</param>
      <param name="stateObject">应用程序指定的状态对象，包含与异步操作关联的信息。</param>
      <param name="callback">该 <see cref="T:System.AsyncCallback" /> 将接收异步操作完成通知。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.CanRead">
      <summary>获取一个值，该值指示 <see cref="T:System.Messaging.MessageQueue" /> 是否可读。</summary>
      <returns>如果存在 <see cref="T:System.Messaging.MessageQueue" /> 而且应用程序可从其中读取，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.CanWrite">
      <summary>获取一个值，该值指示 <see cref="T:System.Messaging.MessageQueue" /> 是否可写。</summary>
      <returns>如果存在 <see cref="T:System.Messaging.MessageQueue" /> 而且应用程序可向其中写入，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.Category">
      <summary>获取或设置队列类别。</summary>
      <returns>
        <see cref="T:System.Guid" />，表示队列类别（“消息队列”类型标识符），它允许应用程序将其队列分类。 默认值为 Guid.empty。</returns>
      <exception cref="T:System.ArgumentException">队列类别被设置为无效值。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ClearConnectionCache">
      <summary>清除连接缓存。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.Close">
      <summary>释放 <see cref="T:System.Messaging.MessageQueue" /> 分配的所有资源。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.Create(System.String)">
      <summary>在指定的路径中创建非事务性“消息队列”队列。</summary>
      <returns>表示新队列的 <see cref="T:System.Messaging.MessageQueue" />。</returns>
      <param name="path">要创建的队列的路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 参数为 null 或者是空字符串 ("")。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">队列已存在于指定的路径中。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Administer" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Create(System.String,System.Boolean)">
      <summary>在指定的路径中创建事务性或非事务性“消息队列”队列。</summary>
      <returns>表示新队列的 <see cref="T:System.Messaging.MessageQueue" />。</returns>
      <param name="path">要创建的队列的路径。</param>
      <param name="transactional">如果创建事务性队列，为 true；如果创建非事务性队列，则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 参数为 null 或者是空字符串 ("")。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">队列已存在于指定的路径中。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Administer" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.CreateCursor">
      <summary>为当前消息队列创建新的 <see cref="T:System.Messaging.Cursor" />。</summary>
      <returns>当前消息队列的新 <see cref="T:System.Messaging.Cursor" />。 此游标用于在读取队列的消息时保持队列中的特定位置。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueue.CreateTime">
      <summary>获取在“消息队列”中创建队列的时间和日期。</summary>
      <returns>表示队列创建日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.DefaultPropertiesToSend">
      <summary>获取或设置(当应用程序向队列发送消息时)默认情况下使用的消息属性值。</summary>
      <returns>
        <see cref="T:System.Messaging.DefaultPropertiesToSend" />，它包含当应用程序向队列发送 <see cref="T:System.Messaging.Message" /> 实例以外的对象时使用的默认“消息队列”消息属性值。</returns>
      <exception cref="T:System.ArgumentException">未能设置队列的默认属性，可能因为这些属性之一无效。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.Delete(System.String)">
      <summary>删除“消息队列”服务器上的队列。</summary>
      <param name="path">要删除的队列的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 参数为 null 或者是空字符串 ("")。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">该 <paramref name="path" /> 参数的语法无效。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.DenySharedReceive">
      <summary>获取或设置一个值，该值指示此 <see cref="T:System.Messaging.MessageQueue" /> 对来自“消息队列”队列的消息是否有独占接收访问权。</summary>
      <returns>如果此 <see cref="T:System.Messaging.MessageQueue" /> 对来自队列的消息有独占接收权，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Dispose(System.Boolean)">
      <summary>处置由 <see cref="T:System.Messaging.MessageQueue" /> 占用的资源（内存除外）。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Messaging.MessageQueue.EnableConnectionCache">
      <summary>获取或设置一个值，该值指示应用程序是否维护连接缓存。</summary>
      <returns>如果创建和使用连接缓存，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueue.EncryptionRequired">
      <summary>获取或设置一个指示队列是否只接受非私有（非加密）消息的值。</summary>
      <returns>
        <see cref="T:System.Messaging.EncryptionRequired" /> 值之一。 默认值为 None。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)">
      <summary>完成指定的异步查看操作。</summary>
      <returns>该 <see cref="T:System.Messaging.Message" /> 与已完成的异步操作关联。</returns>
      <param name="asyncResult">该 <see cref="T:System.IAsyncResult" /> 标识要完成的异步查看操作，并且从它检索最终结果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">该 <paramref name="asyncResult" /> 参数的语法无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)">
      <summary>完成指定的异步接收操作。</summary>
      <returns>该 <see cref="T:System.Messaging.Message" /> 与已完成的异步操作关联。</returns>
      <param name="asyncResult">该 <see cref="T:System.IAsyncResult" /> 标识要完成的异步接收操作，并且从它检索最终结果。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">该 <paramref name="asyncResult" /> 参数的语法无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.Exists(System.String)">
      <summary>确定指定的路径中是否存在“消息队列”队列。</summary>
      <returns>如果指定的路径中存在队列，则为 true；否则为 false。</returns>
      <param name="path">要查找的队列的位置。</param>
      <exception cref="T:System.ArgumentException">该 <paramref name="path" /> 语法无效。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。 - 或 - <see cref="M:System.Messaging.MessageQueue.Exists(System.String)" /> 方法正被远程专用队列调用。</exception>
      <exception cref="T:System.InvalidOperationException">应用程序在验证队列是否存在时使用的格式名语法。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.FormatName">
      <summary>获取“消息队列”在创建队列时生成的唯一队列名。</summary>
      <returns>队列的名称，该名称在网络上是唯一的。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">未设置 <see cref="P:System.Messaging.MessageQueue.Path" />。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.Formatter">
      <summary>获取或设置格式化程序，该格式化程序用于将对象序列化为从队列读取或写入队列的消息体，或者用于将从队列读取或写入队列的消息体反序列化为对象。</summary>
      <returns>该 <see cref="T:System.Messaging.IMessageFormatter" /> 产生要写入消息体或要从消息体中读取的流。 默认值为 <see cref="T:System.Messaging.XmlMessageFormatter" />。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetAllMessages">
      <summary>返回位于队列中的所有消息。</summary>
      <returns>类型 <see cref="T:System.Messaging.Message" /> 的数组，表示队列中所有消息，其顺序与这些消息在“消息队列”队列中的出现顺序相同。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetEnumerator">
      <summary>枚举队列中的消息。 <see cref="M:System.Messaging.MessageQueue.GetEnumerator" /> 已弃用。 应改用 <see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，它提供与队列消息的动态连接。</returns>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMachineId(System.String)">
      <summary>获取计算机的标识符，此 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列位于该计算机上。</summary>
      <returns>
        <see cref="T:System.Guid" />，表示队列所在的计算机的唯一标识符。</returns>
      <param name="machineName">包含队列的计算机的名称，名称前不含两个反斜杠 (\\)。</param>
      <exception cref="T:System.Messaging.MessageQueueException">未能检索到计算机标识符，可能是因为目录服务不可用，例如当正在脱机工作时。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMessageEnumerator">
      <summary>为队列中的所有消息创建枚举数对象。 <see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" /> 已弃用。 应改用 <see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />。</summary>
      <returns>该 <see cref="T:System.Messaging.MessageEnumerator" /> 包括队列中所包含的消息。</returns>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMessageEnumerator2">
      <summary>为队列中的所有消息创建枚举数对象。</summary>
      <returns>该 <see cref="T:System.Messaging.MessageEnumerator" /> 包括队列中所包含的消息。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator">
      <summary>提供只进游标语义，以枚举网络上的所有公共队列。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueueEnumerator" />，提供网络上所有公共消息队列的动态列表。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)">
      <summary>提供只进游标语义，以枚举网络上满足指定判据的所有公共队列。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueueEnumerator" />，提供网络上公共消息队列的动态列表，这些消息队列满足 <paramref name="criteria" /> 参数指定的限制。</returns>
      <param name="criteria">
        <see cref="T:System.Messaging.MessageQueueCriteria" />，包含用于筛选可用消息队列的判据。</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)">
      <summary>检索指定计算机上的所有专用队列。</summary>
      <returns>引用检索的专用队列的 <see cref="T:System.Messaging.MessageQueue" /> 对象数组。</returns>
      <param name="machineName">计算机，从其中检索专用队列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数为 null 或是空字符串（“”）。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueues">
      <summary>检索网络上的所有公共队列。</summary>
      <returns>引用检索的公共队列的 <see cref="T:System.Messaging.MessageQueue" /> 对象数组。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)">
      <summary>检索网络上满足指定判据的所有公共队列。</summary>
      <returns>引用检索的公共队列的 <see cref="T:System.Messaging.MessageQueue" /> 对象数组。</returns>
      <param name="criteria">
        <see cref="T:System.Messaging.MessageQueueCriteria" />，包含用于筛选队列的判据。</param>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)">
      <summary>检索网络上所有属于指定类别的公共队列。</summary>
      <returns>引用检索的公共队列的 <see cref="T:System.Messaging.MessageQueue" /> 对象数组。</returns>
      <param name="category">一个 <see cref="T:System.Guid" />，它将要检索的队列集分组。</param>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)">
      <summary>检索网络上带有指定标签的所有公共队列。</summary>
      <returns>引用检索的公共队列的 <see cref="T:System.Messaging.MessageQueue" /> 对象数组。</returns>
      <param name="label">一个标签，它将要检索的队列集分组。</param>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="label" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)">
      <summary>检索驻留在指定计算机上的所有公共队列。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueue" /> 对象数组，这些对象引用该计算机上的公共队列。</returns>
      <param name="machineName">计算机的名称，该计算机包含要检索的公共队列集。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数的语法不正确。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetSecurityContext">
      <summary>检索进行此调用时 MSMQ 将当前用户（线程标识）关联到的安全上下文。</summary>
      <returns>包含安全上下文的 <see cref="T:System.Messaging.SecurityContext" /> 对象。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueue.Id">
      <summary>获取队列的唯一“消息队列”标识符。</summary>
      <returns>
        <see cref="P:System.Messaging.MessageQueue.Id" />，表示由“消息队列”应用程序生成的消息标识符。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="F:System.Messaging.MessageQueue.InfiniteQueueSize">
      <summary>指定对某队列不存在大小限制。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueue.InfiniteTimeout">
      <summary>指定对查看或接收消息的方法不存在超时设定。</summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.Label">
      <summary>获取或设置队列说明。</summary>
      <returns>消息队列的标签。 默认值为空字符串 ("")。</returns>
      <exception cref="T:System.ArgumentException">标签被设置为无效值。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.LastModifyTime">
      <summary>获取队列属性的最近修改时间。</summary>
      <returns>指示队列属性最近修改时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.MachineName">
      <summary>获取或设置“消息队列”队列所在的计算机的名称。</summary>
      <returns>队列所在的计算机的名称。 “消息队列”默认值为“.”，即本地计算机。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.MessageQueue.MachineName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.MessageQueue.MachineName" /> 为 null。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.MaximumJournalSize">
      <summary>获取或设置日记队列的最大大小。</summary>
      <returns>日记队列的最大大小，以千字节为单位。 “消息队列”默认设置指定：不存在任何限制。</returns>
      <exception cref="T:System.ArgumentException">日记队列的最大大小被设置为无效值。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.MaximumQueueSize">
      <summary>获取或设置队列的最大大小。</summary>
      <returns>队列的最大大小，以千字节为单位。 “消息队列”默认设置指定：不存在任何限制。</returns>
      <exception cref="T:System.ArgumentException">队列最大大小包含负值。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.MessageReadPropertyFilter">
      <summary>获取或设置接收或查看消息的属性筛选器。</summary>
      <returns>由队列使用的 <see cref="T:System.Messaging.MessagePropertyFilter" />，用来筛选队列所接收或查看的每个消息的属性集。</returns>
      <exception cref="T:System.ArgumentException">筛选器为 null。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueue.MulticastAddress">
      <summary>在 MSMQ 3.0 中引入。 获取或设置与队列关联的多路广播地址。</summary>
      <returns>包含有效的多路广播地址（格式如下）的 <see cref="T:System.String" />，或者为 null，这表示队列与多路广播地址不关联。 &lt;address&gt;:&lt;port&gt;</returns>
      <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueue.Path">
      <summary>获取或设置队列的路径。 设置 <see cref="P:System.Messaging.MessageQueue.Path" /> 会导致 <see cref="T:System.Messaging.MessageQueue" /> 指向新队列。</summary>
      <returns>由 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列。 默认值取决于所使用的 <see cref="M:System.Messaging.MessageQueue.#ctor" /> 构造函数；它或者是 null，或者是由构造函数的 <paramref name="path" /> 参数指定的。</returns>
      <exception cref="T:System.ArgumentException">路径无效，可能是因为语法无效。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.Peek">
      <summary>返回但不移除（查看）此 <see cref="T:System.Messaging.MessageQueue" /> 所引用的队列中的第一条消息。 <see cref="M:System.Messaging.MessageQueue.Peek" /> 方法是同步的，所以在有可用消息前，该方法阻塞当前线程。</summary>
      <returns>该 <see cref="T:System.Messaging.Message" /> 表示队列中第一条消息。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Peek(System.TimeSpan)">
      <summary>返回但不移除（查看）此 <see cref="T:System.Messaging.MessageQueue" /> 所引用的队列中的第一条消息。 <see cref="M:System.Messaging.MessageQueue.Peek" /> 方法是同步的，因此在有可用消息或发生指定的超时之前，它一直阻止当前线程。</summary>
      <returns>该 <see cref="T:System.Messaging.Message" /> 表示队列中第一条消息。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待队列包含消息所用的最长时间。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)">
      <summary>使用指定的游标返回但不移除（查看）队列中的当前消息或下一条消息。 <see cref="M:System.Messaging.MessageQueue.Peek" /> 方法是同步的，因此在有可用消息或发生指定的超时之前，它一直阻止当前线程。</summary>
      <returns>一个 <see cref="T:System.Messaging.Message" />，表示队列中的消息。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示等待队列包含消息所用的最长时间。</param>
      <param name="cursor">维持消息队列中特定位置的 <see cref="T:System.Messaging.Cursor" />。</param>
      <param name="action">
        <see cref="T:System.Messaging.PeekAction" /> 值之一。 指示是查看队列中的当前消息还是下一条消息。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">为 <paramref name="action" /> 参数指定的值不是 PeekAction.Current 和 PeekAction.Next。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursor" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。 <paramref name="timeout" /> 可能小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)">
      <summary>查看匹配给定相关标识符的消息，而且在队列中当前不存在具有指定相关标识符的消息时，立即引发异常。</summary>
      <returns>其 <see cref="P:System.Messaging.Message.CorrelationId" /> 匹配传入的 <paramref name="correlationId" /> 参数的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="correlationId">要查看的消息的 <see cref="P:System.Messaging.Message.CorrelationId" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="correlationId" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="correlationId" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)">
      <summary>查看匹配给定相关标识符的消息，并且一直等到队列中出现具有指定相关标识符的消息或超时过期时。</summary>
      <returns>其 <see cref="P:System.Messaging.Message.CorrelationId" /> 匹配传入的 <paramref name="correlationId" /> 参数的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="correlationId">要查看的消息的 <see cref="P:System.Messaging.Message.CorrelationId" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="correlationId" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.InvalidOperationException">具有指定 <paramref name="correlationId" /> 的消息不在队列中，而且在超时过期之前没有到达。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">消息在超时过期前没有到达。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekById(System.String)">
      <summary>查看其消息标识符匹配 <paramref name="id" /> 参数的消息。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Id" /> 属性匹配 <paramref name="id" /> 参数。</returns>
      <param name="id">要查看的消息的 <see cref="P:System.Messaging.Message.Id" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">不存在具有指定 <paramref name="id" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)">
      <summary>查看其消息标识符匹配 <paramref name="id" /> 参数的消息。 一直等到队列中出现该消息或发生超时。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Id" /> 属性匹配 <paramref name="id" /> 参数。</returns>
      <param name="id">要查看的消息的 <see cref="P:System.Messaging.Message.Id" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.InvalidOperationException">队列中不存在具有指定 <paramref name="id" /> 的消息，并且在 <paramref name="timeout" /> 参数指定的时间段过期之前该消息仍未到达。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekByLookupId(System.Int64)">
      <summary>在 MSMQ 3.0 中引入。 从非事务性队列中查看与给定查找标识符匹配的消息。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.LookupId" /> 属性匹配传入的 <paramref name="lookupId" /> 参数。</returns>
      <param name="lookupId">要查看的消息的 <see cref="P:System.Messaging.Message.LookupId" />。</param>
      <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="lookupId" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)">
      <summary>在 MSMQ 3.0 中引入。 查看队列中特定的消息。 消息可通过查询标识符来指定，也可以通过其相对于队首或队尾的位置来指定。</summary>
      <returns>由传入的 <paramref name="action" /> 和 <paramref name="lookupId" /> 参数指定的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="action">一个 <see cref="T:System.Messaging.MessageLookupAction" /> 值，指定读取队列中消息的方式。 指定以下值之一： MessageLookupAction.Current：查看由 <paramref name="lookupId" /> 指定的消息。 MessageLookupAction.Next：查看由 <paramref name="lookupId" /> 指定的消息的下一条消息。 MessageLookupAction.Previous：查看由 <paramref name="lookupId" /> 指定的消息的前一条消息。 MessageLookupAction.First：查看队列中的第一条消息。 <paramref name="lookupId" /> 参数必须设置为 0。 MessageLookupAction.Last：查看队列中的最后一条消息。 <paramref name="lookupId" /> 参数必须设置为 0。</param>
      <param name="lookupId">要查看的消息的 <see cref="P:System.Messaging.Message.LookupId" /> 或者为 0。访问队列中的第一条和最后一条消息时使用 0。</param>
      <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="lookupId" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="action" /> 参数不是 <see cref="T:System.Messaging.MessageLookupAction" /> 成员之一。</exception>
    </member>
    <member name="E:System.Messaging.MessageQueue.PeekCompleted">
      <summary>在消息未从队列移除的情况下读取该消息时发生。 这是异步操作 <see cref="M:System.Messaging.MessageQueue.BeginPeek" /> 的结果。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.Purge">
      <summary>删除队列中包含的所有消息。</summary>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.QueueName">
      <summary>获取或设置标识队列的友好名称。</summary>
      <returns>名称，该名称标识由此 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列。 该值不能为 null。</returns>
      <exception cref="T:System.ArgumentException">队列名称为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.ReadHandle">
      <summary>获取用于从消息队列读取消息的本机句柄。</summary>
      <returns>用于查看和接收来自队列的消息的本机队列对象的句柄。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive">
      <summary>接收 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列中可用的第一条消息。 此调用是同步的，在有可用消息前，它将一直阻止当前线程的执行。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)">
      <summary>接收 <see cref="T:System.Messaging.MessageQueue" /> 引用的事务性队列中可用的第一条消息。 此调用是同步的，在有可用消息前，它将一直阻止当前线程的执行。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。 - 或 - 该队列为非事务性队列。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)">
      <summary>接收 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列中可用的第一条消息。 此调用是同步的，在有可用消息前，它将一直阻止当前线程的执行。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan)">
      <summary>接收由 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列中的第一条可用消息，并且一直等到队列中有可用消息或超时过期。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在超时过期之前消息没有到达队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)">
      <summary>使用指定的游标接收队列中的当前消息。 如果没有可用的消息，此方法将等待，直到有可用的消息或超时到期为止。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="cursor">维持消息队列中特定位置的 <see cref="T:System.Messaging.Cursor" />。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在超时过期之前消息没有到达队列。 - 或 - 访问“消息队列”方法时出错。 使用此重载接收消息并在队列中没有消息时在指定的时间段内返回。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)">
      <summary>使用指定的游标接收队列中的当前消息。 如果没有可用的消息，此方法将等待，直到有可用的消息或超时到期为止。</summary>
      <returns>一个 <see cref="T:System.Messaging.Message" />，它引用队列中的一条消息。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="cursor">维持消息队列中特定位置的 <see cref="T:System.Messaging.Cursor" />。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursor" /> 参数为 null。 - 或 - <paramref name="transaction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。 <paramref name="timeout" /> 可能小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在超时过期之前消息没有到达队列。 - 或 - 该队列为非事务性队列。 - 或 - 访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)">
      <summary>使用指定的游标接收队列中的当前消息。 如果没有可用的消息，此方法将等待，直到有可用的消息或超时到期为止。</summary>
      <returns>一个 <see cref="T:System.Messaging.Message" />，它引用队列中的一条消息。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="cursor">维持消息队列中特定位置的 <see cref="T:System.Messaging.Cursor" />。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursor" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。 <paramref name="timeout" /> 可能小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在超时过期之前消息没有到达队列。 - 或 - 访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
      <summary>接收由 <see cref="T:System.Messaging.MessageQueue" /> 引用的事务性队列中的第一条可用消息，并且一直等到队列中有可用消息或超时过期。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在超时过期之前消息没有到达队列。 - 或 - 该队列为非事务性队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
      <summary>接收 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列中可用的第一条消息。 此调用是同步的，并且一直等到队列中有可用的消息或超时到期。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在超时过期之前消息没有到达队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)">
      <summary>从非事务性队列中接收与给定的相关标识符匹配的消息，而且在队列中当前不存在具有指定相关标识符的消息时立即引发异常。</summary>
      <returns>其 <see cref="P:System.Messaging.Message.CorrelationId" /> 匹配传入的 <paramref name="correlationId" /> 参数的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="correlationId">要接收的消息的 <see cref="P:System.Messaging.Message.CorrelationId" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="correlationId" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="correlationId" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)">
      <summary>从事务性队列中接收与给定的相关标识符匹配的消息，而且在队列中当前不存在具有指定相关标识符的消息时立即引发异常。</summary>
      <returns>其 <see cref="P:System.Messaging.Message.CorrelationId" /> 匹配传入的 <paramref name="correlationId" /> 参数的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="correlationId">要接收的消息的 <see cref="P:System.Messaging.Message.CorrelationId" />。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="correlationId" /> 参数为 null。 - 或 - <paramref name="transaction" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="correlationId" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">该队列为非事务性队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)">
      <summary>接收匹配给定相关标识符的消息，而且在队列中当前不存在具有指定相关标识符的消息时立即引发异常。</summary>
      <returns>其 <see cref="P:System.Messaging.Message.CorrelationId" /> 匹配传入的 <paramref name="correlationId" /> 参数的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="correlationId">要接收的消息的 <see cref="P:System.Messaging.Message.CorrelationId" />。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="correlationId" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="correlationId" /> 的消息。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)">
      <summary>从非事务性队列中接收与给定的相关标识符匹配的消息，并且一直等到队列中出现具有指定相关标识符的消息或者超时过期。</summary>
      <returns>其 <see cref="P:System.Messaging.Message.CorrelationId" /> 匹配传入的 <paramref name="correlationId" /> 参数的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="correlationId">要接收的消息的 <see cref="P:System.Messaging.Message.CorrelationId" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="correlationId" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">具有指定 <paramref name="correlationId" /> 的消息不在队列中，而且在超时过期之前没有到达。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)">
      <summary>从事务性队列中接收与给定的相关标识符匹配的消息，并且一直等到队列中出现具有指定相关标识符的消息或者超时过期。</summary>
      <returns>其 <see cref="P:System.Messaging.Message.CorrelationId" /> 匹配传入的 <paramref name="correlationId" /> 参数的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="correlationId">要接收的消息的 <see cref="P:System.Messaging.Message.CorrelationId" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="correlationId" /> 参数为 null。 - 或 - <paramref name="transaction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">具有指定 <paramref name="correlationId" /> 的消息不在队列中，而且在超时过期之前没有到达。 - 或 - 该队列为非事务性队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
      <summary>接收与给定的相关标识符匹配的消息，并且一直等到队列中出现具有指定相关标识符的消息或超时过期。</summary>
      <returns>其 <see cref="P:System.Messaging.Message.CorrelationId" /> 匹配传入的 <paramref name="correlationId" /> 参数的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="correlationId">要接收的消息的 <see cref="P:System.Messaging.Message.CorrelationId" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="correlationId" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="correlationId" /> 的消息。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">具有指定 <paramref name="correlationId" /> 的消息不在队列中，而且在超时过期之前没有到达。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String)">
      <summary>从非事务性队列中接收与给定的标识符匹配的消息，而且在队列中当前不存在具有指定标识符的消息时立即引发异常。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Id" /> 属性匹配传入的 <paramref name="id" /> 参数。</returns>
      <param name="id">要接收的消息的 <see cref="P:System.Messaging.Message.Id" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="id" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)">
      <summary>从事务性队列中接收与给定的标识符匹配的消息，而且在队列中当前不存在具有指定标识符的消息时立即引发异常。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Id" /> 属性匹配传入的 <paramref name="id" /> 参数。</returns>
      <param name="id">要接收的消息的 <see cref="P:System.Messaging.Message.Id" />。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。 - 或 - <paramref name="transaction" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="id" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">该队列为非事务性队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)">
      <summary>接收与给定的标识符匹配的消息，而且在队列中当前不存在具有指定标识符的消息时立即引发异常。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Id" /> 属性匹配传入的 <paramref name="id" /> 参数。</returns>
      <param name="id">要接收的消息的 <see cref="P:System.Messaging.Message.Id" />。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="id" /> 的消息。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)">
      <summary>从非事务性队列接收与给定的标识符匹配的消息，并且一直等到队列中出现具有指定标识符的消息或超时过期。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Id" /> 属性匹配传入的 <paramref name="id" /> 参数。</returns>
      <param name="id">要接收的消息的 <see cref="P:System.Messaging.Message.Id" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在时间超时之前，带有指定 <paramref name="id" /> 的消息没有到达队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)">
      <summary>从事务性队列接收与给定的标识符匹配的消息，并且一直等到队列中出现具有指定标识符的消息或超时过期。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Id" /> 属性匹配传入的 <paramref name="id" /> 参数。</returns>
      <param name="id">要接收的消息的 <see cref="P:System.Messaging.Message.Id" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。 - 或 - <paramref name="transaction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在时间超时之前，带有指定 <paramref name="id" /> 的消息没有到达队列。 - 或 - 该队列为非事务性队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
      <summary>接收与给定的标识符匹配的消息，并且一直等到队列中出现具有指定标识符的消息或超时过期。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Id" /> 属性匹配传入的 <paramref name="id" /> 参数。</returns>
      <param name="id">要接收的消息的 <see cref="P:System.Messaging.Message.Id" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" /> 指示有新消息可用于检查之前等待的时间。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效，可能是 <paramref name="timeout" /> 小于 <see cref="F:System.TimeSpan.Zero" /> 或大于 <see cref="F:System.Messaging.MessageQueue.InfiniteTimeout" />。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">在时间超时之前，带有指定 <paramref name="id" /> 的消息没有到达队列。 - 或 - 访问“消息队列”方法时出错。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)">
      <summary>在 MSMQ 3.0 中引入。 从非事务性队列中接收与给定的查找标识符匹配的消息。</summary>
      <returns>
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.LookupId" /> 属性匹配传入的 <paramref name="lookupId" /> 参数。</returns>
      <param name="lookupId">要接收的消息的 <see cref="P:System.Messaging.Message.LookupId" />。</param>
      <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="lookupId" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)">
      <summary>在 MSMQ 3.0 中引入。 从事务性队列中接收特定的消息。 消息可通过查询标识符来指定，也可以通过其相对于队首或队尾的位置来指定。</summary>
      <returns>由传入的 <paramref name="lookupId" /> 和 <paramref name="action" /> 参数指定的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="action">一个 <see cref="T:System.Messaging.MessageLookupAction" /> 值，指定读取队列中消息的方式。 指定以下值之一： MessageLookupAction.Current：接收由 <paramref name="lookupId" /> 指定的消息，然后将其从队列中移除。 MessageLookupAction.Next：接收 <paramref name="lookupId" /> 所指定消息的后一条消息，然后将其从队列中移除。 MessageLookupAction.Previous：接收 <paramref name="lookupId" /> 所指定消息的前一条消息，然后将其从队列中移除。 MessageLookupAction.First：接收队列中的第一条消息并将它从队列中移除。 <paramref name="lookupId" /> 参数必须设置为 0。 MessageLookupAction.Last：接收队列中的最后一条消息并将它从队列中移除。 <paramref name="lookupId" /> 参数必须设置为 0。</param>
      <param name="lookupId">要接收的消息的 <see cref="P:System.Messaging.Message.LookupId" />，或者为 0。访问队列中的第一条和最后一条消息时使用 0。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="lookupId" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。 - 或 - 该队列为非事务性队列。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="action" /> 参数不是 <see cref="T:System.Messaging.MessageLookupAction" /> 成员之一。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)">
      <summary>在 MSMQ 3.0 中引入。 使用指定的事务上下文从队列中接收特定的消息。 消息可通过查询标识符来指定，也可以通过其相对于队首或队尾的位置来指定。</summary>
      <returns>由传入的 <paramref name="action" /> 和 <paramref name="lookupId" /> 参数指定的 <see cref="T:System.Messaging.Message" />。</returns>
      <param name="action">一个 <see cref="T:System.Messaging.MessageLookupAction" /> 值，指定读取队列中消息的方式。 指定以下值之一： MessageLookupAction.Current：接收由 <paramref name="lookupId" /> 指定的消息，然后将其从队列中移除。 MessageLookupAction.Next：接收 <paramref name="lookupId" /> 所指定消息的后一条消息，然后将其从队列中移除。 MessageLookupAction.Previous：接收 <paramref name="lookupId" /> 所指定消息的前一条消息，然后将其从队列中移除。 MessageLookupAction.First：接收队列中的第一条消息并将它从队列中移除。 <paramref name="lookupId" /> 参数必须设置为 0。 MessageLookupAction.Last：接收队列中的最后一条消息并将它从队列中移除。 <paramref name="lookupId" /> 参数必须设置为 0。</param>
      <param name="lookupId">要接收的消息的 <see cref="P:System.Messaging.Message.LookupId" />，或者为 0。访问队列中的第一条和最后一条消息时使用 0。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
      <exception cref="T:System.InvalidOperationException">未能找到具有指定 <paramref name="lookupId" /> 的消息。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="action" /> 参数不是 <see cref="T:System.Messaging.MessageLookupAction" /> 成员之一。 - 或 - <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
    </member>
    <member name="E:System.Messaging.MessageQueue.ReceiveCompleted">
      <summary>在从队列移除某条消息后发生。 此事件由异步操作 <see cref="M:System.Messaging.MessageQueue.BeginReceive" /> 引发。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.Refresh">
      <summary>刷新 <see cref="T:System.Messaging.MessageQueue" /> 所显示的属性以反映资源的当前状态。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.ResetPermissions">
      <summary>将权限列表重置为操作系统的默认值。 移除已追加到默认列表中的所有队列权限。</summary>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object)">
      <summary>将对象发送到此 <see cref="T:System.Messaging.MessageQueue" /> 引用的非事务性队列。</summary>
      <param name="obj">要发送到队列的对象。</param>
      <exception cref="T:System.Messaging.MessageQueueException">尚未设置 <see cref="P:System.Messaging.MessageQueue.Path" /> 属性。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)">
      <summary>将对象发送到此 <see cref="T:System.Messaging.MessageQueue" /> 所引用的事务性队列。</summary>
      <param name="obj">要发送到队列的对象。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transaction" /> 参数为 null。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">尚未设置 <see cref="P:System.Messaging.MessageQueue.Path" /> 属性。 - 或 - “消息队列”应用程序指示事务用法不正确。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)">
      <summary>将对象发送到此 <see cref="T:System.Messaging.MessageQueue" /> 所引用的队列。</summary>
      <param name="obj">要发送到队列的对象。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">尚未设置 <see cref="P:System.Messaging.MessageQueue.Path" /> 属性。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.String)">
      <summary>将对象发送到此 <see cref="T:System.Messaging.MessageQueue" /> 引用的非事务性队列，并指定消息的标签。</summary>
      <param name="obj">要发送到队列的对象。</param>
      <param name="label">消息的标签。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="label" /> 参数为 null。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">尚未设置 <see cref="P:System.Messaging.MessageQueue.Path" /> 属性。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)">
      <summary>将对象发送到此 <see cref="T:System.Messaging.MessageQueue" /> 引用的事务性队列中，并指定该消息的标签。</summary>
      <param name="obj">要发送到队列的对象。</param>
      <param name="label">消息的标签。</param>
      <param name="transaction">
        <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="label" /> 参数为 null。 - 或 - <paramref name="transaction" /> 参数为 null。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">尚未设置 <see cref="P:System.Messaging.MessageQueue.Path" /> 属性。 - 或 - “消息队列”应用程序指示了不正确的事务用法。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)">
      <summary>将对象发送到此 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列中，并指定该消息的标签。</summary>
      <param name="obj">要发送到队列的对象。</param>
      <param name="label">消息的标签。</param>
      <param name="transactionType">
        <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="label" /> 参数为 null。</exception>
      <exception cref="T:System.Messaging.MessageQueueTransaction">“消息队列”应用程序指示了不正确的事务用法。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">尚未设置 <see cref="P:System.Messaging.MessageQueue.Path" /> 属性。 - 或 - 访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)">
      <summary>基于访问控制列表的内容将访问权限分配给队列。</summary>
      <param name="dacl">
        <see cref="T:System.Messaging.AccessControlList" />，包含一个或多个指定受信者和要授予的权限的访问控制项。</param>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)">
      <summary>基于访问控制项的内容将访问权限分配给队列。</summary>
      <param name="ace">指定用户、访问类型和权限类型的 <see cref="T:System.Messaging.MessageQueueAccessControlEntry" />。</param>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)">
      <summary>给予计算机、组或用户指定的访问权限。</summary>
      <param name="user">获取对队列的附加权限的个人、组或计算机。</param>
      <param name="rights">
        <see cref="T:System.Messaging.MessageQueueAccessRights" />，指示对“消息队列”分配给传入的 <paramref name="user" /> 的队列权限集。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="user" /> 为 null。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)">
      <summary>利用指定的访问控制类型（允许、拒绝、撤消或设置），给予计算机、组或用户指定的访问权限。</summary>
      <param name="user">获取对队列的附加权限的个人、组或计算机。</param>
      <param name="rights">
        <see cref="T:System.Messaging.MessageQueueAccessRights" />，指示对“消息队列”分配给传入的 <paramref name="user" /> 的队列权限集。</param>
      <param name="entryType">
        <see cref="T:System.Messaging.AccessControlEntryType" />，指定授予、拒绝还是撤消 <paramref name="rights" /> 参数指定的权限。</param>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.SynchronizingObject">
      <summary>获取或设置由 <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> 或 <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> 事件产生封送事件处理程序调用的对象。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，表示封送由 <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> 或 <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> 事件产生的事件处理程序调用的对象。 默认值为 null。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueue.Transactional">
      <summary>获取一个值，该值指示队列是否只接受事务。</summary>
      <returns>如果队列只接受作为事务的一部分发送的消息，则为 true；否则为 false。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.UseJournalQueue">
      <summary>获取或设置一个值，该值指示接收的消息是否复制到日记队列。</summary>
      <returns>如果从队列接收到的消息复制到其日记队列，则为 true；否则为 false。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">访问“消息队列”方法时出错。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueue.WriteHandle">
      <summary>获取用于将消息发送到消息队列的本机句柄。</summary>
      <returns>用于将消息发送到队列的本机队列对象的句柄。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">消息队列无法用于写入。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Messaging.MessageQueueAccessControlEntry">
      <summary>为受信者（用户、组或计算机）指定执行消息队列任务的访问权限。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights)">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueueAccessControlEntry" /> 类的新实例，并且向指定受信者授予指定的消息队列访问权限。</summary>
      <param name="trustee">指定用户、组、计算机、域或别名的 <see cref="T:System.Messaging.Trustee" />。</param>
      <param name="rights">
        <see cref="T:System.Messaging.MessageQueueAccessRights" /> 值的按位组合，定义要授予受信者的权限组合。</param>
    </member>
    <member name="M:System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)">
      <summary>通过指定的受信者和消息队列访问权限，初始化 <see cref="T:System.Messaging.MessageQueueAccessControlEntry" /> 类的新实例。 您传入的项类型定义访问的类型（例如 Allow 或 Deny）。</summary>
      <param name="trustee">指定用户、组、计算机、域或别名的 <see cref="T:System.Messaging.Trustee" />。</param>
      <param name="rights">
        <see cref="T:System.Messaging.MessageQueueAccessRights" /> 值的按位组合，定义要授予受信者的权限组合。</param>
      <param name="entryType">
        <see cref="T:System.Messaging.AccessControlEntryType" /> 值之一，指定是允许、拒绝、设置还是撤消指定的权限。</param>
    </member>
    <member name="P:System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights">
      <summary>获取或设置应用于该受信者的消息队列特定的权限集。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueueAccessRights" /> 成员的按位组合。 默认值是由传入构造函数的 <paramref name="rights" /> 参数定义的。</returns>
    </member>
    <member name="T:System.Messaging.MessageQueueAccessRights">
      <summary>为特定于消息队列的操作指定一组对象特定的访问权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.ChangeQueuePermissions">
      <summary>修改队列权限的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.DeleteJournalMessage">
      <summary>从日记队列删除消息的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.DeleteMessage">
      <summary>从队列删除消息的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.DeleteQueue">
      <summary>删除队列的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.FullControl">
      <summary>对队列具有完全的权限。 在枚举中的其他所有权限的联合。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.GenericRead">
      <summary>GetQueueProperties、GetQueuePermissions、ReceiveMessage 和 ReceiveJournalMessage 的组合。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.GenericWrite">
      <summary>GetQueueProperties、GetQueuePermissions 和 WriteMessage 的组合。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.GetQueuePermissions">
      <summary>读取队列权限的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.GetQueueProperties">
      <summary>读取队列属性的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.PeekMessage">
      <summary>从队列查看消息的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.ReceiveJournalMessage">
      <summary>从日记队列接收消息的权限。 这包括从日记队列删除和查看消息的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.ReceiveMessage">
      <summary>从队列接收消息的权限。 这包括删除和查看消息的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.SetQueueProperties">
      <summary>修改队列属性的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.TakeQueueOwnership">
      <summary>取得队列所有权的权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.WriteMessage">
      <summary>向队列发送消息的权限。</summary>
    </member>
    <member name="T:System.Messaging.MessageQueueCriteria">
      <summary>当执行查询时使用 <see cref="T:System.Messaging.MessageQueue" /> 类的 <see cref="M:System.Messaging.MessageQueue.GetPublicQueues" /> 方法筛选消息队列。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueCriteria.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueueCriteria" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.Category">
      <summary>获取或设置作为网络中队列的筛选依据的类别。</summary>
      <returns>队列的类别。</returns>
      <exception cref="T:System.InvalidOperationException">应用程序在读取 <see cref="P:System.Messaging.MessageQueueCriteria.Category" /> 属性前未设置该属性。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueueCriteria.ClearAll">
      <summary>清除置入筛选器的所有属性，并将所有属性值设为“未设置”状态。</summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.CreatedAfter">
      <summary>获取或设置队列创建日期和时间的下限，以此作为筛选网络上的队列的依据。</summary>
      <returns>
        <see cref="T:System.DateTime" />，指定队列创建日期和时间的下限。</returns>
      <exception cref="T:System.InvalidOperationException">应用程序在读取 <see cref="P:System.Messaging.MessageQueueCriteria.CreatedAfter" /> 属性前未设置该属性。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.CreatedBefore">
      <summary>获取或设置队列创建日期和时间的上限，以此作为筛选网络上的队列的依据。</summary>
      <returns>
        <see cref="T:System.DateTime" />，指定队列创建日期和时间的上限。</returns>
      <exception cref="T:System.InvalidOperationException">应用程序在读取 <see cref="P:System.Messaging.MessageQueueCriteria.CreatedBefore" /> 属性前未设置该属性。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.Label">
      <summary>获取或设置作为网络中队列的筛选依据的标签。</summary>
      <returns>队列的标签。</returns>
      <exception cref="T:System.InvalidOperationException">应用程序在读取 <see cref="P:System.Messaging.MessageQueueCriteria.Label" /> 属性前未设置该属性。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.MachineName">
      <summary>获取或设置作为网络中队列的筛选依据的计算机名。</summary>
      <returns>队列驻留的计算机的服务器名称。</returns>
      <exception cref="T:System.InvalidOperationException">应用程序在读取 <see cref="P:System.Messaging.MessageQueueCriteria.MachineName" /> 属性前未设置该属性。 - 或 - 计算机名语法无效。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.ModifiedAfter">
      <summary>获取或设置队列修改日期和时间的下限，以此作为筛选网络上的队列的依据。</summary>
      <returns>
        <see cref="T:System.DateTime" />，指定队列最近修改日期和时间的下限。</returns>
      <exception cref="T:System.InvalidOperationException">应用程序在读取 <see cref="P:System.Messaging.MessageQueueCriteria.ModifiedAfter" /> 属性前未设置该属性。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.ModifiedBefore">
      <summary>获取或设置队列修改日期和时间的上限，以此作为筛选网络上的队列的依据。</summary>
      <returns>
        <see cref="T:System.DateTime" />，指定队列最近修改日期和时间的上限。</returns>
      <exception cref="T:System.InvalidOperationException">应用程序在读取 <see cref="P:System.Messaging.MessageQueueCriteria.ModifiedBefore" /> 属性前未设置该属性。</exception>
    </member>
    <member name="T:System.Messaging.MessageQueueEnumerator">
      <summary>提供一个只进游标，以枚举通过消息队列中的消息。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.Close">
      <summary>释放与枚举数关联的资源。</summary>
    </member>
    <member name="P:System.Messaging.MessageQueueEnumerator.Current">
      <summary>获取枚举的当前 <see cref="T:System.Messaging.MessageQueue" />。</summary>
      <returns>游标当前所在的队列。</returns>
      <exception cref="T:System.InvalidOperationException">您在第一次调用 <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> 之前调用了 <see cref="P:System.Messaging.MessageQueueEnumerator.Current" />。 游标位于枚举中的第一个队列之前。 - 或 - 您在对 <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> 的调用返回假（指示游标位于枚举中的最后一个队列之后）后调用了 <see cref="P:System.Messaging.MessageQueueEnumerator.Current" />。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.Dispose">
      <summary>释放由 <see cref="T:System.Messaging.MessageQueueEnumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Messaging.MessageQueueEnumerator" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Messaging.MessageQueueEnumerator.LocatorHandle">
      <summary>获取用于在网络中定位队列的本机消息队列句柄。</summary>
      <returns>当前队列的本机句柄。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">此句柄不存在。</exception>
      <exception cref="T:System.Security.SecurityException">调用代码没有浏览权限。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.MoveNext">
      <summary>如果当前有可用的枚举数，使该枚举数前进到枚举的下一个队列。</summary>
      <returns>如果枚举数成功地前进到了下一个队列，则为 true；如果枚举数已经到达枚举的末尾，则为 false。</returns>
      <exception cref="T:System.Security.SecurityException">调用代码没有浏览权限。</exception>
      <PermissionSet>
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1">
          <Path value="*" access="Browse" />
        </IPermission>
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.Reset">
      <summary>重置游标，使其指向枚举的开头。</summary>
    </member>
    <member name="P:System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举的当前 <see cref="T:System.Messaging.MessageQueue" />。</summary>
      <returns>游标当前所在的队列。</returns>
    </member>
    <member name="T:System.Messaging.MessageQueueErrorCode">
      <summary>标识在消息队列应用程序中发生的并生成 <see cref="T:System.Messaging.MessageQueueException" /> 异常的错误源。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.AccessDenied">
      <summary>消息正文：“访问被拒绝。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.BadSecurityContext">
      <summary>消息正文：“错误的安全上下文。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.Base">
      <summary>消息队列不返回此错误代码。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.BufferOverflow">
      <summary>消息正文：“为 MQReceiveMessage 检索消息体提供的缓冲区太小”。 “不从队列中移除消息，而且复制了缓冲区可容纳的部分消息体。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotCreateCertificateStore">
      <summary>消息正文：“无法为内部证书创建证书存储区。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotCreateHashEx">
      <summary>消息正文：“无法为已验证身份的消息创建哈希对象。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotCreateOnGlobalCatalog">
      <summary>消息正文：“未能在指定的全局编录服务器上创建对象。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotGetDistinguishedName">
      <summary>消息正文：“未能检索到本地计算机的识别名。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotGrantAddGuid">
      <summary>消息正文：“未能将‘添加 GUID’的权限授予当前用户。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotHashDataEx">
      <summary>消息正文：“无法对已验证身份的消息散列数据。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotImpersonateClient">
      <summary>消息正文：“RPC 服务器无法模拟客户端应用程序，因此未能验证安全凭据。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotJoinDomain">
      <summary>消息正文：“未能联接 Windows 2000 域上的‘消息队列’企业版。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotLoadMsmqOcm">
      <summary>消息正文：“无法加载 MSMQOCM.DLL 库。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotOpenCertificateStore">
      <summary>消息正文：“无法为内部证书打开证书存储区。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotSetCryptographicSecurityDescriptor">
      <summary>消息正文：“无法为加密密钥设置安全说明符。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotSignDataEx">
      <summary>消息正文：“无法在发送已验证身份的消息之前对数据签名。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CertificateNotProvided">
      <summary>消息正文：“用户尝试发送没有证书的已验证身份消息。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.ComputerDoesNotSupportEncryption">
      <summary>消息正文：“计算机不支持加密操作。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CorruptedInternalCertificate">
      <summary>消息正文：“内部消息队列证书已损坏。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CorruptedPersonalCertStore">
      <summary>消息正文：“个人证书存储区已损坏。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CorruptedQueueWasDeleted">
      <summary>消息正文：“LQS 中队列的 .ini 文件因损坏而被删除。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CorruptedSecurityData">
      <summary>消息正文：“加密函数已失败。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CouldNotGetAccountInfo">
      <summary>消息正文：“未能得到该用户的帐户信息。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CouldNotGetUserSid">
      <summary>消息正文：“未能从线程标记中获取 SID 信息。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DeleteConnectedNetworkInUse">
      <summary>消息正文：“已连接的网络正在使用中，无法删除。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DependentClientLicenseOverflow">
      <summary>消息正文：“此消息队列服务器所服务的非独立客户端的数目已达到该服务器的上限。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DsError">
      <summary>消息正文：“内部目录服务错误。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DsIsFull">
      <summary>消息正文：“目录服务已满。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DtcConnect">
      <summary>消息正文：“无法连接到 MS DTC。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.EncryptionProviderNotSupported">
      <summary>消息正文：“消息队列不支持加密服务提供程序。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.FailVerifySignatureEx">
      <summary>消息正文：“已接收消息的签名无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.FormatNameBufferTooSmall">
      <summary>消息正文：“提供给 API 的格式名缓冲区太小，无法容纳格式名。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.Generic">
      <summary>消息正文：“一般性错误。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.GuidNotMatching">
      <summary>消息正文：“未能创建其 GUID 与计算机安装相匹配的消息队列配置对象。”。 “必须卸载‘消息队列’，然后重新安装它。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalContext">
      <summary>消息正文：“上下文参数无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalCriteriaColumns">
      <summary>消息正文：“无效的 MQCOLUMNS 参数。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalCursorAction">
      <summary>消息正文：“指定给 MQReceiveMessage 的 MQ_ACTION_PEEK_NEXT 不能与当前游标位置一起使用。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalEnterpriseOperation">
      <summary>消息正文：“此操作对消息队列服务对象无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalFormatName">
      <summary>消息正文：“给定的格式名称无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalMessageProperties">
      <summary>消息正文：“MQQMPROPS 参数无效，该参数为 null 或者没有属性。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalOperation">
      <summary>消息正文：“此操作在外部消息队列系统上无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalPrivateProperties">
      <summary>私有属性参数值无效。 这可能是因为它的值为 null 或者没有指定属性。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalPropertyId">
      <summary>消息正文：“属性标识符值无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalPropertySize">
      <summary>消息正文：“属性缓冲区大小无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalPropertyValue">
      <summary>消息正文：“属性值无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalPropertyVt">
      <summary>消息正文：“VARTYPE 值无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalQueuePathName">
      <summary>消息正文：“队列路径名无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalQueueProperties">
      <summary>消息正文：“MQQUEUEPROPS 参数无效，该参数为 null 或者没有属性。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalRelation">
      <summary>消息正文：“限制中的关系值无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalRestrictionPropertyId">
      <summary>消息正文：“MQRESTRICTION 参数中的 PropId 值无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalSecurityDescriptor">
      <summary>消息正文：“指定的安全说明符不是有效的安全说明符。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalSort">
      <summary>消息正文：“指定的排序（例如，重复列）无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalSortPropertyId">
      <summary>消息正文：“MQSORTSET 中的 PropId 值无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalUser">
      <summary>消息正文：“此用户的用户名无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InsufficientProperties">
      <summary>消息正文：“未在输入参数中指定该操作必需的所有属性。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InsufficientResources">
      <summary>消息正文：“执行操作所需的资源不足。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InvalidCertificate">
      <summary>消息正文：“用户证书无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InvalidHandle">
      <summary>消息正文：“传递给函数的句柄无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InvalidOwner">
      <summary>消息正文：“对象所有者无效。”。 “例如，由于队列管理器对象无效导致 CreateQueue 失败。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InvalidParameter">
      <summary>消息正文：“传递给函数的参数无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IOTimeout">
      <summary>消息正文：“接收或查看消息超时时间已到。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.LabelBufferTooSmall">
      <summary>消息正文：“提供给 API 的标签缓冲区太小。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MachineExists">
      <summary>消息正文：“此站点中已存在同名的计算机。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MachineNotFound">
      <summary>消息正文：“未能找到指定的计算机。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MessageAlreadyReceived">
      <summary>消息正文：“游标当前指向的消息已被另一个进程或另一个在不使用此游标的情况下接收消息的调用从该队列中移除。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MessageNotFound">
      <summary>消息正文：“未能找到指定的消息。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MessageStorageFailed">
      <summary>消息正文：“未能存储可恢复的消息或日记消息。”。 没有发送消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MissingConnectorType">
      <summary>消息正文：“在发送确认或安全消息时，连接器类型是强制的。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MqisReadOnlyMode">
      <summary>消息正文：“MQIS 数据库处于只读模式。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MqisServerEmpty">
      <summary>消息正文：“MQIS 服务器列表（在注册表中）为空。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoDs">
      <summary>消息正文：“没有与此站点控制器的连接。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoEntryPointMsmqOcm">
      <summary>消息正文：“无法在 MSMQOCM.DLL 库中找到入口点。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoGlobalCatalogInDomain">
      <summary>消息正文：“未能在指定域中找到全局编录服务器。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoInternalUserCertificate">
      <summary>消息正文：“用户的内部消息队列证书不存在。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoMsmqServersOnDc">
      <summary>消息正文：“未能在域控制器上找到消息队列服务器。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoMsmqServersOnGlobalCatalog">
      <summary>消息正文：“未能在全局编录域控制器上找到消息队列服务器。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoResponseFromObjectServer">
      <summary>消息正文：“对象所有者没有响应。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.ObjectServerNotAvailable">
      <summary>消息正文：“无法访问对象所有者。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.OperationCanceled">
      <summary>消息正文：“此操作在完成前被取消。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.PrivilegeNotHeld">
      <summary>消息正文：“客户端没有执行此操作所需的特权。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.Property">
      <summary>消息正文：“传递的一个或多个属性无效。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.PropertyNotAllowed">
      <summary>消息正文：“所请求操作的属性无效”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.ProviderNameBufferTooSmall">
      <summary>消息正文：“为提供程序名称属性传递的缓冲区太小。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.PublicKeyDoesNotExist">
      <summary>消息正文：“此计算机的公钥不存在。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.PublicKeyNotFound">
      <summary>消息正文：“未能找到计算机的公钥。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QDnsPropertyNotSupported">
      <summary>不支持将 DNS 属性作为队列搜索条件。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QueueDeleted">
      <summary>消息正文：“已删除队列。”。 “使用此队列实例无法再接收任何消息。”。 “应关闭队列。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QueueExists">
      <summary>消息正文：“已注册具有相同路径名的队列。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QueueNotAvailable">
      <summary>消息正文：“在从驻留于远程计算机上的队列中读取时出错。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QueueNotFound">
      <summary>消息正文：“队列未在目录服务中注册。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.RemoteMachineNotAvailable">
      <summary>消息正文：“远程计算机不可用。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.ResultBufferTooSmall">
      <summary>消息正文：“提供的结果缓冲区太小。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.SecurityDescriptorBufferTooSmall">
      <summary>消息正文：“传递给 MQGetQueueSecurity 的缓冲区大小太小。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.SenderCertificateBufferTooSmall">
      <summary>消息正文：“为用户证书属性传递的缓冲区太小。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.SenderIdBufferTooSmall">
      <summary>消息正文：“为用户标识符属性传递的缓冲区太小。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.ServiceNotAvailable">
      <summary>消息正文：“消息队列服务不可用。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.SharingViolation">
      <summary>消息正文：“共享冲突。”。 “队列已被打开用于独占接收。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.SignatureBufferTooSmall">
      <summary>消息正文：“为签名属性传递的缓冲区太小。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.StaleHandle">
      <summary>消息正文：“已重新启动队列管理器服务。” “队列句柄已失效，应将其关闭。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.SymmetricKeyBufferTooSmall">
      <summary>消息正文：“为对称密钥属性传递的缓冲区太小。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.TransactionEnlist">
      <summary>消息正文：“无法登记事务。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.TransactionImport">
      <summary>消息正文：“无法导入事务。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.TransactionSequence">
      <summary>消息正文：“错误的事务操作序列。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.TransactionUsage">
      <summary>消息正文：“错误的事务使用。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.UnsupportedAccessMode">
      <summary>消息正文：“不支持指定的访问模式。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.UnsupportedFormatNameOperation">
      <summary>消息正文：“不支持对指定格式名称执行请求的操作。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.UnsupportedOperation">
      <summary>消息正文：“WORKGROUP 安装计算机不支持此操作。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.UserBufferTooSmall">
      <summary>消息正文：“由于用户缓冲区太小，无法容纳返回的信息，请求失败。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.WksCantServeClient">
      <summary>消息正文：“独立于消息队列的客户端无法为依赖于消息队列的客户端提供服务。”</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.WriteNotAllowed">
      <summary>消息正文：“正在安装另一个 MQIS 服务器；此时不允许向数据库进行写操作。”</summary>
    </member>
    <member name="T:System.Messaging.MessageQueueException">
      <summary>如果发生 Microsoft 消息队列内部错误则引发的异常。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Messaging.MessageQueueException" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保留与 <see cref="T:System.Messaging.MessageQueueException" /> 相关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Messaging.MessageQueueException" /> 相关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Messaging.MessageQueueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Messaging.MessageQueueException" /> 所需的数据填充序列化信息对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保留与 <see cref="T:System.Messaging.MessageQueueException" /> 相关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Messaging.MessageQueueException" /> 相关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueueException.Message">
      <summary>获取描述消息队列错误的值。</summary>
      <returns>生成此 <see cref="T:System.Messaging.MessageQueueException" /> 的消息队列内部错误的说明。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueueException.MessageQueueErrorCode">
      <summary>获取一个值，该值指示与此异常关联的错误代码。</summary>
      <returns>一个 <see cref="T:System.Messaging.MessageQueueErrorCode" />，它标识生成的错误信息队列的类型。</returns>
    </member>
    <member name="T:System.Messaging.MessageQueueInstaller">
      <summary>允许安装并配置应用程序运行所需的队列。 安装实用工具（例如 InstallUtil.exe）在安装 <see cref="T:System.Messaging.MessageQueue" /> 时调用此类。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例。 不设置任何实例属性。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.#ctor(System.Messaging.MessageQueue)">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例，将安装设置初始化为现有 <see cref="T:System.Messaging.MessageQueue" /> 实例的安装设置。</summary>
      <param name="componentToCopy">
        <see cref="T:System.Messaging.MessageQueue" /> 组件，其设置确定安装的新队列的属性设置。</param>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Authenticate">
      <summary>获取或设置一个值，该值指示要安装的队列是否只接受已经过身份验证的消息。</summary>
      <returns>如果队列仅接受已经过身份验证的消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.BasePriority">
      <summary>获取或设置用于在网络上路由公共队列消息的基本优先级。</summary>
      <returns>发送到公共队列的所有消息的单个基本优先级。 默认值为零 (0)。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Category">
      <summary>获取或设置实现特定的队列类型。</summary>
      <returns>
        <see cref="T:System.Guid" />，表示队列类别（或“消息队列”类型标识符），允许应用程序按照其队列的使用方式对这些队列进行分类。 默认值为 Guid.empty。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)">
      <summary>通过提交 <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> 方法写入注册表的 <see cref="T:System.Messaging.MessageQueue" /> 安装信息来完成安装过程。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
      <param name="savedState">一个 <see cref="T:System.Collections.IDictionary" />，它包含计算机的安装后状态。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
      <summary>复制在安装时消息队列所需的 <see cref="T:System.Messaging.MessageQueue" /> 组件的属性值。</summary>
      <param name="component">用作 <see cref="T:System.Messaging.MessageQueueInstaller" /> 的模板的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentException">与此 <see cref="T:System.Messaging.MessageQueueInstaller" /> 关联的组件不是 <see cref="T:System.Messaging.MessageQueue" />。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.EncryptionRequired">
      <summary>获取或设置一个值，该值指示队列是否仅接受私有（或加密）消息。</summary>
      <returns>
        <see cref="T:System.Messaging.EncryptionRequired" /> 值之一，指示发送到队列的消息所需的加密级别。 默认值为 Optional。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)">
      <summary>执行安装并将消息队列信息写入注册表。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
      <param name="stateSaver">
        <see cref="T:System.Collections.IDictionary" />，用于保存执行提交、回滚或卸载操作所需的信息。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
      <summary>确定指定的安装程序能否处理与此安装程序相同的安装类型。</summary>
      <returns>如果此安装程序和 <paramref name="otherInstaller" /> 参数指定的安装程序可以处理相同的安装类型，则为 true；否则为 false。</returns>
      <param name="otherInstaller">要比较的安装程序。</param>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Label">
      <summary>获取或设置队列说明。</summary>
      <returns>描述消息队列的标签。 默认值为空字符串 ("")。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.MessageQueueInstaller.Label" /> 为 null。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.MaximumJournalSize">
      <summary>获取或设置与队列关联的日记的最大大小。</summary>
      <returns>日记队列的最大大小（以千字节为单位），该队列记录从队列中移除的消息。 该消息队列默认为无限制。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.MaximumQueueSize">
      <summary>获取或设置队列的最大大小。</summary>
      <returns>队列的最大大小，以千字节为单位。 该消息队列默认为无限制。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.MulticastAddress">
      <summary>在 MSMQ 3.0 中引入。 获取或设置与队列关联的多路广播地址。</summary>
      <returns>包含有效的多路广播地址（格式如下）的 <see cref="T:System.String" />，或者为 null，这表示队列与多路广播地址不关联。 &lt;address&gt;:&lt;port&gt;</returns>
      <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Path">
      <summary>获取或设置由此对象引用的队列的位置。</summary>
      <returns>表示队列在网络中的位置的路径。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 被设置为了无效值，可能是因为语法无效。 - 或 - <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 为 null。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Permissions">
      <summary>获取或设置与队列关联的权限。</summary>
      <returns>
        <see cref="T:System.Messaging.AccessControlList" />，包含一个或多个指定受信者和为队列授予的权限的访问控制项。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)">
      <summary>通过回滚安装过程写入注册表的队列信息，将计算机还原到安装前的状态。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
      <param name="savedState">
        <see cref="T:System.Collections.IDictionary" />，包含计算机的安装前状态。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Transactional">
      <summary>获取或设置一个值，该值指示队列是否仅接受作为事务的一部分发送的消息。</summary>
      <returns>如果队列仅接受作为事务的一部分发送的消息，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>通过从注册表中移除队列信息来移除安装。 此方法应该由卸载工具使用，卸载工具自动调用相应的方法。</summary>
      <param name="savedState">一个 <see cref="T:System.Collections.IDictionary" />，它包含计算机的安装后状态。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.UninstallAction">
      <summary>获取或设置一个值，该值指示安装程序在卸载时对队列执行的操作：移除队列，将队列还原为安装前的状态，或者将队列保留为当前的已安装状态。</summary>
      <returns>
        <see cref="T:System.Configuration.Install.UninstallAction" /> 值之一，指示在卸载 <see cref="T:System.Messaging.MessageQueue" /> 时队列保留在什么状态。 默认值为 Remove。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.UseJournalQueue">
      <summary>获取或设置一个值，该值指示从队列中检索的消息是否也复制到关联的日记队列。</summary>
      <returns>如果将从队列中检索的消息复制到日记队列，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.Messaging.MessageQueuePermission">
      <summary>允许用于消息的代码访问权限的控制。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueuePermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor(System.Messaging.MessageQueuePermissionAccess,System.String)">
      <summary>使用指定的访问级别和队列路径初始化 <see cref="T:System.Messaging.MessageQueuePermission" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> 值之一。</param>
      <param name="path">由 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列的路径。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor(System.Messaging.MessageQueuePermissionAccess,System.String,System.String,System.String)">
      <summary>使用指定的访问级别、要使用的计算机、队列说明和队列类别初始化 <see cref="T:System.Messaging.MessageQueuePermission" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> 值之一。</param>
      <param name="machineName">“消息队列”队列所在的计算机的名称。</param>
      <param name="label">队列说明。</param>
      <param name="category">队列类别（消息队列类型标识符）。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor(System.Messaging.MessageQueuePermissionEntry[])">
      <summary>使用指定的权限访问级别项初始化 <see cref="T:System.Messaging.MessageQueuePermission" /> 类的新实例。</summary>
      <param name="permissionAccessEntries">
        <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> 对象的数组。 <see cref="P:System.Messaging.MessageQueuePermission.PermissionEntries" /> 属性被设置为该值。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的权限状态初始化 <see cref="T:System.Messaging.MessageQueuePermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.Copy">
      <summary>创建并返回与当前权限对象相同的副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.FromXml(System.Security.SecurityElement)">
      <summary>用 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.Intersect(System.Security.IPermission)">
      <summary>返回表示当前权限对象和指定权限对象的交集的新权限对象。</summary>
      <returns>表示当前权限对象和指定权限对象的交集的新权限对象。 如果交集为空，则此新权限对象是一个 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="target">与当前的权限对象相交的权限对象。 它必须与当前权限对象的类型相同。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前的权限对象是否为指定权限对象的一个子集。</summary>
      <returns>如果当前权限对象是指定权限对象的子集，则为 true；否则为 false。</returns>
      <param name="target">将用于测试子集关系的权限对象。 该对象必须与当前权限对象的类型相同。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.IsUnrestricted">
      <summary>返回一个值，该值指示在不了解权限语义的情况下是否可以将权限表示为无限制。</summary>
      <returns>如果可以将权限表示为无限制，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueuePermission.PermissionEntries">
      <summary>获取此权限请求的权限项集合。</summary>
      <returns>一个 <see cref="T:System.Messaging.MessageQueuePermissionEntryCollection" />，它包含此权限请求的权限项。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.Union(System.Security.IPermission)">
      <summary>返回一个新的权限对象，它是当前权限对象和指定权限对象的并集。</summary>
      <returns>新权限对象，它表示当前权限对象和指定权限对象的并集。</returns>
      <param name="target">要与当前的权限对象合并的权限对象。 它必须与当前权限对象的类型相同。</param>
    </member>
    <member name="T:System.Messaging.MessageQueuePermissionAccess">
      <summary>定义 <see cref="N:System.Messaging" /> 权限类使用的访问级别。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Administer">
      <summary>
        <see cref="T:System.Messaging.MessageQueue" /> 可以查看可用的队列、读取队列中的消息并发送和接收消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Browse">
      <summary>
        <see cref="T:System.Messaging.MessageQueue" /> 可以查看可用的队列。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.None">
      <summary>
        <see cref="T:System.Messaging.MessageQueue" /> 没有权限。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Peek">
      <summary>
        <see cref="T:System.Messaging.MessageQueue" /> 可以查看可用的队列并读取队列中的消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Receive">
      <summary>
        <see cref="T:System.Messaging.MessageQueue" /> 可以查看可用的队列、读取队列中的消息并接收消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Send">
      <summary>
        <see cref="T:System.Messaging.MessageQueue" /> 可以查看可用的队列并发送消息。</summary>
    </member>
    <member name="T:System.Messaging.MessageQueuePermissionAttribute">
      <summary>允许进行声明 <see cref="T:System.Messaging.MessageQueue" /> 权限检查。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueuePermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.Category">
      <summary>获取或设置队列类别。</summary>
      <returns>队列类别（消息队列类型标识符），它允许应用程序将其队列分类。</returns>
      <exception cref="T:System.InvalidOperationException">该值为 null。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionAttribute.CreatePermission">
      <summary>基于请求的访问级别、类别、标签、计算机名称和路径（它们是通过有关该特性上的 <see cref="P:System.Messaging.MessageQueuePermissionAttribute.PermissionAccess" />、<see cref="P:System.Messaging.MessageQueuePermissionAttribute.Category" />、<see cref="P:System.Messaging.MessageQueuePermissionAttribute.Label" />、<see cref="P:System.Messaging.MessageQueuePermissionAttribute.MachineName" /> 和 <see cref="P:System.Messaging.MessageQueuePermissionAttribute.Path" /> 属性分别设置的）创建权限。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它表示创建的权限。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.Label">
      <summary>获取或设置队列说明。</summary>
      <returns>消息队列的标签。</returns>
      <exception cref="T:System.InvalidOperationException">该值为 null。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.MachineName">
      <summary>获取或设置“消息队列”队列所在的计算机的名称。</summary>
      <returns>队列所在的计算机的名称。</returns>
      <exception cref="T:System.InvalidOperationException">该值为 null。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.Path">
      <summary>获取或设置队列的路径。</summary>
      <returns>由 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列。</returns>
      <exception cref="T:System.InvalidOperationException">该值为 null。</exception>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.PermissionAccess">
      <summary>获取或设置权限请求中使用的权限访问级别。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> 值的按位组合。</returns>
    </member>
    <member name="T:System.Messaging.MessageQueuePermissionEntry">
      <summary>为消息定义代码访问安全权限集的最小单位。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntry.#ctor(System.Messaging.MessageQueuePermissionAccess,System.String)">
      <summary>通过指定的权限访问级别和队列的路径初始化 <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> 值的按位组合。 <see cref="P:System.Messaging.MessageQueuePermissionEntry.PermissionAccess" /> 属性被设置为该值。</param>
      <param name="path">由 <see cref="T:System.Messaging.MessageQueue" /> 对象引用的队列的路径。 <see cref="P:System.Messaging.MessageQueuePermissionEntry.Path" /> 属性被设置为该值。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntry.#ctor(System.Messaging.MessageQueuePermissionAccess,System.String,System.String,System.String)">
      <summary>通过指定的权限访问级别、队列所在的计算机的名称、队列说明和查询类别初始化 <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> 值的按位组合。 <see cref="P:System.Messaging.MessageQueuePermissionEntry.PermissionAccess" /> 属性被设置为该值。</param>
      <param name="machineName">“消息队列”队列所在的计算机的名称。 <see cref="P:System.Messaging.MessageQueuePermissionEntry.MachineName" /> 属性被设置为该值。</param>
      <param name="label">队列说明。 <see cref="P:System.Messaging.MessageQueuePermissionEntry.Label" /> 属性被设置为该值。</param>
      <param name="category">队列类别（消息队列类型标识符）。 <see cref="P:System.Messaging.MessageQueuePermissionEntry.Category" /> 属性被设置为该值。</param>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.Category">
      <summary>获取队列类别。</summary>
      <returns>队列类别（消息队列类型标识符），它允许应用程序将其队列分类。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.Label">
      <summary>获取队列说明。</summary>
      <returns>消息队列的标签。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.MachineName">
      <summary>获取“消息队列”队列所在的计算机的名称。</summary>
      <returns>队列所在的计算机的名称。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.Path">
      <summary>获取队列的路径。</summary>
      <returns>由 <see cref="T:System.Messaging.MessageQueue" /> 引用的队列。</returns>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.PermissionAccess">
      <summary>获取在权限请求中使用的权限访问级别。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> 值的按位组合。</returns>
    </member>
    <member name="T:System.Messaging.MessageQueuePermissionEntryCollection">
      <summary>包含 <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> 对象的强类型集合。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.Add(System.Messaging.MessageQueuePermissionEntry)">
      <summary>向此集合添加指定的 <see cref="T:System.Messaging.MessageQueuePermissionEntry" />。</summary>
      <returns>所添加的 <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> 的从零开始的索引。</returns>
      <param name="value">要相加的 <see cref="T:System.Messaging.MessageQueuePermissionEntry" />。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.AddRange(System.Messaging.MessageQueuePermissionEntry[])">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">
        <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> 类型对象的数组，它包含要添加的权限项。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.AddRange(System.Messaging.MessageQueuePermissionEntryCollection)">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">一个 <see cref="T:System.Messaging.MessageQueuePermissionEntryCollection" />，它包含要添加的权限项。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.Contains(System.Messaging.MessageQueuePermissionEntry)">
      <summary>确定该集合是否包含指定的 <see cref="T:System.Messaging.MessageQueuePermissionEntry" />。</summary>
      <returns>如果指定的 <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> 属于该集合，则为 true；否则为 false。</returns>
      <param name="value">要查找的 <see cref="T:System.Messaging.MessageQueuePermissionEntry" />。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.CopyTo(System.Messaging.MessageQueuePermissionEntry[],System.Int32)">
      <summary>将权限项从此集合复制到数组中（从数组中特定的索引开始复制）。</summary>
      <param name="array">接收该集合权限项的 <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> 类型的数组。</param>
      <param name="index">从零开始的索引，将从此索引位置开始复制权限项。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.IndexOf(System.Messaging.MessageQueuePermissionEntry)">
      <summary>确定指定权限项在此集合中的索引。</summary>
      <returns>指定权限项的从零开始的索引；或者，如果集合中未找到该权限项，则为 -1。</returns>
      <param name="value">要搜索的权限项。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.Insert(System.Int32,System.Messaging.MessageQueuePermissionEntry)">
      <summary>将权限项插入此集合中指定的索引位置。</summary>
      <param name="index">集合的从零开始的索引，将在此索引位置插入权限项。</param>
      <param name="value">将插入此集合中的权限项。</param>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntryCollection.Item(System.Int32)">
      <summary>获取或设置指定索引位置的对象。</summary>
      <returns>位于指定索引位置的 <see cref="T:System.Messaging.MessageQueuePermissionEntry" />。</returns>
      <param name="index">集合中从零开始的索引。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.OnClear">
      <summary>在清除此集合内容之后执行其他自定义进程。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>在将一个新的权限项插入此集合之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="value" />。</param>
      <param name="value">在 <paramref name="index" /> 处的权限项的新值。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>当从此集合中移除一个新的权限项时执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="value" />。</param>
      <param name="value">要从 <paramref name="index" /> 处移除的权限项。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>当在此集合中设置值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。</param>
      <param name="oldValue">要用 <paramref name="newValue" /> 替换的值。</param>
      <param name="newValue">在 <paramref name="index" /> 处的权限项的新值。</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.Remove(System.Messaging.MessageQueuePermissionEntry)">
      <summary>从此集合中移除指定的权限项。</summary>
      <param name="value">要移除的权限项。</param>
    </member>
    <member name="T:System.Messaging.MessageQueueTransaction">
      <summary>提供消息队列内部事务。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.MessageQueueTransaction" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Abort">
      <summary>回滚正挂起的内部事务。</summary>
      <exception cref="T:System.InvalidOperationException">您正尝试回滚的内部事务尚未开始。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">发生内部消息队列错误。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Begin">
      <summary>开始新的消息队列内部事务。</summary>
      <exception cref="T:System.InvalidOperationException">事务已开始。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">发生内部消息队列错误。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Commit">
      <summary>提交正挂起的内部事务。</summary>
      <exception cref="T:System.InvalidOperationException">尚未开始正尝试提交的事务。</exception>
      <exception cref="T:System.Messaging.MessageQueueException">发生内部消息队列错误。</exception>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Dispose">
      <summary>释放由 <see cref="T:System.Messaging.MessageQueueTransaction" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Messaging.MessageQueueTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Finalize">
      <summary>释放由当前实例控制的资源。</summary>
    </member>
    <member name="P:System.Messaging.MessageQueueTransaction.Status">
      <summary>获取事务的状态。</summary>
      <returns>
        <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> 值之一，指示事务是否已被提交、中止、初始化或正被挂起。</returns>
    </member>
    <member name="T:System.Messaging.MessageQueueTransactionStatus">
      <summary>指定内部消息队列事务的状态。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionStatus.Aborted">
      <summary>事务已被中止并且已通知所有参与者。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionStatus.Committed">
      <summary>事务已被提交并且已通知所有参与者。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionStatus.Initialized">
      <summary>事务已被初始化。 但事务尚未开始。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionStatus.Pending">
      <summary>事务已经开始。 但事务尚未被提交或回滚。</summary>
    </member>
    <member name="T:System.Messaging.MessageQueueTransactionType">
      <summary>指定消息队列事务的类型。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionType.Automatic">
      <summary>用于 Microsoft Transaction Server (MTS) 或 COM+ 1.0 服务的事务类型。 如果已有 MTS 事务上下文，将在发送或接收消息时使用它。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionType.None">
      <summary>操作将不是事务性的。</summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionType.Single">
      <summary>用于单个内部事务的事务类型。</summary>
    </member>
    <member name="T:System.Messaging.MessageType">
      <summary>标识消息的类型。 消息可以是典型消息队列消息、肯定（到达和读取）或否定（到达和读取）确认消息或报告消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageType.Acknowledgment">
      <summary>确认消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageType.Normal">
      <summary>普通消息队列消息。</summary>
    </member>
    <member name="F:System.Messaging.MessageType.Report">
      <summary>报告消息。</summary>
    </member>
    <member name="T:System.Messaging.MessagingDescriptionAttribute">
      <summary>指定属性或事件的说明。</summary>
    </member>
    <member name="M:System.Messaging.MessagingDescriptionAttribute.#ctor(System.String)">
      <summary>使用指定的说明初始化 <see cref="T:System.Messaging.MessagingDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">应用程序定义的说明文字。</param>
    </member>
    <member name="P:System.Messaging.MessagingDescriptionAttribute.Description">
      <summary>获取与监视的项关联的说明文字。</summary>
      <returns>应用程序定义的说明。</returns>
    </member>
    <member name="T:System.Messaging.PeekAction">
      <summary>指示是查看队列中的当前消息还是下一条消息。</summary>
    </member>
    <member name="F:System.Messaging.PeekAction.Current">
      <summary>查看队列中的当前消息。</summary>
    </member>
    <member name="F:System.Messaging.PeekAction.Next">
      <summary>查看队列中的下一条消息。</summary>
    </member>
    <member name="T:System.Messaging.PeekCompletedEventArgs">
      <summary>为 <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> 事件提供数据。 当异步查看操作调用事件处理程序时，此类的一个实例将被传递给该处理程序。</summary>
    </member>
    <member name="P:System.Messaging.PeekCompletedEventArgs.AsyncResult">
      <summary>获取或设置请求的异步操作结果。</summary>
      <returns>包含与查看操作关联的数据的 <see cref="T:System.IAsyncResult" />。</returns>
    </member>
    <member name="P:System.Messaging.PeekCompletedEventArgs.Message">
      <summary>获取同异步查看操作关联的消息。</summary>
      <returns>表示异步查看操作最终结果的 <see cref="T:System.Messaging.Message" />。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">未能检索到 <see cref="P:System.Messaging.PeekCompletedEventArgs.Message" />。 异步操作的超时可能已过期。</exception>
    </member>
    <member name="T:System.Messaging.PeekCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Messaging.MessageQueue" /> 的 <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> 事件的方法。</summary>
      <param name="sender">事件的源，即 <see cref="T:System.Messaging.MessageQueue" />。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Messaging.PeekCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.Messaging.QueueAccessMode">
      <summary>在创建时为 <see cref="T:System.Messaging.MessageQueue" /> 指定访问模式。</summary>
    </member>
    <member name="F:System.Messaging.QueueAccessMode.Peek">
      <summary>队列仅可以查看消息。</summary>
    </member>
    <member name="F:System.Messaging.QueueAccessMode.PeekAndAdmin">
      <summary>队列可以查看消息。 消息也可以被清除。</summary>
    </member>
    <member name="F:System.Messaging.QueueAccessMode.Receive">
      <summary>队列可以查看或接收消息。</summary>
    </member>
    <member name="F:System.Messaging.QueueAccessMode.ReceiveAndAdmin">
      <summary>队列可以接收消息。 消息也可以被清除。</summary>
    </member>
    <member name="F:System.Messaging.QueueAccessMode.Send">
      <summary>队列仅可以发送消息。</summary>
    </member>
    <member name="F:System.Messaging.QueueAccessMode.SendAndReceive">
      <summary>队列可以查看、接收或发送消息。</summary>
    </member>
    <member name="T:System.Messaging.ReceiveCompletedEventArgs">
      <summary>为 <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> 事件提供数据。 当异步接收操作调用事件处理程序时，此类的一个实例将被传递给该处理程序。</summary>
    </member>
    <member name="P:System.Messaging.ReceiveCompletedEventArgs.AsyncResult">
      <summary>获取或设置请求的异步操作结果。</summary>
      <returns>包含与接收操作关联的数据的 <see cref="T:System.IAsyncResult" />。</returns>
    </member>
    <member name="P:System.Messaging.ReceiveCompletedEventArgs.Message">
      <summary>获取同异步接收操作关联的消息。</summary>
      <returns>表示异步接收操作最终结果的 <see cref="T:System.Messaging.Message" />。</returns>
      <exception cref="T:System.Messaging.MessageQueueException">未能检索到 <see cref="P:System.Messaging.ReceiveCompletedEventArgs.Message" />。 异步操作的超时可能已过期。</exception>
    </member>
    <member name="T:System.Messaging.ReceiveCompletedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Messaging.MessageQueue" /> 的 <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> 事件的方法。</summary>
      <param name="sender">事件的源，即 <see cref="T:System.Messaging.MessageQueue" />。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Messaging.ReceiveCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.Messaging.SecurityContext">
      <summary>表示队列消息的安全上下文。</summary>
    </member>
    <member name="M:System.Messaging.SecurityContext.Dispose">
      <summary>释放由 <see cref="T:System.Messaging.SecurityContext" /> 使用的所有资源。</summary>
    </member>
    <member name="T:System.Messaging.StandardAccessRights">
      <summary>指定一组标准访问权限，这些权限与大多数安全对象类型所共有的操作相对应。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.All">
      <summary>组合 Delete、ReadSecurity、WriteSecurity、ModifyOwner 和 Synchronize 访问。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Delete">
      <summary>删除对象的权限。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Execute">
      <summary>读取对象安全说明符中的信息的权限。 在 Windows 2000 和 Windows NT 上，安全说明符包含有关可保护对象的安全信息。 它标识该对象的所有者和主要组。 Execute 当前被定义为等于 ReadSecurity。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.ModifyOwner">
      <summary>更改对象安全说明符中的所有者的权限。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.None">
      <summary>无访问权限。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Read">
      <summary>读取对象安全说明符中的信息的权限。 Read 当前被定义为等于 ReadSecurity。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.ReadSecurity">
      <summary>读取对象安全说明符中的信息的权限。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Required">
      <summary>组合 Delete、ReadSecurity、WriteSecurity 和 ModifyOwner 访问。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Synchronize">
      <summary>将对象用于同步的权限。 这使线程可以在对象处于特定状态前一直处于等待状态。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Write">
      <summary>读取对象安全说明符中的信息的权限。 Write 当前被定义为等于 ReadSecurity。</summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.WriteSecurity">
      <summary>在安全说明符中修改自由访问控制列表 (DACL) 的权限。</summary>
    </member>
    <member name="T:System.Messaging.Trustee">
      <summary>指定访问控制项应用于的用户帐户、组帐户或登录会话。</summary>
    </member>
    <member name="M:System.Messaging.Trustee.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.Trustee" /> 类的新实例，不设置其任何读/写权限。</summary>
    </member>
    <member name="M:System.Messaging.Trustee.#ctor(System.String)">
      <summary>初始化类型 Unknown 的 <see cref="T:System.Messaging.Trustee" /> 类的新实例，并将 <see cref="P:System.Messaging.Trustee.Name" /> 属性设置为指定的值，将 <see cref="P:System.Messaging.Trustee.SystemName" /> 设置为 null。</summary>
      <param name="name">分配给 <see cref="P:System.Messaging.Trustee.Name" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.Trustee.#ctor(System.String,System.String)">
      <summary>初始化类型 Unknown 的 <see cref="T:System.Messaging.Trustee" /> 类的新实例，并将 <see cref="P:System.Messaging.Trustee.Name" /> 和 SystemName 属性设置为指定的值。</summary>
      <param name="name">分配给 <see cref="P:System.Messaging.Trustee.Name" /> 属性的值。</param>
      <param name="systemName">分配给 <see cref="P:System.Messaging.Trustee.SystemName" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.Trustee.#ctor(System.String,System.String,System.Messaging.TrusteeType)">
      <summary>初始化指定类型的 <see cref="T:System.Messaging.Trustee" /> 类的新实例，将 <see cref="P:System.Messaging.Trustee.Name" /> 和 <see cref="P:System.Messaging.Trustee.SystemName" /> 属性设置为指定的值。</summary>
      <param name="name">分配给 <see cref="P:System.Messaging.Trustee.Name" /> 属性的值。</param>
      <param name="systemName">分配给 <see cref="P:System.Messaging.Trustee.SystemName" /> 属性的值。</param>
      <param name="trusteeType">一个 <see cref="T:System.Messaging.TrusteeType" />，它指示受信者的帐户类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Messaging.Trustee.Name">
      <summary>获取或设置受信者的名称。</summary>
      <returns>将向其分配新权限的帐户的名称。 默认值为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Messaging.Trustee.Name" /> 属性为 null。</exception>
    </member>
    <member name="P:System.Messaging.Trustee.SystemName">
      <summary>获取或设置要在其上查找受信者的帐户的计算机。</summary>
      <returns>帐户存在于其上的本地或远程计算机。 默认值为 null，它指示将在本地计算机上查找名称。</returns>
    </member>
    <member name="P:System.Messaging.Trustee.TrusteeType">
      <summary>获取或设置受信者的类型，该类型标识受信者是用户、组、计算机、域还是别名。</summary>
      <returns>一个 <see cref="T:System.Messaging.TrusteeType" />，它指示受信者在系统上所具有的帐户的类型。 默认值为 Unknown。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的受信者类型不是 <see cref="T:System.Messaging.TrusteeType" /> 枚举成员之一。</exception>
    </member>
    <member name="T:System.Messaging.TrusteeType">
      <summary>指定受信者的类型。</summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Alias">
      <summary>受信者是别名。</summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Computer">
      <summary>受信者是计算机。</summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Domain">
      <summary>受信者是域。</summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Group">
      <summary>受信者是组。</summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Unknown">
      <summary>受信者类型未知，但不一定无效。</summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.User">
      <summary>受信者是用户。</summary>
    </member>
    <member name="T:System.Messaging.XmlMessageFormatter">
      <summary>使用基于 XSD 架构定义的 XML 格式，将对象序列化和反序列化为消息体或从消息体序列化和反序列化对象。</summary>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例但不设置目标类型。</summary>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
      <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例，并将传入的目标类型设置为（完全限定）字符串值数组。</summary>
      <param name="targetTypeNames">
        <see cref="T:System.String" /> 类型的数组，指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。 这些值必须是完全限定的，例如“MyNamespace.MyOrders, MyOrdersAssemblyName”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetTypeNames" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
      <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例，并将传入的目标类型设置为对象类型的数组。</summary>
      <param name="targetTypes">
        <see cref="T:System.Type" /> 类型的数组，指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetTypes" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
      <summary>确定格式化程序是否可以反序列化消息。</summary>
      <returns>如果 XML 格式化程序可以反序列化该消息，则为 true；否则为 false。</returns>
      <param name="message">要检查的 <see cref="T:System.Messaging.Message" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性都未设置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.Clone">
      <summary>创建 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的实例，此实例的读/写属性（目标类型集）与当前 <see cref="T:System.Messaging.XmlMessageFormatter" /> 实例相同。</summary>
      <returns>一个对象，其属性与此 <see cref="T:System.Messaging.XmlMessageFormatter" /> 实例的属性相同，但其元数据并不将此实例指定为格式化程序类实例。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
      <summary>从给定的消息中读取内容，并创建包含反序列化消息的对象。</summary>
      <returns>反序列化的消息。</returns>
      <param name="message">要反序列化的 <see cref="T:System.Messaging.Message" />（XML 格式）。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性都未设置。 - 或 - 消息体中序列化的实例与 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性中的类型所表示的任何架构都不相符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
      <summary>指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</summary>
      <returns>
        <see cref="T:System.String" /> 类型的数组，指定当读取消息时从消息体反序列化的对象的类型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 属性为 null。</exception>
    </member>
    <member name="P:System.Messaging.XmlMessageFormatter.TargetTypes">
      <summary>指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</summary>
      <returns>
        <see cref="T:System.Type" /> 类型的数组，指定当读取消息时从消息体反序列化的对象的类型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性为 null。</exception>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
      <summary>将对象序列化为消息体。</summary>
      <param name="message">
        <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 属性将包含序列化的对象。</param>
      <param name="obj">要序列化为消息体的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 参数为 null。 - 或 - <paramref name="obj" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Messaging.Design.QueuePathDialog">
      <summary>表示路径编辑器控件。</summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.#ctor(System.IServiceProvider)">
      <summary>使用指定的服务提供程序初始化 <see cref="T:System.Messaging.Design.QueuePathDialog" /> 类的新实例。</summary>
      <param name="provider">可用来获取服务的 <see cref="T:System.IServiceProvider" />。</param>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.#ctor(System.Windows.Forms.Design.IUIService)">
      <summary>使用指定的 UI 服务初始化 <see cref="T:System.Messaging.Design.QueuePathDialog" /> 类的新实例。</summary>
      <param name="uiService">允许与宿主开发环境对象的用户界面交互的 <see cref="T:System.Windows.Forms.Design.IUIService" />。</param>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.ChoosePath">
      <summary>当选择队列路径时，更新路径编辑器控件。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.DoubleClicked(System.Object,System.EventArgs)">
      <summary>在双击控件时发生。</summary>
      <param name="source">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
      <summary>队列路径编辑器控件的窗体关闭事件的事件处理程序。</summary>
      <param name="e">
        <see cref="T:System.Windows.Forms.FormClosingEventArgs" /> 对象，包含窗体关闭事件处理程序的参数。</param>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.OnHandleCreated(System.EventArgs)">
      <summary>队列路径编辑器控件的窗体创建事件的事件处理程序。</summary>
      <param name="e">
        <see cref="T:System.Windows.Forms.FormClosingEventArgs" /> 对象，包含窗体创建事件处理程序的参数。</param>
    </member>
    <member name="P:System.Messaging.Design.QueuePathDialog.Path">
      <summary>获取队列路径。</summary>
      <returns>队列的路径。</returns>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.SelectQueue(System.Messaging.MessageQueue)">
      <summary>选择指定的队列。</summary>
      <param name="queue">要选择的 <see cref="T:System.Messaging.MessageQueue" />。</param>
    </member>
    <member name="T:System.Messaging.Design.QueuePathEditor">
      <summary>提供用于选择消息队列路径的用户界面。</summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathEditor.#ctor">
      <summary>初始化 <see cref="T:System.Messaging.Design.QueuePathEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>使用指定的类型说明符上下文和服务提供程序编辑指定消息队列的值。</summary>
      <returns>消息队列路径的新值。</returns>
      <param name="context">提供附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="provider">可由编辑器用来获取服务的 <see cref="T:System.IServiceProvider" />。</param>
      <param name="value">要编辑的消息队列。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.Design.QueuePathEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>返回 <see cref="Overload:System.Messaging.Design.QueuePathEditor.EditValue" /> 方法使用的编辑样式。</summary>
      <returns>
        <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" />.</returns>
      <param name="context">提供附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
    </member>
  </members>
</doc>