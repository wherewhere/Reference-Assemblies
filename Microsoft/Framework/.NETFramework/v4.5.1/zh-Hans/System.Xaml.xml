<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary>以符号表示 XAML 标记扩展特征的旧报告的类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> 类的新实例。</summary>
      <param name="type">此特性报告的返回类型。</param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary>获取或设置此特性报告的返回类型。</summary>
      <returns>此特性报告的返回类型。</returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary>指定应将某个属性或类型视为环境属性或类型。 环境概念与 XAML 处理器确定成员的类型所有者的方式相关。</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.AmbientAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary>实现对 .NET Framework XAML 服务的 x:Array 支持</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例。 这样将创建一个空数组。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>根据提供的原始数组初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例。</summary>
      <param name="elements">用于填充所创建数组的数组内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例，并初始化数组的类型。</summary>
      <param name="arrayType">新数组的对象类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary>将提供的对象追加到数组的末尾。</summary>
      <param name="value">要添加到数组末尾的对象。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary>将一个文本节点添加为一个新的数组项。</summary>
      <param name="text">要添加到数组末尾的文本。</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary>获取数组的内容。 可在 XAML 通过 XAML 集合语法进行设置。</summary>
      <returns>数组内容。</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个数组，其大小为 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值中提供的对象数。</summary>
      <returns>创建的数组，或者为 null。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的对象。</param>
      <exception cref="T:System.InvalidOperationException">处理一个未提供有效的 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 的数组。 - 或 - 数组的声明 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 与其一个或多个 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值之间存在类型不匹配。</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary>获取或设置调用 <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" /> 时要创建的数组的类型。</summary>
      <returns>数组类型。</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary>指定可以使用非默认构造函数语法来初始化对象，而且由指定名称的属性提供构造信息。此信息主要用于 XAML 序列化。</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> 类的新实例。</summary>
      <param name="argumentName">要初始化关联属性的构造函数的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary>获取将初始化关联属性的构造函数的名称参数。</summary>
      <returns>构造函数的名称。 假定具有 CLR 支持，那么这对应于相关构造函数参数的 <see cref="P:System.Reflection.ParameterInfo.Name" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>指示类型的哪个属性是 XAML 内容属性。 XAML 处理器在处理特性化类型的 XAML 表示形式的 XAML 子元素时使用此信息。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">作为内容属性的属性的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>获取作为内容属性的属性的名称。</summary>
      <returns>作为内容属性的属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary>指定在关联的集合类型上将用来包装外部内容的一种或多种类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 类的新实例。</summary>
      <param name="contentWrapper">作为集合类型的内容包装声明的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary>获取作为与此特性关联的集合类型的内容包装进行声明的类型。</summary>
      <returns>作为集合类型的内容包装声明的类型。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary>通过比较 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 属性，确定指定的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 是否等效于此 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</summary>
      <returns>如果 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 属性相等，则为 true，否则为 false。</returns>
      <param name="obj">要比较的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</param>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary>获取此特性的唯一标识符。</summary>
      <returns>该特性的唯一标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.DateTime" /> 的实例之间转换。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定能否将指定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.DateTime" /> 的实例。</summary>
      <returns>如果该值可以转换，则为 true；否则为 false。</returns>
      <param name="value">为转换而要计算的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定能否将指定的对象转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.DateTime" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.DateTime" /> 的一个新实例。</returns>
      <param name="value">要转换为 <see cref="T:System.DateTime" /> 的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.DateTime" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定的 <see cref="T:System.DateTime" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" /> 或是 null。</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary>指示特性化属性依赖于另一个属性的值。</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 类的新实例。</summary>
      <param name="name">与此 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 关联的属性所依赖的属性。</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary>获取此 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 中声明的相关属性的名称。</summary>
      <returns>相关属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary>获取此 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 的唯一标识符。</summary>
      <returns>唯一标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary>指定提供隐式键值的关联类的属性。 隐式键用于某些键，而不是用于在 XAML 中为 <see cref="T:System.Collections.IDictionary" /> 集合中的项定义的 x:Key 特性。</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">提供隐式键值的属性的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary>获取提供隐式键值的属性的名称。</summary>
      <returns>提供隐式键值的属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary>为命名的 XAML 元素以及将事件处理程序附加到这些元素提供标记编译和工具支持。</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary>将事件和名称附加到已编译的内容。</summary>
      <param name="connectionId">用于区分调用的标识符令牌。</param>
      <param name="target">事件和名称所连接到的目标。</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary>加载组件的已编译的页。</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary>关于如何在特定的 XMAL 名称范围内访问元素的名称，以及如何强制该 XAML 名称范围内名称的唯一性，定义一个协定。</summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary>返回一个具有提供的标识名称的对象。</summary>
      <returns>对象（如果找到）。 如果找不到该名称的对象，则返回 null。</returns>
      <param name="name">要请求的对象的名称标识符。</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary>将提供的名称注册到当前的 XAML 名称范围中。</summary>
      <param name="name">要注册的名称。</param>
      <param name="scopedElement">提供的 <paramref name="name" /> 所引用的特定元素。</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary>从当前 XAML 名称范围中注销提供的名称。</summary>
      <param name="name">要注销的名称。</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary>将可枚举的集合和字典支持进行了统一，可用于公开 XAML 名称范围中名称的字典。</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary>表示一个服务，该服务报告情景对象-属性关系以进行标记扩展计算。</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary>获取所报告的目标对象。</summary>
      <returns>所报告的目标对象。</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary>获取所报告的目标属性的标识符。</summary>
      <returns>所报告的目标属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary>查询是否应将指定的属性视为当前范围中的环境属性。</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary>查询可否将指定的命名属性视为当前范围中的环境属性。</summary>
      <returns>如果所请求的属性可视为环境属性，则为 true；否则为 false。</returns>
      <param name="propertyName">要检查其环境状态的属性的名称。</param>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary>表示一项服务，该服务可以使用应用程序上下午的将所提供的相对 URI 解析为绝对 URI。</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary>获取或设置当前应用程序上下文的基 URI。</summary>
      <returns>应用程序上下文的基 URI。</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary>定义提供给 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的上下文。 此上下文可用于实现序列化的特例或序列化的其他模式。</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>获取给定属性描述符的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <returns>一个可以序列化指定的属性的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
      <param name="descriptor">要转换的属性的描述符。</param>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary>获取与指定类型关联的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <returns>一个可以序列化指定的类型的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
      <param name="type">要转换的值的类型。</param>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary>表示一种服务，该服务将 XAML 标记中的已命名元素解析为适当的 CLR 类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary>将已命名的 XAML 类型解析为相应的 CLR <see cref="T:System.Type" />。</summary>
      <returns>
        <paramref name="qualifiedTypeName" /> 要解析为的 <see cref="T:System.Type" />。</returns>
      <param name="qualifiedTypeName">要解析的 XAML 类型名称。 该类型名称可以由 XML 命名空间的前缀限定。 否则将采用当前默认的 XML 命名空间。</param>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary>为可以由 .NET Framework XAML 服务及其他 XAML 读取器和 XAML 编写器支持的 XAML 标记扩展实现提供基类。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary>初始化从 <see cref="T:System.Windows.Markup.MarkupExtension" /> 派生的类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>在派生类中实现时，返回一个对象，此对象是作为此标记扩展的目标属性的值提供的。</summary>
      <returns>要在应用扩展的属性上设置的对象值。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的服务提供商帮助器。</param>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary>报告标记扩展可以返回的类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary>使用提供的 <see cref="T:System.Type" /> 初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 类的新实例。</summary>
      <param name="returnType">此 .NET Framework 特性 报告的返回类型。</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>不使用；请参见“备注”。</summary>
      <param name="returnType">此 .NET Framework 特性 报告的返回类型。</param>
      <param name="expressionType">不使用；请参见“备注”。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary>不使用；请参见“备注”。</summary>
      <returns>不使用；请参见“备注”。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary>获取此 .NET Framework 特性 报告的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 返回类型。</summary>
      <returns>应用了 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 的标记扩展的特定 <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> 实现的类型安全返回类型。   应用 .NET Framework 特性。</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary>提供基类，该基类用于在声明性 XAML 中定义类成员的标记技术。</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.MemberDefinition" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary>在派生类中实现时，获取或设置要定义的成员的名称。</summary>
      <returns>要定义的成员的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary>提供类型转换，以将字符串名称转换成对具有该名称的对象的对象引用，或返回对象图中对象的名称。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.NameReferenceConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以将一种类型的对象转换为另一个对象。</summary>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示转换器能否将对象转换为指定的目标类型。</summary>
      <returns>如果转换器能执行转换，则为 true；否则为 false。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">要转换到的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将提供的对象转换为另一个对象。</summary>
      <returns>返回的对象，该对象可能是在相关支持程序集中进行了类型映射的任何对象，并且可在 XAML 中通过 XAML 名称引用进行声明。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的引用名称字符串。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 为 null 字符串或空字符串。 - 或 - <see cref="T:System.Xaml.IXamlNameResolver" /> 服务缺失或无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将对象转换为指定类型。 这用于为对象图形中的对象返回 XAML 引用名称。</summary>
      <returns>输入 <paramref name="value" /> 对象的引用名称。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要检索其引用名称的对象。</param>
      <param name="destinationType">要返回的类型。 应当始终引用 <see cref="T:System.String" /> 类型。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xaml.IXamlNameProvider" /> 服务缺失或无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary>指定提供 XAML 名称范围值的关联类的属性。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 类的新实例。</summary>
      <param name="name">特性化类型上提供 XAML 名称范围的属性的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>用指定的名称和类型初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 类的新实例。</summary>
      <param name="name">提供 XAML 名称范围的可附加成员的名称。</param>
      <param name="type">提供 XAML 名称范围的可附加成员的所有者类型。</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary>获取提供 XAML 名称范围的属性的名称。</summary>
      <returns>一个字符串值，它是提供 XAML 名称范围的属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary>获取提供 XAML 命名空间支持的所附加属性的所有者类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，该值是提供 XAML 命名空间支持的所附加属性的所有者类型；或者为 null。 请参见“备注”。</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary>实现 XAML 标记以返回 null 对象，可使用该对象在 XAML 中将值显式设置为 null。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.NullExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>提供要用作值的 null 作为此标记扩展的输出。</summary>
      <returns>空引用。</returns>
      <param name="serviceProvider">可为标记扩展实现提供服务的对象。</param>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary>支持在声明性 XAML 中定义类属性的标记技术。</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.PropertyDefinition" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary>获取关联的 CLR 特性的列表。</summary>
      <returns>关联的特性的列表。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary>获取或设置定义的属性的访问级别。</summary>
      <returns>定义的属性的访问级别，以字符串的形式表示。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary>获取或设置要定义的属性的名称。</summary>
      <returns>要定义的属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary>获取或设置要定义的属性的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>要定义的属性的 XAML 类型标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary>实现 {x:Reference} 标记扩展。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.Reference" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary>使用 <paramref name="name" /> 参数初始化 <see cref="T:System.Windows.Markup.Reference" /> 类的新实例。</summary>
      <param name="name">要引用的元素的 XAML 名称。</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary>获取或设置要获取其引用的 XAML 名称。</summary>
      <returns>要获取其引用的元素的 XAML 名称。</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary>返回作为目标属性的值的对象。 对于 <see cref="T:System.Windows.Markup.Reference" /> 类型，这是提供的 <see cref="P:System.Windows.Markup.Reference.Name" /> 所引用的对象。</summary>
      <returns>目标属性的值。 这有可能是在相关支持程序集中映射了类型的任何对象。</returns>
      <param name="serviceProvider">一个实现 <see cref="T:System.Xaml.IXamlNameResolver" /> 服务的类。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="serviceProvider" /> 值不实现 <see cref="T:System.Xaml.IXamlNameResolver" /> 服务。 - 或 - 尚未通过构造或位置的用法设置 <see cref="P:System.Windows.Markup.Reference.Name" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 为 null。</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary>表示一个程序集级别特性，该特性用于标识 Visual Studio 项目文件中 RootNamespace 属性的值。</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> 类的新实例。</summary>
      <param name="nameSpace">根命名空间值。</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary>获取与 Visual Studio 项目文件中 RootNamespace 属性的值相对应的字符串。</summary>
      <returns>与 Visual Studio 项目文件中 RootNamespace 属性的值相对应的字符串。</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary>表示类型级别的特性，该特性报告类型的哪个属性映射到 XAML x:Name attribute。</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 类的新实例。</summary>
      <param name="name">用作类的 x:Name 等效项的属性的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary>获取由此 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 指定的运行时名称属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary>实现返回静态字段和属性引用的标记扩展。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary>使用提供的 <paramref name="member" /> 字符串初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 类的新实例。</summary>
      <param name="member">标识要引用的成员的字符串。 此字符串使用格式 prefix:typeName.fieldOrPropertyName。 prefix 是 XAML 命名空间的映射前缀，并且仅当引用未映射到默认 XAML 命名空间的静态值时才需要。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary>获取或设置用于根据服务提供的类型解析程序解析静态字段或属性的成员名称字符串。</summary>
      <returns>标识要引用的成员的字符串。 请参见“备注”。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Windows.Markup.StaticExtension.Member" /> 设置为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary>获取或设置用于定义要返回的静态成员的 <see cref="T:System.Type" />。</summary>
      <returns>用于定义要返回的静态成员的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Windows.Markup.StaticExtension.MemberType" /> 设置为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个要在此扩展所应用到的属性上设置的对象值。 对于 <see cref="T:System.Windows.Markup.StaticExtension" />，返回值是为所请求的静态成员计算的静态值。</summary>
      <returns>要在应用扩展的属性上设置的静态值。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的对象。 服务提供程序应提供实现类型解析程序 (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />) 的服务。</param>
      <exception cref="T:System.InvalidOperationException">扩展的 <paramref name="member" /> 值在求值时为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 字符串的某部分未进行正确分析 - 或 - <paramref name="serviceProvider" /> 没有提供服务<see cref="T:System.Windows.Markup.IXamlTypeResolver" /> - 或 - <paramref name="member" /> 值未解析为静态成员。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 为 null。</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary>向 XAML 处理器指示在序列化时应修剪标记中该类型元素四周的空白。</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary>实现根据字符串输入返回 <see cref="T:System.Type" /> 的标记扩展。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例，并根据提供的 <paramref name="typeName" /> 字符串初始化 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> 值。</summary>
      <param name="typeName">标识要引用的类型的字符串。 此字符串使用格式 prefix:className。 prefix 是 XAML 命名空间的映射前缀，并且仅当引用未映射到默认 XAML 命名空间的类型时才需要。</param>
      <exception cref="T:System.ArgumentNullException">尝试将 <paramref name="typeName" /> 指定为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例，并直接声明类型。</summary>
      <param name="type">将通过此 <see cref="T:System.Windows.Markup.TypeExtension" /> 表示的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为null</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个应在此扩展应用的属性上设置的对象。 对于 <see cref="T:System.Windows.Markup.TypeExtension" />，这是为请求的类型名称计算的 <see cref="T:System.Type" /> 值。</summary>
      <returns>要在应用了扩展的属性上设置的 <see cref="T:System.Type" />。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的对象。 此提供程序应为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务。</param>
      <exception cref="T:System.InvalidOperationException">扩展的 <paramref name="member" /> 值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 字符串的某部分未进行正确分析。 - 或 - <paramref name="serviceProvider" /> 没有提供服务<see cref="T:System.Windows.Markup.IXamlTypeResolver" /> - 或 - <paramref name="typeName" /> 值未解析为类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 为null</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary>获取或设置此扩展的类型信息。</summary>
      <returns>建立的类型。 对运行时而言，这可以是 null 以表示 get 访问，但不能设置为 null。</returns>
      <exception cref="T:System.ArgumentNullException">试图设置为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary>获取或设置此标记扩展所表示的类型名称。</summary>
      <returns>用于标识类型的字符串。 此字符串使用 前缀:类名称”格式。（前缀 是 XML 命名空间的映射前缀，并且仅当引用未映射到 WPF 默认 XML 命名空间的类型时才需要（http://schemas.microsoft.com/winfx/2006/xaml/presentation）。</returns>
      <exception cref="T:System.ArgumentNullException">试图设置为 null。</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary>指示提供 x:Uid 指令 值的类的 CLR 属性。</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">提供 x:Uid值的属性的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary>获取表示 x:Uid 指令 值的 CLR 属性的名称。</summary>
      <returns>表示 x:Uid 指令 的 CLR 属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary>指示在 XAML 对象图创建期间是否自上而下生成此类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> 类的新实例。</summary>
      <param name="usable">定义关联的类在初始化期间是否可用。</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary>获取一个值，该值指示关联类在初始化期间是否可用。</summary>
      <returns>如果关联类在初始化期间可用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary>定义从对象表示形式进行序列化过程中的转换行为的抽象类。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>在派生类中重写时，确定指定的 <see cref="T:System.String" /> 能否转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
      <returns>如果该值可以转换，则为 true；否则为 false。</returns>
      <param name="value">为转换而要计算的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>在派生类中重写时，确定指定的对象能否转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>在派生类中重写时，将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
      <returns>根据提供的 <paramref name="value" />，<see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现可支持的类型的新实例。</returns>
      <param name="value">要转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>在派生类中重写时，将指定对象转换为 <see cref="T:System.String" />。</summary>
      <returns>指定对象的字符串表示形式。</returns>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary>返回无法执行转换时引发的异常。</summary>
      <returns>用于在无法执行 ConvertFrom 转换时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
      <param name="value">未能转换的对象。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary>返回无法执行转换时引发的异常。</summary>
      <returns>用于在无法执行 ConvertTo 转换时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
      <param name="value">未能转换的对象。</param>
      <param name="destinationType">一个类型，表示转换时尝试转换成的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>通过传递属性的 CLR 属性描述符，获取为该属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <returns>与指定的属性关联的序列化程序。 可以返回 null。</returns>
      <param name="descriptor">要序列化的属性的 CLR 属性描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary>使用指定的上下文获取为指定的属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <returns>与指定的属性关联的序列化程序。</returns>
      <param name="descriptor">要序列化的属性的描述符。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary>获取为指定的类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <returns>与指定的类型关联的序列化程序。 可以返回 null。</returns>
      <param name="type">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>使用指定的上下文获取为指定的类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <returns>与指定的类型关联的序列化程序。</returns>
      <param name="type">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 引用的类型的枚举。</summary>
      <returns>此序列化程序所转换的类型。</returns>
      <param name="value">要序列化的值。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary>指示应该由 XAML 处理器将集合类型处理为空白有意义的。</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary>指示类或属性具有 XAML 的延迟加载用途（如模板行为），并报告启用延迟行为及其目标/内容类型的类。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary>使用类型的字符串名称初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 类的新实例。</summary>
      <param name="loaderType">实现用于延迟加载行为的类型的字符串名称。</param>
      <param name="contentType">延迟加载行为的目标/内容类型的类型字符串名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary>使用 CLR <see cref="T:System.Type" /> 值初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 类的新实例。</summary>
      <param name="loaderType">实现用于延迟加载行为的 CLR <see cref="T:System.Type" /> 值。</param>
      <param name="contentType">延迟加载行为的目标/内容类型的 CLR <see cref="T:System.Type" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary>获取延迟加载行为的目标/内容类型的 CLR <see cref="T:System.Type" /> 值。</summary>
      <returns>延迟加载行为的目标/内容类型的 CLR <see cref="T:System.Type" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary>获取实现用于延迟加载行为的类型的字符串名称。</summary>
      <returns>转换器用于延迟加载行为的类型的字符串名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary>获取实现用于延迟加载行为的 CLR <see cref="T:System.Type" /> 值。</summary>
      <returns>实现用于延迟加载行为的 CLR <see cref="T:System.Type" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary>获取延迟加载行为的目标/内容类型的类型字符串名称。</summary>
      <returns>延迟加载行为的目标/内容类型的类型字符串名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary>指示类可以使用标记扩展提供值，并引用要用于标记扩展设置操作的处理程序。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> 类的新实例。</summary>
      <param name="xamlSetMarkupExtensionHandler">用于标记扩展设置操作的处理程序的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary>获取用于标记扩展设置操作的处理程序的名称。</summary>
      <returns>用于标记扩展设置操作的处理程序的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary>为 XAML 对象编写器在使用标记扩展设置值时调用的回调提供数据。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 类的新实例。</summary>
      <param name="member">所设置的成员的 XAML 类型系统/架构信息。</param>
      <param name="value">要为所设置的成员提供的标记扩展引用。</param>
      <param name="serviceProvider">传递给标记扩展的服务提供程序信息。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary>为调用针对当前活动类型基类定义的回调提供了一条途径。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary>获取与此 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 相关的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 引用。</summary>
      <returns>与此 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 相关的标记扩展引用。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary>获取传递给标记扩展的服务提供程序信息。</summary>
      <returns>传递给标记扩展的服务提供程序信息。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary>指示类可以使用类型转换器提供值，并引用要用于类型转换器设置情况的处理程序。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 类的新实例。</summary>
      <param name="xamlSetTypeConverterHandler">要用于类型转换器设置操作的处理程序的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary>获取在 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 中指定的 <paramref name="xamlSetTypeConverterHandler" /> 初始化值（处理程序名称）。</summary>
      <returns>在 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 中指定的 <paramref name="xamlSetTypeConverterHandler" /> 值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary>为 XAML 编写器在使用类型转换器调用设置值时调用的回调提供数据。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> 类的新实例。</summary>
      <param name="member">所设置的成员的 XAML 类型系统/架构信息。</param>
      <param name="typeConverter">所调用的特定类型转换器实例。</param>
      <param name="value">要为所设置的成员提供的值。</param>
      <param name="serviceProvider">可由 <paramref name="typeConverter" /> 类使用的服务提供程序信息。</param>
      <param name="cultureInfo">调用 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 和其他方法时可由 <paramref name="typeConverter" /> 类使用的区域性信息。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary>为调用针对当前活动类型基类定义的回调提供了一条途径。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary>获取调用 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 和其他方法时可由类型转换器类使用的 <see cref="T:System.Globalization.CultureInfo" /> 信息。</summary>
      <returns>可由类型转换器类使用的区域性信息</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary>获取可由类型转换器类使用的 <see cref="T:System.IServiceProvider" /> 信息。</summary>
      <returns>可由 <paramref name="typeConverter" /> 类使用的服务提供程序信息。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary>获取所调用的 <see cref="T:System.ComponentModel.TypeConverter" /> 实例，并提供类型转换行为。</summary>
      <returns>提供类型转换行为的类型转换器。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary>为 <see cref="T:System.Xaml.XamlObjectWriter" /> 在设置某些值时调用的回调提供数据。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 类的新实例。</summary>
      <param name="member">所设置的成员的 XAML 类型系统/架构信息。</param>
      <param name="value">要为成员提供的值。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary>在派生类中重写时，为调用针对当前活动类型基类定义的 SetValue 回调提供了一条途径。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary>获取或设置一个值，该值确定使用 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的调用方是否可以使用值，而不必调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />。</summary>
      <returns>如果值有用并且不必调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary>获取所设置的成员的 XAML 类型系统和 XAML 架构信息。</summary>
      <returns>所设置的成员的 XAML 类型系统和 XAML 架构信息。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary>获取要为所设置的成员提供的值。</summary>
      <returns>要为所设置的成员提供的值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary>表示可显示为 Value 节点的值的 literal 数据。</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.XData" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary>获取或设置此 <see cref="T:System.Windows.Markup.XData" /> 包装的文本值字符串。</summary>
      <returns>文本值字符串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary>获取或设置 literal 数据的读取器。</summary>
      <returns>literal 数据的读取器。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary>标识与 xml:lang 特性关联的属性。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">要与 xml:lang 属性关联的属性名称。</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary>获取此特性中指定的属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary>指定一个 XAML 命名空间可以由另一个 XAML 命名空间归入。 通常，进行归入的 XAML 命名空间在以前定义的 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 中指示。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> 类的新实例。</summary>
      <param name="oldNamespace">引用 XAML 命名空间标识符。</param>
      <param name="newNamespace">归入 XAML 命名空间标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldNamespace" /> 或 <paramref name="newNamespace" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary>获取此特性报告的归入命名空间标识符。</summary>
      <returns>此特性中报告的归入命名空间标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary>获取此特性报告的引用命名空间标识符。</summary>
      <returns>引用命名空间标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>指定 XML 命名空间与 CLR 命名空间之间按程序集进行的映射，然后 XAML 对象编写器或 XAML 架构上下文使用后一种命名空间进行类型解析。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 类的新实例。</summary>
      <param name="xmlNamespace">XAML 命名空间标识符。</param>
      <param name="clrNamespace">引用 CLR 命名空间名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 或 <paramref name="clrNamespace" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>获取或设置与此特性关联的程序集的名称。</summary>
      <returns>程序集名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>获取此特性中指定的 CLR 命名空间的字符串名称。</summary>
      <returns>以字符串形式指定的 CLR 命名空间。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>获取此特性中指定的 XAML 命名空间标识符。</summary>
      <returns>XAML 命名空间标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>标识一个建议的前缀，用于在向 XAML 文件中写入元素和特性（序列化）时或与具有 XAML 编辑功能的设计环境交互时与 XAML 命名空间关联以便使用 XAML。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> 类的新实例。</summary>
      <param name="xmlNamespace">XAML 命名空间标识符。</param>
      <param name="prefix">推荐的前缀字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 或 <paramref name="prefix" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>获取与此特性关联的推荐前缀。</summary>
      <returns>推荐的前缀字符串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>获取与此特性关联的 XAML 命名空间标识符。</summary>
      <returns>XAML 命名空间标识符。</returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary>报告有关环境属性的信息，作为 <see cref="T:System.Xaml.IAmbientProvider" /> 实现的一部分。</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.AmbientPropertyValue" /> 类的新实例。</summary>
      <param name="property">表示环境属性的标识符。</param>
      <param name="value">要报告的值。</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary>获取表示环境属性的 XAML 类型系统标识符 (<see cref="T:System.Xaml.XamlMember" />)。</summary>
      <returns>表示环境属性的标识符。</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary>获取环境属性的值。</summary>
      <returns>环境属性的值。</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary>为可附加成员提供 XAML 类型系统标识符表示形式。 标识符结构与 <paramref name="declaringType" />.<paramref name="memberName" /> 字符串形式并列，便于使用可附加成员。</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 类的新实例。</summary>
      <param name="declaringType">标识符的 <paramref name="declaringType" /> 组成部分，它应与声明 <see cref="P:System.Xaml.XamlMember.Type" /> 的名称相匹配。</param>
      <param name="memberName">标识符的 <paramref name="memberName" /> 组成部分，它应与 <see cref="P:System.Xaml.XamlMember.Name" /> 相匹配。</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary>获取或设置 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="declaringType" /> 组成部分值。</summary>
      <returns>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="declaringType" /> 组成部分值。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary>确定此 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 实例是否与指定的对象具有相同的值。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 并且它的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">将与当前 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary>确定此实例是否与另一个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象具有相同的值。</summary>
      <returns>如果这些对象具有相同的值，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 进行比较的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary>返回该 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary>获取或设置 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="memberName" /> 组成部分值。</summary>
      <returns>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="memberName" /> 组成部分值。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象是否具有相同的值。</summary>
      <returns>如果 <paramref name="left" /> 的值与 <paramref name="right" /> 的值相同，则为 true；否则为 false。</returns>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 null。</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 null。</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象是否具有不同的值。</summary>
      <returns>如果 <paramref name="left" /> 的值与 <paramref name="right" /> 的值不同，则为 true；否则为 false。</returns>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 null。</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 null。</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary>返回表示当前 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary>提供一些静态帮助器方法，这些方法用于从可附加属性中获取值和访问器方法信息，并且和附加的属性存储一起工作。</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>从指定的可附加属性存储中复制所有可附加属性/值对，并将它们复制到目标数组中。</summary>
      <param name="instance">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</param>
      <param name="array">目标数组。 该数组为泛型数组，应以无维度方式传递，并且应具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 object 的组件。</param>
      <param name="index">要在该处进行复制的源索引。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary>返回指定存储中可附加属性条目的计数。</summary>
      <returns>存储中条目的整数计数。</returns>
      <param name="instance">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary>从指定存储中移除指定可附加属性的条目。</summary>
      <returns>如果在存储区中找到了 <paramref name="name" /> 的可附加属性条目并已将其从中移除，则为 true；否则为 false。</returns>
      <param name="instance">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</param>
      <param name="name">要从存储区中移除的可附加属性条目的标识符。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>设置指定存储中的指定可附加属性的值。</summary>
      <param name="instance">一个实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储，或者为任何不可为 null 的对象以使用静态默认可附加属性存储。</param>
      <param name="name">要为其设置值的可附加属性条目的标识符。</param>
      <param name="value">要设置的值。</param>
      <exception cref="T:System.InvalidOperationException">未能在存储中设置值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>尝试获取指定存储中的指定可附加属性的值。 如果特定可附加属性在存储中不存在，将不会引发异常。</summary>
      <returns>如果在存储中找到了 <paramref name="name" /> 的可附加属性条目，并且值已传递到 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="instance">一个实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储，或者为任何不可为 null 的对象以使用静态默认可附加属性存储。</param>
      <param name="name">要为其获取值的可附加属性条目的标识符。</param>
      <param name="value">Out 参数。 当此方法返回时，如果 <paramref name="name" /> 存在于存储中并且具有值，则会包含值的目标对象。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary>尝试获取指定存储中的指定可附加属性的值，返回泛型输出形式。 如果特定可附加属性在存储中不存在，将不会引发异常。</summary>
      <returns>如果在存储中找到了 <paramref name="name" /> 的可附加属性条目，并且值已传递到 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="instance">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</param>
      <param name="name">要为其获取值的可附加属性条目的标识符。</param>
      <param name="value">Out 参数。 当此方法返回时，如果 <paramref name="name" /> 存在于存储中并且具有值，则会包含值的目标对象。</param>
      <typeparam name="T">预期的输出类型。</typeparam>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary>返回一个服务，该服务可将有关环境属性或环境类型的信息项返回到类型转换器和标记扩展。</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>针对所请求的种类和属性集，返回环境属性信息项的可枚举集合。</summary>
      <returns>针对所请求的类型和属性集的环境属性信息项的可枚举集合。 返回的每个 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的属性信息将与其中一个输入 <paramref name="types" /> 或 <paramref name="properties" /> 相匹配。</returns>
      <param name="ceilingTypes">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。 可以为 null。</param>
      <param name="searchLiveStackOnly">true 则不使用已保存的上下文 ；false 则使用已保存的上下文。 默认值为 false。 请参见“备注”。</param>
      <param name="types">指定一个或多个类型标识符对象，这些对象标识要视为环境的类型。</param>
      <param name="properties">指定一个或多个属性标识符对象，这些对象标识要视为环境属性的属性。</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>针对所请求的属性集，返回环境属性信息项的可枚举集合。</summary>
      <returns>所请求属性集的环境属性信息的可枚举集合。 返回的每个 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的属性信息将与其中一个输入 <paramref name="properties" /> 相匹配。</returns>
      <param name="ceilingTypes">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。 可以为 null。</param>
      <param name="properties">指定一个或多个属性标识符对象，这些对象标识要视为环境属性的属性。</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary>针对请求的类型，返回可能的环境类型的对象实例的可枚举集合。</summary>
      <returns>对象的可枚举集合，这些对象表示所请求的 <see cref="T:System.Xaml.XamlType" /> 标识符集合的值。</returns>
      <param name="types">要从中检索环境类型信息的类型集。</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>从请求的属性集中返回单个环境属性信息项，具体情况视哪个属性是遇到的第一个属性而定。</summary>
      <returns>所找到的 <paramref name="properties" /> 列表中第一个环境属性值的单个环境属性信息项。</returns>
      <param name="ceilingTypes">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。</param>
      <param name="properties">指定一个或多个对象，这些对象标识要视为环境属性的属性。</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary>返回第一个匹配对象，该对象是所请求类型可能的环境类型。</summary>
      <returns>所请求集合的第一个结果对象。</returns>
      <param name="types">要从中检索环境类型信息的类型集。</param>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary>表示设置了可附加成员的对象的可附加成员存储。 随后可使用 <see cref="T:System.Xaml.AttachablePropertyServices" /> 引用此可附加成员存储。</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>从此可附加成员存储区中复制所有可附加成员/值对，并将它们复制到目标数组中。</summary>
      <param name="array">目标数组。 该数组为泛型数组，应以无维度方式传递，并且应具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 object 的组件。</param>
      <param name="index">开始复制处的源索引。</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary>获取此可附加成员存储中的可附加成员条目的计数。</summary>
      <returns>存储中条目的整数计数。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary>从此可附加成员存储中移除指定可附加成员的条目。</summary>
      <returns>如果在存储中找到了 <paramref name="attachableMemberIdentifier" /> 的可附加成员条目并已将其移除，则为 true；否则为 false。</returns>
      <param name="attachableMemberIdentifier">要移除的可附加成员条目的 XAML 类型系统标识符。</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>设置指定存储中的指定可附加成员的值。</summary>
      <param name="attachableMemberIdentifier">要设置的可附加成员条目的 XAML 类型系统标识符。</param>
      <param name="value">要设置的值。</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>尝试获取指定存储中的指定可附加成员的值。</summary>
      <returns>如果在存储中找到了 <paramref name="attachableMemberIdentifier" /> 的可附加成员条目，并且值已传递到 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="attachableMemberIdentifier">要获取的可附加成员条目的 XAML 类型系统标识符。</param>
      <param name="value">Out 参数。 当此方法返回时，如果 <paramref name="attachableMemberIdentifier" /> 存在于存储中并且具有值，则会包含值的目标对象。</param>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary>表示一个服务，该服务可返回目标类型的 CLR 类型系统标识符。 与目标类型相关的情况是属性设置操作的目标类型由反射或其他机制间接报告。</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary>返回 CLR <see cref="T:System.Type" />，用于标识相关类型转换器或标记扩展的目标类型。</summary>
      <returns>目标类型的 CLR <see cref="T:System.Type" /> 值。</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary>表示一个服务，该服务可为到使用者的 XAML 命名空间映射返回建议的前缀。 使用者可以包括设计环境或序列化程序。</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary>针对指定的 XAML 命名空间标识符返回建议前缀。</summary>
      <returns>建议的前缀。</returns>
      <param name="ns">要针对其获取前缀的 XAML 命名空间标识符字符串。</param>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary>描述一个服务，该服务可返回所分析标记的根对象。</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary>从标记中或从对象图中获取根对象。</summary>
      <returns>根对象。</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary>提供一个服务，该服务表示基于节点的 XAML 读取器的简单实现的索引节点控件。</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary>获取当前外部节点集中的节点数。</summary>
      <returns>当前外部节点集中的节点数。</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary>针对 XAML 节点的索引列表视图获取或设置当前读取器位置的索引号。</summary>
      <returns>当前读取器位置的索引号。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary>描述用于在 XAML 读取器实现中报告文本行信息的服务。</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary>获取一个值，该值指定行信息是否可用。</summary>
      <returns>如果行信息可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary>获取要报告的行号。</summary>
      <returns>要报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary>获取要报告的行位置。</summary>
      <returns>要报告的行位置。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary>描述一个服务，在该服务中，XAML 编写器可以使用报告的行信息，然后将该信息包括在输出中。</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary>收集行信息。</summary>
      <param name="lineNumber">在输出中使用的行号。</param>
      <param name="linePosition">在输出中使用的行位置。</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary>获取一个值，该值确定行信息服务是否应在相关时提供值，并因此是否应同时调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />。</summary>
      <returns>如果行信息由实现使用，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary>提供一个服务，该服务用于在保存和写入操作过程中输入对象，并返回 XAML 名称。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary>检索指定对象的 XAML 名称。</summary>
      <returns>所请求对象的 XAML 名称值。</returns>
      <param name="value">要为其获取名称的对象。</param>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary>描述可返回 XAML 名称所指定对象的服务，或者返回推迟名称解析的标记。 该服务还可返回 XAML 名称范围中所有命名对象的可枚举集合。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary>返回 XAML 名称范围中所有命名对象的可枚举集合。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 对象的可枚举集合。 对于每个 <see cref="T:System.Collections.Generic.KeyValuePair`2" />，<see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 组件为字符串，<see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 组件为在 XAML 名称范围中使用 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 名称的对象。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary>返回一个对象，该对象可针对生成前向引用的某些标记模式进行修正。</summary>
      <returns>一个为要稍后计算的查找行为提供标记的对象。</returns>
      <param name="names">可能转发引用的名称的集合。</param>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>返回一个对象，该对象可针对生成前向引用的某些标记模式进行修正。</summary>
      <returns>一个为要稍后计算的查找行为提供标记的对象。</returns>
      <param name="names">可能转发引用的名称的集合。</param>
      <param name="canAssignDirectly">如果为 true，则立即将已解析的名称引用指派给目标属性。 如果为 false，则调用用户代码进行重新分析。 默认行为是 false。</param>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary>获取一个值，该值确定是否可调用 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />，以便将名称解析为前向解析的标记。</summary>
      <returns>如果提供了 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> 作为可为前向解析返回有用标记的实现，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary>在 XAML 处理器已向支持 XAML 名称范围注册了所有相关名称时发生。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary>从名称引用解析对象。</summary>
      <returns>解析的对象；或者为 null。</returns>
      <param name="name">要解析的名称引用。</param>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary>从名称引用解析对象，并提供一个跟踪值，该值报告是否为建立对象图而完全初始化对象。</summary>
      <returns>一个为要稍后计算的查找行为提供标记的对象。</returns>
      <param name="name">要解析的名称引用。</param>
      <param name="isFullyInitialized">当此方法返回时，如果返回的对象在未解析引用上有任何依赖项，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary>描述一个服务，该服务可按照 XAML 标记中映射的方式基于 XAML 命名空间的前缀返回该命名空间。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary>针对指定的前缀字符串检索 XAML 命名空间标识符。</summary>
      <returns>所请求 XAML 命名空间标识符，表示为字符串形式。</returns>
      <param name="prefix">要针对其检索 XAML 命名空间信息的前缀。</param>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary>返回所有可能的前缀到 XAML 命名空间映射（<see cref="T:System.Xaml.NamespaceDeclaration" /> 值），这些映射可在活动架构上下文中找到。</summary>
      <returns>
        <see cref="T:System.Xaml.NamespaceDeclaration" /> 值的可枚举集合。 若要获取所有前缀字符串，请从返回的集内的每个值中获取 <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> 值。 要获取特定 XAML 命名空间的前缀，请处理任何具有所需 <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" /> 值的返回值。</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary>表示一个服务，该服务基于当前的内部分析器上下文生成 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary>从原始内部分析器上下文中返回 <see cref="T:System.Xaml.XamlObjectWriterSettings" />。</summary>
      <returns>原始内部分析器上下文中的设置。</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary>返回基于活动 XAML 架构上下文的 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlObjectWriter" />，它具有指定的设置。</returns>
      <param name="settings">用于构造和初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 的设置。</param>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary>表示一个服务，该服务为类型转换器和标记扩展提供 XAML 架构上下文信息。</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary>获取服务上下文所报告的 <see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
      <returns>服务上下文所报告的 XAML 架构上下文。</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary>为 XAML 命名空间声明标识符和前缀，方法是将这些字符串值存储为单独的属性。</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary>使用初始属性值初始化 <see cref="T:System.Xaml.NamespaceDeclaration" /> 类的新实例。</summary>
      <param name="ns">以字符串形式指定的 XAML 命名空间标识符。</param>
      <param name="prefix">在前缀映射中用于命名空间的字符串前缀。</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary>获取 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的标识符组成部分。</summary>
      <returns>XAML 命名空间声明的标识符。</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary>获取用作 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的 XAML 命名空间映射前缀的前缀。</summary>
      <returns>此 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的前缀字符串。</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary>实现一个双缓存 <see cref="T:System.Xaml.XamlReader" />，它可将读取和写入拆分为不同的线程。</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary>初始化 <see cref="T:System.Xaml.XamlBackgroundReader" /> 类的新实例。</summary>
      <param name="wrappedReader">此 <see cref="T:System.Xaml.XamlBackgroundReader" /> 所基于的 <see cref="T:System.Xaml.XamlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappedReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Xaml.XamlBackgroundReader" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源；否则为 false。</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary>获取一个值，该值指定行信息是否可用。</summary>
      <returns>如果行信息可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary>获取一个值，该值报告读取器位置是否位于文件结尾。</summary>
      <returns>如果位置位于文件结尾，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary>获取要报告的行号。</summary>
      <returns>要报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary>获取要报告的行位置。</summary>
      <returns>要报告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary>如果读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</summary>
      <returns>当前成员；如果位置不在成员上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary>从当前节点中获取 XAML 命名空间。</summary>
      <returns>如果可用，则为当前节点中的 XAML 命名空间；否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary>提供源中的下一个 XAML 节点（如果节点可用）。</summary>
      <returns>如果某节点可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary>获取一个对象，该对象提供信息集的架构上下文信息。</summary>
      <returns>一个对象，该对象提供信息集的架构上下文信息。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary>创建并启动一个新的 <see cref="T:System.Threading.Thread" />（从 <see cref="T:System.Threading.ParameterizedThreadStart" /> 构造），它用于处理 <see cref="T:System.Xaml.XamlReader" /> 的命名线程。</summary>
      <exception cref="T:System.InvalidOperationException">线程已启动。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary>创建并启动一个新的 <see cref="T:System.Threading.Thread" />（从 <see cref="T:System.Threading.ParameterizedThreadStart" /> 构造），它用于处理 <see cref="T:System.Xaml.XamlReader" /> 的命名线程。 将线程名称指定为参数。</summary>
      <param name="threadName">线程的名称。</param>
      <exception cref="T:System.InvalidOperationException">线程已启动。</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary>获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>当前节点的 <see cref="T:System.Xaml.XamlType" />；如果当前读取器位置不在对象上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary>获取当前节点的值。</summary>
      <returns>当前节点的值；如果当前读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 null。</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary>表示加载和返回延迟内容的 XAML 读取器行为。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlDeferringLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>基于 <see cref="T:System.Xaml.XamlReader" /> 和服务提供程序提供的某些所需服务，在延迟模式下加载 XAML 内容。</summary>
      <returns>输入 <see cref="T:System.Xaml.XamlReader" /> 生成的根对象。</returns>
      <param name="xamlReader">在调用 <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" /> 时返回的启动读取器。</param>
      <param name="serviceProvider">所需服务的服务提供程序。</param>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>为延迟加载提交值。</summary>
      <returns>可用于以 XAML 节点信息形式获取延迟值的 XAML 读取器。</returns>
      <param name="value">要为延迟加载提交的输入值。</param>
      <param name="serviceProvider">所需服务的服务提供程序。</param>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary>在成员兼作 XAML 指令时为成员提供 XAML 类型系统标识符。 在处理成员节点的过程中，XAML 读取器和 XAML 编写器使用 <see cref="T:System.Xaml.XamlDirective" /> 标识符。 如果读取器位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，而且 <see cref="P:System.Xaml.XamlMember.IsDirective" /> 为 true，则使用此标识符。</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary>初始化 <see cref="T:System.Xaml.XamlDirective" /> 类的新实例，同时为 <see cref="T:System.Xaml.XamlDirective" /> 各个情况下的每个可能值指定值。</summary>
      <param name="xamlNamespaces">此 <see cref="T:System.Xaml.XamlDirective" /> 可存在于其中的 XAML 命名空间的集合，以标识符字符串的可枚举集合的形式传递。</param>
      <param name="name">
        <see cref="T:System.Xaml.XamlDirective" /> 的标识名称。</param>
      <param name="xamlType">为 <see cref="T:System.Xaml.XamlDirective" /> 提供支持的 XAML 类型。</param>
      <param name="typeConverter">此 <see cref="T:System.Xaml.XamlDirective" /> 用于文本语法转换的类型转换器。</param>
      <param name="allowedLocation">
        <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> 枚举的一个值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Xaml.XamlDirective" /> 类的新实例，同时为名称和单个 XAML 命名空间指定值。 只有在您希望或预计 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 对于指令报告 true 时，才使用此签名。</summary>
      <param name="xamlNamespace">主 XAML 命名空间，此 <see cref="T:System.Xaml.XamlDirective" /> 可能存在于其中。</param>
      <param name="name">
        <see cref="T:System.Xaml.XamlDirective" /> 的标识名称。</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary>获取一个值，该值指定可在其中指定指令的 XAML 节点类型。</summary>
      <returns>枚举的一个值。 默认值为枚举默认值，即 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary>返回 XAML 命名空间的列表，此 XAML 成员可能存在于这些命名空间中。</summary>
      <returns>字符串形式的 XAML 命名空间标识符的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary>返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。 此实现总是返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary>返回一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载期间。 此实现总是返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary>返回 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。 此列表报告一些成员，其中的初始化顺序依赖关系相对于此 <see cref="T:System.Xaml.XamlMember" /> 存在。 此实现总是返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary>返回与 <see cref="T:System.Xaml.XamlDirective" /> 关联的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary>返回的值指示是否将此 <see cref="T:System.Xaml.XamlMember" /> 作为环境属性报告。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示一个事件。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示预期的只读属性。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示一个具有公共 get 访问器的属性。</summary>
      <returns>始终返回 true。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示一个用于类型和成员解析的支持系统无法解析的成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlDirective" /> 表示不可解析的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示预期的只写属性。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示一个具有公共 set 访问器的属性。</summary>
      <returns>始终返回 true。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary>返回其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型的 <see cref="T:System.Xaml.XamlType" />。 此实现总是返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary>返回成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary>返回与此 <see cref="T:System.Xaml.XamlDirective" /> 关联的类型转换器实现。</summary>
      <returns>一个具有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例，或者为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary>返回与此 <see cref="T:System.Xaml.XamlDirective" /> 关联的 get 访问器。 此实现总是返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary>返回与此 <see cref="T:System.Xaml.XamlDirective" /> 关联的 CLR 反射 <see cref="T:System.Reflection.MemberInfo" />。 此实现总是返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary>返回与此 <see cref="T:System.Xaml.XamlDirective" /> 关联的 set 访问器。 此实现总是返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary>返回此 <see cref="T:System.Xaml.XamlDirective" /> 的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlDirective" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary>在 XAML 编写器尝试将重复成员的值写入同一对象节点时所引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary>使用要报告的相关成员和类型信息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="member">要报告的 XAML 成员标识符。</param>
      <param name="type">要作为父类型报告的 XAML 类型标识符。</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary>获取或设置要作为重复项报告的属性的 XAML 成员标识符。</summary>
      <returns>要报告的 <see cref="T:System.Xaml.XamlMember" /> 对象（XAML 成员标识符）。</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary>获取或设置要作为父类型报告的 XAML 类型标识符。</summary>
      <returns>要作为父类型报告的 <see cref="T:System.Xaml.XamlType" /> 对象（XAML 类型标识符）。</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary>针对一般 XAML 读取器或 XAML 编写器异常引发的异常。 请参见“备注”。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 包含描述错误的系统提供消息的实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 包含描述错误的指定消息的实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 一个包含指定错误消息、对造成此异常的内部异常的引用的实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 包含指定的错误消息、内部异常和行信息的实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。</param>
      <param name="lineNumber">要向调试或行信息使用者报告的行号。</param>
      <param name="linePosition">要向调试或行信息使用者报告的行位置。</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />，并提供对行信息数据的序列化支持。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary>获取或设置异常所报告的 XAML 文本行信息的行号组成部分。</summary>
      <returns>XAML 文本行信息的行号组成部分。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary>获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。</summary>
      <returns>XAML 文本行信息的行位置组成部分。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary>获取或设置异常消息，如果行信息可用，则在消息中追加行信息。</summary>
      <returns>包含追加的行信息的异常消息。</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary>针对在 XAML 读取和 XAML 写入过程中出现内部不一致所引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary>定义一些提供字符串或对象的常量，这些字符串或对象对于 XAML 标记或使用 XAML 类型进行的编程非常有用。 这些字符串或对象与 XAML 语言概念和/或 .NET Framework XAML 中 XAML 语言概念的实现有关。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary>获取由 .NET Framework XAML 服务定义的每个 <see cref="T:System.Xaml.XamlDirective" /> 标识符的只读泛型集合。</summary>
      <returns>由 .NET Framework XAML 服务定义的每个 <see cref="T:System.Xaml.XamlDirective" /> 标识符的只读泛型集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary>获取单独 <see cref="T:System.Xaml.XamlType" /> 值的只读泛型集合，这些值与 XAML 语言内部值匹配或其别名设置为该内部值，并且是由 .NET Framework XAML 服务定义的。</summary>
      <returns>与 XAML 语言内部值匹配的每个 <see cref="T:System.Xaml.XamlType" /> 的只读泛型集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary>获取工厂方法或泛型用法的 Arguments 的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>工厂方法或泛型用法的 Arguments 的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary>获取 Array XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Array XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary>获取 AsyncRecords 伪成员的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>AsyncRecords 伪成员的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary>获取 XML 中 base 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XML 中 base 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary>获取 Boolean XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Boolean XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary>获取 Byte XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Byte XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary>获取 Char XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Char XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary>获取 XAML 中 Class 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 Class 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary>获取 XAML 中 ClassAttributes 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 ClassAttributes 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary>获取 XAML 中 ClassModifier 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 ClassModifier 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary>获取 Code 的 <see cref="T:System.Xaml.XamlDirective" />（如 [MS-XAML] 中详述）。</summary>
      <returns>Code 的 <see cref="T:System.Xaml.XamlDirective" />（如 [MS-XAML] 中详述）。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary>获取一个 <see cref="T:System.Xaml.XamlDirective" />，它标识用于将事件写入处理程序的连接点。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" />，它标识用于将事件写入处理程序的连接点。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary>获取 Decimal XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Decimal XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary>获取 Double XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Double XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary>获取一个 <see cref="T:System.Xaml.XamlDirective" />，它标识 XAML 的工厂方法。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" />，它标识 XAML 的工厂方法。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary>获取 XAML 中 FieldModifier 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 FieldModifier 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary>获取 XAML 中 Initialization 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 Initialization 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary>获取 Int16 XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Int16 XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary>获取 Int32 XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Int32 XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary>获取 Int64 XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Int64 XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary>获取 XAML 中 Items 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 Items 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary>获取 XAML 中 Key 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 Key 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary>获取 XML 中 lang 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XML 中 lang 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary>获取类型的 <see cref="T:System.Xaml.XamlType" />，该类型是 <see cref="P:System.Xaml.XamlLanguage.Members" /> 的项类型。</summary>
      <returns>类型的 <see cref="T:System.Xaml.XamlType" />，该类型是 <see cref="P:System.Xaml.XamlLanguage.Members" /> 的项类型。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary>获取 XAML 中 Members 概念的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 Members 概念的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary>获取 XAML 中 Name 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 Name 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary>获取 Null 或 NullExtension XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Null 或 NullExtension XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary>获取 Object XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Object XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary>获取 XAML 中 PositionalParameters 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 PositionalParameters 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary>获取 XAML 中 Property 概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>XAML 中 Property 概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary>获取一个 <see cref="T:System.Xaml.XamlType" />，它表示 XAML 的 Reference。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" />，它表示 XAML 的 Reference。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary>获取 XAML 的 Shared 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 的 Shared 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary>获取 Single XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Single XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary>获取 XML 中 space 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XML 中 space 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary>获取 Static/StaticExtension XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Static/StaticExtension XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary>获取 String XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>String XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary>获取 XAML 中 Subclass 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 Subclass 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary>获取一个 <see cref="T:System.Xaml.XamlDirective" />，利用它可以通过异步方式加载 XAML（如果 XAML 处理器支持此类模式）。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" />，利用它可以通过异步方式加载 XAML。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary>获取 XAML 语言中 TimeSpan 概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>TimeSpan XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary>获取 Type/TypeExtension XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Type/TypeExtension XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary>获取 XAML 中 TypeArguments 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 TypeArguments 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary>获取 XAML 中 Uid 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 Uid 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary>获取 XAML 中 UnknownContent 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中 UnknownContent 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary>获取 Uri XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>Uri XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary>获取字符串的字符串值，该字符串标识 XAML (2006) 语言命名空间。 该命名空间对应于 [MS-XAML] Section 5.1.1（[MS-XAML] 第 5.1.1 节）中定义的 XAML (2006)“x”前缀命名空间。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary>获取 XAML 的命名空间标识符的集合。</summary>
      <returns>XAML 的命名空间标识符的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary>获取在 XAML 中为 XData 块提供支持的 XAML 类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>为 XData 块提供支持的 XAML 类型的 <see cref="T:System.Xaml.XamlType" />。 请参见 [MS-XAML] Section 5.2.23（[MS-XAML] 第 5.2.23 节）。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary>获取字符串的字符串值，该字符串标识 XML (1998) 语言命名空间。 该命名空间对应于 [MS-XAML] Section 5.1.2（[MS-XAML] 第 5.1.2 节）中引用的 XML“xml”前缀命名空间。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary>获取 XML 的命名空间标识符的集合。</summary>
      <returns>XML 的命名空间标识符的集合。</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary>为 XAML 类型的成员提供 XAML 类型系统标识符。 该标识符由 XAML 读取器和 XAML 编写器在处理成员节点的过程中使用（如果 XAML 读取器位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上），另外还用于常规 XAML 类型系统逻辑。</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary>使用 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" /> 和 <see cref="T:System.Xaml.XamlSchemaContext" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="eventInfo">用于表示事件成员的 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>使用 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" /> 和 <see cref="T:System.Xaml.XamlSchemaContext" />（包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息）初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="eventInfo">用于表示事件成员的 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
      <param name="invoker">可针对 <see cref="T:System.Xaml.XamlMember" /> 处理运行时反射调用的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 实现。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary>使用 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" /> 和 <see cref="T:System.Xaml.XamlSchemaContext" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="propertyInfo">用于表示属性成员的 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>使用反射 <see cref="T:System.Reflection.PropertyInfo" /> 和 <see cref="T:System.Xaml.XamlSchemaContext" />（包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息）初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="propertyInfo">用于表示属性成员的 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
      <param name="invoker">用于针对 <see cref="T:System.Xaml.XamlMember" /> 处理运行时调用的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 实现。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>针对表示可附加属性的 <see cref="T:System.Xaml.XamlMember" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="attachablePropertyName">可附加属性的字符串名称。</param>
      <param name="getter">可附加成员的支持实现的 get 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter">可附加成员的支持实现的 set 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>针对表示可附加属性的 <see cref="T:System.Xaml.XamlMember" />（包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息）初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="attachablePropertyName">可附加属性的字符串名称。</param>
      <param name="getter">可附加成员的支持实现的 get 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter">可附加成员的支持实现的 set 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
      <param name="invoker">用于针对 <see cref="T:System.Xaml.XamlMember" /> 处理运行时调用的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 实现。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>针对表示可附加事件的 <see cref="T:System.Xaml.XamlMember" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="attachableEventName">可附加事件的字符串名称。</param>
      <param name="adder">可附加成员的支持实现的处理程序 Add 方法的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>针对表示可附加事件的 <see cref="T:System.Xaml.XamlMember" />（包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息）初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="attachableEventName">可附加事件的字符串名称。</param>
      <param name="adder">可附加成员的支持实现的处理程序 Add 方法的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
      <param name="invoker">用于针对 <see cref="T:System.Xaml.XamlMember" /> 处理运行时调用的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 实现。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary>使用字符串名称和声明 <see cref="T:System.Xaml.XamlType" /> 信息初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。 使用此签名构造的 <see cref="T:System.Xaml.XamlMember" /> 具有很大限制；请参见备注。</summary>
      <param name="name">成员的字符串名称。</param>
      <param name="declaringType">声明类型的 <see cref="T:System.Xaml.XamlType" /> 信息。</param>
      <param name="isAttachable">如果要指示成员是可附加的，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="declaringType" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary>获取类型的 <see cref="T:System.Xaml.XamlType" />，该类型声明与此 <see cref="T:System.Xaml.XamlMember" /> 关联的成员。</summary>
      <returns>类型的 <see cref="T:System.Xaml.XamlType" />，该类型声明与此 <see cref="T:System.Xaml.XamlMember" /> 关联的成员。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary>获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</summary>
      <returns>一个对泛型具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary>获取 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。 这些对象报告一些成员，其中的初始化顺序依赖关系相对于此 <see cref="T:System.Xaml.XamlMember" /> 存在。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 对象的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary>指示当前对象是否等于另一个对象。</summary>
      <returns>如果当前对象等于 <paramref name="obj" /> 参数，则为 true；否则为 false。</returns>
      <param name="obj">要与此对象进行比较的对象。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
      <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 true；否则为 false。</returns>
      <param name="other">与此对象进行比较的对象。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary>返回 XAML 命名空间的列表，此 XAML 成员可能存在于这些命名空间中。</summary>
      <returns>字符串形式的 XAML 命名空间标识符的列表。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary>获取与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 实现。</summary>
      <returns>与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 实现。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary>获取一个值，该值指示是否将此 <see cref="T:System.Xaml.XamlMember" /> 报告为一个环境属性。</summary>
      <returns>如果将此 <see cref="T:System.Xaml.XamlMember" /> 报告为环境属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否为可附加成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 是可附加成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否为 XAML 指令。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 是 XAML 指令，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示事件，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary>获取一个值，该值指示是否使用有效的 xamlName 字符串作为其 <see cref="P:System.Xaml.XamlMember.Name" /> 来初始化此 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>如果使用有效的 xamlName 字符串来初始化此 <see cref="T:System.Xaml.XamlMember" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示只读成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只读成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有可调用公共 get 访问器的成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可调用公共 get 访问器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary>获取一个值，该值指示用于类型和成员解析的支持系统是否无法解析成员。</summary>
      <returns>如果成员不可解析，则为 true；如果成员可解析，则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示只写成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只写成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有可调用公共 set 访问器的成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可调用公共 set 访问器，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary>在派生类中实现时，返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary>返回一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</summary>
      <returns>对泛型具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary>返回 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。 此列表中的项报告一些成员，其中的初始化顺序依赖关系相对于此 <see cref="T:System.Xaml.XamlMember" /> 存在。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 对象的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary>返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息；或者为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary>返回的值指示是否将此 <see cref="T:System.Xaml.XamlMember" /> 作为环境属性报告。</summary>
      <returns>如果要将此 <see cref="T:System.Xaml.XamlMember" /> 报告为环境属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个事件。</summary>
      <returns>如果要报告此 <see cref="T:System.Xaml.XamlMember" /> 表示事件，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示预期的只读属性。</summary>
      <returns>如果要将此 <see cref="T:System.Xaml.XamlMember" /> 报告为预期的只读属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 get 访问器的属性。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示具有公共 get 访问器的属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个用于类型和成员解析的支持系统无法解析的成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示不可解析的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 set 访问器但没有公共 get 访问器的成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只写成员，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary>返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 set 访问器的成员。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可写成员，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary>返回其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型。 请参见“备注”。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary>返回成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。 请参见“备注”。</summary>
      <returns>成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。 请参见“备注”。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary>返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的类型转换器实现。</summary>
      <returns>一个具有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例，或者为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary>返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 get 访问器。</summary>
      <returns>关联 get 访问器的 <see cref="T:System.Reflection.MethodInfo" />，或者为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary>返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" />。</summary>
      <returns>与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" /> 对象，或者为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary>返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 set 访问器。</summary>
      <returns>关联 set 访问器的 <see cref="T:System.Reflection.MethodInfo" />，或者为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary>返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的值序列化程序实现。</summary>
      <returns>一个具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例，或者为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary>获取 xamlName 名称字符串，该字符串声明此 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>xamlName 名称字符串，该字符串声明此 <see cref="T:System.Xaml.XamlMember" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.XamlMember" /> 对象是否具有相同的值。</summary>
      <returns>如果 <paramref name="xamlMember1" /> 的值与 <paramref name="xamlMember2" /> 的值相同，则为 true；否则为 false。</returns>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> 或 null。</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> 或 null。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.XamlMember" /> 对象是否具有不同的值。</summary>
      <returns>如果 <paramref name="xamlMember1" /> 的值与 <paramref name="xamlMember2" /> 的值不同，则为 true；否则为 false。</returns>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> 或 null。</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> 或 null。</param>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary>获取单个 XAML 命名空间 URI，该 URI 标识此 <see cref="T:System.Xaml.XamlMember" /> 的主 XAML 命名空间。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlMember" /> 的主 XAML 命名空间的标识符（字符串形式）。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary>获取一个 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值，该值指示可视化设计器应如何处理成员。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举的一个值。 默认值为 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary>获取其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型。 请参见“备注”。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary>返回此 <see cref="T:System.Xaml.XamlMember" /> 的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlMember" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary>获取成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。 请参见“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary>获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象可用于 XAML 声明的对象的类型转换构造。</summary>
      <returns>一个对泛型具有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 值。 请参见“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary>获取 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" />，它可用于由 <see cref="T:System.Reflection.PropertyInfo" />、<see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.EventInfo" /> 构造的成员。</summary>
      <returns>从初始构造函数参数强制转换的 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" /> 信息。 使用 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> 签名构造的 <see cref="T:System.Xaml.XamlMember" /> 返回 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary>获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的值序列化。</summary>
      <returns>一个对泛型具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary>为诸如采用延迟方式编写 XAML 节点等方案提供 XAML 节点的列表。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>使用提供的架构上下文初始化 <see cref="T:System.Xaml.XamlNodeList" /> 类的新实例。</summary>
      <param name="schemaContext">要用于节点操作的架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary>使用提供的架构上下文和列表大小初始化 <see cref="T:System.Xaml.XamlNodeList" /> 类的新实例。</summary>
      <param name="schemaContext">要用于节点操作的架构上下文。</param>
      <param name="size">列表的预期项计数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary>清除此列表中的项。</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary>获取此 <see cref="T:System.Xaml.XamlNodeList" /> 中的节点数。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlNodeList" /> 中的节点数。</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary>返回 XAML 读取器实现委托。</summary>
      <returns>XAML 读取器实现委托。</returns>
      <exception cref="T:System.Xaml.XamlException">
        <see cref="T:System.Xaml.XamlNodeList" /> 仍处于写入模式。 - 或 - 用于节点列表的编写器没有架构上下文。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary>获取关联的 XAML 编写器。</summary>
      <returns>关联的 XAML 编写器。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary>提供用于写入节点和再次读取节点的缓冲区。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>使用提供的 XAML 架构上下文初始化 <see cref="T:System.Xaml.XamlNodeQueue" /> 类的新实例。</summary>
      <param name="schemaContext">要用于节点操作的架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlSchemaContext" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary>获取 <see cref="T:System.Xaml.XamlNodeQueue" /> 中的节点数。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeQueue" /> 中的节点数。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary>获取一个值，该值确定此 <see cref="T:System.Xaml.XamlNodeQueue" /> 是否不包含节点。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlNodeQueue" /> 不包含节点，则为 true；如果此 <see cref="T:System.Xaml.XamlNodeQueue" /> 包含节点，则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary>获取 XAML 读取器实现委托。</summary>
      <returns>XAML 读取器实现委托。</returns>
      <exception cref="T:System.Xaml.XamlException">用于节点列表的 XAML 编写器没有有效的 XAML 架构上下文。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary>获取关联的 XAML 编写器。</summary>
      <returns>关联的 XAML 编写器。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary>描述 XAML 读取器当前正在处理的节点的类型。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary>读取器位于成员节点的末尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary>读取器位于对象节点的末尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary>读取器位于对象节点内并正在写入默认值或隐式值，而不是作为指定的对象值。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary>读取器位于 XML 命名空间声明内。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary>读取器不在真正的节点上（例如，读取器可能位于文件结尾）。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary>读取器位于成员节点的开头。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary>读取器位于对象节点的开头。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary>读取器位于节点内并正在处理值。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary>为对象初始化和属性设置提供可插入序列中的回调数据。 这会影响由 <see cref="T:System.Xaml.XamlObjectWriter" /> 生成的对象关系图。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 类的新实例。</summary>
      <param name="instance">与事件数据相关的对象实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary>获取与事件数据相关的对象实例。</summary>
      <returns>与事件数据相关的对象实例。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary>提供一个 <see cref="T:System.Xaml.XamlReader" /> 实现，该实现读取对象图并生成 XAML 节点流。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance">要读取的对象树/对象图的根。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary>使用指定的读取器设置初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance">要读取的对象树的根。</param>
      <param name="settings">一个设置对象。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary>使用指定的架构上下文初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance">要读取的对象树的根。</param>
      <param name="schemaContext">要使用的读取器的架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary>使用指定的架构上下文和读取器设置初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance">要读取的对象树的根。</param>
      <param name="schemaContext">要使用的读取器的架构上下文。</param>
      <param name="settings">一个设置对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary>获取在当前读取器位置可用的对象实例。</summary>
      <returns>位于当前读取器位置的对象实例；如果读取器位置不在对象上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary>获取一个值，该值报告读取器位置是否位于文件结尾。</summary>
      <returns>如果读取器位置位于文件结尾，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary>如果读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置的当前 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>当前成员；如果读取器位置不在成员上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary>从当前读取器位置中获取 XAML 命名空间声明。</summary>
      <returns>如果读取器位于 <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" /> 上，则为 XAML 命名空间声明；否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>当前节点的类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary>提供源对象图中的下一个 XAML 节点（如果节点可用）。</summary>
      <returns>如果某节点可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary>获取一个对象，该对象提供信息集的架构信息。</summary>
      <returns>一个对象，该对象提供信息集的架构信息。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary>获取位于当前读取器位置的对象的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>位于当前读取器位置的对象的 <see cref="T:System.Xaml.XamlType" />；如果位置不在对象上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary>获取位于当前读取器位置的节点的值。</summary>
      <returns>当前节点的值；如果读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 null。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary>由若干 <see cref="T:System.Xaml.XamlObjectReader" /> 内部帮助器 API 引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary>为 <see cref="T:System.Xaml.XamlObjectReader" /> 指定处理规则或选项设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary>获取或设置一个值，该值确定为上下文使用关联 <see cref="T:System.Xaml.XamlObjectReader" /> 的编写器是否应使用设计器设置来显式写入内容。</summary>
      <returns>如果要指定使用此上下文的编写器在 <see cref="P:System.Xaml.XamlMember.IsWritePublic" /> 报告false 的情况下应使用设计器设置来写入任何输出，则为 true；如果应忽略设计器设置，则为 false。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary>从源 XAML 节点流创建对象图。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>使用 <see cref="T:System.Xaml.XamlReader" /> 所用的 XAML 架构上下文初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 类的新实例。</summary>
      <param name="schemaContext">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary>使用 <see cref="T:System.Xaml.XamlReader" /> 所用的上下文及其设置初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 类的新实例。</summary>
      <param name="schemaContext">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</param>
      <param name="settings">一个设置对象，该对象为 <see cref="T:System.Xaml.XamlObjectWriter" /> 行为和输出指定某些选项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary>重置所有可能的框架并清除对象图。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Xaml.XamlObjectWriter" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源；否则为 false。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary>为此 <see cref="T:System.Xaml.XamlObjectWriter" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 方法。</summary>
      <param name="value">要报告的对象。 在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary>为此 <see cref="T:System.Xaml.XamlObjectWriter" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 方法。</summary>
      <param name="value">要报告的对象。 在调用处理程序时，此值封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary>为此 <see cref="T:System.Xaml.XamlObjectWriter" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 引用的方法。</summary>
      <param name="value">要报告的对象。 在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary>为此 <see cref="T:System.Xaml.XamlObjectWriter" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 引用的方法。</summary>
      <param name="value">要在调用处理程序时通过 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 传递的值。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary>为此编写器调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 引用的方法（只要 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件数据中的 <paramref name="handled" /> 不为 true）。</summary>
      <returns>由任何关联的处理程序设置的布尔值；否则为 false。 请参见“备注”。</returns>
      <param name="eventSender">要作为源向处理程序报告的对象。</param>
      <param name="member">要设置的属性的名称，该名称将作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递到处理程序。</param>
      <param name="value">要为由 <paramref name="property" /> 命名的属性提供的值。 此值作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递给处理程序。</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary>获取写入的最后一个对象。 通常，仅在节点流位于结尾且对象关系图完整时才调用。</summary>
      <returns>写入的最后一个对象，或者为 null。 请参见“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary>获取 <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为 XAML 对象编写器的绝对根节点维护 XAML 名称范围。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为对象编写器的当前根维护 XAML 名称范围。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary>获取活动 XAML 架构上下文。</summary>
      <returns>XAML 架构上下文。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary>实现 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />，并为异常提供行信息。</summary>
      <param name="lineNumber">读取器中的行号。</param>
      <param name="linePosition">读取器中的行位置。</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary>获取一个值，该值报告行信息服务是否应提供值并因此在相关时同时调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法。</summary>
      <returns>如果行信息由编写器使用，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary>关闭当前成员范围，并且可能在关闭时写入成员范围的值。 新范围将成为成员的父对象范围。</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException">未能从在此调用和上一个 StartMember 之间遇到的值节点创建成员值。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary>关闭编写器中的当前对象范围。 新对象范围将成为的父成员范围。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary>当指定对象是父属性的默认值或隐式值时，将概念 StartObject 写入对象关系图。 隐式值来自从 XAML 架构上下文中获取的信息以及后备类型信息，而不是指定为输入 XAML 节点集中的对象值。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>定义一个命名空间声明，该声明适用于下一个对象范围或成员范围。</summary>
      <param name="namespaceDeclaration">要写入的命名空间声明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> 的组件为 null。</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException">尝试在无效的范围中写入 XAML 命名空间节点。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>将新成员节点写入当前对象范围，并且该范围将成为新的成员范围。</summary>
      <param name="property">要写入的 XAML 属性。 通常，您通过中间 XAML 节点流从 XAML 读取器中获取此值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <paramref name="property" /> 将 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 设置为 true。 - 或 - <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> 传递，指示 XAML 节点流为不支持内容的对象包含内容。 - 或 - 尝试在无效的范围中写入开始成员。</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException">
        <paramref name="property" /> 指定父对象作用域中已显式设置的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>将对象节点写入当前范围，并将该范围设置为新对象范围。</summary>
      <param name="xamlType">要写入的类型。 通常，您从 XAML 读取器中获取此值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">处理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 类型，且无法创建对象。 - 或 - 尝试在无效的范围中写入开始对象。</exception>
      <exception cref="T:System.Xaml.XamlParseException">尝试在根对象已经在设置中提供时写入根对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary>将值写入当前成员范围。 如果当前范围位于集合、字典或数组对象内部，则应将该值添加到集合、字典或数组中。</summary>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">尝试在无效的范围中写入值。</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary>当 XAML 编写器（例如 <see cref="T:System.Xaml.XamlObjectWriter" /> 类）在尝试从 XAML 节点流生成对象图的同时遇到错误时所引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary>为 <see cref="T:System.Xaml.XamlObjectWriter" /> 提供特定 XAML 编写器设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 类的新实例，该类基于现有实例的副本。</summary>
      <param name="settings">要复制的设置实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary>获取或设置 XAML 编写器遵循的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 权限。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 权限。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary>获取或设置对回调的引用，该回调由 XAML 编写器在每个所创建对象的对象生存期的 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 阶段调用。</summary>
      <returns>由 XAML 编写器在对象生存期的 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary>获取或设置对回调的引用，该回调由 XAML 编写器在每个所创建对象的对象生存期的 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 阶段调用。</summary>
      <returns>由 XAML 编写器在对象生存期的 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary>获取或设置对回调的引用，该回调由 XAML 编写器在每个所创建对象的对象生存期的成员写入后阶段调用。</summary>
      <returns>由 XAML 编写器在对象生存期的成员写入后阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary>获取或设置对回调的引用，该回调由 XAML 编写器在每个所创建对象的对象生存期的成员写入前阶段调用。</summary>
      <returns>由 XAML 编写器在对象生存期的成员写入前阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary>如果 <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> 为 true，从 XAML 编写器中获取或设置要用于注册名称的 XAML 名称范围。</summary>
      <returns>要用于注册名称的 XAML 名称范围。 默认值为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary>获取或设置一个值，该值指定 XAML 编写器是否应在类型转换器情形中忽略（不调用）<see cref="T:System.ComponentModel.TypeConverter" /> 上的 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 实现。</summary>
      <returns>如果 XAML 编写器忽略 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 实现，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary>获取或设置一个值，此值确定是否在写入对象图表示形式之前，禁用对 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <paramref name="K" /> 组件运行类型转换这一默认 <see cref="T:System.Xaml.XamlObjectWriter" /> 功能。</summary>
      <returns>如果应禁用 <see cref="T:System.Collections.Generic.Dictionary`2" /> 对象的 <paramref name="K" /> 类型转换，则为 true。 如果适合对 <see cref="T:System.Collections.Generic.Dictionary`2" /> 对象执行 <paramref name="K" /> 类型转换，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary>获取或设置一个值，该值确定是否应针对指定的 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 进行名称注册。</summary>
      <returns>如果应针对 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 进行名称注册，则为 true；如果应在父 XAML 命名范围内进行名称注册，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary>为 <see cref="T:System.Xaml.XamlObjectWriter" /> 操作获取或设置预先存在的根对象。</summary>
      <returns>用于 <see cref="T:System.Xaml.XamlObjectWriter" /> 操作的预先存在的根对象。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary>获取或设置一个值，该值确定 XAML 编写器是否省略检查可查看重复属性存在与否的代码路径。</summary>
      <returns>如果应省略重复属性检查，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Xaml.XamlObjectWriter" /> 是否应省略对标记扩展调用 ProvideValue 的过程，当标记扩展表示对象图的根时，此过程有相关意义。</summary>
      <returns>如果 <see cref="T:System.Xaml.XamlObjectWriter" /> 应省略对标记扩展调用 ProvideValue 的过程，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary>获取或设置要在对象编写器为依赖项属性调入 CLR 实现的 SetValue 时使用的处理程序。</summary>
      <returns>一个处理此情况的处理程序实现。</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary>在 XAML 读取器无法将 XAML 读取器源的元素处理为 XAML 节点流时引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary>为使用 XAML 输入并生成 XAML 节点流的类提供基定义。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlReader" /> 类。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary>关闭 XAML 节点流。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Xaml.XamlReader" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源；否则为 false。</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary>获取的值指示是否已调用了 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />。</summary>
      <returns>如果已调用 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary>在派生类中实现时，获取一个值，该值报告读取器位置是否位于文件结尾。</summary>
      <returns>如果位置在 XAML 节点流的概念上的文件末尾，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary>在派生类中实现时，如果读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</summary>
      <returns>当前成员；如果读取器位置不在成员上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary>在派生类中实现时，从当前节点中获取 XAML 命名空间信息。</summary>
      <returns>如果可用，则为当前节点中的 XAML 命名空间信息；否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary>在派生类中实现时，获取当前节点的类型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary>在派生类中实现时，提供源中的下一个 XAML 节点（如果节点可用）。</summary>
      <returns>如果某节点可用，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary>返回基于当前 <see cref="T:System.Xaml.XamlReader" /> 的 <see cref="T:System.Xaml.XamlReader" />，其中返回的 <see cref="T:System.Xaml.XamlReader" /> 用于循环访问 XAML 节点结构。</summary>
      <returns>子树的新 XAML 读取器实例。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary>在派生类中实现时，获取一个对象，该对象提供信息集的 XAML 架构上下文信息。</summary>
      <returns>一个对象，该对象提供信息集的 XAML 架构上下文信息。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary>跳过当前节点并将读取器位置推进到下一个节点。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.Xaml.XamlReader" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary>在派生类中实现时，获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>当前节点的 <see cref="T:System.Xaml.XamlType" />；如果当前读取器位置不在对象上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary>在派生类中实现时，获取当前节点的值。</summary>
      <returns>当前节点的值；如果当前读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 null。</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary>为 <see cref="T:System.Xaml.XamlReader" /> 实现指定处理规则或选项设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary>基于另一个 <see cref="T:System.Xaml.XamlReaderSettings" /> 对象中的值初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 类的新实例。</summary>
      <param name="settings">一个现有的 <see cref="T:System.Xaml.XamlReaderSettings" /> 对象。</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary>获取或设置一个值，该值指示根对象在报告 XAML 类型表示形式时是否可包括具有受保护代码访问模型的成员。</summary>
      <returns>如果根对象可包括具有受保护代码访问模型的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary>获取或设置用于解析相对路径的基 URI。</summary>
      <returns>要使用的基 URI。 默认值为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary>获取或设置一个值，该值指定 XAML 读取器是否应忽略存在于属性元素上的 x:Uid 特性的值。</summary>
      <returns>如果读取器应忽略属性元素 x:Uid 特性的值，则为 true。 如果读取器应处理属性元素的 x:Uid 特性，则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary>获取或设置表示要处理的当前本地程序集的对象。 此程序集信息用于调用帮助器 API，例如 <see cref="M:System.Xaml.XamlType.GetAllMembers" />。</summary>
      <returns>CLR 反射 <see cref="T:System.Reflection.Assembly" /> 对象。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary>获取或设置一个值，该值指定读取器是否可提供行号和位置。</summary>
      <returns>如果读取器可提供行号和位置信息，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary>获取或设置一个值，该值指定读取器是否强制将所有 Value 节点处理为 String 类型。</summary>
      <returns>如果读取器强制在 Value 节点中仅含 String，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary>定义一个可重用上下文，用于解释或映射 XAML 类型以及为这些类型提供支持的程序集中的类型。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>基于一组引用程序集初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
      <param name="referenceAssemblies">一组可枚举的程序集信息项。 每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary>基于一组引用程序集和一个设置对象初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
      <param name="referenceAssemblies">一组可枚举的程序集信息。 每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</param>
      <param name="settings">用于构造 <see cref="T:System.Xaml.XamlSchemaContext" /> 的设置对象。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>基于一个设置对象初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
      <param name="settings">用于构造 <see cref="T:System.Xaml.XamlSchemaContext" /> 的设置对象。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary>提供一个非标准 Finalize 实现，该实现不调用 Dispose。</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>获取一个值，该值指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。</summary>
      <returns>如果 XAML 架构及其上下文在查找 API 返回的值中使用完全限定的程序集名称，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary>搜索由此 <see cref="T:System.Xaml.XamlSchemaContext" /> 持有的程序集，并返回一组命名空间。</summary>
      <returns>命名空间标识符的可枚举集合。 这些标识符以字符串形式提供。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary>搜索由此 <see cref="T:System.Xaml.XamlSchemaContext" /> 持有的程序集，并从指定的 XAML 命名空间中返回一组类型。</summary>
      <returns>XAML 类型的可枚举集合。 集合中的每个 XAML 类型都由一个 <see cref="T:System.Xaml.XamlType" /> 对象表示。</returns>
      <param name="xamlNamespace">要为其返回类型的 XAML 命名空间。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary>获取一个报告为首选前缀的字符串，供使用者在映射指定的 XAML 命名空间时使用。</summary>
      <returns>一个字符串，使用者在为标记使用映射指定的 XAML 命名空间时应使用该字符串。</returns>
      <param name="xmlns">要为其获取首选前缀的 XAML 命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlns" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary>返回一个值转换器，该转换器可将值转换为请求的 <paramref name="targetType" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有与施加于方法调用的约束相匹配的约束。</returns>
      <param name="converterType">转换器实现。</param>
      <param name="targetType">转换器需要的目标类型。</param>
      <typeparam name="TConverterBase">特定转换器基类。</typeparam>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary>返回一个 <see cref="T:System.Xaml.XamlDirective" /> 值，该值表示用于 XAML 语言或用于特定实现的指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 对象，表示请求的指令。</returns>
      <param name="xamlNamespace">其中包含命名指令的 XAML 命名空间。</param>
      <param name="name">要获取的指令的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> 或 <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary>基于 XAML 命名空间以及类型名称的字符串返回一个 <see cref="T:System.Xaml.XamlType" />。 此签名可以针对所需类型是泛型类型的情况指定类型参数。</summary>
      <returns>与输入条件匹配的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <param name="xamlNamespace">包含所需类型的 XAML 命名空间。</param>
      <param name="name">所需类型的字符串名称。</param>
      <param name="typeArguments">用于泛型类型的初始化类型参数。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary>返回基于 CLR 类型标识符的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>与输入 <paramref name="type" /> 匹配的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <param name="type">要为其获取 <see cref="T:System.Xaml.XamlType" /> 的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary>返回基于 XAML 系统类型名称的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>与输入 <paramref name="xamlTypeName" /> 匹配的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <param name="xamlTypeName">要为其获取 <see cref="T:System.Xaml.XamlType" /> 的 XAML 类型名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="xamlTypeName" /> 的组件（<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 或 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />）为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlTypeName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary>在操作使用此架构上下文来解析程序集时调用，必须提供该程序集才能解析它包含的 XAML 命名空间。</summary>
      <returns>解析的程序集。</returns>
      <param name="assemblyName">要加载的程序集的名称。 请参见“备注”。</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary>获取 XAML 架构上下文的引用程序集的可枚举集合。</summary>
      <returns>架构上下文的引用程序集的可枚举集合。 每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary>获取一个值，该值指定 XAML 架构及其上下文是否支持存在 arity（输入参数的数量）相同的两个构造函数的标记扩展。</summary>
      <returns>如果架构上下文允许 arity 重复的标记扩展，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary>返回兼容 XAML 命名空间的请求的成功或失败状态。 成功的请求会将该 XAML 命名空间报告为输出参数。</summary>
      <returns>如果 <paramref name="compatibleNamespace" /> 包含可用的结果，则为 true；否则为 false。</returns>
      <param name="xamlNamespace">要检查是否存在兼容结果的 XAML 命名空间的 xmlns 字符串。</param>
      <param name="compatibleNamespace">当此方法返回时，为兼容的 XAML 命名空间请求的 xmlns 字符串。 如果方法返回 false，则这可能与 <paramref name="xamlNamespace" /> 相同。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> 为 null。</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary>为 <see cref="T:System.Xaml.XamlSchemaContext" /> 提供可选设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>通过复制现有 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 实例的值来初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 类的新实例。</summary>
      <param name="settings">现有 <see cref="T:System.Xaml.XamlSchemaContextSettings" />。</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>获取或设置一个值，该值指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。</summary>
      <returns>如果 XAML 架构及其上下文在查找 API 返回的值中使用完全限定的程序集名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary>获取或设置一个值，该值指定 XAML 架构上下文是否允许存在 arity（输入参数的数量）相同的两个构造函数的标记扩展。</summary>
      <returns>如果架构上下文允许 arity 重复的标记扩展，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary>在绑定系统或 XAML 的其他架构表示形式系统报告架构上下文出现异常时所引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary>提供适用于常见 XAML 任务（读取 XAML 和写入对象图，或者读取对象图并为序列化目的而写入 XAML 文件输出）的更高级别服务（静态方法）。</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary>加载 XAML 读取器的 <see cref="T:System.IO.Stream" /> 源，并将其输出写为对象关系图。</summary>
      <returns>写为输出的对象关系图。</returns>
      <param name="stream">要作为输入加载的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary>从 <see cref="T:System.IO.TextReader" /> 创建 XAML 读取器，并返回对象关系图。</summary>
      <returns>返回的对象图。</returns>
      <param name="textReader">要用作所创建 <see cref="T:System.Xml.XmlReader" /> 的基础的 <see cref="T:System.IO.TextReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary>加载 XAML 读取器的 <see cref="T:System.IO.Stream" /> 源，并返回对象关系图。</summary>
      <returns>返回的对象图。</returns>
      <param name="fileName">要加载并用作源的文件名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 输入为 null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary>加载特定 XAML 读取器实现，并返回对象图。</summary>
      <returns>返回的对象图。</returns>
      <param name="xamlReader">要用作此 Load 操作的读取器的 XAML 读取器实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 输入为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary>加载特定 XML 读取器实现，并返回对象图。</summary>
      <returns>输出对象关系图。</returns>
      <param name="xmlReader">要用作此 Load 操作的读取器的 <see cref="T:System.Xml.XmlReader" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 输入为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary>以字符串输出形式读取 XAML，并返回对象图。</summary>
      <returns>返回的对象图。</returns>
      <param name="xaml">要分析的 XAML 字符串输入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xaml" /> 输入为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary>将提供的对象图处理为 XAML 节点表示形式，然后再处理为输出流以便进行序列化。</summary>
      <param name="stream">目标流。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 输入为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary>将提供的对象图处理为 XAML 节点表示形式，然后处理为将进入所提供 <see cref="T:System.IO.TextWriter" /> 的输出。</summary>
      <param name="writer">写入输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 输入为 null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary>将提供的对象树处理为 XAML 节点表示形式，并返回输出 XAML 的字符串表示形式。</summary>
      <returns>字符串形式的 XAML 标记输出。</returns>
      <param name="instance">要处理的对象关系图的根。</param>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary>将提供的对象图处理为 XAML 节点表示形式，然后将其写入所提供位置的输出文件。</summary>
      <param name="fileName">要将输出写入其中的文件的名称和位置。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 是空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary>将提供的对象图处理为 XAML 节点表示形式，然后将其写入提供的 XAML 编写器。</summary>
      <param name="writer">要使用的 <see cref="T:System.Xaml.XamlWriter" /> 实现。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 输入为 null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary>将提供的对象图处理为 XAML 节点表示形式，然后将其写入提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要使用的 <see cref="T:System.Xml.XmlWriter" /> 实现。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 输入为 null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary>连接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以立即使用公共 XAML 节点集。 可能会转换内容，具体情况视所提供的读取器和编写器的类型而定。</summary>
      <param name="xamlReader">要使用的 <see cref="T:System.Xaml.XamlReader" /> 实现。</param>
      <param name="xamlWriter">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 输入为 null。</exception>
      <exception cref="T:System.Xaml.XamlException">XAML 架构上下文在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之间不匹配。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary>连接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以立即使用公共 XAML 节点集。 可能会转换内容，具体情况视所提供的读取器和编写器的类型而定。 提供一个参数，指定是否在调用完成之后关闭编写器。</summary>
      <param name="xamlReader">要使用的 <see cref="T:System.Xaml.XamlReader" /> 实现。</param>
      <param name="xamlWriter">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <param name="closeWriter">设置为 true 以在调用完成之后关闭编写器；设置为 false 以使编写器在最后一个写入的位置保持活动状态。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 输入为 null。</exception>
      <exception cref="T:System.Xaml.XamlException">XAML 架构上下文在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之间不匹配。</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary>报告作为整体 XAML 系统（在 .NET Framework XAML 服务中实现）的一部分的 XAML 类型相关信息。</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>基于类型的字符串名称初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
      <param name="typeName">要创建的类型的名称。</param>
      <param name="typeArguments">用于表示泛型类型的 <see cref="T:System.Xaml.XamlType" /> 的类型参数。 可能为（并且通常为） null，指示表示的类型不是泛型类型。</param>
      <param name="schemaContext">XAML 读取器和 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个 <paramref name="typeName" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>基于 XAML 命名空间和类型的字符串名称初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。 此构造函数专用于已知在支持类型系统和 XAML 架构上下文中，没有支持的类型用法的分析和 XAML 节点记录。</summary>
      <param name="unknownTypeNamespace">类型的 XAML 命名空间（字符串形式）。</param>
      <param name="unknownTypeName">提供的 <paramref name="unknownTypeNamespace" /> XAML 命名空间中类型的名称。</param>
      <param name="typeArguments">用于表示泛型类型的 <see cref="T:System.Xaml.XamlType" /> 的类型参数。 可能为（并且通常为） null，指示表示的类型不是泛型类型。</param>
      <param name="schemaContext">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个 <paramref name="unknownTypeNamespace" />、<paramref name="unknownTypeName" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary>基于基础 CLR 类型信息初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
      <param name="underlyingType">要构造的 XAML 类型的基础 CLR <see cref="T:System.Type" />。</param>
      <param name="schemaContext">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary>基于基础类型信息和 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 实现初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
      <param name="underlyingType">要构造的 XAML 类型的基础类型。</param>
      <param name="schemaContext">XAML 读取器的 XAML 架构上下文。</param>
      <param name="invoker">可针对 <see cref="T:System.Xaml.XamlType" /> 处理运行时反射调用的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary>获取类型的只读集合，这些类型可用作此 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 值。</summary>
      <returns>可能的内容类型的只读集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary>获取此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。 将基于此 <see cref="T:System.Xaml.XamlType" /> 的基础类型和架构上下文来确定此值。</summary>
      <returns>此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 的实例在其可分配类型的列表中是否有指定的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>如果 <paramref name="xamlType" /> 在可分配的类型列表中，则为 true；否则为 false。</returns>
      <param name="xamlType">要针对当前的 <see cref="T:System.Xaml.XamlType" /> 检查的类型。</param>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否必须具有参数（通过 x:TypeArguments 实现的泛型约束、初始化文本或其他 XAML 技术）才能构造有效的类型实例。</summary>
      <returns>如果需要某个参数值才能构造实例，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary>获取此 <see cref="T:System.Xaml.XamlType" /> 的内容属性的 <see cref="T:System.Xaml.XamlMember" /> 信息。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlType" /> 的内容属性的 <see cref="T:System.Xaml.XamlMember" /> 信息。 如果不存在内容属性，则可能为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary>获取用于在内容属性不是严格类型匹配时包装其内容的类型，例如强类型 Collection&lt;T&gt; 中的字符串。</summary>
      <returns>可能的内容包装类型的只读集合；否则为 null。 请参见“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，它表示此类型的延迟加载转换行为。</summary>
      <returns>具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，表示此类型的延迟加载行为。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary>指示当前对象是否等于另一个对象。</summary>
      <returns>如果当前对象等于 <paramref name="obj" /> 参数，则为 true；否则为 false。</returns>
      <param name="obj">要与此对象进行比较的对象。</param>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
      <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 true；否则为 false。</returns>
      <param name="other">与此对象进行比较的对象。</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary>返回由此 <see cref="T:System.Xaml.XamlType" /> 将其别名设置为 XAML 指令的 XAML 成员。</summary>
      <returns>如果可找到，则为别名成员，否则为 null。</returns>
      <param name="directive">要为其查找别名成员的指令。</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary>返回一个集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有可附加的属性。</summary>
      <returns>一个包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary>返回一个集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有成员。</summary>
      <returns>一个包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary>返回一个 <see cref="T:System.Xaml.XamlType" />，表示此 <see cref="T:System.Xaml.XamlMember" /> 的特定命名可附加成员。</summary>
      <returns>所请求的可附加成员的 <see cref="T:System.Xaml.XamlMember" /> 对象；如果不存在该名称的可附加成员，则为 null。</returns>
      <param name="name">要获取的可附加成员的名称（格式为 ownerTypeName.MemberName）。</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary>从此 <see cref="T:System.Xaml.XamlType" /> 中返回特定命名成员的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>如果已找到此类成员，则为成员的 <see cref="T:System.Xaml.XamlMember" /> 信息；否则为 null。</returns>
      <param name="name">要获取的成员的名称（字符串形式）。</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary>对于标记扩展类型，返回此 <see cref="T:System.Xaml.XamlType" /> 的特定标记扩展用法中所支持位置参数的类型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 值的列表，其中每个 <see cref="T:System.Xaml.XamlType" /> 都是该位置在语法中的类型。 您必须按照为标记扩展提供标记输入时的相同顺序指定类型。</returns>
      <param name="parameterCount">您需要其相关信息的特定语法或构造函数模式的计数 (arity)。</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary>为包括了类型的 XAML 命名空间返回字符串标识符的列表。</summary>
      <returns>字符串值的列表，其中的每个字符串都是 XAML 命名空间的 URI 标识符。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary>获取与此 <see cref="T:System.Xaml.XamlType" /> 关联的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 实现。</summary>
      <returns>与此 <see cref="T:System.Xaml.XamlType" /> 关联的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 实现。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示环境类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示数组。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示数组，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示集合。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示集合，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可构造类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示可构造类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示字典。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示字典，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示泛型类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示泛型类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示标记扩展。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XAML 名称范围。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary>获取一个值，该值指示是否使用有效的 xamlName 字符串作为其 <see cref="P:System.Xaml.XamlType.Name" /> 来初始化此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>如果使用有效的 xamlName 字符串来初始化此 <see cref="T:System.Xaml.XamlType" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可以为 null 的类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示可以为 null 的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示相关类型系统中的公共类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示公共类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示无法在基础类型系统中解析的类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示不可解析的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary>获取一个值，该值指示在 XAML 初始化过程中是否自上而下生成此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>如果在 XAML 初始化过程中自上而下生成此 <see cref="T:System.Xaml.XamlType" />，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XML 定义是否表示空白有意义集合。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白有意义集合，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XML XDATA。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XDATA，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary>获取一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的 Items 属性提供类型信息。</summary>
      <returns>集合中项的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary>如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，则获取一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的键属性提供类型信息。</summary>
      <returns>字典用法键的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示字典，则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary>返回由此 <see cref="T:System.Xaml.XamlType" /> 将其别名设置为 XAML 指令的 XAML 成员。</summary>
      <returns>如果可找到，则为别名成员，否则为 null。</returns>
      <param name="directive">要为其查找别名成员的指令。</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary>返回一个可枚举集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有可附加的属性。</summary>
      <returns>包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的可枚举集合；否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary>返回一个可枚举集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有成员。</summary>
      <returns>包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的可枚举集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary>返回类型的列表，这些类型可用作此 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 值。</summary>
      <returns>可能的内容类型的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary>从此 <see cref="T:System.Xaml.XamlType" /> 中返回特定命名可附加成员的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>所请求的可附加成员的 <see cref="T:System.Xaml.XamlMember" /> 对象；如果不存在该名称的可附加成员，则为 null。</returns>
      <param name="name">要获取的可附加成员的名称（格式为 ownerTypeName.MemberName）。</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary>返回此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。 将基于此 <see cref="T:System.Xaml.XamlType" /> 的基础类型和架构上下文来确定此值。</summary>
      <returns>此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 枚举的一个值，该枚举声明此 <see cref="T:System.Xaml.XamlType" /> 使用哪种特定集合类型。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否必须具有参数（通过 x:TypeArguments 实现的泛型约束、初始化文本或其他 XAML 技术）才能构造有效的类型实例。</summary>
      <returns>如果需要某个参数值才能构造实例，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary>返回此 <see cref="T:System.Xaml.XamlType" /> 的内容属性的 <see cref="T:System.Xaml.XamlMember" /> 信息。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlType" /> 的内容属性的 <see cref="T:System.Xaml.XamlMember" /> 信息。 可以为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 值的列表，这些值表示此 <see cref="T:System.Xaml.XamlType" /> 的内容包装。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 值的列表，这些值表示此 <see cref="T:System.Xaml.XamlType" /> 的内容包装。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary>在派生类中实现时，返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary>返回一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</summary>
      <returns>对泛型具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary>返回与此 <see cref="T:System.Xaml.XamlType" /> 关联的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 信息；否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示环境类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可构造类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示可构造类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示标记扩展。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XAML 名称范围。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可以为 null 的类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示可以为 null 的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示相关类型系统中的公共类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示公共类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示无法在基础类型系统中解析的类型。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示不可解析的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XML 定义是否表示空白有意义集合。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白有意义集合，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XML XDATA。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XDATA，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary>返回一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的 Items 属性提供类型信息。</summary>
      <returns>集合中项的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary>如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，则返回一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的键属性提供类型信息。</summary>
      <returns>字典用法的键类型的 <see cref="T:System.Xaml.XamlType" /> 对象，或者，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示字典，则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary>如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则返回一个为其已返回的 ProvideValue 提供类型信息的值。</summary>
      <returns>标记扩展用法的返回类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示标记扩展，则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary>从此 <see cref="T:System.Xaml.XamlType" /> 中返回特定命名成员的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>如果已找到成员，则为成员的 <see cref="T:System.Xaml.XamlMember" /> 信息；否则为 null。</returns>
      <param name="name">要获取的成员的名称（字符串形式）。</param>
      <param name="skipReadOnlyCheck">设置为 true 以返回成员，即使该成员的 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 值为 true；设置为 false 以返回 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 成员。 默认值为 false。</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary>对于标记扩展类型，返回此 <see cref="T:System.Xaml.XamlType" /> 的特定标记扩展用法中所支持位置参数的类型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 值的列表，其中每个此类 <see cref="T:System.Xaml.XamlType" /> 都是该位置在语法中的类型。 您必须按照为标记扩展提供标记输入时的相同顺序指定这些类型。</returns>
      <param name="parameterCount">您需要其相关信息的特定语法或构造函数模式的计数 (arity)。</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary>返回一个用于标记扩展的 set 操作的处理程序回调。</summary>
      <returns>用于标记扩展的 set 操作的处理程序回调。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary>返回一个用于类型转换器设置情况的处理程序。</summary>
      <returns>一个用于类型转换器设置情况的处理程序。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary>返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否应使用修整周围空白的模式进行序列化。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 应使用修整周围空白的模式进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary>返回具有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</summary>
      <returns>具有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为；否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary>返回为此 <see cref="T:System.Xaml.XamlType" /> 提供支持的 CLR <see cref="T:System.Type" />。</summary>
      <returns>为此 <see cref="T:System.Xaml.XamlType" /> 提供支持的 CLR <see cref="T:System.Type" />；否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary>返回一个值，该值指示在 XAML 初始化过程中是否自上而下生成此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>如果在 XAML 初始化过程中自上而下生成此 <see cref="T:System.Xaml.XamlType" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary>返回具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为。</summary>
      <returns>具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为；否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary>如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则获取一个为其已返回的 ProvideValue 提供类型信息的值。</summary>
      <returns>标记扩展用法的返回类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示标记扩展，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary>获取此 <see cref="T:System.Xaml.XamlType" /> 表示的类型的字符串名称。</summary>
      <returns>此 XAML 类型的字符串名称。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.XamlType" /> 对象是否具有相同的值。</summary>
      <returns>如果 <paramref name="xamlType1" /> 的值与 <paramref name="xamlType2" /> 的值相同，则为 true；否则为 false。</returns>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> 或 null。</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> 或 null。</param>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.XamlType" /> 对象是否具有不同的值。</summary>
      <returns>如果 <paramref name="xamlType1" /> 的值与 <paramref name="xamlType2" /> 的值不同，则为 true；否则为 false。</returns>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> 或 null。</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> 或 null。</param>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary>获取单个 XAML 命名空间，该命名空间是此 <see cref="T:System.Xaml.XamlType" /> 的主 XAML 命名空间。</summary>
      <returns>此 XAML 类型的主 XAML 命名空间的标识符（字符串形式）。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary>获取用于处理此 <see cref="T:System.Xaml.XamlType" /> 的活动 <see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
      <returns>用于处理此 <see cref="T:System.Xaml.XamlType" /> 的活动 <see cref="T:System.Xaml.XamlSchemaContext" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary>返回此 <see cref="T:System.Xaml.XamlType" /> 的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlType" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否具有用于在其内容中修整周围空白的序列化空白处理行为。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示使用空白修整的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary>针对此 <see cref="T:System.Xaml.XamlType" /> 表示泛型的情况获取类型参数的列表。</summary>
      <returns>类型参数类型的列表；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示泛型，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary>获取一个具有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</summary>
      <returns>一个具有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary>获取为此 <see cref="T:System.Xaml.XamlType" /> 提供支持的 CLR <see cref="T:System.Type" />。</summary>
      <returns>为此 <see cref="T:System.Xaml.XamlType" /> 提供支持的 CLR <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary>获取具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为。</summary>
      <returns>具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 约束的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为；否则为 null。</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary>为 XAML 编写器提供默认实现和基类定义。 这不是工作默认 XAML 编写器；您必须从 <see cref="T:System.Xaml.XamlWriter" /> 派生并实现其抽象成员，或者使用现有的 <see cref="T:System.Xaml.XamlWriter" /> 派生类。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary>关闭 XAML 编写器对象。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Xaml.XamlWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源；否则为 false。</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary>获取的值指示是否已调用了 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />。</summary>
      <returns>如果已调用 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary>在派生类中实现时，获取或设置活动 XAML 架构上下文。</summary>
      <returns>活动 XAML 架构上下文。</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary>请参见 <see cref="M:System.IDisposable.Dispose" />。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary>在派生类中实现时，生成结束成员节点的表示形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary>在派生类中实现时，生成结束对象节点的表示形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary>在派生类中实现时，针对对象是所设置属性的默认值或隐式值的情况生成对象，而不是指定为输入 XAML 节点集中的离散对象值。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>在派生类中实现时，写入 XAML 命名空间声明节点。</summary>
      <param name="namespaceDeclaration">要写入的命名空间声明。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary>基于 XAML 读取器中的节点类型 (<see cref="P:System.Xaml.XamlReader.NodeType" />) 执行切换，并为编写器实现调用相关的 Write 方法。</summary>
      <param name="reader">要用于确定节点的读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.NotImplementedException">默认实现遇到不在默认枚举中的 <see cref="T:System.Xaml.XamlNodeType" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>在派生类中实现时，写入开始成员节点的表示形式。</summary>
      <param name="xamlMember">要写入的成员节点。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>在派生类中实现时，写入开始对象节点的表示形式。</summary>
      <param name="type">要写入的对象的 XAML 类型。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary>在派生类中实现时，写入值节点。</summary>
      <param name="value">要写入的值。</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary>为 <see cref="T:System.Xaml.XamlWriter" /> 实现提供初始化设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary>使用另一个现有设置实例初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 类的新实例。</summary>
      <param name="settings">一个现有的 <see cref="T:System.Xaml.XamlWriterSettings" /> 对象。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 中介处理 XML 文件中的 XAML 标记，并生成 XAML 节点流。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary>基于流初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="stream">要加载到读取器中的初始流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>使用提供的 XAML 架构上下文基于流初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="stream">要加载到读取器中的初始流。</param>
      <param name="schemaContext">XAML 处理的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用提供的 XAML 架构上下文和特定于 XAML 的设置基于流初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="stream">要加载到读取器中的初始流。</param>
      <param name="schemaContext">XAML 处理的 XAML 架构上下文。</param>
      <param name="settings">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用特定于 XAML 的设置基于流初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="stream">要加载到读取器中的初始流。</param>
      <param name="settings">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary>基于 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="textReader">要用于初始化的 <see cref="T:System.IO.TextReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>使用提供的架构上下文和特定于 XAML 的设置，基于 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="textReader">要用于初始化的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext">XAML 处理的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。 - 或 - <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用提供的架构上下文和特定于 XAML 的设置，基于 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="textReader">要用于初始化的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext">XAML 处理的 XAML 架构上下文。</param>
      <param name="settings">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。 - 或 - <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用特定于 XAML 的设置，基于 <see cref="T:System.IO.TextReader" /> 初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="textReader">要用于初始化的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="settings">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary>基于要加载到默认读取器中的文件的文件名初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="fileName">要加载的 XML 文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary>使用提供的 XAML 架构上下文，基于要加载到默认 XML 读取器中的文件的文件名初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="fileName">要加载的文件的名称。</param>
      <param name="schemaContext">XAML 处理的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用提供的 XAML 架构上下文和特定于 XAML 的读取器设置，基于要加载到默认 XML 读取器中的文件的文件名初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="fileName">要加载的 XML 文件的名称。</param>
      <param name="schemaContext">XAML 处理的 XAML 架构上下文。</param>
      <param name="settings">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。 - 或 - <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用特定于 XAML 的读取器设置，基于要加载到默认 XML 读取器中的文件的文件名初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="fileName">要加载的 XML 文件的名称。</param>
      <param name="settings">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary>使用提供的 <see cref="T:System.Xml.XmlReader" /> 初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="xmlReader">要用作中间 XML 处理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary>使用提供的 <see cref="T:System.Xml.XmlReader" /> 和架构上下文初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="xmlReader">要用作中间 XML 处理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext">XAML 处理的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用提供的 <see cref="T:System.Xml.XmlReader" />、架构上下文和读取器设置初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="xmlReader">要用作中间 XML 处理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext">XAML 处理的 XAML 架构上下文。</param>
      <param name="settings">特定 XAML 读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用提供的 <see cref="T:System.Xml.XmlReader" /> 和读取器设置初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="xmlReader">要用作中间 XML 处理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings">特定 XAML 读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary>获取一个值，该值指定行信息是否可用。</summary>
      <returns>如果行信息可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary>获取一个值，该值报告 XAML 节点流中的读取器位置是否位于文件结尾。</summary>
      <returns>如果位置在节点流的概念上的文件末尾，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary>获取要报告的行号。</summary>
      <returns>要报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary>获取要报告的行位置。</summary>
      <returns>要报告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary>如果当前读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</summary>
      <returns>当前成员；如果当前读取器位置不在成员上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary>从当前节点中获取 XAML 命名空间。</summary>
      <returns>如果可用，则为当前节点中的 XAML 命名空间；否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary>提供所加载的源中的下一个 XAML 节点（如果 XAML 节点可用）。</summary>
      <returns>如果某节点可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary>获取一个对象，该对象提供信息集的架构信息。</summary>
      <returns>一个对象，该对象提供信息集的架构信息。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary>获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>当前节点的 <see cref="T:System.Xaml.XamlType" />；如果位置不在对象上，则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary>获取当前节点的值。</summary>
      <returns>当前节点的值；如果位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 null。</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary>为 <see cref="T:System.Xaml.XamlXmlReader" /> XAML 读取器实现指定处理规则或选项设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary>通过从现有 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 对象中复制设置来初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 类的新实例。</summary>
      <param name="settings">要复制的现有 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 对象。</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary>获取或设置一个值，该值指示当 <see cref="T:System.Xaml.XamlXmlReader" /> 关闭时，是否应关闭基础流或文本读取器。</summary>
      <returns>如果当 <see cref="T:System.Xaml.XamlXmlReader" /> 关闭时基础流或读取器也应关闭，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary>获取或设置一个值，该值确定读取器是否应与如何处理标记兼容性内容这一默认 <see cref="T:System.Xaml.XamlXmlReader" /> 行为有所区别。</summary>
      <returns>如果直接使用启动读取器（这意味着将 XML 兼容性标记作为主要流的一部分进行处理，而不考虑兼容性），则为 true。 如果使用默认行为（即单独处理 XML 兼容性），则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary>获取或设置语言设置值，该值确定读取器可能提升到在节点中写出 xml:lang 特性的编写器。</summary>
      <returns>要用于基于读取器的可能 xml:lang 输出的字符串。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary>获取或设置一个值，该值确定 XAML 读取器是否让任何 XAML 编写器在节点中写入 xml:space 特性。 如果需要该行为，则此信息会通过共享 XAML 架构上下文传递。</summary>
      <returns>如果处理 XAML 节点流的编写器可以在输出中写入 xml:space="preserve"，则为 true；如果不能在节点中写入 xml:space 特性，则为 false。</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary>使用 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlWriter" /> 支持类将 XAML 节点流写入文本或标记序列化形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>从流中初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类的新实例。</summary>
      <param name="stream">要写入的流。</param>
      <param name="schemaContext">XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。 - 或 - <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>使用编写器设置对象从流中初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类的新实例。</summary>
      <param name="stream">要写入的流。</param>
      <param name="schemaContext">XAML 编写器的 XAML 架构上下文。</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的实例，此实例通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 为 null</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary>从 <see cref="T:System.IO.TextWriter" /> 基础初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类的新实例。</summary>
      <param name="textWriter">写入输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext">XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>使用设置对象从 <see cref="T:System.IO.TextWriter" /> 基础初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类的新实例。</summary>
      <param name="textWriter">写入输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext">XAML 编写器的 XAML 架构上下文。</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的实例，此实例通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary>从 <see cref="T:System.Xml.XmlWriter" /> 基础初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类的新实例。</summary>
      <param name="xmlWriter">写入输出的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext">XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>使用设置对象从 <see cref="T:System.Xml.XmlWriter" /> 基础初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类的新实例。</summary>
      <param name="xmlWriter">写入输出的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext">XAML 编写器的 XAML 架构上下文。</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的实例，此实例通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Xaml.XamlXmlWriter" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
      <param name="disposing">设置为 true 以释放非托管资源；否则为 false。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary>调用基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" /> 的 Flush 方法，该方法将写出当前位于缓冲区中的任何内容，然后关闭编写器。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary>获取此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于处理的 XAML 架构上下文。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理的 XAML 架构上下文。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary>获取此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理的编写器设置。</summary>
      <returns>此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理的编写器设置。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary>将 XAML 结束成员节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置不在成员内，或者如果内部编写器状态不支持写入结束成员，则引发异常。</summary>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置不在成员内。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">当前编写器状态不支持写入结束成员。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary>将 XAML 结束对象节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果所处理的 XAML 节点流的当前位置与写入结束对象不兼容，则引发异常。</summary>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置不在可以写入结束成员的范围内。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">当前编写器状态不支持写入结束对象。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary>针对指定对象是所编写属性的默认值或隐式值的情况写出对象，而不是指定为输入 XAML 节点集中的对象值。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>将命名空间信息写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 对于某些状态可能会引发异常；但在编写器和所处理的 XAML 节点流到达可放置 XAML 命名空间声明的位置之前，可能会改为延迟写入命名空间信息。</summary>
      <param name="namespaceDeclaration">要写入的 XAML 命名空间声明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> 不是有效的 XAML 命名空间声明（具有 null 前缀或 null 标识符组件）。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">当前编写器状态不支持编写 XAML 命名空间声明。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>将 XAML 起始成员节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置在另一个成员内，或者未处于可写入起始成员的范围或编写器状态中，则引发异常。</summary>
      <param name="property">要写入的成员的 XAML 成员标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> 不是有效的 <see cref="T:System.Xaml.XamlMember" />。</exception>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置无效，无法写入起始成员。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">编写器状态对于编写开始成员是无效的。 - 或 - XAML 编写器尝试编写重复的成员。 此异常可能具有更精确的内部异常。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>将 XAML 起始对象节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置不在可写入起始对象的范围内，或者编写器未处于可写入起始对象的状态，则引发异常。</summary>
      <param name="type">要写入的对象的 <see cref="T:System.Xaml.XamlType" />（XAML 类型标识符）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Xaml.XamlType" />。</exception>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置无效，无法写入新的开始对象。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML 编写器的状态无效，无法写入新的开始对象。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary>将 XAML 值节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置对于写入值操作无效，或者编写器处于无法写入值的状态，则引发异常。</summary>
      <param name="value">要写入的值信息。</param>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置无效，无法写入值。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML 编写器状态不支持对值节点的写入。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定的值不为 null，也不为字符串。</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary>由某些 <see cref="T:System.Xaml.XamlXmlWriter" /> API 引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary>为 <see cref="T:System.Xaml.XamlXmlWriter" /> XAML 编写器实现提供初始化设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary>获取或设置一个值，该值指定 <see cref="T:System.Xaml.XamlXmlWriter" /> 是否应始终采用有效的 XAML 输入来进行重复项解析或其他错误检查。</summary>
      <returns>如果为 true，则让 <see cref="T:System.Xaml.XamlXmlWriter" /> 跳过某些验证或错误检查，例如在出现重复成员时引发异常。 如果为 false，则让 <see cref="T:System.Xaml.XamlXmlWriter" /> 在遇到无效 XAML 时，引发异常。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary>获取或设置一个值，该值指定 <see cref="T:System.Xaml.XamlXmlWriter" /> 应在进行 Dispose 或其他操作时立即关闭，还是 XAML 编写器应在关闭之前写入缓冲区输出。 应慎重使用此设置；立即关闭可能会导致 XAML 无效而无法重新加载。</summary>
      <returns>如果为 true，则在进行 Dispose 或类似操作时，立即关闭 <see cref="T:System.Xaml.XamlXmlWriter" />。 如果为 false，则在释放 <see cref="T:System.Xaml.XamlXmlWriter" /> 之前写入剩余的缓冲区输出。 默认值为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary>返回此 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 实例的副本。</summary>
      <returns>返回的副本。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>定义对程序集和类型的访问控制以用于 XAML 加载。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>基于 <see cref="T:System.Reflection.Assembly" /> 请求的程序集返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</summary>
      <returns>一个用 <paramref name="assembly" /> 值作为 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 的源信息的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</returns>
      <param name="assembly">请求的程序集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>基于 <see cref="T:System.Reflection.AssemblyName" /> 请求的程序集返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</summary>
      <returns>一个用 <paramref name="assemblyName" /> 值作为 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 的源信息的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</returns>
      <param name="assemblyName">请求的程序集名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 不是有效的完全限定程序集名称。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>获取权限由此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 来确定的程序集的 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <returns>权限由此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 来确定的程序集的 <see cref="T:System.Reflection.AssemblyName" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>基于按限定名称指定的特定类型返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</summary>
      <returns>一个用 <paramref name="assemblyQualifiedTypeName" /> 值作为 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />（由对类型的反射来确定）的源信息的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</returns>
      <param name="assemblyQualifiedTypeName">一个作为程序集限定类型名称分析的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> 不是有效的程序集限定的类型名称。 - 或 - <paramref name="assemblyQualifiedTypeName" /> 内的程序集名称不是有效的程序集名称。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>基于 <see cref="T:System.Type" /> 指定的特定类型返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</summary>
      <returns>一个用 <paramref name="type" /> 值作为 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />（由对类型的反射来确定）的源信息的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</returns>
      <param name="type">请求对其进行访问的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>获取权限由此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 来确定的类型的非限定字符串名称。</summary>
      <returns>权限由此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 来确定的类型的非限定字符串名称。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>声明权限，这些权限用于加载 XAML 读取器或编写器所使用的程序集中的类型。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>使用一组可枚举的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 类的新实例。</summary>
      <param name="allowedAccess">一组可枚举的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> 包含无效信息，例如 null 项。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用现有权限初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 类的新实例。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>使用单一 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 类的新实例。</summary>
      <param name="allowedAccess">定义的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>获取此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 表示的所有 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值的列表。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值的只读列表，或者为 null。 请参见“备注”。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>创建并返回当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的一个相同副本。</summary>
      <returns>当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的副本。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>用 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="elem">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 不包含 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 编码。 - 或 - <paramref name="elem" /> 中的版本特性不受支持。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>返回此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否在其 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 列表中包含指定的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</summary>
      <returns>如果 <paramref name="requestedAccess" /> 是当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 列表中的一项，则为 true。 否则为 false。</returns>
      <param name="requestedAccess">要检查的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />，这是当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定权限的交集。</summary>
      <returns>一项新权限，表示当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的交集。 如果交集为空，则此新权限为 null。</returns>
      <param name="target">要与当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 相交的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 null 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否为指定权限的子集。</summary>
      <returns>如果当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是指定权限的子集，则为 true；否则为 false。</returns>
      <param name="target">将要测试子集关系的权限。 可以为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 null 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>返回此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否表示不受限制的权限。</summary>
      <returns>如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 表示不受限制的权限，则为 true。 如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 在 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 中具有特定访问级别限制，或者没有权限，则为 false。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>创建此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 及其当前状态的 XML 编码。</summary>
      <returns>此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定权限的并集。</summary>
      <returns>新的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />，它表示当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的并集。</returns>
      <param name="other">要与当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 进行合并的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不为 null 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary>指定在 XAML 中设置属性时针对该属性实施的语法限制，由 <see cref="T:System.Xaml.XamlDirective" /> 报告。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary>可在 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> 或 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> 位置中设置属性。（此枚举成员定义为这些值的组合。）</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary>可在 XAML 特性语法中设置属性。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary>可在 XAML 属性元素语法中设置属性。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary>无法完全在 XAML 中设置属性。 这是默认设置。</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary>定义由 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 报告的序列化行为。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary>未知，将遵从成员的类型。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary>不对结果进行序列化。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary>对结果进行序列化。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary>描述 XAML 成员使用的集合形式（如果有）。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary>XAML 成员支持数组集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary>XAML 成员支持列表或集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary>XAML 成员支持字典（键值对）。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary>XAML 成员不支持集合。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary>提供一个扩展点，该扩展点可通过除反射之外的其他技术来访问 XAML 成员的成员特征。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary>基于提供的 <see cref="T:System.Xaml.XamlMember" /> 初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
      <param name="member">与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的特定 XAML 成员的 <see cref="T:System.Xaml.XamlMember" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary>从实例中获取相关属性的值。</summary>
      <returns>请求的属性值。</returns>
      <param name="instance">成员的所有者类型的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">在一个基于未知 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上调用了此方法。 - 或 - 在只写成员上调用此方法。 - 或 - <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary>对实例设置相关属性的值。</summary>
      <param name="instance">成员的所有者类型的实例。</param>
      <param name="value">要设置的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">在一个基于未知 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上调用了此方法。 - 或 - 在只读成员上调用此方法。 - 或 - <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary>指示是否需要通过序列化过程保持值。</summary>
      <returns>枚举的一个值。</returns>
      <param name="instance">具有要检查其持久性的属性的实例。</param>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary>获取 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，该方法为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性获取值。</summary>
      <returns>为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性获取值的 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，或者为 null。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary>获取 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，该方法为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性设置值。</summary>
      <returns>为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性设置值的 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，或者为 null。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary>提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns>一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary>提供一个扩展点，该扩展点可通过除反射和构造函数之外的其他技术来构造 XAML 类型的实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary>基于提供的 <see cref="T:System.Xaml.XamlType" /> 初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
      <param name="type">与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的特定 XAML 类型的 <see cref="T:System.Xaml.XamlType" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary>将提供的项添加到与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的类型的实例。</summary>
      <param name="instance">由用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="T:System.Xaml.XamlType" /> 所指定的类型的实例。</param>
      <param name="item">要添加的项。</param>
      <exception cref="T:System.NotSupportedException">在一个基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。 - 或 - 在相关类型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">此 <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary>将提供的键和项值添加到与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的类型的实例。</summary>
      <param name="instance">由用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="T:System.Xaml.XamlType" /> 所指定的类型的实例。</param>
      <param name="key">要添加的项的字典键。</param>
      <param name="item">要添加的项值。</param>
      <exception cref="T:System.NotSupportedException">在一个基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。 - 或 - 在相关类型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">此 <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary>基于此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的构造启动的 <see cref="T:System.Xaml.XamlType" /> 创建对象实例。</summary>
      <returns>基于此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的构造启动的 <see cref="T:System.Xaml.XamlType" /> 所创建的实例。</returns>
      <param name="arguments">一个对象数组，这些对象为实例提供 x:ConstructorArgs。 对于不需要或者不使用 x:ConstructorArgs 的类型可能为 null。</param>
      <exception cref="T:System.MissingMethodException">未能解析构造函数。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary>返回与集合或字典相关的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的相关 Add 方法。</summary>
      <returns>Add 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 信息，或为 null。</returns>
      <param name="contentType">Add 方法所使用的项类型的 <see cref="T:System.Xaml.XamlType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary>返回一个对象，该对象表示可对项进行枚举的方法。</summary>
      <returns>枚举器方法的 <see cref="T:System.Reflection.MethodInfo" />，或为 null。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary>返回一个表示项集的 <see cref="T:System.Collections.IEnumerator" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，或为 null。</returns>
      <param name="instance">由用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="T:System.Xaml.XamlType" /> 所指定的类型的实例。</param>
      <exception cref="T:System.NotSupportedException">在一个基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。 - 或 - 在相关类型不是集合或字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary>获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入所实现的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 时使用的处理程序。</summary>
      <returns>一个处理此情况的处理程序实现。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary>获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入 CLR 实现的 <see cref="T:System.ComponentModel.TypeConverter" /> 时使用的处理程序。</summary>
      <returns>一个处理此情况的处理程序实现。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary>提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <returns>一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary>提供一种依据名称和命名空间来指定 XAML 类型的方法。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary>基于名称和命名空间字符串初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类的新实例。</summary>
      <param name="xamlNamespace">其中包含 name 的 XAML 命名空间。</param>
      <param name="name">要为其创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的类型的名称。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary>基于名称和命名空间字符串以及类型参数数组，初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类的新实例。</summary>
      <param name="xamlNamespace">其中包含 <paramref name="name" /> 的 XAML 命名空间。</param>
      <param name="name">要为其创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的类型的名称。</param>
      <param name="typeArguments">一个由类型参数组成的数组，其中每个参数都必须为 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary>基于现有 <see cref="T:System.Xaml.XamlType" /> 初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类的新实例。</summary>
      <param name="xamlType">现有 <see cref="T:System.Xaml.XamlType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary>获取用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的名称。</summary>
      <returns>类型名称。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary>获取用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 XAML 命名空间标识符。</summary>
      <returns>XAML 命名空间标识符。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>基于可将标记前缀解析为命名空间的类型名称和对象提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <returns>创建的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <param name="typeName">要为其创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的类型名称。</param>
      <param name="namespaceResolver">一个实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的对象或服务提供程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 为 null。</exception>
      <exception cref="T:System.FormatException">无法分析字符串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>基于可指定多个类型名称的字符串以及可将标记前缀解析为命名空间的对象，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <returns>创建的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <param name="typeNameList">其中包含多个类型的字符串。 请参见“备注”。</param>
      <param name="namespaceResolver">一个实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的对象或服务提供程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 为 null。</exception>
      <exception cref="T:System.FormatException">无法分析字符串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary>将此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值转换为其等效的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的等效字符串表示形式。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary>将此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值转换为其等效的字符串表示形式，可在多个类型的对象元素用法的标记语法中使用该表示形式。</summary>
      <returns>所有类型结果的串联字符串。</returns>
      <param name="typeNameList">类型的列表。</param>
      <param name="prefixLookup">用于前缀查找的服务引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefixLookup" /> 或 <paramref name="typeNameList" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary>将此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值转换为其等效的字符串表示形式，可在类型的对象元素用法的标记语法中使用该表示形式。</summary>
      <returns>带前缀的用法字符串。</returns>
      <param name="prefixLookup">用于前缀查找的服务引用。</param>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> 是 null。 - 或 - <see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 无效。 - 或 - 未能查找前缀。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary>基于可将标记前缀解析为命名空间的类型名称和对象提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <returns>如果分析成功并且 <paramref name="result" /> 包含有用的值，则为 true；否则为 false。</returns>
      <param name="typeName">要为其创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的类型名称。</param>
      <param name="namespaceResolver">一个实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的对象或服务提供程序。</param>
      <param name="result">在返回值为 true 的情况下，其中包含所创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary>基于可指定多个类型名称的字符串以及可将标记前缀解析为命名空间的对象，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <returns>如果分析成功并且 <paramref name="result" /> 包含有用的值，则为 true；否则为 false。</returns>
      <param name="typeNameList">其中包含多个类型的字符串。 请参见“备注”。</param>
      <param name="namespaceResolver">一个实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的对象或服务提供程序。</param>
      <param name="result">在返回值为 true 的情况下，其中包含所创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 为 null。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary>获取用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的类型参数。</summary>
      <returns>类型参数（如果有）。 可能为 null。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary>在 <see cref="T:System.Xaml.XamlType" /> 对象与表示类型名称的字符串之间执行转换。 此功能由标记定义通过 <see cref="T:System.Windows.Markup.PropertyDefinition" /> 用于实现 XAML 可扩展性。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定上下文，将指定类型的对象转换为 <see cref="T:System.Xaml.XamlType" /> 的实例。</summary>
      <returns>如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定的上下文将 <see cref="T:System.Xaml.XamlType" /> 的实例转换为指定类型。</summary>
      <returns>如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试使用指定的上下文将指定对象转换为 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试使用指定上下文将 <see cref="T:System.Xaml.XamlType" /> 转换为指定类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary>提供一个公共 API 接口，此接口适用于根据最终目标类型以外的输入为 XAML 生成初始化或序列化值的技术。 此类型包括标记扩展和类型转换器。</summary>
      <typeparam name="TConverterBase">此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 所表示的特定转换器的 CLR 基类。 它通常为以下类之一：<see cref="T:System.ComponentModel.TypeConverter" />；<see cref="T:System.Windows.Markup.MarkupExtension" />；<see cref="T:System.Windows.Markup.ValueSerializer" />；</typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary>基于实现 <see cref="T:System.Type" /> 和 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的目标类型的转换器，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类的新实例。</summary>
      <param name="converterType">实现转换器行为的 <see cref="T:System.Type" />。</param>
      <param name="targetType">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的目标 <see cref="T:System.Xaml.XamlType" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary>基于实现 <see cref="T:System.Type" /> 和 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的目标类型的转换器以及一个字符串值，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类的新实例。</summary>
      <param name="converterType">实现转换器行为的 <see cref="T:System.Type" />。</param>
      <param name="targetType">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的目标 <see cref="T:System.Xaml.XamlType" />。</param>
      <param name="name">字符串名称。</param>
      <exception cref="T:System.ArgumentException">所有三个参数都为 null（至少需要有一个为非 null）。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary>获取转换器实现的已创建实例。</summary>
      <returns>转换器实现的已创建实例，或者为 null。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary>获取实现转换器行为的类的 <see cref="T:System.Type" />。</summary>
      <returns>实现转换器行为的类的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary>返回转换器实现的实例。</summary>
      <returns>转换器实现的实例，或者为 null。</returns>
      <exception cref="T:System.Xaml.XamlSchemaException">转换器未实现正确的基类型。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary>确定此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例是否与指定的对象（也必须是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />）具有相同的值。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 并且它的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>确定 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的此实例与另一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有相同的值。</summary>
      <returns>如果 <paramref name="other" /> 为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 并且它的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="other">要比较的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary>返回该 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary>获取此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字符串名称。</summary>
      <returns>此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字符串名称。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>确定两个指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有相同的值。</summary>
      <returns>如果 <paramref name="converter1" /> 的值与 <paramref name="converter2" /> 的值相同，则为 true；否则为 false。</returns>
      <param name="converter1">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 null。</param>
      <param name="converter2">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 null。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>确定两个指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有不同的值。</summary>
      <returns>如果 <paramref name="converter1" /> 的值与 <paramref name="converter2" /> 的值不同，则为 true；否则为 false。</returns>
      <param name="converter1">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 null。</param>
      <param name="converter2">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 null。</param>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的目标 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的目标 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary>返回一个表示此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的 <see cref="T:System.String" />。</summary>
      <returns>表示此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的 <see cref="T:System.String" />。</returns>
    </member>
  </members>
</doc>