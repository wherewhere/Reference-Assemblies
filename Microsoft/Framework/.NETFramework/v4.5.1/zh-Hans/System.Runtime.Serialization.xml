<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.CollectionDataContractAttribute">
      <summary>当应用于集合类型时，可用来对集合项元素进行自定义指定。 此属性只能应用于被 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 视为有效的可序列化集合的类型。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.CollectionDataContractAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.IsReference">
      <summary>获取或设置一个值，该值指示是否保留对象引用数据。</summary>
      <returns>如果保留对象引用数据，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ItemName">
      <summary>获取或设置集合元素的自定义名称。</summary>
      <returns>要应用于集合元素的名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.KeyName">
      <summary>获取或设置字典键名称的自定义名称。</summary>
      <returns>要取代默认字典键名称而使用的名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Name">
      <summary>获取或设置集合类型的数据协定名称。</summary>
      <returns>集合类型的数据协定名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Namespace">
      <summary>获取或设置数据协定的命名空间。</summary>
      <returns>数据协定的命名空间。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ValueName">
      <summary>获取或设置字典值名称的自定义名称。</summary>
      <returns>要取代默认字典值名称而使用的名称。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ContractNamespaceAttribute">
      <summary>指定数据协定的 CLR 命名空间和 XML 命名空间。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ContractNamespaceAttribute.#ctor(System.String)">
      <summary>使用提供的命名空间初始化 <see cref="T:System.Runtime.Serialization.ContractNamespaceAttribute" /> 类的新实例。</summary>
      <param name="contractNamespace">协定的命名空间。</param>
    </member>
    <member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ClrNamespace">
      <summary>获取或设置数据协定类型的 CLR 命名空间。</summary>
      <returns>类型的 CLR 合法命名空间。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ContractNamespace">
      <summary>获取数据协定成员的命名空间。</summary>
      <returns>数据协定成员的命名空间。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractAttribute">
      <summary>指定该类型要定义或实现一个数据协定，并可由序列化程序（如 <see cref="T:System.Runtime.Serialization.DataContractSerializer" />）进行序列化。 若要使其类型可序列化，类型作者必须为其类型定义数据协定。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.IsReference">
      <summary>获取或设置一个值，该值指示是否保留对象引用数据。</summary>
      <returns>如果使用标准 XML 保留对象引用数据，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.Name">
      <summary>获取或设置类型的数据协定的名称。</summary>
      <returns>数据协定的本地名称。 默认值是应用了该属性的类的名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
      <summary>获取或设置类型的数据协定的命名空间。</summary>
      <returns>协定的命名空间。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractResolver">
      <summary>提供一种机制，用于在序列化和反序列化期间在类型和 xsi:type 表示之间动态进行相互映射。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>在反序列化期间，重写此方法以将指定的 xsi:type 名称和命名空间映射到数据协定类型。</summary>
      <returns>xsi:type 名称和命名空间映射到的类型。</returns>
      <param name="typeName">要映射到 的 xsi:type 名称。</param>
      <param name="typeNamespace">要映射到的 xsi:type 命名空间。</param>
      <param name="declaredType">在数据协定中声明的类型。</param>
      <param name="knownTypeResolver">已知类型的解析器。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>在序列化期间，重写此方法以将数据协定类型映射到 xsi:type 名称和命名空间。</summary>
      <returns>如果映射成功，则为 true；否则为 false。</returns>
      <param name="type">要映射的类型。</param>
      <param name="declaredType">在数据协定中声明的类型。</param>
      <param name="knownTypeResolver">已知类型的解析器。</param>
      <param name="typeName">xsi:type 名称。</param>
      <param name="typeNamespace">xsi:type 命名空间。</param>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractSerializer">
      <summary>使用提供的数据协定，将类型实例序列化和反序列化为 XML 流或文档。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象以及可在对象图中呈现的已知类型的集合。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="knownTypes">包含可在对象图中呈现类型的 <see cref="T:System.Type" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了可在对象图中呈现的已知类型的列表、图中要序列化的最大项数、指定忽略意外数据的参数、是否使用非标准的 XML 结构来保留对象引用数据以及自定义序列化的代理项。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的已知类型。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" /> 属性返回的值。</param>
      <param name="ignoreExtensionDataObject">要在序列化和反序列化时忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="preserveObjectReferences">要使用非标准的 XML 结构来保留对象引用数据，则为 true；否则为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">项数超出了最大值。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Runtime.Serialization.DataContractResolver)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了可在对象图中呈现的已知类型的列表、图中要序列化的最大项数、要忽略意外数据的参数、是否使用非标准的 XML 构造来保留图中的对象引用数据、自定义序列化的代理项以及在运行时映射 xsi:type 声明的备选方法。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的已知类型。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" /> 属性返回的值。</param>
      <param name="ignoreExtensionDataObject">要在序列化和反序列化时忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="preserveObjectReferences">要使用非标准的 XML 结构来保留对象引用数据，则为 true；否则为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <param name="dataContractResolver">用于将 xsi:type 声明映射到数据协定类型的 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 的实现。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Runtime.Serialization.DataContractSerializerSettings)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型和设置的对象。</summary>
      <param name="type">被序列化或反序列化的实例类型。</param>
      <param name="settings">序列化程序设置。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String)">
      <summary>使用提供的 XML 根元素和命名空间初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">XML 元素的名称，该元素包含要序列化或反序列化的内容。</param>
      <param name="rootNamespace">XML 元素的命名空间，该元素包含要序列化或反序列化的内容。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还在两个字符串参数中指定根 XML 元素和命名空间，并指定了可在对象图中呈现的已知类型的列表。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">内容的根元素名称。</param>
      <param name="rootNamespace">根元素的命名空间。</param>
      <param name="knownTypes">包含可在对象图中呈现类型的 <see cref="T:System.Type" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了可在对象图中呈现的已知类型的列表、图中要序列化的最大项数、指定忽略意外数据的参数、是否使用非标准的 XML 结构来保留对象引用数据、自定义序列化的代理项以及包含内容的 XML 元素和命名空间。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">包含要序列化或反序列化的内容的 XML 元素。</param>
      <param name="rootNamespace">XML 元素的命名空间，该元素包含要序列化或反序列化的内容。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的已知类型。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。</param>
      <param name="ignoreExtensionDataObject">要在序列化和反序列化时忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="preserveObjectReferences">要使用非标准的 XML 结构来保留对象引用数据，则为 true；否则为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">项数超出了最大值。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Runtime.Serialization.DataContractResolver)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了可在对象图中呈现的已知类型的列表、图中要序列化的最大项数、要忽略意外数据的参数、是否使用非标准的 XML 构造来保留在图中的对象引用数据、自定义序列化的代理项、包含内容的 XML 元素和命名空间以及在运行时映射 xsi:type 声明的备选方法。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">包含要序列化或反序列化的内容的 XML 元素。</param>
      <param name="rootNamespace">XML 元素的命名空间，该元素包含要序列化或反序列化的内容。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的已知类型。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。</param>
      <param name="ignoreExtensionDataObject">要在序列化和反序列化时忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="preserveObjectReferences">要使用非标准的 XML 结构来保留对象引用数据，则为 true；否则为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <param name="dataContractResolver">用于将 xsi:type 声明映射到数据协定类型的 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 的实现。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>使用通过类型为 <see cref="T:System.Xml.XmlDictionaryString" /> 的参数指定的 XML 根元素和命名空间初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">一个包含内容的根元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="rootNamespace">一个包含根元素的命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还在两个 <see cref="T:System.Xml.XmlDictionaryString" /> 参数中指定根 XML 元素和命名空间，并指定了可在对象图中呈现的已知类型的列表。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">一个包含内容的根元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="rootNamespace">一个包含根元素的命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的已知类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了可在对象图中呈现的已知类型的列表、要序列化的最大图项数、指定忽略意外数据的参数、是否使用非标准的 XML 结构来保留对象引用数据、自定义序列化的代理项以及指定包含内容的 XML 元素和命名空间的 <see cref="T:System.Xml.XmlDictionaryString" /> 参数。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">指定包含要序列化或反序列化的内容的 XML 元素的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="rootNamespace">指定根 XML 命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的已知类型。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。</param>
      <param name="ignoreExtensionDataObject">要在序列化和反序列化时忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="preserveObjectReferences">要使用非标准的 XML 结构来保留对象引用数据，则为 true；否则为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">项数超出了最大值。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Runtime.Serialization.DataContractResolver)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了可在对象图中呈现的已知类型的列表、图中要序列化的最大项数、要忽略意外数据的参数、是否使用非标准的 XML 构造来保留图中的对象引用数据、自定义序列化的代理项、指定包含内容的 XML 元素和命名空间的 <see cref="T:System.Xml.XmlDictionaryString" /> 参数以及在运行时映射 xsi:type 声明的备选方法。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">包含要序列化或反序列化的内容的 XML 元素。</param>
      <param name="rootNamespace">XML 元素的命名空间，该元素包含要序列化或反序列化的内容。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的已知类型。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。</param>
      <param name="ignoreExtensionDataObject">要在序列化和反序列化时忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="preserveObjectReferences">要使用非标准的 XML 结构来保留对象引用数据，则为 true；否则为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <param name="dataContractResolver">用于将 xsi:type 声明映射到数据协定类型的 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 的实现。</param>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.DataContractResolver">
      <summary>获取用于动态将 xsi:type 声明映射到已知协定类型的组件。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 类的实现。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.DataContractSurrogate">
      <summary>获取一个可扩展序列化或反序列化过程的代理项类型。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 类的实现。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject">
      <summary>获取一个值，指定在对类进行序列化或反序列化时是否忽略类扩展提供的数据。</summary>
      <returns>如果要省略扩展数据，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>确定是否将 <see cref="T:System.Xml.XmlDictionaryReader" /> 定位在可反序列化的对象上。</summary>
      <returns>如果读取器位于要读取的流的开始元素处，则为 true；否则为 false。</returns>
      <param name="reader">一个用于读取 XML 流的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>确定是否将 <see cref="T:System.Xml.XmlReader" /> 定位在可反序列化的对象上。</summary>
      <returns>如果读取器位于要读取的流的开始元素处，则为 true；否则为 false。</returns>
      <param name="reader">用于读取 XML 流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes">
      <summary>获取一个类型集合，这些类型可呈现在使用此 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 实例序列化的对象图中。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含作为已知类型传入 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 构造函数的预期类型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph">
      <summary>获取对象图中要序列化或反序列化的最大项数。</summary>
      <returns>要序列化或反序列化的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">项数超出了最大值。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences">
      <summary>获取一个值，指定是否使用非标准的 XML 构造来保留对象引用数据。</summary>
      <returns>如果要保留引用，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 流并返回反序列化的对象，并指定在读取对象的值之前是否进行检查以验证对象的名称。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">用于读取 XML 流的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="verifyObjectName">要检查对象名称是否与构造函数中提供的根名称值相对应，则为 true；否则为 false。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">如果将 <paramref name="verifyObjectName" /> 参数设置为 true，则元素名称和命名空间与构造函数中设置的值不对应。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean,System.Runtime.Serialization.DataContractResolver)">
      <summary>读取一个 XML 文档或文档流，并返回反序列化的对象。此方法包括用于指定是否验证对象名称的参数和用于在运行时映射 xsi:type 声明的解析器。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">用于读取内容的 XML 阅读器。</param>
      <param name="verifyObjectName">若要验证对象名称，则为 true；否则为 false。</param>
      <param name="dataContractResolver">用于将 xsi:type 声明映射到数据协定类型的 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 的实现。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 读取 XML 流，并返回反序列化的对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">用于读取 XML 流的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 读取 XML 流并返回反序列化的对象，并指定在读取对象的值之前是否进行检查以验证对象的名称。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">用于读取 XML 流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="verifyObjectName">要检查对象名称是否与构造函数中提供的根名称值相对应，则为 true；否则为 false。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">如果将 <paramref name="verifyObjectName" /> 参数设置为 true，则元素名称和命名空间与构造函数中设置的值不对应。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.SerializeReadOnlyTypes">
      <summary>获取指定只读类型是否序列化的值。</summary>
      <returns>如果序列化只读类型，则为 true；如果序列化所有类型，则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入结束 XML 元素。</summary>
      <param name="writer">用于写入流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 写入结束 XML 元素。</summary>
      <param name="writer">用于写入流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object,System.Runtime.Serialization.DataContractResolver)">
      <summary>使用指定的 XmlDictionaryWriter 将所有对象数据（开始 XML 元素、内容和结束元素）写入 XML 文档或流。 此方法包含用于在运行时映射 xsi:type 声明的解析器。</summary>
      <param name="writer">用于将内容写入 XML 文档或流的 XmlDictionaryWriter。</param>
      <param name="graph">包含要写入的内容的对象。</param>
      <param name="dataContractResolver">用于将 xsi:type 声明映射到已知数据协定的 <see cref="T:System.Runtime.Serialization.DataContractResolver" /> 的实现。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 将所有对象数据（开始 XML 元素、内容和结束元素）写入 XML 文档或流。</summary>
      <param name="writer">用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">包含要写入流的数据的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入 XML 内容。</summary>
      <param name="writer">用于写入流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要写入到流的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 写入 XML 内容。</summary>
      <param name="writer">用于写入流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">要写入到流的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入开始 XML 元素。</summary>
      <param name="writer">用于写入 XML 开始元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要写入的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 写入开始 XML 元素。</summary>
      <param name="writer">用于写入 XML 开始元素的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">要写入的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractSerializerSettings">
      <summary>指定数据协定序列化程序设置。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializerSettings.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractSerializerSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.DataContractResolver">
      <summary>获取或设置用于动态将 xsi:type 声明映射到已知协定类型的组件。</summary>
      <returns>用于动态将 xsi:type 声明映射到已知协定类型的组件。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.DataContractSurrogate">
      <summary>获取或设置序列化代理项。</summary>
      <returns>序列化代理。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.IgnoreExtensionDataObject">
      <summary>获取或设置一个值，该值指定在对类进行序列化或反序列化时是否要忽略由该类扩展提供的数据。</summary>
      <returns>如果在对该类进行序列化或反序列化时忽略由该类的扩展提供的数据，则为 True，否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.KnownTypes">
      <summary>获取或设置可能存在于通过使用此实例 DataContractSerializerSettings 所序列化的对象关系图中的类型集合。</summary>
      <returns>一个类型集合，这些类型可能出现在使用此 DataContractSerializerSettings 实例序列化的对象图中。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.MaxItemsInObjectGraph">
      <summary>获取或设置一个要序列化或反序列化的对象图中的最大项数。</summary>
      <returns>要序列化或反序列化的对象图中的最大项数。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.PreserveObjectReferences">
      <summary>获取或设置一个值，该值指定是否使用非标准的 XML 构造来保留对象引用数据。</summary>
      <returns>要使用非标准的 XML 结构来保留对象引用数据，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.RootName">
      <summary>获取或设置选定对象的根名称。</summary>
      <returns>选中对象的根名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.RootNamespace">
      <summary>获取或设置指定对象的根命名空间。</summary>
      <returns>指定对象的根命名空间。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializerSettings.SerializeReadOnlyTypes">
      <summary>获取或设置指定是否序列化只读类型的值。</summary>
      <returns>仅序列化读取类型，则为 True；否则 false。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataMemberAttribute">
      <summary>当应用于类型的成员时，指定该成员是数据协定的一部分并可由 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 进行序列化。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataMemberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue">
      <summary>获取或设置一个值，该值指定是否对正在被序列化的字段或属性的默认值进行序列化。</summary>
      <returns>如果应该在序列化流中生成成员的默认值，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.IsRequired">
      <summary>获取或设置一个值，该值用于指示序列化引擎在读取或反序列化时成员必须存在。</summary>
      <returns>如果成员是必需的，则为 true；否则为 false。</returns>
      <exception cref="T:System.Runtime.Serialization.SerializationException">该成员不存在。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.Name">
      <summary>获取或设置数据成员名称。</summary>
      <returns>该数据成员的名称。 默认值是应用该属性的目标的名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.Order">
      <summary>获取或设置成员的序列化和反序列化的顺序。</summary>
      <returns>序列化或反序列化的数字顺序。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DateTimeFormat">
      <summary>指定日期时间格式选择。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String)">
      <summary>使用字符串格式初始化 <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> 类的新实例。</summary>
      <param name="formatString">格式字符串。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String,System.IFormatProvider)">
      <summary>使用格式字符串和格式提供方初始化 <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> 类的新实例。</summary>
      <param name="formatString">格式字符串。</param>
      <param name="formatProvider">格式提供程序。</param>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.DateTimeStyles">
      <summary>获取或设置格式设置选项，这些选项可自定义许多日期和时间分析方法的字符串分析方法。</summary>
      <returns>自定义许多日期和时间分析方法的字符串的格式设置选项。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatProvider">
      <summary>获取控制格式设置的对象。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatString">
      <summary>当一个日期或时间被表示成字符串时，获取控制格式生成的格式字符串。</summary>
      <returns>当一个日期或时间被表示成字符串时控制格式生成的格式字符串。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EmitTypeInformation">
      <summary>指定发出类型信息的频率。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Always">
      <summary>始终发出类型信息。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.AsNeeded">
      <summary>根据需要发出类型信息。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Never">
      <summary>从不发出类型信息。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.EnumMemberAttribute">
      <summary>指定字段为枚举成员并且应该序列化。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.EnumMemberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.EnumMemberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.EnumMemberAttribute.Value">
      <summary>获取或设置与应用了该属性的枚举成员关联的值。</summary>
      <returns>与枚举成员关联的值。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ExportOptions">
      <summary>表示可为 <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> 设置的选项。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ExportOptions.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.ExportOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.ExportOptions.DataContractSurrogate">
      <summary>获取或设置序列化代理项。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 接口实现，可用于自定义如何为特定类型导出 XML 架构表示形式。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ExportOptions.KnownTypes">
      <summary>获取在序列化或反序列化过程中可能会遇到的类型的集合。</summary>
      <returns>一个 KnownTypes 集合，它包含在序列化或反序列化过程中可能会遇到的类型。 将为此集合中由 <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> 指定的所有类型导出 XML 架构表示形式。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ExtensionDataObject">
      <summary>存储已经通过添加新成员扩展的版本化数据协定中的数据。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.IDataContractSurrogate">
      <summary>提供 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 在序列化、反序列化以及导出和导入 XML 架构文档 (XSD) 的过程中将一种类型替换为另一种类型所需的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)">
      <summary>在架构导出操作期间，向架构中插入非 null 返回值的批注。</summary>
      <returns>一个对象，它表示要插入到 XML 架构定义中的批注。</returns>
      <param name="memberInfo">一个对成员进行描述的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="dataContractType">
        <see cref="T:System.Type" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)">
      <summary>在架构导出操作期间，向架构中插入非 null 返回值的批注。</summary>
      <returns>一个对象，它表示要插入到 XML 架构定义中的批注。</returns>
      <param name="clrType">要替换的 CLR 类型。</param>
      <param name="dataContractType">要批注的数据协定类型。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)">
      <summary>在序列化、反序列化以及架构导入和导出期间，返回一个替换指定类型的数据协定类型。</summary>
      <returns>替换 <paramref name="type" /> 值的 <see cref="T:System.Type" />。 此类型必须可由 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 序列化。 例如，必须用 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 属性或序列化程序可识别的其他机制对它进行标记。</returns>
      <param name="type">要替换的 CLR 类型 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)">
      <summary>在反序列化期间，返回一个替换指定对象的对象。</summary>
      <returns>被替换的反序列化对象。 此对象的类型必须可由 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 序列化。 例如，必须用 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 属性或序列化程序可识别的其他机制对它进行标记。</returns>
      <param name="obj">要替换的反序列化对象。</param>
      <param name="targetType">应将被替换的对象分配到的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})">
      <summary>设置已知类型集合，以供自定义数据对象的序列化和反序列化过程使用。</summary>
      <param name="customDataTypes">一个要向其添加已知类型的、由 <see cref="T:System.Type" /> 组成的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)">
      <summary>在序列化期间，返回一个替换指定对象的对象。</summary>
      <returns>将要序列化的被替换对象。 该对象必须可由 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 序列化。 例如，必须用 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 属性或序列化程序可识别的其他机制对它进行标记。</returns>
      <param name="obj">要替换的对象。</param>
      <param name="targetType">应将被替换的对象分配到的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)">
      <summary>在架构导入期间，返回由该架构引用的类型。</summary>
      <returns>要用于所引用的类型的 <see cref="T:System.Type" />。</returns>
      <param name="typeName">架构中类型的名称。</param>
      <param name="typeNamespace">架构中类型的命名空间。</param>
      <param name="customData">表示插入到 XML 架构定义中的批注的对象，批注是可用于查找引用的类型的数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)">
      <summary>处理已从导入的架构生成的类型。</summary>
      <returns>一个包含所处理的类型的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
      <param name="typeDeclaration">一个要处理的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />，它表示在架构导入过程中生成的类型声明。</param>
      <param name="compileUnit">包含在架构导入过程中生成的其他代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Runtime.Serialization.IExtensibleDataObject">
      <summary>提供一个数据结构，用于存储 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 在反序列化一个用 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 属性标记的类型期间遇到的额外数据。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData">
      <summary>获取或设置包含额外数据的结构。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.ExtensionDataObject" />，它包含不被视为属于数据协定的数据。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IgnoreDataMemberAttribute">
      <summary>当应用于类型的成员时，指定该成员不是数据协定的一部分且没有进行序列化。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IgnoreDataMemberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.IgnoreDataMemberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.ImportOptions">
      <summary>表示可对 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 设置的选项。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ImportOptions.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.ImportOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.CodeProvider">
      <summary>获取或设置一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例，该实例提供了检查是否支持目标语言的特定选项的方法。</summary>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />，它提供了检查是否支持目标语言的特定选项的方法。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.DataContractSurrogate">
      <summary>获取或设置可用于修改在导入操作期间生成的代码的数据协定代理项。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 接口的能够处理架构导入的实现。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.EnableDataBinding">
      <summary>获取或设置一个值，该值指定生成的代码中的类型是否应实现 <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> 接口。</summary>
      <returns>如果生成的代码应实现 <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> 接口，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.GenerateInternal">
      <summary>获取或设置一个值，该值指定生成的代码将标记为 internal 还是 public。</summary>
      <returns>如果代码将标记为 internal，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.GenerateSerializable">
      <summary>获取或设置一个值，该值指定除了用 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性标记生成的数据协定类以外，是否还将用 <see cref="T:System.SerializableAttribute" /> 特性进行标记。</summary>
      <returns>如果要生成应用了 <see cref="T:System.SerializableAttribute" /> 的类，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.ImportXmlType">
      <summary>获取或设置一个值，该值确定是否将导入所有 XML 架构类型，甚至那些不符合数据协定架构的 XML 架构类型。</summary>
      <returns>如果要导入所有架构类型，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.Namespaces">
      <summary>获取一个字典，它包含在导入操作期间必须使用以便生成代码的、从数据协定命名空间到 CLR 命名空间的映射。</summary>
      <returns>一个包含命名空间映射的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.ReferencedCollectionTypes">
      <summary>获取一个类型集合，其中的类型表示在为集合生成代码时应引用的数据协定集合，如项列表或项字典。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含所引用的集合类型。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.ReferencedTypes">
      <summary>获取 <see cref="T:System.Collections.Generic.IList`1" />，其中包含生成的代码中所引用的类型。</summary>
      <returns>一个包含所引用的类型的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.InvalidDataContractException">
      <summary>
        <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 或 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 在序列化和反序列化的过程中遇到无效的数据协定时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含序列化和反序列化对象所需的数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它指定序列化和反序列化过程中的用户上下文。</param>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> 类的新实例。</summary>
      <param name="message">错误说明。</param>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误信息和内部异常初始化 <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> 类的新实例。</summary>
      <param name="message">错误说明。</param>
      <param name="innerException">原始 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.Runtime.Serialization.KnownTypeAttribute">
      <summary>指定 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 在序列化或反序列化给定类型时应识别的类型。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.String)">
      <summary>使用能够返回已知类型的 <see cref="T:System.Collections.IEnumerable" /> 的方法的名称初始化 <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> 类的新实例。</summary>
      <param name="methodName">能够返回在序列化或反序列化数据时使用的类型的 <see cref="T:System.Collections.IEnumerable" /> 的方法的名称。</param>
    </member>
    <member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> 类的新实例。</summary>
      <param name="type">在序列化或反序列化数据时作为已知类型包括在其中的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.Serialization.KnownTypeAttribute.MethodName">
      <summary>获取能够返回在序列化或反序列化过程中应识别的类型列表的方法名称。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含 <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> 类所定义的类型上的方法的名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.KnownTypeAttribute.Type">
      <summary>获取在 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 进行序列化或反序列化的过程中应识别的类型。</summary>
      <returns>在序列化或反序列化过程中使用的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.NetDataContractSerializer">
      <summary>使用提供的 .NET Framework 类型，将类型实例序列化和反序列化为 XML 流或文档。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Runtime.Serialization.StreamingContext)">
      <summary>使用提供的流上下文数据初始化 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 类的新实例。</summary>
      <param name="context">一个包含上下文数据的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
      <summary>使用提供的上下文数据初始化 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 类的新实例；此外，还指定了对象中要序列化的最大项数、指定是否忽略额外数据的参数、程序集加载方法以及代理项选择器。</summary>
      <param name="context">一个包含上下文数据的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。</param>
      <param name="ignoreExtensionDataObject">若要忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="assemblyFormat">一个 <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> 枚举值，指定用于查找和加载程序集的方法。</param>
      <param name="surrogateSelector">一个 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxItemsInObjectGraph" /> 值小于 0。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.String,System.String)">
      <summary>使用提供的 XML 根元素和命名空间初始化 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 类的新实例。</summary>
      <param name="rootName">XML 元素的名称，该元素包含要序列化或反序列化的内容。</param>
      <param name="rootNamespace">XML 元素的命名空间，该元素包含要序列化或反序列化的内容。</param>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.String,System.String,System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
      <summary>使用提供的上下文数据以及根名称和命名空间初始化 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 类的新实例；此外，还指定了对象中要序列化的最大项数、指定是否忽略额外数据的参数、程序集加载方法以及代理项选择器。</summary>
      <param name="rootName">XML 元素的名称，该元素包含要序列化或反序列化的内容。</param>
      <param name="rootNamespace">XML 元素的命名空间，该元素包含要序列化或反序列化的内容。</param>
      <param name="context">一个包含上下文数据的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。</param>
      <param name="ignoreExtensionDataObject">若要忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="assemblyFormat">一个 <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> 枚举值，指定用于查找和加载程序集的方法。</param>
      <param name="surrogateSelector">一个用于处理旧类型的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxItemsInObjectGraph" /> 值小于 0。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>使用两个类型为 <see cref="T:System.Xml.XmlDictionaryString" /> 的参数（包含用于指定内容的根元素和命名空间）初始化 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 类的新实例。</summary>
      <param name="rootName">一个包含 XML 元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />，该元素包含要序列化或反序列化的内容。</param>
      <param name="rootNamespace">一个包含 XML 元素的命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />，该元素包含要序列化或反序列化的内容。</param>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
      <summary>使用提供的上下文数据以及根名称和命名空间（作为 <see cref="T:System.Xml.XmlDictionaryString" /> 参数）初始化 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 类的新实例；此外，还指定了对象中要序列化的最大项数、指定是否忽略找到的额外数据的参数、程序集加载方法以及代理项选择器。</summary>
      <param name="rootName">一个包含内容的根元素的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="rootNamespace">一个包含根元素的命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="context">一个包含上下文数据的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。</param>
      <param name="ignoreExtensionDataObject">若要忽略类型扩展提供的数据，则为 true；否则为 false。</param>
      <param name="assemblyFormat">一个 <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> 枚举值，指定用于查找和加载程序集的方法。</param>
      <param name="surrogateSelector">一个用于处理旧类型的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxItemsInObjectGraph" /> 值小于 0。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.AssemblyFormat">
      <summary>获取一个指定用于查找和加载程序集的值。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> 枚举值，指定用于查找和加载程序集的方法。</returns>
      <exception cref="T:System.ArgumentException">设置的值与任何 <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> 值均不对应。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.Binder">
      <summary>获取或设置控制类加载的对象。</summary>
      <returns>与当前格式化程序一起使用的 <see cref="T:System.Runtime.Serialization.SerializationBinder" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.Context">
      <summary>获取或设置一个对象，它允许在序列化或反序列化时传递非常有用的上下文数据。</summary>
      <returns>一个包含上下文数据的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.Deserialize(System.IO.Stream)">
      <summary>将 XML 文档或流反序列化为对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="stream">一个包含要反序列化的 XML 的 <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.IgnoreExtensionDataObject">
      <summary>获取一个值，指定是否忽略对象扩展提供的数据。</summary>
      <returns>若要忽略类型扩展提供的数据，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>使用指定的读取器确定是否将 <see cref="T:System.Xml.XmlDictionaryReader" /> 定位在可反序列化的对象上。</summary>
      <returns>如果读取器位于要读取的流的开始元素处，则为 true；否则为 false。</returns>
      <param name="reader">一个包含要读取的 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>使用指定的读取器确定是否将 <see cref="T:System.Xml.XmlReader" /> 定位在可反序列化的对象上。</summary>
      <returns>如果读取器位于要读取的流的开始元素处，则为 true；否则为 false。</returns>
      <param name="reader">一个包含要读取的 XML 的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.MaxItemsInObjectGraph">
      <summary>获取对象中允许序列化的最大项数。</summary>
      <returns>对象中允许的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 流或文档并返回反序列化的对象；还检查对象数据是否符合用于创建序列化程序的名称和命名空间。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">用于读取 XML 流或文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="verifyObjectName">若要检查包含的 XML 元素名称和命名空间是否对应于用于构造序列化程序的根名称和根命名空间，则为 true；否则为 false 以跳过验证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 流或文档，并返回反序列化的对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 流或文档并返回反序列化的对象；还检查对象数据是否符合用于创建序列化程序的名称和命名空间。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
      <param name="verifyObjectName">若要检查包含的 XML 元素名称和命名空间是否对应于用于构造序列化程序的根名称和根命名空间，则为 true；否则为 false 以跳过验证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.Serialize(System.IO.Stream,System.Object)">
      <summary>使用指定的写入器序列化指定的对象图。</summary>
      <param name="stream">序列化时使用的 <see cref="T:System.IO.Stream" />。</param>
      <param name="graph">要序列化的对象。 将自动序列化此根对象的所有子对象。</param>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.SurrogateSelector">
      <summary>获取或设置一个对象，以帮助格式化程序选择要序列化的代理项。</summary>
      <returns>一个用于选择代理项的 <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入结束 XML 元素。</summary>
      <param name="writer">用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 写入结束 XML 元素。</summary>
      <param name="writer">用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 设置为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。</summary>
      <param name="writer">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入 XML 内容。</summary>
      <param name="writer">用于写入 XML 内容的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要序列化的对象。 将自动序列化此根对象的所有子对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 写入 XML 内容。</summary>
      <param name="writer">用于写入 XML 内容的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">要序列化的对象。 将自动序列化此根对象的所有子对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入开始 XML 元素。</summary>
      <param name="writer">用于写入 XML 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要序列化的对象。 将自动序列化此根对象的所有子对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 写入开始 XML 元素。</summary>
      <param name="writer">用于写入 XML 元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要序列化的对象。 将自动序列化此根对象的所有子对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Runtime.Serialization.XmlObjectSerializer">
      <summary>提供用于将对象序列化为 XML 流或文档的基类。 该类为抽象类。</summary>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>获取一个值，该值指定 <see cref="T:System.Xml.XmlDictionaryReader" /> 是否定位于可读取的 XML 元素上。</summary>
      <returns>如果读取器可以读取数据，则为 true；否则为 false。</returns>
      <param name="reader">一个用于读取 XML 流或文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>获取一个值，该值指定 <see cref="T:System.Xml.XmlReader" /> 是否定位于可读取的 XML 元素上。</summary>
      <returns>如果读取器定位于开始元素上，则为 true；否则为 false。</returns>
      <param name="reader">一个用于读取 XML 流或文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.IO.Stream)">
      <summary>使用 <see cref="T:System.IO.Stream" /> 读取 XML 流或文档，然后返回反序列化的对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="stream">用于读取 XML 流或文档的 <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 文档或流，然后返回反序列化的对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">用于读取 XML 文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 XML 流或文档并返回反序列化的对象；使用它还可以在序列化程序尝试读取数据之前指定它是否可以读取数据。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">用于读取 XML 文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="verifyObjectName">如果为 true，则检查外层 XML 元素名和命名空间是否对应于根名称和根命名空间；否则为 false 以跳过验证。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 读取 XML 文档或流，然后返回反序列化的对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">一个用于读取 XML 流或文档的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 读取 XML 文档或流并返回反序列化的对象；使用它还可以在序列化程序尝试读取数据之前指定它是否可以读取数据。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">用于读取 XML 文档或流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="verifyObjectName">如果为 true，则检查外层 XML 元素名和命名空间是否对应于根名称和根命名空间；若为 false 则跳过验证。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 将对象数据的末尾作为结束 XML 元素写入 XML 文档或流。</summary>
      <param name="writer">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 将对象数据的末尾作为结束 XML 元素写入 XML 文档或流。</summary>
      <param name="writer">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。</summary>
      <param name="stream">用于写入 XML 文档或流的 <see cref="T:System.IO.Stream" />。</param>
      <param name="graph">包含要写入流的数据的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。</summary>
      <param name="writer">用于将内容写入 XML 文档或流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。</summary>
      <param name="writer">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 仅将对象的内容写入 XML 文档或流。</summary>
      <param name="writer">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 仅将对象的内容写入 XML 文档或流。</summary>
      <param name="writer">一个用于写入 XML 文档或流的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">包含要写入的内容的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDictionaryWriter" /> 将对象数据的开始作为开始 XML 元素写入。</summary>
      <param name="writer">用于写入 XML 文档的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要序列化的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 将对象数据的开始作为开始 XML 元素写入。</summary>
      <param name="writer">用于写入 XML 文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">要序列化的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在序列化的实例有问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Runtime.Serialization.XmlSerializableServices">
      <summary>包含用于读取和编写 XML 的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.AddDefaultSchema(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
      <summary>生成具有指定类型名称的默认架构类型，并将它添加到指定的架构集中。</summary>
      <param name="schemas">要向其添加生成的架构类型的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <param name="typeQName">一个 <see cref="T:System.Xml.XmlQualifiedName" />，它指定要向其分配架构的类型名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 或 <paramref name="typeQName" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.ReadNodes(System.Xml.XmlReader)">
      <summary>从指定的读取器读取 XML 节点集，并返回结果。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 类型数组。</returns>
      <param name="xmlReader">一个用于执行读取操作的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 参数为 null。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">读取时遇到 null 节点。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.WriteNodes(System.Xml.XmlWriter,System.Xml.XmlNode[])">
      <summary>使用指定的编写器编写提供的节点。</summary>
      <param name="xmlWriter">一个用于执行编写操作的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="nodes">一个要编写的 <see cref="T:System.Xml.XmlNode" /> 类型数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.XPathQueryGenerator">
      <summary>给定表示数据协定的类和表示此协定的某个成员的元数据时，会为该成员生成 Xpath 查询。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Text.StringBuilder,System.Xml.XmlNamespaceManager@)">
      <summary>通过使用指定的协定数据类型、元数据元素数组、顶级元素和命名空间，根据数据协定创建 XPath。</summary>
      <returns>
        <see cref="T:System.String" />根据此类型和成员数据生成的 XPath。</returns>
      <param name="type">表示数据协定的类型。</param>
      <param name="pathToMember">元数据，是使用 <see cref="T:System.Type" /> 类的 <see cref="M:System.Type.GetMember" /> 方法生成，指向用于生成此查询的特定数据成员。</param>
      <param name="rootElementXpath">xpath 中的顶级元素。</param>
      <param name="namespaces">在数据协定中找到的 XML 命名空间及其前缀。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Xml.XmlNamespaceManager@)">
      <summary>通过使用指定的数据协定类型、元数据元素数组和命名空间，根据数据协定创建 XPath。</summary>
      <returns>
        <see cref="T:System.String" />根据此类型和成员数据生成的 XPath。</returns>
      <param name="type">表示数据协定的类型。</param>
      <param name="pathToMember">元数据，是使用 <see cref="T:System.Type" /> 类的 <see cref="M:System.Type.GetMember" /> 方法生成，指向用于生成此查询的特定数据成员。</param>
      <param name="namespaces">在数据协定中找到的 XML 命名空间及其前缀。</param>
    </member>
    <member name="T:System.Runtime.Serialization.XsdDataContractExporter">
      <summary>用于将数据协定中使用的一组 .NET Framework 类型转换成 XML 架构文件 (.xsd)。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)">
      <summary>使用指定的架构集初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> 类的新实例。</summary>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要导出的架构。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})">
      <summary>获取一个值，该值指示一组程序集中包含的公共语言运行时 (CLR) 类型集是否可以导出。</summary>
      <returns>如果类型可以导出，则为 true；否则为 false。</returns>
      <param name="assemblies">一个由 <see cref="T:System.Reflection.Assembly" /> 组成的 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含具有要导出类型的程序集。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的公共语言运行时 (CLR) 类型集是否可以导出。</summary>
      <returns>如果类型可以导出，则为 true；否则为 false。</returns>
      <param name="types">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含要导出的指定类型。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)">
      <summary>获取一个值，该值指示指定的公共语言运行时 (CLR) 类型是否可以导出。</summary>
      <returns>如果类型可以导出，则为 true；否则为 false。</returns>
      <param name="type">要导出的 <see cref="T:System.Type" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})">
      <summary>对指定的程序集集合中包含的类型进行转换。</summary>
      <param name="assemblies">一个由 <see cref="T:System.Reflection.Assembly" /> 组成的 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含要导出的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblies" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">集合中的一个 <see cref="T:System.Reflection.Assembly" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})">
      <summary>对传递给该方法的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的类型进行转换。</summary>
      <param name="types">一个由 <see cref="T:System.Type" /> 组成的 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含要导出的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">集合中的一个类型为 null。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)">
      <summary>将指定的 .NET Framework 类型转换成 XML 架构定义语言 (XSD) 架构。</summary>
      <param name="type">要转换成 XML 架构的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)">
      <summary>返回 <see cref="T:System.Type" /> 的顶级名称和命名空间。</summary>
      <returns>表示此 <see cref="T:System.Type" /> 的顶级名称和命名空间的 <see cref="T:System.Xml.XmlQualifiedName" />，它在写入此对象时被写入到流中。</returns>
      <param name="type">要查询的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)">
      <summary>返回指定类型的 XML 架构类型。</summary>
      <returns>一个包含 XML 架构的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
      <param name="type">要为其返回架构的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)">
      <summary>返回 <see cref="T:System.Type" /> 的协定名称和协定命名空间。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlQualifiedName" />，表示该类型的协定名称及其命名空间。</returns>
      <param name="type">所导出的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractExporter.Options">
      <summary>获取或设置一个 <see cref="T:System.Runtime.Serialization.ExportOptions" />，其中包含可为导出操作设置的选项。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.ExportOptions" />，它包含用于自定义将类型导出到架构的方式的选项。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractExporter.Schemas">
      <summary>获取导出的 XML 架构的集合。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含在调用 <see cref="Overload:System.Runtime.Serialization.XsdDataContractExporter.Export" /> 方法后从公共语言运行库 (CLR) 类型集转换而来的架构。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.XsdDataContractImporter">
      <summary>用于将一组 XML 架构文件 (.xsd) 转换为公共语言运行库 (CLR) 类型。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
      <summary>使用将用于生成 CLR 代码的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 类的新实例。</summary>
      <param name="codeCompileUnit">将用于存储代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所包含的架构是否可以转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <returns>如果架构可以转换为数据协定类型，则为 true；否则为 false。</returns>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要转换的架构。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 参数为 null。</exception>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">导入操作所涉及的数据协定无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的一组指定类型是否可以转换为生成到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中的 CLR 类型。</summary>
      <returns>如果架构可以转换，则为 true；否则为 false。</returns>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要转换的架构。</param>
      <param name="typeNames">一个类型为 <see cref="T:System.Xml.XmlQualifiedName" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />，它表示要导入的一组架构类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 或 <paramref name="typeNames" /> 参数为 null。</exception>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">导入操作所涉及的数据协定无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的特定架构元素是否可以导入。</summary>
      <returns>如果该元素可以导入，则为 true；否则为 false。</returns>
      <param name="schemas">一个要导入的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <param name="element">一个要签入架构集的特定 <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 或 <paramref name="element" /> 参数为 null。</exception>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">导入操作所涉及的数据协定无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
      <summary>获取一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所包含的架构是否可以转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <returns>如果架构可以转换为数据协定类型，则为 true；否则为 false。</returns>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含架构表示。</param>
      <param name="typeName">一个类型为 <see cref="T:System.Xml.XmlQualifiedName" /> 的 <see cref="T:System.Collections.IList" />，它可指定需要从 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 导入的架构类型的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 或 <paramref name="typeName" /> 参数为 null。</exception>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">导入操作所涉及的数据协定无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
      <summary>获取一个用于存储已生成的 CLR 类型的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeCompileUnit" />，用于存储已生成的 CLR 类型。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
      <summary>返回对 CLR 类型的 <see cref="T:System.CodeDom.CodeTypeReference" /> 引用，该 CLR 类型是为具有指定 <see cref="T:System.Xml.XmlQualifiedName" /> 的架构类型生成的。</summary>
      <returns>对 CLR 类型的 <see cref="T:System.CodeDom.CodeTypeReference" /> 引用，该 CLR 类型是为具有指定 <paramref name="typeName" /> 的架构类型生成的。</returns>
      <param name="typeName">指定要查找的架构类型的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
      <summary>返回指定的 XML 限定元素和架构元素的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" />，它表示为指定的架构类型生成的类型。</returns>
      <param name="typeName">一个 <see cref="T:System.Xml.XmlQualifiedName" />，它指定要查找的架构类型的 XML 限定名称。</param>
      <param name="element">一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，它指定 XML 架构中的元素。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
      <summary>返回一个 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象列表，这些对象表示在为指定架构类型生成代码时生成的已知类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> 类型的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
      <param name="typeName">一个 <see cref="T:System.Xml.XmlQualifiedName" />，它表示要为其查找已知类型的架构类型。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
      <summary>将 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的一组指定 XML 架构转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要为其生成 CLR 类型的架构表示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
      <summary>将 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的一组指定架构类型转换为生成到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中的 CLR 类型。</summary>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含架构表示。</param>
      <param name="typeNames">一个类型为 <see cref="T:System.Xml.XmlQualifiedName" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />，它表示要导入的一组架构类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
      <summary>将指定的 XML 架构集中的指定架构元素转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />，并返回用于表示指定元素的数据协定名称的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlQualifiedName" />，它表示指定的元素。</returns>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要转换的架构。</param>
      <param name="element">一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，它表示要转换的特定架构元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 或 <paramref name="element" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
      <summary>将 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的指定 XML 架构类型转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含架构表示。</param>
      <param name="typeName">一个 <see cref="T:System.Xml.XmlQualifiedName" />，它表示要导入的特定架构类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemas" /> 或 <paramref name="typeName" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
      <summary>获取或设置一个 <see cref="T:System.Runtime.Serialization.ImportOptions" />，它包含导入操作的可设置选项。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.ImportOptions" />，它包含可设置的选项。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection">
      <summary>处理用于配置 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 所执行的序列化的 XML 元素。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DataContractSerializerSection.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DataContractSerializerSection.DeclaredTypes">
      <summary>获取添加到 <see cref="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes" /> 属性的类型的集合。</summary>
      <returns>一个包含已知类型的 <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement">
      <summary>处理用于添加已知类型的 XML 元素，这些已知类型用于 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 所执行的序列化。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElement.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElement.#ctor(System.String)">
      <summary>用指定的类型名称初始化 <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" /> 类的新实例。</summary>
      <param name="typeName">需要已知类型集合的类型的名称。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElement.KnownTypes">
      <summary>获取已知类型的集合。</summary>
      <returns>一个包含已知类型的 <see cref="T:System.Runtime.Serialization.Configuration.TypeElementCollection" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElement.Type">
      <summary>获取或设置需要已知类型集合的声明类型的名称。</summary>
      <returns>声明类型的名称。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection">
      <summary>处理用于配置 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 所执行的 XML 序列化的 XML 元素。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Add(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
      <summary>添加指定的配置元素。</summary>
      <param name="element">要相加的 <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Clear">
      <summary>清除所有项的集合。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Contains(System.String)">
      <summary>如果集合包含由类型名称指定的项，则返回一个值。</summary>
      <returns>如果集合包含指定的项，则为 true；否则为 false。</returns>
      <param name="typeName">要搜索的配置元素的名称。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.IndexOf(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <returns>指定的配置元素的索引；否则为 -1。</returns>
      <param name="element">要查找的 <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" />。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Item(System.Int32)">
      <summary>返回由索引指定的配置元素。</summary>
      <returns>由索引指定的 <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" />。</returns>
      <param name="index">要访问的元素的索引。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Item(System.String)">
      <summary>返回由键指定的项。</summary>
      <returns>由键指定的配置元素。</returns>
      <param name="typeName">要返回的类型的名称（用作键）。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Remove(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Remove(System.String)">
      <summary>移除由键指定的配置元素。</summary>
      <param name="typeName">要移除的配置元素的类型名称（用作键）。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引位置的配置元素。</summary>
      <param name="index">要移除的配置元素的索引。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.NetDataContractSerializerSection">
      <summary>处理用于配置 <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> 所执行的序列化的 XML 元素。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.NetDataContractSerializerSection.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.NetDataContractSerializerSection" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.NetDataContractSerializerSection.EnableUnsafeTypeForwarding">
      <summary>获取指示不安全类型转移是否被启用的值。</summary>
      <returns>如果启用不安全的类型转发，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.ParameterElement">
      <summary>处理用于配置 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 所执行的 XML 序列化的 XML 元素。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor(System.Int32)">
      <summary>使用指定的索引初始化 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> 类的新实例。</summary>
      <param name="index">指定参数集合中的一个位置。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor(System.String)">
      <summary>用指定的类型名称初始化 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> 类的新实例。</summary>
      <param name="typeName">参数的类型名称。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Index">
      <summary>获取或设置泛型已知类型的位置。</summary>
      <returns>参数在作为容器的泛型声明类型中的位置。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Parameters">
      <summary>获取参数的集合。</summary>
      <returns>一个包含所有参数的 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Type">
      <summary>获取或设置泛型已知类型的参数的类型名称。</summary>
      <returns>参数的类型名称。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.ParameterElementCollection">
      <summary>处理用于配置 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 所执行的序列化的 XML 元素。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Add(System.Runtime.Serialization.Configuration.ParameterElement)">
      <summary>将一个元素添加到参数元素的集合中。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> 元素。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Clear">
      <summary>移除集合的所有成员。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElementCollection.CollectionType">
      <summary>获取配置中的参数集合的类型。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationElementCollectionType" />，它包含配置中的参数集合的类型。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Contains(System.String)">
      <summary>获取或设置一个值，该值指定是否在集合中找到了命名类型。</summary>
      <returns>如果该元素存在，则为 true；否则为 false。</returns>
      <param name="typeName">要查找的类型的名称。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.IndexOf(System.Runtime.Serialization.Configuration.ParameterElement)">
      <summary>获取集合中指定元素的位置。</summary>
      <returns>指定元素的位置。</returns>
      <param name="element">要查找的 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> 元素。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定位置的元素。</summary>
      <returns>集合中的 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" />。</returns>
      <param name="index">要获取或设置的元素在集合中的位置。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Remove(System.Runtime.Serialization.Configuration.ParameterElement)">
      <summary>从集合中移除指定的元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定位置处的元素。</summary>
      <param name="index">要移除的元素的位置。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup">
      <summary>处理用于配置 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 所执行的序列化的 XML 元素。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.SerializationSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.SerializationSectionGroup.DataContractSerializer">
      <summary>获取用于设置已知类型集合的 <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection" />。</summary>
      <returns>用于序列化配置节的 <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.SerializationSectionGroup.GetSectionGroup(System.Configuration.Configuration)">
      <summary>获取指定配置的序列化配置节。</summary>
      <returns>一个表示配置节的 <see cref="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup" />。</returns>
      <param name="config">一个表示要检索的配置的 <see cref="T:System.Configuration.Configuration" />。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.SerializationSectionGroup.NetDataContractSerializer">
      <summary>获取用于设置已知类型集合的 <see cref="T:System.Runtime.Serialization.Configuration.NetDataContractSerializerSection" />。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.Configuration.NetDataContractSerializerSection" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.TypeElement">
      <summary>处理用于配置 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 所执行的序列化的 XML 元素。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElement.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElement.#ctor(System.String)">
      <summary>用指定的类型名称初始化 <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" /> 类的新实例。</summary>
      <param name="typeName">使用已知类型的类型的名称。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElement.Index">
      <summary>获取或设置元素的位置。</summary>
      <returns>元素的位置。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElement.Parameters">
      <summary>获取参数的集合。</summary>
      <returns>一个包含类型的参数的 <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElement.Type">
      <summary>获取或设置类型的名称。</summary>
      <returns>类型名称。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.TypeElementCollection">
      <summary>处理用于配置已知类型的 XML 元素，这些已知类型用于 <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> 所执行的序列化。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Configuration.TypeElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Add(System.Runtime.Serialization.Configuration.TypeElement)">
      <summary>将指定的元素添加到集合中。</summary>
      <param name="element">一个表示要添加的已知类型的 <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Clear">
      <summary>移除集合的所有成员。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElementCollection.CollectionType">
      <summary>获取元素集合，该集合表示使用已知类型的类型。</summary>
      <returns>一个包含元素对象的 <see cref="T:System.Configuration.ConfigurationElementCollectionType" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.IndexOf(System.Runtime.Serialization.Configuration.TypeElement)">
      <summary>返回指定元素的位置。</summary>
      <returns>指定元素的位置。</returns>
      <param name="element">要在集合中查找的 <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" />。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElementCollection.Item(System.Int32)">
      <summary>按照位置返回集合中的特定成员。</summary>
      <returns>指定位置的元素。</returns>
      <param name="index">要返回的项的位置。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Remove(System.Runtime.Serialization.Configuration.TypeElement)">
      <summary>从集合中移除指定的元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定位置处的元素。</summary>
      <param name="index">要从中移除元素的集合中的位置。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      <summary>将对象序列化为 JavaScript 对象表示法 (JSON)，并将 JSON 数据反序列化为对象。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象以及可在对象图中呈现的已知类型的集合。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="knownTypes">包含可在对象图中呈现类型的 <see cref="T:System.Type" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了可在对象图中呈现的已知类型的列表、要序列化或反序列化的最大图项数、是忽略意外数据还是发出类型信息以及自定义序列化的代理项。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="knownTypes">一个包含内容的根元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="maxItemsInObjectGraph">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的类型。</param>
      <param name="ignoreExtensionDataObject">若要在序列化时忽略 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> 接口并在反序列化时忽略意外数据，则为 true；否则为 false。 默认值为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <param name="alwaysEmitTypeInformation">若要发出类型信息，则为 true；否则为 false。 默认值为 false。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型和序列化设置的对象。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="settings">JSON 序列化程序序列化程序设置。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)">
      <summary>使用参数指定的 XML 根元素初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">XML 元素的名称，该元素包含要序列化或反序列化的内容。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>使用参数指定的 XML 根元素初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象以及可在对象图中呈现的已知类型的集合。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">XML 元素的名称，该元素包含要序列化或反序列化的内容。 默认值为“root”。</param>
      <param name="knownTypes">包含可在对象图中呈现类型的 <see cref="T:System.Type" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了 XML 元素的根名称、可在对象图中呈现的已知类型的列表、要序列化或反序列化的最大图项数、是忽略意外数据还是发出类型信息以及自定义序列化的代理项。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">XML 元素的名称，该元素包含要序列化或反序列化的内容。 默认值为“root”。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的类型。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" /> 属性返回的值。</param>
      <param name="ignoreExtensionDataObject">若要在序列化时忽略 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> 接口并在反序列化时忽略意外数据，则为 true；否则为 false。 默认值为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <param name="alwaysEmitTypeInformation">若要发出类型信息，则为 true；否则为 false。 默认值为 false。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)">
      <summary>使用类型为 <see cref="T:System.Xml.XmlDictionaryString" /> 的参数指定的 XML 根元素初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">一个包含内容的根元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>使用类型为 <see cref="T:System.Xml.XmlDictionaryString" /> 的参数指定的 XML 根元素初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象以及可在对象图中呈现的已知类型的集合。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">一个包含内容的根元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的类型。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 类的新实例，以便序列化或反序列化指定类型的对象。 此方法还指定了 XML 元素的根名称、可在对象图中呈现的已知类型的列表、要序列化或反序列化的最大图项数、是忽略意外数据还是发出类型信息以及自定义序列化的代理项。</summary>
      <param name="type">序列化或反序列化的实例的类型。</param>
      <param name="rootName">一个包含内容的根元素名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> 的一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含可在对象图中呈现的已知类型。</param>
      <param name="maxItemsInObjectGraph">图中要序列化或反序列化的最大项数。 默认值为 <see cref="F:System.Int32.MaxValue" /> 属性返回的值。</param>
      <param name="ignoreExtensionDataObject">若要在序列化时忽略 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> 接口并在反序列化时忽略意外数据，则为 true；否则为 false。 默认值为 false。</param>
      <param name="dataContractSurrogate">一个用于自定义序列化过程的 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实现。</param>
      <param name="alwaysEmitTypeInformation">若要发出类型信息，则为 true；否则为 false。 默认值为 false。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractSurrogate">
      <summary>获取给定 <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 实例的当前活动代理项类型。 代理项可以扩展序列化或反序列化过程。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> 类的实现。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat">
      <summary>获取在对象关系图中日期和时间种类项的格式。</summary>
      <returns>在对象关系图中日期和时间种类项的格式。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation">
      <summary>获取或设置用于发出类型信息的数据协定 JSON 序列化程序设置。</summary>
      <returns>数据协定 JSON 序列化程序设置可发出类型信息。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.IgnoreExtensionDataObject">
      <summary>获取一个值，指定在反序列化时是否忽略未知数据以及在序列化时是否忽略 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> 接口。</summary>
      <returns>若要忽略未知数据和 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>获取一个值，指定 <see cref="T:System.Xml.XmlDictionaryReader" /> 是否定位在 XML 元素上，而该元素表示序列化程序可从中进行反序列化的对象。</summary>
      <returns>如果正确定位了读取器，则为 true；否则为 false。</returns>
      <param name="reader">用于读取从 JSON 映射的 XML 流的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>确定是否将 <see cref="T:System.Xml.XmlReader" /> 定位在可反序列化的对象上。</summary>
      <returns>如果正确定位了读取器，则为 true；否则为 false。</returns>
      <param name="reader">用于读取 XML 流的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <summary>获取一个类型集合，这些类型可呈现在使用此 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 实例序列化的对象图中。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，它包含作为已知类型传入 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 构造函数的预期类型。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.MaxItemsInObjectGraph">
      <summary>获取序列化程序通过一次读取或写入调用在对象图中序列化或反序列化的最大项数。</summary>
      <returns>要序列化或反序列化的最大项数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">项数超出了最大值。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <summary>以 JSON（JavaScript 对象表示法）格式读取文档流，并返回反序列化的对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="stream">要读取的 <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取从 JSON（JavaScript 对象表示法）映射的 XML 文档，并返回反序列化的对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">一个用于读取从 JSON 映射的 XML 文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取从 JSON 映射的 XML 文档并返回反序列化的对象；它还可用于指定序列化程序在尝试反序列化之前是否应验证其定位在相应的元素上。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">一个用于读取从 JSON 映射的 XML 文档的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="verifyObjectName">若要检查包含的 XML 元素名称和命名空间是否对应于预期的名称和命名空间，则为 true；否则为 false 以跳过验证。 默认值为 true。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 读取从 JSON（JavaScript 对象表示法）映射的 XML 文档，并返回反序列化的对象。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">一个用于读取从 JSON 映射的 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 读取从 JSON 映射的 XML 文档并返回反序列化的对象；它还可用于指定序列化程序在尝试反序列化之前是否应验证其定位在相应的元素上。</summary>
      <returns>反序列化的对象。</returns>
      <param name="reader">一个用于读取从 JSON 映射的 XML 文档的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="verifyObjectName">若要检查包含的 XML 元素名称和命名空间是否对应于预期的名称和命名空间，则为 true；否则为 false 以跳过验证。 默认值为 true。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes">
      <summary>获取或设置指定是否序列化只读类型的值。</summary>
      <returns>仅序列化读取类型，则为 true；否则 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat">
      <summary>获取或设置指定是否使用简单字典格式的值。</summary>
      <returns>使用简单的字典格式，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 将结束 XML 元素写入可映射到 JavaScript 对象表示法 (JSON) 的 XML 文档。</summary>
      <param name="writer">用于写入要映射到 JSON 的 XML 文档的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 将结束 XML 元素写入可映射到 JavaScript 对象表示法 (JSON) 的 XML 文档。</summary>
      <param name="writer">用于写入映射到 JSON 的 XML 文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>将指定对象序列化为 JavaScript 对象表示法 (JSON) 数据，并将生成的 JSON 写入流中。</summary>
      <param name="stream">用于写入 <see cref="T:System.IO.Stream" />。</param>
      <param name="graph">包含要写入流的数据的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>将对象序列化为可映射到 JavaScript 对象表示法 (JSON) 的 XML。 使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入所有对象数据（包括开始 XML 元素、内容和结束元素）。</summary>
      <param name="writer">用于写入要映射到 JSON 的 XML 文档或流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">包含要写入的数据的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>将对象序列化为可映射到 JavaScript 对象表示法 (JSON) 的 XML。 使用 <see cref="T:System.Xml.XmlWriter" /> 写入所有对象数据（包括开始 XML 元素、内容和结束元素）。</summary>
      <param name="writer">用于写入要映射到 JSON 的 XML 文档的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">包含要写入的数据的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入可映射到 JavaScript 对象表示法 (JSON) 的 XML 内容。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要写入的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 写入可映射到 JavaScript 对象表示法 (JSON) 的 XML 内容。</summary>
      <param name="writer">用于写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">要写入的对象。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的类型不符合数据协定规则。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 特性未应用于该类型。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超出要序列化的对象的最大数量。 请检查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 属性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 写入开始 XML 元素，以便将对象序列化为可映射到 JavaScript 对象表示法 (JSON) 的 XML。</summary>
      <param name="writer">用于写入 XML 开始元素的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要写入的对象。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 写入开始 XML 元素，以便将对象序列化为可映射到 JavaScript 对象表示法 (JSON) 的 XML。</summary>
      <param name="writer">用于写入 XML 开始元素的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">要写入的对象。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings">
      <summary>指定 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 设置。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.DataContractSurrogate">
      <summary>获取或设置给定 IDataContractSurrogate 实例的当前活动代理项类型。</summary>
      <returns>为给定 IDataContractSurrogate 实例的当前活动的代理项类型。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.DateTimeFormat">
      <summary>获取或设置定义显示日期和时间的的相应于区域性格式的 DateTimeFormat。</summary>
      <returns>DateTimeFormat 定义适合区域性的、显示日期和时间的格式。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.EmitTypeInformation">
      <summary>获取或设置用于发出类型信息的数据协定 JSON 序列化程序设置。</summary>
      <returns>数据协定 JSON 序列化程序设置可发出类型信息。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.IgnoreExtensionDataObject">
      <summary>获取或设置一个值，该值指定在对类进行序列化或反序列化时是否要忽略由该类扩展提供的数据。</summary>
      <returns>如果在对该类进行序列化或反序列化时忽略由该类的扩展提供的数据，则为 True，否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.KnownTypes">
      <summary>获取或设置可能存在于通过使用此实例 DataContractSerializerSettings 所序列化的对象关系图中的类型集合。</summary>
      <returns>一个类型集合，这些类型可能出现在使用此 DataContractSerializerSettings 实例序列化的对象图中。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.MaxItemsInObjectGraph">
      <summary>获取或设置一个要序列化或反序列化的对象图中的最大项数。</summary>
      <returns>要序列化或反序列化的对象图中的最大项数。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.RootName">
      <summary>获取或设置选定对象的根名称。</summary>
      <returns>选中对象的根名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.SerializeReadOnlyTypes">
      <summary>获取或设置指定是否序列化只读类型的值。</summary>
      <returns>仅序列化读取类型，则为 True；否则 false。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.UseSimpleDictionaryFormat">
      <summary>获取或设置指定是否使用简单字典格式的值。</summary>
      <returns>使用简单的字典格式，则为 True；否则为 false。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer">
      <summary>指定在重用 JavaScript 对象表示法 (JSON) 读取器从特定流或缓冲区中读取数据时对该读取器进行初始化的接口。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>将支持 JavaScript 对象表示法 (JSON) 的读取器重新初始化为包含 JSON 编码数据的指定缓冲区。</summary>
      <param name="buffer">要从中读取数据的输入 <see cref="T:System.Byte" /> 缓冲区数组。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encoding">读取器使用的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">在读取器关闭时调用的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委托。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>将支持 JavaScript 对象表示法 (JSON) 的读取器重新初始化为包含 JSON 编码数据的指定流。</summary>
      <param name="stream">要从中读取数据的输入 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">读取器使用的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">读取器关闭时调用的委托。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
      <summary>指定在重用 JavaScript 对象表示法 (JSON) 编写器向特定输出流写入数据时对该编写器进行初始化的接口。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>使用指定的字符编码将 JavaScript 对象表示法 (JSON) 编写器初始化（或重新初始化）为指定的输出流。</summary>
      <param name="stream">编写器将写入到的输出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">指定输出流字符编码的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="ownsStream">如果为 true，则在完成时写入器关闭输出流；否则为 false。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary>生成 <see cref="T:System.Xml.XmlDictionaryReader" /> 实例和 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，前者可以从流或缓冲区中读取 JavaScript 对象表示法 (JSON) 编码数据，并将其映射到 XML Infoset；后者可以将 XML Infoset 映射到 JSON，并将 JSON 编码数据写入流中。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区（具有指定大小、偏移量和字符编码）映射到 XML Infoset。</summary>
      <returns>一个可读取 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
      <param name="buffer">要从中读取数据的输入 <see cref="T:System.Byte" /> 缓冲区数组。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encoding">指定读取器使用的字符编码的 <see cref="T:System.Text.Encoding" />。 如果指定 null 作为值，读取器将尝试自动检测编码。</param>
      <param name="quotas">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">在读取器关闭时调用的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委托。 默认值为 null。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区（具有指定大小和偏移量）映射到 XML Infoset。</summary>
      <returns>一个可读取 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
      <param name="buffer">要从中读取数据的输入 <see cref="T:System.Byte" /> 缓冲区数组。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="quotas">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码缓冲区映射到 XML Infoset。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以处理 JavaScript 对象表示法 (JSON) 数据。</returns>
      <param name="buffer">要从中读取数据的输入 <see cref="T:System.Byte" /> 缓冲区数组。</param>
      <param name="quotas">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码流（具有指定大小和偏移量）映射到 XML Infoset。</summary>
      <returns>一个可读取 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
      <param name="stream">要从中读取数据的输入 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">指定读取器使用的字符编码的 <see cref="T:System.Text.Encoding" />。 如果指定 null 作为值，读取器将尝试自动检测编码。</param>
      <param name="quotas">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">在读取器关闭时调用的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委托。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以将 JavaScript 对象表示法 (JSON) 编码流映射到 XML Infoset。</summary>
      <returns>一个可读取 JavaScript 对象表示法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
      <param name="stream">要从中读取数据的输入 <see cref="T:System.IO.Stream" />。</param>
      <param name="quotas">用于防止在读取不受信任数据时受到拒绝服务攻击的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它将 JSON 编码数据写入流中。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</returns>
      <param name="stream">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它使用指定的字符编码将 JSON 编码数据写入流中。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</returns>
      <param name="stream">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">指定编写器使用的字符编码的 <see cref="T:System.Text.Encoding" />。 默认编码为 UTF-8。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它使用指定的字符编码将 JSON 编码数据写入流中。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</returns>
      <param name="stream">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">指定编写器使用的字符编码的 <see cref="T:System.Text.Encoding" />。 默认编码为 UTF-8。</param>
      <param name="ownsStream">如果为 true，则在完成时写入器关闭输出流；否则为 false。 默认值为 true。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它使用指定的字符将 JSON 编码数据写入流中。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</returns>
      <param name="stream">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">指定编写器使用的字符编码的 <see cref="T:System.Text.Encoding" />。 默认编码为 UTF-8。</param>
      <param name="ownsStream">如果为 true，则在完成时写入器关闭输出流；否则为 false。 默认值为 true。</param>
      <param name="indent">如果 true，输出使用多行的布局，恰当地缩进每个级别；否则， false。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它使用指定的字符将 JSON 编码数据写入流中。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它基于 XML Infoset 将 JSON 编码数据写入流中。</returns>
      <param name="stream">JSON 编写器的输出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">指定编写器使用的字符编码的 <see cref="T:System.Text.Encoding" />。 默认编码为 UTF-8。</param>
      <param name="ownsStream">如果为 true，则在完成时写入器关闭输出流；否则为 false。 默认值为 true。</param>
      <param name="indent">如果 true，输出使用多行的布局，恰当地缩进每个级别；否则， false。</param>
      <param name="indentChars">用于缩进每个级别的字符串。</param>
    </member>
    <member name="T:System.Xml.IFragmentCapableXmlDictionaryWriter">
      <summary>包含由 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实现时允许处理 XML 片段的属性和方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment">
      <summary>获取一个值，该值指示此 <see cref="T:System.Xml.XmlDictionaryWriter" /> 是否能够处理 XML 片段。</summary>
      <returns>如果此 <see cref="T:System.Xml.XmlDictionaryWriter" /> 能够处理 XML 片段，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment">
      <summary>结束 XML 片段的处理。</summary>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
      <summary>开始 XML 片段的处理。</summary>
      <param name="stream">要写入的流。</param>
      <param name="generateSelfContainedTextFragment">如果为 true，则在片段内部使用在片段外部声明的命名空间时，会在片段内部重新声明命名空间；如果为 false，则不重新声明命名空间。</param>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
      <summary>将 XML 片段写入编写器的基础流。</summary>
      <param name="buffer">要写入的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始写入数据的位置。</param>
      <param name="count">要写入 <paramref name="buffer" /> 的字节数。</param>
    </member>
    <member name="T:System.Xml.IStreamProvider">
      <summary>表示一个可以由提供流的类来实现的接口。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IStreamProvider.GetStream">
      <summary>获取流。</summary>
      <returns>
        <see cref="T:System.IO.Stream" /> 对象。</returns>
    </member>
    <member name="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
      <summary>将流释放到输出。</summary>
      <param name="stream">正在释放的流。</param>
    </member>
    <member name="T:System.Xml.IXmlBinaryReaderInitializer">
      <summary>提供重新初始化二进制读取器以读取新文档的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>使用给定的输入缓冲区重新初始化二进制读取器。</summary>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> 使用。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session">
        <see cref="T:System.Xml.XmlBinaryReaderSession" /> 使用。</param>
      <param name="onClose">读取器关闭时调用的委托。</param>
    </member>
    <member name="M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>使用给定的输入流重新初始化二进制读取器。</summary>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> 使用。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session">
        <see cref="T:System.Xml.XmlBinaryReaderSession" /> 使用。</param>
      <param name="onClose">读取器关闭时调用的委托。</param>
    </member>
    <member name="T:System.Xml.IXmlBinaryWriterInitializer">
      <summary>指定从此接口派生的 XML 二进制编写器的实现要求。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlBinaryWriterInitializer.SetOutput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
      <summary>指定实现此方法的 XML 二进制编写器的初始化要求。</summary>
      <param name="stream">要写入的流。</param>
      <param name="dictionary">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="session">要使用的 <see cref="T:System.Xml.XmlBinaryWriterSession" />。</param>
      <param name="ownsStream">如果为 true，则完成时编写器关闭流；否则为 false。</param>
    </member>
    <member name="T:System.Xml.IXmlDictionary">
      <summary>一个定义必须实现 XML 字典以由 <see cref="T:System.Xml.XmlDictionaryReader" /> 和 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实现使用这一协定的 interface。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>尝试在字典中查找项。</summary>
      <returns>如果键在字典中，则为 true；否则为 false。</returns>
      <param name="key">要查找的键。</param>
      <param name="result">如果已定义 <paramref name="key" />，则 <see cref="T:System.Xml.XmlDictionaryString" /> 映射到该键；否则为 null。</param>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>检查字典中是否有指定的字符串值。</summary>
      <returns>如果值在字典中，则为 true；否则为 false。</returns>
      <param name="value">要检查的字符串值。</param>
      <param name="result">如果找到，则为相应的 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 null。</param>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>检查字典中是否有指定的 <see cref="T:System.Xml.XmlDictionaryString" />。</summary>
      <returns>如果 <see cref="T:System.Xml.XmlDictionaryString" /> 在字典中，则为 true；否则为 false。</returns>
      <param name="value">要检查的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="result">如果找到，则为匹配的 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 null。</param>
    </member>
    <member name="T:System.Xml.IXmlMtomReaderInitializer">
      <summary>指定从此接口派生的 XML MTOM 读取器的实现要求。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlMtomReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>指定读取缓冲区的 XML MTOM 读取器的初始化要求。</summary>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encodings">输入的可能的字符编码。</param>
      <param name="contentType">消息的内容类型。 如果 MIME 类型存在于读取的文档中，则可以为 null。</param>
      <param name="quotas">要应用于读取器的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="maxBufferSize">允许的缓冲区最大大小。</param>
      <param name="onClose">发生 onClose 事件时要使用的委托。</param>
    </member>
    <member name="M:System.Xml.IXmlMtomReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>指定读取流的 XML MTOM 读取器的初始化要求。</summary>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="encodings">流的可能的字符编码。</param>
      <param name="contentType">消息的内容类型。 如果 MIME 类型存在于读取的文档中，则可以为 null。</param>
      <param name="quotas">要应用于读取器的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="maxBufferSize">允许的缓冲区最大大小。</param>
      <param name="onClose">发生 onClose 事件时要使用的委托。</param>
    </member>
    <member name="T:System.Xml.IXmlMtomWriterInitializer">
      <summary>当由 MTOM 编写器实现时，此接口可确保初始化 MTOM 编写器。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlMtomWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>当由 MTOM 编写器实现时，初始化 MTOM 编写器。</summary>
      <param name="stream">要写入的流。</param>
      <param name="encoding">流的字符编码。</param>
      <param name="maxSizeInBytes">在编写器中缓冲的最大字节数。</param>
      <param name="startInfo">ContentType SOAP 标头中的属性，设置为“Application/soap+xml”。</param>
      <param name="boundary">MIME 边界字符串。</param>
      <param name="startUri">MIME 部分的 URI。</param>
      <param name="writeMessageHeaders">如果为 true，则写入消息头。</param>
      <param name="ownsStream">如果为 true，则完成时编写器关闭流；否则为 false。</param>
    </member>
    <member name="T:System.Xml.IXmlTextReaderInitializer">
      <summary>指定从此接口派生的 XML 文本读取器的实现要求。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlTextReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>指定读取缓冲区的 XML 文本读取器的初始化要求。</summary>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encoding">流的字符编码。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">读取器关闭时要调用的委托。</param>
    </member>
    <member name="M:System.Xml.IXmlTextReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>指定读取流的 XML 文本读取器的初始化要求。</summary>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="encoding">流的字符编码。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">读取器关闭时要调用的委托。</param>
    </member>
    <member name="T:System.Xml.IXmlTextWriterInitializer">
      <summary>指定从此接口派生的 XML 文本编写器的实现要求。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlTextWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>指定实现此方法的 XML 文本编写器的初始化要求。</summary>
      <param name="stream">要写入的流。</param>
      <param name="encoding">流的字符编码。</param>
      <param name="ownsStream">如果为 true，则完成时编写器关闭流；否则为 false。</param>
    </member>
    <member name="T:System.Xml.OnXmlDictionaryReaderClose">
      <summary>关闭读取器时回调方法的 delegate。</summary>
      <param name="reader">触发 OnClose 事件的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.UniqueId">
      <summary>为 GUID 优化的唯一标识符。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor">
      <summary>使用新的唯一 GUID 创建此类的新实例。</summary>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[])">
      <summary>使用表示 <see cref="T:System.Guid" /> 的字节数组创建此类的新实例。</summary>
      <param name="guid">一个表示 <see cref="T:System.Guid" /> 的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid" /> 提供少于 16 个有效字节。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)">
      <summary>从表示 <see cref="T:System.Guid" /> 的 byte 数组中的某一偏移量开始，创建此类的新实例。</summary>
      <param name="guid">一个表示 <see cref="T:System.Guid" /> 的 byte 数组。</param>
      <param name="offset">byte 数组中表示 <see cref="T:System.Guid" /> 的偏移位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于数组的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid " />和<paramref name=" offset" /> 提供少于 16 个有效字节。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>使用指定项数，从 char 中的某一偏移量开始，创建此类的新实例。</summary>
      <param name="chars">表示 <see cref="T:System.Guid" /> 的 char 数组。</param>
      <param name="offset">char 数组中表示 <see cref="T:System.Guid" /> 的偏移位置。</param>
      <param name="count">要使用的数组项数，从 <paramref name="offset" /> 开始。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于数组的长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于数组的长度。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="count" /> 等于零。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Guid)">
      <summary>使用 <see cref="T:System.Guid" /> 创建此类的新实例。</summary>
      <param name="guid">
        <see cref="T:System.Guid" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.String)">
      <summary>使用字符串创建此类的新实例。</summary>
      <param name="value">用于生成 <see cref="T:System.Xml.UniqueId" /> 的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的长度为零。</exception>
    </member>
    <member name="P:System.Xml.UniqueId.CharArrayLength">
      <summary>获取 <see cref="T:System.Xml.UniqueId" /> 的字符串表示形式的长度。</summary>
      <returns>
        <see cref="T:System.Xml.UniqueId" /> 的字符串表示形式的长度。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.Equals(System.Object)">
      <summary>测试某一对象是否等于此 <see cref="T:System.Xml.UniqueId" />。</summary>
      <returns>如果对象等于此 <see cref="T:System.Xml.UniqueId" />，则为 true；否则为 false。</returns>
      <param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.Xml.UniqueId.GetHashCode">
      <summary>创建此 <see cref="T:System.Xml.UniqueId" /> 的哈希代码表示形式。</summary>
      <returns>此 <see cref="T:System.Xml.UniqueId" /> 的整数哈希代码表示形式。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.UniqueId.IsGuid">
      <summary>指示 <see cref="T:System.Xml.UniqueId" /> 是否为 <see cref="T:System.Guid" />。</summary>
      <returns>如果 <see cref="T:System.Xml.UniqueId" /> 为 <see cref="T:System.Guid" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>重写相等运算符以测试两个 <see cref="T:System.Xml.UniqueId" /> 是否相等。</summary>
      <returns>如果两个 <see cref="T:System.Xml.UniqueId" /> 相等或都为 null，则为 true；如果它们不相等或如果其中只有一个为 null，则为 false。</returns>
      <param name="id1">第一个 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id2">第二个 <see cref="T:System.Xml.UniqueId" />。</param>
    </member>
    <member name="M:System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>重写相等运算符以测试两个 <see cref="T:System.Xml.UniqueId" /> 是否相等。</summary>
      <returns>如果重写的等于运算符返回 false，则为 true；否则为 false。</returns>
      <param name="id1">第一个 <see cref="T:System.Xml.UniqueId" />。</param>
      <param name="id2">第二个 <see cref="T:System.Xml.UniqueId" />。</param>
    </member>
    <member name="M:System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)">
      <summary>将 <see cref="T:System.Xml.UniqueId" /> 值放入 char 数组中。</summary>
      <returns>由 <see cref="T:System.Xml.UniqueId" /> 值填充的 char 数组中的项数。</returns>
      <param name="chars">char 数组。</param>
      <param name="offset">char 数组中开始插入 <see cref="T:System.Xml.UniqueId" /> 值的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于数组的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid " />和<paramref name=" offset" /> 提供少于 16 个有效字节。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.ToString">
      <summary>以字符串格式显示 <see cref="T:System.Xml.UniqueId" /> 值。</summary>
      <returns>
        <see cref="T:System.Xml.UniqueId" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)">
      <summary>尝试获取 <see cref="T:System.Xml.UniqueId" /> 的值作为 <see cref="T:System.Guid" /> 并将其存储在给定字节数组中的指定偏移位置。</summary>
      <returns>如果存储在 <see cref="T:System.Xml.UniqueId" /> 的此实例中的值为 <see cref="T:System.Guid" />，则为 true；否则为 false。</returns>
      <param name="buffer">将包含 <see cref="T:System.Guid" /> 的 byte 数组。</param>
      <param name="offset">byte 数组中开始插入 <see cref="T:System.Guid" /> 值的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于数组的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer " />和<paramref name=" offset" /> 提供少于 16 个有效字节。</exception>
    </member>
    <member name="M:System.Xml.UniqueId.TryGetGuid(System.Guid@)">
      <summary>尝试获取 <see cref="T:System.Xml.UniqueId" /> 的值作为 <see cref="T:System.Guid" />。</summary>
      <returns>如果 UniqueId 表示 <see cref="T:System.Guid" />，则为 true；否则为 false。</returns>
      <param name="guid">如果成功，则为 <see cref="T:System.Guid" />；否则为 <see cref="F:System.Guid.Empty" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer " />和<paramref name=" offset" /> 提供少于 16 个有效字节。</exception>
    </member>
    <member name="T:System.Xml.XmlBinaryReaderSession">
      <summary>允许以动态方式管理经过优化的字符串。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlBinaryReaderSession" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)">
      <summary>从输入参数创建一个 <see cref="T:System.Xml.XmlDictionaryString" /> 并将其添加到内部集合。</summary>
      <returns>添加到内部集合的新生成的 <see cref="T:System.Xml.XmlDictionaryString" />。</returns>
      <param name="id">键值。</param>
      <param name="value">值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> 小于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">An entry with key = <paramref name="id" /> already exists.</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.Clear">
      <summary>清除所有内容的内部集合。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>检查内部集合是否包含与键匹配的项。</summary>
      <returns>如果找到匹配 <paramref name="key" /> 的项，则为 true；否则，为 false。</returns>
      <param name="key">要搜索的键。</param>
      <param name="result">当此方法返回时，如果找到词条，则包含字符串；否则为 null。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>检查内部集合是否包含与值匹配的项。</summary>
      <returns>如果找到匹配 <paramref name="value" /> 的项，则为 true；否则，为 false。</returns>
      <param name="value">要搜索的值。</param>
      <param name="result">当此方法返回时，如果找到词条，则包含字符串；否则为 null。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>检查内部集合是否包含与值匹配的项。</summary>
      <returns>如果找到匹配 <paramref name="value" /> 的项，则为 true；否则，为 false。</returns>
      <param name="value">要搜索的值。</param>
      <param name="result">当此方法返回时，如果找到词条，则包含字符串；否则为 null。 该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="T:System.Xml.XmlBinaryWriterSession">
      <summary>允许使用动态字典压缩消息中出现的常见字符串并保持状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.#ctor">
      <summary>创建此类的实例。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.Reset">
      <summary>清除内部集合。</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.TryAdd(System.Xml.XmlDictionaryString,System.Int32@)">
      <summary>尝试将 <see cref="T:System.Xml.XmlDictionaryString" /> 添加到内部集合。</summary>
      <returns>除非引发异常，否则为 true。</returns>
      <param name="value">要相加的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="key">已成功添加的 <see cref="T:System.Xml.XmlDictionaryString" /> 的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">An entry with key = <paramref name="key" /> already exists.</exception>
    </member>
    <member name="T:System.Xml.XmlDictionary">
      <summary>实现用于优化 Windows Communication Foundation (WCF) 的 XML 读取器/编写器实现的字典。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor">
      <summary>创建一个空的 <see cref="T:System.Xml.XmlDictionary" />。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor(System.Int32)">
      <summary>创建具有初始容量的 <see cref="T:System.Xml.XmlDictionary" />。</summary>
      <param name="capacity">字典的初始大小。</param>
    </member>
    <member name="M:System.Xml.XmlDictionary.Add(System.String)">
      <summary>将字符串添加到 <see cref="T:System.Xml.XmlDictionary" />。</summary>
      <returns>所添加的 <see cref="T:System.Xml.XmlDictionaryString" />。</returns>
      <param name="value">要添加到字典的字符串。</param>
    </member>
    <member name="P:System.Xml.XmlDictionary.Empty">
      <summary>获取 static 空 <see cref="T:System.Xml.IXmlDictionary" />。</summary>
      <returns>一个 static 空 <see cref="T:System.Xml.IXmlDictionary" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>尝试在字典中查找项。</summary>
      <returns>如果键在字典中，则为 true；否则为 false。</returns>
      <param name="key">要查找的键。</param>
      <param name="result">如果已定义 <paramref name="key" />，则 <see cref="T:System.Xml.XmlDictionaryString" /> 映射到该键；否则为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>检查字典中是否有指定的字符串值。</summary>
      <returns>如果值在字典中，则为 true；否则为 false。</returns>
      <param name="value">要检查的字符串值。</param>
      <param name="result">如果找到，则为相应的 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>检查字典中是否有指定的 <see cref="T:System.Xml.XmlDictionaryString" />。</summary>
      <returns>如果 <see cref="T:System.Xml.XmlDictionaryString" /> 在字典中，则为 true；否则为 false。</returns>
      <param name="value">要检查的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="result">如果找到，则为匹配的 <see cref="T:System.Xml.XmlDictionaryString" />；否则为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.XmlDictionaryReader">
      <summary>从 <see cref="T:System.Xml.XmlReader" /> 中派生 Windows Communication Foundation (WCF) 以便执行序列化和反序列化的 abstract 类。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.#ctor">
      <summary>创建此类的实例。仅由其派生类调用。</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.CanCanonicalize">
      <summary>该属性始终返回 false。 如果派生类支持规范化，则这些类可进行重写以返回 true。</summary>
      <returns>返回 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> 使用。</param>
      <param name="quotas">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="dictionary">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session">要使用的 <see cref="T:System.Xml.XmlBinaryReaderSession" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="dictionary">要使用的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session">要使用的 <see cref="T:System.Xml.XmlBinaryReaderSession" />。</param>
      <param name="onClose">要在关闭读取器时调用的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="quotas">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零或大于缓冲区长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="quotas">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> 使用。</param>
      <param name="quotas">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="quotas" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> 使用。</param>
      <param name="quotas">应用于此操作的配额。</param>
      <param name="session">
        <see cref="T:System.Xml.XmlBinaryReaderSession" /> 使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> 使用。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="session">
        <see cref="T:System.Xml.XmlBinaryReaderSession" /> 使用。</param>
      <param name="onClose">要在关闭读取器时调用的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建可读取 .NET 二进制 XML 格式的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="quotas">应用于此操作的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)">
      <summary>从现有的 <see cref="T:System.Xml.XmlReader" /> 创建一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encoding">输入的可能的字符编码。</param>
      <param name="quotas">要应用于此读取器的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encodings">输入的可能的字符编码。</param>
      <param name="contentType">消息的内容类型 MIME 类型。</param>
      <param name="quotas">要应用于此读取器的配额。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encodings">输入的可能的字符编码。</param>
      <param name="contentType">消息的内容类型 MIME 类型。</param>
      <param name="quotas">要应用于读取器的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="maxBufferSize">允许的缓冲区最大大小。</param>
      <param name="onClose">读取器关闭时要调用的委托。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encodings">输入的可能的字符编码。</param>
      <param name="quotas">要应用于此读取器的配额。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="encoding">流的可能的字符编码。</param>
      <param name="quotas">要应用于此读取器的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="encodings">流的可能的字符编码。</param>
      <param name="contentType">消息的内容类型 MIME 类型。</param>
      <param name="quotas">要应用于此读取器的配额。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="encodings">流的可能的字符编码。</param>
      <param name="contentType">消息的内容类型 MIME 类型。</param>
      <param name="quotas">消息的 MIME 类型。</param>
      <param name="maxBufferSize">要应用于读取器的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">读取器关闭时要调用的委托。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建以 MTOM 格式读取 XML 的 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="encodings">流的可能的字符编码。</param>
      <param name="quotas">要应用于此读取器的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="encoding">指定要应用的编码属性的 <see cref="T:System.Text.Encoding" /> 对象。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">读取器关闭时要调用的委托。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <param name="quotas">应用于读取器的配额。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="quotas">应用于读取器的配额。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="encoding">指定要应用的编码属性的 <see cref="T:System.Text.Encoding" /> 对象。</param>
      <param name="quotas">要应用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">读取器关闭时要调用的委托。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>创建 <see cref="T:System.Xml.XmlDictionaryReader" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="quotas">应用于读取器的配额。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.EndCanonicalization">
      <summary>此方法尚未实现。</summary>
      <exception cref="T:System.NotSupportedException">总是。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>当在派生类中被重写时，获取属性的值。</summary>
      <returns>属性的值。</returns>
      <param name="localName">一个表示属性本地名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="namespaceUri">一个表示属性命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.GetNonAtomizedNames(System.String@,System.String@)">
      <summary>获取非原子化的名称。</summary>
      <param name="localName">本地名称。</param>
      <param name="namespaceUri">本地 <paramref name="localName" /> 的命名空间。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)">
      <summary>获取名称数组中当前节点的本地名称的索引。</summary>
      <returns>名称数组中当前节点的本地名称的索引。</returns>
      <param name="localNames">要搜索的本地名称字符串数组。</param>
      <param name="namespaceUri">当前节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> 或数组中的任何名称为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> 或数组中的任何名称为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)">
      <summary>获取名称数组中当前节点的本地名称的索引。</summary>
      <returns>名称数组中当前节点的本地名称的索引。</returns>
      <param name="localNames">要搜索的本地名称 <see cref="T:System.Xml.XmlDictionaryString" /> 数组。</param>
      <param name="namespaceUri">当前节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> 或数组中的任何名称为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> 或数组中的任何名称为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.String)">
      <summary>检查参数 <paramref name="localName" /> 是否为当前节点的本地名称。</summary>
      <returns>如果 <paramref name="localName" /> 与当前节点的本地名称相匹配，则为 true；否则为 false。</returns>
      <param name="localName">当前节点的本地名称。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)">
      <summary>检查参数 <paramref name="localName" /> 是否为当前节点的本地名称。</summary>
      <returns>如果 <paramref name="localName" /> 与当前节点的本地名称相匹配，则为 true；否则为 false。</returns>
      <param name="localName">表示当前节点本地名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)">
      <summary>检查参数 <paramref name="namespaceUri" /> 是否为当前节点的命名空间。</summary>
      <returns>如果 <paramref name="namespaceUri" /> 与当前节点的命名空间相匹配，则为 true；否则为 false。</returns>
      <param name="namespaceUri">当前节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)">
      <summary>检查参数 <paramref name="namespaceUri" /> 是否为当前节点的命名空间。</summary>
      <returns>如果 <paramref name="namespaceUri" /> 与当前节点的命名空间相匹配，则为 true；否则为 false。</returns>
      <param name="namespaceUri">当前节点的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)">
      <summary>检查读取器是否定位在数组的开头。 此类返回 false，但具有数组概念的派生类可能返回 true。</summary>
      <returns>如果读取器定位于数组节点的开头，则为 true；否则为 false。</returns>
      <param name="type">节点的类型（如果为有效节点）；否则为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>测试第一个标记是开始标记还是空元素标记，以及本地名称和命名空间 URI 是否与当前节点的本地名称和命名空间 URI 相匹配。</summary>
      <returns>如果数组中的第一个标记是开始标记或空元素标记，并与 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 相匹配，则为 true；否则为 false。</returns>
      <param name="localName">一个表示属性本地名称的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="namespaceUri">一个表示属性命名空间的 <see cref="T:System.Xml.XmlDictionaryString" />。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)">
      <summary>测试当前节点是否为文本节点。</summary>
      <returns>如果节点类型为 <see cref="F:System.Xml.XmlNodetype.Text" />、<see cref="F:System.Xml.XmlNodetype.Whitespace" />、<see cref="F:System.Xml.XmlNodetype.SignificantWhitespace" />、<see cref="F:System.Xml.XmlNodetype.CDATA" /> 或 <see cref="F:System.Xml.XmlNodetype.Attribute" />，则为 true；否则为 false。</returns>
      <param name="nodeType">所测试节点的类型。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement">
      <summary>测试当前的内容节点是开始元素还是空元素。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)">
      <summary>测试当前内容节点是开始元素还是空元素，以及元素的 <see cref="P:System.Xml.XmlReader.Name" /> 属性是否与给定的参数匹配。</summary>
      <param name="name">元素的 <see cref="P:System.Xml.XmlReader.Name" /> 属性。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)">
      <summary>测试当前内容节点是开始元素还是空元素，以及元素的 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性是否与给定的参数匹配。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>测试当前内容节点是开始元素还是空元素，以及元素的 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 属性是否与给定的参数匹配。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.Quotas">
      <summary>获取适用于此类的当前实例的配额值。</summary>
      <returns>适用于此类的当前实例的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.Boolean" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的本地名称。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.DateTime" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.Decimal" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.Double" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.Guid" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary>将重复出现的 short 整数读入类型化数组。</summary>
      <returns>放入数组中的整数个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入整数的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary>将重复出现的整数读入类型化数组。</summary>
      <returns>放入数组中的整数个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入整数的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>将重复出现的 long 整数读入类型化数组。</summary>
      <returns>放入数组中的整数个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入整数的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary>将重复出现的 float 数读入类型化数组。</summary>
      <returns>放入数组中的浮点数个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入浮点数的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的浮点数个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.TimeSpan" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.Boolean" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.DateTime" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.Decimal" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.Double" /> 节点类型读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.Guid" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary>将重复出现的 short 整数读入类型化数组。</summary>
      <returns>放入数组中的整数个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入整数的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary>将重复出现的整数读入类型化数组。</summary>
      <returns>放入数组中的整数个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入整数的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary>将重复出现的 long 整数读入类型化数组。</summary>
      <returns>放入数组中的整数个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入整数的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的整数个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary>将重复出现的 float 数读入类型化数组。</summary>
      <returns>放入数组中的浮点数个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入浮点数的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的浮点数个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>将重复出现的 <see cref="T:System.TimeSpan" /> 节点读入类型化数组。</summary>
      <returns>放入数组中的节点个数。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">向其中放入节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)">
      <summary>将重复出现的 <see cref="T:System.Boolean" /> 节点读入类型化数组。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 节点的 <see cref="T:System.Boolean" /> 数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将重复出现的 <see cref="T:System.Boolean" /> 节点读入类型化数组。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 节点的 <see cref="T:System.Boolean" /> 数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>将节点内容转换为指定类型。</summary>
      <returns>已转换为请求类型的串联文本内容或属性值。</returns>
      <param name="type">要返回的值的 <see cref="T:System.Type" />。</param>
      <param name="namespaceResolver">一个 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 对象，用于解析与类型转换有关的任何命名空间前缀。 例如，将 <see cref="T:System.Xml.XmlQualifiedName" /> 对象转换为 xs:string 时可以使用此对象。 此值可以是空引用。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBase64">
      <summary>读取内容并返回 Base64 解码的二进制字节。</summary>
      <returns>一个字节数组，其中包含 Base64 解码的二进制字节。</returns>
      <exception cref="T:System.Xml.XmlException">数组大小大于此读取器的 MaxArrayLength 配额。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex">
      <summary>读取内容并返回 BinHex 解码的二进制字节。</summary>
      <returns>一个字节数组，其中包含 BinHex 解码的二进制字节。</returns>
      <exception cref="T:System.Xml.XmlException">数组大小大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)">
      <summary>读取内容并返回 BinHex 解码的二进制字节。</summary>
      <returns>一个字节数组，其中包含 BinHex 解码的二进制字节。</returns>
      <param name="maxByteArrayContentLength">最大数组长度。</param>
      <exception cref="T:System.Xml.XmlException">数组大小大于 <paramref name="maxByteArrayContentLength" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)">
      <summary>将内容读入 char 数组。</summary>
      <returns>读取的字符数。</returns>
      <param name="chars">向其中放入字符的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要放入数组中的字符数。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsDecimal">
      <summary>将节点内容转换为 decimal。</summary>
      <returns>节点内容的 decimal 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsFloat">
      <summary>将节点内容转换为 float。</summary>
      <returns>节点内容的 float 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsGuid">
      <summary>将节点内容转换为 guid。</summary>
      <returns>节点内容的 guid 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)">
      <summary>将节点内容转换为限定名表示形式。</summary>
      <param name="localName">限定名（out 参数）的 <see cref="P:System.Xml.XmlReader.LocalName" /> 部分。</param>
      <param name="namespaceUri">限定名（out 参数）的 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 部分。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString">
      <summary>将节点内容转换为字符串。</summary>
      <returns>以字符串表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)">
      <summary>将节点内容转换为字符串。</summary>
      <returns>以字符串表示的节点内容。</returns>
      <param name="maxStringContentLength">最大字符串长度。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)">
      <summary>将节点内容转换为字符串。</summary>
      <returns>以字符串表示的节点内容。</returns>
      <param name="strings">要依据其匹配内容的字符串数组。</param>
      <param name="index">与内容匹配的 <paramref name="strings" /> 中项的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)">
      <summary>将节点内容转换为字符串。</summary>
      <returns>以字符串表示的节点内容。</returns>
      <param name="strings">要依据其匹配内容的 <see cref="T:System.Xml.XmlDictionaryString" /> 对象数组。</param>
      <param name="index">与内容匹配的 <paramref name="strings" /> 中项的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan">
      <summary>将节点内容转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>节点内容的 <see cref="T:System.TimeSpan" /> 表示形式。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsUniqueId">
      <summary>将节点内容转换为唯一标识符。</summary>
      <returns>以唯一标识符形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)">
      <summary>将节点内容转换为 <see cref="T:System.DateTime" /> 数组。</summary>
      <returns>以 <see cref="T:System.DateTime" /> 数组形式表示的节点内容。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将节点内容转换为 <see cref="T:System.DateTime" /> 数组。</summary>
      <returns>以 <see cref="T:System.DateTime" /> 数组形式表示的节点内容。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)">
      <summary>将节点内容转换为 <see cref="T:System.DateTime" /> 数组。</summary>
      <returns>以 <see cref="T:System.Decimal" /> 数组形式表示的节点内容。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将节点内容转换为 <see cref="T:System.DateTime" /> 数组。</summary>
      <returns>以 <see cref="T:System.Decimal" /> 数组形式表示的节点内容。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)">
      <summary>将节点内容转换为 <see cref="T:System.DateTime" /> 数组。</summary>
      <returns>以 <see cref="T:System.Double" /> 数组形式表示的节点内容。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将节点内容转换为 <see cref="T:System.DateTime" /> 数组。</summary>
      <returns>以 <see cref="T:System.Double" /> 数组形式表示的节点内容。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBase64">
      <summary>将节点内容转换为 Base64 字节的数组。</summary>
      <returns>以 Base64 字节数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex">
      <summary>将节点内容转换为 BinHex 字节的数组。</summary>
      <returns>以 BinHex 字节数组形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean">
      <summary>将元素内容转换为 <see cref="T:System.Boolean" />。</summary>
      <returns>以 <see cref="T:System.Boolean" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDateTime">
      <summary>将元素内容转换为 <see cref="T:System.DateTime" />。</summary>
      <returns>以 <see cref="T:System.DateTime" /> 形式表示的节点内容。</returns>
      <exception cref="T:System.ArgumentException">元素的格式无效。</exception>
      <exception cref="T:System.FormatException">元素的格式无效。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal">
      <summary>将元素内容转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>以 <see cref="T:System.Decimal" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDouble">
      <summary>将元素内容转换为 <see cref="T:System.Double" />。</summary>
      <returns>以 <see cref="T:System.Double" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsFloat">
      <summary>将元素内容转换为浮点数 (<see cref="T:System.Single" />)。</summary>
      <returns>以浮点数 (<see cref="T:System.Single" />) 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsGuid">
      <summary>将元素内容转换为 <see cref="T:System.Guid" />。</summary>
      <returns>以 <see cref="T:System.Guid" /> 形式表示的节点内容。</returns>
      <exception cref="T:System.ArgumentException">元素的格式无效。</exception>
      <exception cref="T:System.FormatException">元素的格式无效。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsInt">
      <summary>将元素内容转换为整数 (<see cref="T:System.Int32" />)。</summary>
      <returns>以整数 (<see cref="T:System.Int32" />) 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsLong">
      <summary>将元素内容转换为长整型 (<see cref="T:System.Int64" />)。</summary>
      <returns>以长整型 (<see cref="T:System.Int64" />) 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsString">
      <summary>将元素内容转换为 <see cref="T:System.String" />。</summary>
      <returns>以 <see cref="T:System.String" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan">
      <summary>将元素内容转换为 <see cref="T:System.TimeSpan" />。</summary>
      <returns>以 <see cref="T:System.TimeSpan" /> 形式表示的节点内容。</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId">
      <summary>将元素的内容转换为唯一标识符。</summary>
      <returns>以唯一标识符形式表示的节点内容。</returns>
      <exception cref="T:System.ArgumentException">元素的格式无效。</exception>
      <exception cref="T:System.FormatException">元素的格式无效。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement">
      <summary>检查当前节点是否为元素并将读取器推进到下一个节点。</summary>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> 返回 false。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)">
      <summary>检查当前节点是否为具有给定 <paramref name="name" /> 的元素，并将读取器推进到下一个节点。</summary>
      <param name="name">元素的限定名。</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> 返回 false。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)">
      <summary>检查当前节点是否为具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的元素，并将读取器推进到下一个节点。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> 返回 false。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>检查当前节点是否为具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的元素，并将读取器推进到下一个节点。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> 返回 false。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see cref="T:System.Guid" /> 的数组。</summary>
      <returns>一个 <see cref="T:System.Guid" /> 数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see cref="T:System.Guid" /> 的数组。</summary>
      <returns>一个 <see cref="T:System.Guid" /> 数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 short 整数 (<see cref="T:System.Int16" />) 的数组。</summary>
      <returns>short 整数 (<see cref="T:System.Int16" />) 的数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 short 整数 (<see cref="T:System.Int16" />) 的数组。</summary>
      <returns>short 整数 (<see cref="T:System.Int16" />) 的数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入整数 (<see cref="T:System.Int32" />) 的数组。</summary>
      <returns>整数 (<see cref="T:System.Int32" />) 的数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入整数 (<see cref="T:System.Int32" />) 的数组。</summary>
      <returns>整数 (<see cref="T:System.Int32" />) 的数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 long 整数 (<see cref="T:System.Int64" />) 的数组。</summary>
      <returns>long 整数 (<see cref="T:System.Int64" />) 的数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 long 整数 (<see cref="T:System.Int64" />) 的数组。</summary>
      <returns>long 整数 (<see cref="T:System.Int64" />) 的数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 float 数 (<see cref="T:System.Single" />) 的数组。</summary>
      <returns>float 数 (<see cref="T:System.Single" />) 的数组</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 float 数 (<see cref="T:System.Single" />) 的数组。</summary>
      <returns>float 数 (<see cref="T:System.Single" />) 的数组</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>检查当前节点是否为具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的元素，并将读取器推进到下一个节点。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadString">
      <summary>将当前节点的内容读入字符串。</summary>
      <returns>包含当前节点的内容的字符串。</returns>
      <exception cref="T:System.InvalidOperationException">无法读取当前节点的内容。</exception>
      <exception cref="T:System.Xml.XmlException">超出允许的最大字符串长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadString(System.Int32)">
      <summary>将当前节点的内容读入具有最大给定长度的字符串。</summary>
      <returns>包含当前节点的内容的字符串。</returns>
      <param name="maxStringContentLength">允许的最大字符串长度。</param>
      <exception cref="T:System.InvalidOperationException">无法读取当前节点的内容。</exception>
      <exception cref="T:System.Xml.XmlException">超出允许的最大字符串长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see cref="T:System.TimeSpan" /> 数组。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>将具有给定 <paramref name="localName" /> 和 <paramref name="namespaceUri" /> 的一系列节点的内容读入 <see cref="T:System.TimeSpan" /> 数组。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 数组。</returns>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>未实现。</summary>
      <returns>未实现。</returns>
      <param name="buffer">要从其中读取数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中开始读取数据的位置。</param>
      <param name="count">可以从 <paramref name="buffer" /> 中读取的字节数。</param>
      <exception cref="T:System.NotSupportedException">总是。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>此方法尚未实现。</summary>
      <param name="stream">要从其中进行读取的流。</param>
      <param name="includeComments">确定是否包括注释。</param>
      <param name="inclusivePrefixes">要包括的前缀。</param>
      <exception cref="T:System.NotSupportedException">总是。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)">
      <summary>不在此类中实现（它始终返回 false）。 可在派生类中重写。</summary>
      <returns>除非在派生类中重写，否则为 false。</returns>
      <param name="count">除非在派生类中重写，否则返回 0。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)">
      <summary>不在此类中实现（它始终返回 false）。 可在派生类中重写。</summary>
      <returns>除非在派生类中重写，否则为 false。</returns>
      <param name="length">除非在派生类中重写，否则返回 0。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>不在此类中实现（它始终返回 false）。 可在派生类中重写。</summary>
      <returns>除非在派生类中重写，否则为 false。</returns>
      <param name="localName">除非在派生类中重写，否则返回 null。.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>不在此类中实现（它始终返回 false）。 可在派生类中重写。</summary>
      <returns>除非在派生类中重写，否则为 false。</returns>
      <param name="namespaceUri">除非在派生类中重写，否则返回 null。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>不在此类中实现（它始终返回 false）。 可在派生类中重写。</summary>
      <returns>除非在派生类中重写，否则为 false。</returns>
      <param name="value">除非在派生类中重写，否则返回 null。</param>
    </member>
    <member name="T:System.Xml.XmlDictionaryReaderQuotas">
      <summary>包含 XmlDictionaryReaders 的可配置配额值。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReaderQuotas.#ctor">
      <summary>创建此类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReaderQuotas.CopyTo(System.Xml.XmlDictionaryReaderQuotas)">
      <summary>根据此实例中的值设置传入配额实例的属性。</summary>
      <param name="quotas">要将值复制到的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 实例。</param>
      <exception cref="T:System.InvalidOperationException">尝试 set 值，但传入实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">传入的目标<paramref name=" quotas" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.Max">
      <summary>获取此类的一个实例，其所有属性都设置为最大值。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 的一个实例，其属性设置为 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength">
      <summary>获取并设置允许的最大数组长度。</summary>
      <returns>允许的最大数组长度。 默认值为 16384。</returns>
      <exception cref="T:System.InvalidOperationException">尝试 set 值，但此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException">尝试将值 set 为小于零。</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead">
      <summary>获取并设置允许每次读取返回的最大字节数。</summary>
      <returns>允许为每次读取返回的最大字节数。 默认值为 4096。</returns>
      <exception cref="T:System.InvalidOperationException">尝试 set 值，但此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException">尝试将值 set 为小于零。</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxDepth">
      <summary>获取并设置最大嵌套节点深度。</summary>
      <returns>最大嵌套节点深度。 默认值为 32；</returns>
      <exception cref="T:System.InvalidOperationException">尝试 set 值，而此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException">尝试将值 set 为小于零。</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount">
      <summary>获取并设置表名称中允许的最大字符数。</summary>
      <returns>表名称中允许的最大字符数。 默认值为 16384。</returns>
      <exception cref="T:System.InvalidOperationException">尝试 set 值，但此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException">尝试将值 set 为小于零。</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength">
      <summary>获取并设置读取器返回的最大字符串长度。</summary>
      <returns>读取器返回的最大字符串长度。 默认值为 8192。</returns>
      <exception cref="T:System.InvalidOperationException">尝试 set 值，但此实例的配额值是只读的。</exception>
      <exception cref="T:System.ArgumentException">尝试将值 set 为小于零。</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.ModifiedQuotas">
      <summary>为<see cref="T:System.Xml.XmlDictionaryReaderQuotas" />获取更改后的配额。</summary>
      <returns>用于 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />的修改的配额。</returns>
    </member>
    <member name="T:System.Xml.XmlDictionaryReaderQuotaTypes">
      <summary>执行 XmlDictionaryReaders 的可配置配额值。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxArrayLength">
      <summary>指定允许的最大数组长度。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxBytesPerRead">
      <summary>指定允许为每次读取返回的最大字节数。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxDepth">
      <summary>指定最大嵌套节点深度。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxNameTableCharCount">
      <summary>指定表名称中允许的最大字符数。</summary>
    </member>
    <member name="F:System.Xml.XmlDictionaryReaderQuotaTypes.MaxStringContentLength">
      <summary>指定读取器返回的最大字符串长度。</summary>
    </member>
    <member name="T:System.Xml.XmlDictionaryString">
      <summary>表示存储在 <see cref="T:System.Xml.XmlDictionary" /> 中的项。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.#ctor(System.Xml.IXmlDictionary,System.String,System.Int32)">
      <summary>创建此类的实例。</summary>
      <param name="dictionary">包含此实例的 <see cref="T:System.Xml.IXmlDictionary" />。</param>
      <param name="value">作为字典项的值的字符串。</param>
      <param name="key">作为字典项的键的整数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="key" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" /> / 4。</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Dictionary">
      <summary>表示传递到此 <see cref="T:System.Xml.XmlDictionaryString" /> 实例的构造函数的 <see cref="T:System.Xml.IXmlDictionary" />。</summary>
      <returns>此字典项的 <see cref="T:System.Xml.IXmlDictionary" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Empty">
      <summary>获取表示空字符串的 <see cref="T:System.Xml.XmlDictionaryString" />。</summary>
      <returns>表示空字符串的 <see cref="T:System.Xml.XmlDictionaryString" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Key">
      <summary>获取该类的此实例的整数键。</summary>
      <returns>该类的此实例的整数键。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.ToString">
      <summary>显示此对象的文本表示形式。</summary>
      <returns>该类的此实例的字符串值。</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Value">
      <summary>获取该类的此实例的字符串值。</summary>
      <returns>该类的此实例的字符串值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.XmlDictionaryWriter">
      <summary>表示 Windows Communication Foundation (WCF) 从 <see cref="T:System.Xml.XmlWriter" /> 中派生出的一个抽象类，用于执行序列化和反序列化。</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlDictionaryWriter" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryWriter.CanCanonicalize">
      <summary>该属性始终返回 false。 如果派生类支持规范化，则这些类可进行重写以返回 true。</summary>
      <returns>所有情况下均为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入 WCF 二进制 XML 格式。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要写入的流。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入 WCF 二进制 XML 格式。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要写入的流。</param>
      <param name="dictionary">用作共享字典的 <see cref="T:System.Xml.XmlDictionary" />。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入 WCF 二进制 XML 格式。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要写入的流。</param>
      <param name="dictionary">用作共享字典的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="session">要使用的 <see cref="T:System.Xml.XmlBinaryWriterSession" />。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入 WCF 二进制 XML 格式。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要从其中读取数据的流。</param>
      <param name="dictionary">用作共享字典的 <see cref="T:System.Xml.XmlDictionary" />。</param>
      <param name="session">要使用的 <see cref="T:System.Xml.XmlBinaryWriterSession" />。</param>
      <param name="ownsStream">如果指示完成时编写器关闭流，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)">
      <summary>从现有的 <see cref="T:System.Xml.XmlWriter" /> 创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例以 MTOM 格式写入 XML。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要写入的流。</param>
      <param name="encoding">流的字符编码。</param>
      <param name="maxSizeInBytes">在编写器中缓冲的最大字节数。</param>
      <param name="startInfo">ContentType SOAP 标头中的属性。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例以 MTOM 格式写入 XML。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要写入的流。</param>
      <param name="encoding">流的字符编码。</param>
      <param name="maxSizeInBytes">在编写器中缓冲的最大字节数。</param>
      <param name="startInfo">包含 Infoset 的 MIME 部分的内容类型。</param>
      <param name="boundary">消息中的 MIME 边界。</param>
      <param name="startUri">包含 Infoset 的 MIME 部分的内容 ID URI。</param>
      <param name="writeMessageHeaders">如果写入消息标头，则为 true。</param>
      <param name="ownsStream">如果指示完成时编写器关闭流，则为 true；否则为 false。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入文本 XML。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要写入的流。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入文本 XML。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要写入的流。</param>
      <param name="encoding">输出的字符编码。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>创建一个 <see cref="T:System.Xml.XmlDictionaryWriter" /> 实例，该实例写入文本 XML。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> 的一个实例。</returns>
      <param name="stream">要写入的流。</param>
      <param name="encoding">流的字符编码。</param>
      <param name="ownsStream">如果指示完成时编写器关闭流，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.EndCanonicalization">
      <summary>在由派生类实现时，它会停止由匹配的 <see cref="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])" /> 调用启动的规范化。</summary>
      <exception cref="T:System.NotSupportedException">此方法尚未实现。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>当通过派生类实现时，就开始规范化。</summary>
      <param name="stream">要写入的流。</param>
      <param name="includeComments">如果包含注释，则为 true；否则为 false。</param>
      <param name="inclusivePrefixes">要包括的前缀。</param>
      <exception cref="T:System.NotSupportedException">此方法尚未实现。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Boolean" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含数据的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组写入的值的数量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.DateTime" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Decimal" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Double" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Guid" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Int16" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Int32" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Int64" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Single" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.TimeSpan" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Boolean" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.DateTime" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Decimal" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Double" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Guid" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Int16" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Int32" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Int64" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.Single" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.TimeSpan" /> 数组写入节点。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="array">包含节点的数组。</param>
      <param name="offset">数组中的起始索引。</param>
      <param name="count">要从数组获取的节点个数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 的值 &lt; 0，或 &gt; <paramref name="array" /> 长度。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>写入属性的限定名和值。</summary>
      <param name="prefix">属性的前缀。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceUri">属性的命名空间 URI。</param>
      <param name="value">属性。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>写入属性的限定名和值。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceUri">属性的命名空间 URI。</param>
      <param name="value">属性。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定的二进制字节异步编码为 Base64 并写出结果文本。</summary>
      <returns>表示 WriteBase64 异步操作的任务。</returns>
      <param name="buffer">要进行编码的字节数组。</param>
      <param name="index">缓冲区中指示要写入字节的起始位置的位置。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.InvalidOperationException">在前一个异步操作完成前调用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 方法。 在这种情况下，将通过消息“异步操作已过程中”引发 <see cref="T:System.InvalidOperationException" />。</exception>
      <exception cref="T:System.InvalidOperationException">在前一个异步操作完成前调用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 方法。 在这种情况下，将通过消息“异步操作已过程中”引发 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>写入包含文本内容的元素。</summary>
      <param name="prefix">元素的前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="value">元素内容。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>写入包含文本内容的元素。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <param name="value">元素内容。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>从 <see cref="T:System.Xml.XmlDictionaryReader" /> 写入当前 XML 节点。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="defattr">如果为 true，则从 XmlReader 中复制默认属性；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>从 <see cref="T:System.Xml.XmlReader" /> 写入当前 XML 节点。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">如果为 true，则从 <see cref="T:System.Xml.XmlReader" /> 中复制默认属性；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>写出命名空间限定的名称。 此方法查找位于给定命名空间范围内的前缀。</summary>
      <param name="localName">限定名的本地名称。</param>
      <param name="namespaceUri">限定名的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>写入具有指定前缀、本地名称和命名空间 URI 的属性的起始内容。</summary>
      <param name="prefix">命名空间前缀。</param>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceUri">属性的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>写入具有指定本地名称和命名空间 URI 的属性的起始内容。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="namespaceUri">属性的命名空间 URI。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>写出指定的开始标记并将其与给定的命名空间和前缀关联起来。</summary>
      <param name="prefix">元素的前缀。</param>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">编写器已关闭。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>写入指定的开始标记并将其与给定的命名空间关联起来。</summary>
      <param name="localName">元素的本地名称。</param>
      <param name="namespaceUri">元素的命名空间 URI。</param>
      <exception cref="T:System.InvalidOperationException">编写器已关闭。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)">
      <summary>写入给定的文本内容。</summary>
      <param name="value">要编写的文本。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>写入 <see cref="T:System.Xml.XmlDictionaryReader" /> 当前定位在的文本节点。</summary>
      <param name="reader">要从其中获取文本值的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <param name="isAttribute">如果读取器是定位在属性值上或定位在元素内容上，则为 true，否则为 false。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)">
      <summary>写入一个 <see cref="T:System.Guid" /> 值。</summary>
      <param name="value">要编写的 <see cref="T:System.Guid" /> 值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)">
      <summary>写入一个 <see cref="T:System.TimeSpan" /> 值。</summary>
      <param name="value">要编写的 <see cref="T:System.TimeSpan" /> 值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.IStreamProvider)">
      <summary>从 <see cref="T:System.Xml.IStreamProvider" /> 写入值。</summary>
      <param name="value">要编写的 <see cref="T:System.Xml.IStreamProvider" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="value" />返回 null 流对象。</exception>
      <exception cref="T:System.InvalidOperationException">在前一个异步操作完成前调用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 方法。 在这种情况下，将通过消息“异步操作已过程中”引发 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)">
      <summary>写入唯一 Id 值。</summary>
      <param name="value">要写入的唯一 Id 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)">
      <summary>写入一个 <see cref="T:System.Xml.XmlDictionaryString" /> 值。</summary>
      <param name="value">
        <see cref="T:System.Xml.XmlDictionaryString" /> 值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValueAsync(System.Xml.IStreamProvider)">
      <summary>异步写入一个来自 <see cref="T:System.Xml.IStreamProvider" /> 的数值。</summary>
      <returns>表示 WriteValue 异步操作的任务。</returns>
      <param name="value">要编写的 <see cref="T:System.Xml.IStreamProvider" /> 值。</param>
      <exception cref="T:System.InvalidOperationException">在前一个异步操作完成前调用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 方法。 在这种情况下，将通过消息“异步操作已过程中”引发 <see cref="T:System.InvalidOperationException" />。</exception>
      <exception cref="T:System.InvalidOperationException">在前一个异步操作完成前调用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 方法。 在这种情况下，将通过消息“异步操作已过程中”引发 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
      <summary>在当前节点中写入标准的 XML 属性。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="value">属性的值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>在当前节点中写入 XML 属性。</summary>
      <param name="localName">属性的本地名称。</param>
      <param name="value">属性的值。</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
      <summary>写入命名空间声明属性。</summary>
      <param name="prefix">绑定到给定命名空间的前缀。</param>
      <param name="namespaceUri">前缀所绑定到的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> 为 null。</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)">
      <summary>写入命名空间声明属性。</summary>
      <param name="prefix">绑定到给定命名空间的前缀。</param>
      <param name="namespaceUri">前缀所绑定到的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> 为 null。</exception>
    </member>
  </members>
</doc>