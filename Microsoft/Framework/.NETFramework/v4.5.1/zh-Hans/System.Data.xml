<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data</name>
  </assembly>
  <members>
    <member name="T:Microsoft.SqlServer.Server.DataAccessKind">
      <summary>描述用户定义的方法或函数所使用的用户数据访问类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.DataAccessKind.None">
      <summary>该方法或函数不访问用户数据。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.DataAccessKind.Read">
      <summary>该方法或函数读取用户数据。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.Format">
      <summary>由 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> 和 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute" /> 用来指示用户定义类型 (UDT) 或聚合的序列化格式。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.Format.Native">
      <summary>Native 序列化格式使用非常简单的算法，使 SQL Server 能够在磁盘上存储 UDT 的有效表示形式。 标记为 Native 序列化的类型只能将值类型（在 Microsoft Visual C# 中为 struct，在 Microsoft Visual Basic .NET 中为 structure）用作成员。 不支持引用类型（如 Visual C# 和 Visual Basic 中的类）的成员，无论它们是用户定义的成员还是框架中已有的成员（如 <see cref="T:System.String" />），均是如此。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.Format.Unknown">
      <summary>该序列化格式是未知的。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.Format.UserDefined">
      <summary>使用 UserDefined 序列化格式，开发人员可以通过 <see cref="T:Microsoft.SqlServer.Server.IBinarySerialize" />.Write 和 <see cref="T:Microsoft.SqlServer.Server.IBinarySerialize" />.Read 方法完全控制二进制格式。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.IBinarySerialize">
      <summary>为用户定义类型 (UDT) 和用户定义聚合的序列化和反序列化提供自定义实现。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)">
      <summary>从用户定义类型 (UDT) 或用户定义聚合的二进制格式生成用户定义的类型或用户定义的聚合。</summary>
      <param name="r">对象从中进行反序列化的 <see cref="T:System.IO.BinaryReader" /> 流。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)">
      <summary>将用户定义的类型 (UDT) 或用户定义的聚合转换为其二进制格式，以便保留。</summary>
      <param name="w">UDT 或用户定义聚合所序列化到的 <see cref="T:System.IO.BinaryWriter" /> 流。</param>
    </member>
    <member name="T:Microsoft.SqlServer.Server.InvalidUdtException">
      <summary>在 SQL Server 或 ADO.NET <see cref="N:System.Data.SqlClient" /> 提供程序检测到无效的用户定义类型 (UDT) 时引发。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.InvalidUdtException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>对于给定的 <see cref="T:System.Runtime.Serialization.StreamingContext" />，将所有的 <see cref="T:Microsoft.SqlServer.Server.InvalidUdtException" /> 属性流式写入 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlContext">
      <summary>表示调用方上下文的抽象，该上下文提供对 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 和 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象的访问。 此类不能被继承。</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlContext.IsAvailable">
      <summary>指定调用代码是否在 SQL Server 中运行，以及上下文连接是否可访问。</summary>
      <returns>如果上下文连接可用，并且其他 <see cref="T:Microsoft.SqlServer.Server.SqlContext" /> 成员可访问，则为 True。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlContext.Pipe">
      <summary>获取允许调用方将结果集、消息和命令的执行结果发送回客户端的管道对象。</summary>
      <returns>如果管道可用，则为 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 的实例；如果在管道不可用的上下文中（如在用户定义的函数中）调用，则为 null。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlContext.TriggerContext">
      <summary>获取触发器上下文，该上下文用于向调用方提供有关导致触发器激发的原因的信息，以及被更新的列的映射。</summary>
      <returns>如果触发器上下文可用，则为 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 的实例；如果在触发器调用之外调用，则为 null。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity">
      <summary>调用方的 Microsoft Windows 标识。</summary>
      <returns>表示调用方的 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 实例；如果客户端是使用“SQL Server 身份验证”进行身份验证的，则为 null。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlDataRecord">
      <summary>表示单个数据行及其元数据。 此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.#ctor(Microsoft.SqlServer.Server.SqlMetaData[])">
      <summary>使用基于作为参数传递的 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象的数组的架构，初始化新的 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 实例。</summary>
      <param name="metaData">对 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 中的每一列进行描述的 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metaData" /> 为 null。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount">
      <summary>获取数据行的列数。 此属性是只读的。</summary>
      <returns>数据行的列数，其形式为整数。</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetBoolean(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Boolean" />。</summary>
      <returns>形式为 <see cref="T:System.Boolean" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetByte(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Byte" />。</summary>
      <returns>形式为 <see cref="T:System.Byte" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Byte" /> 对象的数组。</summary>
      <returns>已复制的字节数。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="fieldOffset">开始检索字节的字段值偏移量。</param>
      <param name="buffer">要将字节复制到的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字节的缓冲区偏移量。</param>
      <param name="length">复制到缓冲区的字节数。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetChar(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Char" />。</summary>
      <returns>形式为 <see cref="T:System.Char" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Char" /> 对象的数组。</summary>
      <returns>已复制的字符数。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="fieldOffset">开始检索字符的字段值偏移量。</param>
      <param name="buffer">要将字符复制到的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字符的缓冲区偏移量。</param>
      <param name="length">复制到缓冲区的字符数。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDataTypeName(System.Int32)">
      <summary>返回序号参数所指定的列的数据类型名称。</summary>
      <returns>包含列的数据类型的 <see cref="T:System.String" />。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDateTime(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.DateTime" />。</summary>
      <returns>形式为 <see cref="T:System.DateTime" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDateTimeOffset(System.Int32)">
      <summary>将指定列的数据作为 <see cref="T:System.DateTimeOffset" /> 返回。</summary>
      <returns>指定列的值，为 <see cref="T:System.DateTimeOffset" /> 形式。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDecimal(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Decimal" />。</summary>
      <returns>形式为 <see cref="T:System.Decimal" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDouble(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Double" />。</summary>
      <returns>形式为 <see cref="T:System.Double" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetFieldType(System.Int32)">
      <summary>返回一个 <see cref="T:System.Type" /> 对象，该对象表示映射到 <paramref name="ordinal" /> 参数所指定的列的 SQL Server 类型的公共语言运行时 (CLR) 类型。</summary>
      <returns>形式为 <see cref="T:System.Type" /> 对象的列类型。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.TypeLoadException">该列属于用户定义类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该列属于用户定义类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetFloat(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 float。</summary>
      <returns>形式为 float 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetGuid(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Guid" />。</summary>
      <returns>形式为 <see cref="T:System.Guid" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt16(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Int16" />。</summary>
      <returns>形式为 <see cref="T:System.Int16" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt32(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Int32" />。</summary>
      <returns>形式为 <see cref="T:System.Int32" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt64(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Int64" />。</summary>
      <returns>形式为 <see cref="T:System.Int64" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetName(System.Int32)">
      <summary>返回序号参数所指定的列的名称。</summary>
      <returns>包含列名称的 <see cref="T:System.String" />。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetOrdinal(System.String)">
      <summary>返回列名称所指定的列序号。</summary>
      <returns>列的从零开始的序号，其形式为整数。</returns>
      <param name="name">要查找的列名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">未能找到列名称。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBinary(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBoolean(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlByte(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBytes(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlChars(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlChars" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDateTime(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDecimal(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDouble(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlFieldType(System.Int32)">
      <summary>返回一个 <see cref="T:System.Type" /> 对象，该对象表示映射到列的 SQL Server 类型的类型，其形式为 <see cref="N:System.Data.SqlTypes" /> 中定义的 SQL Server 类型。</summary>
      <returns>形式为 <see cref="T:System.Type" /> 对象的列类型。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.TypeLoadException">该列属于用户定义类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该列属于用户定义类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlGuid(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt16(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt32(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt64(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlMetaData(System.Int32)">
      <summary>返回一个 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象，该对象描述列序号所指定的列的元数据。</summary>
      <returns>形式为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象的列元数据。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlMoney(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlSingle(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlString(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlString" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlValue(System.Int32)">
      <summary>返回存储在列序号所指定的列中的数据值，数据值表示为 SQL Server 类型。</summary>
      <returns>形式为 <see cref="T:System.Object" /> 的列值，表示为 SQL Server 类型。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlValues(System.Object[])">
      <summary>将记录中所有列的值返回到一个数组中，这些值表示为 SQL Server 类型。</summary>
      <returns>一个指示复制的列数的 <see cref="T:System.Int32" />。</returns>
      <param name="values">要将列值复制到其中的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlXml(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlXml" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetString(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.String" />。</summary>
      <returns>形式为 <see cref="T:System.String" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetTimeSpan(System.Int32)">
      <summary>将指定列的数据作为 <see cref="T:System.TimeSpan" /> 返回。</summary>
      <returns>指定列的值，为 <see cref="T:System.TimeSpan" /> 形式。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetValue(System.Int32)">
      <summary>返回序号参数所指定的列的公共语言运行时 (CLR) 类型值。</summary>
      <returns>ordinal 所指定的列的 CLR 类型值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetValues(System.Object[])">
      <summary>将记录中所有列的值返回到一个数组中，这些值表示为公共语言运行时 (CLR) 类型。</summary>
      <returns>一个指示复制的列数的 <see cref="T:System.Int32" />。</returns>
      <param name="values">要将列值复制到其中的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.IsDBNull(System.Int32)">
      <summary>如果列序号参数所指定的列为空，则返回 true。</summary>
      <returns>如果列为空，则为 true；否则为 false。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.Item(System.Int32)">
      <summary>获取列 <paramref name="ordinal" /> 参数所指定的列的公共语言运行时 (CLR) 类型值。</summary>
      <returns>
        <paramref name="ordinal" /> 所指定的列的 CLR 类型值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.Item(System.String)">
      <summary>获取列 <paramref name="name" /> 参数所指定的列的公共语言运行时 (CLR) 类型值。</summary>
      <returns>
        <paramref name="name" /> 所指定的列的 CLR 类型值。</returns>
      <param name="name">列的名称。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Byte" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Byte" /> 值数组。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="fieldOffset">开始复制字节的字段值偏移量。</param>
      <param name="buffer">要从其中复制字节的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字节的缓冲区偏移量。</param>
      <param name="length">要从缓冲区复制的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetChar(System.Int32,System.Char)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Char" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Char" /> 值数组。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="fieldOffset">开始复制字符的字段值偏移量。</param>
      <param name="buffer">要从其中复制字符的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字符的缓冲区偏移量。</param>
      <param name="length">要从缓冲区复制的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDateTimeOffset(System.Int32,System.DateTimeOffset)">
      <summary>将指定列的值设置为 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDBNull(System.Int32)">
      <summary>将指定列中的值设置为 <see cref="T:System.DBNull" />。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>将列中存储的数据设置为指定的 float 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Guid" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Int16" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Int32" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Int64" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBinary(System.Int32,System.Data.SqlTypes.SqlBinary)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBoolean(System.Int32,System.Data.SqlTypes.SqlBoolean)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlByte(System.Int32,System.Data.SqlTypes.SqlByte)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBytes(System.Int32,System.Data.SqlTypes.SqlBytes)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlChars(System.Int32,System.Data.SqlTypes.SqlChars)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDateTime(System.Int32,System.Data.SqlTypes.SqlDateTime)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDecimal(System.Int32,System.Data.SqlTypes.SqlDecimal)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDouble(System.Int32,System.Data.SqlTypes.SqlDouble)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlGuid(System.Int32,System.Data.SqlTypes.SqlGuid)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt16(System.Int32,System.Data.SqlTypes.SqlInt16)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt32(System.Int32,System.Data.SqlTypes.SqlInt32)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt64(System.Int32,System.Data.SqlTypes.SqlInt64)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlMoney(System.Int32,System.Data.SqlTypes.SqlMoney)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlSingle(System.Int32,System.Data.SqlTypes.SqlSingle)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlString(System.Int32,System.Data.SqlTypes.SqlString)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlXml(System.Int32,System.Data.SqlTypes.SqlXml)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetString(System.Int32,System.String)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.String" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetTimeSpan(System.Int32,System.TimeSpan)">
      <summary>将指定列的值设置为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传入的 <paramref name="ordinal" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">传入的 <see cref="T:System.TimeSpan" /> 值的长度大于 24 小时。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetValue(System.Int32,System.Object)">
      <summary>为列序号所指定的列设置一个新值，这些值表示为公共语言运行时 (CLR) 类型。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">指定列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetValues(System.Object[])">
      <summary>为 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 中所有列设置新值。 这些值表示为公共语言运行时 (CLR) 类型。</summary>
      <returns>设置为整数的列值数。</returns>
      <param name="values">
        <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 实例的新值数组，这些值表示为装箱为 <see cref="T:System.Object" /> 引用的 CLR 类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">值的数目与 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 实例中的列数不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>在此版本中不受支持。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" />始终引发异常。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlFacetAttribute">
      <summary>使用可用在 Transact-SQL 中的其他信息对用户定义类型 (UDT) 的返回结果进行批注。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlFacetAttribute.#ctor">
      <summary>用户定义类型 (UDT) 返回类型的可选特性，该特性的用途是借助可以在 Transact-SQL 中使用的其他信息对返回的结果进行批注。</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.IsFixedLength">
      <summary>指示用户定义类型的返回类型是否具有固定长度。</summary>
      <returns>如果返回类型具有固定长度，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.IsNullable">
      <summary>指示用户定义类型的返回类型是否可以为 null。</summary>
      <returns>如果用户定义类型的返回类型可以为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.MaxSize">
      <summary>用户定义类型的基础字段类型的最大大小（用逻辑单元表示）。</summary>
      <returns>一个 <see cref="T:System.Int32" />，它以逻辑单位表示基础字段类型的最大大小。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.Precision">
      <summary>用户定义类型的返回类型的精度。</summary>
      <returns>表示返回类型的精度的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.Scale">
      <summary>用户定义类型的返回类型的小数位数。</summary>
      <returns>表示返回类型的小数位数的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlFunctionAttribute">
      <summary>用于将用户定义聚合的方法定义标记为 SQL Server 中的函数。 该特性的属性反映了向 SQL Server 注册该类型时所使用的实体特征。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlFunctionAttribute.#ctor">
      <summary>用户定义聚合的可选特性，用于指示方法应在 SQL Server 中注册为函数。 还用于设置函数特性的 <see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.DataAccess" />、<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.FillRowMethodName" />、<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsDeterministic" />、<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsPrecise" />、<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.Name" />、<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.SystemDataAccess" /> 和 <see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.TableDefinition" /> 属性。</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.DataAccess">
      <summary>指示函数是否需要访问存储在 SQL Server 的本地实例中的用户数据。</summary>
      <returns>
        <see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />.None：不访问数据。 <see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />.Read：仅读取用户数据。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.FillRowMethodName">
      <summary>方法的名称，该方法与 TVF 协定所使用的表值函数 (TVF) 在同一个类中。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，它表示 TVF 协定所用方法的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsDeterministic">
      <summary>指示用户定义的函数是否是确定性的。</summary>
      <returns>如果该函数是确定性的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsPrecise">
      <summary>指示函数是否涉及不精确的计算，如浮点运算。</summary>
      <returns>如果函数涉及精确的计算，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.Name">
      <summary>函数在 SQL Server 中注册时所使用的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，它表示函数在注册时应使用的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.SystemDataAccess">
      <summary>指示函数是否需要访问存储在 SQL Server 的系统目录或虚拟系统表中的数据。</summary>
      <returns>
        <see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />.None：不访问系统数据。 <see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />.Read：仅读取系统数据。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.TableDefinition">
      <summary>如果方法用作表值函数 (TVF)，则为一个字符串，该字符串表示结果的表定义。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，它表示结果的表定义。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlMetaData">
      <summary>从 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象的参数和列指定和检索元数据信息。 此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType)">
      <summary>使用指定的列名称和类型初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称和默认服务器初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。 这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Byte,System.Byte)">
      <summary>使用指定的列名称、类型、精度和小数位数初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">参数或列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数，或者 <paramref name="scale" /> 大于 <paramref name="precision" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、精度、小数位数和服务器默认值初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。 这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64)">
      <summary>使用指定的列名称、类型和最大长度初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、最大长度和服务器默认值初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。 这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Byte,System.Byte,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Type)">
      <summary>使用指定的列名称、类型、最大长度、精度、小数位数、区域设置 ID、比较选项和用户定义的类型 (UDT) 初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="userDefinedType">一个指向该 UDT 的 <see cref="T:System.Type" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数，或者 <paramref name="userDefinedType" /> 指向了未声明 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> 的类型。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Byte,System.Byte,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Type,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、最大长度、精度、小数位数、区域设置 ID、比较选项和用户定义的类型 (UDT) 初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。 这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="localeId">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="userDefinedType">一个指向该 UDT 的 <see cref="T:System.Type" /> 实例。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Int64,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>使用指定的列名称、类型、最大长度、区域设置和比较选项初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">参数或列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、最大长度、区域设置、比较选项和服务器默认值初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。 这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.String,System.String,System.String)">
      <summary>使用指定的列名称、类型、数据库名称、所属架构和对象名称初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="database">类型化 XML 实例的 XML 架构集合的数据库名称。</param>
      <param name="owningSchema">类型化 XML 实例的 XML 架构集合的关系架构名称。</param>
      <param name="objectName">类型化 XML 实例的 XML 架构集合的名称。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="database" /> 和 <paramref name="owningSchema" /> 不为 null 时，<paramref name="Name" /> 为 null，或 <paramref name="objectName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、数据库名称、所属架构、对象名称和默认服务器初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。 这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="database">类型化 XML 实例的 XML 架构集合的数据库名称。</param>
      <param name="owningSchema">类型化 XML 实例的 XML 架构集合的关系架构名称。</param>
      <param name="objectName">类型化 XML 实例的 XML 架构集合的名称。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Type)">
      <summary>使用指定的列名称、类型和用户定义的类型 (UDT) 初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="userDefinedType">一个指向该 UDT 的 <see cref="T:System.Type" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数，或者 <paramref name="userDefinedType" /> 指向了未声明 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> 的类型。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Type,System.String)">
      <summary>使用指定的列名称、用户定义的类型 (UDT) 和 SQLServer 类型初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="userDefinedType">一个指向该 UDT 的 <see cref="T:System.Type" /> 实例。</param>
      <param name="serverTypeName">
        <paramref name="userDefinedType" /> 的 SQL Server 类型名称。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Type,System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、用户定义的类型、SQL Server 类型和服务器默认值初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。 这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="userDefinedType">一个指向该 UDT 的 <see cref="T:System.Type" /> 实例。</param>
      <param name="serverTypeName">
        <paramref name="userDefinedType" /> 的 SQL Server 类型名称。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Boolean)">
      <summary>根据元数据验证指定的 <see cref="T:System.Boolean" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Boolean" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Byte)">
      <summary>根据元数据验证指定的 <see cref="T:System.Byte" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Byte" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Byte[])">
      <summary>根据元数据验证指定的 <see cref="T:System.Byte" /> 值的数组，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Byte" /> 值的数组的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Char)">
      <summary>根据元数据验证指定的 <see cref="T:System.Char" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Char" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Char[])">
      <summary>根据元数据验证指定的 <see cref="T:System.Char" /> 值的数组，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Char" /> 值的数组的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBinary)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBoolean)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlByte)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBytes)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlChars)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDateTime)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDecimal)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDouble)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlGuid)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt16)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt32)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt64)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlMoney)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlSingle)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlString)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlString" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlXml)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.DateTime)">
      <summary>根据元数据验证指定的 <see cref="T:System.DateTime" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.DateTime" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.DateTimeOffset)">
      <summary>根据元数据验证指定的 <see cref="T:System.DateTimeOffset" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.DateTimeOffset" /> 值的数组的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Decimal)">
      <summary>根据元数据验证指定的 <see cref="T:System.Decimal" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Decimal" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Double)">
      <summary>根据元数据验证指定的 <see cref="T:System.Double" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Double" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Guid)">
      <summary>根据元数据验证指定的 <see cref="T:System.Guid" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Guid" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int16)">
      <summary>根据元数据验证指定的 <see cref="T:System.Int16" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Int16" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int32)">
      <summary>根据元数据验证指定的 <see cref="T:System.Int32" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Int32" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int64)">
      <summary>根据元数据验证指定的 <see cref="T:System.Int64" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Int64" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Object)">
      <summary>根据元数据验证指定的 <see cref="T:System.Object" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Object" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Single)">
      <summary>根据元数据验证指定的 <see cref="T:System.Single" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Single" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.String)">
      <summary>根据元数据验证指定的 <see cref="T:System.String" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.String" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.TimeSpan)">
      <summary>根据元数据验证指定的 <see cref="T:System.TimeSpan" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.TimeSpan" /> 值的数组的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.CompareOptions">
      <summary>获取用于列或参数的比较规则。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 用于列或参数的比较规则。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.DbType">
      <summary>获取列或参数的数据类型。</summary>
      <returns>作为 <see cref="T:System.Data.DbType" /> 的列或参数的数据类型。</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.InferFromValue(System.Object,System.String)">
      <summary>从指定的对象推导出元数据，并将它作为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例返回。</summary>
      <returns>作为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例的推导出的元数据。</returns>
      <param name="value">用于从中推导出元数据的对象。</param>
      <param name="name">分配给返回的 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">v<paramref name="alue" /> 为 null。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.IsUniqueKey">
      <summary>指示表值参数中的列是否唯一。</summary>
      <returns>一个 Boolean 值。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.LocaleId">
      <summary>获取列或参数的区域设置 ID。</summary>
      <returns>作为 <see cref="T:System.Int64" /> 的列或参数的区域设置 ID。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Max">
      <summary>获取 text、ntext 和 image 数据类型的长度。</summary>
      <returns>text、ntext 和 image 数据类型的长度。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.MaxLength">
      <summary>获取列或参数的最大长度。</summary>
      <returns>作为 <see cref="T:System.Int64" /> 的列或参数的最大长度。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Name">
      <summary>获取列或参数的名称。</summary>
      <returns>作为 <see cref="T:System.String" /> 的列或参数的名称。</returns>
      <exception cref="T:System.InvalidOperationException">构造函数中指定的 <paramref name="Name" /> 的长度超过 128 个字符。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Precision">
      <summary>获取列或参数的精度。</summary>
      <returns>作为 <see cref="T:System.Byte" /> 的列或参数的精度。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Scale">
      <summary>获取列或参数的小数位数。</summary>
      <returns>列或参数的小数位数。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SortOrder">
      <summary>返回列的排序顺序。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SortOrder" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SortOrdinal">
      <summary>返回列排序的序号。</summary>
      <returns>列排序的序号。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SqlDbType">
      <summary>获取列或参数的数据类型。</summary>
      <returns>作为 <see cref="T:System.Data.DbType" /> 的列或参数的数据类型。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Type">
      <summary>获取用户定义的类型 (UDT) 的公共语言运行时 (CLR) 类型。</summary>
      <returns>作为 <see cref="T:System.Type" /> 的用户定义的类型的 CLR 类型名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.TypeName">
      <summary>获取该实例所表示的用户定义的类型 (UDT) 或 SQL Server 类型的名称，名称由三部分组成。</summary>
      <returns>作为 <see cref="T:System.String" /> 的 UDT 或 SQL Server 类型的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.UseServerDefault">
      <summary>报告此列是否应使用默认服务器值。</summary>
      <returns>一个 Boolean 值。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionDatabase">
      <summary>获取此 XML 实例的架构集合所在的数据库的名称。</summary>
      <returns>此 XML 实例的架构集合所在的数据库的 <see cref="T:System.String" /> 形式的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionName">
      <summary>获取用于此 XML 实例的架构集合的名称。</summary>
      <returns>此 XML 实例的架构集合的 <see cref="T:System.String" /> 形式的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionOwningSchema">
      <summary>获取此 XML 实例的架构集合所在的所属关系架构。</summary>
      <returns>
        <see cref="T:System.String" /> 形式的此 XML 实例的架构集合所在的所属关系架构。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlMethodAttribute">
      <summary>指示用户定义类型 (UDT) 的方法或属性的确定性和数据访问性质。 该特性的属性反映了向 SQL Server 注册该类型时所使用的实体特性。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMethodAttribute.#ctor">
      <summary>用户定义类型 (UDT) 的特性，用于指示 UDT 的方法或属性的确定性和数据访问性质。</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMethodAttribute.InvokeIfReceiverIsNull">
      <summary>指示 SQL Server 是否应对空实例调用该方法。</summary>
      <returns>如果 SQL Server 应该对空实例调用该方法，则为 true；否则为 false。 如果方法（因其属性）未能被调用，则返回 SQL ServerDbNull 。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMethodAttribute.IsMutator">
      <summary>指示用户定义类型 (UDT) 的方法是否为转变器。</summary>
      <returns>如果该方法是转变器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMethodAttribute.OnNullCall">
      <summary>指示在方法调用中指定了 null 输入参数时，是否调用用户定义类型 (UDT) 的方法。</summary>
      <returns>如果在方法调用中指定了 null 输入参数时调用了该方法，则为 true；如果在有任何输入参数为 null 时该方法返回 null 值，则为 false。 如果方法（因其属性）未能被调用，则返回 SQL ServerDbNull 。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlPipe">
      <summary>允许托管存储过程在 SQL Server 数据库上进行进程内运行，以便将结果返回调用方。 此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)">
      <summary>执行作为参数传递的命令，并将结果发送到客户端。</summary>
      <param name="command">要执行的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">对于绑定到进程外连接的命令，此方法不受支持。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults">
      <summary>获取一个值，该值指示 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 是否处于将单个结果集发送回客户端的模式。 此属性是只读的。</summary>
      <returns>如果已调用 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法，并且 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 处于将单个结果集发送回客户端的模式，则为 true；否则为 false。</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)">
      <summary>将单行结果集直接发送到客户端或当前输出使用者。</summary>
      <param name="record">发送到客户端的单行结果集：一个 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="record" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)">
      <summary>将多行结果集直接发送到客户端或当前输出使用者。</summary>
      <param name="reader">要发送到客户端的多行结果集：一个 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)">
      <summary>将字符串消息直接发送到客户端或当前输出使用者。</summary>
      <param name="message">要发送到客户端的消息字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="message" /> 大于4,000个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd">
      <summary>标记结果集的结尾，并将 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 实例返回到初始状态。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法以前未被调用过。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)">
      <summary>将单行数据发送回客户端。</summary>
      <param name="record">
        <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象，它具有要发送到客户端的行的列值。 记录的架构必须与传递给 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法的 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 的元数据所描述的架构相匹配。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="record" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法以前未被调用过。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)">
      <summary>标记要发送到客户端的结果集的开始，并使用记录参数构造描述结果集的元数据。</summary>
      <param name="record">
        <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象，元数据即是从中提取并用来描述结果集的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="record" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="record" /> 没有列或者还没有初始化。</exception>
      <exception cref="T:System.InvalidOperationException">在 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法之后调用了一个 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> 或 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> 方法之外的方法。</exception>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlProcedureAttribute">
      <summary>用于将程序集中的方法定义标记为存储过程。 该特性的属性反映了向 SQL Server 注册该类型时所使用的实体特征。 此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlProcedureAttribute.#ctor">
      <summary>程序集中的方法定义的特性，用于指示应将给定的方法注册为 SQL Server 中的存储过程。</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlProcedureAttribute.Name">
      <summary>存储过程的名称。</summary>
      <returns>表示存储过程名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlTriggerAttribute">
      <summary>用于将程序集中的方法定义标记为 SQL Server 中的触发器。 该特性的属性反映了向 SQL Server 注册该类型时所使用的实体特性。 此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlTriggerAttribute.#ctor">
      <summary>程序集中的方法定义的特性，用于将方法标记为 SQL Server 中的触发器。</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerAttribute.Event">
      <summary>触发器的类型和激活触发器的数据操作语言 (DML) 操作。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示触发器类型以及激活该触发器的数据操作语言 (DML) 操作。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerAttribute.Name">
      <summary>触发器的名称。</summary>
      <returns>一个表示触发器名称的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerAttribute.Target">
      <summary>应用触发器的表。</summary>
      <returns>一个表示表名的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlTriggerContext">
      <summary>提供所激发的触发器的上下文信息。</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerContext.ColumnCount">
      <summary>获取绑定到触发器的数据表所包含的列的数目。 此属性是只读的。</summary>
      <returns>绑定到触发器的数据表所包含的列的数目（整数类型）。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerContext.EventData">
      <summary>获取特定于激发触发器的操作的事件数据。</summary>
      <returns>如果有更多信息可用，则为特定于激发触发器的操作的事件数据（其形式为 <see cref="T:System.Data.SqlTypes.SqlXml" />）；否则为 null。</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlTriggerContext.IsUpdatedColumn(System.Int32)">
      <summary>如果列受 INSERT 或 UPDATE 语句的影响，则返回 true。</summary>
      <returns>如果列受 INSERT 或 UPDATE 操作的影响，则为 true。</returns>
      <param name="columnOrdinal">列的从零开始的序号。</param>
      <exception cref="T:System.InvalidOperationException">在触发器的上下文中被调用，其中 <see cref="P:Microsoft.SqlServer.Server.SqlTriggerContext.TriggerAction" /> 属性的值不是 Insert 或 Update。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerContext.TriggerAction">
      <summary>指示激发触发器的操作。</summary>
      <returns>激发触发器的操作，形式为 <see cref="T:Microsoft.SqlServer.Server.TriggerAction" />。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute">
      <summary>指示类型应注册为用户定义的聚合。 该特性的属性反映了向 SQL Server 注册该类型时所使用的实体特性。 此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.#ctor(Microsoft.SqlServer.Server.Format)">
      <summary>用户定义的聚合的一个必需特性，用于指示给定的类型为用户定义的聚合，以及用户定义的聚合的存储格式。</summary>
      <param name="format">
        <see cref="T:Microsoft.SqlServer.Server.Format" /> 值之一，表示聚合的序列化格式。</param>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.Format">
      <summary>序列化格式为 <see cref="T:Microsoft.SqlServer.Server.Format" /> 的值之一。</summary>
      <returns>表示序列化格式的 <see cref="T:Microsoft.SqlServer.Server.Format" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.IsInvariantToDuplicates">
      <summary>指示聚合是否与重复值无关。</summary>
      <returns>如果聚合与重复值无关，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.IsInvariantToNulls">
      <summary>指示聚合是否与空值无关。</summary>
      <returns>如果聚合与空值无关，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.IsInvariantToOrder">
      <summary>指示聚合是否与顺序无关。</summary>
      <returns>如果聚合与顺序无关，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.IsNullIfEmpty">
      <summary>指示在没有对任何值进行累积时聚合是否返回 null。</summary>
      <returns>如果在没有对任何值进行累积时聚合返回 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.MaxByteSize">
      <summary>聚合实例的最大大小（以字节为单位）。</summary>
      <returns>表示聚合实例的最大大小的 <see cref="T:System.Int32" /> 值。</returns>
    </member>
    <member name="F:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.MaxByteSizeValue">
      <summary>在计算期间存储此聚合实例的状态所需的最大大小（以字节为单位）。</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.Name">
      <summary>聚合的名称。</summary>
      <returns>表示聚合名称的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute">
      <summary>用于将程序集中的类型定义标记为 SQL Server 中的用户定义类型 (UDT)。 该特性的属性反映了向 SQL Server 注册该类型时所使用的实体特征。 此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.#ctor(Microsoft.SqlServer.Server.Format)">
      <summary>用户定义类型 (UDT) 的一个必需特性，用于确认给定的类型属于 UDT 并指示 UDT 的存储格式。</summary>
      <param name="format">
        <see cref="T:Microsoft.SqlServer.Server.Format" /> 值之一，表示类型的序列化格式。</param>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.Format">
      <summary>序列化格式为 <see cref="T:Microsoft.SqlServer.Server.Format" /> 的值之一。</summary>
      <returns>一个 <see cref="T:Microsoft.SqlServer.Server.Format" /> 值，表示序列化格式。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsByteOrdered">
      <summary>指示用户定义的类型是否根据字节进行排序。</summary>
      <returns>如果用户定义的类型是按字节进行排序的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsFixedLength">
      <summary>指示此用户定义类型的所有实例是否都具有相同的长度。</summary>
      <returns>如果此类型的所有实例都具有相同的长度，则为 true；否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize">
      <summary>实例的最大大小（以字节为单位）。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，表示实例的最大大小。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.Name">
      <summary>用户定义类型的 SQL Server 名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，表示用户定义类型的 SQL Server 名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.ValidationMethodName">
      <summary>方法的名称，该方法用于验证用户定义类型的实例。</summary>
      <returns>一个 <see cref="T:System.String" />，表示用于验证用户定义类型的实例的方法名称。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SystemDataAccessKind">
      <summary>描述用户定义的方法或函数对系统数据的访问类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.SystemDataAccessKind.None">
      <summary>方法或函数不访问系统数据。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.SystemDataAccessKind.Read">
      <summary>方法或函数读取系统数据。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.TriggerAction">
      <summary>
        <see cref="T:Microsoft.SqlServer.Server.TriggerAction" /> 枚举由 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 类用来指示激发该触发器的操作。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterAppRole">
      <summary>已执行 ALTER APPLICATION ROLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterAssembly">
      <summary>已执行 ALTER ASSEMBLY Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterBinding">
      <summary>当事件通知在数据库或服务器实例上创建时，会指定 ALTER_REMOTE_SERVICE_BINDING 事件类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterFunction">
      <summary>已执行 ALTER FUNCTION Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterIndex">
      <summary>已执行 ALTER INDEX Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterLogin">
      <summary>已执行 ALTER LOGIN Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterPartitionFunction">
      <summary>已执行 ALTER PARTITION FUNCTION Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterPartitionScheme">
      <summary>已执行 ALTER PARTITION SCHEME Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterProcedure">
      <summary>已执行 ALTER PROCEDURE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterQueue">
      <summary>已执行 ALTER QUEUE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterRole">
      <summary>已执行 ALTER ROLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterRoute">
      <summary>已执行 ALTER ROUTE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterSchema">
      <summary>已执行 ALTER SCHEMA Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterService">
      <summary>已执行 ALTER SERVICE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterTable">
      <summary>已执行 ALTER TABLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterTrigger">
      <summary>已执行 ALTER TRIGGER Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterUser">
      <summary>已执行 ALTER USER Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterView">
      <summary>已执行 ALTER VIEW Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateAppRole">
      <summary>已执行 CREATE APPLICATION ROLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateAssembly">
      <summary>已执行 CREATE ASSEMBLY Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateBinding">
      <summary>当事件通知在数据库或服务器实例上创建时，会指定 CREATE_REMOTE_SERVICE_BINDING 事件类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateContract">
      <summary>已执行 CREATE CONTRACT Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateEventNotification">
      <summary>已执行 CREATE EVENT NOTIFICATION Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateFunction">
      <summary>已执行 CREATE FUNCTION Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateIndex">
      <summary>已执行 CREATE INDEX Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateLogin">
      <summary>已执行 CREATE LOGIN Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateMsgType">
      <summary>已执行 CREATE MESSAGE TYPE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreatePartitionFunction">
      <summary>已执行 CREATE PARTITION FUNCTION Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreatePartitionScheme">
      <summary>已执行 CREATE PARTITION SCHEME Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateProcedure">
      <summary>已执行 CREATE PROCEDURE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateQueue">
      <summary>已执行 CREATE QUEUE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateRole">
      <summary>已执行 CREATE ROLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateRoute">
      <summary>已执行 CREATE ROUTE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateSchema">
      <summary>已执行 CREATE SCHEMA Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateSecurityExpression">
      <summary>不可用。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateService">
      <summary>已执行 CREATE SERVICE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateSynonym">
      <summary>已执行 CREATE SYNONYM Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateTable">
      <summary>已执行 CREATE TABLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateTrigger">
      <summary>已执行 CREATE TRIGGER Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateType">
      <summary>已执行 CREATE TYPE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateUser">
      <summary>已执行 CREATE USER Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateView">
      <summary>已执行 CREATE VIEW Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.Delete">
      <summary>已执行 DELETE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DenyObject">
      <summary>已执行 DENY Object Permissions Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DenyStatement">
      <summary>已执行 DENY Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropAppRole">
      <summary>已执行 DROP APPLICATION ROLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropAssembly">
      <summary>已执行 DROP ASSEMBLY Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropBinding">
      <summary>当事件通知在数据库或服务器实例上创建时，会指定 DROP_REMOTE_SERVICE_BINDING 事件类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropContract">
      <summary>已执行 DROP CONTRACT Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropEventNotification">
      <summary>已执行 DROP EVENT NOTIFICATION Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropFunction">
      <summary>已执行 DROP FUNCTION Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropIndex">
      <summary>已执行 DROP INDEX Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropLogin">
      <summary>已执行 DROP LOGIN Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropMsgType">
      <summary>已执行 DROP MESSAGE TYPE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropPartitionFunction">
      <summary>已执行 DROP PARTITION FUNCTION Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropPartitionScheme">
      <summary>已执行 DROP PARTITION SCHEME Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropProcedure">
      <summary>已执行 DROP PROCEDURE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropQueue">
      <summary>已执行 DROP QUEUE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropRole">
      <summary>已执行 DROP ROLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropRoute">
      <summary>已执行 DROP ROUTE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropSchema">
      <summary>已执行 DROP SCHEMA Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropSecurityExpression">
      <summary>不可用。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropService">
      <summary>已执行 DROP SERVICE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropSynonym">
      <summary>已执行 DROP SYNONYM Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropTable">
      <summary>已执行 DROP TABLE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropTrigger">
      <summary>已执行 DROP TRIGGER Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropType">
      <summary>已执行 DROP TYPE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropUser">
      <summary>已执行 DROP USER Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropView">
      <summary>已执行 DROP VIEW Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.GrantObject">
      <summary>已执行 GRANT OBJECT Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.GrantStatement">
      <summary>已执行 GRANT Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.Insert">
      <summary>已执行 INSERT Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.Invalid">
      <summary>出现一个无效触发操作，该操作不向用户公开。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.RevokeObject">
      <summary>已执行 REVOKE OBJECT Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.RevokeStatement">
      <summary>已执行 REVOKE Transact-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.Update">
      <summary>已执行 UPDATE Transact-SQL 语句。</summary>
    </member>
    <member name="T:System.Data.AcceptRejectRule">
      <summary>确定在带有 <see cref="T:System.Data.ForeignKeyConstraint" /> 的 <see cref="T:System.Data.DataTable" /> 上调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 或 <see cref="M:System.Data.DataTable.RejectChanges" /> 方法时将发生的操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.AcceptRejectRule.Cascade">
      <summary>在关系中级联更改。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.None">
      <summary>不发生任何操作（默认）。</summary>
    </member>
    <member name="T:System.Data.CommandBehavior">
      <summary>提供对查询结果和查询对数据库的影响的说明。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.CommandBehavior.CloseConnection">
      <summary>在执行该命令时，如果关闭关联的 DataReader 对象，则关联的 Connection 对象也将关闭。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.Default">
      <summary>此查询可能返回多个结果集。 执行查询可能会影响数据库的状态。 Default 不设置 <see cref="T:System.Data.CommandBehavior" /> 标志，因此调用 ExecuteReader(CommandBehavior.Default) 在功能上等效于调用 ExecuteReader()。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.KeyInfo">
      <summary>此查询返回列和主键信息。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SchemaOnly">
      <summary>查询仅返回列信息。 当使用 <see cref="F:System.Data.CommandBehavior.SchemaOnly" /> 时，用于 SQL Server 的 .NET Framework 数据提供程序将在要执行的语句前加上 SET FMTONLY ON。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SequentialAccess">
      <summary>提供一种方法，以便 DataReader 处理包含带有大二进制值的列的行。 SequentialAccess 不是加载整行，而是使 DataReader 将数据作为流来加载。 然后可以使用 GetBytes 或 GetChars 方法来指定开始读取操作的字节位置以及正在返回的数据的有限的缓冲区大小。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleResult">
      <summary>查询返回一个结果集。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleRow">
      <summary>查询应返回结果集中的单个行。 执行查询可能会影响数据库的状态。 一些 .NET Framework 数据提供程序可能（但不要求）使用此信息来优化命令的性能。 用 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象的 <see cref="M:System.Data.OleDb.OleDbCommand.ExecuteReader" /> 方法指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 时，用于 OLE DB 的 .NET Framework 数据提供程序使用 OLE DB IRow 接口（如果可用）执行绑定。 否则，它使用 IRowset 接口。 如果您的 SQL 语句应该只返回一行，则指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 还可以提高应用程序性能。 在执行应返回多个结果集的查询时，可以指定 SingleRow。在这种情况下，同时指定了多结果集 SQL 查询和单行，返回的结果将仅包含第一个结果集的第一行。 将不返回查询的其他结果集。</summary>
    </member>
    <member name="T:System.Data.CommandType">
      <summary>指定如何解释命令字符串。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.CommandType.StoredProcedure">
      <summary>存储过程的名称。</summary>
    </member>
    <member name="F:System.Data.CommandType.TableDirect">
      <summary>表的名称。</summary>
    </member>
    <member name="F:System.Data.CommandType.Text">
      <summary>SQL 文本命令。（默认。）</summary>
    </member>
    <member name="T:System.Data.ConflictOption">
      <summary>指定将如何检测和解决对数据源的相互冲突的更改。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareAllSearchableValues">
      <summary>更新和删除语句将在 WHERE 子句中包含表中的所有可搜索列。 这等效于指定 CompareAllValuesUpdate    |CompareAllValuesDelete.</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareRowVersion">
      <summary>如果表中存在任何 Timestamp 列，则这些列在 WHERE 子句中用于所有生成的更新语句。 这等效于指定 CompareRowVersionUpdate    |CompareRowVersionDelete.</summary>
    </member>
    <member name="F:System.Data.ConflictOption.OverwriteChanges">
      <summary>所有的更新和删除语句仅在 WHERE 子句中包含 <see cref="P:System.Data.DataTable.PrimaryKey" /> 列。 如果未定义 <see cref="P:System.Data.DataTable.PrimaryKey" />，则所有可搜索的列都包含在 WHERE 子句中。 这等效于 OverwriteChangesUpdate    |OverwriteChangesDelete.</summary>
    </member>
    <member name="T:System.Data.ConnectionState">
      <summary>描述与数据源的连接的当前状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.ConnectionState.Broken">
      <summary>与数据源的连接中断。 只有在连接打开之后才可能发生这种情况。 可以关闭处于这种状态的连接，然后重新打开。（该值是为此产品的未来版本保留的。）</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Closed">
      <summary>连接处于关闭状态。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Connecting">
      <summary>连接对象正在与数据源连接。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Executing">
      <summary>连接对象正在执行命令。（该值是为此产品的未来版本保留的。）</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Fetching">
      <summary>连接对象正在检索数据。（该值是为此产品的未来版本保留的。）</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Open">
      <summary>连接处于打开状态。</summary>
    </member>
    <member name="T:System.Data.Constraint">
      <summary>表示可在一个或多个 <see cref="T:System.Data.DataColumn" /> 对象上强制执行的约束。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Constraint.#ctor">
      <summary>初始化 <see cref="T:System.Data.Constraint" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Constraint._DataSet">
      <summary>获取此约束所属的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>此约束所属的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.Constraint.CheckStateForProperty">
      <summary>获取此约束所属的 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="P:System.Data.Constraint.ConstraintName">
      <summary>
        <see cref="T:System.Data.ConstraintCollection" /> 中的约束的名称。</summary>
      <returns>
        <see cref="T:System.Data.Constraint" /> 的名称。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.Constraint" /> 名称是空值或空字符串。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.ConstraintCollection" /> 已经包含同名称的 <see cref="T:System.Data.Constraint" />（比较不区分大小写。）</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Constraint.ExtendedProperties">
      <summary>获取用户定义的约束属性的集合。</summary>
      <returns>自定义信息的 <see cref="T:System.Data.PropertyCollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Constraint.SetDataSet(System.Data.DataSet)">
      <summary>设置约束的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">此约束将属于的 <see cref="T:System.Data.DataSet" />。</param>
    </member>
    <member name="P:System.Data.Constraint.Table">
      <summary>获取向其应用约束的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>向其应用约束的 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Constraint.ToString">
      <summary>获取 <see cref="P:System.Data.Constraint.ConstraintName" />（如果存在）作为字符串。</summary>
      <returns>
        <see cref="P:System.Data.Constraint.ConstraintName" /> 的字符串值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.ConstraintCollection">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 的约束的集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.Data.Constraint)">
      <summary>将指定的 <see cref="T:System.Data.Constraint" /> 对象添加到集合。</summary>
      <param name="constraint">要相加的 Constraint。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">该约束已经属于此集合，或者属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名约束。（该比较不区分大小写。）</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>使用指定名称、<see cref="T:System.Data.DataColumn" /> 和指示列是否为主键的值构造一个新的 <see cref="T:System.Data.UniqueConstraint" />，并将其添加到集合中。</summary>
      <returns>一个新的 UniqueConstraint。</returns>
      <param name="name">UniqueConstraint 的名称。</param>
      <param name="column">向其应用约束的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="primaryKey">指定列是否应为主键。 如果为 true，则该列将为主键列。</param>
      <exception cref="T:System.ArgumentException">该约束已属于该集合。 - 或 - 该约束属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的约束。（该比较不区分大小写。）</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>用指定名称、父列和子列来构造新的 <see cref="T:System.Data.ForeignKeyConstraint" />，并将此约束添加到集合。</summary>
      <returns>一个新的 ForeignKeyConstraint。</returns>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。</param>
      <param name="primaryKeyColumn">主键或父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="foreignKeyColumn">外键或子级 <see cref="T:System.Data.DataColumn" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>使用指定名称、<see cref="T:System.Data.DataColumn" /> 对象的数组和指示列是否为主键的值构造一个新的 <see cref="T:System.Data.UniqueConstraint" />，并将其添加到集合中。</summary>
      <returns>一个新的 UniqueConstraint。</returns>
      <param name="name">
        <see cref="T:System.Data.UniqueConstraint" /> 的名称。</param>
      <param name="columns">对其应用约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="primaryKey">指定列是否应为主键。 如果为 true，则该列将为主键列。</param>
      <exception cref="T:System.ArgumentException">该约束已属于该集合。 - 或 - 该约束属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的约束。（该比较不区分大小写。）</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>用指定的父列和子列的数组，构造新的 <see cref="T:System.Data.ForeignKeyConstraint" />，并将约束添加到集合。</summary>
      <returns>一个新的 ForeignKeyConstraint。</returns>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。</param>
      <param name="primaryKeyColumns">作为主键列或父列的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="foreignKeyColumns">作为外键列或子列的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])">
      <summary>将指定的 <see cref="T:System.Data.ConstraintCollection" /> 数组的元素复制到集合末尾。</summary>
      <param name="constraints">要添加到集合中的 <see cref="T:System.Data.ConstraintCollection" /> 对象的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)">
      <summary>指示是否可以移除 <see cref="T:System.Data.Constraint" />。</summary>
      <returns>如果可以从集合中移除 <see cref="T:System.Data.Constraint" />，则为 true；否则为 false。</returns>
      <param name="constraint">要对其进行测试以查看是否可以从集合移除的 <see cref="T:System.Data.Constraint" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.ConstraintCollection.Clear">
      <summary>清除所有 <see cref="T:System.Data.Constraint" /> 对象的集合。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.ConstraintCollection.CollectionChanged">
      <summary>每当由于添加或移除 <see cref="T:System.Data.Constraint" /> 对象而更改 <see cref="T:System.Data.ConstraintCollection" /> 时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.ConstraintCollection.Contains(System.String)">
      <summary>指示集合中是否存在按名称指定的 <see cref="T:System.Data.Constraint" /> 对象。</summary>
      <returns>如果集合包含指定的约束，则为 true；否则为 false。</returns>
      <param name="name">约束的 <see cref="P:System.Data.Constraint.ConstraintName" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入操作开始处的数组索引。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)">
      <summary>获取指定的 <see cref="T:System.Data.Constraint" /> 的索引。</summary>
      <returns>如果 <see cref="T:System.Data.Constraint" /> 在集合中，则为其从零开始的索引；否则为 -1。</returns>
      <param name="constraint">要搜索的 <see cref="T:System.Data.Constraint" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.String)">
      <summary>获取按名称指定的 <see cref="T:System.Data.Constraint" /> 的索引。</summary>
      <returns>如果 <see cref="T:System.Data.Constraint" /> 在集合中，则为它的索引，否则为 -1。</returns>
      <param name="constraintName">
        <see cref="T:System.Data.Constraint" /> 的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.Int32)">
      <summary>从集合中获取位于指定索引位置的 <see cref="T:System.Data.Constraint" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.Constraint" />。</returns>
      <param name="index">要返回的约束的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中项的数目。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.String)">
      <summary>从集合中获取具有指定名称的 <see cref="T:System.Data.Constraint" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.Constraint" />；否则，如果 <see cref="T:System.Data.Constraint" /> 不存在，则为空值。</returns>
      <param name="name">要返回的约束的 <see cref="P:System.Data.Constraint.ConstraintName" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.Data.Constraint)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="constraint">要移除的 <see cref="T:System.Data.Constraint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">约束不属于该集合。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.String)">
      <summary>从集合中移除按名称指定的 <see cref="T:System.Data.Constraint" /> 对象。</summary>
      <param name="name">要移除的 <see cref="T:System.Data.Constraint" /> 的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ConstraintCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引位置的 <see cref="T:System.Data.Constraint" /> 对象。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Constraint" /> 的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">集合在此索引位置没有约束。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.ConstraintException">
      <summary>表示在尝试执行违反约束的操作时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和流上下文初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所必需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和内部异常初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
      <param name="innerException">获取导致当前异常的 Exception 实例。</param>
    </member>
    <member name="T:System.Data.DataColumn">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 中的列的架构。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataColumn.#ctor">
      <summary>将 <see cref="T:System.Data.DataColumn" /> 类的新实例初始化为类型字符串。</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String)">
      <summary>使用指定的列名称将 <see cref="T:System.Data.DataColumn" /> 类的新实例初始化为类型字符串。</summary>
      <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 null 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type)">
      <summary>使用指定列名称和数据类型初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 null 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
      <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)">
      <summary>使用指定的名称、数据类型和表达式初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 null 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
      <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">用于创建该列的表达式。 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)">
      <summary>使用指定名称、数据类型、表达式和确定列是否为特性的值，初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="columnName">一个字符串，它表示要创建的列的名称。 如果设置为 null 或空字符串 ("")，则当添加到列集合中时，将指定一个默认名称。</param>
      <param name="dataType">支持的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">用于创建该列的表达式。 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
      <param name="type">
        <see cref="T:System.Data.MappingType" /> 值之一。</param>
      <exception cref="T:System.ArgumentNullException">未指定任何 <paramref name="dataType" />。</exception>
    </member>
    <member name="P:System.Data.DataColumn.AllowDBNull">
      <summary>获取或设置一个值，该值指示对于属于该表的行，此列中是否允许空值。</summary>
      <returns>如果允许空值，则为 true；否则为 false。 默认值为 true。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrement">
      <summary>获取或设置一个值，该值指示对于添加到该表中的新行，列是否将列的值自动递增。</summary>
      <returns>如果列的值自动递增，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ArgumentException">该列是计算所得的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementSeed">
      <summary>获取或设置其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 true 的列的起始值。 默认值为 0。</summary>
      <returns>
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 功能的起始值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementStep">
      <summary>获取或设置其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 true 的列使用的增量。</summary>
      <returns>列的值自动递增的数值。 默认值为 1。</returns>
      <exception cref="T:System.ArgumentException">设置的值为零。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.Caption">
      <summary>获取或设置列的标题。</summary>
      <returns>列的标题。 如果没有设置，则返回 <see cref="P:System.Data.DataColumn.ColumnName" /> 的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataColumn.CheckNotAllowNull">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
    </member>
    <member name="M:System.Data.DataColumn.CheckUnique">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
    </member>
    <member name="P:System.Data.DataColumn.ColumnMapping">
      <summary>获取或设置列的 <see cref="T:System.Data.MappingType" />。</summary>
      <returns>
        <see cref="T:System.Data.MappingType" /> 值之一。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.ColumnName">
      <summary>获取或设置 <see cref="T:System.Data.DataColumnCollection" /> 中的列的名称。</summary>
      <returns>列的名称。</returns>
      <exception cref="T:System.ArgumentException">属性设置为 null 或空字符串，且列属于一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已经存在同名称的列。 名称比较不区分大小写。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.DataType">
      <summary>获取或设置存储在列中的数据的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，它表示列数据类型。</returns>
      <exception cref="T:System.ArgumentException">列已经存储了数据。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.DateTimeMode">
      <summary>获取或设置列的 DateTimeMode。</summary>
      <returns>所指定的列的 <see cref="T:System.Data.DataSetDateTime" />。</returns>
    </member>
    <member name="P:System.Data.DataColumn.DefaultValue">
      <summary>在创建新行时获取或设置列的默认值。</summary>
      <returns>适合于列的 <see cref="P:System.Data.DataColumn.DataType" /> 的值。</returns>
      <exception cref="T:System.InvalidCastException">在添加行时，默认值不是列的数据类型的实例。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.Expression">
      <summary>获取或设置表达式，用于筛选行、计算列中的值或创建聚合列。</summary>
      <returns>用来计算列的值，或创建聚合列的表达式。 表达式的返回类型由列的 <see cref="P:System.Data.DataColumn.DataType" /> 来确定。</returns>
      <exception cref="T:System.ArgumentException">将 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 或 <see cref="P:System.Data.DataColumn.Unique" /> 属性设置为 true。</exception>
      <exception cref="T:System.FormatException">在使用 CONVERT 函数时，表达式的计算结果为一个字符串，但该字符串不包含可以转换成类型参数的表示形式。</exception>
      <exception cref="T:System.InvalidCastException">在使用 CONVERT 函数时，所请求的强制转换不可能完成。 有关可能的强制转换的详细信息，请参见下面一节中的 Conversion 函数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在使用 SUBSTRING 函数时，起始参数超出范围。 - 或 - 在使用 SUBSTRING 函数时，长度参数超出范围。</exception>
      <exception cref="T:System.Exception">在使用 LEN 函数或 TRIM 函数时，表达式的计算结果不是字符串。 这包括计算结果为 <see cref="T:System.Char" /> 的表达式。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.ExtendedProperties">
      <summary>获取与 <see cref="T:System.Data.DataColumn" /> 相关的自定义用户信息的集合。</summary>
      <returns>自定义信息的 <see cref="T:System.Data.PropertyCollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataColumn.MaxLength">
      <summary>获取或设置文本列的最大长度。</summary>
      <returns>列的最大长度（以字符数表示）。 如果列没有最大长度，该值为 -1（默认值）。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumn.Namespace">
      <summary>获取或设置 <see cref="T:System.Data.DataColumn" /> 的命名空间。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 的命名空间。</returns>
      <exception cref="T:System.ArgumentException">该命名空间已有数据。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="pcevent">参数引用。</param>
    </member>
    <member name="P:System.Data.DataColumn.Ordinal">
      <summary>获取列在 <see cref="T:System.Data.DataColumnCollection" /> 集合中的位置（从零开始）。</summary>
      <returns>列的位置。 如果列不是集合的成员，获取 -1。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataColumn.Prefix">
      <summary>获取或设置一个 XML 前缀，该前缀是 <see cref="T:System.Data.DataTable" /> 的命名空间的别名。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 命名空间的 XML 前缀。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumn.RaisePropertyChanging(System.String)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="name">参数引用。</param>
    </member>
    <member name="P:System.Data.DataColumn.ReadOnly">
      <summary>获取或设置一个值，该值指示一旦向表中添加了行，列是否还允许更改。</summary>
      <returns>如果列为只读，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ArgumentException">对于计算所得的列，此属性设置为 false。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumn.SetOrdinal(System.Int32)">
      <summary>将 <see cref="T:System.Data.DataColumn" /> 的序号或位置更改为指定的序号或位置。</summary>
      <param name="ordinal">指定的序号。</param>
    </member>
    <member name="P:System.Data.DataColumn.Table">
      <summary>获取列所属的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 所属的 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataColumn.ToString">
      <summary>获取列的 <see cref="P:System.Data.DataColumn.Expression" />（如果存在的话）。</summary>
      <returns>如果设置了属性；则为 <see cref="P:System.Data.DataColumn.Expression" /> 的值；否则为 <see cref="P:System.Data.DataColumn.ColumnName" /> 的属性。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataColumn.Unique">
      <summary>获取或设置一个值，该值指示列的每一行中的值是否必须是唯一的。</summary>
      <returns>如果值必须是唯一的，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ArgumentException">列是计算出的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.DataColumnChangeEventArgs">
      <summary>为 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataColumnChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Object)">
      <summary>初始化 <see cref="T:System.Data.DataColumnChangeEventArgs" /> 类的新实例。</summary>
      <param name="row">带有可变值的列的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="column">带有可变值的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="value">新值。</param>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Column">
      <summary>获取带有可变值的 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>带有可变值的 <see cref="T:System.Data.DataColumn" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.ProposedValue">
      <summary>获取或设置为列建议的新值。</summary>
      <returns>建议的值，类型为 <see cref="T:System.Object" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Row">
      <summary>获取带有可变值的列的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>带有可变值的列的 <see cref="T:System.Data.DataRow" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.DataColumnChangeEventHandler">
      <summary>表示将处理 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.DataColumnCollection">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataColumn" /> 对象的集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add">
      <summary>创建 <see cref="T:System.Data.DataColumn" /> 对象并将其添加到 <see cref="T:System.Data.DataColumnCollection" /> 中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)">
      <summary>创建指定的 <see cref="T:System.Data.DataColumn" /> 对象并将其添加到 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="column">要相加的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">该列已经属于此集合，或者属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。（该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">表达式无效。 有关如何创建表达式的更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String)">
      <summary>创建一个具有指定名称的 <see cref="T:System.Data.DataColumn" /> 对象，并将其添加到 <see cref="T:System.Data.DataColumnCollection" /> 中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
      <param name="columnName">列的名称。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。（该比较不区分大小写。）</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type)">
      <summary>创建一个具有指定名称和类型的 <see cref="T:System.Data.DataColumn" /> 对象，并将其添加到 <see cref="T:System.Data.DataColumnCollection" /> 中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
      <param name="columnName">要在创建列时使用的 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <param name="type">新列的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。（该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">表达式无效。 有关如何创建表达式的更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)">
      <summary>创建一个具有指定名称、类型和表达式的 <see cref="T:System.Data.DataColumn" /> 对象，并将其添加到 <see cref="T:System.Data.DataColumnCollection" /> 中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
      <param name="columnName">要在创建列时使用的名称。</param>
      <param name="type">新列的 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expression">要分配给 <see cref="P:System.Data.DataColumn.Expression" /> 属性的表达式。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。（该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">表达式无效。 有关如何创建表达式的更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])">
      <summary>将指定的 <see cref="T:System.Data.DataColumn" /> 数组的元素复制到集合末尾。</summary>
      <param name="columns">要添加到集合中的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)">
      <summary>检查是否可从集合中移除特定列。</summary>
      <returns>如果可移除该列，则为 true。 false，如果 <paramref name="column" /> 参数为 null。 该列不属于此集合。 该列是关系的一部分。 另一个列的表达式取决于该列。</returns>
      <param name="column">集合中的 <see cref="T:System.Data.DataColumn" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.Clear">
      <summary>清除集合中的所有列。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataColumnCollection.CollectionChanged">
      <summary>在由于添加或删除列而使列集合发生变化时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataColumnCollection.Contains(System.String)">
      <summary>检查集合是否包含具有指定名称的列。</summary>
      <returns>如果存在此名称的列，则为 true；否则为 false。</returns>
      <param name="name">要查找的列的 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)">
      <summary>将整个集合复制到现有数组中，从该数组内的指定索引处开始复制。</summary>
      <param name="array">将集合复制到其中的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="index">从其开始的索引。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)">
      <summary>获取按名称指定的列的索引。</summary>
      <returns>如果找到由 <paramref name="column" /> 指定的列的索引，则为这个索引；否则为 -1。</returns>
      <param name="column">要返回的列的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.String)">
      <summary>获取具有特定名称的列的索引（名称不区分大小写）。</summary>
      <returns>具有指定名称的列的从零开始的索引，或者如果集合中不存在该列，则为 -1。</returns>
      <param name="columnName">要查找的列的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.Int32)">
      <summary>从集合中获取位于指定索引位置的 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.DataColumn" />。</returns>
      <param name="index">要返回的列的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中项的数目。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.String)">
      <summary>从集合中获取具有指定名称的 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>具有指定 <see cref="P:System.Data.DataColumn.ColumnName" /> 的集合中的 <see cref="T:System.Data.DataColumn" />，否则，如果 <see cref="T:System.Data.DataColumn" /> 不存在，则为空值。</returns>
      <param name="name">要返回的列的 <see cref="P:System.Data.DataColumn.ColumnName" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.Data.DataColumn)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="column">要移除的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">该列不属于此集合。 - 或 - 该列是关系的一部分。 - 或 - 另一个列的表达式取决于该列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.String)">
      <summary>从集合中移除具有指定名称的 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="name">要移除的列的名称。</param>
      <exception cref="T:System.ArgumentException">该集合中没有具有指定名称的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataColumnCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引位置的列。</summary>
      <param name="index">要移除的列的索引。</param>
      <exception cref="T:System.ArgumentException">该集合在指定的索引位置没有列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.DataException">
      <summary>表示使用 ADO.NET 组件发生错误时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataException" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化信息和上下文初始化 <see cref="T:System.Data.DataException" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所必需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.DataException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和内部异常初始化 <see cref="T:System.Data.DataException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
      <param name="innerException">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.DataRelation">
      <summary>表示两个 <see cref="T:System.Data.DataTable" /> 对象之间的父/子关系。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 名称，父级和子级 <see cref="T:System.Data.DataColumn" /> 对象，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名称。 如果为 null 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将指定一个默认名称。</param>
      <param name="parentColumn">关系中的父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">关系中的子级 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">两个 <see cref="T:System.Data.DataColumn" /> 对象中的一个或两个包含 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 - 或 - 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>使用指定名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象以及指示是否创建约束的值，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。</summary>
      <param name="relationName">关系的名称。 如果为 null 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将指定一个默认名称。</param>
      <param name="parentColumn">关系中的父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">关系中的子级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="createConstraints">一个指示是否创建约束的值。 如果要创建约束，则为 true。 否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">两个 <see cref="T:System.Data.DataColumn" /> 对象中的一个或两个包含 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 - 或 - 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 名称以及父级和子级 <see cref="T:System.Data.DataColumn" /> 对象的匹配的数组，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。</summary>
      <param name="relationName">关系的名称。 如果为 null 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将指定一个默认名称。</param>
      <param name="parentColumns">父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="childColumns">子 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">两个 <see cref="T:System.Data.DataColumn" /> 对象中的一个或两个包含 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.DataColumn" /> 对象具有不同的数据类型 - 或 - 两个数组中至少有一个不由同一个表中的不同列构成。 - 或 - 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>使用指定的名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象的匹配数组以及指示是否创建约束的值，初始化 <see cref="T:System.Data.DataRelation" /> 类的新实例。</summary>
      <param name="relationName">关系的名称。 如果为 null 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将指定一个默认名称。</param>
      <param name="parentColumns">父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="childColumns">子 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="createConstraints">一个指示是否创建约束的值。 如果要创建约束，则为 true。 否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">两个 <see cref="T:System.Data.DataColumn" /> 对象中的一个或两个为 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 - 或 - 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>此构造函数在 Visual Studio 环境中提供设计时支持。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名称。 如果为 null 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将指定一个默认名称。</param>
      <param name="parentTableName">作为关系的父表的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="parentTableNamespace">父表命名空间的名称。</param>
      <param name="childTableName">作为关系的子表的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="childTableNamespace">子表命名空间的名称。</param>
      <param name="parentColumnNames">关系的父级 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="childColumnNames">关系的子级 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="nested">一个指示关系是否嵌套的值。</param>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>此构造函数在 Visual Studio 环境中提供设计时支持。</summary>
      <param name="relationName">关系的名称。 如果为 null 或空字符串 ("")，则当创建的对象添加到 <see cref="T:System.Data.DataRelationCollection" /> 时，将指定一个默认名称。</param>
      <param name="parentTableName">作为关系的父表的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="childTableName">作为关系的子表的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="parentColumnNames">关系的父级 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="childColumnNames">关系的子级 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="nested">一个指示关系是否嵌套的值。</param>
    </member>
    <member name="M:System.Data.DataRelation.CheckStateForProperty">
      <summary>此方法支持 .NET Framework 基础结构，不能从您的代码中直接使用。</summary>
      <exception cref="T:System.Data.DataException">父表和子表属于不同的 <see cref="T:System.Data.DataSet" /> 对象。 - 或 - 一对或多对父级和子级 <see cref="T:System.Data.DataColumn" /> 对象具有不匹配的数据类型。 - 或 - 父级和子级 <see cref="T:System.Data.DataColumn" /> 对象相同。</exception>
    </member>
    <member name="P:System.Data.DataRelation.ChildColumns">
      <summary>获取此关系的子 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRelation.ChildKeyConstraint">
      <summary>获取关系的 <see cref="T:System.Data.ForeignKeyConstraint" />。</summary>
      <returns>ForeignKeyConstraint。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRelation.ChildTable">
      <summary>获取此关系的子表。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" />，它是关系的子表。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRelation.DataSet">
      <summary>获取 <see cref="T:System.Data.DataRelation" /> 所属的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRelation" /> 所属的 <see cref="T:System.Data.DataSet" />。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRelation.ExtendedProperties">
      <summary>获取存储自定义属性的集合。</summary>
      <returns>一个包含自定义属性的 <see cref="T:System.Data.PropertyCollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataRelation.Nested">
      <summary>获取或设置一个指示 <see cref="T:System.Data.DataRelation" /> 对象是否嵌套的值。</summary>
      <returns>如果 <see cref="T:System.Data.DataRelation" /> 对象嵌套，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="pcevent">参数引用。</param>
    </member>
    <member name="P:System.Data.DataRelation.ParentColumns">
      <summary>获取作为此 <see cref="T:System.Data.DataRelation" /> 的父列的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</summary>
      <returns>作为此 <see cref="T:System.Data.DataRelation" /> 的父列 <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRelation.ParentKeyConstraint">
      <summary>获取 <see cref="T:System.Data.UniqueConstraint" />，它确保 <see cref="T:System.Data.DataRelation" /> 的父列中的值是唯一的。</summary>
      <returns>一个 <see cref="T:System.Data.UniqueConstraint" />，它确保父列中的值是唯一的。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRelation.ParentTable">
      <summary>获取此 <see cref="T:System.Data.DataRelation" /> 的父级 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" />，它是此关系的父表。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelation.RaisePropertyChanging(System.String)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="name">参数引用。</param>
    </member>
    <member name="P:System.Data.DataRelation.RelationName">
      <summary>获取或设置用于从 <see cref="T:System.Data.DataRelationCollection" /> 中检索 <see cref="T:System.Data.DataRelation" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataRelation" /> 的名称。</returns>
      <exception cref="T:System.ArgumentException">将 null 或空字符串 ("") 传入作为 <see cref="T:System.Data.DataRelation" /> 的 <see cref="T:System.Data.DataColumn" />。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.DataRelation" /> 属于一个集合，该集合已经包含具有相同名称的 <see cref="T:System.Data.DataRelation" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelation.ToString">
      <summary>获取 <see cref="P:System.Data.DataRelation.RelationName" />（如果存在的话）。</summary>
      <returns>
        <see cref="P:System.Data.DataRelation.RelationName" /> 属性的值。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.DataRelationCollection">
      <summary>表示此 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataRelation" /> 对象的集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRelationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataRelationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>用指定的父列和子列创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合中。</summary>
      <returns>创建的关系。</returns>
      <param name="parentColumn">该关系的父列。</param>
      <param name="childColumn">该关系的子列。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>用指定的父列和子列创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合中。</summary>
      <returns>创建的关系。</returns>
      <param name="parentColumns">该关系的父列。</param>
      <param name="childColumns">该关系的子列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 参数为空值。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名关系。（该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系在创建后进入了无效的状态。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataRelation)">
      <summary>向 <see cref="T:System.Data.DataRelationCollection" /> 添加 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relation">要添加到集合中的 DataRelation。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 参数为空值。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已经存在具有指定名称的关系。（该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系在创建后进入了无效的状态。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>用指定名称以及父列和子列创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合。</summary>
      <returns>创建的关系。</returns>
      <param name="name">关系的名称。</param>
      <param name="parentColumn">该关系的父列。</param>
      <param name="childColumn">该关系的子列。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>用指定的名称、父列和子列，以及根据 <paramref name="createConstraints" /> 参数的值而定的可选约束创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合中。</summary>
      <returns>创建的关系。</returns>
      <param name="name">关系的名称。</param>
      <param name="parentColumn">该关系的父列。</param>
      <param name="childColumn">该关系的子列。</param>
      <param name="createConstraints">如果创建约束，则为 true；否则为 false。（默认值为 true）。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用父列和子列数组创建一个具有指定名称的 <see cref="T:System.Data.DataRelation" />，并将其添加到集合中。</summary>
      <returns>创建的 DataRelation。</returns>
      <param name="name">要创建的 DataRelation 的名称。</param>
      <param name="parentColumns">父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="childColumns">子 DataColumn 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">该关系名称为空值。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名关系。（该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系在创建后进入了无效的状态。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>用指定的名称、父列和子列的数组以及指定是否创建约束的值，创建 <see cref="T:System.Data.DataRelation" />，并将其添加到集合。</summary>
      <returns>创建的关系。</returns>
      <param name="name">要创建的 DataRelation 的名称。</param>
      <param name="parentColumns">父级 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="childColumns">子 DataColumn 对象的数组。</param>
      <param name="createConstraints">若要创建约束，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">该关系名称为空值。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名关系。（该比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系在创建后进入了无效的状态。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddCore(System.Data.DataRelation)">
      <summary>对表执行验证。</summary>
      <param name="relation">要检查的关系。</param>
      <exception cref="T:System.ArgumentNullException">关系为空。</exception>
      <exception cref="T:System.ArgumentException">该关系已经属于此集合，或者它属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在同名关系。（该比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddRange(System.Data.DataRelation[])">
      <summary>将指定的 <see cref="T:System.Data.DataRelation" /> 数组的元素复制到集合末尾。</summary>
      <param name="relations">要添加到集合中的 <see cref="T:System.Data.DataRelation" /> 对象的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.CanRemove(System.Data.DataRelation)">
      <summary>验证是否可以将指定的 <see cref="T:System.Data.DataRelation" /> 从集合中移除。</summary>
      <returns>如果可以移除 <see cref="T:System.Data.DataRelation" />，则为 true；否则为 false。</returns>
      <param name="relation">要对其执行检查的关系。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.Clear">
      <summary>清除集合的所有关系。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataRelationCollection.CollectionChanged">
      <summary>在集合更改后发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataRelationCollection.Contains(System.String)">
      <summary>验证集合中是否存在具有特定名称（不区分大小写）的 <see cref="T:System.Data.DataRelation" />。</summary>
      <returns>如果存在具有指定名称的关系，则为 true；否则为 false。</returns>
      <param name="name">要查找的关系的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.CopyTo(System.Data.DataRelation[],System.Int32)">
      <summary>从指定的索引开始复制 <see cref="T:System.Data.DataRelation" /> 对象的集合。</summary>
      <param name="array">该集合要复制到的 <see cref="T:System.Data.DataRelation" /> 对象的数组。</param>
      <param name="index">从其开始的索引。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.GetDataSet">
      <summary>此方法支持 .NET Framework 基础结构，不能从您的代码中直接使用。</summary>
      <returns>引用的数据集。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.Data.DataRelation)">
      <summary>获取指定 <see cref="T:System.Data.DataRelation" /> 对象的索引。</summary>
      <returns>该关系的从 0 开始的索引；或者如果在该集合中找不到该关系，则为 -1。</returns>
      <param name="relation">要搜索的关系。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.String)">
      <summary>获取按名称指定的 <see cref="T:System.Data.DataRelation" /> 的索引。</summary>
      <returns>具有指定名称的关系的从零开始的索引；或者如果集合中不存在该关系，则为 -1。</returns>
      <param name="relationName">要查找的关系的名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Data.DataRelation" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.DataRelation" />，或者如果指定的 <see cref="T:System.Data.DataRelation" /> 不存在，则为空值。</returns>
      <param name="index">要查找的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中项的数目。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.String)">
      <summary>获取按名称指定的 <see cref="T:System.Data.DataRelation" /> 对象。</summary>
      <returns>命名的 <see cref="T:System.Data.DataRelation" />，或者如果指定的 <see cref="T:System.Data.DataRelation" /> 不存在，则为空值。</returns>
      <param name="name">要查找的关系的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="ccevent">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="ccevent">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.Data.DataRelation)">
      <summary>从集合中移除指定的关系。</summary>
      <param name="relation">要移除的关系。</param>
      <exception cref="T:System.ArgumentNullException">关系为空值。</exception>
      <exception cref="T:System.ArgumentException">关系不属于该集合。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.String)">
      <summary>从集合中移除具有指定名称的关系。</summary>
      <param name="name">要移除的关系的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">该集合中没有具有指定名称的关系。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引位置的关系。</summary>
      <param name="index">要移除的关系的索引。</param>
      <exception cref="T:System.ArgumentException">该集合在指定的索引位置没有关系。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveCore(System.Data.DataRelation)">
      <summary>对指定 <see cref="T:System.Data.DataRelation" /> 对象执行验证。</summary>
      <param name="relation">要验证的 DataRelation 对象。</param>
      <exception cref="T:System.ArgumentNullException">该集合在指定的索引位置没有关系。</exception>
      <exception cref="T:System.ArgumentException">指定的关系不属于此集合，或者它属于另一个集合。</exception>
    </member>
    <member name="T:System.Data.DataRow">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 中的一行数据。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRow.#ctor(System.Data.DataRowBuilder)">
      <summary>初始化 DataRow 的新实例。 从生成器中构造行。 仅供内部使用。</summary>
      <param name="builder">生成器</param>
    </member>
    <member name="M:System.Data.DataRow.AcceptChanges">
      <summary>提交自上次调用 <see cref="M:System.Data.DataRow.AcceptChanges" /> 以来对该行进行的所有更改。</summary>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.BeginEdit">
      <summary>对 <see cref="T:System.Data.DataRow" /> 对象开始编辑操作。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中已调用该方法。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">对已删除的行调用该方法。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.CancelEdit">
      <summary>取消对该行的当前编辑。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中已调用该方法。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.ClearErrors">
      <summary>清除行的错误。 这包括 <see cref="P:System.Data.DataRow.RowError" /> 和用 <see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" /> 设置的错误。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRow.Delete">
      <summary>删除 <see cref="T:System.Data.DataRow" />。</summary>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
        <see cref="T:System.Data.DataRow" /> 已被删除。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.EndEdit">
      <summary>终止发生在该行的编辑。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中已调用该方法。</exception>
      <exception cref="T:System.Data.ConstraintException">该编辑破坏了约束。</exception>
      <exception cref="T:System.Data.ReadOnlyException">此行属于该表，该编辑尝试更改只读列的值。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">该编辑尝试将 null 值放在 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为假的列中。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 获取此 <see cref="T:System.Data.DataRow" /> 的子行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组，或长度为零的数组。</returns>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">relation 为 null。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行不具有此版本的数据。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的子行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组。</returns>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，它指定要获取的数据的版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 null。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有所请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 获取 <see cref="T:System.Data.DataRow" /> 的子行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组，或长度为零的数组。</returns>
      <param name="relationName">要使用的 <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的子行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组，或长度为零的数组。</returns>
      <param name="relationName">要使用的 <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，它指定要获取的数据的版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 null。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有所请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Data.DataColumn)">
      <summary>获取指定的 <see cref="T:System.Data.DataColumn" /> 的错误说明。</summary>
      <returns>错误说明的文本。</returns>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Int32)">
      <summary>获取由索引指定的列的错误说明。</summary>
      <returns>错误说明的文本。</returns>
      <param name="columnIndex">列的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数超出范围。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.String)">
      <summary>获取由名称指定的列的错误说明。</summary>
      <returns>错误说明的文本。</returns>
      <param name="columnName">列的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetColumnsInError">
      <summary>获取包含错误的列的数组。</summary>
      <returns>包含错误的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <returns>当前行的父级 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 不属于 <see cref="T:System.Data.DataTable" />。 该行为 null。</exception>
      <exception cref="T:System.Data.DataException">子行有多个父级。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">此行不属于 <see cref="T:System.Data.DataRelation" /> 对象的子表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <returns>当前行的父级 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，它指定要获取的数据的版本。</param>
      <exception cref="T:System.ArgumentNullException">该行为 null。 <paramref name="relation" /> 不属于此表的父关系。</exception>
      <exception cref="T:System.Data.DataException">子行有多个父级。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">此关系的子表不是该行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行不具有此版本的数据。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <returns>当前行的父级 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.DataException">子行有多个父级。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <returns>当前行的父级 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 null。</exception>
      <exception cref="T:System.Data.DataException">子行有多个父级。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有所请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组，或长度为零的数组。</returns>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不属于此行的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">该行为 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">此关系的子表不是该行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于 <see cref="T:System.Data.DataTable" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>使用指定的 <see cref="T:System.Data.DataRelation" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组，或长度为零的数组。</returns>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，它指定要获取的数据的版本。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不属于此行的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">该行为 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">此关系的子表不是该行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于 <see cref="T:System.Data.DataTable" />。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有所请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组，或长度为零的数组。</returns>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)">
      <summary>使用 <see cref="T:System.Data.DataRelation" /> 的指定 <see cref="P:System.Data.DataRelation.RelationName" /> 和 <see cref="T:System.Data.DataRowVersion" /> 获取 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组，或长度为零的数组。</returns>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的 <see cref="P:System.Data.DataRelation.RelationName" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，它指定要获取的数据的版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 null。</exception>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行没有所请求的 <see cref="T:System.Data.DataRowVersion" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.HasErrors">
      <summary>获取一个值，该值指示某行是否包含错误。</summary>
      <returns>如果该行包含错误，则为 true；否则，为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRow.HasVersion(System.Data.DataRowVersion)">
      <summary>获取一个值，该值指示指定的版本是否存在。</summary>
      <returns>如果版本存在，则为 true；否则为 false。</returns>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，它指定行版本。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn)">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Data.DataColumn" /> 是否包含 null 值。</summary>
      <returns>如果列包含 null 值，则为 true；否则为 false。</returns>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Data.DataColumn" /> 和 <see cref="T:System.Data.DataRowVersion" /> 是否包含 null 值。</summary>
      <returns>如果列包含 null 值，则为 true；否则为 false。</returns>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，它指定行版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Int32)">
      <summary>获取一个值，该值指示位于指定索引处的列是否包含 null 值。</summary>
      <returns>如果列包含 null 值，则为 true；否则为 false。</returns>
      <param name="columnIndex">列的从零开始的索引。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.String)">
      <summary>获取一个值，该值指示指定的列是否包含 null 值。</summary>
      <returns>如果列包含 null 值，则为 true；否则为 false。</returns>
      <param name="columnName">列的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn)">
      <summary>获取或设置存储在指定的 <see cref="T:System.Data.DataColumn" /> 中的数据。</summary>
      <returns>
        <see cref="T:System.Object" />，包含该数据。</returns>
      <param name="column">一个包含数据的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentException">该列不属于此表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 为 null。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>获取存储在指定的 <see cref="T:System.Data.DataColumn" /> 中的数据的指定版本。</summary>
      <returns>
        <see cref="T:System.Object" />，包含该数据。</returns>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />，包含有关该列的信息。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，用于指定您需要的行版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <exception cref="T:System.ArgumentException">该列不属于此表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数包含 null 值。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行不具有此版本的数据。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32)">
      <summary>获取或设置存储在由索引指定的列中的数据。</summary>
      <returns>
        <see cref="T:System.Object" />，包含该数据。</returns>
      <param name="columnIndex">列的从零开始的索引。</param>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">当尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数超出范围。</exception>
      <exception cref="T:System.InvalidCastException">当设置值且新值的 <see cref="T:System.Type" /> 与 <see cref="P:System.Data.DataColumn.DataType" /> 不匹配时发生。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)">
      <summary>获取存储在由索引和要检索的数据的版本指定的列中的数据。</summary>
      <returns>
        <see cref="T:System.Object" />，包含该数据。</returns>
      <param name="columnIndex">列的从零开始的索引。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，用于指定您需要的行版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数超出范围。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行不具有此版本的数据。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String)">
      <summary>获取或设置存储在由名称指定的列中的数据。</summary>
      <returns>
        <see cref="T:System.Object" />，包含该数据。</returns>
      <param name="columnName">列的名称。</param>
      <exception cref="T:System.ArgumentException">无法找到由 <paramref name="columnName" /> 指定的列。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">当尝试对已删除的行设置值时发生。</exception>
      <exception cref="T:System.InvalidCastException">当您设置值并且该值的 <see cref="T:System.Type" /> 与 <see cref="P:System.Data.DataColumn.DataType" /> 不匹配时发生。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">在尝试将 null 值插入 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 设置为 false 的列时发生。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)">
      <summary>获取存储在已命名列中的数据的指定版本。</summary>
      <returns>
        <see cref="T:System.Object" />，包含该数据。</returns>
      <param name="columnName">列的名称。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一，用于指定您需要的行版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <exception cref="T:System.ArgumentException">无法找到由 <paramref name="columnName" /> 指定的列。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">该行不具有此版本的数据。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">该行已被删除。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.ItemArray">
      <summary>通过一个数组来获取或设置此行的所有值。</summary>
      <returns>
        <see cref="T:System.Object" /> 类型数组。</returns>
      <exception cref="T:System.ArgumentException">数组大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">数组中的值与其相应的 <see cref="T:System.Data.DataColumn" /> 中的 <see cref="P:System.Data.DataColumn.DataType" /> 不匹配。</exception>
      <exception cref="T:System.Data.ConstraintException">编辑破坏了约束。</exception>
      <exception cref="T:System.Data.ReadOnlyException">编辑尝试更改只读列的值。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">编辑尝试将 Null 值放在 <see cref="T:System.Data.DataColumn" /> 对象的 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false 的列中。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">该行已被删除。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.RejectChanges">
      <summary>拒绝自上次调用 <see cref="M:System.Data.DataRow.AcceptChanges" /> 以来对该行进行的所有更改。</summary>
      <exception cref="T:System.Data.RowNotInTableException">此行不属于该表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.RowError">
      <summary>获取或设置行的自定义错误说明。</summary>
      <returns>描述错误的文本。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataRow.RowState">
      <summary>获取与该行和 <see cref="T:System.Data.DataRowCollection" /> 的关系相关的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.DataRowState" /> 值之一。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.SetAdded">
      <summary>将 <see cref="T:System.Data.DataRow" /> 的 <see cref="P:System.Data.DataRow.Rowstate" /> 更改为 Added。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)">
      <summary>为指定为 <see cref="T:System.Data.DataColumn" /> 的列设置错误说明。</summary>
      <param name="column">要为其设置错误说明的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="error">错误说明。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)">
      <summary>为由索引指定的列设置错误说明。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <param name="error">错误说明。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数超出范围。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.String,System.String)">
      <summary>为由名称指定的列设置错误说明。</summary>
      <param name="columnName">列的名称。</param>
      <param name="error">错误说明。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.SetModified">
      <summary>将 <see cref="T:System.Data.DataRow" /> 的 <see cref="P:System.Data.DataRow.Rowstate" /> 更改为 Modified。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRow.SetNull(System.Data.DataColumn)">
      <summary>将指定的 <see cref="T:System.Data.DataColumn" /> 的值设置为 null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow)">
      <summary>用新指定的父级 <see cref="T:System.Data.DataRow" /> 设置 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="parentRow">新的父级 <see cref="T:System.Data.DataRow" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)">
      <summary>用新指定的父级 <see cref="T:System.Data.DataRow" /> 和 <see cref="T:System.Data.DataRelation" /> 设置 <see cref="T:System.Data.DataRow" /> 的父行。</summary>
      <param name="parentRow">新的父级 <see cref="T:System.Data.DataRow" />。</param>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" /> 关系。</param>
      <exception cref="T:System.Data.RowNotInTableException">其中一行不属于某个表</exception>
      <exception cref="T:System.ArgumentNullException">其中一行是 null。</exception>
      <exception cref="T:System.ArgumentException">该关系不属于 <see cref="T:System.Data.DataSet" /> 对象的 <see cref="T:System.Data.DataRelationCollection" />。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系的子级 <see cref="T:System.Data.DataTable" /> 不是此行所属的表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRow.Table">
      <summary>获取该行拥有其架构的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>该行所属的 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.DataRowAction">
      <summary>描述在 <see cref="T:System.Data.DataRow" /> 上执行的操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.DataRowAction.Add">
      <summary>此行已添加到该表中。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Change">
      <summary>此行已更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeCurrentAndOriginal">
      <summary>该行的原始和当前版本都已更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeOriginal">
      <summary>该行的原始版本已更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Commit">
      <summary>对此行进行的更改已被提交。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Delete">
      <summary>此行已从该表中删除。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Nothing">
      <summary>此行尚未更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Rollback">
      <summary>对此行最近进行的更改已回滚。</summary>
    </member>
    <member name="T:System.Data.DataRowBuilder">
      <summary>DataRowBuilder 类型支持 .NET Framework 基础结构，并且不应直接从代码中使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.DataRowChangeEventArgs">
      <summary>为 <see cref="E:System.Data.DataTable.RowChanged" />、<see cref="E:System.Data.DataTable.RowChanging" />、<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /> 和 <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataRowChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataRowAction)">
      <summary>初始化 <see cref="T:System.Data.DataRowChangeEventArgs" /> 类的新实例。</summary>
      <param name="row">正针对其发生操作的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="action">
        <see cref="T:System.Data.DataRowAction" /> 值之一。</param>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Action">
      <summary>获取已针对 <see cref="T:System.Data.DataRow" /> 发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.DataRowAction" /> 值之一。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Row">
      <summary>获取已针对其发生操作的行。</summary>
      <returns>已针对其发生操作的 <see cref="T:System.Data.DataRow" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.DataRowChangeEventHandler">
      <summary>表示将处理 <see cref="T:System.Data.DataTable" /> 的 <see cref="E:System.Data.DataTable.RowChanging" />、<see cref="E:System.Data.DataTable.RowChanged" />、<see cref="E:System.Data.DataTable.RowDeleting" /> 和 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.DataRowCollection">
      <summary>表示 <see cref="T:System.Data.DataTable" /> 的行的集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Data.DataRow)">
      <summary>将指定的 <see cref="T:System.Data.DataRow" /> 添加到 <see cref="T:System.Data.DataRowCollection" /> 对象中。</summary>
      <param name="row">要相加的 <see cref="T:System.Data.DataRow" />。</param>
      <exception cref="T:System.ArgumentNullException">该行为 null。</exception>
      <exception cref="T:System.ArgumentException">此行要么属于另一个表，要么已经属于此表。</exception>
      <exception cref="T:System.Data.ConstraintException">添加将使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">添加尝试将 null 置于 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false 的 <see cref="T:System.Data.DataColumn" /> 中。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Object[])">
      <summary>创建使用指定值的行，并将其添加到 <see cref="T:System.Data.DataRowCollection" /> 中。</summary>
      <returns>无。</returns>
      <param name="values">用于创建新行的值的数组。</param>
      <exception cref="T:System.ArgumentException">数组大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">值与其各自的列类型不匹配。</exception>
      <exception cref="T:System.Data.ConstraintException">添加行将使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">尝试将空值放到 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false 的列中。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.Clear">
      <summary>清除所有行的集合。</summary>
      <exception cref="T:System.Data.InvalidConstraintException">针对 <see cref="T:System.Data.DataRowCollection" /> 实施 <see cref="T:System.Data.ForeignKeyConstraint" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示集合中任何行的主键中是否包含指定的值。</summary>
      <returns>如果集合中包含具有指定主键值的 <see cref="T:System.Data.DataRow" />，则为 true；否则为 false。</returns>
      <param name="key">要测试的主键的值。</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">该表没有主键。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object[])">
      <summary>获取一个值，该值指示集合中任何行的主键列中是否包含在对象数组中指定的值。</summary>
      <returns>如果 <see cref="T:System.Data.DataRowCollection" /> 中包含具有指定键值的 <see cref="T:System.Data.DataRow" />，则为 true；否则为 false。</returns>
      <param name="keys">要测试的主键值的数组。</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">该表没有主键。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>将该集合中的所有 <see cref="T:System.Data.DataRow" /> 对象复制到起始位置为给定目标数组索引的给定数组中。</summary>
      <param name="ar">一维数组，它是从 DataRowCollection 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)">
      <summary>将该集合中的所有 <see cref="T:System.Data.DataRow" /> 对象复制到起始位置为给定目标数组索引的给定数组中。</summary>
      <param name="array">一维数组，它是从 DataRowCollection 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">复制开始时所在的数组中的从零开始的索引。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRowCollection.Count">
      <summary>获取该集合中 <see cref="T:System.Data.DataRow" /> 对象的总数。</summary>
      <returns>该集合中的 <see cref="T:System.Data.DataRow" /> 对象的总数。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object)">
      <summary>获取由主键值指定的行。</summary>
      <returns>包含指定的主键值的 <see cref="T:System.Data.DataRow" />；否则为空值（如果 <see cref="T:System.Data.DataRowCollection" /> 中不存在主键值）。</returns>
      <param name="key">要查找的 <see cref="T:System.Data.DataRow" /> 的主键值。</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">该表没有主键。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object[])">
      <summary>获取包含指定的主键值的行。</summary>
      <returns>包含指定的主键值的 <see cref="T:System.Data.DataRow" /> 对象；如果 <see cref="T:System.Data.DataRowCollection" /> 中不存在主键值，则为 Null 值。</returns>
      <param name="keys">要查找的主键值的数组。 数组的类型为 Object。</param>
      <exception cref="T:System.IndexOutOfRangeException">任何行都不与该索引值相对应。</exception>
      <exception cref="T:System.Data.MissingPrimaryKeyException">该表没有主键。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.GetEnumerator">
      <summary>获取该集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>该集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)">
      <summary>获取指定 <see cref="T:System.Data.DataRow" /> 对象的索引。</summary>
      <returns>该行从零开始的索引；如果在集合中未找到该行，则为 -1。</returns>
      <param name="row">要搜索的 DataRow。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)">
      <summary>将新行插入到集合中的指定位置。</summary>
      <param name="row">要相加的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="pos">您要添加该 DataRow 的集合的位置（位置从零开始）。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRowCollection.Item(System.Int32)">
      <summary>获取指定索引处的行。</summary>
      <returns>指定的 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="index">要返回的行的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中项的数目。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.Remove(System.Data.DataRow)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="row">要移除的 <see cref="T:System.Data.DataRow" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的行。</summary>
      <param name="index">要移除的行的索引。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.DataRowState">
      <summary>获取 <see cref="T:System.Data.DataRow" /> 对象的状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.DataRowState.Added">
      <summary>该行已添加到 <see cref="T:System.Data.DataRowCollection" /> 中，<see cref="M:System.Data.DataRow.AcceptChanges" /> 尚未调用。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Deleted">
      <summary>该行已通过 <see cref="T:System.Data.DataRow" /> 的 <see cref="M:System.Data.DataRow.Delete" /> 方法被删除。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Detached">
      <summary>已创建该行，但它不是任何 <see cref="T:System.Data.DataRowCollection" /> 的一部分。 <see cref="T:System.Data.DataRow" /> 在以下情况下立即处于此状态：创建之后添加到集合中之前；或从集合中移除之后。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Modified">
      <summary>该行已被修改，<see cref="M:System.Data.DataRow.AcceptChanges" /> 尚未调用。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Unchanged">
      <summary>自上一次调用 <see cref="M:System.Data.DataRow.AcceptChanges" /> 之后，该行未更改。</summary>
    </member>
    <member name="T:System.Data.DataRowVersion">
      <summary>描述 <see cref="T:System.Data.DataRow" /> 的版本。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.DataRowVersion.Current">
      <summary>该行中包含当前值。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Default">
      <summary>
        <see cref="T:System.Data.DataRowState" /> 的默认版本。 对于 Added、Modified 或 Current 的 DataRowState 值，默认版本是 Deleted。 对于 Detached 的 <see cref="T:System.Data.DataRowState" /> 值，该版本是 Proposed。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Original">
      <summary>该行中包含其原始值。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Proposed">
      <summary>该行中包含建议值。</summary>
    </member>
    <member name="T:System.Data.DataRowView">
      <summary>表示 <see cref="T:System.Data.DataRow" /> 的自定义视图。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataRowView.BeginEdit">
      <summary>开始编辑过程。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRowView.CancelEdit">
      <summary>取消编辑过程。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation)">
      <summary>返回具有指定的子级 <see cref="T:System.Data.DataRelation" /> 的子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</summary>
      <returns>子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</returns>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation,System.Boolean)">
      <summary>返回具有指定的 <see cref="T:System.Data.DataRelation" /> 及父级的子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</summary>
      <returns>子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</returns>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 对象。</param>
      <param name="followParent">父对象。</param>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String)">
      <summary>返回具有指定的子级 <see cref="T:System.Data.DataRelation" /> 名称的子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</summary>
      <returns>子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</returns>
      <param name="relationName">一个包含 <see cref="T:System.Data.DataRelation" /> 名称的字符串。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String,System.Boolean)">
      <summary>返回具有指定的 <see cref="T:System.Data.DataRelation" /> 及父级的子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</summary>
      <returns>子级 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataView" />。</returns>
      <param name="relationName">一个包含 <see cref="T:System.Data.DataRelation" /> 名称的字符串。</param>
      <param name="followParent">父级</param>
    </member>
    <member name="P:System.Data.DataRowView.DataView">
      <summary>获取该行所属的 <see cref="T:System.Data.DataView" />。</summary>
      <returns>该行所属的 DataView。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataRowView.Delete">
      <summary>删除行。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowView.EndEdit">
      <summary>提交基础 <see cref="T:System.Data.DataRow" /> 的更改并结束使用 <see cref="M:System.Data.DataRowView.BeginEdit" />启动的编辑会话。使用 <see cref="M:System.Data.DataRowView.CancelEdit" /> 放弃对 <see cref="T:System.Data.DataRow" /> 所做的更改。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowView.Equals(System.Object)">
      <summary>获取一个值，该值指示当前的 <see cref="T:System.Data.DataRowView" /> 是否与指定对象相同。</summary>
      <returns>如果 <paramref name="object" /> 是 <see cref="T:System.Data.DataRowView" /> 且它返回与当前 <see cref="T:System.Data.DataRowView" /> 相同的行，则为 true；否则为 false。</returns>
      <param name="other">要比较的 <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataRowView.GetHashCode">
      <summary>返回 <see cref="T:System.Data.DataRow" /> 对象的哈希代码。</summary>
      <returns>如果此实例的值不为零，则为 32 位有符号整数哈希代码 1，它表示布尔值 true；否则为整数 0，它表示布尔值 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataRowView.IsEdit">
      <summary>指示行是否处于编辑模式。</summary>
      <returns>如果行处于编辑模式，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataRowView.IsNew">
      <summary>指示 <see cref="T:System.Data.DataRowView" /> 是否为新。</summary>
      <returns>如果是新行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.Int32)">
      <summary>获取或设置指定列中的值。</summary>
      <returns>列的值。</returns>
      <param name="ndx">指定的列。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.String)">
      <summary>获取或设置指定列中的值。</summary>
      <returns>列的值。</returns>
      <param name="property">包含指定列的字符串。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataRowView.PropertyChanged">
      <summary>当 <see cref="T:System.Data.DataRowView" /> 属性发生更改时引发的事件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataRowView.Row">
      <summary>获取正被查看的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>正被 <see cref="T:System.Data.DataRowView" /> 查看的 <see cref="T:System.Data.DataRow" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataRowView.RowVersion">
      <summary>获取 <see cref="T:System.Data.DataRow" /> 的当前版本说明。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 <see cref="P:System.Data.DataRowView.RowVersion" /> 属性的可能值有：Default、Original、Current 和 Proposed。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义特性的集合。</summary>
      <returns>包含此对象的 AttributeCollection 特性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名。</summary>
      <returns>此组件实例的类名。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回此组件实例的名称。</summary>
      <returns>此组件实例的名称。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>此组件实例的类型转换器。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回此组件实例的默认事件。</summary>
      <returns>此组件实例的默认事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>此组件实例的默认属性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回此组件实例的指定类型的编辑器。</summary>
      <returns>表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 null。</returns>
      <param name="editorBaseType">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>此组件实例的事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>返回具有指定特性的此组件实例的事件。</summary>
      <returns>此组件实例的事件。</returns>
      <param name="attributes">特性</param>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>此组件实例的属性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>返回具有指定特性的此组件实例的属性。</summary>
      <returns>此组件实例的属性。</returns>
      <param name="attributes">特性。</param>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回包含指定的属性描述符所描述的属性的对象。</summary>
      <returns>表示指定属性所有者的 <see cref="T:System.Object" />。</returns>
      <param name="pd">表示要查找其所有者的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Error">
      <summary>获取描述该对象的任何验证错误的消息。</summary>
      <returns>对象上的验证错误。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Item(System.String)">
      <summary>获取具有给定名称的属性的错误信息。</summary>
      <returns>该属性的错误信息。 默认值为空字符串 ("")。</returns>
      <param name="colName">要获取其错误信息的属性的名称。</param>
    </member>
    <member name="T:System.Data.DataSet">
      <summary>表示数据的内存中缓存。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化具有给定序列化信息和上下文的 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所需的数据。</param>
      <param name="context">给定序列化流的源和目的地。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
      <param name="ConstructSchema">布尔值。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.String)">
      <summary>用给定名称初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="dataSetName">
        <see cref="T:System.Data.DataSet" /> 的名称。</param>
    </member>
    <member name="M:System.Data.DataSet.AcceptChanges">
      <summary>提交自加载此 <see cref="T:System.Data.DataSet" /> 或上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对其进行的所有更改。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />。 初始化发生在运行时。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataSet.CaseSensitive">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Data.DataTable" /> 对象中的字符串比较是否区分大小写。</summary>
      <returns>如果字符串比较区分大小写，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Clear">
      <summary>通过移除所有表中的所有行来清除任何数据的 <see cref="T:System.Data.DataSet" />。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Clone">
      <summary>复制 <see cref="T:System.Data.DataSet" /> 的结构，包括所有 <see cref="T:System.Data.DataTable" /> 架构、关系和约束。 不要复制任何数据。</summary>
      <returns>新 <see cref="T:System.Data.DataSet" />，其架构与当前 <see cref="T:System.Data.DataSet" /> 的架构相同，但是不包含任何数据。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Copy">
      <summary>复制该 <see cref="T:System.Data.DataSet" /> 的结构和数据。</summary>
      <returns>新的 <see cref="T:System.Data.DataSet" />，具有与该 <see cref="T:System.Data.DataSet" /> 相同的结构（表架构、关系和约束）和数据。 如果已创建这些类的子类，则副本也将属于相同的子类。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader">
      <summary>为每个 <see cref="T:System.Data.DataTable" /> 返回带有一个结果集的 <see cref="T:System.Data.DataTableReader" />，顺序与 <see cref="P:System.Data.DataSet.Tables" /> 集合中表的显示顺序相同。</summary>
      <returns>包含一个或多个结果集的 <see cref="T:System.Data.DataTableReader" />，与源 <see cref="T:System.Data.DataSet" /> 中包含的 <see cref="T:System.Data.DataTable" /> 实例相对应。</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])">
      <summary>为每个 <see cref="T:System.Data.DataTable" /> 返回带有一个结果集的 <see cref="T:System.Data.DataTableReader" />。</summary>
      <returns>包含一个或多个结果集的 <see cref="T:System.Data.DataTableReader" />，与源 <see cref="T:System.Data.DataSet" /> 中包含的 <see cref="T:System.Data.DataTable" /> 实例相对应。 返回的结果集按 <paramref name="dataTables" /> 参数所指定的顺序排列。</returns>
      <param name="dataTables">一个 DataTable 数组，它提供要在 <see cref="T:System.Data.DataTableReader" /> 中返回的结果集的顺序。</param>
    </member>
    <member name="P:System.Data.DataSet.DataSetName">
      <summary>获取或设置当前 <see cref="T:System.Data.DataSet" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 的名称。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataSet.DefaultViewManager">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 所包含的数据的自定义视图，以允许使用自定义的 <see cref="T:System.Data.DataViewManager" /> 进行筛选、搜索和导航。</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> 对象。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>确定 <see cref="T:System.Data.DataSet" /> 的 <see cref="P:System.Data.DataSet.SchemaSerializationMode" />。</summary>
      <returns>一个 <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，指示是否已从负载中忽略架构信息。</returns>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，在远程处理方案中进行反序列化期间将使用它调用 DataSet 的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，在远程处理方案中进行反序列化期间将使用它调用 DataSet 的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</param>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)">
      <summary>确定 <see cref="T:System.Data.DataSet" /> 的 <see cref="P:System.Data.DataSet.SchemaSerializationMode" />。</summary>
      <returns>一个 <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，指示是否已从负载中忽略架构信息。</returns>
      <param name="reader">在对 <see cref="T:System.Data.DataSet" /> 进行反序列化期间传递的 <see cref="T:System.Xml.XmlReader" /> 实例。</param>
    </member>
    <member name="M:System.Data.DataSet.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" /> 的初始化。 初始化发生在运行时。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataSet.EnforceConstraints">
      <summary>获取或设置一个值，该值指示在尝试执行任何更新操作时是否遵循约束规则。</summary>
      <returns>如果实施规则，则为 true；否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Data.ConstraintException">无法实施一个或多个约束。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataSet.ExtendedProperties">
      <summary>获取与 DataSet 相关的自定义用户信息的集合。</summary>
      <returns>包含所有自定义用户信息的 <see cref="T:System.Data.PropertyCollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.GetChanges">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 的副本，该副本包含自加载以来或自上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对该数据集进行的所有更改。</summary>
      <returns>此 <see cref="T:System.Data.DataSet" /> 中更改的副本，可以对该副本执行操作，然后可以使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 将其合并回去。 如果未找到更改的行，则该方法将返回 null。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)">
      <summary>获取由 <see cref="T:System.Data.DataRowState" /> 筛选的 <see cref="T:System.Data.DataSet" /> 的副本，该副本包含上次加载以来或调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对该数据集进行的所有更改。</summary>
      <returns>此 <see cref="T:System.Data.DataSet" /> 的筛选副本，可以对该副本执行操作，然后使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 将其合并回数据集。 如果未找到所需 <see cref="T:System.Data.DataRowState" /> 的行，则该方法返回 null。</returns>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>获取数据集的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的副本。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的副本。</returns>
      <param name="schemaSet">指定的架构集。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Data.DataSet" /> 所需的数据填充序列化信息对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保留与 <see cref="T:System.Data.DataSet" /> 相关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DataSet" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.DataSet.GetSchemaSerializable">
      <summary>返回一个可序列化的 <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从二进制或 XML 流反序列化表数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.DataSet.GetXml">
      <summary>返回存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式。</summary>
      <returns>表示存储在 <see cref="T:System.Data.DataSet" /> 中的数据的字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.GetXmlSchema">
      <summary>返回存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式的 XML 架构。</summary>
      <returns>字符串，它是存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式的 XML 架构。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.HasChanges">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataSet" /> 是否有更改，包括新增行、已删除的行或已修改的行。</summary>
      <returns>如果 <see cref="T:System.Data.DataSet" /> 有更改，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataSet" /> 是否有 <see cref="T:System.Data.DataRowState" /> 被筛选的更改，包括新增行、已删除的行或已修改的行。</summary>
      <returns>如果 <see cref="T:System.Data.DataSet" /> 有更改，则为 true；否则为 false。</returns>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataSet.HasErrors">
      <summary>获取一个值，指示在此 <see cref="T:System.Data.DataSet" /> 中的任何 <see cref="T:System.Data.DataTable" /> 对象中是否存在错误。</summary>
      <returns>如果任何表中包含错误，则为 true，否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])">
      <summary>将指定 <see cref="T:System.IO.Stream" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">将从其中读取该架构的 Stream。</param>
      <param name="nsArray">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])">
      <summary>将指定 <see cref="T:System.IO.TextReader" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">将从其中读取该架构的 TextReader。</param>
      <param name="nsArray">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])">
      <summary>将指定文件中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">从中读取架构的文件的名称（包括路径）。</param>
      <param name="nsArray">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])">
      <summary>将指定 <see cref="T:System.Xml.XmlReader" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">将从其中读取该架构的 XMLReader。</param>
      <param name="nsArray">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Data.DataSet.Initialized">
      <summary>在初始化 <see cref="T:System.Data.DataSet" /> 后发生。</summary>
    </member>
    <member name="M:System.Data.DataSet.InitializeDerivedDataSet">
      <summary>从二进制或 XML 流反序列化数据集的所有表数据。</summary>
    </member>
    <member name="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>检查 DataSet 的序列化表示形式的格式。</summary>
      <returns>如果指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 表示以二进制格式序列化的 DataSet，则为 true；否则为 false。</returns>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="P:System.Data.DataSet.IsInitialized">
      <summary>获取一个值，该值表明是否初始化 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>true 表明组件已完成初始化；否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])">
      <summary>使用提供的 <see cref="T:System.Data.IDataReader" /> 以数据源的值填充 <see cref="T:System.Data.DataSet" />，同时使用 <see cref="T:System.Data.DataTable" /> 实例的数组提供架构和命名空间信息。</summary>
      <param name="reader">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">一个来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示 <see cref="T:System.Data.DataSet" /> 中的 <see cref="T:System.Data.DataTable" /> 实例内已有的行如何与共享同一主键的传入行进行组合。</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> 实例数组，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 方法将从该数组中检索名称和命名空间信息。 其中每个表都必须是此 <see cref="T:System.Data.DataSet" /> 所包含的 <see cref="T:System.Data.DataTableCollection" /> 的成员。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])">
      <summary>使用提供的 <see cref="T:System.Data.IDataReader" /> 以数据源的值填充 <see cref="T:System.Data.DataSet" />，同时使用 <see cref="T:System.Data.DataTable" /> 实例的数组提供架构和命名空间信息。</summary>
      <param name="reader">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">一个来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示 <see cref="T:System.Data.DataSet" /> 中的 <see cref="T:System.Data.DataTable" /> 实例内已有的行如何与共享同一主键的传入行进行组合。</param>
      <param name="errorHandler">在加载数据时出现错误的情况下要调用的 <see cref="T:System.Data.FillErrorEventHandler" /> 委托。</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> 实例的数组，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 方法从该数组中检索名称和命名空间信息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])">
      <summary>使用所提供的 <see cref="T:System.Data.IDataReader" />，并使用字符串数组为 DataSet 中的表提供名称，从而用来自数据源的值填充 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，它表明 DataSet 内 <see cref="T:System.Data.DataTable" /> 实例中的现有行如何与共享相同主键的传入行组合。</param>
      <param name="tables">字符串数组，Load 方法将从该数组中检索表名称信息。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataSet.Locale">
      <summary>获取或设置用于比较表中字符串的区域设置信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，它包含有关用户计算机区域设置的数据。 默认值为 null。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[])">
      <summary>将 <see cref="T:System.Data.DataRow" /> 对象数组合并到当前的 <see cref="T:System.Data.DataSet" /> 中。</summary>
      <param name="rows">要合并到 DataSet 中的 DataRow 对象数组。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)">
      <summary>将 <see cref="T:System.Data.DataRow" /> 对象数组合并到当前的 <see cref="T:System.Data.DataSet" /> 中，在此过程中，将根据给定的参数保留或放弃在 DataSet 中进行的更改并处理不兼容的架构。</summary>
      <param name="rows">要合并到 DataSet 中的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
      <param name="preserveChanges">要保留 DataSet 中的更改，则为 true；否则为 false。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet)">
      <summary>将指定的 <see cref="T:System.Data.DataSet" /> 及其架构合并到当前 DataSet 中。</summary>
      <param name="dataSet">其数据和架构将被合并的 DataSet。</param>
      <exception cref="T:System.Data.ConstraintException">无法启用一个或多个约束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)">
      <summary>将指定的 <see cref="T:System.Data.DataSet" /> 及其架构合并到当前 DataSet 中，在此过程中，将根据给定的参数保留或放弃在此 DataSet 中进行的任何更改。</summary>
      <param name="dataSet">其数据和架构将被合并的 DataSet。</param>
      <param name="preserveChanges">要保留当前 DataSet 中的更改，则为 true；否则为 false。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>将指定的 <see cref="T:System.Data.DataSet" /> 及其架构与当前的 DataSet 合并，在此过程中，将根据给定的参数保留或放弃在当前 DataSet 中的更改并处理不兼容的架构。</summary>
      <param name="dataSet">其数据和架构将被合并的 DataSet。</param>
      <param name="preserveChanges">要保留当前 DataSet 中的更改，则为 true；否则为 false。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 及其架构合并到当前 <see cref="T:System.Data.DataSet" /> 中。</summary>
      <param name="table">其数据和架构将被合并的 <see cref="T:System.Data.DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 及其架构合并到当前的 DataSet 中，在此过程中，将根据给定的参数保留或放弃在 DataSet 中进行的更改并处理不兼容的架构。</summary>
      <param name="table">数据和架构将被合并的 DataTable。</param>
      <param name="preserveChanges">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <param name="missingSchemaAction">要保留 DataSet 中的更改，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataSet.MergeFailed">
      <summary>当目标和源 <see cref="T:System.Data.DataRow" /> 的主键值相同且 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 设置为真时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataSet.Namespace">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 的命名空间。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 的命名空间。</returns>
      <exception cref="T:System.ArgumentException">该命名空间已有数据。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 事件。</summary>
      <param name="pcevent">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)">
      <summary>当从 <see cref="T:System.Data.DataTable" /> 中移除 <see cref="T:System.Data.DataRelation" /> 对象时发生。</summary>
      <param name="relation">正在被移除的 <see cref="T:System.Data.DataRelation" />。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)">
      <summary>当从 <see cref="T:System.Data.DataSet" /> 中移除 <see cref="T:System.Data.DataTable" /> 时发生。</summary>
      <param name="table">正在被移除的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="P:System.Data.DataSet.Prefix">
      <summary>获取或设置一个 XML 前缀，该前缀是 <see cref="T:System.Data.DataSet" /> 的命名空间的别名。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 命名空间的 XML 前缀。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.RaisePropertyChanging(System.String)">
      <summary>发送指定的 <see cref="T:System.Data.DataSet" /> 属性将要更改的通知。</summary>
      <param name="name">将要更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
      <param name="stream">从 <see cref="T:System.IO.Stream" /> 派生的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Data.XmlReadMode" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>用于读取数据的 XmlReadMode。</returns>
      <param name="stream">从中读取的 <see cref="T:System.IO.Stream" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.IO.TextReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
      <param name="reader">从中读取架构和数据的 TextReader。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.IO.TextReader" /> 和 <see cref="T:System.Data.XmlReadMode" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>用于读取数据的 XmlReadMode。</returns>
      <param name="reader">从中读取的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String)">
      <summary>使用指定的文件将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>用于读取数据的 XmlReadMode。</returns>
      <param name="fileName">作为读取源的文件名（包括路径）。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)">
      <summary>使用指定的文件和 <see cref="T:System.Data.XmlReadMode" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>用于读取数据的 XmlReadMode。</returns>
      <param name="fileName">作为读取源的文件名（包括路径）。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>用于读取数据的 XmlReadMode。</returns>
      <param name="reader">从中读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 和 <see cref="T:System.Data.XmlReadMode" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>用于读取数据的 XmlReadMode。</returns>
      <param name="reader">从中读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)">
      <summary>从指定的 <see cref="T:System.IO.Stream" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">从中读取的 <see cref="T:System.IO.Stream" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)">
      <summary>从指定的 <see cref="T:System.IO.TextReader" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">从中读取的 <see cref="T:System.IO.TextReader" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.String)">
      <summary>从指定的文件中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">从中读取的文件的名称（包括路径）。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">从中读取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>忽略特性并返回一个空的数据集。</summary>
      <param name="reader">指定的 XML 读取器。</param>
    </member>
    <member name="M:System.Data.DataSet.RejectChanges">
      <summary>回滚自创建 <see cref="T:System.Data.DataSet" /> 以来或上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对其进行的所有更改。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataSet.Relations">
      <summary>获取用于将表链接起来并允许从父表浏览到子表的关系的集合。</summary>
      <returns>包含一个 <see cref="T:System.Data.DataRelation" /> 对象集合的 <see cref="T:System.Data.DataRelationCollection" />。 如果 <see cref="T:System.Data.DataRelation" /> 对象不存在，将返回空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataSet.RemotingFormat">
      <summary>为远程处理期间使用的 <see cref="T:System.Data.DataSet" /> 获取或设置 <see cref="T:System.Data.SerializationFormat" />。</summary>
      <returns>
        <see cref="T:System.Data.SerializationFormat" /> 对象。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.Reset">
      <summary>清除所有表并从 <see cref="T:System.Data.DataSet" /> 中删除所有关系、外部约束和表。 子类应重写 <see cref="M:System.Data.DataSet.Reset" />，以便将 <see cref="T:System.Data.DataSet" /> 还原到其原始状态。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataSet.SchemaSerializationMode">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.SchemaSerializationMode" />。</summary>
      <returns>获取或设置 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.SchemaSerializationMode" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeRelations">
      <summary>获取一个值，该值指示是否应该保持 <see cref="P:System.Data.DataSet.Relations" /> 属性。</summary>
      <returns>如果已将属性值更改为其默认值之外的值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeTables">
      <summary>获取一个值，该值指示是否应该保持 <see cref="P:System.Data.DataSet.Tables" /> 属性。</summary>
      <returns>如果已将属性值更改为其默认值之外的值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataSet.Site">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>用于 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.ComponentModel.ISite" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.Data.DataSet.Tables">
      <summary>获取包含在 <see cref="T:System.Data.DataSet" /> 中的表的集合。</summary>
      <returns>此 <see cref="T:System.Data.DataSet" /> 包含的 <see cref="T:System.Data.DataTableCollection" />。 如果 <see cref="T:System.Data.DataTable" /> 对象不存在，将返回空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 为 <see cref="T:System.Data.DataSet" /> 写当前数据。</summary>
      <param name="stream">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 为 <see cref="T:System.Data.DataSet" /> 写当前数据，还可以选择写架构。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。</summary>
      <param name="stream">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据。</summary>
      <param name="writer">用其进行写操作的 <see cref="T:System.IO.TextWriter" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据，还可以选择写入架构。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 对象用于写文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String)">
      <summary>将 <see cref="T:System.Data.DataSet" /> 的当前数据写入指定的文件。</summary>
      <param name="fileName">要向其写入的文件的名称（包括路径）。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.XmlWriteMode" /> 将 <see cref="T:System.Data.DataSet" /> 的当前数据写入指定的文件，还可以选择将架构写入指定的文件。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。</summary>
      <param name="fileName">要向其写入的文件的名称（包括路径）。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)">
      <summary>将 <see cref="T:System.Data.DataSet" /> 的当前数据写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">用其进行写操作的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据，还可以选择写入架构。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。</summary>
      <param name="writer">用其进行写操作的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="stream">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="stream">要写入到的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <param name="multipleTargetConverter">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" /> 对象。</summary>
      <param name="writer">用其进行写操作的 <see cref="T:System.IO.TextWriter" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要写入到的 <see cref="T:System.IO.TextWriter" /> 对象。</param>
      <param name="multipleTargetConverter">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String)">
      <summary>将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入文件。</summary>
      <param name="fileName">要向其写入的文件的名称（包括路径）。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})">
      <summary>将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入文件。</summary>
      <param name="fileName">要写入的文件的名称。</param>
      <param name="multipleTargetConverter">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="writer">要写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})">
      <summary>将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要写入到的 <see cref="T:System.Xml.XmlWriter" /> 对象。</param>
      <param name="multipleTargetConverter">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</param>
    </member>
    <member name="T:System.Data.DataSetDateTime">
      <summary>介绍 <see cref="T:System.Data.DataSet" /> 中 <see cref="T:System.DateTime" /> 列的序列化格式。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Local">
      <summary>DateTime 始终存储为 Local 格式。 如果将 <see cref="F:System.Data.DataSetDateTime.Utc" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 分配给此模式的列，则首先要将其转换为 Local 格式。 通常以 Local 格式在此模式中执行序列化。 在序列化期间将产生偏移量。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Unspecified">
      <summary>DateTime 始终存储为 Unspecified 格式。 如果将 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 分配给此模式的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 格式。 在此模式中的序列化不会产生偏移量。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.UnspecifiedLocal">
      <summary>DateTime 存储为 Unspecified 格式。 如果将 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 分配给此模式的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 格式。 在此模式中的序列化将产生偏移量。 此为默认行为，可向后兼容。 应将此选项在存储区中视为 Unspecified 格式，而在序列化期间应用类似于 <see cref="F:System.Data.DataSetDateTime.Local" /> 的偏移量。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Utc">
      <summary>DateTime 存储为协调通用时间 (UTC) 格式。 如果将 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 分配给此模式的列，则首先要将其转换为 Utc 格式。 通常以 Utc 格式在此模式中执行序列化。 序列化时不会产生偏移量。</summary>
    </member>
    <member name="T:System.Data.DataSetSchemaImporterExtension">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataSetSchemaImporterExtension.#ctor">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
    </member>
    <member name="M:System.Data.DataSetSchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>该成员支持 .NET Framework 结构，不应从代码直接使用。</returns>
      <param name="name">
        <paramref name="name" />
      </param>
      <param name="schemaNamespace">
        <paramref name="schemaNamespace" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
    </member>
    <member name="M:System.Data.DataSetSchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>该成员支持 .NET Framework 结构，不应从代码直接使用。</returns>
      <param name="type">
        <paramref name="type" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
    </member>
    <member name="T:System.Data.DataSysDescriptionAttribute">
      <summary>用说明来标记属性、事件或扩展程序。 可视化设计器在引用成员时可显示该说明。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataSysDescriptionAttribute.#ctor(System.String)">
      <summary>使用指定的说明字符串初始化 <see cref="T:System.Data.DataSysDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">说明字符串。</param>
    </member>
    <member name="P:System.Data.DataSysDescriptionAttribute.Description">
      <summary>获取说明的文本。</summary>
      <returns>说明字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.DataTable">
      <summary>表示一个内存中数据表。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.#ctor">
      <summary>不带参数初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所需的数据。</param>
      <param name="context">给定序列化流的源和目的地。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String)">
      <summary>用指定的表名初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="tableName">赋予表的名称。 如果 <paramref name="tableName" /> 为 null 或是空字符串，则在添加到 <see cref="T:System.Data.DataTableCollection" /> 中时指定默认名称。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String,System.String)">
      <summary>用指定的表名和命名空间初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="tableName">赋予表的名称。 如果 <paramref name="tableName" /> 为 null 或是空字符串，则在添加到 <see cref="T:System.Data.DataTableCollection" /> 中时指定默认名称。</param>
      <param name="tableNamespace">存储在 DataTable 中的数据的 XML 表示形式的命名空间。</param>
    </member>
    <member name="M:System.Data.DataTable.AcceptChanges">
      <summary>提交自上次调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以来对该表进行的所有更改。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" />。 初始化发生在运行时。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.BeginLoadData">
      <summary>在加载数据时关闭通知、索引维护和约束。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.CaseSensitive">
      <summary>指示表中的字符串比较是否区分大小写。</summary>
      <returns>如果比较区分大小写，则为 true；否则为 false。 默认值被设置为父级 <see cref="T:System.Data.DataSet" /> 对象的 <see cref="P:System.Data.DataSet.CaseSensitive" /> 属性；当 <see cref="T:System.Data.DataTable" /> 的创建独立于 <see cref="T:System.Data.DataSet" /> 时设置为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.ChildRelations">
      <summary>获取此 <see cref="T:System.Data.DataTable" /> 的子关系的集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataRelationCollection" />，包含该表的子关系。 如果 <see cref="T:System.Data.DataRelation" /> 对象不存在，将返回空集合。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Clear">
      <summary>清除所有数据的 <see cref="T:System.Data.DataTable" />。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Clone">
      <summary>克隆 <see cref="T:System.Data.DataTable" /> 的结构，包括所有 <see cref="T:System.Data.DataTable" /> 架构和约束。</summary>
      <returns>新的 <see cref="T:System.Data.DataTable" />，与当前的 <see cref="T:System.Data.DataTable" /> 具有相同的架构。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanged">
      <summary>在 <see cref="T:System.Data.DataRow" /> 中指定的 <see cref="T:System.Data.DataColumn" /> 的值被更改后发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanging">
      <summary>在 <see cref="T:System.Data.DataRow" /> 中指定的 <see cref="T:System.Data.DataColumn" /> 的值发生更改时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataTable.Columns">
      <summary>获取属于该表的列的集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataColumnCollection" />，包含该表的 <see cref="T:System.Data.DataColumn" /> 对象的集合。 如果 <see cref="T:System.Data.DataColumn" /> 对象不存在，将返回空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.Compute(System.String,System.String)">
      <summary>计算用来传递筛选条件的当前行上的给定表达式。</summary>
      <returns>
        <see cref="T:System.Object" />，设置为计算结果。 如果该表达式计算得出 Null，则返回值将为即为 <see cref="F:System.DBNull.Value" />。</returns>
      <param name="expression">要计算的表达式。</param>
      <param name="filter">要限制在表达式中进行计算的行的筛选器。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.Constraints">
      <summary>获取由该表维护的约束的集合。</summary>
      <returns>一个 <see cref="T:System.Data.ConstraintCollection" />，包含该表的 <see cref="T:System.Data.Constraint" /> 对象的集合。 如果 <see cref="T:System.Data.Constraint" /> 对象不存在，将返回空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.Copy">
      <summary>复制该 <see cref="T:System.Data.DataTable" /> 的结构和数据。</summary>
      <returns>新的 <see cref="T:System.Data.DataTable" />，它具有与该 <see cref="T:System.Data.DataTable" /> 相同的结构（表架构和约束）和数据。 如果这些类已经过派生，则副本也具有相同的派生类。 <see cref="M:System.Data.DataTable.Copy" /> 将创建一个新 <see cref="T:System.Data.DataTable" />，后者与原始 <see cref="T:System.Data.DataTable" /> 具有相同的结构和数据。 若要将结构复制到新的 <see cref="T:System.Data.DataTable" />，而不是复制到数据，请使用 <see cref="M:System.Data.DataTable.Clone" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.CreateDataReader">
      <summary>返回与此 <see cref="T:System.Data.DataTable" /> 中的数据相对应的 <see cref="T:System.Data.DataTableReader" />。</summary>
      <returns>包含一个结果集的 <see cref="T:System.Data.DataTableReader" />，该结果集与源 <see cref="T:System.Data.DataTable" /> 实例对应。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateInstance">
      <summary>创建 <see cref="T:System.Data.DataTable" /> 的一个新实例。</summary>
      <returns>新表达式。</returns>
    </member>
    <member name="P:System.Data.DataTable.DataSet">
      <summary>获取此表所属的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>此表所属的 <see cref="T:System.Data.DataSet" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataTable.DefaultView">
      <summary>获取可能包括筛选视图或游标位置的表的自定义视图。</summary>
      <returns>与 <see cref="T:System.Data.DataTable" /> 关联的 <see cref="T:System.Data.DataView" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.DisplayExpression">
      <summary>获取或设置一个表达式，该表达式返回的值用于表示用户界面中的此表。 DisplayExpression 属性用于在用户界面中显示此表的名称。</summary>
      <returns>显示字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" /> 的初始化。 初始化发生在运行时。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.EndLoadData">
      <summary>在加载数据后打开通知、索引维护和约束。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.ExtendedProperties">
      <summary>获取自定义用户信息的集合。</summary>
      <returns>包含自定义用户信息的 <see cref="T:System.Data.PropertyCollection" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.DataTable.fInitInProgress">
      <summary>检查是否正在进行初始化。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataTable.GetChanges">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的副本，该副本包含自加载以来或自上次调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以来对该数据集进行的所有更改。</summary>
      <returns>此 <see cref="T:System.Data.DataTable" /> 中的更改的副本，如果未发现更改，则为 null。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
      <summary>获取由 <see cref="T:System.Data.DataRowState" /> 筛选的 <see cref="T:System.Data.DataTable" /> 的副本，该副本包含上次加载以来或调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以来对该数据集进行的所有更改。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的筛选副本，可以对该副本执行操作，之后可以使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 将其合并回 <see cref="T:System.Data.DataTable" />。 如果未找到所需 <see cref="T:System.Data.DataRowState" /> 的行，则该方法返回 null。</returns>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>该方法返回一个包含 Web 服务描述语言 (WSDL) 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例，该语言描述了用作 Web 服务的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.GetErrors">
      <summary>获取包含错误的 <see cref="T:System.Data.DataRow" /> 对象的数组。</summary>
      <returns>包含错误的 <see cref="T:System.Data.DataRow" /> 对象的数组。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.Data.DataTable" /> 所需的数据填充序列化信息对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含与 <see cref="T:System.Data.DataTable" /> 关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含与 <see cref="T:System.Data.DataTable" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数是空引用（Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.DataTable.GetRowType">
      <summary>获取行类型。</summary>
      <returns>返回 <see cref="T:System.Data.DataRow" /> 的类型。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法产生并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。</returns>
    </member>
    <member name="P:System.Data.DataTable.HasErrors">
      <summary>获取一个值，该值指示该表所属的 <see cref="T:System.Data.DataSet" /> 的任何表的任何行中是否有错误。</summary>
      <returns>如果有错误，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
      <summary>将 <see cref="T:System.Data.DataRow" /> 复制到 <see cref="T:System.Data.DataTable" /> 中，保留任何属性设置以及初始值和当前值。</summary>
      <param name="row">要导入的 <see cref="T:System.Data.DataRow" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataTable.Initialized">
      <summary>初始化 <see cref="T:System.Data.DataTable" /> 后发生。</summary>
    </member>
    <member name="P:System.Data.DataTable.IsInitialized">
      <summary>获取一个值，该值指示是否已初始化 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>true 表明组件已完成初始化；否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader)">
      <summary>通过所提供的 <see cref="T:System.Data.IDataReader" />，用某个数据源的值填充 <see cref="T:System.Data.DataTable" />。 如果 <see cref="T:System.Data.DataTable" /> 已经包含行，则从数据源传入的数据将与现有的行合并。</summary>
      <param name="reader">提供结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
      <summary>通过所提供的 <see cref="T:System.Data.IDataReader" />，用某个数据源的值填充 <see cref="T:System.Data.DataTable" />。 如果 DataTable 已包含行，则从数据源传入的数据将根据 <paramref name="loadOption" /> 参数的值与现有的行合并。</summary>
      <param name="reader">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示已存在于 <see cref="T:System.Data.DataTable" /> 中的行如何与共享同一主键的传入行合并。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>通过所提供的使用错误处理委托的 <see cref="T:System.Data.IDataReader" /> 用某个数据源中的值填充 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="reader">提供结果集的 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示已存在于 <see cref="T:System.Data.DataTable" /> 中的行如何与共享同一主键的传入行合并。</param>
      <param name="errorHandler">在加载数据时出现错误的情况下要调用的 <see cref="T:System.Data.FillErrorEventHandler" /> 委托。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
      <summary>查找和更新特定行。 如果找不到任何匹配行，则使用给定值创建新行。</summary>
      <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="values">用于创建新行的值的数组。</param>
      <param name="fAcceptChanges">如果接受更改，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">数组大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">值与其各自的列类型不匹配。</exception>
      <exception cref="T:System.Data.ConstraintException">添加行将使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">尝试将 null 值放到 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为假的列中。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
      <summary>查找和更新特定行。 如果找不到任何匹配行，则使用给定值创建新行。</summary>
      <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
      <param name="values">用于创建新行的值的数组。</param>
      <param name="loadOption">用于确定如何将数组值应用到现有行中的对应值。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.Locale">
      <summary>获取或设置用于比较表中字符串的区域设置信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，它包含有关用户计算机区域设置的数据。 默认为 <see cref="T:System.Data.DataTable" /> 所属的 <see cref="T:System.Data.DataSet" /> 对象的 <see cref="T:System.Globalization.CultureInfo" />（由 <see cref="P:System.Data.DataSet.Locale" /> 属性返回）；如果该表不属于 <see cref="T:System.Data.DataSet" />，则默认为当前系统的 <see cref="T:System.Globalization.CultureInfo" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 与当前的 <see cref="T:System.Data.DataTable" /> 合并。</summary>
      <param name="table">要与当前的 <see cref="T:System.Data.DataTable" /> 进行合并的 <see cref="T:System.Data.DataTable" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 与当前的 DataTable 合并，指示是否在当前的 DataTable 中保留更改。</summary>
      <param name="table">要与当前的 DataTable 进行合并的 DataTable。</param>
      <param name="preserveChanges">如果保留当前 DataTable 中的更改，则为 true；否则为 false。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 与当前的 DataTable 合并，指示是否在当前的 DataTable 中保留更改以及如何处理缺失的架构。</summary>
      <param name="table">要与当前的 <see cref="T:System.Data.DataTable" /> 进行合并的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="preserveChanges">如果保留当前 <see cref="T:System.Data.DataTable" /> 中的更改，则为 true；否则为 false。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.MinimumCapacity">
      <summary>获取或设置该表最初的起始大小。</summary>
      <returns>该表中行的最初起始大小。 默认值为 50。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.Namespace">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 中所存储数据的 XML 表示形式的命名空间。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的命名空间。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.NewRow">
      <summary>创建与该表具有相同架构的新 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" />，其架构与 <see cref="T:System.Data.DataTable" /> 的架构相同。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.NewRowArray(System.Int32)">
      <summary>返回 <see cref="T:System.Data.DataRow" /> 的数组。</summary>
      <returns>新数组。</returns>
      <param name="size">描述数组大小的 <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
      <summary>从现有的行创建新行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 派生类。</returns>
      <param name="builder">
        <see cref="T:System.Data.DataRowBuilder" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.ColumnChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
      <param name="pcevent">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
      <summary>通知 <see cref="T:System.Data.DataTable" />：<see cref="T:System.Data.DataColumn" /> 正在被移除。</summary>
      <param name="column">正在被移除的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowDeleting" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableCleared" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableClearing" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableNewRow" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
    </member>
    <member name="P:System.Data.DataTable.ParentRelations">
      <summary>获取该 <see cref="T:System.Data.DataTable" /> 的父关系的集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataRelationCollection" />，包含该表的父关系。 如果 <see cref="T:System.Data.DataRelation" /> 对象不存在，将返回空集合。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.Prefix">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 中所存储数据的 XML 表示形式的命名空间。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的前缀。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.PrimaryKey">
      <summary>获取或设置充当数据表主键的列的数组。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
      <exception cref="T:System.Data.DataException">该键是外键。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
      <param name="stream">从 <see cref="T:System.IO.Stream" /> 派生的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.IO.TextReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
      <param name="reader">将用于读取数据的 <see cref="T:System.IO.TextReader" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.String)">
      <summary>将指定文件中的 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 中。</summary>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
      <param name="fileName">从中读取数据的文件的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</returns>
      <param name="reader">将用于读取数据的 <see cref="T:System.Xml.XmlReader" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
      <summary>使用指定流将 XML 架构读入 <see cref="T:System.Data.DataTable" /> 中。</summary>
      <param name="stream">用于读取该架构的流。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.IO.TextReader" /> 将 XML 架构读入 <see cref="T:System.Data.DataTable" /> 中。</summary>
      <param name="reader">用于读取架构信息的 <see cref="T:System.IO.TextReader" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.String)">
      <summary>将指定文件中的 XML 架构读入 <see cref="T:System.Data.DataTable" /> 中。</summary>
      <param name="fileName">从中读取架构信息的文件的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构读入 <see cref="T:System.Data.DataTable" /> 中。</summary>
      <param name="reader">用于读取架构信息的 <see cref="T:System.Xml.XmlReader" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>从 XML 流中读取。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataTable.RejectChanges">
      <summary>回滚自该表加载以来或上次调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 以来对该表进行的所有更改。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.RemotingFormat">
      <summary>获取或设置序列化格式。</summary>
      <returns>指定 Binary 或 Xml 序列化的 <see cref="T:System.Data.SerializationFormat" /> 枚举。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Reset">
      <summary>将 <see cref="T:System.Data.DataTable" /> 重置为其初始状态。 重置将移除表的所有数据、索引、关系和列。 如果数据集包含一个数据表，则在重置该表之后，它将仍是数据集的一部分。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataTable.RowChanged">
      <summary>在成功更改 <see cref="T:System.Data.DataRow" /> 之后发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.DataTable.RowChanging">
      <summary>在 <see cref="T:System.Data.DataRow" /> 正在更改时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.DataTable.RowDeleted">
      <summary>在表中的行已被删除后发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.DataTable.RowDeleting">
      <summary>在表中的行要被删除之前发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataTable.Rows">
      <summary>获取属于该表的行的集合。</summary>
      <returns>包含 <see cref="T:System.Data.DataRow" /> 对象的 <see cref="T:System.Data.DataRowCollection" />；否则为 null 值（如果不存在任何 <see cref="T:System.Data.DataRow" /> 对象）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.Select">
      <summary>获取所有 <see cref="T:System.Data.DataRow" /> 对象的数组。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String)">
      <summary>获取按与筛选条件相匹配的所有 <see cref="T:System.Data.DataRow" /> 对象的数组。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组。</returns>
      <param name="filterExpression">要用来筛选行的条件。 有关如何筛选行的示例，请参见 DataView RowFilter 语法 [C#]。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String)">
      <summary>获取按照指定的排序顺序且与筛选条件相匹配的所有 <see cref="T:System.Data.DataRow" /> 对象的数组。</summary>
      <returns>与筛选表达式相匹配的 <see cref="T:System.Data.DataRow" /> 对象的数组。</returns>
      <param name="filterExpression">要用来筛选行的条件。 有关如何筛选行的示例，请参见 DataView RowFilter 语法 [C#]。</param>
      <param name="sort">一个字符串，它指定列和排序方向。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
      <summary>获取与排序顺序中的筛选器以及指定的状态相匹配的所有 <see cref="T:System.Data.DataRow" /> 对象的数组。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 对象的数组。</returns>
      <param name="filterExpression">要用来筛选行的条件。 有关如何筛选行的示例，请参见 DataView RowFilter 语法 [C#]。</param>
      <param name="sort">一个字符串，它指定列和排序方向。</param>
      <param name="recordStates">
        <see cref="T:System.Data.DataViewRowState" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.Site">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>用于 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.ComponentModel.ISite" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
      <returns>如果集合是 <see cref="T:System.Collections.IList" /> 对象集合，则为 true；否则，为 false。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
      <returns>对象中可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法产生并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">一个 XmlReader。</param>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">一个 XmlWriter。</param>
    </member>
    <member name="E:System.Data.DataTable.TableCleared">
      <summary>清除 <see cref="T:System.Data.DataTable" /> 后发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.DataTable.TableClearing">
      <summary>清除 <see cref="T:System.Data.DataTable" /> 后发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataTable.TableName">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的名称。</returns>
      <exception cref="T:System.ArgumentException">null 或空字符串 ("") 被传入，此表属于一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">该表属于一个集合，该集合已经包含同名的表。（比较区分大小写）。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataTable.TableNewRow">
      <summary>插入新 <see cref="T:System.Data.DataRow" /> 时发生。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.ToString">
      <summary>获取 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" />（如果有一个用作连接字符串）。</summary>
      <returns>一个由 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" /> 值组成的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 以 XML 格式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="stream">数据将写入的流。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" /> 以 XML 格式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="stream">数据将写入的流。</param>
      <param name="writeHierarchy">如果为 true，则写入当前表及其所有子代的内容。 如果为 false（默认值），则只写入当前表的数据。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Data.XmlWriteMode" /> 将 <see cref="T:System.Data.DataTable" /> 的当前数据写入指定的文件，还可以选择将架构写入指定的文件。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。</summary>
      <param name="stream">数据将写入的流。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Data.XmlWriteMode" /> 将 <see cref="T:System.Data.DataTable" /> 的当前数据写入指定的文件，还可以选择将架构写入指定的文件。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="stream">数据将写入的流。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果为 true，则写入当前表及其所有子代的内容。 如果为 false（默认值），则只写入当前表的数据。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 以 XML 格式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="writer">用于写入内容的 <see cref="T:System.IO.TextWriter" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 以 XML 格式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="writer">用于写内容的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="writeHierarchy">如果为 true，则写入当前表及其所有子代的内容。 如果为 false（默认值），则只写入当前表的数据。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据，还可以选择写入架构。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" />，用于编写文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据，还可以选择写入架构。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" />，用于编写文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果为 true，则写入当前表及其所有子代的内容。 如果为 false（默认值），则只写入当前表的数据。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String)">
      <summary>使用指定的文件以 XML 格式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="fileName">要向其写入 XML 数据的文件。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
      <summary>使用指定的文件以 XML 格式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="fileName">要向其写入 XML 数据的文件。</param>
      <param name="writeHierarchy">如果为 true，则写入当前表及其所有子代的内容。 如果为 false（默认值），则只写入当前表的数据。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />，写入 <see cref="T:System.Data.DataTable" /> 的当前数据（还可以选择写入架构）。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。</summary>
      <param name="fileName">将向其写入数据的文件的名称。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />，写入 <see cref="T:System.Data.DataTable" /> 的当前数据（还可以选择写入架构）。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="fileName">将向其写入数据的文件的名称。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果为 true，则写入当前表及其所有子代的内容。 如果为 false（默认值），则只写入当前表的数据。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 以 XML 格式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="writer">用来写入内容的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 以 XML 格式写入 <see cref="T:System.Data.DataTable" /> 的当前内容。</summary>
      <param name="writer">用来写入内容的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="writeHierarchy">如果为 true，则写入当前表及其所有子代的内容。 如果为 false（默认值），则只写入当前表的数据。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据，还可以选择写入架构。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />，用于编写文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataTable" /> 的当前数据，还可以选择写入架构。 若要写架构，请将 <paramref name="mode" /> 参数的值设置为 WriteSchema。 若要保存该表及其所有子代的数据，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />，用于编写文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果为 true，则写入当前表及其所有子代的内容。 如果为 false（默认值），则只写入当前表的数据。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 的当前数据结构以 XML 架构形式写入指定的流。</summary>
      <param name="stream">XML 架构将写入的流。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 的当前数据结构以 XML 架构形式写入指定的流。 若要保存该表及其所有子代的架构，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="stream">XML 架构将写入的流。</param>
      <param name="writeHierarchy">如果为 true，将写入当前表及其所有子代的架构。 如果为 false（默认值），将只写入当前表的架构。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 将 <see cref="T:System.Data.DataTable" /> 的当前数据结构编写为 XML 架构。</summary>
      <param name="writer">用其进行写操作的 <see cref="T:System.IO.TextWriter" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 将 <see cref="T:System.Data.DataTable" /> 的当前数据结构编写为 XML 架构。 若要保存该表及其所有子代的架构，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="writer">用其进行写操作的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="writeHierarchy">如果为 true，将写入当前表及其所有子代的架构。 如果为 false（默认值），将只写入当前表的架构。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 的当前数据结构以 XML 架构形式写入指定的文件。</summary>
      <param name="fileName">要使用的文件的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 的当前数据结构以 XML 架构形式写入指定的文件。 若要保存该表及其所有子代的架构，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="fileName">要使用的文件的名称。</param>
      <param name="writeHierarchy">如果为 true，将写入当前表及其所有子代的架构。 如果为 false（默认值），将只写入当前表的架构。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 将 <see cref="T:System.Data.DataTable" /> 的当前数据结构以 XML 架构形式写入。</summary>
      <param name="writer">要使用的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 将 <see cref="T:System.Data.DataTable" /> 的当前数据结构以 XML 架构形式写入。 若要保存该表及其所有子代的架构，请将 <paramref name="writeHierarchy" /> 参数设置为 true。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />，用于编写文档。</param>
      <param name="writeHierarchy">如果为 true，将写入当前表及其所有子代的架构。 如果为 false（默认值），将只写入当前表的架构。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.DataTableClearEventArgs">
      <summary>为 <see cref="M:System.Data.DataTable.Clear" /> 方法提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataTableClearEventArgs.#ctor(System.Data.DataTable)">
      <summary>初始化 <see cref="T:System.Data.DataTableClearEventArgs" /> 类的新实例。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" />，它的行正在被清除。</param>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.Table">
      <summary>获取正在清除其中的行的表。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />，它的行正在被清除。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableName">
      <summary>获取正在清除其中的行的表的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，指示表的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableNamespace">
      <summary>获取其中的行正在被清除的表的命名空间。</summary>
      <returns>一个 <see cref="T:System.String" />，指示命名空间名称。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.DataTableClearEventHandler">
      <summary>表示处理 <see cref="M:System.Data.DataTable.Clear" /> 方法的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.DataTableCollection">
      <summary>表示 <see cref="T:System.Data.DataSet" /> 的表的集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTableCollection.Add">
      <summary>使用默认名称创建一个新的 <see cref="T:System.Data.DataTable" /> 对象，并将其添加到集合中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.Data.DataTable)">
      <summary>将指定的 DataTable 添加到集合。</summary>
      <param name="table">要添加的 DataTable 对象。</param>
      <exception cref="T:System.ArgumentNullException">为该表指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">该表已经属于此集合，或者属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中的某个表具有相同的名称。 该比较不区分大小写。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String)">
      <summary>使用指定名称创建一个 <see cref="T:System.Data.DataTable" /> 对象，并将其添加到集合中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="name">要赋予已创建的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中的某个表具有相同的名称。（该比较不区分大小写。）</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String,System.String)">
      <summary>使用指定名称创建一个 <see cref="T:System.Data.DataTable" /> 对象，并将其添加到集合中。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="name">要赋予已创建的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="tableNamespace">要为已创建的 <see cref="T:System.Data.DataTable" /> 提供的命名空间。</param>
      <exception cref="T:System.Data.DuplicateNameException">集合中的某个表具有相同的名称。（该比较不区分大小写。）</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.AddRange(System.Data.DataTable[])">
      <summary>将指定的 <see cref="T:System.Data.DataTable" /> 数组的元素复制到集合末尾。</summary>
      <param name="tables">要添加到集合中的 <see cref="T:System.Data.DataTable" /> 对象的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.CanRemove(System.Data.DataTable)">
      <summary>验证是否可以将指定的 <see cref="T:System.Data.DataTable" /> 对象从集合中移除。</summary>
      <returns>如果该表可被移除，则为 true；否则为 false。</returns>
      <param name="table">集合中要对其执行检查的 DataTable。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.Clear">
      <summary>清除所有 <see cref="T:System.Data.DataTable" /> 对象的集合。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanged">
      <summary>由于添加或移除 <see cref="T:System.Data.DataTable" /> 对象而更改 <see cref="T:System.Data.DataTableCollection" /> 之后发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanging">
      <summary>由于添加或移除 <see cref="T:System.Data.DataTable" /> 对象而更改 <see cref="T:System.Data.DataTableCollection" /> 时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <returns>如果存在指定的表，则为 true；否则为 false。</returns>
      <param name="name">要查找的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String,System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有指定名称和表命名空间的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <returns>如果存在指定的表，则为 true；否则为 false。</returns>
      <param name="name">要查找的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="tableNamespace">作为查找范围的 <see cref="T:System.Data.DataTable" /> 命名空间的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTableCollection.CopyTo(System.Data.DataTable[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.DataTableCollection" /> 的所有元素复制到一维 <see cref="T:System.Array" />，从指定目标数组索引处开始。</summary>
      <param name="array">要将当前 <see cref="T:System.Data.DataTableCollection" /> 对象的元素复制到其中的一维 <see cref="T:System.Array" />。</param>
      <param name="index">开始复制到其中的目标 <see cref="T:System.Array" /> 索引。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.Data.DataTable)">
      <summary>获取指定 <see cref="T:System.Data.DataTable" /> 对象的索引。</summary>
      <returns>表从零开始的索引，如果在集合中未找到该表，则为 -1。</returns>
      <param name="table">要搜索的 DataTable。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象的集合中的索引。</summary>
      <returns>具有指定名称的 DataTable 的从零开始的索引；或者如果集合中不存在该表，则为 –1。 当两个或两个以上的表同名，但是命名空间不同时，返回 -1。 如果在将表名只匹配到一个表时存在任何二义性，则该调用不会成功。</returns>
      <param name="tableName">要查找的 DataTable 对象的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String,System.String)">
      <summary>获取指定 <see cref="T:System.Data.DataTable" /> 对象的集合中的索引。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.DataTable" /> 的从零开始的索引；或者如果集合中不存在该表，则为 -1。</returns>
      <param name="tableName">要查找的 <see cref="T:System.Data.DataTable" /> 对象的名称。</param>
      <param name="tableNamespace">作为查找范围的 <see cref="T:System.Data.DataTable" /> 命名空间的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <returns>具有指定索引的 <see cref="T:System.Data.DataTable" />；否则，如果 <see cref="T:System.Data.DataTable" /> 不存在，则为 null。</returns>
      <param name="index">要查找的 <see cref="T:System.Data.DataTable" /> 的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中项的数目。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.DataTable" />；否则，如果 <see cref="T:System.Data.DataTable" /> 不存在，则为 null。</returns>
      <param name="name">要查找的 DataTable 的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String,System.String)">
      <summary>获取指定命名空间中具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.DataTable" />；否则，如果 <see cref="T:System.Data.DataTable" /> 不存在，则为 null。</returns>
      <param name="name">要查找的 DataTable 的名称。</param>
      <param name="tableNamespace">作为查找范围的 <see cref="T:System.Data.DataTable" /> 命名空间的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.Data.DataTable)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="table">要移除的 DataTable。</param>
      <exception cref="T:System.ArgumentNullException">为该表指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">该表不属于此集合。 - 或 - 该表是关系的一部分。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String)">
      <summary>从集合中删除具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="name">要移除的 <see cref="T:System.Data.DataTable" /> 对象的名称。</param>
      <exception cref="T:System.ArgumentException">该集合不包含具有指定名称的表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String,System.String)">
      <summary>从集合中删除具有指定名称的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="name">要移除的 <see cref="T:System.Data.DataTable" /> 对象的名称。</param>
      <param name="tableNamespace">作为查找范围的 <see cref="T:System.Data.DataTable" /> 命名空间的名称。</param>
      <exception cref="T:System.ArgumentException">该集合不包含具有指定名称的表。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTableCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引位置的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="index">要移除的 DataTable 的索引。</param>
      <exception cref="T:System.ArgumentException">该集合在指定的索引位置没有表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.DataTableNewRowEventArgs">
      <summary>为 <see cref="M:System.Data.DataTable.NewRow" /> 方法提供数据。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTableNewRowEventArgs.#ctor(System.Data.DataRow)">
      <summary>初始化 <see cref="T:System.Data.DataTableNewRowEventArgs" /> 的新实例。</summary>
      <param name="dataRow">正被添加的 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="P:System.Data.DataTableNewRowEventArgs.Row">
      <summary>获取正被添加的行。</summary>
      <returns>正被添加的 <see cref="T:System.Data.DataRow" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.DataTableNewRowEventHandler">
      <summary>表示处理 <see cref="M:System.Data.DataTable.NewRow" /> 方法的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.DataTableReader">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 以一个或多个只读、只进结果集的形式获取一个或多个 <see cref="T:System.Data.DataTable" /> 对象的内容。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable)">
      <summary>通过使用提供的 <see cref="T:System.Data.DataTable" /> 中的数据初始化 <see cref="T:System.Data.DataTableReader" /> 类的新实例。</summary>
      <param name="dataTable">新的 <see cref="T:System.Data.DataTableReader" /> 从中获取其结果集的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])">
      <summary>使用提供的 <see cref="T:System.Data.DataTable" /> 对象的数组初始化 <see cref="T:System.Data.DataTableReader" /> 类的新实例。</summary>
      <param name="dataTables">为新的 <see cref="T:System.Data.DataTableReader" /> 对象提供结果的 <see cref="T:System.Data.DataTable" /> 对象数组。</param>
    </member>
    <member name="M:System.Data.DataTableReader.Close">
      <summary>关闭当前的 <see cref="T:System.Data.DataTableReader" />。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableReader.Depth">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 的当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度；始终为零。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableReader.FieldCount">
      <summary>返回当前行中的列数。</summary>
      <returns>如果未定位在有效的结果集中，则为 0；否则为当前行中的列数。</returns>
      <exception cref="T:System.InvalidOperationException">尝试在关闭的 <see cref="T:System.Data.DataTableReader" /> 中检索字段计数。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetBoolean(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Boolean" /> 形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 Boolean。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetByte(System.Int32)">
      <summary>获取指定列的字节形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 DataTableReader 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含字节。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将从指定列偏移量开始的字节流作为从指定缓冲区偏移量开始的数组读入缓冲区中。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">字段中的索引，从该索引位置开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">缓冲区中的索引，从该索引位置开始放置数据。</param>
      <param name="length">要复制到缓冲区中的最大长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 DataTableReader 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含字节数组。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetChar(System.Int32)">
      <summary>获取指定列的字符形式的值。</summary>
      <returns>列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 DataTableReader 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的字段不包含字符。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>以字符数组的形式返回指定列的值。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">字段中的索引，从该索引位置开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">缓冲区中的索引，从该索引位置开始放置数据。</param>
      <param name="length">要复制到缓冲区中的最大长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 DataTableReader 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含字符数组。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetDataTypeName(System.Int32)">
      <summary>获取一个表示指定列的数据类型的字符串。</summary>
      <returns>一个表示列的数据类型的字符串。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 DataTableReader 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 DateTime 值。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 DataTableReader 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 Decimal 值。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetDouble(System.Int32)">
      <summary>获取双精度浮点数形式的列值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 DataTableReader 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含双精度浮点数。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetEnumerator">
      <summary>返回一个可用于循环访问项集合的枚举数。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，它代表项集合。</returns>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetFieldType(System.Int32)">
      <summary>获取是对象的数据类型的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Type" />，它是对象的数据类型。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetFloat(System.Int32)">
      <summary>获取指定列的单精度浮点数形式的值。</summary>
      <returns>列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含单精度浮点数。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetGuid(System.Int32)">
      <summary>获取指定列的全局唯一标识符 (GUID) 形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 GUID。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt16(System.Int32)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 16 位有符号整数。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt32(System.Int32)">
      <summary>获取指定列的 32 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 32 位有符号整数值。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt64(System.Int32)">
      <summary>获取指定列的 64 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 64 位有符号整数值。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetName(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.String" /> 形式的值。</summary>
      <returns>指定列的名称。</returns>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetOrdinal(System.String)">
      <summary>在给定列名称的情况下获取列序号。</summary>
      <returns>从零开始的列序号。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.ArgumentException">指定的名称不是有效的列名称。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>获取指定列特定于提供程序的格式的类型。</summary>
      <returns>
        <see cref="T:System.Type" />，它是对象的数据类型。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)">
      <summary>获取指定列特定于提供程序的格式的值。</summary>
      <returns>指定列特定于提供程序的格式的值。</returns>
      <param name="ordinal">值被检索的列的从零开始的编号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])">
      <summary>使用 <see cref="T:System.Data.DataTableReader" /> 中所有列的特定于提供程序的类型信息填充提供的数组。</summary>
      <returns>复制到数组中的列值数。</returns>
      <param name="values">要使用 <see cref="T:System.Data.DataTableReader" /> 中列的类型信息填充的对象数组。</param>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.DataTableReader" /> 的列元数据。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.DataTableReader" /> 是关闭的。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetString(System.Int32)">
      <summary>获取指定列的字符串形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含字符串。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetValue(System.Int32)">
      <summary>获取以本机格式表示的指定列的值。</summary>
      <returns>指定列的值。 此方法为空列返回 DBNull。</returns>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <returns>复制到数组中的列值数。</returns>
      <param name="values">要将 <see cref="T:System.Data.DataTableReader" /> 中的列值复制到的 <see cref="T:System.Object" /> 数组。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableReader.HasRows">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataTableReader" /> 是否包含一行或多行。</summary>
      <returns>如果 <see cref="T:System.Data.DataTableReader" /> 包含一行或多行，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">尝试检索有关已关闭的 <see cref="T:System.Data.DataTableReader" /> 的信息。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableReader.IsClosed">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataTableReader" /> 是否已关闭。</summary>
      <returns>如果 <see cref="T:System.Data.DataTableReader" /> 已关闭，则返回 true；否则返回 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataTableReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在的或缺少的值。</summary>
      <returns>如果指定的列值与 <see cref="T:System.DBNull" /> 等效，则为 true；否则为 false。</returns>
      <param name="ordinal">从零开始的列序号</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.Int32)">
      <summary>在给定列序号的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.String)">
      <summary>在给定列名称的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.ArgumentException">指定的名称不是有效的列名称。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.NextResult">
      <summary>使 <see cref="T:System.Data.DataTableReader" /> 前进到下一个结果集（如果有）。</summary>
      <returns>如果有另一个结果集，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">尝试在已关闭的 <see cref="T:System.Data.DataTableReader" /> 中进行定位。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataTableReader.Read">
      <summary>使 <see cref="T:System.Data.DataTableReader" /> 前进到下一条记录。</summary>
      <returns>如果有要读取的另一行，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问已关闭的 <see cref="T:System.Data.DataTableReader" /> 中的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataTableReader.RecordsAffected">
      <summary>通过执行 SQL 语句获取插入、更改或删除的行数。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" /> 不支持此属性，并且始终返回 0。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.DataView">
      <summary>表示用于排序、筛选、搜索、编辑和导航的 <see cref="T:System.Data.DataTable" /> 的可绑定数据的自定义视图。 <see cref="T:System.Data.DataView" /> 不存储数据，而是表示其对应的 <see cref="T:System.Data.DataTable" /> 的已连接视图。 对 <see cref="T:System.Data.DataView" /> 的数据的更改将影响 <see cref="T:System.Data.DataTable" />。 对 <see cref="T:System.Data.DataTable" /> 的数据的更改将影响与之关联的所有 <see cref="T:System.Data.DataView" />。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataView.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataView" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable)">
      <summary>用指定的 <see cref="T:System.Data.DataTable" /> 初始化 <see cref="T:System.Data.DataView" /> 类的新实例。</summary>
      <param name="table">要添加到 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
      <summary>用指定的 <see cref="T:System.Data.DataTable" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.Sort" /> 和 <see cref="T:System.Data.DataViewRowState" /> 初始化 <see cref="T:System.Data.DataView" /> 类的新实例。</summary>
      <param name="table">要添加到 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="RowFilter">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.RowFilter" />。</param>
      <param name="Sort">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.Sort" />。</param>
      <param name="RowState">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataViewRowState" />。</param>
    </member>
    <member name="M:System.Data.DataView.AddNew">
      <summary>将新行添加到 <see cref="T:System.Data.DataView" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.DataRowView" /> 对象。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataView.AllowDelete">
      <summary>设置或获取一个值，该值指示是否允许删除。</summary>
      <returns>如果允许删除，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataView.AllowEdit">
      <summary>获取或设置一个值，该值指示是否允许编辑。</summary>
      <returns>如果允许编辑，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataView.AllowNew">
      <summary>获取或设置一个值，该值指示是否可以使用 <see cref="M:System.Data.DataView.AddNew" /> 方法添加新行。</summary>
      <returns>如果可添加新行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataView.ApplyDefaultSort">
      <summary>获取或设置一个值，该值指示是否使用默认排序。 默认排序是（ascending）由所有主键中指定由 <see cref="P:System.Data.DataTable.PrimaryKey" />。</summary>
      <returns>如果使用默认排序，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.BeginInit">
      <summary>开始初始化在窗体上使用的或由另一个组件使用的 <see cref="T:System.Data.DataView" />。 此初始化在运行时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataView.Close">
      <summary>关闭 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.ColumnCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在成功更改 <see cref="T:System.Data.DataColumnCollection" /> 之后发生。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.CopyTo(System.Array,System.Int32)">
      <summary>将项目复制到数组中。 只适用于 Web 窗体的界面。</summary>
      <param name="array">要复制到当中的数组。</param>
      <param name="index">起始索引。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataView.Count">
      <summary>在应用 <see cref="P:System.Data.DataView.RowFilter" /> 和 <see cref="P:System.Data.DataView.RowStateFilter" /> 之后，获取 <see cref="T:System.Data.DataView" /> 中记录的数量。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> 中记录的数量。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataView.DataViewManager">
      <summary>获取与此视图关联的 <see cref="T:System.Data.DataViewManager" />。</summary>
      <returns>DataViewManager，已用它创建了此视图。 如果这是 <see cref="T:System.Data.DataTable" /> 的默认 <see cref="T:System.Data.DataView" />，则 DataViewManager 属性返回 DataSet 的默认 DataViewManager。 否则，如果 DataView 的创建没有使用 DataViewManager，则该属性为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataView.Delete(System.Int32)">
      <summary>删除指定索引位置的行。</summary>
      <param name="index">要删除行的索引。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Data.DataView" /> 对象所使用的资源（内存除外）。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.DataView.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" /> 的初始化。 此初始化在运行时发生。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.Equals(System.Data.DataView)">
      <summary>确定指定的 <see cref="T:System.Data.DataView" /> 实例是否被视为相等。</summary>
      <returns>如果两个 <see cref="T:System.Data.DataView" /> 实例相等，则为 true；否则为 false。</returns>
      <param name="view">要比较的 <see cref="T:System.Data.DataView" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object)">
      <summary>按指定的排序关键字值在 <see cref="T:System.Data.DataView" /> 中查找行。</summary>
      <returns>包含指定排序关键字值的 <see cref="T:System.Data.DataView" /> 中的行的索引；否则为 -1（如果不存在排序关键字值）。</returns>
      <param name="key">要搜索的对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object[])">
      <summary>按指定的排序关键字值在 <see cref="T:System.Data.DataView" /> 中查找行。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> 中与指定的排序关键字值匹配的第一行位置的索引；否则，如果不存在匹配的排序关键字值，则为 -1。</returns>
      <param name="key">值的数组，类型为 <see cref="T:System.Object" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object)">
      <summary>返回 <see cref="T:System.Data.DataRowView" /> 对象的数组，这些对象的列与指定的排序关键字值匹配。</summary>
      <returns>DataRowView 对象的数组，这些对象的列与指定的排序关键字值匹配；或者，如果任何行都不包含指定的排序关键字值，则为空 DataRowView 数组。</returns>
      <param name="key">要搜索的列值，类型为 <see cref="T:System.Object" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object[])">
      <summary>返回 <see cref="T:System.Data.DataRowView" /> 对象的数组，这些对象的列与指定的排序关键字值匹配。</summary>
      <returns>DataRowView 对象的数组，这些对象的列与指定的排序关键字值匹配；或者，如果任何行都不包含指定的排序关键字值，则为空 DataRowView 数组。</returns>
      <param name="key">要搜索的列值的数组，类型为 <see cref="T:System.Object" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.GetEnumerator">
      <summary>获取此 <see cref="T:System.Data.DataView" /> 的枚举数。</summary>
      <returns>用于在列表中浏览的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.IndexListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
      <summary>在成功更改 <see cref="T:System.Data.DataView" /> 之后发生。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="E:System.Data.DataView.Initialized">
      <summary>当 <see cref="T:System.Data.DataView" /> 的初始化完成时发生。</summary>
    </member>
    <member name="P:System.Data.DataView.IsInitialized">
      <summary>获取一个值，该值指示组件是否已初始化。</summary>
      <returns>如果为 true，说明组件已完成初始化；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataView.IsOpen">
      <summary>获取一个值，该值指示数据源当前是否已打开并在 <see cref="T:System.Data.DataTable" /> 上映射数据视图。</summary>
      <returns>如果数据源已打开，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataView.Item(System.Int32)">
      <summary>从指定的表获取一行数据。</summary>
      <returns>所需的行的 <see cref="T:System.Data.DataRowView" />。</returns>
      <param name="recordIndex">
        <see cref="T:System.Data.DataTable" /> 中的记录的索引。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.DataView.ListChanged">
      <summary>在 <see cref="T:System.Data.DataView" /> 管理的列表发生更改时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataView.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataView.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.Open">
      <summary>打开一个 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.Reset">
      <summary>保留供内部使用。</summary>
    </member>
    <member name="P:System.Data.DataView.RowFilter">
      <summary>获取或设置用于筛选在 <see cref="T:System.Data.DataView" /> 中查看哪些行的表达式。</summary>
      <returns>用于指定行的筛选方式的字符串。 有关更多信息，请参见“备注”一节。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataView.RowStateFilter">
      <summary>获取或设置用于 <see cref="T:System.Data.DataView" /> 中的行状态筛选器。</summary>
      <returns>
        <see cref="T:System.Data.DataViewRowState" /> 值之一。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataView.Sort">
      <summary>获取或设置 <see cref="T:System.Data.DataView" /> 的一个或多个排序列以及排序顺序。</summary>
      <returns>一个字符串，它包含列名，后跟“ASC”（升序）或“DESC”（降序）。 在默认情况下列按升序排序。 多个列可用逗号隔开。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Add(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</returns>
      <param name="value">一个 <see cref="System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Clear">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Clear" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Contains(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</returns>
      <param name="value">一个 <see cref="System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#IndexOf(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</returns>
      <param name="value">一个 <see cref="System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</summary>
      <param name="index">一个 <see cref="System.Int32" /> 值。</param>
      <param name="value">要插入的 <see cref="System.Object" /> 值。</param>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsFixedSize">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsReadOnly">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#Item(System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</returns>
      <param name="recordIndex">一个 <see cref="System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Remove(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</summary>
      <param name="value">一个 <see cref="System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。</summary>
      <param name="index">一个 <see cref="System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="property">
        <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddNew">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>添加到列表的项。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowEdit">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowNew">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowRemove">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="property">
        <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。</param>
      <param name="direction">
        <see cref="System.ComponentModel.ListSortDirection" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</returns>
      <param name="property">
        <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。</param>
      <param name="key">一个 <see cref="System.Object" /> 值。</param>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="property">
        <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveSort">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />。</summary>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />。</summary>
      <param name="sorts">
        <see cref="System.ComponentModel.ListSortDescriptionCollection" /> 对象。</param>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#Filter">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#RemoveFilter">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingListView.RemoveFilter" />。</summary>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SortDescriptions">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsFiltering">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。</returns>
      <param name="listAccessors">
        <see cref="System.ComponentModel.PropertyDescriptor" /> 对象的数组。</param>
    </member>
    <member name="P:System.Data.DataView.Table">
      <summary>获取或设置源 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />，为此视图提供数据。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.ToTable">
      <summary>根据现有 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.DataTable" /> 实例，其中包含所请求的行和列。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.Boolean,System.String[])">
      <summary>根据现有 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.DataTable" /> 实例，其中包含所请求的行和列。</returns>
      <param name="distinct">如果为 true，则返回的 <see cref="T:System.Data.DataTable" /> 将包含所有列都具有不同值的行。 默认值为 false。</param>
      <param name="columnNames">一个字符串数组，包含要包括在返回的 <see cref="T:System.Data.DataTable" /> 中的列名的列表。 <see cref="T:System.Data.DataTable" /> 包含指定的列，其顺序与这些列在该数组中的顺序相同。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String)">
      <summary>根据现有 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.DataTable" /> 实例，其中包含所请求的行和列。</returns>
      <param name="tableName">返回的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String,System.Boolean,System.String[])">
      <summary>根据现有 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.DataTable" /> 实例，其中包含所请求的行和列。</returns>
      <param name="tableName">返回的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="distinct">如果为 true，则返回的 <see cref="T:System.Data.DataTable" /> 将包含所有列都具有不同值的行。 默认值为 false。</param>
      <param name="columnNames">一个字符串数组，包含要包括在返回的 <see cref="T:System.Data.DataTable" /> 中的列名的列表。 DataTable 包含指定的列，其顺序与这些列在该数组中的顺序相同。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex">
      <summary>保留供内部使用。</summary>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex(System.Boolean)">
      <summary>保留供内部使用。</summary>
      <param name="force">保留供内部使用。</param>
    </member>
    <member name="T:System.Data.DataViewManager">
      <summary>包含 <see cref="T:System.Data.DataSet" /> 中每个 <see cref="T:System.Data.DataTable" /> 的默认 <see cref="T:System.Data.DataViewSettingCollection" />。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataViewManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor(System.Data.DataSet)">
      <summary>为指定的 <see cref="T:System.Data.DataSet" /> 初始化 <see cref="T:System.Data.DataViewManager" /> 类的新实例。</summary>
      <param name="dataSet">要使用的 <see cref="T:System.Data.DataSet" /> 的名称。</param>
    </member>
    <member name="M:System.Data.DataViewManager.CreateDataView(System.Data.DataTable)">
      <summary>为指定的 <see cref="T:System.Data.DataTable" /> 创建一个 <see cref="T:System.Data.DataView" />。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> 对象。</returns>
      <param name="table">要用在 <see cref="T:System.Data.DataView" /> 中的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataViewManager.DataSet">
      <summary>获取或设置要与 <see cref="T:System.Data.DataViewManager" /> 一起使用的 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>要使用的 <see cref="T:System.Data.DataSet" />。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettingCollectionString">
      <summary>获取或设置一个用于代码持久性的值。</summary>
      <returns>一个用于代码持久性的值。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettings">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 中每个 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataViewSettingCollection" />。</summary>
      <returns>每个 DataTable 的 <see cref="T:System.Data.DataViewSettingCollection" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Data.DataViewManager.ListChanged">
      <summary>给 <see cref="T:System.Data.DataView" /> 添加或从中删除行之后发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataViewManager.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataViewManager.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.RelationCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在从 <see cref="T:System.Data.DataRelationCollection" /> 添加或移除 <see cref="T:System.Data.DataRelation" /> 时引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#Count">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.Count" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.Count" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Clear">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Clear" />。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 中的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsFixedSize">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsReadOnly">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>将 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到用于搜索的索引。</summary>
      <param name="property">要添加到用于搜索的索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddNew">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowEdit">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowNew">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowRemove">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根据 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 对列表进行排序。</summary>
      <param name="property">以其为根据进行排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>返回具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</summary>
      <returns>具有给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的行的索引。</returns>
      <param name="property">要对其进行搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜索的“属性”参数的值。</param>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>从用于搜索的索引中移除 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="property">要从用于搜索的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveSort">
      <summary>使用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 移除任何已应用的排序。</summary>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回列表的名称。</summary>
      <returns>列表的名称。</returns>
      <param name="listAccessors">为其返回列表名称的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的数组。 它可以是 null。</param>
    </member>
    <member name="M:System.Data.DataViewManager.TableCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在从 <see cref="T:System.Data.DataTableCollection" /> 添加或移除 <see cref="T:System.Data.DataTable" /> 时引发 <see cref="E:System.Data.DataTableCollection.CollectionChanged" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataViewRowState">
      <summary>描述 <see cref="T:System.Data.DataRow" /> 中数据的版本。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.DataViewRowState.Added">
      <summary>一个新行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.CurrentRows">
      <summary>包括未更改行、新行和已修改行的当前行。 默认情况下，<see cref="T:System.Data.DataViewRowState" /> 项设置当前行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Deleted">
      <summary>已删除的行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedCurrent">
      <summary>已修改的原始数据的当前版本（请参见 ModifiedOriginal）。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedOriginal">
      <summary>已修改的数据的原始版本。（尽管此数据已被修改，它仍作为 ModifiedCurrent 可用）。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.None">
      <summary>无。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.OriginalRows">
      <summary>包括未更改行和已删除行的原始行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Unchanged">
      <summary>未更改的行。</summary>
    </member>
    <member name="T:System.Data.DataViewSetting">
      <summary>表示从 <see cref="T:System.Data.DataViewManager" /> 创建的 DataView 的 <see cref="P:System.Data.DataView.ApplyDefaultSort" />、<see cref="P:System.Data.DataView.DataViewManager" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.RowStateFilter" />、<see cref="P:System.Data.DataView.Sort" /> 和 <see cref="P:System.Data.DataView.Table" /> 的默认设置。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSetting.ApplyDefaultSort">
      <summary>获取或设置一个值，该值指示是否使用默认排序。</summary>
      <returns>如果使用默认排序方式，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSetting.DataViewManager">
      <summary>获取包含此 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataViewManager" />。</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSetting.RowFilter">
      <summary>获取或设置应用于 <see cref="T:System.Data.DataView" /> 中的筛选器。 有关使用 RowFilter 的代码示例，请参见 <see cref="P:System.Data.DataView.RowFilter" />。</summary>
      <returns>包含要应用的筛选器的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSetting.RowStateFilter">
      <summary>获取或设置一个值，该值指示在 <see cref="T:System.Data.DataView" /> 中是显示 Current、Deleted、Modified Current、ModifiedOriginal、New、Original、Unchanged 还是不显示任何行。</summary>
      <returns>一个指示要显示哪些行的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSetting.Sort">
      <summary>获取或设置一个值，该值指示要应用于 <see cref="T:System.Data.DataView" /> 中的排序。</summary>
      <returns>要应用于 <see cref="T:System.Data.DataView" /> 中的排序。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSetting.Table">
      <summary>获取要应用 <see cref="T:System.Data.DataViewSetting" /> 属性的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.DataViewSettingCollection">
      <summary>包含 <see cref="T:System.Data.DataSet" /> 中每个 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataViewSetting" /> 对象的只读集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="ar">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入操作开始处的数组索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Data.DataViewSetting[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="ar">一维 <see cref="T:System.Array" />，为从集合所复制的值的目标位置。</param>
      <param name="index">插入操作开始处的数组索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Count">
      <summary>获取 <see cref="T:System.Data.DataViewSettingCollection" /> 中的 <see cref="T:System.Data.DataViewSetting" /> 对象数。</summary>
      <returns>集合中的 <see cref="T:System.Data.DataViewSetting" /> 对象数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.GetEnumerator">
      <summary>获取集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataViewSettingCollection" /> 是否为只读。</summary>
      <returns>返回 true。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问（线程安全）。</summary>
      <returns>如果不被派生类重写，该属性总是为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Data.DataTable)">
      <summary>获取集合中指定 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataViewSetting" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
      <param name="table">要查找的 <see cref="T:System.Data.DataTable" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataViewSetting" /> 对象（由其索引指定）。</summary>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
      <param name="index">要查找的 <see cref="T:System.Data.DataTable" /> 的从零开始的索引。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataViewSetting" />（由其名称指定）。</summary>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
      <param name="tableName">要查找的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问的对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.DBConcurrencyException">
      <summary>在插入、更新或删除操作过程中当受影响的行数等于零时由 <see cref="T:System.Data.Common.DataAdapter" /> 引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">文本字符串，它描述有关异常的详细信息。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">文本字符串，它描述有关异常的详细信息。</param>
      <param name="inner">对内部异常的引用。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">说明发生此异常的原因的错误消息。</param>
      <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
      <param name="dataRows">一个数组，其中包含因更新失败而导致生成此异常的 <see cref="T:System.Data.DataRow" /> 对象。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])">
      <summary>将因更新失败而导致生成此异常的 <see cref="T:System.Data.DataRow" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" /> 对象数组。</summary>
      <param name="array">要向其中复制 <see cref="T:System.Data.DataRow" /> 对象的一维的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>将因更新失败而导致生成此异常的 <see cref="T:System.Data.DataRow" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" /> 对象数组（从指定的目标数组索引开始）。</summary>
      <param name="array">要向其中复制 <see cref="T:System.Data.DataRow" /> 对象的一维的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
      <param name="arrayIndex">从其所在位置开始复制对象的目标数组索引。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Data.DBConcurrencyException" /> 所需的数据填充指定的序列化信息对象。</summary>
      <param name="si">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保留与 <see cref="T:System.Data.DBConcurrencyException" /> 相关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DBConcurrencyException" /> 相关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数是空引用（Visual Basic 中为 Nothing）。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.DBConcurrencyException.Row">
      <summary>获取或设置生成 <see cref="T:System.Data.DBConcurrencyException" /> 的 <see cref="T:System.Data.DataRow" /> 的值。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.DBConcurrencyException.RowCount">
      <summary>获取更新失败（因而生成此异常）的行数。</summary>
      <returns>一个整数，其中包含表示更新失败的行数的计数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.DbType">
      <summary>指定 .NET Framework 数据提供程序的字段、属性或 Parameter 对象的数据类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.DbType.AnsiString">
      <summary>非 Unicode 字符的可变长度流，范围在 1 到 8,000 个字符之间。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiStringFixedLength">
      <summary>非 Unicode 字符的固定长度流。</summary>
    </member>
    <member name="F:System.Data.DbType.Binary">
      <summary>二进制数据的可变长度流，范围在 1 到 8,000 个字节之间。</summary>
    </member>
    <member name="F:System.Data.DbType.Boolean">
      <summary>简单类型，表示 true 或 false 的布尔值。</summary>
    </member>
    <member name="F:System.Data.DbType.Byte">
      <summary>一个 8 位无符号整数，范围在 0 到 255 之间。</summary>
    </member>
    <member name="F:System.Data.DbType.Currency">
      <summary>货币值，范围在 -2 63（即 -922,337,203,685,477.5808）到 2 63 -1（即 +922,337,203,685,477.5807）之间，精度为千分之十个货币单位。</summary>
    </member>
    <member name="F:System.Data.DbType.Date">
      <summary>表示日期值的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime">
      <summary>表示一个日期和时间值的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime2">
      <summary>日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTimeOffset">
      <summary>显示时区的日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。 时区值范围从 -14:00 到 +14:00。</summary>
    </member>
    <member name="F:System.Data.DbType.Decimal">
      <summary>简单类型，表示从 1.0 x 10 -28 到大约 7.9 x 10 28 且有效位数为 28 到 29 位的值。</summary>
    </member>
    <member name="F:System.Data.DbType.Double">
      <summary>浮点型，表示从大约 5.0 x 10 -324 到 1.7 x 10 308 且精度为 15 到 16 位的值。</summary>
    </member>
    <member name="F:System.Data.DbType.Guid">
      <summary>全局唯一标识符（或 GUID）。</summary>
    </member>
    <member name="F:System.Data.DbType.Int16">
      <summary>整型，表示值介于 -32768 到 32767 之间的有符号 16 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Int32">
      <summary>整型，表示值介于 -2147483648 到 2147483647 之间的有符号 32 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Int64">
      <summary>整型，表示值介于 -9223372036854775808 到 9223372036854775807 之间的有符号 64 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Object">
      <summary>常规类型，表示任何没有由其他 DbType 值显式表示的引用或值类型。</summary>
    </member>
    <member name="F:System.Data.DbType.SByte">
      <summary>整型，表示值介于 -128 到 127 之间的有符号 8 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Single">
      <summary>浮点型，表示从大约 1.5 x 10 -45 到 3.4 x 10 38 且精度为 7 位的值。</summary>
    </member>
    <member name="F:System.Data.DbType.String">
      <summary>表示 Unicode 字符串的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.StringFixedLength">
      <summary>Unicode 字符的定长串。</summary>
    </member>
    <member name="F:System.Data.DbType.Time">
      <summary>一个表示 SQL Server DateTime 值的类型。 如果要使用 SQL Server time 值，请使用 <see cref="F:System.Data.SqlDbType.Time" />。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt16">
      <summary>整型，表示值介于 0 到 65535 之间的无符号 16 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt32">
      <summary>整型，表示值介于 0 到 4294967295 之间的无符号 32 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt64">
      <summary>整型，表示值介于 0 到 18446744073709551615 之间的无符号 64 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.VarNumeric">
      <summary>变长数值。</summary>
    </member>
    <member name="F:System.Data.DbType.Xml">
      <summary>XML 文档或片段的分析表示。</summary>
    </member>
    <member name="T:System.Data.DeletedRowInaccessibleException">
      <summary>表示尝试在已删除的 <see cref="T:System.Data.DataRow" /> 上执行操作时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.DuplicateNameException">
      <summary>表示在 <see cref="T:System.Data.DataSet" /> — 相关对象添加操作的过程中，遇到重复的数据库对象名称时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和异常初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.EvaluateException">
      <summary>表示无法计算 <see cref="T:System.Data.DataColumn" /> 的 <see cref="P:System.Data.DataColumn.Expression" /> 属性时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所需的数据。</param>
      <param name="context">特定序列化流的源和目标。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.FillErrorEventArgs">
      <summary>为 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.FillErrorEventArgs.#ctor(System.Data.DataTable,System.Object[])">
      <summary>初始化 <see cref="T:System.Data.FillErrorEventArgs" /> 类的新实例。</summary>
      <param name="dataTable">正在更新的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="values">正在更新的行的值。</param>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Continue">
      <summary>获取或设置一个值，指示是否继续执行填充操作而不考虑该错误。</summary>
      <returns>如果应该继续执行填充操作，则 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.DataTable">
      <summary>当发生错误时，获取正在更新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>正在更新的 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Errors">
      <summary>获取正在处理的错误。</summary>
      <returns>正在处理的错误。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Values">
      <summary>当发生错误时，获取正在更新的行的值。</summary>
      <returns>正在更新的行的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.FillErrorEventHandler">
      <summary>表示将处理 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.FillErrorEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.ForeignKeyConstraint">
      <summary>表示删除或更新某个值或行时，对主键/外键关系中一组列强制进行的操作限制。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的父级和子级 <see cref="T:System.Data.DataColumn" /> 对象初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类的新实例。</summary>
      <param name="parentColumn">约束中的父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">约束中的子级 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。 - 或 - 表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的父级和子级 <see cref="T:System.Data.DataColumn" /> 对象的数组，初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类的新实例。</summary>
      <param name="parentColumns">约束中的父级 <see cref="T:System.Data.DataColumn" /> 的数组。</param>
      <param name="childColumns">约束中的子级 <see cref="T:System.Data.DataColumn" /> 的数组。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。 - 或 - 表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>使用指定的名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类的新实例。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentColumn">约束中的父级 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="childColumn">约束中的子级 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。 - 或 - 表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>使用指定的名称、父级和子级 <see cref="T:System.Data.DataColumn" /> 对象的数组初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类的新实例。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。 当添加到约束集合中时，如果是 null 或空字符串，则给出默认名称。</param>
      <param name="parentColumns">约束中的父级 <see cref="T:System.Data.DataColumn" /> 的数组。</param>
      <param name="childColumns">约束中的子级 <see cref="T:System.Data.DataColumn" /> 的数组。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。 - 或 - 表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>此构造函数在 Visual Studio 环境中提供设计时支持。 因此，使用此构造函数创建的 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象必须通过 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" /> 添加到集合中。 当调用该方法时，必须存在具有指定名称的表和列，或者如果在调用该构造函数之前已经调用了 <see cref="M:System.Data.DataTable.BeginInit" />，则在调用 <see cref="M:System.Data.DataTable.EndInit" /> 时，必须存在具有指定名称的表和列。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentTableName">在约束中包含父级 <see cref="T:System.Data.DataColumn" /> 对象的父级 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="parentTableNamespace">
        <see cref="P:System.Data.DataTable.Namespace" /> 的名称。</param>
      <param name="parentColumnNames">约束中父级 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="childColumnNames">约束中子级 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 None、Cascade 和 Default。</param>
      <param name="deleteRule">当删除某行时要使用 <see cref="T:System.Data.Rule" /> 值之一。 默认值为 Cascade。 可能的值包括：None、Cascade、SetNull、SetDefault 和 Default。</param>
      <param name="updateRule">当某一行被更新时，要使用 <see cref="T:System.Data.Rule" /> 值之一。 默认值为 Cascade。 可能的值包括：None、Cascade、SetNull、SetDefault 和 Default。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。 - 或 - 表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>此构造函数在 Visual Studio 环境中提供设计时支持。 因此，使用此构造函数创建的 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象必须通过 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" /> 添加到集合中。 当调用该方法时，必须存在具有指定名称的表和列，或者如果在调用该构造函数之前已经调用了 <see cref="M:System.Data.DataTable.BeginInit" />，则在调用 <see cref="M:System.Data.DataTable.EndInit" /> 时，必须存在具有指定名称的表和列。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentTableName">在约束中包含父级 <see cref="T:System.Data.DataColumn" /> 对象的父级 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="parentColumnNames">约束中父级 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="childColumnNames">约束中子级 <see cref="T:System.Data.DataColumn" /> 对象名称的数组。</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 None、Cascade 和 Default。</param>
      <param name="deleteRule">当删除某行时要使用 <see cref="T:System.Data.Rule" /> 值之一。 默认值为 Cascade。 可能的值包括：None、Cascade、SetNull、SetDefault 和 Default。</param>
      <param name="updateRule">当某一行被更新时，要使用 <see cref="T:System.Data.Rule" /> 值之一。 默认值为 Cascade。 可能的值包括：None、Cascade、SetNull、SetDefault 和 Default。</param>
      <exception cref="T:System.ArgumentNullException">其中一列是或两列都是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。 - 或 - 表不属于同一 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.AcceptRejectRule">
      <summary>指示调用 <see cref="M:System.Data.DataTable.AcceptChanges" /> 时，通过该约束应发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 None 和 Cascade。 默认值为 None。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Columns">
      <summary>获取该约束的子列。</summary>
      <returns>作为约束子列的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.DeleteRule">
      <summary>获取或设置当删除某一行时通过该约束发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 值之一。 默认值为 Cascade。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.Equals(System.Object)">
      <summary>获取一个值，该值指示当前的 <see cref="T:System.Data.ForeignKeyConstraint" /> 是否与指定对象相同。</summary>
      <returns>如果对象相同，则为 true；否则为 false。</returns>
      <param name="key">此 <see cref="T:System.Data.ForeignKeyConstraint" /> 将与之比较的对象。 如果两个 <see cref="T:System.Data.ForeignKeyConstraint" /> 约束相同的列，则它们相等。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.GetHashCode">
      <summary>获取 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象的此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedColumns">
      <summary>该约束的父列。</summary>
      <returns>作为约束父列的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedTable">
      <summary>获取该约束的父表。</summary>
      <returns>该约束的父级 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Table">
      <summary>获取该约束的子表。</summary>
      <returns>作为该约束中子表的 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.UpdateRule">
      <summary>获取或设置当更新某一行时通过该约束发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 值之一。 默认值为 Cascade。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.IColumnMapping">
      <summary>将数据源列与 <see cref="T:System.Data.DataSet" /> 列关联起来，并由 <see cref="T:System.Data.Common.DataColumnMapping" /> 类实现，这是 .NET Framework 数据提供程序通常使用的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IColumnMapping.DataSetColumn">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 中要映射到的列的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中要映射到的列的名称。 该名称不区分大小写。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IColumnMapping.SourceColumn">
      <summary>获取或设置数据源中从其映射的列的名称。 该名称区分大小写。</summary>
      <returns>数据源中列的区分大小写的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IColumnMappingCollection">
      <summary>包含一个 DataColumnMapping 对象的集合，并由 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 实现，这是由 .NET Framework 数据提供程序通常使用的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Add(System.String,System.String)">
      <summary>使用源列和 <see cref="T:System.Data.DataSet" /> 列名，将 ColumnMapping 对象添加到 ColumnMapping 集合中。</summary>
      <returns>已添加到集合中的 ColumnMapping 对象。</returns>
      <param name="sourceColumnName">源列的区分大小写的名称。</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 列的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 是否包含具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <returns>如果具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象存在，则为 true；否则为 false。</returns>
      <param name="sourceColumnName">源列的区分大小写的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>获取具有指定 <see cref="T:System.Data.DataSet" /> 列名的 ColumnMapping 对象。</summary>
      <returns>具有指定 DataSet 列名的 ColumnMapping 对象。</returns>
      <param name="dataSetColumnName">集合中 <see cref="T:System.Data.DataSet" /> 列的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.IndexOf(System.String)">
      <summary>获取具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的位置。 该名称区分大小写。</summary>
      <returns>具有指定源列名称的 DataColumnMapping 对象的从零开始的位置。</returns>
      <param name="sourceColumnName">源列的区分大小写的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IColumnMappingCollection.Item(System.String)">
      <summary>获取或设置具有指定 SourceColumn 名称的 <see cref="T:System.Data.IColumnMapping" /> 对象。</summary>
      <returns>具有指定 SourceColumn 名称的 IColumnMapping 对象。</returns>
      <param name="index">要查找的 IColumnMapping 对象的 SourceColumn 名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.RemoveAt(System.String)">
      <summary>从集合中移除带有指定的 <see cref="P:System.Data.IColumnMapping.SourceColumn" /> 名称的 <see cref="T:System.Data.IColumnMapping" /> 对象。</summary>
      <param name="sourceColumnName">区分大小写的 SourceColumn 名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">带有指定的 SourceColumn 名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象不存在</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDataAdapter">
      <summary>允许对象实现 DataAdapter，并且表示一组用于填充和更新 <see cref="T:System.Data.DataSet" /> 及数据源的方法以及与映射操作有关的属性。 <see cref="T:System.Data.IDbDataAdapter" /> 实例针对作为（或类似于）具有文字命令（如 Transact-SQL）的关系数据库的数据源，而 <see cref="T:System.Data.IDataAdapter" /> 实例可使用任何类型的数据源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)">
      <summary>添加或更新 <see cref="T:System.Data.DataSet" /> 中的行以匹配使用 <see cref="T:System.Data.DataSet" /> 名称的数据源中的行，并创建一个名为“Table”的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象的数组，这些对象包含从数据源返回的架构信息。</returns>
      <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataAdapter.GetFillParameters">
      <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingMappingAction">
      <summary>指示或指定是否将未映射的源表或列与其源名一起传递以便筛选或引发错误。</summary>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。 默认值为 Passthrough。</returns>
      <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingMappingAction" /> 值之一。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingSchemaAction">
      <summary>指示或指定是否将丢失的源表、列及其关系添加到数据集架构中，是否忽略它们或者它们是否会引发错误。</summary>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。 默认值为 Add。</returns>
      <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataAdapter.TableMappings">
      <summary>指示如何将源表映射到数据集表。</summary>
      <returns>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值是一个空集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataAdapter.Update(System.Data.DataSet)">
      <summary>从名为“Table”的 <see cref="T:System.Data.DataTable" /> 为指定的 <see cref="T:System.Data.DataSet" /> 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
      <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDataParameter">
      <summary>表示 Command 对象的参数,也可以表示该对象到 <see cref="T:System.Data.DataSet" /> 列的映射；并且是由访问数据源的 .NET Framework 数据提供程序实现的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="F:System.Data.DbType.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性未设置为有效的 <see cref="T:System.Data.DbType" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataParameter.IsNullable">
      <summary>获取一个值，该值指示参数是否接受 null 值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.IDataParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 的名称。 默认值为空字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.IDataParameter.Value" />。</summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为空字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataParameter.SourceVersion">
      <summary>获取或设置在加载 <see cref="P:System.Data.IDataParameter.Value" /> 时使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为 <see cref="T:System.Data.DataRowVersion" /> 值之一。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataParameter.Value">
      <summary>获取或设置该参数的值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是该参数的值。 默认值为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDataParameterCollection">
      <summary>收集所有与 Command 对象有关的参数及其到 <see cref="T:System.Data.DataSet" /> 列的映射，并由访问该数据源的 .NET Framework 数据提供程序实现。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataParameterCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有指定名称的参数。</summary>
      <returns>如果集合包含该参数，则为 true；否则为 false。</returns>
      <param name="parameterName">参数的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataParameterCollection.IndexOf(System.String)">
      <summary>获取 <see cref="T:System.Data.IDataParameter" /> 在集合中的位置。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 在集合中从零开始的位置。</returns>
      <param name="parameterName">参数的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataParameterCollection.Item(System.String)">
      <summary>获取或设置指定索引处的参数。</summary>
      <returns>指定索引处的 <see cref="T:System.Object" />。</returns>
      <param name="parameterName">要检索的参数的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataParameterCollection.RemoveAt(System.String)">
      <summary>从集合中移除 <see cref="T:System.Data.IDataParameter" />。</summary>
      <param name="parameterName">参数的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDataReader">
      <summary>提供一种方法来读取一个或多个通过在数据源执行命令所获得的只进结果集流，这是由访问关系数据库的 .NET Framework 数据提供程序实现的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.IDataReader" /> 对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>嵌套级别。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.IDataReader" /> 的列元数据。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.IDataReader" /> 是关闭的。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataReader.IsClosed">
      <summary>获取一个值，该值指示数据读取器是否已关闭。</summary>
      <returns>如果数据读取器已关闭，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataReader.NextResult">
      <summary>当读取批处理 SQL 语句的结果时，使数据读取器前进到下一个结果。</summary>
      <returns>如果存在多个行，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataReader.Read">
      <summary>使 <see cref="T:System.Data.IDataReader" /> 前进到下一条记录。</summary>
      <returns>如果存在多个行，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataReader.RecordsAffected">
      <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
      <returns>已更改、插入或删除的行数；如果没有任何行受到影响或语句失败，则为 0；-1 表示 SELECT 语句。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDataRecord">
      <summary>使 DataReader 能访问每一行中的列值，由访问关系数据库的 .NET Framework 数据提供程序实现。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataRecord.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未放在有效的记录集中，则为 0；如果放在了有效的记录集中，则为当前记录的列数。 默认值为 -1。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetBoolean(System.Int32)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <returns>列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetByte(System.Int32)">
      <summary>获取指定列的 8 位无符号整数值。</summary>
      <returns>指定列的 8 位无符号整数值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字节流作为数组从给定的缓冲区偏移量开始读入缓冲区。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="fieldOffset">字段中的索引，从该索引位置开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferoffset">开始读取操作的 <paramref name="buffer" /> 索引。</param>
      <param name="length">要读取的字节数。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetChar(System.Int32)">
      <summary>获取指定列的字符值。</summary>
      <returns>指定列的字符值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字符流作为数组从给定的缓冲区偏移量开始读入缓冲区。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="fieldoffset">行中的索引，从该索引位置开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferoffset">开始读取操作的 <paramref name="buffer" /> 索引。</param>
      <param name="length">要读取的字节数。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetData(System.Int32)">
      <summary>返回指定的列序号的 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>所指定的列序号的 <see cref="T:System.Data.IDataReader" />。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)">
      <summary>获取指定字段的数据类型信息。</summary>
      <returns>指定字段的数据类型信息。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetDateTime(System.Int32)">
      <summary>获取指定字段的日期和时间数据值。</summary>
      <returns>指定字段的日期和时间数据值。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetDecimal(System.Int32)">
      <summary>获取指定字段的固定位置的数值。</summary>
      <returns>指定字段的固定位置的数值。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetDouble(System.Int32)">
      <summary>获取指定字段的双精度浮点数。</summary>
      <returns>指定字段的双精度浮点数。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetFieldType(System.Int32)">
      <summary>获取与从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> 返回的 <see cref="T:System.Object" /> 类型对应的 <see cref="T:System.Type" /> 信息。</summary>
      <returns>与从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" /> 返回的 <see cref="T:System.Object" /> 类型对应的 <see cref="T:System.Type" /> 信息。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetFloat(System.Int32)">
      <summary>获取指定字段的单精度浮点数。</summary>
      <returns>指定字段的单精度浮点数。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetGuid(System.Int32)">
      <summary>返回指定字段的 GUID 值。</summary>
      <returns>指定字段的 GUID 值。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt16(System.Int32)">
      <summary>获取指定字段的 16 位有符号整数值。</summary>
      <returns>指定字段的 16 位有符号整数值。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt32(System.Int32)">
      <summary>获取指定字段的 32 位有符号整数值。</summary>
      <returns>指定字段的 32 位有符号整数值。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt64(System.Int32)">
      <summary>获取指定字段的 64 位有符号整数值。</summary>
      <returns>指定字段的 64 位有符号整数值。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetName(System.Int32)">
      <summary>获取要查找的字段的名称。</summary>
      <returns>字段名称或空字符串 ("")（如果没有返回值）。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetOrdinal(System.String)">
      <summary>返回命名字段的索引。</summary>
      <returns>命名字段的索引。</returns>
      <param name="name">要查找的字段的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetString(System.Int32)">
      <summary>获取指定字段的字符串值。</summary>
      <returns>指定字段的字符串值。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetValue(System.Int32)">
      <summary>返回指定字段的值。</summary>
      <returns>返回时将包含字段值的 <see cref="T:System.Object" />。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.GetValues(System.Object[])">
      <summary>使用当前记录的列值来填充对象数组。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性字段复制到其中的 <see cref="T:System.Object" /> 的数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDataRecord.IsDBNull(System.Int32)">
      <summary>返回是否将指定字段设置为空。</summary>
      <returns>如果指定的字段设置为 Null，则为 true；否则为 false。</returns>
      <param name="i">要查找的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.Int32)">
      <summary>获取位于指定索引处的列。</summary>
      <returns>作为 <see cref="T:System.Object" /> 位于指定索引处的列。</returns>
      <param name="i">要获取的列的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.String)">
      <summary>获取具有指定名称的列。</summary>
      <returns>名称指定为 <see cref="T:System.Object" /> 的列。</returns>
      <param name="name">要查找的列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDbCommand">
      <summary>表示连接到数据源时执行的 SQL 语句，并且是由访问关系数据库的 .NET Framework 数据提供程序实现的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbCommand.Cancel">
      <summary>尝试取消 <see cref="T:System.Data.IDbCommand" /> 的执行。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbCommand.CommandText">
      <summary>获取或设置针对数据源运行的文本命令。</summary>
      <returns>要执行的文本命令。 默认值为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbCommand.CommandTimeout">
      <summary>获取或设置在终止执行命令的尝试并生成错误之前的等待时间。</summary>
      <returns>等待命令执行的时间（以秒为单位）。 默认值为 30 秒。</returns>
      <exception cref="T:System.ArgumentException">所分配的属性值小于 0。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbCommand.CommandType">
      <summary>指示或指定如何解释 <see cref="P:System.Data.IDbCommand.CommandText" /> 属性。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 Text。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.IDbCommand" /> 的此实例使用的 <see cref="T:System.Data.IDbConnection" />。</summary>
      <returns>与数据源的连接。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.IDbDataParameter" /> 对象的新实例。</summary>
      <returns>IDbDataParameter 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteNonQuery">
      <summary>针对 .NET Framework 数据提供程序的 Connection 对象执行 SQL 语句，并返回受影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <exception cref="T:System.InvalidOperationException">连接不存在。 - 或 - 连接未打开。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader">
      <summary>针对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>针对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 对象。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteScalar">
      <summary>执行查询，并返回查询所返回的结果集中第一行的第一列。 忽略额外的列或行。</summary>
      <returns>结果集中第一行的第一列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.IDataParameterCollection" />。</summary>
      <returns>SQL 语句或存储过程的参数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbCommand.Prepare">
      <summary>在数据源上创建该命令的准备好的（或已编译的）版本。</summary>
      <exception cref="T:System.InvalidOperationException">未设置 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />。 - 或 - <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 不为<see cref="M:System.Data.OleDb.OleDbConnection.Open" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbCommand.Transaction">
      <summary>获取或设置在其中执行 .NET Framework 数据提供程序的 Command 对象的事务。</summary>
      <returns>执行 .NET Framework 数据提供程序的 Command 对象。 默认值为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbCommand.UpdatedRowSource">
      <summary>获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 方法使用时如何应用于 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。 如果该命令不是自动生成的，则默认值为 Both。 否则，默认值为 None。</returns>
      <exception cref="T:System.ArgumentException">输入的值不是 <see cref="T:System.Data.UpdateRowSource" /> 值之一。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDbConnection">
      <summary>表示到数据源的已打开连接，并且是由访问关系数据库的 .NET Framework 数据提供程序实现的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction">
      <summary>开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的 <see cref="T:System.Data.IsolationLevel" /> 值开始一个数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="il">
        <see cref="T:System.Data.IsolationLevel" /> 值之一。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbConnection.ChangeDatabase(System.String)">
      <summary>为打开的 Connection 对象更改当前数据库。</summary>
      <param name="databaseName">要代替当前数据库进行使用的数据库的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbConnection.Close">
      <summary>关闭与数据库的连接。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionString">
      <summary>获取或设置用于打开数据库的字符串。</summary>
      <returns>包含连接设置的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionTimeout">
      <summary>获取在尝试建立连接时终止尝试并生成错误之前所等待的时间。</summary>
      <returns>等待连接打开的时间（以秒为单位）。 默认值为 15 秒。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbConnection.CreateCommand">
      <summary>创建并返回一个与该连接相关联的 Command 对象。</summary>
      <returns>一个与该连接相关联的 Command 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbConnection.Database">
      <summary>获取当前数据库或连接打开后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称或在连接打开后要使用的数据库的名称。 默认值为空字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbConnection.Open">
      <summary>打开一个数据库连接，其设置由提供程序特定的 Connection 对象的 ConnectionString 属性指定。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbConnection.State">
      <summary>获取连接的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDbDataAdapter">
      <summary>表示一组与命令有关的属性，用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源，由访问关系数据库的 .NET Framework 数据提供程序实现。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbDataAdapter.DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的 SQL 语句。</summary>
      <returns>
        <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中已删除的行删除数据源中的记录。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbDataAdapter.InsertCommand">
      <summary>获取或设置用于将新记录插入到数据源中的 SQL 语句。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中的新行将记录插入到数据源。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbDataAdapter.SelectCommand">
      <summary>获取或设置用于在数据源中选择记录的 SQL 语句。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它从数据源中选择记录以便放入数据集中。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbDataAdapter.UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的 SQL 语句。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中已修改的行更新数据源中的记录。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDbDataParameter">
      <summary>由 Visual Basic .NET 数据设计器使用，用来向 Command 对象表示一个参数，以及向该对象的 <see cref="T:System.Data.DataSet" /> 列映射表示参数（可选）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbDataParameter.Precision">
      <summary>指示数值参数的精度。</summary>
      <returns>用于表示数据提供程序 Parameter 对象的 Value 属性的数字的最大位数。 默认值为 0，它表示由数据提供程序设置 Value 的精度。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbDataParameter.Scale">
      <summary>指示数值参数的小数位数。</summary>
      <returns>要将 <see cref="T:System.Data.OleDb.OleDbParameter.Value" /> 解析为的小数位数。 默认值为 0。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbDataParameter.Size">
      <summary>参数的大小。</summary>
      <returns>列中数据的最大大小（以字节为单位）。 从参数值推断默认值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.IDbTransaction">
      <summary>表示要在数据源上执行的事务，它由访问关系数据库的 .NET Framework 数据提供程序来实现。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbTransaction.Connection">
      <summary>指定要与事务关联的 Connection 对象。</summary>
      <returns>要与事务关联的 Connection 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.IDbTransaction.IsolationLevel">
      <summary>指定该事务的 <see cref="T:System.Data.IsolationLevel" />。</summary>
      <returns>该事务的 <see cref="T:System.Data.IsolationLevel" />。 默认值为 ReadCommitted。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.IDbTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.InRowChangingEventException">
      <summary>表示在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件中调用 <see cref="M:System.Data.DataRow.EndEdit" /> 方法时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.InternalDataCollectionBase">
      <summary>提供用于创建集合的基本功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.#ctor">
      <summary>初始化 <see cref="T:System.Data.InternalDataCollectionBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.InternalDataCollectionBase" /> 的所有元素复制到一维 <see cref="T:System.Array" />，在指定 <see cref="T:System.Data.InternalDataCollectionBase" /> 索引处开始。</summary>
      <param name="ar">要将当前 <see cref="T:System.Data.InternalDataCollectionBase" /> 对象的元素复制到其中的一维 <see cref="T:System.Array" />。</param>
      <param name="index">开始复制到其中的目标 <see cref="T:System.Array" /> 索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.Count">
      <summary>获取集合中的元素的总数。</summary>
      <returns>集合中的元素的总数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.GetEnumerator">
      <summary>获取集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" /> 是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" /> 是否是同步的。</summary>
      <returns>如果集合是同步的，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.List">
      <summary>作为列表获取集合的项。</summary>
      <returns>包含集合的 <see cref="T:System.Collections.ArrayList" />。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.SyncRoot">
      <summary>获取可用于同步集合的对象。</summary>
      <returns>用于同步集合的 <see cref="T:System.object" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.InvalidConstraintException">
      <summary>表示在不正确地尝试创建或访问关系时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.InvalidExpressionException">
      <summary>表示在尝试将包含无效 <see cref="P:System.Data.DataColumn.Expression" /> 的 <see cref="T:System.Data.DataColumn" /> 添加到 <see cref="T:System.Data.DataColumnCollection" /> 中时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所需的数据。</param>
      <param name="context">给定序列化流的源和目的地。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.IsolationLevel">
      <summary>指定连接的事务锁定行为。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.IsolationLevel.Chaos">
      <summary>无法覆盖隔离级别更高的事务中的挂起的更改。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadCommitted">
      <summary>在正在读取数据时保持共享锁，以避免脏读，但是在事务结束之前可以更改数据，从而导致不可重复的读取或幻像数据。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadUncommitted">
      <summary>可以进行脏读，意思是说，不发布共享锁，也不接受独占锁。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.RepeatableRead">
      <summary>在查询中使用的所有数据上放置锁，以防止其他用户更新这些数据。 防止不可重复的读取，但是仍可以有幻像行。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Serializable">
      <summary>在 <see cref="T:System.Data.DataSet" /> 上放置范围锁，以防止在事务完成之前由其他用户更新行或向数据集中插入行。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Snapshot">
      <summary>通过在一个应用程序正在修改数据时存储另一个应用程序可以读取的相同数据版本来减少阻止。 表示您无法从一个事务中看到在其他事务中进行的更改，即便重新查询也是如此。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Unspecified">
      <summary>正在使用与指定隔离级别不同的隔离级别，但是无法确定该级别。</summary>
    </member>
    <member name="T:System.Data.ITableMapping">
      <summary>将源表与 <see cref="T:System.Data.DataSet" /> 中的表关联，并由 <see cref="T:System.Data.Common.DataTableMapping" /> 类实现，该类由 .NET Framework 数据提供程序共同使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.ITableMapping.ColumnMappings">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
      <returns>数据列映射集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.ITableMapping.DataSetTable">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 内的表的不区分大小写的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 内的表的不区分大小写的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.ITableMapping.SourceTable">
      <summary>获取或设置源表的区分大小写的名称。</summary>
      <returns>源表的区分大小写的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.ITableMappingCollection">
      <summary>包含 TableMapping 对象的集合，并由 <see cref="T:System.Data.Common.DataTableMappingCollection" />（通常由 .NET Framework 数据提供程序使用）实现。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Add(System.String,System.String)">
      <summary>向集合添加表映射。</summary>
      <returns>对新映射的 <see cref="T:System.Data.ITableMapping" /> 对象的引用。</returns>
      <param name="sourceTableName">源表的区分大小写的名称。</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> 表的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合是否包含具有指定源表名称的表映射。</summary>
      <returns>如果存在具有指定源表名称的表映射，则为 true；否则为 false。</returns>
      <param name="sourceTableName">源表的区分大小写的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.ITableMappingCollection.GetByDataSetTable(System.String)">
      <summary>获取具有指定的 <see cref="T:System.Data.DataSet" /> 表名称的 TableMapping 对象。</summary>
      <returns>具有指定的 DataSet 表名称的 TableMapping 对象。</returns>
      <param name="dataSetTableName">集合内的 DataSet 表的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.ITableMappingCollection.IndexOf(System.String)">
      <summary>获取 <see cref="T:System.Data.ITableMapping" /> 对象在集合内的位置。</summary>
      <returns>
        <see cref="T:System.Data.ITableMapping" /> 在集合内从零开始的位置。</returns>
      <param name="sourceTableName">源表的区分大小写的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.ITableMappingCollection.Item(System.String)">
      <summary>获取或设置具有指定的 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称的 <see cref="T:System.Data.ITableMapping" /> 的实例。</summary>
      <returns>具有指定的 SourceTable 名称的 <see cref="T:System.Data.ITableMapping" /> 的实例。</returns>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" /> 的 SourceTable 名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.ITableMappingCollection.RemoveAt(System.String)">
      <summary>从集合中移除带有指定的 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称的 <see cref="T:System.Data.ITableMapping" /> 对象。</summary>
      <param name="sourceTableName">SourceTable 的区分大小写的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.KeyRestrictionBehavior">
      <summary>标识由 KeyRestrictions 属性标识的连接字符串参数的列表，这些参数或者是被允许的，或者是不被允许的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.AllowOnly">
      <summary>默认值。 标识被允许的仅有的其他连接字符串参数。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.PreventUsage">
      <summary>标识不被允许的其他连接字符串参数。</summary>
    </member>
    <member name="T:System.Data.LoadOption">
      <summary>当使用 <see cref="Overload:System.Data.DataTable.Load" /> 或 <see cref="Overload:System.Data.DataSet.Load" /> 方法时控制数据源中的值如何应用至现有行。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.LoadOption.OverwriteChanges">
      <summary>传入此行的值将同时写入每列数据的当前值和原始值版本。</summary>
    </member>
    <member name="F:System.Data.LoadOption.PreserveChanges">
      <summary>传入此行的值将写入每列数据的原始值版本。 每列数据的当前版本不变化。这是默认设置。</summary>
    </member>
    <member name="F:System.Data.LoadOption.Upsert">
      <summary>传入此行的值将写入每列数据的当前版本。 每列数据的原始版本不变化。</summary>
    </member>
    <member name="T:System.Data.MappingType">
      <summary>指定如何映射 <see cref="T:System.Data.DataColumn" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.MappingType.Attribute">
      <summary>将列映射到 XML 特性。</summary>
    </member>
    <member name="F:System.Data.MappingType.Element">
      <summary>将列映射到 XML 元素。</summary>
    </member>
    <member name="F:System.Data.MappingType.Hidden">
      <summary>将列映射到内部结构。</summary>
    </member>
    <member name="F:System.Data.MappingType.SimpleContent">
      <summary>将列映射到 <see cref="T:System.Xml.XmlText" /> 节点。</summary>
    </member>
    <member name="T:System.Data.MergeFailedEventArgs">
      <summary>在目标和源 DataRow 具有相同的主键值，且将 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 属性设置为“真”时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.MergeFailedEventArgs.#ctor(System.Data.DataTable,System.String)">
      <summary>使用 <see cref="T:System.Data.DataTable" /> 和合并冲突说明来初始化 <see cref="T:System.Data.MergeFailedEventArgs" /> 类的新实例。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 对象。</param>
      <param name="conflict">合并冲突的说明。</param>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Conflict">
      <summary>返回合并冲突的说明。</summary>
      <returns>合并冲突的说明。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Table">
      <summary>返回 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.MergeFailedEventHandler">
      <summary>表示将处理 <see cref="E:System.Data.DataSet.MergeFailed" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件的数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.MissingMappingAction">
      <summary>确定源表或源列中缺少映射时发生的操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.MissingMappingAction.Error">
      <summary>如果缺少指定的列映射，则生成 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Ignore">
      <summary>忽略没有映射的列或表。 返回 null。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Passthrough">
      <summary>创建源列或源表，并使用其原始名称将其添加到 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Data.MissingPrimaryKeyException">
      <summary>表示在尝试访问没有主键的表中的行时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.MissingSchemaAction">
      <summary>指定在将数据添加到 <see cref="T:System.Data.DataSet" /> 而缺少要求的 <see cref="T:System.Data.DataTable" /> 或 <see cref="T:System.Data.DataColumn" /> 时要采取的操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Add">
      <summary>添加必需的列以完成架构。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.AddWithKey">
      <summary>添加必需的列和主键信息以完成架构。 有关如何将主键信息添加到 <see cref="T:System.Data.DataTable" /> 的更多信息，请参见 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />。为与用于 OLE DB 的 .NET Framework 数据提供程序一起正确运行，AddWithKey 要求本机 OLE DB 提供程序通过设置 DBPROP_UNIQUEROWS 属性获得必需的主键信息，然后通过检查 IColumnsRowset 中的 DBCOLUMN_KEYCOLUMN 确定哪些列是主键列。 作为一种备选方法，用户可以在每个 <see cref="T:System.Data.DataTable" /> 上显式设置主键约束。 这将确保对与现有记录匹配的传入记录进行更新，而不是追加。 当使用 AddWithKey 时，用于 SQL Server 的 .NET Framework 数据提供程序将 FOR BROWSE 子句追加到正在执行的语句。 用户应该注意潜在的副作用，例如对 SET FMTONLY ON 语句的使用产生的干扰。 有关更多信息，请参见“SQL Server 联机丛书”。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Error">
      <summary>如果缺少指定的列映射，则生成 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Ignore">
      <summary>忽略额外列。</summary>
    </member>
    <member name="T:System.Data.NoNullAllowedException">
      <summary>表示在尝试将空值插入 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 设置为 false 的列中时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor">
      <summary>初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.OperationAbortedException">
      <summary>当用户中止正在执行的某操作时，将引发此异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.ParameterDirection">
      <summary>指定查询内的有关 <see cref="T:System.Data.DataSet" /> 的参数的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.ParameterDirection.Input">
      <summary>参数是输入参数。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.InputOutput">
      <summary>参数既能输入，也能输出。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Output">
      <summary>参数是输出参数。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.ReturnValue">
      <summary>参数表示诸如存储过程、内置函数或用户定义函数之类的操作的返回值。</summary>
    </member>
    <member name="T:System.Data.PropertyAttributes">
      <summary>指定属性的特性。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.PropertyAttributes.NotSupported">
      <summary>提供程序不支持该属性。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.Optional">
      <summary>在初始化数据源之前，用户不必为此属性指定值。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.Read">
      <summary>用户可以读取该属性。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.Required">
      <summary>在初始化数据源之前，用户必须为此属性指定值。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.Write">
      <summary>用户可以写入该属性。</summary>
    </member>
    <member name="T:System.Data.PropertyCollection">
      <summary>表示可以添加到 <see cref="T:System.Data.DataColumn" />、<see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" /> 的属性的集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.PropertyCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.PropertyCollection" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所需的数据。</param>
      <param name="context">给定序列化流的源和目的地。</param>
    </member>
    <member name="M:System.Data.PropertyCollection.Clone">
      <summary>创建 <see cref="T:System.Data.PropertyCollection" /> 对象的浅表副本。</summary>
      <returns>返回 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.PropertyCollection" /> 对象的浅表副本。</returns>
    </member>
    <member name="T:System.Data.ReadOnlyException">
      <summary>表示在尝试更改只读列的值时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.RowNotInTableException">
      <summary>表示尝试在不位于 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataRow" /> 上执行操作时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor">
      <summary>初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.Rule">
      <summary>指示强制执行 <see cref="T:System.Data.ForeignKeyConstraint" /> 时发生的操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Rule.Cascade">
      <summary>删除或更新相关的行。 这是默认设置。</summary>
    </member>
    <member name="F:System.Data.Rule.None">
      <summary>不对相关的行采取任何操作。</summary>
    </member>
    <member name="F:System.Data.Rule.SetDefault">
      <summary>将相关的行中的值设置为 <see cref="P:System.Data.DataColumn.DefaultValue" /> 属性中包含的值。</summary>
    </member>
    <member name="F:System.Data.Rule.SetNull">
      <summary>将相关的行中的值设置为 DBNull。</summary>
    </member>
    <member name="T:System.Data.SchemaSerializationMode">
      <summary>指示类型化 <see cref="T:System.Data.DataSet" /> 的架构序列化模式。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.ExcludeSchema">
      <summary>跳过类型化 <see cref="T:System.Data.DataSet" /> 的架构序列化。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.IncludeSchema">
      <summary>包括类型化 <see cref="T:System.Data.DataSet" /> 的架构序列化。 默认值。</summary>
    </member>
    <member name="T:System.Data.SchemaType">
      <summary>指定在执行 <see cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 操作时如何处理现有的架构映射。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SchemaType.Mapped">
      <summary>将任何现有的表映射应用到传入架构。 用转换的架构配置 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Source">
      <summary>忽略 DataAdapter 上的任何表映射。 使用传入架构配置 <see cref="T:System.Data.DataSet" />，而不应用任何转换。</summary>
    </member>
    <member name="T:System.Data.SerializationFormat">
      <summary>确定 <see cref="T:System.Data.DataSet" /> 的序列化格式。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SerializationFormat.Binary">
      <summary>作为二进制内容序列化。 仅可在 ADO.NET 2.0 中使用。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Xml">
      <summary>作为 XML 内容序列化。 默认值。</summary>
    </member>
    <member name="T:System.Data.SqlDbType">
      <summary>指定要用于 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中的字段和属性的 SQL Server 特定的数据类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlDbType.BigInt">
      <summary>
        <see cref="T:System.Int64" />. 64 位的有符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Binary">
      <summary>
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。 二进制数据的固定长度流，范围在 1 到 8,000 个字节之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Bit">
      <summary>
        <see cref="T:System.Boolean" />. 无符号数值，可以是 0、1 或 null。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Char">
      <summary>
        <see cref="T:System.String" />. 非 Unicode 字符的固定长度流，范围在 1 到 8,000 个字符之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Date">
      <summary>日期数据，值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime">
      <summary>
        <see cref="T:System.DateTime" />. 日期和时间数据，值范围从 1753 年 1 月 1 日到 9999 年 12 月 31 日，精度为 3.33 毫秒。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime2">
      <summary>日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTimeOffset">
      <summary>显示时区的日期和时间数据。 日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。 时区值范围从 -14:00 到 +14:00。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Decimal">
      <summary>
        <see cref="T:System.Decimal" />. 固定精度和小数位数数值，在 -10 38 -1 和 10 38 -1 之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Float">
      <summary>
        <see cref="T:System.Double" />. -1.79E +308 到 1.79E +308 范围内的浮点数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Image">
      <summary>
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。 二进制数据的可变长度流，范围在 0 到 2 31 -1（即 2,147,483,647）字节之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Int">
      <summary>
        <see cref="T:System.Int32" />. 32 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Money">
      <summary>
        <see cref="T:System.Decimal" />. 货币值，范围在 -2 63（即 -922,337,203,685,477.5808）到 2 63 -1（即 +922,337,203,685,477.5807）之间，精度为千分之十个货币单位。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NChar">
      <summary>
        <see cref="T:System.String" />. Unicode 字符的固定长度流，范围在 1 到 4,000 个字符之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NText">
      <summary>
        <see cref="T:System.String" />. Unicode 数据的可变长度流，最大长度为 2 30 - 1（即 1,073,741,823）个字符。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NVarChar">
      <summary>
        <see cref="T:System.String" />. Unicode 字符的可变长度流，范围在 1 到 4,000 个字符之间。 如果字符串大于 4,000 个字符，隐式转换会失败。 在使用比 4,000 个字符更长的字符串时，请显式设置对象。 当数据库列为 nvarchar(max) 时，使用 <see cref="F:System.Data.SqlDbType.NVarChar" /> 。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Real">
      <summary>
        <see cref="T:System.Single" />. -3.40E +38 到 3.40E +38 范围内的浮点数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallDateTime">
      <summary>
        <see cref="T:System.DateTime" />. 日期和时间数据，值范围从 1900 年 1 月 1 日到 2079 年 6 月 6 日，精度为 1 分钟。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallInt">
      <summary>
        <see cref="T:System.Int16" />. 16 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallMoney">
      <summary>
        <see cref="T:System.Decimal" />. 货币值，范围在 -214,748.3648 到 +214,748.3647 之间，精度为千分之十个货币单位。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Structured">
      <summary>指定表值参数中包含的构造数据的特殊数据类型。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Text">
      <summary>
        <see cref="T:System.String" />. 非 Unicode 数据的可变长度流，最大长度为 2 31 -1（即 2,147,483,647）个字符。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Time">
      <summary>基于 24 小时制的时间数据。 时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。 对应于 SQL Server time 值。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Timestamp">
      <summary>
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。 自动生成的二进制数字，它们保证在数据库中是唯一的。 timestamp 通常用作为表行添加版本戳的机制。 存储大小为 8 字节。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.TinyInt">
      <summary>
        <see cref="T:System.Byte" />. 8 位无符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Udt">
      <summary>SQL Server 用户定义类型 (UDT)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.UniqueIdentifier">
      <summary>
        <see cref="T:System.Guid" />. 全局唯一标识符（或 GUID）。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarBinary">
      <summary>
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。 二进制数据的可变长度流，范围在 1 到 8,000 个字节之间。 如果字节数组大于 8,000 个字节，隐式转换会失败。 在使用比 8,000 个字节大的字节数组时，请显式设置对象。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarChar">
      <summary>
        <see cref="T:System.String" />. 非 Unicode 字符的可变长度流，范围在 1 到 8,000 个字符之间。 当数据库列为 varchar(max) 时，使用 <see cref="F:System.Data.SqlDbType.VarChar" /> 。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Variant">
      <summary>
        <see cref="T:System.Object" />. 特殊数据类型，可以包含数值、字符串、二进制或日期数据，以及 SQL Server 值 Empty 和 Null，后两个值在未声明其他类型的情况下采用。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Xml">
      <summary>XML 值。 使用 <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" /> 方法或 <see cref="P:System.Data.SqlTypes.SqlXml.Value" /> 属性获取字符串形式的 XML，或通过调用 <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" /> 方法获取 <see cref="T:System.Xml.XmlReader" /> 形式的 XML。</summary>
    </member>
    <member name="T:System.Data.StateChangeEventArgs">
      <summary>为 .NET Framework 数据提供程序的状态更改事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)">
      <summary>在给定对象的原始状态和当前状态的情况下，初始化 <see cref="T:System.Data.StateChangeEventArgs" /> 类的新实例。</summary>
      <param name="originalState">
        <see cref="T:System.Data.ConnectionState" /> 值之一。</param>
      <param name="currentState">
        <see cref="T:System.Data.ConnectionState" /> 值之一。</param>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.CurrentState">
      <summary>获取连接的新状态。 在激发该事件时，连接对象将处于新状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.OriginalState">
      <summary>获取连接的原始状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.StateChangeEventHandler">
      <summary>表示将处理 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.StatementCompletedEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件提供附加信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)">
      <summary>创建 <see cref="T:System.Data.StatementCompletedEventArgs" /> 类的新实例。</summary>
      <param name="recordCount">指示受导致 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件发生的语句影响的行数。</param>
    </member>
    <member name="P:System.Data.StatementCompletedEventArgs.RecordCount">
      <summary>指示受导致 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件发生的语句影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.StatementCompletedEventHandler">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件的事件处理程序的委托类型。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件的数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.StatementType">
      <summary>指定由 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />、<see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />、<see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" /> 或 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> 类使用的 SQL 查询的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.StatementType.Batch">
      <summary>SQL 查询，它是批处理语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Delete">
      <summary>SQL 查询，它是 DELETE 语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Insert">
      <summary>SQL 查询，它是 INSERT 语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Select">
      <summary>SQL 查询，它是 SELECT 语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Update">
      <summary>SQL 查询，它是 UPDATE 语句。</summary>
    </member>
    <member name="T:System.Data.StrongTypingException">
      <summary>在用户访问 DBNull 值时，强类型 <see cref="T:System.Data.DataSet" /> 引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor">
      <summary>初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和内部异常初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
      <param name="innerException">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.SyntaxErrorException">
      <summary>表示在 <see cref="T:System.Data.DataColumn" /> 的 <see cref="P:System.Data.DataColumn.Expression" /> 属性包含语法错误时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
      <param name="info">将对象序列化或反序列化所需的数据。</param>
      <param name="context">特定序列化流的源和目标。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.TypedDataSetGenerator">
      <summary>用于创建强类型 <see cref="T:System.Data.DataSet" />。</summary>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Data.TypedDataSetGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.TypedDataSetGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.TypedDataSetGenerator.Generate(System.Data.DataSet,System.CodeDom.CodeNamespace,System.CodeDom.Compiler.ICodeGenerator)">
      <summary>生成强类型 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">源 <see cref="T:System.Data.DataSet" />，它为类型化 <see cref="T:System.Data.DataSet" /> 指定元数据。</param>
      <param name="codeNamespace">为类型化 <see cref="T:System.Data.DataSet" /> 提供目标命名空间的命名空间。</param>
      <param name="codeGen">用于创建类型化 <see cref="T:System.Data.DataSet" /> 的生成器。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.TypedDataSetGenerator.GenerateIdName(System.String,System.CodeDom.Compiler.ICodeGenerator)">
      <summary>转换有效类型化 <see cref="T:System.Data.DataSet" /> 名称中的字符串。</summary>
      <returns>一个字符串，它是转换后的名称。</returns>
      <param name="name">要转换为有效类型化 <see cref="T:System.Data.DataSet" /> 名称的源名称。</param>
      <param name="codeGen">用于执行转换的生成器。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.TypedDataSetGeneratorException">
      <summary>当生成强类型 <see cref="T:System.Data.DataSet" /> 的过程中发生名称冲突时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor">
      <summary>初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor(System.Collections.ArrayList)">
      <summary>初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类的新实例。</summary>
      <param name="list">
        <see cref="T:System.Collections.ArrayList" /> 对象，包含动态的异常列表。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化信息和流上下文初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor(System.String,System.Exception)">
      <summary>使用指定的字符串和内部异常初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
      <param name="innerException">对内部异常的引用。</param>
    </member>
    <member name="P:System.Data.TypedDataSetGeneratorException.ErrorList">
      <summary>获取生成的错误的动态列表。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 ISerializable 接口并返回序列化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 对象所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.UniqueConstraint">
      <summary>表示对一组列的限制，列中的所有值必须是唯一的。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn)">
      <summary>用指定的 <see cref="T:System.Data.DataColumn" /> 初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="column">要约束的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn,System.Boolean)">
      <summary>用要约束的 <see cref="T:System.Data.DataColumn" /> 和指定约束是否为主键的值，初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="column">要约束的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[])">
      <summary>用给定的 <see cref="T:System.Data.DataColumn" /> 对象的数组初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="columns">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[],System.Boolean)">
      <summary>用要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组和指定约束是否为主键的值，初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="columns">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn)">
      <summary>使用指定的名称和 <see cref="T:System.Data.DataColumn" /> 初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="column">要约束的 <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>用指定名称、要约束的 <see cref="T:System.Data.DataColumn" /> 和指定约束是否为主键的值，初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="column">要约束的 <see cref="T:System.Data.DataColumn" />。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[])">
      <summary>用指定的名称和 <see cref="T:System.Data.DataColumn" /> 对象的数组初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="columns">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>用指定名称、要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组和指定约束是否为主键的值，初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="columns">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.String[],System.Boolean)">
      <summary>用指定名称、要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组和指定约束是否为主键的值，初始化 <see cref="T:System.Data.UniqueConstraint" /> 类的新实例。</summary>
      <param name="name">约束的名称。</param>
      <param name="columnNames">要约束的 <see cref="T:System.Data.DataColumn" /> 对象的数组。</param>
      <param name="isPrimaryKey">若要指示约束是主键，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Data.UniqueConstraint.Columns">
      <summary>获取此约束影响的列的数组。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象的数组。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.UniqueConstraint.Equals(System.Object)">
      <summary>将此约束与第二个约束比较以确定两个约束是否相同。</summary>
      <returns>如果约束相等，则为 true；否则为 false。</returns>
      <param name="key2">此 <see cref="T:System.Data.UniqueConstraint" /> 将与之比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.UniqueConstraint.GetHashCode">
      <summary>获取 <see cref="T:System.Data.UniqueConstraint" /> 对象的此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.UniqueConstraint.IsPrimaryKey">
      <summary>获取一个值，该值指示约束是否在主键上。</summary>
      <returns>如果约束在主键上，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.UniqueConstraint.Table">
      <summary>获取此约束所属的表。</summary>
      <returns>此约束所属的 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.UpdateRowSource">
      <summary>指定如何将查询命令结果应用到正在更新的行。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.UpdateRowSource.Both">
      <summary>将输出参数和第一个返回行都映射到 <see cref="T:System.Data.DataSet" /> 中的已更改的行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.FirstReturnedRecord">
      <summary>将第一个返回行中的数据映射到 <see cref="T:System.Data.DataSet" /> 中的已更改的行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.None">
      <summary>忽略任何返回的参数或行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.OutputParameters">
      <summary>将输出参数映射到 <see cref="T:System.Data.DataSet" /> 中的已更改的行。</summary>
    </member>
    <member name="T:System.Data.UpdateStatus">
      <summary>指定在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 期间对当前行和其余行采取的操作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.UpdateStatus.Continue">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 应该继续处理行。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.ErrorsOccurred">
      <summary>事件处理程序报告：应将更新作为错误对待。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipAllRemainingRows">
      <summary>将不更新当前行和所有其余行。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipCurrentRow">
      <summary>将不更新当前行。</summary>
    </member>
    <member name="T:System.Data.VersionNotFoundException">
      <summary>表示在尝试返回已经删除的 <see cref="T:System.Data.DataRow" /> 版本时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化某个对象所需的数据。</param>
      <param name="context">指定序列化流的源和目的地的说明。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
      <param name="s">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="T:System.Data.XmlReadMode">
      <summary>指定如何将 XML 数据和关系架构读入 <see cref="T:System.Data.DataSet" />。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.XmlReadMode.Auto">
      <summary>默认值。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.DiffGram">
      <summary>读取 DiffGram，将 DiffGram 中的更改应用到 <see cref="T:System.Data.DataSet" />。 语义与 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作的语义相同。 与 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作一样，保留 <see cref="P:System.Data.DataRow.RowState" /> 值。 向 <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> 的 DiffGram 输入只能使用 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 中的 DiffGram 输出来获得。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Fragment">
      <summary>针对 SQL Server 的实例读取 XML 片段（例如，通过执行 FOR XML 查询生成的 XML 片段）。 当 <see cref="T:System.Data.XmlReadMode" /> 设置为 Fragment 时，默认命名空间作为内联架构来读取。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.IgnoreSchema">
      <summary>忽略任何内联架构并将数据读入现有的 <see cref="T:System.Data.DataSet" /> 架构。 如果任何数据与现有的架构不匹配，就会将这些数据丢弃（包括为 <see cref="T:System.Data.DataSet" /> 定义的不同命名空间中的数据）。 如果数据是 DiffGram，IgnoreSchema 与 DiffGram 具有相同的功能。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferSchema">
      <summary>忽略任何内联架构，从数据推断出架构并加载数据。 如果 <see cref="T:System.Data.DataSet" /> 已经包含架构，就通过添加新表或者向现有的表添加列，来扩展当前架构。 如果推断的表已经存在但是具有不同的命名空间，或者如果推断的列中有一些与现有的列冲突，则会引发异常。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferTypedSchema">
      <summary>忽略任何内联架构，从数据推断出强类型架构并加载数据。 如果无法从数据推断出类型，则会将其解释为字符串数据。 如果 <see cref="T:System.Data.DataSet" /> 已经包含架构，就通过添加新表或者通过向现有的表中添加列来扩展当前架构。 如果推断的表已经存在但是具有不同的命名空间，或者如果推断的列中有一些与现有的列冲突，则会引发异常。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.ReadSchema">
      <summary>读取任何内联架构并加载数据。 如果 <see cref="T:System.Data.DataSet" /> 已经包含架构，则可以将新表添加到架构中，但是如果内联架构中的任何表在 <see cref="T:System.Data.DataSet" /> 中已经存在，则会引发异常。</summary>
    </member>
    <member name="T:System.Data.XmlWriteMode">
      <summary>指定如何从 <see cref="T:System.Data.DataSet" /> 写入 XML 数据和关系架构。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.XmlWriteMode.DiffGram">
      <summary>作为 DiffGram 写入整个 <see cref="T:System.Data.DataSet" />，包括原始值和当前值。 若要生成只包含已更改的值的 DiffGram，请调用 <see cref="M:System.Data.DataSet.GetChanges" />，然后在返回的 <see cref="T:System.Data.DataSet" /> 上作为 DiffGram 调用 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.IgnoreSchema">
      <summary>以 XML 数据形式写入 <see cref="T:System.Data.DataSet" /> 的当前内容，不带 XSD 架构。 如果无数据加载到 <see cref="T:System.Data.DataSet" /> 中，则不写入任何内容。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.WriteSchema">
      <summary>以 XML 数据形式写入 <see cref="T:System.Data.DataSet" /> 的当前内容，以关系结构作为内联 XSD 架构。 如果 <see cref="T:System.Data.DataSet" /> 只有架构而无数据，那么只写入内联架构。 如果 <see cref="T:System.Data.DataSet" /> 没有当前架构，则不写入任何内容。</summary>
    </member>
    <member name="T:System.Data.Common.CatalogLocation">
      <summary>指示目录名称在文本命令的限定表名中的位置。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.End">
      <summary>指示目录名称的位置位于文本命令的完全限定表名中的架构部分之后。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.Start">
      <summary>指示目录名称的位置位于文本命令的完全限定表名中的架构部分之前。</summary>
    </member>
    <member name="T:System.Data.Common.DataAdapter">
      <summary>表示一组 SQL 命令和一个数据库连接，它们用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)">
      <summary>从同一类型的现有对象中初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。</summary>
      <param name="from">用于创建新 <see cref="T:System.Data.Common.DataAdapter" /> 的 <see cref="T:System.Data.Common.DataAdapter" /> 对象。</param>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill">
      <summary>获取或设置一个值，该值指示在任何 Fill 操作过程中，在将 <see cref="M:System.Data.DataRow.AcceptChanges" /> 添加到 <see cref="T:System.Data.DataTable" /> 之后是否在 <see cref="T:System.Data.DataRow" /> 上调用它。</summary>
      <returns>如果在 <see cref="T:System.Data.DataRow" /> 上调用 <see cref="M:System.Data.DataRow.AcceptChanges" />，则为 true；否则为 false。 默认值为 true。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate">
      <summary>获取或设置在 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" /> 期间是否调用 <see cref="M:System.Data.DataRow.AcceptChanges" />。</summary>
      <returns>如果在 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" /> 期间调用 <see cref="M:System.Data.DataRow.AcceptChanges" />，则为 true；否则为 false。 默认值为 true。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CloneInternals">
      <summary>创建此 <see cref="T:System.Data.Common.DataAdapter" /> 实例的一个副本。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataAdapter" /> 的克隆实例。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ContinueUpdateOnError">
      <summary>获取或设置一个值，该值指定在行更新过程中遇到错误时是否生成异常。</summary>
      <returns>如果要继续更新而不生成异常，则为 true，否则为 false。 默认值为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CreateTableMappings">
      <summary>创建一个新的 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
      <returns>新的表映射集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行以与数据源中的行匹配。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataSet">一个要用记录填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">一个字符串，指示源表的名称。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
      <param name="startRecord">起始记录的从零开始的索引。</param>
      <param name="maxRecords">指示最大记录数的整数。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)">
      <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行以与使用 <see cref="T:System.Data.DataTable" /> 名称和指定的 <see cref="T:System.Data.IDataReader" /> 的数据源中的行匹配。</summary>
      <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataTable">一个要用记录填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Data.DataTable" /> 对象集合的指定范围中添加或刷新行以与数据源中的行匹配。</summary>
      <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataTables">要用记录填充的 <see cref="T:System.Data.DataTable" /> 对象的集合。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
      <param name="startRecord">起始记录的从零开始的索引。</param>
      <param name="maxRecords">指示最大记录数的整数。</param>
    </member>
    <member name="E:System.Data.Common.DataAdapter.FillError">
      <summary>在填充操作过程中出现错误时返回。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DataAdapter.FillLoadOption">
      <summary>获取或设置 <see cref="T:System.Data.LoadOption" />，后者确定适配器如何从 <see cref="T:System.Data.Common.DbDataReader" /> 中填充 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个 <see cref="T:System.Data.LoadOption" /> 值。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
      <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
      <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)">
      <summary>向指定的 <see cref="T:System.Data.DataSet" /> 添加一个 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>对添加到 <see cref="T:System.Data.DataSet" /> 中的 <see cref="T:System.Data.DataTable" /> 对象集合的引用。</returns>
      <param name="dataSet">要从 <see cref="T:System.Data.IDataReader" /> 填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="dataReader">填充 <see cref="T:System.Data.DataTable" /> 时要用作数据源的 <see cref="T:System.Data.IDataReader" />。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)">
      <summary>向指定的 <see cref="T:System.Data.DataSet" /> 添加一个 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
      <param name="dataTable">要从 <see cref="T:System.Data.IDataReader" /> 填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="dataReader">填充 <see cref="T:System.Data.DataTable" /> 时要用作数据源的 <see cref="T:System.Data.IDataReader" />。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.GetFillParameters">
      <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataAdapter.HasTableMappings">
      <summary>指示是否已创建了一个 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
      <returns>如果已创建 <see cref="T:System.Data.Common.DataTableMappingCollection" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingMappingAction">
      <summary>确定传入数据没有匹配的表或列时需要执行的操作。</summary>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。 默认值为 Passthrough。</returns>
      <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingMappingAction" /> 值之一。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingSchemaAction">
      <summary>确定现有 <see cref="T:System.Data.DataSet" /> 架构与传入数据不匹配时需要执行的操作。</summary>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。 默认值为 Add。</returns>
      <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)">
      <summary>当 Fill 过程中出现错误时调用。</summary>
      <param name="value">
        <see cref="T:System.Data.FillErrorEventArgs" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ResetFillLoadOption">
      <summary>将 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 重置为默认状态，并使 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" /> 接受 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes">
      <summary>获取或设置 Fill 方法是应当返回提供程序特定的值，还是返回公用的符合 CLS 的值。</summary>
      <returns>如果 Fill 方法应返回特定于提供程序的值，则为 true；否则如果返回常用的符合 CLS 的值，则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill">
      <summary>确定是否应保持 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 属性。</summary>
      <returns>如果保持 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 属性，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption">
      <summary>确定是否应保持 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 属性。</summary>
      <returns>如果保持 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 属性，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings">
      <summary>确定一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象是否存在，并且它们是否应该是持久的。</summary>
      <returns>如果存在一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings">
      <summary>指示如何将源表映射到数据集表。</summary>
      <returns>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值是一个空集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.TableMappings">
      <summary>获取一个集合，它提供源表和 <see cref="T:System.Data.DataTable" /> 之间的主映射。</summary>
      <returns>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值是一个空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)">
      <summary>从名为“Table”的 <see cref="T:System.Data.DataTable" /> 为指定的 <see cref="T:System.Data.DataSet" /> 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
      <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Common.DataColumnMapping">
      <summary>包含从 <see cref="T:System.Data.Common.DataAdapter" /> 继承的对象的一般列映射。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor(System.String,System.String)">
      <summary>使用指定的源列名称和要映射到的 <see cref="T:System.Data.DataSet" /> 列名初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 类的新实例。</summary>
      <param name="sourceColumn">数据源中区分大小写的列名。</param>
      <param name="dataSetColumn">
        <see cref="T:System.Data.DataSet" /> 中要映射到的列名（该名称不区分大小写）。</param>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.DataSetColumn">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 中要映射到的列的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中要映射到的列的名称。 该名称不区分大小写。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>使用 <see cref="T:System.Data.MissingSchemaAction" /> 和 <see cref="P:System.Data.Common.DataColumnMapping.DataSetColumn" /> 属性从给定的 <see cref="T:System.Data.DataTable" /> 获取 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>数据列。</returns>
      <param name="dataTable">从中获取列的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="dataType">数据列的 <see cref="T:System.Type" />。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.String,System.String,System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)" /> 的静态版本，可以在不实例化 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的情况下调用。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象。</returns>
      <param name="sourceColumn">数据源中区分大小写的列名。</param>
      <param name="dataSetColumn">
        <see cref="T:System.Data.DataSet" /> 中要映射到的列名（该名称不区分大小写）。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的一个实例。</param>
      <param name="dataType">正被映射的列的数据类型。</param>
      <param name="schemaAction">确定现有 <see cref="T:System.Data.DataSet" /> 架构与传入数据不匹配时需要执行的操作。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.SourceColumn">
      <summary>获取或设置数据源中从其映射的列的名称。 该名称区分大小写。</summary>
      <returns>数据源中列的区分大小写的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>当前对象的副本。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.ToString">
      <summary>将当前的 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名称转换为字符串。</summary>
      <returns>当前的 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名称作为字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.DataColumnMappingCollection">
      <summary>包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.#ctor">
      <summary>创建一个空的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.Object)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象添加到集合中。</summary>
      <returns>已添加到集合中的 DataColumnMapping 对象的索引。</returns>
      <param name="value">要添加到集合中的 DataColumnMapping 对象。</param>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.String,System.String)">
      <summary>当给定源列名称和 <see cref="T:System.Data.DataSet" /> 列名时，将 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象添加到集合中。</summary>
      <returns>已添加到集合中的 DataColumnMapping 对象。</returns>
      <param name="sourceColumn">要映射到的源列的区分大小写的名称。</param>
      <param name="dataSetColumn">要映射到的 <see cref="T:System.Data.DataSet" /> 列的名称（该名称不区分大小写）。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Array)">
      <summary>将指定 <see cref="T:System.Array" /> 的元素复制到集合末尾。</summary>
      <param name="values">要添加到集合中的 <see cref="T:System.Array" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Data.Common.DataColumnMapping[])">
      <summary>将指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组的元素复制到集合末尾。</summary>
      <param name="values">要添加到集合中的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示集合中是否存在具有给定 <see cref="T:System.Object" /> 的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <returns>如果集合包含指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象，则为 true；否则为 false。</returns>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有给定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <returns>如果集合包含具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的区分大小写的源列名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的元素复制到指定的数组。</summary>
      <param name="array">要将 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 元素复制到其中的 <see cref="T:System.Array" />。</param>
      <param name="index">数组的起始索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Data.Common.DataColumnMapping[],System.Int32)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的元素复制到指定的 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组。</summary>
      <param name="array">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 元素要复制到的 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Count">
      <summary>获取集合中的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象数。</summary>
      <returns>集合中的项数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>获取具有指定 <see cref="T:System.Data.DataSet" /> 列名的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <returns>具有指定 <see cref="T:System.Data.DataSet" /> 列名的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
      <param name="value">要查找的 <see cref="T:System.Data.DataSet" /> 列的名称（该名称不区分大小写）。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection,System.String,System.Data.MissingMappingAction)">
      <summary>给指定的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />、源列名称和 <see cref="T:System.Data.MissingMappingAction" /> 获取一个 <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="sourceColumn">要查找的区分大小写的源列名称。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 Error，并且未指定任何映射。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetDataColumn(System.Data.Common.DataColumnMappingCollection,System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>一个静态方法，它返回未实例化的 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象的 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象。</returns>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="sourceColumn">数据源中区分大小写的列名。</param>
      <param name="dataType">正被映射的列的数据类型。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的一个实例。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <param name="schemaAction">确定现有 <see cref="T:System.Data.DataSet" /> 架构与传入数据不匹配时需要执行的操作。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetEnumerator">
      <summary>获取可循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.Object)">
      <summary>获取指定的 <see cref="T:System.Object" />（它是 <see cref="T:System.Data.Common.DataColumnMapping" />）在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Object" />（它是 <see cref="T:System.Data.Common.DataColumnMapping" />）在集合中从零开始的位置。</returns>
      <param name="value">一个 <see cref="T:System.Object" />，它是要查找的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.String)">
      <summary>获取具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 的位置。</summary>
      <returns>具有指定的区分大小写的源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 从零开始的位置。</returns>
      <param name="sourceColumn">源列的区分大小写的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOfDataSetColumn(System.String)">
      <summary>获取具有给定 <see cref="T:System.Data.DataSet" /> 列名的指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 的位置。</summary>
      <returns>具有给定 DataSet 列名的指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 的从零开始的位置；或者如果在集合中不存在 DataColumnMapping 对象，则为 -1。</returns>
      <param name="dataSetColumn">要查找的数据集列的名称（该名称不区分大小写）。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Data.Common.DataColumnMapping)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象插入 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 中的指定索引位置。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Object)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象插入 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 中的指定索引位置。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
      <param name="index">要查找的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.String)">
      <summary>获取或设置具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <returns>具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
      <param name="sourceColumn">源列的区分大小写的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Data.Common.DataColumnMapping)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Object)">
      <summary>从集合中移除 <see cref="T:System.Object" />，它是一个 <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <param name="value">
        <see cref="T:System.Object" />，它是要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <exception cref="T:System.InvalidCastException">指定的对象不是一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <exception cref="T:System.ArgumentException">指定的对象不在集合中。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除具有指定索引的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">没有具有指定索引的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.String)">
      <summary>从集合中移除具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="sourceColumn">区分大小写的源列名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">没有具有指定源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 的大小是否是固定的。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Add(System.String,System.String)">
      <summary>使用源列名和 <see cref="T:System.Data.DataSet" /> 列名将 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象添加到 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
      <returns>已添加到集合中的 ColumnMapping 对象。</returns>
      <param name="sourceColumnName">源列的区分大小写的名称。</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 列的名称。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#GetByDataSetColumn(System.String)">
      <summary>获取具有指定的 <see cref="T:System.Data.DataSet" /> 列名的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <returns>具有指定的 <see cref="T:System.Data.DataSet" /> 列名的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
      <param name="dataSetColumnName">要查找的 <see cref="T:System.Data.DataSet" /> 列的名称（该名称不区分大小写）。</param>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Item(System.String)">
      <summary>获取或设置具有指定 SourceColumn 名称的 <see cref="T:System.Data.IColumnMapping" /> 对象。</summary>
      <returns>具有指定 SourceColumn 名称的 IColumnMapping 对象。</returns>
      <param name="index">元素的索引。</param>
    </member>
    <member name="T:System.Data.Common.DataTableMapping">
      <summary>包含源表和 <see cref="T:System.Data.DataTable" /> 之间的映射关系的说明。 当填充 <see cref="T:System.Data.DataSet" /> 时，<see cref="T:System.Data.Common.DataAdapter" /> 就会使用该类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String)">
      <summary>当给定源表名称和 <see cref="T:System.Data.DataTable" /> 名称时，用源初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类的新实例。</summary>
      <param name="sourceTable">数据源中区分大小写的源表名称。</param>
      <param name="dataSetTable">
        <see cref="T:System.Data.DataSet" /> 中要映射到的表的名称。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String,System.Data.Common.DataColumnMapping[])">
      <summary>当给定源表名称、<see cref="T:System.Data.DataTable" /> 名称以及 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的数组时，初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类的新实例。</summary>
      <param name="sourceTable">数据源中区分大小写的源表名称。</param>
      <param name="dataSetTable">
        <see cref="T:System.Data.DataSet" /> 中要映射到的表的名称。</param>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的数组。</param>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.ColumnMappings">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
      <returns>一个数据列映射集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.DataSetTable">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 中的表名称。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中的表名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetColumnMappingBySchemaAction(System.String,System.Data.MissingMappingAction)">
      <summary>使用指定的 <see cref="T:System.Data.MissingMappingAction" /> 值和 <see cref="T:System.Data.DataColumn" /> 名称从指定的 <see cref="T:System.Data.DataTable" /> 中获取 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>数据列。</returns>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名称。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 Error，并且未指定任何映射。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataColumn(System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>返回给定列名称的 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 对象。</returns>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名称。</param>
      <param name="dataType">
        <paramref name="sourceColumn" /> 的数据类型。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataSet" /> 中要映射到的表的名称。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataTableBySchemaAction(System.Data.DataSet,System.Data.MissingSchemaAction)">
      <summary>使用指定的 <see cref="T:System.Data.MissingSchemaAction" /> 值获取指定 <see cref="T:System.Data.DataSet" /> 的当前 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>数据表。</returns>
      <param name="dataSet">要从其中获取 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.SourceTable">
      <summary>获取或设置数据源中区分大小写的源表名称。</summary>
      <returns>数据源中区分大小写的源表名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.System#Data#ITableMapping#ColumnMappings">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
      <returns>一个数据列映射集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为当前实例的副本的新对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.ToString">
      <summary>将当前的 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名称转换为字符串。</summary>
      <returns>当前的 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名称作为字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.DataTableMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象的集合。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 类的新实例。 此新实例是空的，即它尚未包含任何 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.Object)">
      <summary>添加一个 <see cref="T:System.Object" />，它是集合的表映射。</summary>
      <returns>添加到集合中的 DataTableMapping 对象的索引。</returns>
      <param name="value">要添加到集合中的 DataTableMapping 对象。</param>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.String,System.String)">
      <summary>当给定源表名称和 <see cref="T:System.Data.DataSet" /> 表名称时，将 <see cref="T:System.Data.Common.DataTableMapping" /> 对象添加到集合中。</summary>
      <returns>已添加到集合中的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
      <param name="sourceTable">要从中映射的源表的区分大小写的名称。</param>
      <param name="dataSetTable">要映射到的 <see cref="T:System.Data.DataSet" /> 表的名称（该名称不区分大小写）。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Array)">
      <summary>将指定 <see cref="T:System.Array" /> 的元素复制到集合末尾。</summary>
      <param name="values">要添加到集合的值的 <see cref="T:System.Array" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Data.Common.DataTableMapping[])">
      <summary>将指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 数组的元素复制到集合末尾。</summary>
      <param name="values">要添加到集合中的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示集合中是否存在给定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <returns>如果此集合包含指定的 <see cref="T:System.Data.Common.DataTableMapping" />，则为 true；否则为 false。</returns>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <returns>如果该集合包含具有此源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象，则为 true；否则为 false。</returns>
      <param name="value">包含 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的区分大小写的源表名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 的元素复制到指定的数组。</summary>
      <param name="array">要将 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 元素复制到其中的 <see cref="T:System.Array" />。</param>
      <param name="index">数组的起始索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Data.Common.DataTableMapping[],System.Int32)">
      <summary>将 <see cref="T:System.Data.Common.DataTableMapping" /> 的元素复制到指定的数组。</summary>
      <param name="array">要将 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 元素复制到的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
      <param name="index">数组的起始索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Count">
      <summary>获取集合中的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象数。</summary>
      <returns>集合中的 DataTableMapping 对象数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetByDataSetTable(System.String)">
      <summary>获取具有指定 <see cref="T:System.Data.DataSet" /> 表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <returns>具有指定的 <see cref="T:System.Data.DataSet" /> 表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
      <param name="dataSetTable">要查找的 <see cref="T:System.Data.DataSet" /> 表的名称（该名称不区分大小写）。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetEnumerator">
      <summary>获取可循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection,System.String,System.String,System.Data.MissingMappingAction)">
      <summary>使用给定的 <see cref="T:System.Data.MissingMappingAction" />，获取具有指定源表名称和 <see cref="T:System.Data.DataSet" /> 表名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
      <param name="tableMappings">要搜索的 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 集合。</param>
      <param name="sourceTable">已映射的源表的区分大小写的名称。</param>
      <param name="dataSetTable">已映射的 <see cref="T:System.Data.DataSet" /> 表的名称（该名称不区分大小写）。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 Error，并且未指定任何映射。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.Object)">
      <summary>获取指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象在集合中从零开始的位置。</returns>
      <param name="value">一个 <see cref="T:System.Object" />，它是要查找的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.String)">
      <summary>获取具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的位置。</summary>
      <returns>具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的位置。</returns>
      <param name="sourceTable">源表的区分大小写的名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOfDataSetTable(System.String)">
      <summary>获取具有指定 <see cref="T:System.Data.DataSet" /> 表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的位置。</summary>
      <returns>具有给定 <see cref="T:System.Data.DataSet" /> 表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的位置；或者，如果集合中不存在 <see cref="T:System.Data.Common.DataTableMapping" /> 对象，则为 -1。</returns>
      <param name="dataSetTable">要查找的 DataSet 表的名称（该名称不区分大小写）。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Data.Common.DataTableMapping)">
      <summary>将 <see cref="T:System.Data.Common.DataTableMapping" /> 对象插入 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 中的指定索引处。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Object)">
      <summary>将 <see cref="T:System.Data.Common.DataTableMapping" /> 对象插入 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 中的指定索引处。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
      <param name="index">要返回的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.String)">
      <summary>获取或设置具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <returns>具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
      <param name="sourceTable">源表的区分大小写的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Data.Common.DataTableMapping)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">指定的对象不是一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</exception>
      <exception cref="T:System.ArgumentException">指定的对象不在集合中。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引位置的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">具有指定索引的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.String)">
      <summary>从集合中移除具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="sourceTable">要查找的区分大小写的源表名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">具有指定源表名称的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的项。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获取或设置的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Add(System.String,System.String)">
      <summary>向集合添加表映射。</summary>
      <returns>对新映射的 <see cref="T:System.Data.ITableMapping" /> 对象的引用。</returns>
      <param name="sourceTableName">源表的区分大小写的名称。</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> 表的名称。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#GetByDataSetTable(System.String)">
      <summary>获取具有指定的 <see cref="T:System.Data.DataSet" /> 表名称的 TableMapping 对象。</summary>
      <returns>具有指定的 DataSet 表名称的 TableMapping 对象。</returns>
      <param name="dataSetTableName">集合内的 DataSet 表的名称。</param>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Item(System.String)">
      <summary>获取或设置具有指定的 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称的 <see cref="T:System.Data.ITableMapping" /> 的实例。</summary>
      <returns>具有指定的 SourceTable 名称的 <see cref="T:System.Data.ITableMapping" /> 的实例。</returns>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" /> 的 SourceTable 名称。</param>
    </member>
    <member name="T:System.Data.Common.DbCommand">
      <summary>表示要对数据源执行的 SQL 语句或存储过程。 为表示命令的、数据库特有的类提供一个基类。 <see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" /></summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommand.#ctor">
      <summary>构造 <see cref="T:System.Data.Common.DbCommand" /> 对象的实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.Cancel">
      <summary>尝试取消 <see cref="T:System.Data.Common.DbCommand" /> 的执行。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandText">
      <summary>获取或设置针对数据源运行的文本命令。</summary>
      <returns>要执行的文本命令。 默认值为空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandTimeout">
      <summary>获取或设置在终止执行命令的尝试并生成错误之前的等待时间。</summary>
      <returns>等待命令执行的时间（以秒为单位）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandType">
      <summary>指示或指定如何解释 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 属性。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 Text。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbCommand.Connection">
      <summary>获取或设置此 <see cref="T:System.Data.Common.DbCommand" /> 使用的 <see cref="T:System.Data.Common.DbConnection" />。</summary>
      <returns>与数据源的连接。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateDbParameter">
      <summary>创建 <see cref="T:System.Data.Common.DbParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.Common.DbParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbConnection">
      <summary>获取或设置此 <see cref="T:System.Data.Common.DbCommand" /> 使用的 <see cref="T:System.Data.Common.DbConnection" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbParameterCollection">
      <summary>获取 <see cref="T:System.Data.Common.DbParameter" /> 对象的集合。</summary>
      <returns>SQL 语句或存储过程的参数。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbTransaction">
      <summary>获取或设置将在其中执行此 <see cref="T:System.Data.Common.DbCommand" /> 对象的 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />。</summary>
      <returns>要在其中执行 .NET Framework 数据提供程序的 Command 对象的事务。 默认值为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示此命令对象在自定义界面控件中是否可见。</summary>
      <returns>如果该命令对象应在控件中可见，则为 true；否则为 false。 默认值为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>对连接执行命令文本。</summary>
      <returns>表示该操作的任务。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 的一个实例。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>提供程序应执行该方法对 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 重载提供非默认的实现。 默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteReader" /> 方法并返回已完成任务，以便阻止调用线程。 如果传递到已取消的取消标记，则默认实现将返回已取消的任务。 ExecuteReader 引发的异常将通过返回的任务异常属性传递。 该方法可用于请求操作之前接受取消标记。 实现可能会忽略该请求。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="behavior">语句执行和数据检索的选项。</param>
      <param name="cancellationToken">针对取消请求监视的标记。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQuery">
      <summary>对连接对象执行 SQL 语句。</summary>
      <returns>受影响的行数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />的异步版本，针对一个连接对象执行一个 SQL 声明。 通过 CancellationToken.None 调用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 的异步版本。 提供程序应使用合适的实现进行重写。 可选择性忽略取消标记。 默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 方法并返回已完成任务，以便阻止调用线程。 如果传递到已取消的取消标记，则默认实现将返回已取消的任务。<see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />引发的异常将通过任务异常属性传递。 在返回的任务完成前，不要调用 DbCommand 对象的其他方法和属性。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">针对取消请求监视的标记。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader">
      <summary>针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> 执行 <see cref="P:System.Data.Common.DbCommand.CommandText" />，并返回 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> 执行 <see cref="P:System.Data.Common.DbCommand.CommandText" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一返回 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 的异步版本，针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> 和 <see cref="T:System.Data.Common.DbDataReader" /> 执行 <see cref="P:System.Data.Common.DbCommand.CommandText" />。 通过 CancellationToken.None 调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 的异步版本，针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> 和 <see cref="T:System.Data.Common.DbDataReader" /> 执行 <see cref="P:System.Data.Common.DbCommand.CommandText" />。 调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />.</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />.</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <param name="cancellationToken">针对取消请求监视的标记。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 的异步版本，针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> 和 <see cref="T:System.Data.Common.DbDataReader" /> 执行 <see cref="P:System.Data.Common.DbCommand.CommandText" />。 此方法传播有关应取消操作的通知。 调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />.</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">针对取消请求监视的标记。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalar">
      <summary>执行查询，并返回查询所返回的结果集中第一行的第一列。 所有其他的列和行将被忽略。</summary>
      <returns>结果集中第一行的第一列。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 的异步版本，执行查询，并将查询返回的结果集中第一行的第一列返回。 所有其他的列和行将被忽略。 通过 CancellationToken.None 调用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 的异步版本。 提供程序应使用合适的实现进行重写。 可选择性忽略取消标记。 默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 方法并返回已完成任务，以便阻止调用线程。 如果传递到已取消的取消标记，则默认实现将返回已取消的任务。 ExecuteScalar 引发的异常将通过返回的任务异常属性传递。 在返回的任务完成前，不要调用 DbCommand 对象的其他方法和属性。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">针对取消请求监视的标记。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
    </member>
    <member name="P:System.Data.Common.DbCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.Common.DbParameter" /> 对象的集合。 有关参数的更多信息，请参见 配置参数和参数数据类型 (ADO.NET)。</summary>
      <returns>SQL 语句或存储过程的参数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommand.Prepare">
      <summary>在数据源上创建该命令的准备好的（或已编译的）版本。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Connection">
      <summary>获取或设置 <see cref="T:System.Data.IDbCommand" /> 的此实例使用的 <see cref="T:System.Data.IDbConnection" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter">
      <summary>创建 <see cref="T:System.Data.IDbDataParameter" /> 对象的新实例。</summary>
      <returns>IDbDataParameter 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>针对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>针对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 对象。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters">
      <summary>获取 <see cref="T:System.Data.IDataParameterCollection" />。</summary>
      <returns>SQL 语句或存储过程的参数。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction">
      <summary>获取或设置将在其中执行此 <see cref="T:System.Data.Common.DbCommand" /> 对象的 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />。</summary>
      <returns>要在其中执行 .NET Framework 数据提供程序的 Command 对象的事务。 默认值为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Transaction">
      <summary>获取或设置将在其中执行此 <see cref="T:System.Data.Common.DbCommand" /> 对象的 <see cref="T:System.Data.Common.DbTransaction" />。</summary>
      <returns>要在其中执行 .NET Framework 数据提供程序的 Command 对象的事务。 默认值为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbCommand.UpdatedRowSource">
      <summary>获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 Update 方法使用时如何应用于 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。 如果该命令不是自动生成的，则默认值为 Both。 否则，默认值为 None。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.Common.DbCommandBuilder">
      <summary>自动生成用于协调 <see cref="T:System.Data.DataSet" /> 的更改与关联数据库的单表命令。 这是一个只能被继承的抽象类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.#ctor">
      <summary>初始化从 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类继承的类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
      <summary>允许 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的提供程序实现处理附加参数属性。</summary>
      <param name="parameter">要将附加修改应用到的 <see cref="T:System.Data.Common.DbParameter" />。</param>
      <param name="row">来自由 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" /> 提供的架构表的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="statementType">生成的命令的类型；INSERT、UPDATE 或 DELETE。</param>
      <param name="whereClause">如果参数是 update 或 delete WHERE 子句的一部分，则为 true；如果是 insert 或 update 值的一部分，则为 false。</param>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
      <summary>对于 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的实例，设置或获取 <see cref="T:System.Data.Common.CatalogLocation" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.CatalogLocation" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
      <summary>设置或获取一个字符串，该字符串用作 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的实例的目录分隔符。</summary>
      <returns>一个字符串，指示用于 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的实例的目录分隔符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.ConflictOption">
      <summary>指定哪个 <see cref="T:System.Data.ConflictOption" /> 将由 <see cref="T:System.Data.Common.DbCommandBuilder" /> 使用。</summary>
      <returns>返回描述此 <see cref="T:System.Data.Common.DbCommandBuilder" /> 行为的 <see cref="T:System.Data.ConflictOption" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.DataAdapter">
      <summary>获取或设置自动为其生成 Transact-SQL 语句的一个 <see cref="T:System.Data.Common.DbDataAdapter" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbCommandBuilder" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
      <summary>获取在数据源中执行删除操作所需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取对数据源执行删除操作所必需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象，可选择使用列作为参数名。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则生成与列名匹配的参数名（如果可能）。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
      <summary>获取在数据源中执行插入操作所需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取对数据源执行插入操作所必需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象，可选择使用列作为参数名。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则生成与列名匹配的参数名（如果可能）。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
      <summary>以 @p# 格式返回指定参数的名称。 在生成自定义命令生成器时使用。</summary>
      <returns>参数名，其中包含作为参数名的一部分而附加的指定数字。</returns>
      <param name="parameterOrdinal">作为参数名的一部分而包含的数字。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
      <summary>给定部分参数名，返回完整参数名。</summary>
      <returns>对应于所请求的部分参数名的完整参数名。</returns>
      <param name="parameterName">参数的部分名称。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
      <summary>返回该参数在关联的 SQL 语句中的占位符。</summary>
      <returns>附加了指定数字的参数名。</returns>
      <param name="parameterOrdinal">作为参数名的一部分而包含的数字。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
      <summary>返回 <see cref="T:System.Data.Common.DbCommandBuilder" /> 的架构表。</summary>
      <returns>表示特定 <see cref="T:System.Data.Common.DbCommand" /> 的架构的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="sourceCommand">要为其检索对应架构表的 <see cref="T:System.Data.Common.DbCommand" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
      <summary>获取在数据源中执行更新操作所需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取对数据源执行更新操作所必需的自动生成的 <see cref="T:System.Data.Common.DbCommand" /> 对象，可选择使用列作为参数名。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则生成与列名匹配的参数名（如果可能）。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
      <summary>重置 <see cref="T:System.Data.Common.DbCommand" /> 上的 <see cref="P:System.Data.Common.DbCommand.CommandTimeout" />、<see cref="P:System.Data.Common.DbCommand.Transaction" />、<see cref="P:System.Data.Common.DbCommand.CommandType" /> 和 <see cref="T:System.Data.UpdateRowSource" /> 属性。</summary>
      <returns>用于每个 insert、update 或 delete 操作的 <see cref="T:System.Data.Common.DbCommand" /> 实例。 传入一个 null 值将允许 <see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /> 方法根据与 <see cref="T:System.Data.Common.DbCommandBuilder" /> 关联的 Select 命令创建 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
      <param name="command">由命令生成器用于对应的 insert、update 或 delete 命令的 <see cref="T:System.Data.Common.DbCommand" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>以正确的目录大小写给定一个不带引号的标识符，返回该标识符的带引号的正确形式，包括正确转义该标识符中嵌入的任何引号。</summary>
      <returns>带引号的标识符版本。 该标识符中嵌入的引号已正确转义。</returns>
      <param name="unquotedIdentifier">不带引号的原始标识符。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
      <summary>获取或设置指定其名称包含空格或保留标记等字符的数据库对象（例如，表或列）时使用的开始字符。</summary>
      <returns>要使用的起始字符。 默认值为空字符串。</returns>
      <exception cref="T:System.InvalidOperationException">当生成 Insert、Update 或 Delete 命令后，不能更改此属性。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
      <summary>获取或设置一个或多个结束字符，供指定其名称中包含空格或保留标记等字符的数据库对象（例如，表或列）时使用。</summary>
      <returns>要使用的结束字符。 默认值为空字符串。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
      <summary>清除与此 <see cref="T:System.Data.Common.DbCommandBuilder" /> 关联的命令。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
      <summary>添加 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件的事件处理程序。</summary>
      <param name="rowUpdatingEvent">包含关于该事件的信息的 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 实例。</param>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
      <summary>获取或设置要用作架构标识符和任何其他标识符之间的分隔符的字符。</summary>
      <returns>要用作架构分隔符的字符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SetAllValues">
      <summary>指定 update 语句中是包含所有列值还是仅包含更改的列值。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbCommandBuilder" /> 生成的 UPDATE 语句包含所有列，则为 true；如果它仅包含更改的列，则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
      <summary>注册 <see cref="T:System.Data.Common.DbCommandBuilder" /> 以处理 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件。</summary>
      <param name="adapter">要用于更新的 <see cref="T:System.Data.Common.DbDataAdapter" />。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>给定一个带引号的标识符，返回该标识符的不带引号的正确形式，包括正确地取消转义该标识符中嵌入的任何引号。</summary>
      <returns>不带引号的标识符，其中嵌入的引号已正确进行取消转义。</returns>
      <param name="quotedIdentifier">其嵌入引号将被移除的标识符。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Common.DbConnection">
      <summary>表示到数据库的连接。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="isolationLevel">指定事务的隔离级别。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction">
      <summary>开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="isolationLevel">指定事务的隔离级别。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabase(System.String)">
      <summary>为打开的连接更改当前数据库。</summary>
      <param name="databaseName">为要使用的连接指定数据库名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnection.Close">
      <summary>关闭与数据库的连接。 此方法是关闭任何已打开连接的首选方法。</summary>
      <exception cref="T:System.Data.Common.DbException">在打开连接时出现连接级别的错误。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionString">
      <summary>获取或设置用于打开连接的字符串。</summary>
      <returns>用来建立初始连接的连接字符串。 该连接字符串的确切内容取决于此连接的特定数据源。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionTimeout">
      <summary>获取在建立连接时终止尝试并生成错误之前所等待的时间。</summary>
      <returns>等待连接打开的时间（以秒为单位）。 默认值是由您正在使用的连接的特定类型确定的。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateCommand">
      <summary>创建并返回与当前连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateDbCommand">
      <summary>创建并返回与当前连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.Database">
      <summary>在连接打开之后获取当前数据库的名称，或者在连接打开之前获取连接字符串中指定的数据库名。</summary>
      <returns>当前数据库的名称或连接打开后要使用的数据库的名称。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbConnection.DataSource">
      <summary>获取要连接的数据库服务器的名称。</summary>
      <returns>要连接的数据库服务器的名称。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbConnection.DbProviderFactory">
      <summary>获取此 <see cref="T:System.Data.Common.DbConnection" /> 的 <see cref="T:System.Data.Common.DbProviderFactory" />。</summary>
      <returns>一组方法的集合，这些方法用于创建提供程序对数据源类的实现的实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定事务中登记。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema">
      <summary>返回此 <see cref="T:System.Data.Common.DbConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String)">
      <summary>使用表示架构名称的指定字符串返回此 <see cref="T:System.Data.Common.DbConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> 被指定为空。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])">
      <summary>使用表示架构名称的指定字符串以及表示限制值的指定字符串数组返回此 <see cref="T:System.Data.Common.DbConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">为请求的架构指定一组限制值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> 被指定为空。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件。</summary>
      <param name="stateChange">包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Open">
      <summary>使用 <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> 所指定的设置打开数据库连接。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync">
      <summary>
        <see cref="M:System.Data.Common.DbConnection.Open" />的异步版本，打开由 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />指定的设置的数据库连接。 此方法通过 CancellationToken.None 调用虚拟方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbConnection.Open" /> 的异步版本。 提供程序应使用合适的实现进行重写。 可选择性接受取消标记。 默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.Open" /> 调用并返回已完成任务。 如果传递到已取消的取消标记，则默认实现将返回已取消的 cancellationToken。 Open 引发的异常将通过返回的任务异常属性传递。. 在返回的任务完成前，不要调用 DbConnection 对象的其他方法和属性。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
    </member>
    <member name="P:System.Data.Common.DbConnection.ServerVersion">
      <summary>获取表示对象所连接到的服务器的版本的字符串。</summary>
      <returns>数据库的版本。 返回的字符串的格式取决于您正在使用的连接的特定类型。</returns>
      <exception cref="T:System.InvalidOperationException">当返回的任务尚未完成，且调用 <see cref="Overload:System.Data.Common.DbConnection.OpenAsync" /> 后连接并未打开时，将调用 <see cref="P:System.Data.Common.DbConnection.ServerVersion" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbConnection.State">
      <summary>获取描述连接状态的字符串。</summary>
      <returns>连接的状态。 返回的字符串的格式取决于您正在使用的连接的特定类型。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Data.Common.DbConnection.StateChange">
      <summary>当事件状态更改时发生。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction">
      <summary>开始数据库事务。</summary>
      <returns>一个表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的 <see cref="T:System.Data.IsolationLevel" /> 值开始一个数据库事务。</summary>
      <returns>一个表示新事务的对象。</returns>
      <param name="isolationLevel">
        <see cref="T:System.Data.IsolationLevel" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand">
      <summary>创建并返回与当前连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
      <returns>与连接关联的 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="T:System.Data.Common.DbConnectionStringBuilder">
      <summary>为强类型连接字符串生成器提供基类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的新实例，可以选择使用 ODBC 规则来引用值。</summary>
      <param name="useOdbcRules">true 指示使用 {} 分隔字段，false 指示使用引号。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)">
      <summary>将带有指定键和值的项添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中。</summary>
      <param name="keyword">要添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的键。</param>
      <param name="value">指定键的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。 - 或 - <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定大小。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)">
      <summary>提供了一种有效而安全的方法，用于将项和值追加到某个现有的 <see cref="T:System.Text.StringBuilder" /> 对象。</summary>
      <param name="builder">要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="keyword">要添加的键。</param>
      <param name="value">提供的键的值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
      <summary>提供了一种有效而安全的方法，用于将项和值追加到某个现有的 <see cref="T:System.Text.StringBuilder" /> 对象。</summary>
      <param name="builder">要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="keyword">要添加的键。</param>
      <param name="value">提供的键的值。</param>
      <param name="useOdbcRules">true 指示使用 {} 分隔字段，false 指示使用引号。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString">
      <summary>获取或设置一个值，该值指示 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性在 Visual Studio 设计器中是否可见。</summary>
      <returns>如果连接字符串在设计器中可见，则为 true；否则为 false。 默认值为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例的内容。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors">
      <summary>清除关联的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 上的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象的集合。</summary>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString">
      <summary>获取或设置与 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 关联的连接字符串。</summary>
      <returns>当前的连接字符串，它由 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中所包含的键/值对创建。 默认值为空字符串。</returns>
      <exception cref="T:System.ArgumentException">提供的字符串参数无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否包含特定键。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 包含具有指定键的项，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Count">
      <summary>获取 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性中当前包含的键的数目。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例所维护的连接字符串内包含的键的数目。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)">
      <summary>将此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象中的连接信息与提供的对象中的连接信息进行比较。</summary>
      <returns>如果两个 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象中的连接信息生成等效的连接字符串，则为 true；否则为 false。</returns>
      <param name="connectionStringBuilder">要与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象进行比较的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)">
      <summary>用有关此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的所有属性的信息填充提供的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <param name="propertyDescriptors">要用关于此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的信息填充的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的大小是否是固定的。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定大小，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键相关联的值。</summary>
      <returns>与指定的键相关联的值。 如果未找到指定的键，尝试获取它将返回空引用（在 Visual Basic 中为 Nothing），尝试设置它将使用指定的键创建新元素。 传递空（在 Visual Basic 中为 Nothing）键将引发 <see cref="T:System.ArgumentNullException" />。 赋予空值将移除键/值对。</returns>
      <param name="keyword">要获取或设置的项的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。 - 或 - 设置该属性，集合中不存在 <paramref name="keyword" />，而且 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定大小。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Keys">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的键。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)">
      <summary>移除 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例中具有指定键的项。</summary>
      <returns>如果该键存在于连接字符串中并被移除，则为 true；如果该键不存在，则为 false。</returns>
      <param name="keyword">要从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读，或 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定大小。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>指示此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例中是否存在指定键。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 包含具有指定键的项，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中定位的键。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。</summary>
      <param name="keyword">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 包含带有该键的元素，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Collections.IDictionary" /> 对象中定位的键。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator">
      <summary>返回一个用于 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>一个用于 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>带有指定键的元素。</returns>
      <param name="keyword">要获取或设置的元素的键。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除带有指定键的元素。</summary>
      <param name="keyword">要移除的元素的键。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义特性的集合。</summary>
      <returns>包含此对象的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名。</summary>
      <returns>该对象的类名；如果此类没有名称，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回此组件实例的名称。</summary>
      <returns>该对象的名称；如果该对象没有名称，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>表示该对象的转换器的 <see cref="T:System.ComponentModel.TypeConverter" />；如果此对象没有任何 <see cref="T:System.ComponentModel.TypeConverter" />，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回此组件实例的默认事件。</summary>
      <returns>表示该对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示该对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果此对象没有属性，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回此组件实例的指定类型的编辑器。</summary>
      <returns>表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 null。</returns>
      <param name="editorBaseType">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>表示此组件实例的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>将指定的特性数组用作筛选器来返回此组件实例的事件。</summary>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>返回将特性数组用作筛选器的此组件实例的属性。</summary>
      <returns>表示此组件实例的已筛选属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回包含指定的属性描述符所描述的属性的对象。</summary>
      <returns>表示指定属性所有者的 <see cref="T:System.Object" />。</returns>
      <param name="pd">表示要查找其所有者的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ToString">
      <summary>返回与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 关联的连接字符串。</summary>
      <returns>当前的 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中检索与所提供的键对应的值。</summary>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则为 true；否则为 false。</returns>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="key" /> 对应的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Values">
      <summary>获取包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的值。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Common.DbDataAdapter">
      <summary>帮助实现 <see cref="T:System.Data.IDbDataAdapter" /> 接口。 <see cref="T:System.Data.Common.DbDataAdapter" /> 的继承者实现一组函数以提供强类型，但是继承了完全实现 DataAdapter 所需的大部分功能。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor">
      <summary>初始化 DataAdapter 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)">
      <summary>从同一类型的现有对象中初始化 DataAdapter 类的新实例。</summary>
      <param name="adapter">用于创建新 DataAdapter 的 DataAdapter 对象。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)">
      <summary>向当前批处理添加 <see cref="T:System.Data.IDbCommand" />。</summary>
      <returns>添加 <see cref="T:System.Data.IDbCommand" /> 之前批处理中的命令数。</returns>
      <param name="command">要添加到批处理的 <see cref="T:System.Data.IDbCommand" />。</param>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ClearBatch">
      <summary>从批处理中移除所有 <see cref="T:System.Data.IDbCommand" /> 对象。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</returns>
      <param name="dataRow">用于更新数据源的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 过程中执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">该命令是 UPDATE、INSERT、DELETE 语句还是 SELECT 语句。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</returns>
      <param name="dataRow">更新数据源的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">要在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 过程中执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">该命令是 UPDATE、INSERT、DELETE 语句还是 SELECT 语句。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
    </member>
    <member name="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 对象用于表映射的默认名称。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的命令。</summary>
      <returns>
        <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中已删除的行删除数据源中的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbDataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ExecuteBatch">
      <summary>执行当前批处理。</summary>
      <returns>从批处理中的最后一个命令返回的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="startRecord">从其开始的从零开始的记录号。</param>
      <param name="maxRecords">要检索的最大记录数。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。 - 或 - 连接无效。</exception>
      <exception cref="T:System.InvalidCastException">未能找到连接。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。 - 或 - <paramref name="maxRecords" /> 参数小于 0。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>使用 <see cref="T:System.Data.DataSet" /> 和源表名称、命令字符串以及命令行为，在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新某些行以使它们与数据源中对应的行相一致。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="startRecord">从其开始的从零开始的记录号。</param>
      <param name="maxRecords">要检索的最大记录数。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。 - 或 - <paramref name="maxRecords" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <exception cref="T:System.SystemException">源表无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行，以与使用 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行匹配。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataTable">用于表映射的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行，以与使用指定的 <see cref="T:System.Data.DataTable" />、<see cref="T:System.Data.IDbCommand" /> 和 <see cref="T:System.Data.CommandBehavior" /> 的数据源中的行匹配。</summary>
      <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataTable">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>在 <see cref="T:System.Data.DataSet" /> 的指定范围中添加或刷新行以匹配使用 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称的数据源中的行。</summary>
      <returns>已在数据表中添加或刷新的行数。</returns>
      <param name="dataTables">要从数据源填充的 <see cref="T:System.Data.DataTable" /> 对象。</param>
      <param name="startRecord">从其开始的从零开始的记录号。</param>
      <param name="maxRecords">要检索的最大记录数。</param>
      <param name="command">执行以填充 <see cref="T:System.Data.DataTable" /> 对象的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。 - 或 - 连接无效。</exception>
      <exception cref="T:System.InvalidCastException">未能找到连接。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。 - 或 - <paramref name="maxRecords" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])">
      <summary>在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行，以与从指定的记录开始一直检索到指定的最大数目的记录的数据源中的行匹配。</summary>
      <returns>已在 <see cref="T:System.Data.DataTable" /> 中成功添加或刷新的行数。 此值不包括受不返回行的语句影响的行。</returns>
      <param name="startRecord">从其开始的从零开始的记录号。</param>
      <param name="maxRecords">要检索的最大记录数。</param>
      <param name="dataTables">要从数据源填充的 <see cref="T:System.Data.DataTable" /> 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.FillCommandBehavior">
      <summary>获取或设置用于填充数据适配器的命令的行为。</summary>
      <returns>用于填充数据适配器的命令的 <see cref="T:System.Data.CommandBehavior" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
      <returns>对添加到 <see cref="T:System.Data.DataSet" /> 中的 <see cref="T:System.Data.DataTable" /> 对象集合的引用。</returns>
      <param name="dataSet">要将架构插入其中的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象的数组，这些对象包含从数据源返回的架构信息。</returns>
      <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 和 <see cref="T:System.Data.DataTable" /> 配置架构以匹配数据源中的架构。</summary>
      <returns>对添加到 <see cref="T:System.Data.DataSet" /> 中的 <see cref="T:System.Data.DataTable" /> 对象集合的引用。</returns>
      <param name="dataSet">要将架构插入其中的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <exception cref="T:System.ArgumentException">未能找到从中获取架构的源表。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
      <summary>根据指定的 <see cref="T:System.Data.SchemaType" /> 配置指定 <see cref="T:System.Data.DataTable" /> 的架构。</summary>
      <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="dataTable">要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>根据指定的 <see cref="T:System.Data.SchemaType" />、命令字符串以及 <see cref="T:System.Data.CommandBehavior" /> 值配置指定 <see cref="T:System.Data.DataTable" /> 的架构。</summary>
      <returns>包含从数据源返回的架构信息的 <see cref="T:System.Data.DataTable" /> 对象。</returns>
      <param name="dataTable">要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="command">用于从数据源中检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)">
      <summary>从当前批处理中的其中一个命令返回一个 <see cref="T:System.Data.IDataParameter" />。</summary>
      <returns>指定的 <see cref="T:System.Data.IDataParameter" />。</returns>
      <param name="commandIdentifier">要从中检索参数的命令的索引。</param>
      <param name="parameterIndex">命令内的参数的索引。</param>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)">
      <summary>返回与较大的批处理更新内的单次更新尝试有关的信息。</summary>
      <returns>与较大的批处理更新内的单次更新尝试有关的信息。</returns>
      <param name="commandIdentifier">该批次内单个命令的从零开始的列序号。</param>
      <param name="recordsAffected">数据存储区中受该批内的指定命令影响的行数。</param>
      <param name="error">在执行指定命令期间引发的一个 <see cref="T:System.Exception" />。 如果未引发任何异常，则返回 null（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetFillParameters">
      <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.InitializeBatching">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataAdapter" /> 的批处理。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.InsertCommand">
      <summary>获取或设置用于将新记录插入到数据源中的命令。</summary>
      <returns>在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中的新行将记录插入到数据源中。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>引发 .NET Framework 数据提供程序的 RowUpdated 事件。</summary>
      <param name="value">包含事件数据的 <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>引发 .NET Framework 数据提供程序的 RowUpdating 事件。</summary>
      <param name="value">包含事件数据的 <see cref="T:System.Data.Common.RowUpdatingEventArgs" />。</param>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.SelectCommand">
      <summary>获取或设置用于在数据源中选择记录的命令。</summary>
      <returns>在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它从数据源中选择记录以便放入数据集中。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的 SQL 语句。</summary>
      <returns>
        <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中已删除的行删除数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>获取或设置用于将新记录插入到数据源中的 SQL 语句。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中的新行将记录插入到数据源。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>获取或设置用于在数据源中选择记录的 SQL 语句。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它从数据源中选择记录以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的 SQL 语句。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中已修改的行更新数据源中的记录。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为此实例副本的新对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.TerminateBatching">
      <summary>结束 <see cref="T:System.Data.Common.DbDataAdapter" /> 的批处理。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])">
      <summary>通过为 <see cref="T:System.Data.DataSet" /> 中的指定数组中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
      <param name="dataRows">用于更新数据源的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。 - 或 - 不存在要更新的 <see cref="T:System.Data.DataTable" />。 - 或 - 不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
      <summary>通过为指定的 <see cref="T:System.Data.DataSet" /> 对象数组中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
      <param name="dataRows">用于更新数据源的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
      <param name="tableMapping">要使用的 <see cref="P:System.Data.IDataAdapter.TableMappings" /> 集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。 - 或 - 不存在要更新的 <see cref="T:System.Data.DataTable" />。 - 或 - 不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">
      <summary>通过为指定的 <see cref="T:System.Data.DataSet" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
      <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)">
      <summary>通过为具有指定名称 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.Data.DataSet" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
      <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)">
      <summary>通过为指定的 <see cref="T:System.Data.DataTable" /> 中的每个已插入、已更新或已删除的行执行相应的 INSERT、UPDATE 或 DELETE 语句来更新数据库中的值。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 中成功更新的行数。</returns>
      <param name="dataTable">用于更新数据源的 <see cref="T:System.Data.DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">源表无效。</exception>
      <exception cref="T:System.SystemException">不存在要更新的 <see cref="T:System.Data.DataRow" />。 - 或 - 不存在要更新的 <see cref="T:System.Data.DataTable" />。 - 或 - 不存在要用作源的 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateBatchSize">
      <summary>获取或设置一个值，该值启用或禁用批处理支持，并且指定可在一次批处理中执行的命令的数量。</summary>
      <returns>每个批处理要处理的行数。 值为 效果 0批大小没有限制。 1禁用批量更新。 &gt; 1 更改是使用 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> 操作的批处理一次性发送的。 将此属性设置为 1 以外的值时，所有与 <see cref="T:System.Data.Common.DbDataAdapter" /> 关联的命令都必须将它们的 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> 属性设置为 None 或 OutputParameters。 否则，将引发异常。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的命令。</summary>
      <returns>在 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中已修改的行更新数据源中的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.Common.DBDataPermission">
      <summary>启用一个 .NET Framework 数据提供程序，以帮助确保用户具有足够的安全级别来访问数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor">
      <summary>初始化 DBDataPermission 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Data.Common.DBDataPermission)">
      <summary>使用现有的 DBDataPermission 初始化 DBDataPermission 类的新实例。</summary>
      <param name="permission">用于创建新 DBDataPermission 的现有 DBDataPermission。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Data.Common.DBDataPermissionAttribute)">
      <summary>用指定的 DBDataPermissionAttribute 初始化 DBDataPermission 类的新实例。</summary>
      <param name="permissionAttribute">与自定义安全特性相关的安全操作。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.PermissionState" /> 值初始化 DBDataPermission 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>用指定的 <see cref="T:System.Security.Permissions.PermissionState" /> 值和指示是否允许空白密码的值初始化 DBDataPermission 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许空白密码。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>将指定连接字符串的访问权限添加到 DBDataPermission 的现有状态。</summary>
      <param name="connectionString">允许的连接字符串。</param>
      <param name="restrictions">标识允许使用或禁用的连接字符串参数的字符串。</param>
      <param name="behavior">
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 属性之一。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DBDataPermission.AllowBlankPassword">
      <summary>获取一个值，该值指示是否允许使用空白密码。</summary>
      <returns>如果允许使用空白密码，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Clear">
      <summary>移除以前使用 <see cref="M:System.Data.Common.DBDataPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)" /> 方法添加的所有权限。</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Copy">
      <summary>创建并返回与当前权限对象相同的副本。</summary>
      <returns>当前权限对象的副本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.CreateInstance">
      <summary>创建 DBDataPermission 类的新实例。</summary>
      <returns>一个新的 DBDataPermission 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.FromXml(System.Security.SecurityElement)">
      <summary>用 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Intersect(System.Security.IPermission)">
      <summary>返回表示当前权限对象和指定权限对象的交集的新权限对象。</summary>
      <returns>表示当前权限对象和指定权限对象的交集的新权限对象。 如果交集为空，则此新权限对象是一个 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="target">与当前的权限对象相交的权限对象。 它必须与当前权限对象的类型相同。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不是 null 引用（在 Visual Basic 中为 Nothing），并且不是与当前权限对象相同的类的实例。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前的权限对象是否为指定权限对象的一个子集。</summary>
      <returns>如果当前权限对象是指定权限对象的子集，则为 true；否则为 false。</returns>
      <param name="target">将用于测试子集关系的权限对象。 该对象必须与当前权限对象的类型相同。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数是一个与当前权限对象的类型不同的对象。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.IsUnrestricted">
      <summary>返回一个值，该值指示在不了解权限语义的情况下是否可以将权限表示为无限制。</summary>
      <returns>如果可以将权限表示为无限制，则为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Union(System.Security.IPermission)">
      <summary>返回一个新的权限对象，它是当前权限对象和指定权限对象的并集。</summary>
      <returns>新权限对象，它表示当前权限对象和指定权限对象的并集。</returns>
      <param name="target">要与当前的权限对象合并的权限对象。 它必须与当前权限对象的类型相同。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 对象与当前权限对象不属于同一类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.DBDataPermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.Common.DBDataPermissionAttribute" /> 的新实例。</summary>
      <param name="action">安全操作值之一，它表示可以由声明性安全执行的操作。</param>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.AllowBlankPassword">
      <summary>获取或设置一个值，该值指示是否允许使用空白密码。</summary>
      <returns>如果允许使用空白密码，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.ConnectionString">
      <summary>获取或设置允许的连接字符串。</summary>
      <returns>允许的连接字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictionBehavior">
      <summary>标识由 <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions" /> 属性标识的连接字符串参数列表是否为所唯一允许的连接字符串参数。</summary>
      <returns>
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 值之一。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions">
      <summary>获取或设置允许或不允许的连接字符串参数。</summary>
      <returns>允许或不允许的一个和多个连接字符串参数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.ShouldSerializeConnectionString">
      <summary>标识特性是否应序列化连接字符串。</summary>
      <returns>如果特性应序列化连接字符串，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.ShouldSerializeKeyRestrictions">
      <summary>标识特性是否应序列化键限制集合。</summary>
      <returns>如果特性应序列化键限制集合，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.DbDataReader">
      <summary>从数据源读取行的一个只进流。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose">
      <summary>释放由 <see cref="T:System.Data.Common.DbDataReader" /> 类的当前实例占用的所有资源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbDataReader" /> 使用的托管资源，还可以选择释放非托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若要仅释放非托管资源，则为 false。</param>
    </member>
    <member name="P:System.Data.Common.DbDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>当前行中的列数。</returns>
      <exception cref="T:System.NotSupportedException">没有对 SQL Server 实例的当前连接。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetByte(System.Int32)">
      <summary>获取指定列的字节形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定列读取一个字节流（从 <paramref name="dataOffset" /> 指示的位置开始），读到缓冲区中（从 <paramref name="bufferOffset" /> 指示的位置开始）。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中的索引，从其开始读取操作。</param>
      <param name="buffer">作为数据复制目标的缓冲区。</param>
      <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引。</param>
      <param name="length">最多读取的字符数。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChar(System.Int32)">
      <summary>获取指定列的单个字符串形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定列读取一个字符流，从 <paramref name="dataOffset" /> 指示的位置开始，读到缓冲区中，从 <paramref name="bufferOffset" /> 指示的位置开始。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中的索引，从其开始读取操作。</param>
      <param name="buffer">作为数据复制目标的缓冲区。</param>
      <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引。</param>
      <param name="length">最多读取的字符数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetData(System.Int32)">
      <summary>返回被请求的列序号的 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)">
      <summary>获取指定列的数据类型的名称。</summary>
      <returns>表示数据类型的名称的字符串。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)">
      <summary>返回被请求的列序号的 <see cref="T:System.Data.Common.DbDataReader" /> 对象，可以使用提供程序特定的实现对该对象进行重写。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDouble(System.Int32)">
      <summary>获取指定列的双精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)">
      <summary>获取指定列的数据类型。</summary>
      <returns>指定列的数据类型。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)">
      <summary>同步获取作为类型的指定列的值。</summary>
      <returns>要检索的列。</returns>
      <param name="ordinal">要检索的列。</param>
      <typeparam name="T">同步获取作为类型的指定列的值。</typeparam>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。 没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与 SQL Server 返回的类型不匹配或无法进行转换。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)">
      <summary>异步获取作为类型的指定列的值。</summary>
      <returns>要返回的值的类型。</returns>
      <param name="ordinal">要返回的值的类型。</param>
      <typeparam name="T">要返回的值的类型。 有关更多信息，请参见备注部分。</typeparam>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间，<see cref="T:System.Data.Common.DbDataReader" /> 处于关闭状态。 没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与数据源返回的类型不匹配或无法进行强制转换。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>异步获取作为类型的指定列的值。</summary>
      <returns>要返回的值的类型。</returns>
      <param name="ordinal">要返回的值的类型。</param>
      <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播。 此构造函数不对取消做保证。 设置为 CancellationToken.None 将此方法等效于 <see cref="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)" />。 返回任务必须标记为已取消。</param>
      <typeparam name="T">要返回的值的类型。 有关更多信息，请参见备注部分。</typeparam>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间，<see cref="T:System.Data.Common.DbDataReader" /> 处于关闭状态。 没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与数据源返回的类型不匹配或无法进行转换。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFloat(System.Int32)">
      <summary>获取指定列的单精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetGuid(System.Int32)">
      <summary>获取指定列的全局唯一标识符 (GUID) 形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt16(System.Int32)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt32(System.Int32)">
      <summary>获取指定列的 32 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt64(System.Int32)">
      <summary>获取指定列的 64 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetName(System.Int32)">
      <summary>给定了从零开始的列序号时，获取列的名称。</summary>
      <returns>指定列的名称。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetOrdinal(System.String)">
      <summary>给定列名称时，获取列序号。</summary>
      <returns>从零开始的列序号。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名称。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>返回指定列的提供程序特定的字段类型。</summary>
      <returns>描述指定列的数据类型的 <see cref="T:System.Type" /> 对象。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>获取指定列的作为 <see cref="T:System.Object" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>获取集合中当前行的所有提供程序特定的特性列。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性列复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.Common.DbDataReader" /> 的列元数据。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 是关闭的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetStream(System.Int32)">
      <summary>检索作为 <see cref="T:System.IO.Stream" /> 的数据。</summary>
      <returns>返回的对象。</returns>
      <param name="ordinal">检索作为 <see cref="T:System.IO.Stream" /> 的数据。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间，<see cref="T:System.Data.Common.DbDataReader" /> 处于关闭状态。 没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不属于以下类型之一： binary image varbinary UDT</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetString(System.Int32)">
      <summary>获取指定列的作为 <see cref="T:System.String" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)">
      <summary>检索作为 <see cref="T:System.IO.TextReader" /> 的数据。</summary>
      <returns>返回的对象。</returns>
      <param name="ordinal">检索作为 <see cref="T:System.IO.TextReader" /> 的数据。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间，<see cref="T:System.Data.Common.DbDataReader" /> 处于关闭状态。 没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不属于以下类型之一： char nchar ntext nvarchar 文本 varchar</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValue(System.Int32)">
      <summary>获取指定列的作为 <see cref="T:System.Object" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性列复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbDataReader.HasRows">
      <summary>获取一个值，它指示此 <see cref="T:System.Data.Common.DbDataReader" /> 是否包含一个或多个行。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbDataReader" /> 包含一行或多行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbDataReader.IsClosed">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DbDataReader" /> 是否已关闭。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbDataReader" /> 已关闭，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 是关闭的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在的或已丢失的值。</summary>
      <returns>如果指定的列与 <see cref="T:System.DBNull" /> 等效，则为 true；否则为 false。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)">
      <summary>
        <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" /> 的异步版本，其获取指示列是否包含不存在或缺失值的值。</summary>
      <returns>如果指定的列值与 DBNull 等效，则为 true；否则为 false。</returns>
      <param name="ordinal">从零开始的要检索的列。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间，<see cref="T:System.Data.Common.DbDataReader" /> 处于关闭状态。 没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" /> 的异步版本，其获取指示列是否包含不存在或缺失值的值。 可选地，发送操作应取消的注明。</summary>
      <returns>如果指定的列值与 DBNull 等效，则为 true；否则为 false。</returns>
      <param name="ordinal">从零开始的要检索的列。</param>
      <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播。 此构造函数不对取消做保证。 设置 CancellationToken.None 使得这种方法等同于 <see cref="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)" />。 返回任务必须标记为已取消。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间，<see cref="T:System.Data.Common.DbDataReader" /> 处于关闭状态。 没有要读取的就绪数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.Int32)">
      <summary>获取指定列的作为 <see cref="T:System.Object" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.String)">
      <summary>获取指定列的作为 <see cref="T:System.Object" /> 的实例的值。</summary>
      <returns>指定列的值。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResult">
      <summary>读取批处理语句的结果时，使读取器前进到下一个结果。</summary>
      <returns>如果存在多个结果集，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync">
      <summary>
        <see cref="M:System.Data.Common.DbDataReader.NextResult" /> 的异步版本，读取批处理语句的结果时，将读取器推进到下一个结果。 通过 CancellationToken.None 调用 <see cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)" />。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbDataReader.NextResult" /> 的异步版本。 提供程序应使用合适的实现进行重写。 可选择性忽略 <paramref name="cancellationToken" />。 默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.NextResult" /> 方法并返回已完成任务，以便阻止调用线程。 如果传递到已取消 <paramref name="cancellationToken" />，则默认实现将返回已取消的任务。 <see cref="M:System.Data.Common.DbDataReader.NextResult" /> 引发的异常将通过任务异常属性传递。 当返回任务还未完成时， DbDataReader 对象的其他方法和属性不应调用 。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Read">
      <summary>将读取器前进到结果集中的下一个记录。</summary>
      <returns>如果存在多个行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync">
      <summary>
        <see cref="M:System.Data.Common.DbDataReader.Read" />的异步版本，将读取器前移到结果集的下一条记录。 此方法通过 CancellationToken.None 调用 <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" />。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>这是 <see cref="M:System.Data.Common.DbDataReader.Read" /> 的异步版本。提供程序应使用合适的实现进行重写。 可选择性忽略的 cancellationToken。 默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.Read" /> 方法并返回已完成任务，以便阻止调用线程。 如果传递到已取消的取消标记，则默认实现将返回已取消的 cancellationToken。Read 引发的异常将通过返回的任务异常属性传递。 在返回的任务完成前，不要调用 DbDataReader 对象的其他方法和属性。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出现的一个错误。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.RecordsAffected">
      <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
      <returns>更改、插入或删除的行数。对于 SELECT 语句为 -1；如果没影响任何行或该语句失败，则为 0。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDataRecord.GetData(System.Int32)" />。</summary>
      <returns>在字段指向更多的远程结构化数据时使用的 <see cref="T:System.Data.IDataReader" /> 的实例。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="P:System.Data.Common.DbDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.Common.DbDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.Common.DbDataRecord">
      <summary>实现 <see cref="T:System.Data.IDataRecord" /> 和 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，并为 <see cref="T:System.Data.Common.DbEnumerator" /> 提供数据绑定支持。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataRecord" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.FieldCount">
      <summary>指示当前记录中字段的数目。 此属性是只读的。</summary>
      <returns>当前记录中字段的数目。</returns>
      <exception cref="T:System.NotSupportedException">未连接到从中读取数据的数据源。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)">
      <summary>以布尔值的形式返回指定列的值。</summary>
      <returns>如果布尔值是 true，则为 true；否则为 false。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetByte(System.Int32)">
      <summary>以字节的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>以字节数组的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">字段中的索引，从该索引位置开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">开始读取操作的 <paramref name="buffer" /> 索引。</param>
      <param name="length">要读取的字节数。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChar(System.Int32)">
      <summary>以字符的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>以字符数组的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <param name="dataIndex">要将数据复制到的缓冲区。</param>
      <param name="buffer">向缓冲区中复制的最大长度。</param>
      <param name="bufferIndex">缓冲区中从其开始的点。</param>
      <param name="length">源数据中从其开始的点。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetData(System.Int32)">
      <summary>当前不支持。</summary>
      <returns>当前不支持。</returns>
      <param name="i">当前不支持。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)">
      <summary>返回后端数据类型的名称。</summary>
      <returns>后端数据类型的名称。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)">
      <summary>返回被请求的列序号的 <see cref="T:System.Data.Common.DbDataReader" /> 对象，可以使用提供程序特定的实现对该对象进行重写。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
      <param name="i">从零开始的列序号。</param>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)">
      <summary>以 <see cref="T:System.Decimal" /> 对象的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)">
      <summary>以双精度浮点数的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)">
      <summary>返回 <see cref="T:System.Type" />，它是对象的数据类型。</summary>
      <returns>
        <see cref="T:System.Type" />，它是对象的数据类型。</returns>
      <param name="i">列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)">
      <summary>以单精度浮点数的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)">
      <summary>返回指定字段的 GUID 值。</summary>
      <returns>指定字段的 GUID 值。</returns>
      <param name="i">要返回的字段的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)">
      <summary>以 16 位有符号整数的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)">
      <summary>以 32 位有符号整数的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)">
      <summary>以 64 位有符号整数的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetName(System.Int32)">
      <summary>返回指定列的名称。</summary>
      <returns>指定列的名称。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)">
      <summary>在给定列名称的情况下返回列序号。</summary>
      <returns>列序号。</returns>
      <param name="name">列的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetString(System.Int32)">
      <summary>以字符串的形式返回指定列的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValue(System.Int32)">
      <summary>返回以其本机格式表示的位于指定列的值。</summary>
      <returns>要返回的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValues(System.Object[])">
      <summary>使用当前记录的列值来填充对象数组。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性字段复制到其中的 <see cref="T:System.Object" /> 的数组。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)">
      <summary>用于指示不存在的值。</summary>
      <returns>如果指定的列与 <see cref="T:System.DBNull" /> 等效，则为 true；否则为 false。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.Int32)">
      <summary>在给定列序号的情况下，指示以其本机格式表示的位于指定列的值。 此属性是只读的。</summary>
      <returns>以其本机格式表示的位于指定列的值。</returns>
      <param name="i">列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.String)">
      <summary>在给定列名称的情况下，指示以其本机格式表示的位于指定列的值。 此属性是只读的。</summary>
      <returns>以其本机格式表示的位于指定列的值。</returns>
      <param name="name">列名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义特性的集合。</summary>
      <returns>一个包含该对象的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名。</summary>
      <returns>该对象的类名；如果此类没有名称，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回此组件实例的名称。</summary>
      <returns>该对象的名称；如果该对象没有名称，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>表示该对象的转换器的 <see cref="T:System.ComponentModel.TypeConverter" />；如果此对象没有任何 <see cref="T:System.ComponentModel.TypeConverter" />，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回此组件实例的默认事件。</summary>
      <returns>表示该对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示该对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果此对象没有属性，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回此组件实例的指定类型的编辑器。</summary>
      <returns>表示该对象编辑器的指定类型的 <see cref="T:System.Object" />；如果无法找到编辑器，则为 null。</returns>
      <param name="editorBaseType">表示该对象的编辑器的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>表示此组件实例的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>将指定的特性数组用作筛选器来返回此组件实例的事件。</summary>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>返回将特性数组用作筛选器的此组件实例的属性。</summary>
      <returns>表示此组件实例的已筛选属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回包含指定的属性描述符所描述的属性的对象。</summary>
      <returns>表示指定属性所有者的 <see cref="T:System.Object" />。</returns>
      <param name="pd">表示要查找其所有者的属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="T:System.Data.Common.DbDataSourceEnumerator">
      <summary>提供了一种枚举本地网络内的所有可用数据库服务器实例的机制。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.#ctor">
      <summary>创建 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.GetDataSources">
      <summary>检索一个 <see cref="T:System.Data.DataTable" />，它包含由该类的强类型实例所表示的服务器的所有可见实例的相关信息。</summary>
      <returns>返回一个 <see cref="T:System.Data.DataTable" />，它包含有关联数据源的可见实例的信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.DbEnumerator">
      <summary>公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
      <summary>使用指定 DataReader 初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例。</summary>
      <param name="reader">要循环访问的 DataReader。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
      <summary>使用指定的 DataReader 初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例，并指示在迭代其数据后是否自动关闭 DataReader。</summary>
      <param name="reader">要循环访问的 DataReader。</param>
      <param name="closeReader">如果在迭代其数据后自动关闭 DataReader，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Data.Common.DbEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在该集合的第一个元素之前或最后一个元素之后。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Common.DbException">
      <summary>代表数据源引发的所有异常的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化信息和上下文初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="message">为此异常显示的消息。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="message">错误消息字符串。</param>
      <param name="innerException">内部异常引用。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Int32)">
      <summary>使用指定的错误消息和错误代码初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="errorCode">异常的错误代码。</param>
    </member>
    <member name="T:System.Data.Common.DbMetaDataCollectionNames">
      <summary>提供已知的 MetaDataCollections 的常量列表：DataSourceInformation、DataTypes、MetaDataCollections、ReservedWords 和 Restrictions。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation">
      <summary>与表示 DataSourceInformation 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataTypes">
      <summary>与表示 DataTypes 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.MetaDataCollections">
      <summary>与表示 MetaDataCollections 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.ReservedWords">
      <summary>与表示 ReservedWords 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.Restrictions">
      <summary>与表示 Restrictions 集合的 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 方法一起使用的常量。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.DbMetaDataColumnNames">
      <summary>提供静态值，这些值用于包含在 <see cref="T:System.Data.DataTable" /> 中的 MetaDataCollection 对象中的列名称。 <see cref="T:System.Data.DataTable" /> 由 GetSchema 方法创建。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CollectionName">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 CollectionName 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ColumnSize">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 ColumnSize 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CompositeIdentifierSeparatorPattern">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 CompositeIdentifierSeparatorPattern 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateFormat">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 CreateFormat 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateParameters">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 CreateParameters 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductName">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 DataSourceProductName 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersion">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 DataSourceProductVersion 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersionNormalized">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 DataSourceProductVersionNormalized 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataType">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 DataType 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.GroupByBehavior">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 GroupByBehavior 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierCase">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 IdentifierCase 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierPattern">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 IdentifierPattern 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsAutoIncrementable">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsAutoIncrementable 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsBestMatch">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsBestMatch 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsCaseSensitive">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsCaseSensitive 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsConcurrencyType">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsConcurrencyType 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedLength">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsFixedLength 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedPrecisionScale">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsFixedPrecisionScale 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLiteralSupported">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsLiteralSupported 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLong">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsLong 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsNullable">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsNullable 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchable">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsSearchable 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchableWithLike">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsSearchableWithLike 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsUnsigned">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 IsUnsigned 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralPrefix">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 LiteralPrefix 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralSuffix">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 LiteralSuffix 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MaximumScale">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 MaximumScale 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MinimumScale">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 MinimumScale 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfIdentifierParts">
      <summary>由 GetSchema 方法用来创建 MetaDataCollections 集合中的 NumberOfIdentifierParts 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfRestrictions">
      <summary>由 GetSchema 方法用来创建 MetaDataCollections 集合中的 NumberOfRestrictions 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.OrderByColumnsInSelect">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 OrderByColumnsInSelect 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 ParameterMarkerFormat 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerPattern">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 ParameterMarkerPattern 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 ParameterNameMaxLength 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 ParameterNamePattern 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ProviderDbType">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 ProviderDbType 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierCase">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 QuotedIdentifierCase 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierPattern">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 QuotedIdentifierPattern 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ReservedWord">
      <summary>由 GetSchema 方法用来创建 ReservedWords 集合中的 ReservedWord 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StatementSeparatorPattern">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 StatementSeparatorPattern 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StringLiteralPattern">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 StringLiteralPattern 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.SupportedJoinOperators">
      <summary>由 GetSchema 方法用来创建 DataSourceInformation 集合中的 SupportedJoinOperators 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.TypeName">
      <summary>由 GetSchema 方法用来创建 DataTypes 集合中的 TypeName 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.DbParameter">
      <summary>表示 <see cref="T:System.Data.Common.DbCommand" /> 的参数，还可表示该参数到一个 <see cref="T:System.Data.DataSet" /> 列的映射。 有关参数的更多信息，请参见 配置参数和参数数据类型 (ADO.NET)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbParameter" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="F:System.Data.DbType.String" />。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.DbType" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受空值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的名称。 默认值为空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.Precision">
    </member>
    <member name="M:System.Data.Common.DbParameter.ResetDbType">
      <summary>将 DbType 属性重置为其原始设置。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.Scale">
    </member>
    <member name="P:System.Data.Common.DbParameter.Size">
      <summary>获取或设置列中数据的最大大小（以字节为单位）。</summary>
      <returns>列中数据的最大大小（以字节为单位）。 默认值是从参数值推导出的。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.Common.DbParameter.Value" />。</summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。 这使得 <see cref="T:System.Data.Common.DbCommandBuilder" /> 能够正确地为可以为 null 的列生成 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；如果不可以为 null，则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceVersion">
      <summary>获取或设置在加载 <see cref="P:System.Data.Common.DbParameter.Value" /> 时使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为 <see cref="T:System.Data.DataRowVersion" /> 值之一。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Precision">
      <summary>指示数值参数的精度。</summary>
      <returns>用于表示数据提供程序 Parameter 对象的 Value 属性的最大数字位数。 默认值为 0，它表示数据提供程序设置 Value 的精度。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Scale">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Data.IDbDataParameter.Scale" />。</summary>
      <returns>要将 <see cref="T:System.Data.OleDb.OleDbParameter.Value" /> 解析为的小数位数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Value">
      <summary>获取或设置该参数的值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是该参数的值。 默认值为 null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.Common.DbParameterCollection">
      <summary>与 <see cref="T:System.Data.Common.DbCommand" /> 相关的参数集合的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbParameterCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象添加到 <see cref="T:System.Data.Common.DbParameterCollection" /> 中。</summary>
      <returns>集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.AddRange(System.Array)">
      <summary>将具有指定值的项的数组添加到 <see cref="T:System.Data.Common.DbParameterCollection" />。</summary>
      <param name="values">要添加到集合的 <see cref="T:System.Data.Common.DbParameter" /> 类型值的数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Clear">
      <summary>从 <see cref="T:System.Data.Common.DbParameterCollection" /> 中移除所有 <see cref="T:System.Data.Common.DbParameter" /> 值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.Object)">
      <summary>指示集合中是否包含具有指定 <see cref="P:System.Data.Common.DbParameter.Value" /> 的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbParameter" /> 在集合中，则为 true；否则为 false。</returns>
      <param name="value">要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.String)">
      <summary>指示集合中是否存在具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbParameter" /> 在集合中，则为 true；否则为 false。</returns>
      <param name="value">要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>从指定索引处开始，将项的数组复制到集合中。</summary>
      <param name="array">要复制到集合中的项的数组。</param>
      <param name="index">要将项复制到的集合中的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Count">
      <summary>指定集合中项的数目。</summary>
      <returns>集合中的项数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetEnumerator">
      <summary>公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.Int32)">
      <summary>返回集合中指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <returns>集合中指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
      <param name="index">集合中 <see cref="T:System.Data.Common.DbParameter" /> 的索引。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.String)">
      <summary>返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)">
      <summary>返回指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</summary>
      <returns>指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
      <param name="value">集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.String)">
      <summary>返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的指定索引插入到集合中指定的索引位置。</summary>
      <param name="index">插入 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引位置。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsFixedSize">
      <summary>指定该集合的大小是否是固定的。</summary>
      <returns>如果该集合具有固定大小，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsReadOnly">
      <summary>指定该集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsSynchronized">
      <summary>指定集合是否是同步的。</summary>
      <returns>如果集合是同步的，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.Int32)">
      <summary>获取并设置指定索引处的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
      <param name="index">参数的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.String)">
      <summary>获取并设置具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
      <param name="parameterName">参数的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引位置的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 对象所处的索引位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)">
      <summary>从集合中删除具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
      <summary>将指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象设置为一个新值。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 对象所处的索引位置。</param>
      <param name="value">新 <see cref="T:System.Data.Common.DbParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
      <summary>将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象设置为新的值。</summary>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
      <param name="value">新 <see cref="T:System.Data.Common.DbParameter" /> 值。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.SyncRoot">
      <summary>指定要用于同步对集合访问的 <see cref="T:System.Object" />。</summary>
      <returns>要用于同步对 <see cref="T:System.Data.Common.DbParameterCollection" /> 访问的 <see cref="T:System.Object" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)">
      <summary>获取或设置指定索引处的参数。</summary>
      <returns>指定索引处的 <see cref="T:System.Object" />。</returns>
      <param name="parameterName">要检索的参数的名称。</param>
    </member>
    <member name="T:System.Data.Common.DbProviderConfigurationHandler">
      <summary>任何提供程序都可使用此类以支持特定于提供程序的配置部分。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderConfigurationHandler.#ctor">
      <summary>任何提供程序都可使用此类以支持特定于提供程序的配置部分。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建一个新的 <see cref="System.Collections.Specialized.NameValueCollection" /> 表达式。</summary>
      <returns>新表达式。</returns>
      <param name="parent">此类型支持 .NET Framework 基础结构，不应从代码直接使用。</param>
      <param name="configContext">此类型支持 .NET Framework 基础结构，不应从代码直接使用。</param>
      <param name="section">此类型支持 .NET Framework 基础结构，不应从代码直接使用。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Common.DbProviderFactories">
      <summary>表示一组静态方法，这些方法用于创建 <see cref="T:System.Data.Common.DbProviderFactory" /> 类的一个或多个实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.Common.DbConnection)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <returns>指定连接的 <see cref="T:System.Data.Common.DbProviderFactory" /> 实例。</returns>
      <param name="connection">要使用的连接。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.DataRow)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <returns>指定 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</returns>
      <param name="providerRow">
        <see cref="T:System.Data.DataRow" /> 包含提供程序的配置信息。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <returns>指定提供程序名称的 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</returns>
      <param name="providerInvariantName">提供程序的固定名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactoryClasses">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，其中包含有关实现 <see cref="T:System.Data.Common.DbProviderFactory" /> 的所有已安装提供程序的信息。</summary>
      <returns>返回一个 <see cref="T:System.Data.DataTable" />，它包含其中包含以下数据的 <see cref="T:System.Data.DataRow" /> 对象。 列序号 列名称 描述 0名称 数据提供程序的可识别名称。 1描述 数据提供程序的可识别描述。 2InvariantName 可以以编程方式用于引用数据提供程序的名称。 3AssemblyQualifiedName 工厂类的完全限定名，它包含用于实例化该对象的足够的信息。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Common.DbProviderFactoriesConfigurationHandler">
      <summary>此类型支持 .NET Framework 基础结构，不应从代码直接使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactoriesConfigurationHandler.#ctor">
      <summary>此类型支持 .NET Framework 基础结构，不应从代码直接使用。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactoriesConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>此类型支持 .NET Framework 基础结构，不应从代码直接使用。</summary>
      <returns>此类型支持 .NET Framework 基础结构，不应从代码直接使用。</returns>
      <param name="parent">此类型支持 .NET Framework 基础结构，不应从代码直接使用。</param>
      <param name="configContext">此类型支持 .NET Framework 基础结构，不应从代码直接使用。</param>
      <param name="section">此类型支持 .NET Framework 基础结构，不应从代码直接使用。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Common.DbProviderFactory">
      <summary>表示一组方法，这些方法用于创建提供程序对数据源类的实现的实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderFactory" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator">
      <summary>指定特定的 <see cref="T:System.Data.Common.DbProviderFactory" /> 是否支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbProviderFactory" /> 的实例支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommand">
      <summary>返回实现 <see cref="T:System.Data.Common.DbCommand" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的新实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommandBuilder">
      <summary>返回实现 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 的新实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnection">
      <summary>返回实现 <see cref="T:System.Data.Common.DbConnection" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 的新实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder">
      <summary>返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的新实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataAdapter">
      <summary>返回实现 <see cref="T:System.Data.Common.DbDataAdapter" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 的新实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator">
      <summary>返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 的新实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateParameter">
      <summary>返回实现 <see cref="T:System.Data.Common.DbParameter" /> 类的提供程序的类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的新实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回提供程序的类的新实例，该实例可实现提供程序的 <see cref="T:System.Security.CodeAccessPermission" /> 类的版本。</summary>
      <returns>指定 <see cref="T:System.Security.Permissions.PermissionState" /> 的 <see cref="T:System.Security.CodeAccessPermission" /> 对象。</returns>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute">
      <summary>标识在设置提供程序特定的类型时，使用强类型参数类中的哪个提供程序特定的属性。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute" /> 类的新实例。</summary>
      <param name="isProviderSpecificTypeProperty">指定该属性是否是提供程序特定的属性。</param>
    </member>
    <member name="P:System.Data.Common.DbProviderSpecificTypePropertyAttribute.IsProviderSpecificTypeProperty">
      <summary>指示特性化属性是否为特定于提供程序的类型。</summary>
      <returns>如果此特性所应用的属性是特定于提供程序的类型属性，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Data.Common.DbTransaction">
      <summary>事务的基类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbTransaction.#ctor">
      <summary>初始化新的 <see cref="T:System.Data.Common.DbTransaction" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbTransaction.Connection">
      <summary>指定与该事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</summary>
      <returns>与该事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbTransaction.DbConnection">
      <summary>指定与该事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</summary>
      <returns>与该事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose">
      <summary>释放 <see cref="T:System.Data.Common.DbTransaction" /> 使用的非托管资源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">如果为 true，此方法将释放由此 <see cref="T:System.Data.Common.DbTransaction" /> 引用的任何托管对象所保留的全部资源。</param>
    </member>
    <member name="P:System.Data.Common.DbTransaction.IsolationLevel">
      <summary>指定该事务的 <see cref="T:System.Data.IsolationLevel" />。</summary>
      <returns>该事务的 <see cref="T:System.Data.IsolationLevel" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection">
      <summary>获取与该事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象；如果该事务不再有效，则为 null 引用。</summary>
      <returns>与该事务关联的 <see cref="T:System.Data.Common.DbConnection" /> 对象。</returns>
    </member>
    <member name="T:System.Data.Common.GroupByBehavior">
      <summary>指定 GROUP BY 子句中的列与 SELECT 语句的选择列表中的非聚集列之间的关系。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.ExactMatch">
      <summary>GROUP BY 子句必须包含选择列表中的所有非聚集列，而且不能包含选择列表中没有的其他列。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.MustContainAll">
      <summary>GROUP BY 子句必须包含选择列表中的所有非聚集列，而且可以包含选择列表中没有的其他列。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.NotSupported">
      <summary>不支持 GROUP BY 子句。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unknown">
      <summary>对 GROUP BY 子句的支持是未知的。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unrelated">
      <summary>GROUP BY 子句中的列和 SELECT 列表中的非聚集列之间不存在关系。 您可以按任何列分组。</summary>
    </member>
    <member name="T:System.Data.Common.IdentifierCase">
      <summary>指定在搜索系统目录时，数据源如何处理标识符。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Insensitive">
      <summary>搜索系统目录时，数据源忽略标识符的大小写。 标识符“ab”和“AB”匹配。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Sensitive">
      <summary>搜索系统目录时，数据源区分标识符的大小写。 标识符“ab”和“AB”不匹配。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Unknown">
      <summary>数据源的标识符大小写规则不明确，无法识别此信息。</summary>
    </member>
    <member name="T:System.Data.Common.RowUpdatedEventArgs">
      <summary>为 .NET Framework 数据提供程序的 RowUpdated 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">所执行的 SQL 语句的类型。</param>
      <param name="tableMapping">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Command">
      <summary>获取调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</summary>
      <returns>当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[])">
      <summary>将对已修改的行的引用复制到提供的数组中。</summary>
      <param name="array">要复制到其中的 <see cref="T:System.Data.DataRow" /> 的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>将对已修改的行的引用复制到提供的数组中。</summary>
      <param name="array">要复制到其中的 <see cref="T:System.Data.DataRow" /> 的数组。</param>
      <param name="arrayIndex">要在数组中开始粘贴的位置的索引。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Errors">
      <summary>获取当 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行时 .NET Framework 数据提供程序生成的任何错误。</summary>
      <returns>当 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行时 .NET Framework 数据提供程序生成的错误。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RecordsAffected">
      <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
      <returns>已更改、插入或删除的行数；如果没有任何行受到影响或语句失败，则为 0；-1 表示 SELECT 语句。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Row">
      <summary>获取通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.DataRow" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RowCount">
      <summary>获取在一批更新后的记录中处理的行数。</summary>
      <returns>指定已处理的行数的 int。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.StatementType">
      <summary>获取所执行的 SQL 语句的类型。</summary>
      <returns>所执行的 SQL 语句的类型。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Status">
      <summary>获取 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 属性的 <see cref="T:System.Data.UpdateStatus" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 值之一。 默认值为 Continue。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.TableMapping">
      <summary>获取通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</summary>
      <returns>通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.Common.RowUpdatingEventArgs">
      <summary>为 .NET Framework 数据提供程序的 RowUpdating 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Common.RowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">要进行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">要执行的 SQL 语句的类型。</param>
      <param name="tableMapping">要通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.BaseCommand">
      <summary>获取或设置此类的实例的 <see cref="T:System.Data.IDbCommand" /> 对象。</summary>
      <returns>要在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中执行的 <see cref="T:System.Data.IDbCommand" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Command">
      <summary>获取要在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 操作过程中执行的 <see cref="T:System.Data.IDbCommand" />。</summary>
      <returns>要在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中执行的 <see cref="T:System.Data.IDbCommand" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Errors">
      <summary>获取当 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行时 .NET Framework 数据提供程序生成的任何错误。</summary>
      <returns>当 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行时 .NET Framework 数据提供程序生成的错误。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Row">
      <summary>获取要作为插入、更新或删除操作的一部分发送到服务器的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>要通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.DataRow" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.StatementType">
      <summary>获取要执行的 SQL 语句的类型。</summary>
      <returns>要执行的 SQL 语句的类型。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Status">
      <summary>获取或设置 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 属性的 <see cref="T:System.Data.UpdateStatus" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 值之一。 默认值为 Continue。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.TableMapping">
      <summary>获取要通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</summary>
      <returns>要通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.Common.SchemaTableColumn">
      <summary>描述数据库表的架构的列元数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.AllowDBNull">
      <summary>指定是否允许值 DBNull。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseColumnName">
      <summary>指定架构表中的列的名称。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseSchemaName">
      <summary>指定架构表中的架构的名称。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseTableName">
      <summary>指定架构表中的表的名称。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnName">
      <summary>指定架构表中的列的名称。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnOrdinal">
      <summary>指定列的序号。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnSize">
      <summary>指定列的大小。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.DataType">
      <summary>指定列中数据的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsAliased">
      <summary>指定该列是否具有别名。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsExpression">
      <summary>指定该列是否是一个表达式。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsKey">
      <summary>指定该列是否是表的一个键。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsLong">
      <summary>指定该列是否包含 long 型数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsUnique">
      <summary>指定是否有唯一的约束应用于此列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NonVersionedProviderType">
      <summary>指定该列特定于无版本提供程序的数据类型。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericPrecision">
      <summary>指定列数据的精度（如果是数值数据）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericScale">
      <summary>指定列数据的小数位数（如果是数值数据）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ProviderType">
      <summary>指定列的提供程序特定的数据类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.SchemaTableOptionalColumn">
      <summary>描述数据库表的架构的可选列元数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementSeed">
      <summary>指定新标识列的序列被分配的值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementStep">
      <summary>指定标识列中的值之间的增量。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseCatalogName">
      <summary>与最新的查询的结果相关联的目录的名称。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseColumnNamespace">
      <summary>列的命名空间。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseServerName">
      <summary>列的服务器名。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseTableNamespace">
      <summary>包含列的表的命名空间。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ColumnMapping">
      <summary>指定列的映射。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.DefaultValue">
      <summary>列的默认值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.Expression">
      <summary>用于计算该列的表达式。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsAutoIncrement">
      <summary>指定列中的列值是否自动递增。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsHidden">
      <summary>指定该列是否是隐藏的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsReadOnly">
      <summary>指定该列是否是只读的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsRowVersion">
      <summary>指定该列是否包含行版本信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ProviderSpecificDataType">
      <summary>指定列的提供程序特定的数据类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Common.SupportedJoinOperators">
      <summary>指定数据源支持何种类型的 Transact-SQL 联接语句。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.FullOuter">
      <summary>数据源支持完全外部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.Inner">
      <summary>数据源支持内部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.LeftOuter">
      <summary>数据源支持左外部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.None">
      <summary>数据源不支持联接查询。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.RightOuter">
      <summary>数据源支持右外部联接。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcCommand">
      <summary>表示要对数据源执行的 SQL 语句或存储过程。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.#ctor(System.String)">
      <summary>用查询文本初始化 <see cref="T:System.Data.Odbc.OdbcCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection)">
      <summary>用查询文本和 <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象初始化 <see cref="T:System.Data.Odbc.OdbcCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">一个 <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象，它表示与数据源的连接。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction)">
      <summary>初始化具有查询文本、<see cref="T:System.Data.Odbc.OdbcConnection" /> 对象和 <see cref="P:System.Data.Odbc.OdbcCommand.Transaction" /> 的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">一个 <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象，它表示与数据源的连接。</param>
      <param name="transaction">在其中执行 <see cref="T:System.Data.Odbc.OdbcCommand" /> 的事务。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.Cancel">
      <summary>尝试取消执行 <see cref="T:System.Data.Odbc.OdbcCommand" />。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.CommandText">
      <summary>获取或设置要对数据源执行的 SQL 语句或存储过程。</summary>
      <returns>要执行的 SQL 语句或存储过程。 默认值为空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.CommandTimeout">
      <summary>获取或设置在终止对执行命令的尝试并生成错误之前的等待时间。</summary>
      <returns>等待命令执行的时间（以秒为单位）。 默认值为 30 秒。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.CommandType">
      <summary>获取或设置一个指示如何解释 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" /> 属性的值。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 Text。</returns>
      <exception cref="T:System.ArgumentException">该值不是有效的 <see cref="T:System.Data.CommandType" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.Odbc.OdbcCommand" /> 的此实例使用的 <see cref="T:System.Data.Odbc.OdbcConnection" />。</summary>
      <returns>与数据源的连接。 默认为空值。</returns>
      <exception cref="T:System.InvalidOperationException">在事务进行过程中更改了 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> 属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.DesignTimeVisible">
      <summary>获取或设置一个值，指示该命令对象在自定义界面控件中是否应可见。</summary>
      <returns>如果该命令对象应在控件中可见，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ExecuteNonQuery">
      <summary>针对 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> 执行 SQL 语句并返回受影响的行数。</summary>
      <returns>对于 UPDATE、INSERT 和 DELETE 语句，返回值为该命令所影响的行数。 对于其他所有类型的语句，返回值为 -1。</returns>
      <exception cref="T:System.InvalidOperationException">连接不存在。 - 或 - 连接未打开。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ExecuteReader">
      <summary>将 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" /> 发送到 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> 并生成一个 <see cref="T:System.Data.Odbc.OdbcDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcDataReader" /> 对象。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" /> 发送到 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" />，并使用 CommandBehavior 值之一构造 <see cref="T:System.Data.Odbc.OdbcDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcDataReader" /> 对象。</returns>
      <param name="behavior">System.Data.CommandBehavior 值之一。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ExecuteScalar">
      <summary>执行查询，并返回查询所返回的结果集中第一行的第一列。 忽略其他列或行。</summary>
      <returns>结果集中第一行的第一列或 null 引用（如果结果集为空）。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</summary>
      <returns>SQL 语句或存储过程的参数。 默认值为空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.Prepare">
      <summary>在数据源中创建命令的准备好的或已编译的版本。</summary>
      <exception cref="T:System.InvalidOperationException">未设置 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" />。 - 或 - <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> 不为<see cref="!:System.Data.Odbc.OdbcConnection.Open" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ResetCommandTimeout">
      <summary>将 <see cref="P:System.Data.Odbc.OdbcCommand.CommandTimeout" /> 属性重置为默认值。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T;System.Object" />。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.Transaction">
      <summary>获取或设置将在其中执行 <see cref="T:System.Data.Odbc.OdbcCommand" /> 的 <see cref="T:System.Data.Odbc.OdbcTransaction" />。</summary>
      <returns>一个 <see cref="T:System.Data.Odbc.OdbcTransaction" />。 默认为空值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.UpdatedRowSource">
      <summary>获取或设置一个值，该值指定 Update 方法应如何将命令结果应用于 DataRow。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcCommandBuilder">
      <summary>自动生成用于协调对 <see cref="T:System.Data.DataSet" /> 的更改与关联的数据源的单表命令。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.#ctor(System.Data.Odbc.OdbcDataAdapter)">
      <summary>使用关联的 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 对象初始化 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" /> 类的新实例。</summary>
      <param name="adapter">与此 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" /> 关联的 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 对象。</param>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommandBuilder.DataAdapter">
      <summary>获取或设置此 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" /> 对象将为其生成 SQL 语句的 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 对象。</summary>
      <returns>与此 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" /> 关联的 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.DeriveParameters(System.Data.Odbc.OdbcCommand)">
      <summary>从在 <see cref="T:System.Data.Odbc.OdbcCommand" /> 中指定的存储过程中检索参数信息并填充指定的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象的 <see cref="P:System.Data.Odbc.OdbcCommand.Parameters" /> 集合。</summary>
      <param name="command">引用将从其中导出参数信息的存储过程的 <see cref="T:System.Data.Odbc.OdbcCommand" />。 将派生参数添加到 <see cref="T:System.Data.Odbc.OdbcCommand" /> 的 <see cref="P:System.Data.Odbc.OdbcCommand.Parameters" /> 集合中。</param>
      <exception cref="T:System.InvalidOperationException">基础 ODBC 驱动程序不支持返回存储过程参数信息，或者命令文本不是有效的存储过程名称，或者指定的 <see cref="T:System.Data.CommandType" /> 不是 CommandType.StoredProcedure。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand">
      <summary>获取在数据源中执行删除操作所需的自动生成的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取在数据源中执行删除操作所需的自动生成的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则如有可能，将生成与列名相匹配的参数名称。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand">
      <summary>获取在数据源中执行插入操作所需的自动生成的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取在数据源中执行插入操作所需的自动生成的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则如有可能，将生成与列名相匹配的参数名称。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand">
      <summary>获取在数据源中执行更新操作所需的自动生成的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取在数据源中执行更新操作所需的自动生成的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则如有可能，将生成与列名相匹配的参数名称。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.QuoteIdentifier(System.String)">
      <summary>给定了具有正确的目录大小写设置且不带引号的标识符时，返回该标识符的正确的带引号形式。 这包括正确地转义该标识符中的任何嵌入引号。</summary>
      <returns>带引号的标识符版本。 标识符内的嵌入引号被正确地转义。</returns>
      <param name="unquotedIdentifier">不带引号的原始标识符。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.QuoteIdentifier(System.String,System.Data.Odbc.OdbcConnection)">
      <summary>给定了具有正确的目录大小写设置且不带引号的标识符时，返回该标识符的正确的带引号形式。 这包括正确地转义该标识符中的任何嵌入引号。</summary>
      <returns>带引号的标识符版本。 标识符内的嵌入引号被正确地转义。</returns>
      <param name="unquotedIdentifier">不带引号的原始标识符。</param>
      <param name="connection">当连接是通过时，会导致托管包装从获取 ODBC 驱动程序的引号字符，调用 SQLGetInfo （SQL_IDENTIFIER_QUOTE_CHAR）。 如果连接未通过时，使用从 <see cref="P:System.Data.Common.DbCommandBuilder.QuotePrefix" /> 和 <see cref="P:System.Data.Common.DbCommandBuilder.QuoteSuffix" />的值中引用该字符串。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>给定了带引号的标识符时，返回该标识符的正确的不带引号形式，包括正确地非转义该标识符中的任何嵌入引号。</summary>
      <returns>不带引号的标识符，带有已正确进行非转义的嵌入引号。</returns>
      <param name="quotedIdentifier">其嵌入引号将被移除的标识符。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.UnquoteIdentifier(System.String,System.Data.Odbc.OdbcConnection)">
      <summary>给定了带引号的标识符时，返回该标识符的正确的不带引号形式，包括正确地非转义该标识符中的任何嵌入引号。</summary>
      <returns>不带引号的标识符，带有已正确进行非转义的嵌入引号。</returns>
      <param name="quotedIdentifier">其嵌入引号将被移除的标识符。</param>
      <param name="connection">
        <see cref="T:System.Data.Odbc.OdbcConnection" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Odbc.OdbcConnection">
      <summary>表示到数据源的连接是打开的。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.#ctor(System.String)">
      <summary>使用指定的连接字符串初始化 <see cref="T:System.Data.Odbc.OdbcConnection" /> 类的新实例。</summary>
      <param name="connectionString">用于打开数据源的连接。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.BeginTransaction">
      <summary>在数据源中开始事务。</summary>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.InvalidOperationException">事务当前是活动的。 不支持并行事务。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>在数据源中用指定的 <see cref="T:System.Data.IsolationLevel" /> 值开始事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="isolevel">该连接的事务隔离级别。 若未指定隔离级别，将使用驱动程序的默认隔离级别。</param>
      <exception cref="T:System.InvalidOperationException">事务当前是活动的。 不支持并行事务。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.ChangeDatabase(System.String)">
      <summary>更改与打开的 <see cref="T:System.Data.Odbc.OdbcConnection" /> 关联的当前数据库。</summary>
      <param name="value">数据库名称。</param>
      <exception cref="T:System.ArgumentException">数据库名称无效。</exception>
      <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
      <exception cref="T:System.Data.Odbc.OdbcException">不能更改数据库。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.Close">
      <summary>关闭到数据源的连接。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.ConnectionString">
      <summary>获取或设置用于打开数据源的字符串。</summary>
      <returns>包括一些需要建立初始连接的设置（例如，数据源名称）的 ODBC 驱动程序连接字符串。 默认值为空字符串 ("")。 最大长度是 1024 个字符。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.ConnectionTimeout">
      <summary>获取或设置在尝试建立连接时终止尝试并生成错误之前所等待的时间。</summary>
      <returns>等待连接打开的时间（以秒为单位）。 默认值为 15 秒。</returns>
      <exception cref="T:System.ArgumentException">所设置的值小于 0。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.CreateCommand">
      <summary>创建并返回一个与该 <see cref="T:System.Data.Odbc.OdbcConnection" /> 关联的 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.Database">
      <summary>获取当前数据库或连接打开后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称。 在打开连接前，默认值一直为空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.DataSource">
      <summary>获取数据源的服务器名或文件名。</summary>
      <returns>数据源的服务器名或文件名。 在打开连接前，默认值一直为空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.Driver">
      <summary>获取为当前连接指定的 ODBC 驱动程序名称。</summary>
      <returns>ODBC 驱动程序的名称。 它通常是 DLL 名称（例如 Sqlsrv32.dll）。 在打开连接前，默认值一直为空字符串 ("")。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.GetSchema">
      <summary>返回此 <see cref="T:System.Data.Odbc.OdbcConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.GetSchema(System.String)">
      <summary>使用架构名称的指定名称，返回此 <see cref="T:System.Data.Odbc.OdbcConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="collectionName">指定要返回的架构的名称。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.GetSchema(System.String,System.String[])">
      <summary>使用指定字符串作为架构名称，指定字符串数组作为限制值，返回此 <see cref="T:System.Data.Odbc.OdbcConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">为请求的架构指定一组限制值。</param>
    </member>
    <member name="E:System.Data.Odbc.OdbcConnection.InfoMessage">
      <summary>在 ODBC 驱动程序发送警告或信息性消息时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.Open">
      <summary>使用 <see cref="P:System.Data.Odbc.OdbcConnection.ConnectionString" /> 指定的属性设置打开到数据源的连接。</summary>
      <exception cref="T:System.NotSupportedException">此方法的功能在基类中不受支持，而必须在派生类中实现。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.ReleaseObjectPool">
      <summary>指示当释放最后的基础连接时可以释放 ODBC 驱动程序管理器环境句柄。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.ServerVersion">
      <summary>获取一个包含客户端所连接到的服务器的版本的字符串。</summary>
      <returns>连接的服务器的版本。</returns>
      <exception cref="T:System.InvalidOperationException">连接处于关闭状态。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.State">
      <summary>获取连接的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值的按位组合。 默认值为 Closed。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcConnectionStringBuilder">
      <summary>为创建和管理连接字符串（由 <see cref="T:System.Data.Odbc.OdbcConnection" /> 类使用）的内容提供了一种简单方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 类的新实例。 所提供的连接字符串为实例的内部连接信息提供数据。</summary>
      <param name="connectionString">对象内部连接信息的基础。 分析为键/值对。</param>
      <exception cref="T:System.ArgumentException">连接字符串的格式错误（可能是键/值对中缺少必需的“=”）。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 实例的内容。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 是否包含特定键。</summary>
      <returns>如果 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnectionStringBuilder.Driver">
      <summary>获取或设置与连接关联的 ODBC 驱动程序的名称。</summary>
      <returns>
        <see cref="P:System.Data.Odbc.OdbcConnectionStringBuilder.Driver" /> 属性的值；或如果未提供任何值，则为 String.Empty。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnectionStringBuilder.Dsn">
      <summary>获取或设置与连接关联的数据源名称 (DSN) 的名称。</summary>
      <returns>
        <see cref="P:System.Data.Odbc.OdbcConnectionStringBuilder.Dsn" /> 属性的值；或如果未提供任何值，则为 String.Empty。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键相关联的值。 在 C# 中，此属性为索引器。</summary>
      <returns>与指定的键相关联的值。</returns>
      <param name="keyword">要获取或设置的项的键。</param>
      <exception cref="T:System.ArgumentException">连接字符串的格式错误（可能是键/值对中缺少必需的“=”）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnectionStringBuilder.Keys">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中的键。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.Remove(System.String)">
      <summary>移除 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 实例中具有指定键的项。</summary>
      <returns>如果该键存在于连接字符串中并被移除，则为 true；如果该键不存在，则为 false。</returns>
      <param name="keyword">要从此 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中的连接字符串中移除的键/值对中的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中检索与所提供的键对应的值。</summary>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则为 true；否则为 false。</returns>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword." /> 对应的值</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Odbc.OdbcDataAdapter">
      <summary>表示数据命令集和到数据源的连接，它们用于填充 <see cref="T:System.Data.DataSet" /> 以及更新该数据源。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.#ctor(System.Data.Odbc.OdbcCommand)">
      <summary>用指定的 SQL SELECT 语句初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 类的新实例。</summary>
      <param name="selectCommand">
        <see cref="T:System.Data.Odbc.OdbcCommand" />，它是一个 SQL SELECT 语句或存储过程，被设置为 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 的 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" /> 属性。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.#ctor(System.String,System.Data.Odbc.OdbcConnection)">
      <summary>用一个 SQL SELECT 语句和一个 <see cref="T:System.Data.Odbc.OdbcConnection" /> 初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 类的新实例。</summary>
      <param name="selectCommandText">一个字符串，表示将由 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 的 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" /> 属性使用的 SQL SELECT 语句或存储过程。</param>
      <param name="selectConnection">表示连接的 <see cref="T:System.Data.Odbc.OdbcConnection" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.#ctor(System.String,System.String)">
      <summary>使用 SQL SELECT 语句和连接字符串初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 类的新实例。</summary>
      <param name="selectCommandText">一个字符串，表示将由 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 的 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" /> 属性使用的 SQL SELECT 语句或存储过程。</param>
      <param name="selectConnectionString">连接字符串。</param>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.DeleteCommand">
      <summary>获取或设置 SQL 语句或存储过程，用于删除数据源中的记录。</summary>
      <returns>在更新操作期间使用的 <see cref="T:System.Data.Odbc.OdbcCommand" />，它用来删除数据源中与 <see cref="T:System.Data.DataSet" /> 中已删除的行相对应的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.InsertCommand">
      <summary>获取或设置 SQL 语句或存储过程，用于将新记录插入到数据源中。</summary>
      <returns>在更新操作期间使用的 <see cref="T:System.Data.Odbc.OdbcCommand" />，它用于将与 <see cref="T:System.Data.DataSet" /> 中的新行相对应的记录插入到数据源中。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Data.Odbc.OdbcDataAdapter.RowUpdated">
      <summary>在针对数据源执行命令之后的更新操作期间发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.Odbc.OdbcDataAdapter.RowUpdating">
      <summary>在对数据源执行命令前的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand">
      <summary>获取或设置 SQL 语句或存储过程，用于选择数据源中的记录。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" />，在填充操作过程中用于从数据源选择记录以放置在 <see cref="T:System.Data.DataSet" /> 中。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbDataAdapter.DeleteCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" />，在更新过程中，用于针对数据集中删除的行删除数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbDataAdapter.InsertCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" />，在更新过程中，用于插入数据源中的记录，以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbDataAdapter.SelectCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" />，在更新过程中，用于选择数据源中的记录，以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbDataAdapter.UpdateCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" />，在更新过程中，用于针对数据集中修改的行更新数据源中的记录。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.UpdateCommand">
      <summary>获取或设置 SQL 语句或存储过程，用于更新数据源中的记录。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" />，在更新操作期间用于更新数据源中与 <see cref="T:System.Data.DataSet" /> 中修改的行相对应的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcDataReader">
      <summary>提供从数据源读取数据行的只进流的方法。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 对象。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.Depth">
      <summary>获取一个值，用于指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果不是位于有效的记录集中，则为 0；否则为当前记录的列数。 默认值为 -1。</returns>
      <exception cref="T:System.NotSupportedException">没有到数据源的当前连接。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetBoolean(System.Int32)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <returns>一个表示列值的布尔值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetByte(System.Int32)">
      <summary>获取指定列的字节形式的值。</summary>
      <returns>指定列的字节形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字节流作为数组从特定的缓冲区偏移量开始读入缓冲区。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">字段中读取操作开始位置的索引。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">
        <paramref name="buffer" /> 中写入操作开始位置的索引。</param>
      <param name="length">要读取的字节数。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetChar(System.Int32)">
      <summary>获取指定列的字符形式的值。</summary>
      <returns>指定列的字符形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字符流作为数组从特定的缓冲区偏移量开始读入缓冲区。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">行中读取操作开始位置的索引。</param>
      <param name="buffer">要向其中复制数据的缓冲区。</param>
      <param name="bufferIndex">
        <paramref name="buffer" /> 中写入操作开始位置的索引。</param>
      <param name="length">要读取的字符数。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDataTypeName(System.Int32)">
      <summary>获取源数据类型的名称。</summary>
      <returns>源数据类型的名称。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDate(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</summary>
      <returns>指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</summary>
      <returns>指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 对象形式的值。</summary>
      <returns>指定列的 <see cref="T:System.Decimal" /> 对象形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDouble(System.Int32)">
      <summary>获取指定列的双精度浮点数形式的值。</summary>
      <returns>指定列的双精度浮点数形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetFieldType(System.Int32)">
      <summary>获取是对象的数据类型的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Type" />，它是对象的数据类型。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetFloat(System.Int32)">
      <summary>获取指定列的单精度浮点数形式的值。</summary>
      <returns>指定列的单精度浮点数形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetGuid(System.Int32)">
      <summary>获取指定列的值作为全局唯一标识符 (GUID)。</summary>
      <returns>指定列的 GUID 形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetInt16(System.Int32)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <returns>指定列的 16 位有符号整数形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetInt32(System.Int32)">
      <summary>获取指定列的 32 位有符号整数形式的值。</summary>
      <returns>指定列的 32 位有符号整数形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetInt64(System.Int32)">
      <summary>获取指定列的 64 位有符号整数形式的值。</summary>
      <returns>指定列的 64 位有符号整数形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetName(System.Int32)">
      <summary>获取指定列的名称。</summary>
      <returns>指定列的名称的字符串。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)">
      <summary>在给定列名称的情况下获取列序号。</summary>
      <returns>从零开始的列序号。</returns>
      <param name="value">列的名称。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 的列元数据。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Odbc.OdbcDataReader" /> 是关闭的。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetString(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.String" /> 形式的值。</summary>
      <returns>指定列的值，为 <see cref="T:System.String" /> 形式。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.TimeSpan" /> 对象形式的值。</summary>
      <returns>指定列的 <see cref="T:System.TimeSpan" /> 对象形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetValue(System.Int32)">
      <summary>获取以本机格式表示的指定序号处的列的值。</summary>
      <returns>要返回的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">将特性列复制到的 <see cref="T:System.Object" /> 类型的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.HasRows">
      <summary>获取一个值，用于指示 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 是否包含一行或多行。</summary>
      <returns>如果 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 包含一行或多行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.IsClosed">
      <summary>指示 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 是否关闭。</summary>
      <returns>如果 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 已关闭，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在的或已丢失的值。</summary>
      <returns>如果指定的列值与 <see cref="T:System.DBNull" /> 等效，则为 true；否则为 false。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.Item(System.Int32)">
      <summary>在给定列序号的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="i">列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.Item(System.String)">
      <summary>在给定列名称的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="value">列名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.NextResult">
      <summary>读取批处理 SQL 语句的结果时，使 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 前进到下一个结果。</summary>
      <returns>如果存在多个结果集，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.Read">
      <summary>使 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 前进到下一条记录。</summary>
      <returns>如果存在多个行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.RecordsAffected">
      <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
      <returns>更改、插入或删除的行数。对于 SELECT 语句为 -1；如果没影响任何行或该语句失败，则为 0。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcError">
      <summary>收集与数据源返回的警告或错误有关的信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcError.Message">
      <summary>获取错误的简短说明。</summary>
      <returns>错误说明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcError.NativeError">
      <summary>获取数据源特定的错误信息。</summary>
      <returns>数据源特定的错误信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcError.Source">
      <summary>获取生成错误的驱动程序的名称。</summary>
      <returns>生成错误的驱动程序的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcError.SQLState">
      <summary>获取符合数据库的 ANSI SQL 标准的五字符错误代码。</summary>
      <returns>五个字符的错误代码，它确定错误的来源（如果错误可能来自不止一个地方）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcError.ToString">
      <summary>获取错误信息的完整文本。</summary>
      <returns>错误信息的完整文本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcErrorCollection">
      <summary>收集 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 生成的所有错误。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcErrorCollection.CopyTo(System.Array,System.Int32)">
      <summary>从数组中指定的索引位置开始，将 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 的元素复制到数组。</summary>
      <param name="array">要将元素复制到其中的数组。</param>
      <param name="i">
        <paramref name="array" /> 的起始索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中元素的数量之和大于该数组的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <paramref name="array" /> 无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcErrorCollection.CopyTo(System.Data.Odbc.OdbcError[],System.Int32)">
      <summary>从指定的目标索引处开始，将当前 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中的所有元素复制到指定的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中。</summary>
      <param name="array">
        <see cref="T:System.Data.Odbc.OdbcErrorCollection" />，它是从当前 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 复制的元素的目标位置。</param>
      <param name="i">一个 32 位整数，它表示 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中复制开始处的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcErrorCollection.Count">
      <summary>获取集合中错误的数目。</summary>
      <returns>集合中错误的总数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcErrorCollection.GetEnumerator">
      <summary>返回一个对象，该对象实现 <see cref="T:" /><see cref="System.Collections.IEnumerator" /> 接口，并可循环访问 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 对象。</summary>
      <returns>一个对象，该对象实现 <see cref="T:" /><see cref="System.Collections.IEnumerator" /> 接口，并可循环访问 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcErrorCollection.Item(System.Int32)">
      <summary>获取位于指定索引处的错误。</summary>
      <returns>包含在指定索引位置的错误的 <see cref="T:System.Data.Odbc.OdbcError" />。</returns>
      <param name="i">要检索的错误的从零开始的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcErrorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcErrorCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcException">
      <summary>ODBC 数据源返回警告或错误时生成的异常。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcException.Errors">
      <summary>获取一个或多个 <see cref="T:System.Data.Odbc.OdbcError" /> 对象的集合，这些对象提供有关用于 ODBC 的 .NET Framework 数据提供程序生成的异常的详细信息。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcError" /> 类的收集的实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>此成员重写 <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="si" /> 参数是空引用（Visual Basic 中为 Nothing）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcException.Source">
      <summary>获取生成错误的 ODBC 驱动程序的名称。</summary>
      <returns>生成错误的 ODBC 驱动程序名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcFactory">
      <summary>表示一组方法，这些方法用于创建 ODBC 提供程序实现数据源类的实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateCommand">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbCommand" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbCommand" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateCommandBuilder">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateConnection">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateConnectionStringBuilder">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateDataAdapter">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateParameter">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbParameter" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbParameter" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回强类型的 <see cref="T:System.Security.CodeAccessPermission" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Security.CodeAccessPermission" /> 实例。</returns>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举的成员。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcFactory.Instance">
      <summary>获取一个 <see cref="T:System.Data.Odbc.OdbcFactory" /> 实例，该实例可用于检索强类型的数据对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcInfoMessageEventArgs">
      <summary>为 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcInfoMessageEventArgs.Errors">
      <summary>获取从数据源发送的警告的集合。</summary>
      <returns>从数据源发送的警告的集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcInfoMessageEventArgs.Message">
      <summary>获取从数据库发送的全文本错误。</summary>
      <returns>错误的完整文本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcInfoMessageEventArgs.ToString">
      <summary>检索 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" /> 事件的字符串表示形式。</summary>
      <returns>表示 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" /> 事件的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcInfoMessageEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.Odbc.OdbcConnection" /> 的 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.Odbc.OdbcInfoMessageEventArgs" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcMetaDataCollectionNames">
      <summary>提供一个常数列表，该列表与 GetSchema 方法一起使用以检索元数据集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Columns">
      <summary>用于 GetSchema 方法的常数，表示 Columns 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Indexes">
      <summary>用于 GetSchema 方法的常数，表示 Indexes 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.ProcedureColumns">
      <summary>用于 GetSchema 方法的常数，表示 ProcedureColumns 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.ProcedureParameters">
      <summary>用于 GetSchema 方法的常数，表示 ProcedureParameters 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Procedures">
      <summary>用于 GetSchema 方法的常数，表示 Procedures 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Tables">
      <summary>用于 GetSchema 方法的常数，表示 Tables 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Views">
      <summary>用于 GetSchema 方法的常数，表示 Views 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcMetaDataColumnNames">
      <summary>提供静态值，这些值用于 <see cref="T:System.Data.DataTable" /> 中包含的 <see cref="T:System.Data.Odbc.OdbcMetaDataCollectionNames" /> 对象的列名称。 <see cref="T:System.Data.DataTable" /> 由 GetSchema 方法创建。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataColumnNames.BooleanFalseLiteral">
      <summary>由 GetSchema 方法用于创建 BooleanFalseLiteral 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataColumnNames.BooleanTrueLiteral">
      <summary>由 GetSchema 方法用于创建 BooleanTrueLiteral 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataColumnNames.SQLType">
      <summary>由 GetSchema 方法用于创建 SQLType 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcParameter">
      <summary>表示 <see cref="T:System.Data.Odbc.OdbcCommand" /> 的参数，还可以表示它到 <see cref="T:System.Data.DataColumn" /> 的映射。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType)">
      <summary>初始化使用参数名称和数据类型的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类的新实例。</summary>
      <param name="name">参数的名称。</param>
      <param name="type">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32)">
      <summary>初始化使用参数名称、数据类型和长度的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类的新实例。</summary>
      <param name="name">参数的名称。</param>
      <param name="type">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>使用参数名称、数据类型、长度、源列名称、参数方向、数值精度以及其他属性初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类的一个新实例。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="parameterDirection">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="isNullable">如果字段的值可为 null，则为 true；否则为 false。</param>
      <param name="precision">要将 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 解析为的小数点左右两侧的总位数。</param>
      <param name="scale">要将 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 解析为的总小数位数。</param>
      <param name="srcColumn">源列的名称。</param>
      <param name="srcVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
      <summary>使用参数名称、数据类型、长度、源列名称、参数方向、数值精度以及其他属性初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类的一个新实例。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="P:System.Data.Odbc.OdbcParameter.OdbcType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="parameterDirection">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="precision">要将 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 解析为的小数点左右两侧的总位数。</param>
      <param name="scale">要将 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 解析为的总小数位数。</param>
      <param name="sourceColumn">源列的名称。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="sourceColumnNullMapping">如果对应的源列可为 null，则为 true；否则为 false。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.String)">
      <summary>初始化使用参数名称、数据类型、长度和源列名称的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类的新实例。</summary>
      <param name="name">参数的名称。</param>
      <param name="type">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="sourcecolumn">源列的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Object)">
      <summary>初始化使用参数名称和 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类的新实例。</summary>
      <param name="name">参数的名称。</param>
      <param name="value">
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</param>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性未设置为有效的 <see cref="T:System.Data.DbType" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受空值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.OdbcType">
      <summary>获取或设置参数的 <see cref="T:System.Data.Odbc.OdbcType" />。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcType" /> 值，它是该参数的 <see cref="T:System.Data.Odbc.OdbcType" />。 默认值为 Nchar。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 的名称。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Precision">
      <summary>获取或设置用来表示 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 属性的最大位数。 默认值为 0，它表示数据提供程序设置 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 的精度。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.ResetDbType">
      <summary>重置与此 <see cref="T:System.Data.Odbc.OdbcParameter" /> 关联的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.ResetOdbcType">
      <summary>重置与此 <see cref="T:System.Data.Odbc.OdbcParameter" /> 关联的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Scale">
      <summary>获取或设置 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 解析为的小数位数。</summary>
      <returns>要将 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 解析为的小数位数。 默认值为 0。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Size">
      <summary>获取或设置列内数据的最大大小。</summary>
      <returns>列内数据的最大大小。 默认值是从参数值推导出的。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />。</summary>
      <returns>将用于设置此参数值的源列的名称。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。 这使 <see cref="T:System.Data.Common.DbCommandBuilder" /> 能够正确地为可为 null 的列生成 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；如果不可以为 null，则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.SourceVersion">
      <summary>获取或设置要在加载 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 时使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.ToString">
      <summary>获取一个包含 <see cref="P:System.Data.Odbc.OdbcParameter.ParameterName" /> 的字符串。</summary>
      <returns>一个包含 <see cref="P:System.Data.Odbc.OdbcParameter.ParameterName" /> 的字符串。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Value">
      <summary>获取或设置该参数的值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是该参数的值。 默认值为 null。</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcParameterCollection">
      <summary>表示与 <see cref="T:System.Data.Odbc.OdbcCommand" /> 相关的参数的集合以及各个参数到 <see cref="T:System.Data.DataSet" /> 中列的映射。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.Data.Odbc.OdbcParameter)">
      <summary>将指定的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</summary>
      <returns>新 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="value" /> 参数中指定的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 已经添加到这个或其他 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <returns>集合中新的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
      <param name="value">
        <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.String,System.Data.Odbc.OdbcType)">
      <summary>在给定参数名称和数据类型的情况下，将 <see cref="T:System.Data.Odbc.OdbcParameter" /> 添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.String,System.Data.Odbc.OdbcType,System.Int32)">
      <summary>在给定参数名称、数据类型和列长的情况下，将 <see cref="T:System.Data.Odbc.OdbcParameter" /> 添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.String,System.Data.Odbc.OdbcType,System.Int32,System.String)">
      <summary>在给定参数名称、数据类型、列长和源列名称的情况下，将 <see cref="T:System.Data.Odbc.OdbcParameter" /> 添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <param name="sourceColumn">源列的名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.String,System.Object)">
      <summary>在给定参数名称和参数值的情况下，将 <see cref="T:System.Data.Odbc.OdbcParameter" /> 添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 参数不是一个 <see cref="T:System.Data.Odbc.OdbcParameter" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.AddRange(System.Array)">
      <summary>向 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的末尾添加值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.AddRange(System.Data.Odbc.OdbcParameter[])">
      <summary>将 <see cref="T:System.Data.Odbc.OdbcParameter" /> 值的数组添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的末尾。</summary>
      <param name="values">要添加到集合中的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的数组。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>将一个值添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的末尾。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加的值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Clear">
      <summary>从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中移除所有 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Contains(System.Data.Odbc.OdbcParameter)">
      <summary>确定指定 <see cref="T:System.Data.Odbc.OdbcParameter" /> 是否在此 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.Odbc.OdbcParameter" /> 在集合中，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Contains(System.Object)">
      <summary>确定指定 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合中是否存在具有指定参数名称的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</summary>
      <returns>如果集合包含该参数，则为 true；否则为 false。</returns>
      <param name="value">要查找的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中（从指定的目标 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Array" /> 中复制开始处的索引。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.CopyTo(System.Data.Odbc.OdbcParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的所有元素复制到指定的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />，从指定目标索引处开始。</summary>
      <param name="array">
        <see cref="T:System.Data.Odbc.OdbcParameterCollection" />，它是从当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中复制开始处的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.Count">
      <summary>返回一个整数，包含 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的元素数。 只读。</summary>
      <returns>以整数形式表示的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的元素数。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的 <see cref="T:System.Collections.Generic.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.IndexOf(System.Data.Odbc.OdbcParameter)">
      <summary>获取指定的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 在集合中从零开始的位置。</returns>
      <param name="value">要在集合中查找的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.IndexOf(System.Object)">
      <summary>获取指定的 <see cref="T:System.Object" /> 在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Object" />（它是 <see cref="T:System.Data.Odbc.OdbcParameter" />）在集合中从零开始的位置。</returns>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的位置。</summary>
      <returns>具有指定的区分大小写的名称的指定 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的从零开始的位置。</returns>
      <param name="parameterName">要查找的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的区分大小写的名称。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Insert(System.Int32,System.Data.Odbc.OdbcParameter)">
      <summary>将 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象插入 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入对象。</param>
      <param name="value">要插入到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将 <see cref="T:System.Object" /> 插入 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入对象。</param>
      <param name="value">要插入 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的大小是否是固定的。 只读。</summary>
      <returns>如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 是否是同步的。 只读。</summary>
      <returns>如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 已同步，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</returns>
      <param name="index">要检索的参数的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.Item(System.String)">
      <summary>获取或设置具有指定名称的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</returns>
      <param name="parameterName">要检索的参数的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Remove(System.Data.Odbc.OdbcParameter)">
      <summary>从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中移除 <see cref="T:System.Data.Odbc.OdbcParameter" />。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.Odbc.OdbcParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Remove(System.Object)">
      <summary>从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中移除 <see cref="T:System.Object" /> 对象。</summary>
      <param name="value">要从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中移除位于指定索引位置的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.RemoveAt(System.String)">
      <summary>从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中移除具有指定参数名的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的名称。</param>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的访问的对象。 只读。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcPermission">
      <summary>启用用于 ODBC 的 .NET Framework 数据提供程序，以帮助确保用户具有足够的安全级别来访问 ODBC 数据源。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>用 <see cref="T:System.Security.Permissions.PermissionState" /> 值之一初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类的新实例。</summary>
      <param name="state">System.Security.Permissions.PermissionState 值之一。</param>
      <param name="allowBlankPassword">指示是否允许空白密码。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>将指定连接字符串的访问权限添加到现有权限状态。</summary>
      <param name="connectionString">允许的连接字符串。</param>
      <param name="restrictions">标识允许使用或禁用的连接字符串参数的字符串。</param>
      <param name="behavior">
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 值之一。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.Copy">
      <summary>以 <see cref="T:System.Security.IPermission" /> 形式返回 <see cref="T:System.Data.Odbc.OdbcPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Odbc.OdbcPermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>用 <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一初始化 <see cref="T:System.Data.Odbc.OdbcPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一，表示使用声明性安全可执行的操作。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermissionAttribute.CreatePermission">
      <summary>返回一个根据特性属性配置的 <see cref="T:System.Data.Odbc.OdbcPermission" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcPermission" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Odbc.OdbcRowUpdatedEventArgs">
      <summary>为 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdated" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcRowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="row">通过更新操作发送的 DataRow。</param>
      <param name="command">当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.Odbc.OdbcCommand" />。</param>
      <param name="statementType">
        <see cref="T:System.Data.StatementType" /> 值之一，该值指定所执行的查询的类型。</param>
      <param name="tableMapping">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="P:System.Data.Odbc.OdbcRowUpdatedEventArgs.Command">
      <summary>获取调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.Odbc.OdbcCommand" />。</summary>
      <returns>当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.Odbc.OdbcCommand" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcRowUpdatedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 的 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdated" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.Odbc.OdbcRowUpdatedEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcRowUpdatingEventArgs">
      <summary>为 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdating" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcRowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="row">要更新的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">在更新操作期间执行的 <see cref="T:System.Data.Odbc.OdbcCommand" />。</param>
      <param name="statementType">
        <see cref="T:System.Data.StatementType" /> 值之一，该值指定所执行的查询的类型。</param>
      <param name="tableMapping">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="P:System.Data.Odbc.OdbcRowUpdatingEventArgs.Command">
      <summary>获取或设置当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.Odbc.OdbcCommand" />。</summary>
      <returns>当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.Odbc.OdbcCommand" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcRowUpdatingEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 的 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdating" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.Odbc.OdbcRowUpdatingEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Odbc.OdbcTransaction">
      <summary>表示要在数据源执行的 SQL 事务。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Odbc.OdbcTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Odbc.OdbcTransaction.Connection">
      <summary>获取与该事务关联的 <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象，或者如果该事务不再有效，则为 null。</summary>
      <returns>与该事务关联的 <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Odbc.OdbcTransaction.IsolationLevel">
      <summary>指定该事务的 <see cref="T:System.Data.IsolationLevel" />。</summary>
      <returns>该事务的 <see cref="T:System.Data.IsolationLevel" />。 默认值取决于基础 ODBC 驱动程序。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.Odbc.OdbcTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.Odbc.OdbcType">
      <summary>指定 <see cref="T:System.Data.Odbc.OdbcParameter" /> 中使用的字段、属性的数据类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.BigInt">
      <summary>确切数值，其精度为 19 （如果有符号）或 20 （如果没有符号），小数位数为 0（有符号：-2[63] &lt;= n &lt;= 2[63] - 1，没有符号：0 &lt;= n &lt;= 2[64] - 1）(SQL_BIGINT)。 它映射到 <see cref="T:System.Int64" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Binary">
      <summary>二进制数据流 (SQL_BINARY)。 它映射到 <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Bit">
      <summary>只有一位的二进制数据 (SQL_BIT)。 它映射到 <see cref="T:System.Boolean" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Char">
      <summary>固定长度字符串 (SQL_CHAR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Date">
      <summary>格式为 yyyymmdd 的日期数据 (SQL_TYPE_DATE)。 它映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.DateTime">
      <summary>格式为 yyyymmddhhmmss 的日期数据 (SQL_TYPE_TIMESTAMP)。 它映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Decimal">
      <summary>有符号的确切数值，其精度至少为 p，小数位数为 s，其中 1 &lt;= p &lt;= 15 并且 s &lt;= p。 最大精度因驱动程序而定 (SQL_DECIMAL)。 该数据类型将映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Double">
      <summary>有符号的近似数值，其二进制精度为 53 （零或绝对值为 10[-308] 到 10[308]） (SQL_DOUBLE)。 它映射到 <see cref="T:System.Double" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Image">
      <summary>变长二进制数据。 最大长度因数据源而定 (SQL_LONGVARBINARY)。 它映射到 <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Int">
      <summary>确切数值，其精度为 10 和小数位数 0（有符号：-2[31] &lt;= n &lt;= 2[31] - 1，没有符号：0 &lt;= n &lt;= 2[32] - 1）(SQL_INTEGER)。 它映射到 <see cref="T:System.Int32" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.NChar">
      <summary>固定长度的 Unicode 字符串 (SQL_WCHAR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.NText">
      <summary>Unicode 变长字符数据。 最大长度因数据源而定。(SQL_WLONGVARCHAR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Numeric">
      <summary>有符号的确切数值，其精度为 p，小数位数为 s，其中 1 &lt;= p &lt;= 15 并且 s &lt;= p (SQL_NUMERIC)。 该数据类型将映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.NVarChar">
      <summary>Unicode 字符的变长流 (SQL_WVARCHAR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Real">
      <summary>有符号的近似数值，其二进制精度为 24 （零或绝对值为 10[-38] 到 10[38]）。(SQL_REAL)。 它映射到 <see cref="T:System.Single" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.SmallDateTime">
      <summary>格式为 yyyymmddhhmmss 的数据和时间数据 (SQL_TYPE_TIMESTAMP)。 它映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.SmallInt">
      <summary>确切数值，其精度为 5，小数位数为 0 （有符号：-32,768 &lt;= n &lt;= 32,767，没有符号：0 &lt;= n &lt;= 65,535）(SQL_SMALLINT)。 它映射到 <see cref="T:System.Int16" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Text">
      <summary>变长字符数据。 最大长度因数据源而定 (SQL_LONGVARCHAR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Time">
      <summary>格式为 hhmmss 的日期数据 (SQL_TYPE_TIMES)。 它映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Timestamp">
      <summary>二进制数据流 (SQL_BINARY)。 它映射到 <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.TinyInt">
      <summary>确切数值，其精度为 3，小数位数为 0 （有符号：-128 &lt;= n &lt;= 127，没有符号：0 &lt;= n &lt;= 255）(SQL_TINYINT)。 它映射到 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.UniqueIdentifier">
      <summary>固定长度的 GUID (SQL_GUID)。 它映射到 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.VarBinary">
      <summary>变长二进制。 由用户设置该最大值 (SQL_VARBINARY)。 它映射到 <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.VarChar">
      <summary>变长流字符串 (SQL_CHAR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbCommand">
      <summary>表示要对数据源执行的 SQL 语句或存储过程。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.#ctor(System.String)">
      <summary>用查询文本初始化 <see cref="T:System.Data.OleDb.OleDbCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.#ctor(System.String,System.Data.OleDb.OleDbConnection)">
      <summary>初始化具有查询文本和 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">一个 <see cref="T:System.Data.OleDb.OleDbConnection" />，表示与数据源的连接。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.#ctor(System.String,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction)">
      <summary>初始化具有查询文本、<see cref="T:System.Data.OleDb.OleDbConnection" /> 和 <see cref="P:System.Data.OleDb.OleDbCommand.Transaction" /> 的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">一个 <see cref="T:System.Data.OleDb.OleDbConnection" />，表示与数据源的连接。</param>
      <param name="transaction">在其中执行 <see cref="T:System.Data.OleDb.OleDbCommand" /> 的事务。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.Cancel">
      <summary>尝试取消执行 <see cref="T:System.Data.OleDb.OleDbCommand" />。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.Clone">
      <summary>创建作为当前实例副本的新 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.CommandText">
      <summary>获取或设置要对数据源执行的 SQL 语句或存储过程。</summary>
      <returns>要执行的 SQL 语句或存储过程。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.CommandTimeout">
      <summary>获取或设置在终止对执行命令的尝试并生成错误之前的等待时间。</summary>
      <returns>等待命令执行的时间（以秒为单位）。 默认值为 30 秒。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.CommandType">
      <summary>获取或设置一个指示如何解释 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> 属性的值。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" /> 值之一。 默认值为 Text。</returns>
      <exception cref="T:System.ArgumentException">该值不是有效的 <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" />。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.OleDb.OleDbCommand" /> 的此实例使用的 <see cref="T:System.Data.OleDb.OleDbConnection" />。</summary>
      <returns>与数据源的连接。 默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">在事务进行过程中更改了 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 属性。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象在自定义的 Windows 窗体设计器控件中是否应可见。</summary>
      <returns>一个指示命令对象是否应在控件中可见的值。 默认值为 true。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ExecuteNonQuery">
      <summary>针对 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 执行 SQL 语句并返回受影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <exception cref="T:System.InvalidOperationException">连接不存在。 - 或 - 连接未打开。 - 或 - 不能在连接最初在其中登记的上下文之外的事务上下文中执行命令。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeSubWindows" />
        <IPermission class="System.Data.OleDb.OleDbPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ExecuteReader">
      <summary>将 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> 发送到 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 并生成一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">不能在连接最初在其中登记的上下文之外的事务上下文中执行命令。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeSubWindows" />
        <IPermission class="System.Data.OleDb.OleDbPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> 发送到 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.OleDb.OleDbDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <exception cref="T:System.InvalidOperationException">不能在连接最初在其中登记的上下文之外的事务上下文中执行命令。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeSubWindows" />
        <IPermission class="System.Data.OleDb.OleDbPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ExecuteScalar">
      <summary>执行查询，并返回查询所返回的结果集中第一行的第一列。 忽略其他列或行。</summary>
      <returns>结果集中第一行的第一列或 null 引用（如果结果集为空）。</returns>
      <exception cref="T:System.InvalidOperationException">不能在连接最初在其中登记的上下文之外的事务上下文中执行命令。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeSubWindows" />
        <IPermission class="System.Data.OleDb.OleDbPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
      <returns>SQL 语句或存储过程的参数。 默认值为空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.Prepare">
      <summary>在数据源上创建该命令的准备好的（或已编译的）版本。</summary>
      <exception cref="T:System.InvalidOperationException">未设置 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />。 - 或 - <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 未打开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ResetCommandTimeout">
      <summary>将 <see cref="P:System.Data.OleDb.OleDbCommand.CommandTimeout" /> 属性重置为默认值。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbCommand.ExecuteReader" />。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>针对 <see cref="P:System.Data.IDbCommand.Connection" /> 执行 <see cref="P:System.Data.IDbCommand.CommandText" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>使用某一个 <see cref="T:System.Data.CommandBehavior" /> 值的 <see cref="T:System.Data.IDataReader" /> 生成。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.Transaction">
      <summary>获取或设置将在其中执行 <see cref="T:System.Data.OleDb.OleDbCommand" /> 的 <see cref="T:System.Data.OleDb.OleDbTransaction" />。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbTransaction" />。 默认值为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.UpdatedRowSource">
      <summary>获取或设置命令结果在由 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 的 Update 方法使用时如何应用于 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
      <exception cref="T:System.ArgumentException">输入的值不是 <see cref="T:System.Data.UpdateRowSource" /> 值之一。</exception>
    </member>
    <member name="T:System.Data.OleDb.OleDbCommandBuilder">
      <summary>自动生成用于协调对 <see cref="T:System.Data.DataSet" /> 的更改与关联数据库的单表命令。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbCommandBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.#ctor(System.Data.OleDb.OleDbDataAdapter)">
      <summary>使用关联的 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 对象初始化 <see cref="T:System.Data.OleDb.OleDbCommandBuilder" /> 类的新实例。</summary>
      <param name="adapter">一个 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />。</param>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommandBuilder.DataAdapter">
      <summary>获取或设置为其自动生成 SQL 语句的 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.DeriveParameters(System.Data.OleDb.OleDbCommand)">
      <summary>从在 <see cref="T:System.Data.OleDb.OleDbCommand" /> 中指定的存储过程中检索参数信息并填充指定的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象的 <see cref="P:System.Data.OleDb.OleDbCommand.Parameters" /> 集合。</summary>
      <param name="command">引用将从其中导出参数信息的存储过程的 <see cref="T:System.Data.OleDb.OleDbCommand" />。 将派生参数添加到 <see cref="T:System.Data.OleDb.OleDbCommand" /> 的 <see cref="P:System.Data.OleDb.OleDbCommand.Parameters" /> 集合中。</param>
      <exception cref="T:System.InvalidOperationException">基础 OLE DB 提供程序不支持返回存储过程参数信息，命令文本不是有效的存储过程名称，或者指定的 <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" /> 不是 StoredProcedure。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetDeleteCommand">
      <summary>获取在数据源中执行删除操作所需的自动生成的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取在数据源中执行删除操作所需的自动生成的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则如有可能，将生成与列名相匹配的参数名称。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetInsertCommand">
      <summary>获取在数据源中执行插入操作所需的自动生成的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取在数据源中执行插入操作所需的自动生成的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则如有可能，将生成与列名相匹配的参数名称。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetUpdateCommand">
      <summary>获取在数据源中执行更新操作所需的自动生成的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取在数据源执行更新所需的自动生成的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象，可选择对参数名称使用列。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则如有可能，将生成与列名相匹配的参数名称。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>给定了具有正确的目录大小写设置且不带引号的标识符时，返回该标识符的正确的带引号形式。 这包括正确地转义该标识符中的任何嵌入引号。</summary>
      <returns>带引号的标识符版本。 标识符内的嵌入引号被正确地转义。</returns>
      <param name="unquotedIdentifier">不带引号的原始标识符。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.QuoteIdentifier(System.String,System.Data.OleDb.OleDbConnection)">
      <summary>给定了具有正确的目录大小写设置且不带引号的标识符时，返回该标识符的正确的带引号形式。 这包括正确地转义该标识符中的任何嵌入引号。</summary>
      <returns>带引号的标识符版本。 标识符内的嵌入引号被正确地转义。</returns>
      <param name="unquotedIdentifier">要以带引号的形式返回的不带引号的标识符。</param>
      <param name="connection">当连接是通过时，会导致托管包装从获取 OLE DB 提供程序的引号字符，调用 SQLGetInfo 、、（SQL_IDENTIFIER_QUOTE_CHAR）。 如果连接未通过时，使用从 <see cref="P:System.Data.Common.DbCommandBuilder.QuotePrefix" /> 和 <see cref="P:System.Data.Common.DbCommandBuilder.QuoteSuffix" />的值中引用该字符串。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>给定了带引号的标识符时，返回该标识符的正确的不带引号的形式。 这包括正确地取消转义该标识符中的任何嵌入引号。</summary>
      <returns>不带引号的标识符，其嵌入引号被正确地取消转义。</returns>
      <param name="quotedIdentifier">其嵌入引号将被移除的标识符。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.UnquoteIdentifier(System.String,System.Data.OleDb.OleDbConnection)">
      <summary>给定了带引号的标识符时，返回该标识符的正确的不带引号的形式。 这包括正确地取消转义该标识符中的任何嵌入引号。</summary>
      <returns>不带引号的标识符，其嵌入引号被正确地取消转义。</returns>
      <param name="quotedIdentifier">其嵌入引号将被移除的标识符。</param>
      <param name="connection">
        <see cref="T:System.Data.OleDb.OleDbConnection" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.OleDb.OleDbConnection">
      <summary>表示到数据源的连接是打开的。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.#ctor(System.String)">
      <summary>使用指定的连接字符串初始化 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类的新实例。</summary>
      <param name="connectionString">用于打开数据库的连接。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.BeginTransaction">
      <summary>以当前的 <see cref="T:System.Data.IsolationLevel" /> 值开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="isolationLevel">事务应在其下运行的隔离级别。</param>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)">
      <summary>为打开的 <see cref="T:System.Data.OleDb.OleDbConnection" /> 更改当前数据库。</summary>
      <param name="value">数据库名称。</param>
      <exception cref="T:System.ArgumentException">数据库名称无效。</exception>
      <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">不能更改数据库。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.Close">
      <summary>关闭到数据源的连接。</summary>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.ConnectionString">
      <summary>获取或设置用于打开数据库的字符串。</summary>
      <returns>OLE DB 提供程序连接字符串，它包括建立初始连接所必需的数据源名称和其他参数。 默认值为空字符串。</returns>
      <exception cref="T:System.ArgumentException">提供了无效的连接字符串参数或未提供所需的连接字符串参数。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout">
      <summary>获取在尝试建立连接时终止尝试并生成错误之前所等待的时间。</summary>
      <returns>等待连接打开的时间（以秒为单位）。 默认值为 15 秒。</returns>
      <exception cref="T:System.ArgumentException">所设置的值小于 0。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.CreateCommand">
      <summary>创建并返回一个与该 <see cref="T:System.Data.OleDb.OleDbConnection" /> 关联的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.Database">
      <summary>获取当前数据库或连接打开后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称或连接打开后要使用的数据库的名称。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.DataSource">
      <summary>获取数据源的服务器名或文件名。</summary>
      <returns>数据源的服务器名或文件名。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])">
      <summary>应用了指定的限制之后，按照 GUID 的指示从数据源返回架构信息。</summary>
      <returns>一个包含所请求的架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="schema">
        <see cref="T:System.Data.OleDb.OleDbSchemaGuid" /> 的值之一，它指定要返回的架构表。</param>
      <param name="restrictions">限制值的 <see cref="T:System.Object" /> 数组。 这些值按照限制列的顺序来应用。 即，第一个限制值应用于第一个限制列，第二个限制值应用于第二个限制列，依此类推。</param>
      <exception cref="T:System.Data.OleDb.OleDbException">指定的限制集无效。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.OleDb.OleDbConnection" /> 是关闭的。</exception>
      <exception cref="T:System.ArgumentException">OLE DB 提供程序不支持指定的架构行集合。 - 或 - <paramref name="schema" /> 参数包含 <see cref="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals" /> 的值，<paramref name="restrictions" /> 参数包含一条或多条限制。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.GetSchema">
      <summary>返回此 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.GetSchema(System.String)">
      <summary>使用指定的架构名称字符串返回此 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="collectionName">指定要返回的架构的名称。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])">
      <summary>使用指定的架构名称字符串和指定的限制值字符串数组，返回此 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">为请求的架构指定一组限制值。</param>
    </member>
    <member name="E:System.Data.OleDb.OleDbConnection.InfoMessage">
      <summary>在提供程序发送警告或信息性消息时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.Open">
      <summary>使用 <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" /> 所指定的属性设置打开数据库连接。</summary>
      <exception cref="T:System.InvalidOperationException">连接已打开。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">在打开连接时出现连接级别的错误。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.Provider">
      <summary>获取在连接字符串的“Provider = ”子句中指定的 OLE DB 提供程序的名称。</summary>
      <returns>在连接字符串的“Provider= ”子句中指定的提供程序的名称。 默认值为空字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.ReleaseObjectPool">
      <summary>指示可在释放最后一个基础连接时释放 <see cref="T:System.Data.OleDb.OleDbConnection" /> 对象池。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.ResetState">
      <summary>更新 <see cref="T:System.Data.OleDb.OleDbConnection" /> 对象的 <see cref="P:System.Data.OleDb.OleDbConnection.State" /> 属性。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.ServerVersion">
      <summary>获取一个包含客户端所连接到的服务器的版本的字符串。</summary>
      <returns>连接的服务器的版本。</returns>
      <exception cref="T:System.InvalidOperationException">连接处于关闭状态。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.State">
      <summary>获取连接的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值的按位组合。 默认值为 Closed。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.OleDb.OleDbConnectionStringBuilder">
      <summary>为创建和管理由 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类使用的连接字符串的内容提供了一种简单方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 类的新实例。 所提供的连接字符串为实例的内部连接信息提供数据。</summary>
      <param name="connectionString">对象内部连接信息的基础。 分析为键/值对。</param>
      <exception cref="T:System.ArgumentException">连接字符串的格式错误（可能是键/值对中缺少必需的“=”）。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 实例的内容。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 是否包含特定键。</summary>
      <returns>如果 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.DataSource">
      <summary>获取或设置要连接到的数据源的名称。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.DataSource" /> 属性的值；或如果未提供任何值，则为 String.Empty。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.FileName">
      <summary>获取或设置用于连接到数据源的通用数据链接 (UDL) 文件的名称。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.FileName" /> 属性的值；或如果未提供任何值，则为 String.Empty。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键相关联的值。 在 C# 中，此属性为索引器。</summary>
      <returns>与指定的键相关联的值。</returns>
      <param name="keyword">要获取或设置的项的键。</param>
      <exception cref="T:System.ArgumentException">连接字符串的格式错误（可能是键/值对中缺少必需的“=”）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeSubWindows" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.Keys">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 中的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 中的键。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeSubWindows" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices">
      <summary>获取或设置要为连接字符串内的 OLE DB Services 键传递的值。</summary>
      <returns>返回与连接字符串内的 OLE DB Services 键对应的值。 默认情况下，该值为 -13。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo">
      <summary>获取或设置一个布尔值，该值指示如果连接是打开的或者一直处于打开状态，那么安全敏感信息（如密码）是否作为连接的一部分返回。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo" /> 属性的值；或如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.Provider">
      <summary>获取或设置一个字符串，该字符串包含与内部连接字符串关联的数据提供程序的名称。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.Provider" /> 属性的值；或如果未提供任何值，则为 String.Empty。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.Remove(System.String)">
      <summary>移除 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 实例中具有指定键的项。</summary>
      <returns>如果该键原本存在于连接字符串中但被移除，则为 true；如果连接字符串中不存在该键，则为 false。</returns>
      <param name="keyword">要从此 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 实例中检索与所提供的键对应的值。</summary>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则为 true；否则为 false。</returns>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword." /> 对应的值</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeSubWindows" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.OleDb.OleDbDataAdapter">
      <summary>表示一组数据命令和一个数据库连接，它们用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 类的新实例，用指定的 <see cref="T:System.Data.OleDb.OleDbCommand" /> 作为 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 的属性。</summary>
      <param name="selectCommand">
        <see cref="T:System.Data.OleDb.OleDbCommand" />，它是 SELECT 语句或存储过程，被设置为 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 的 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 属性。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)">
      <summary>用 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 初始化 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 类的新实例。</summary>
      <param name="selectCommandText">一个字符串，它是 SQL SELECT 语句或将由 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 的 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 属性使用的存储过程。</param>
      <param name="selectConnection">表示连接的 <see cref="T:System.Data.OleDb.OleDbConnection" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)">
      <summary>用 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 初始化 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 类的新实例。</summary>
      <param name="selectCommandText">一个字符串，它是 SQL SELECT 语句或将由 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 的 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 属性使用的存储过程。</param>
      <param name="selectConnectionString">连接字符串。</param>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.DeleteCommand">
      <summary>获取或设置 SQL 语句或存储过程，用于从数据集中删除记录。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.OleDb.OleDbCommand" />，用以删除数据源中与 <see cref="T:System.Data.DataSet" /> 中已删除的行相对应的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)">
      <summary>使用指定的 <see cref="T:System.Data.DataSet" />、ADO 对象和源表名称，添加或刷新 <see cref="T:System.Data.DataSet" /> 中的行，使之与 ADO Recordset 或 Record 对象中的行相匹配。</summary>
      <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataSet">要用记录和架构（如果需要）填充的一个 <see cref="T:System.Data.DataSet" />。</param>
      <param name="ADODBRecordSet">一个 ADO Recordset 或 Record 对象。</param>
      <param name="srcTable">用于表映射的源表。</param>
      <exception cref="T:System.SystemException">源表无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" /> 和 ADO 对象，在 <see cref="T:System.Data.DataTable" /> 中添加或刷新行，以便与 ADO Recordset 或 Record 对象中的行相匹配。</summary>
      <returns>已对 <see cref="T:System.Data.DataTable" /> 成功刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
      <param name="dataTable">一个要用记录和架构（如果需要）填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="ADODBRecordSet">一个 ADO Recordset 或 Record 对象。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.InsertCommand">
      <summary>获取或设置 SQL 语句或存储过程，用于将新记录插入到数据源中。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.OleDb.OleDbCommand" />，用于将与 <see cref="T:System.Data.DataSet" /> 中的新行相对应的记录插入到数据源中。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated">
      <summary>在对数据源执行命令后的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中发生。 尝试进行更新。 因此，事件发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating">
      <summary>在对数据源执行命令前的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中发生。 尝试进行更新。 因此，事件发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand">
      <summary>获取或设置 SQL 语句或存储过程，用于选择数据源中的记录。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.OleDb.OleDbCommand" />，用于从数据源中选择要放在 <see cref="T:System.Data.DataSet" /> 中的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbDataAdapter.DeleteCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" />，在更新过程中，用于针对数据集中删除的行删除数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbDataAdapter.InsertCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" />，在更新过程中，用于插入数据源中的记录，以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbDataAdapter.SelectCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" />，在更新过程中，用于选择数据源中的记录，以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Data.IDbDataAdapter.UpdateCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" />，在更新过程中，用于针对数据集中修改的行更新数据源中的记录。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.UpdateCommand">
      <summary>获取或设置 SQL 语句或存储过程，用于更新数据源中的记录。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.OleDb.OleDbCommand" />，用于更新数据源中与 <see cref="T:System.Data.DataSet" /> 中已修改的行相对应的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbDataReader">
      <summary>提供从数据源读取数据行的只进流的方法。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.Depth">
      <summary>获取一个值，用于指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未放在有效的记录集中，则为 0；否则为当前记录的列数。 默认值为 -1。</returns>
      <exception cref="T:System.NotSupportedException">没有到数据源的当前连接。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetBoolean(System.Int32)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <returns>列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetByte(System.Int32)">
      <summary>获取指定列的字节形式的值。</summary>
      <returns>指定列的字节形式的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从按指定的列偏移量将字节流作为数组从给定的缓冲区偏移量开始读入缓冲区。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">字段中的索引，从该索引位置开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">
        <paramref name="buffer" /> 中写入操作开始位置的索引。</param>
      <param name="length">要复制到缓冲区中的最大长度。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetChar(System.Int32)">
      <summary>获取指定列的字符形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字符流作为数组从给定的缓冲区偏移量开始读入缓冲区。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">行中的索引，从该索引位置开始读取操作。</param>
      <param name="buffer">要向其中复制数据的缓冲区。</param>
      <param name="bufferIndex">
        <paramref name="buffer" /> 中写入操作开始位置的索引。</param>
      <param name="length">要读取的字符数。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetData(System.Int32)">
      <summary>返回请求的列序号的 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetDataTypeName(System.Int32)">
      <summary>获取源数据类型的名称。</summary>
      <returns>后端数据类型的名称。 更多信息，请参见 SQL Server data types（SQL 服务器数据类型）或 Access data types（访问数据类型）。</returns>
      <param name="index">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetDouble(System.Int32)">
      <summary>获取指定列的双精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetFieldType(System.Int32)">
      <summary>获取是对象的数据类型的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Type" />，它是对象的数据类型。</returns>
      <param name="index">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetFloat(System.Int32)">
      <summary>获取指定列的单精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetGuid(System.Int32)">
      <summary>获取指定列的值作为全局唯一标识符 (GUID)。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetInt16(System.Int32)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetInt32(System.Int32)">
      <summary>获取指定列的 32 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetInt64(System.Int32)">
      <summary>获取指定列的 64 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetName(System.Int32)">
      <summary>获取指定列的名称。</summary>
      <returns>指定列的名称。</returns>
      <param name="index">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetOrdinal(System.String)">
      <summary>在给定列名称的情况下获取列序号。</summary>
      <returns>从零开始的列序号。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名称。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 的列元数据。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.OleDb.OleDbDataReader" /> 是关闭的。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetString(System.Int32)">
      <summary>获取指定列的字符串形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetTimeSpan(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.TimeSpan" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetValue(System.Int32)">
      <summary>获取以本机格式表示的指定序号处的列的值。</summary>
      <returns>要返回的值。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性列复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.HasRows">
      <summary>获取一个值，用于指示 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 是否包含一行或多行。</summary>
      <returns>如果 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 包含一行或多行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.IsClosed">
      <summary>指示是否可关闭数据读取器。</summary>
      <returns>如果 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 已关闭，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在的或已丢失的值。</summary>
      <returns>如果指定的列值与 <see cref="T:System.DBNull" /> 等效，则为 true；否则为 false。</returns>
      <param name="ordinal">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.Item(System.Int32)">
      <summary>在给定列序号的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="index">列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.Item(System.String)">
      <summary>在给定列名称的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="name">列名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.NextResult">
      <summary>当读取批处理 SQL 语句的结果时，使数据读取器前进到下一个结果。</summary>
      <returns>如果存在多个结果集，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.Read">
      <summary>使 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 前进到下一条记录。</summary>
      <returns>如果存在多个行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.RecordsAffected">
      <summary>通过执行 SQL 语句获取更改、插入或删除的行数。</summary>
      <returns>已更改、插入或删除的行数；如果没有任何行受到影响或语句失败，则为 0；-1 表示 SELECT 语句。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.OleDb.OleDbEnumerator">
      <summary>提供用于枚举本地网络中所有可用 OLE DB 提供程序的机制。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbEnumerator.#ctor">
      <summary>创建 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 类的实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbEnumerator.GetElements">
      <summary>检索一个 <see cref="T:System.Data.DataTable" />，该数据表包含所有可见 OLE DB 提供程序的信息。</summary>
      <returns>返回一个 <see cref="T:System.Data.DataTable" />，该数据表包含可见 OLE DB 提供程序的信息。</returns>
      <exception cref="T:System.InvalidCastException">提供程序不支持 ISourcesRowset。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">基础提供程序中发生了异常。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbEnumerator.GetEnumerator(System.Type)">
      <summary>使用特定的 OLE DB 枚举数，无需 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 类的实例即可返回 <see cref="T:System.Data.OleDb.OleDbDataReader" />，该读取器包含有关当前安装的 OLE DB 提供程序的信息。</summary>
      <returns>使用指定的 OLE DB 枚举数返回一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />，其中包含有关请求的 OLE DB 提供程序的信息。</returns>
      <param name="type">
        <see cref="T:System.Type" />。</param>
      <exception cref="T:System.InvalidCastException">提供程序不支持 ISourcesRowset。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">基础提供程序中出现了异常。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbEnumerator.GetRootEnumerator">
      <summary>无需 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 类的实例，即可返回一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />，该读取器包含当前安装的 OLE DB 提供程序的信息。</summary>
      <returns>返回一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />，该读取器包含可见 OLE DB 提供程序的信息。</returns>
      <exception cref="T:System.InvalidCastException">提供程序不支持 ISourcesRowset。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">基础提供程序中发生了异常。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.OleDb.OleDbError">
      <summary>收集与数据源返回的警告或错误有关的信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbError.Message">
      <summary>获取错误的简短说明。</summary>
      <returns>错误的简短说明。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbError.NativeError">
      <summary>获取数据库特定的错误信息。</summary>
      <returns>数据库特定的错误信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbError.Source">
      <summary>获取生成错误的提供程序的名称。</summary>
      <returns>生成错误的提供程序的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbError.SQLState">
      <summary>获取符合数据库 ANSI SQL 标准的 5 字符错误代码。</summary>
      <returns>5 个字符的错误代码，它确定错误的来源（如果错误可能来自不止一个地方）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbError.ToString">
      <summary>获取错误信息的完整文本。</summary>
      <returns>错误信息的完整文本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbErrorCollection">
      <summary>收集用于 OLE DB 的 .NET Framework 数据提供程序生成的所有错误。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbErrorCollection.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 的元素复制到 <see cref="T:System.Array" /> 中，从 <see cref="T:System.Array" /> 中的指定索引处开始。</summary>
      <param name="array">要将元素复制到其中的 <see cref="T:System.Array" />。</param>
      <param name="index">
        <paramref name="array" /> 的起始索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 中元素的数量之和大于 <see cref="T:System.Array" /> 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <paramref name="array" /> 无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbErrorCollection.CopyTo(System.Data.OleDb.OleDbError[],System.Int32)">
      <summary>从指定目标索引位置开始，将当前 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />。</summary>
      <param name="array">
        <see cref="T:System.Data.OleDb.OleDbErrorCollection" />，它是从当前 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 中复制开始位置的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbErrorCollection.Count">
      <summary>获取集合中错误的数目。</summary>
      <returns>集合中错误的总数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbErrorCollection.GetEnumerator">
      <summary>公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbErrorCollection.Item(System.Int32)">
      <summary>获取位于指定索引处的错误。</summary>
      <returns>包含在指定索引位置的错误的 <see cref="T:System.Data.OleDb.OleDbError" />。</returns>
      <param name="index">要检索的错误的从零开始的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbErrorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对该集合的访问是同步的（线程安全），则为 true；否则，为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbErrorCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步集合访问的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Data.OleDb.OleDbException">
      <summary>在基础提供程序返回 OLE DB 数据源的警告或错误时引发的异常。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbException.ErrorCode">
      <summary>获取错误的 HRESULT。</summary>
      <returns>错误的 HRESULT。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbException.Errors">
      <summary>获取一个或多个 <see cref="T:System.Data.OleDb.OleDbError" /> 对象集合，这些对象提供有关用于 OLE DB 的 .NET Framework 数据提供程序生成的异常的详细信息。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbError" /> 类的收集的实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>此成员重写 <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="si" /> 参数是空引用（Visual Basic 中为 Nothing）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.OleDb.OleDbFactory">
      <summary>表示一组方法，这些方法用于创建 OLEDB 提供程序实现数据源类的实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateCommand">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbCommand" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbCommand" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateCommandBuilder">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateConnection">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateConnectionStringBuilder">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateDataAdapter">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateParameter">
      <summary>返回强类型 <see cref="T:System.Data.Common.DbParameter" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbParameter" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回强类型的 <see cref="T:System.Security.CodeAccessPermission" /> 实例。</summary>
      <returns>强类型的 <see cref="T:System.Security.CodeAccessPermission" /> 实例。</returns>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举的成员。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbFactory.Instance">
      <summary>获取 <see cref="T:System.Data.OleDb.OleDbFactory" /> 的实例。 它可用于检索强类型的数据对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbInfoMessageEventArgs">
      <summary>为 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> 事件提供数据。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbInfoMessageEventArgs.ErrorCode">
      <summary>获取符合数据库 ANSI SQL 标准的 HRESULT。</summary>
      <returns>HRESULT，如果错误可能源自不止一个地方，则它识别错误的来源。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbInfoMessageEventArgs.Errors">
      <summary>获取从数据源发送的警告的集合。</summary>
      <returns>从数据源发送的警告的集合。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbInfoMessageEventArgs.Message">
      <summary>获取从数据源发送的错误的完整文本。</summary>
      <returns>错误的完整文本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbInfoMessageEventArgs.Source">
      <summary>获取生成错误的对象的名称。</summary>
      <returns>生成错误的对象的名称。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbInfoMessageEventArgs.ToString">
      <summary>检索 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> 事件的字符串表示形式。</summary>
      <returns>表示 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> 事件的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbInfoMessageEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.OleDb.OleDbInfoMessageEventArgs" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbLiteral">
      <summary>返回有关文本命令、数据值和数据库对象中使用的文本的信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Binary_Literal">
      <summary>文本命令中的二进制文本。 映射到 DBLITERAL_BINARY_LITERAL。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Catalog_Name">
      <summary>文本命令中的目录名。 映射到 DBLITERAL_CATALOG_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Catalog_Separator">
      <summary>文本命令中将目录名与标识符的其余部分隔开的字符。 映射到 DBLITERAL_CATALOG_SEPARATOR。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Char_Literal">
      <summary>文本命令中的字符文本。 映射到 DBLITERAL_CHAR_LITERAL。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Column_Alias">
      <summary>文本命令中的列别名。 映射到 DBLITERAL_COLUMN_ALIAS。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Column_Name">
      <summary>用于文本命令或数据定义接口中的列名。 映射到 DBLITERAL_COLUMN_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Correlation_Name">
      <summary>文本命令中的相关名称（表别名）。 映射到 DBLITERAL_CORRELATION_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Cube_Name">
      <summary>架构（如果提供程序不支持架构，则为目录）中多维数据集的名称。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Cursor_Name">
      <summary>文本命令中的游标名。 映射到 DBLITERAL_CURSOR_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Dimension_Name">
      <summary>维的名称。 如果维是不止一个多维数据集是一部分，则针对每个多维数据集/维的组合都有一行。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Escape_Percent_Prefix">
      <summary>LIKE 子句中使用的字符，用于转义为 DBLITERAL_LIKE_PERCENT 文本返回的字符。 例如，如果百分号 (%) 用于匹配零个或更多个字符，而且这是一个反斜杠 (\)，则字符“abc\%%”与所有以“abc%”开头的字符值都匹配。 某些 SQL 方言支持可用于重写此值的子句（ESCAPE 子句）。 映射到 DBLITERAL_ESCAPE_PERCENT_PREFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Escape_Percent_Suffix">
      <summary>转义符（如果有的话），用于为 DBLITERAL_LIKE_PERCENT 文本返回的字符添加后缀。 例如，如果百分号 (%) 用于匹配零个或多个字符，而且百分号通过括在左右方括号中进行转义，则 DBLITERAL_ESCAPE_PERCENT_PREFIX 就是“[”，DBLITERAL_ESCAPE_PERCENT_SUFFIX 就是“]”，而字符“abc[%]%”就匹配所有以“abc%”开头的字符值。 不使用后缀字符来转义 DBLITERAL_ESCAPE_PERCENT 字符的提供程序不会返回此文本值，它们可以在需要时将 DBLITERAL 结构的 lt 成员设置为 DBLITERAL_INVALID。 映射到 DBLITERAL_ESCAPE_PERCENT_SUFFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Escape_Underscore_Prefix">
      <summary>LIKE 子句中使用的字符，用于转义为 DBLITERAL_LIKE_UNDERSCORE 文本返回的字符。 例如，如果下划线 (_) 用于与一个字符完全匹配并且转义字符是反斜杠 (\)，则字符“abc\_ _”与长度为五个字符并以“abc_”开头的所有字符值相匹配。 某些 SQL 方言支持可用于重写此值的子句（ESCAPE 子句）。 映射到 DBLITERAL_ESCAPE_UNDERSCORE_PREFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Escape_Underscore_Suffix">
      <summary>LIKE 子句中使用的字符，用于转义为 DBLITERAL_LIKE_UNDERSCORE 文本返回的字符。 例如，如果下划线 (_) 用于与一个字符完全匹配并且转义字符是反斜杠 (\)，则字符“abc\_ _”与长度为五个字符并以“abc_”开头的所有字符值相匹配。 某些 SQL 方言支持可用于重写此值的子句（ESCAPE 子句）。 映射到 DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Hierarchy_Name">
      <summary>层次结构的名称。 如果该维不包含层次结构或者只有一个层次结构，则当前列包含空值。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Index_Name">
      <summary>用于文本命令或数据定义接口中的索引名称。 映射到 DBLITERAL_INDEX_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Invalid">
      <summary>一个无效值。 映射到 DBLITERAL_INVALID。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Level_Name">
      <summary>当前级别所属的多维数据集的名称。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Like_Percent">
      <summary>在 LIKE 子句中用以匹配零个或多个字符的字符。 例如，如果这是一个百分号 (%)，则字符“abc%”就与所有以“abc”开头的字符值相匹配。 映射到 DBLITERAL_LIKE_PERCENT。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Like_Underscore">
      <summary>在 LIKE 子句中用以只匹配一个字符的字符。 例如，如果这是一个下划线 (_)，则字符“abc_”与所有长度为 4 个字符并以“abc”开头的所有字符值相匹配。 映射到 DBLITERAL_LIKE_UNDERSCORE。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Member_Name">
      <summary>成员的名称。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Procedure_Name">
      <summary>文本命令中的过程名。 映射到 DBLITERAL_PROCEDURE_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Property_Name">
      <summary>属性的名称。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Quote_Prefix">
      <summary>用在文本命令中的字符，作为将包含特殊字符的标识符引起来的左引号。 映射到 DBLITERAL_QUOTE_PREFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Quote_Suffix">
      <summary>用在文本命令中的字符，作为将包含特殊字符的标识符引起来的右引号。用相同字符作为前缀和后缀的 1.x 提供程序可能不返回此文本值，它们在有需要时可将 DBLITERAL 结构的成员设置为 DBLITERAL_INVALID。 映射到 DBLITERAL_QUOTE_SUFFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Schema_Name">
      <summary>文本命令中的架构名。 映射到 DBLITERAL_SCHEMA_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Schema_Separator">
      <summary>文本命令中将架构名与标识符的其余部分隔开的字符。 映射到 DBLITERAL_SCHEMA_SEPARATOR。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Table_Name">
      <summary>在文本命令或数据定义接口中使用的表名。 映射到 DBLITERAL_TABLE_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Text_Command">
      <summary>文本命令，例如 SQL 语句。 映射到 DBLITERAL_TEXT_COMMAND。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.User_Name">
      <summary>文本命令中的用户名。 映射到 DBLITERAL_USER_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.View_Name">
      <summary>文本命令中的视图名。 映射到 DBLITERAL_VIEW_NAME。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbMetaDataCollectionNames">
      <summary>提供一个常数列表，该列表与 GetSchema 方法一起使用以检索元数据集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Catalogs">
      <summary>用于 GetSchema 方法的常数，表示 Catalogs 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Collations">
      <summary>用于 GetSchema 方法的常数，表示 Collations 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Columns">
      <summary>用于 GetSchema 方法的常数，表示 Columns 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Indexes">
      <summary>用于 GetSchema 方法的常数，表示 Indexes 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.ProcedureColumns">
      <summary>用于 GetSchema 方法的常数，表示 ProcedureColumns 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.ProcedureParameters">
      <summary>用于 GetSchema 方法的常数，表示 ProcedureParameters 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Procedures">
      <summary>用于 GetSchema 方法的常数，表示 Procedures 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Tables">
      <summary>用于 GetSchema 方法的常数，表示 Tables 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Views">
      <summary>用于 GetSchema 方法的常数，表示 Views 集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbMetaDataColumnNames">
      <summary>提供静态值，这些值用于 <see cref="T:System.Data.DataTable" /> 中包含的 <see cref="T:System.Data.OleDb.OleDbMetaDataCollectionNames" /> 对象的列名称。 <see cref="T:System.Data.DataTable" /> 由 GetSchema 方法创建。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataColumnNames.BooleanFalseLiteral">
      <summary>由 GetSchema 方法用于创建 BooleanFalseLiteral 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataColumnNames.BooleanTrueLiteral">
      <summary>由 GetSchema 方法用于创建 BooleanTrueLiteral 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataColumnNames.DateTimeDigits">
      <summary>由 GetSchema 方法用于创建 DateTimeDigits 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataColumnNames.NativeDataType">
      <summary>由 GetSchema 方法用于创建 NativeDataType 列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbParameter">
      <summary>表示 <see cref="T:System.Data.OleDb.OleDbCommand" /> 的参数，还可以表示它到 <see cref="T:System.Data.DataSet" /> 列的映射。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType)">
      <summary>初始化使用参数名称和数据类型的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类的新实例。</summary>
      <param name="name">要映射的参数的名称。</param>
      <param name="dataType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType,System.Int32)">
      <summary>初始化使用参数名称、数据类型和长度的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类的新实例。</summary>
      <param name="name">要映射的参数的名称。</param>
      <param name="dataType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>使用参数名称、数据类型、长度、源列名称、参数方向、数值精度以及其他属性初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类的一个新实例。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="isNullable">如果字段的值可为 null，则为 true；否则为 false。</param>
      <param name="precision">要将 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 解析为的小数点左右两侧的总位数。</param>
      <param name="scale">要将 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 解析为的总小数位数。</param>
      <param name="srcColumn">源列的名称。</param>
      <param name="srcVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
      <summary>使用参数名称、数据类型、长度、源列名称、参数方向、数值精度以及其他属性初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类的一个新实例。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="precision">要将 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 解析为的小数点左右两侧的总位数。</param>
      <param name="scale">要将 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 解析为的总小数位数。</param>
      <param name="sourceColumn">源列的名称。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="sourceColumnNullMapping">如果源列可以为 null，则为 true；如果不可以为 null，则为 false。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType,System.Int32,System.String)">
      <summary>初始化使用参数名称、数据类型、长度和源列名称的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类的新实例。</summary>
      <param name="name">要映射的参数的名称。</param>
      <param name="dataType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="srcColumn">源列的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Object)">
      <summary>初始化使用新 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的参数名称和值的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类的新实例。</summary>
      <param name="name">要映射的参数的名称。</param>
      <param name="value">新 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的值。</param>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="F:System.Data.DbType.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性未设置为有效的 <see cref="T:System.Data.DbType" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受空值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.OleDbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.OleDb.OleDbType" />。</summary>
      <returns>参数的 <see cref="T:System.Data.OleDb.OleDbType" />。 默认值为 <see cref="F:System.Data.OleDb.OleDbType.VarWChar" />。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 的名称。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Precision">
      <summary>获取或设置用来表示 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 属性的最大位数。 默认值为 0，它表示数据提供程序设置 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的精度。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.ResetDbType">
      <summary>重置与此 <see cref="T:System.Data.OleDb.OleDbParameter" /> 关联的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.ResetOleDbType">
      <summary>重置与此 <see cref="T:System.Data.OleDb.OleDbParameter" /> 关联的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Scale">
      <summary>获取或设置 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 解析为的小数位数。</summary>
      <returns>要将 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 解析为的小数位数。 默认值为 0。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Size">
      <summary>获取或设置列中数据的最大大小（以字节为单位）。</summary>
      <returns>列中数据的最大大小（以字节为单位）。 默认值是从参数值推导出的。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />。</summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。 这使得 <see cref="T:System.Data.Common.DbCommandBuilder" /> 能够正确地为可以为 null 的列生成 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；如果不可以为 null，则为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.SourceVersion">
      <summary>获取或设置在加载 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 时要使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为 <see cref="T:System.Data.DataRowVersion" /> 值之一。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.ToString">
      <summary>获取一个包含 <see cref="P:System.Data.OleDb.OleDbParameter.ParameterName" /> 的字符串。</summary>
      <returns>一个包含 <see cref="P:System.Data.OleDb.OleDbParameter.ParameterName" /> 的字符串。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Value">
      <summary>获取或设置该参数的值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是该参数的值。 默认值为 null。</returns>
    </member>
    <member name="T:System.Data.OleDb.OleDbParameterCollection">
      <summary>表示与 <see cref="T:System.Data.OleDb.OleDbCommand" /> 相关的参数的集合以及它们各自到 <see cref="T:System.Data.DataSet" /> 中列的映射。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.Data.OleDb.OleDbParameter)">
      <summary>将指定的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
      <returns>新 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="value" /> 参数中指定的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 已经添加到这个或其他 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <returns>集合中新的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
      <param name="value">
        <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.String,System.Data.OleDb.OleDbType)">
      <summary>已知参数名和数据类型，将 <see cref="T:System.Data.OleDb.OleDbParameter" /> 添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="oleDbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.String,System.Data.OleDb.OleDbType,System.Int32)">
      <summary>在给定参数名称、数据类型和列长的情况下，将 <see cref="T:System.Data.OleDb.OleDbParameter" /> 添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="oleDbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.String,System.Data.OleDb.OleDbType,System.Int32,System.String)">
      <summary>在给定参数名称、数据类型、列长和源列名称的情况下，将 <see cref="T:System.Data.OleDb.OleDbParameter" /> 添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="oleDbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <param name="sourceColumn">源列的名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.String,System.Object)">
      <summary>在给定参数名称和参数值的情况下，将 <see cref="T:System.Data.OleDb.OleDbParameter" /> 添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 参数不是一个 <see cref="T:System.Data.OleDb.OleDbParameter" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.AddRange(System.Array)">
      <summary>将值数组添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的末尾。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.AddRange(System.Data.OleDb.OleDbParameter[])">
      <summary>将 <see cref="T:System.Data.OleDb.OleDbParameter" /> 值的数组添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的末尾。</summary>
      <param name="values">要添加的 <see cref="T:System.Data.OleDbParameter" /> 值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>将一个值添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的末尾。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加的值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Clear">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中移除所有 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Contains(System.Data.OleDb.OleDbParameter)">
      <summary>确定指定的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="P:System.Data.OleDb.OleDbParameter" /> 在集合中，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Contains(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 包含 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Contains(System.String)">
      <summary>确定指定的 <see cref="T:System.String" /> 是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 包含值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中（从指定的目标 <see cref="T:System.Array" /> 索引位置开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Array" /> 中复制开始处的索引。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.CopyTo(System.Data.OleDb.OleDbParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />（从指定的目标索引位置开始）。</summary>
      <param name="array">
        <see cref="T:System.Data.OleDb.OleDbParameterCollection" />，它是从当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 复制的元素的目标。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中复制开始处的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.Count">
      <summary>返回一个整数，此整数包含 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中的元素数。 只读。</summary>
      <returns>用整数表示的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中的元素数。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的 <see cref="T:System.Collections.Generic.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.IndexOf(System.Data.OleDb.OleDbParameter)">
      <summary>获取指定的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Data.OleDb.OleDbParameter" />（它是 <see cref="T:System.Data.OleDb.OleDbParameter" />）在集合中从零开始的位置。</returns>
      <param name="value">要在集合中查找的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.IndexOf(System.Object)">
      <summary>集合中指定 <see cref="T:System.Object" /> 的位置。</summary>
      <returns>指定的 <see cref="T:System.Object" />（它是 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />）在集合中从零开始的位置。</returns>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的位置。</summary>
      <returns>具有指定的区分大小写名称的指定 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的从零开始的位置。</returns>
      <param name="parameterName">要查找的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的区分大小写的名称。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Insert(System.Int32,System.Data.OleDb.OleDbParameter)">
      <summary>将 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象插入 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入 value。</param>
      <param name="value">要插入到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将 <see cref="T:System.Object" /> 插入 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 value。</param>
      <param name="value">要插入 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的大小是否是固定的。 只读。</summary>
      <returns>如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 是否是同步的。 只读。</summary>
      <returns>如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 同步，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</returns>
      <param name="index">要检索的参数的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.Item(System.String)">
      <summary>获取或设置具有指定名称的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</returns>
      <param name="parameterName">要检索的参数的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Remove(System.Data.OleDb.OleDbParameter)">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中移除 <see cref="T:System.Data.OleDb.OleDbParameter" />。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.OleDb.OleDbParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Remove(System.Object)">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中移除 <see cref="T:System.Object" /> 对象。</summary>
      <param name="value">要从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中除移的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中移除指定索引处的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.RemoveAt(System.String)">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中移除指定参数名称位置的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的名称。</param>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的访问的对象。 只读。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.OleDb.OleDbPermission">
      <summary>启用用于 OLE DB 的 .NET Framework 数据提供程序，以帮助确保用户具有足够的安全级别来访问 OLE DB 数据源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许空白密码。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.Copy">
      <summary>以 <see cref="T:System.Security.IPermission" /> 形式返回 <see cref="T:System.Data.OleDb.OleDbPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbPermission.Provider">
      <summary>此属性已被标记为过时。 设置此属性将不会产生任何作用。</summary>
      <returns>此属性已被标记为过时。 设置此属性将不会产生任何作用。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbPermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一，表示使用声明性安全可执行的操作。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermissionAttribute.CreatePermission">
      <summary>返回一个根据特性的属性配置的 <see cref="T:System.Data.OleDb.OleDbPermission" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbPermission" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbPermissionAttribute.Provider">
      <summary>获取或设置包含受支持的提供程序的列表的逗号分隔字符串。</summary>
      <returns>该安全策略所允许的提供程序的逗号分隔列表。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbRowUpdatedEventArgs">
      <summary>为 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">
        <see cref="T:System.Data.StatementType" /> 值之一，该值指定所执行的查询的类型。</param>
      <param name="tableMapping">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="P:System.Data.OleDb.OleDbRowUpdatedEventArgs.Command">
      <summary>获取调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.OleDb.OleDbCommand" />。</summary>
      <returns>当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.OleDb.OleDbCommand" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbRowUpdatedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 的 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbRowUpdatingEventArgs">
      <summary>为 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">要进行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">要在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">
        <see cref="T:System.Data.StatementType" /> 值之一，该值指定所执行的查询的类型。</param>
      <param name="tableMapping">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="P:System.Data.OleDb.OleDbRowUpdatingEventArgs.Command">
      <summary>获取或设置进行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.OleDb.OleDbCommand" />。</summary>
      <returns>进行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时要执行的 <see cref="T:System.Data.OleDb.OleDbCommand" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbRowUpdatingEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 的 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbSchemaGuid">
      <summary>返回由 <see cref="M:System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])" /> 方法指定的架构表类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbSchemaGuid.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbSchemaGuid" /> 类的新实例。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Assertions">
      <summary>返回在目录中定义的给定用户拥有的断言。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Catalogs">
      <summary>返回与可从数据源访问的目录有关的物理特性。 返回在目录中定义的给定用户拥有的断言。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Character_Sets">
      <summary>返回在目录中定义的字符集，给定用户可以访问它们。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Check_Constraints">
      <summary>返回在目录中定义的给定用户拥有的 CHECK 约束。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Check_Constraints_By_Table">
      <summary>返回在目录中定义的给定用户拥有的 CHECK 约束。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Collations">
      <summary>返回在目录中定义的字符排序规则，给定用户可以访问它们。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Column_Domain_Usage">
      <summary>返回在目录中定义、依赖于在目录中定义的域并由给定用户拥有的列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Column_Privileges">
      <summary>返回在目录中定义、给定用户可使用或负责授予的对表中列的特权。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Columns">
      <summary>返回在目录中定义的表（包括视图）的列，给定用户可以访问这些列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Constraint_Column_Usage">
      <summary>返回由引用约束、唯一约束、CHECK 约束和断言使用的、在目录中定义并由给定用户拥有的列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Constraint_Table_Usage">
      <summary>返回由引用约束、唯一约束、CHECK 约束和在目录中定义并由给定用户拥有的断言使用的表。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoKeywords">
      <summary>返回提供程序特定的关键字的列表。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals">
      <summary>返回在文本命令使用的提供程序特定的文本的列表。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Foreign_Keys">
      <summary>返回由给定用户在目录中定义的外键列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Indexes">
      <summary>返回在目录中定义的由给定用户拥有的索引。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Key_Column_Usage">
      <summary>返回在目录中定义的列，给定用户将这些列约束为键。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Primary_Keys">
      <summary>返回在目录中由给定用户定义的主键列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Procedure_Columns">
      <summary>返回有关由过程返回的行集合的列的信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Procedure_Parameters">
      <summary>返回有关过程的参数和返回代码的信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Procedures">
      <summary>返回在目录中定义的由给定用户拥有的过程。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Provider_Types">
      <summary>返回用于 OLE DB 的 .NET Framework 数据提供程序支持的基本数据类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Referential_Constraints">
      <summary>返回在目录中定义的由给定用户拥有的引用约束。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.SchemaGuids">
      <summary>返回架构行集合的列表，该架构行集合是由它们的 GUID 和一个指向限制列的说明的指针标识的。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Schemata">
      <summary>返回给定用户拥有的架构对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Sql_Languages">
      <summary>返回在目录中定义的 SQL 实现处理数据所支持的一致性级别、选项和语言。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Statistics">
      <summary>返回在目录中定义的由给定用户拥有的统计。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Table_Constraints">
      <summary>返回在目录中定义的由给定用户拥有的表约束。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Table_Privileges">
      <summary>返回在目录中定义、给定用户可使用或负责授予的对表的特权。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Table_Statistics">
      <summary>描述提供程序中表的可用统计集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Tables">
      <summary>返回在目录中定义的表（包括视图），给定用户可以访问它们。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Tables_Info">
      <summary>返回给定用户可访问的表（包括视图）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Translations">
      <summary>返回在目录中定义的字符转换，给定用户可以访问这些字符转换。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Trustee">
      <summary>标识在数据源中定义的受信者。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Usage_Privileges">
      <summary>返回在目录中定义、给定用户可使用或负责授予的对对象的 USAGE 特权。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.View_Column_Usage">
      <summary>返回已查看的表所依赖、在目录中定义并由给定用户拥有的列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.View_Table_Usage">
      <summary>返回已查看的表所依赖、在目录中定义并由给定用户拥有的表。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Views">
      <summary>返回在目录中定义的视图，给定用户可以访问这些视图。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.OleDb.OleDbTransaction">
      <summary>表示要在数据源执行的 SQL 事务。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.OleDb.OleDbTransaction.Begin">
      <summary>启动嵌套的数据库事务。</summary>
      <returns>嵌套的数据库事务。</returns>
      <exception cref="T:System.InvalidOperationException">不支持嵌套的事务。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbTransaction.Begin(System.Data.IsolationLevel)">
      <summary>启动嵌套的数据库事务，并为新事务指定要使用的隔离级别。</summary>
      <returns>嵌套的数据库事务。</returns>
      <param name="isolevel">要用于该事务的隔离级别。</param>
      <exception cref="T:System.InvalidOperationException">不支持嵌套的事务。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.OleDb.OleDbTransaction.Connection">
      <summary>获取与该事务关联的 <see cref="T:System.Data.OleDb.OleDbConnection" /> 对象，或者如果该事务不再有效，则为 null。</summary>
      <returns>与该事务关联的 <see cref="T:System.Data.OleDb.OleDbConnection" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.OleDb.OleDbTransaction.IsolationLevel">
      <summary>指定该事务的 <see cref="T:System.Data.IsolationLevel" />。</summary>
      <returns>该事务的 <see cref="T:System.Data.IsolationLevel" />。 默认值为 ReadCommitted。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.OleDb.OleDbTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.OleDb.OleDbType">
      <summary>指定字段的数据类型、属性，以便在 <see cref="T:System.Data.OleDb.OleDbParameter" /> 中使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.BigInt">
      <summary>64 位带符号的整数 (DBTYPE_I8)。 它映射到 <see cref="T:System.Int64" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Binary">
      <summary>二进制数据流 (DBTYPE_BYTES)。 它映射到 <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Boolean">
      <summary>布尔值 (DBTYPE_BOOL)。 它映射到 <see cref="T:System.Boolean" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.BSTR">
      <summary>以 null 终止的 Unicode 字符串 (DBTYPE_BSTR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Char">
      <summary>字符串 (DBTYPE_STR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Currency">
      <summary>一个货币值，范围在 -2 63（或 -922,337,203,685,477.5808）到 2 63 -1（或 +922,337,203,685,477.5807）之间，精度为千分之十个货币单位 (DBTYPE_CY)。 该数据类型将映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Date">
      <summary>日期数据，存储为双精度型 (DBTYPE_DATE)。 整数部分是自 1899 年 12 月 30 日以来的天数，而小数部分是不足一天的部分。 它映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.DBDate">
      <summary>格式为 yyyymmdd 的日期数据 (DBTYPE_DBDATE)。 它映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.DBTime">
      <summary>格式为 hhmmss 的时间数据 (DBTYPE_DBTIME)。 它映射到 <see cref="T:System.TimeSpan" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.DBTimeStamp">
      <summary>格式为 yyyymmddhhmmss 的日期和时间数据 (DBTYPE_DBTIMESTAMP)。 它映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Decimal">
      <summary>定点精度和小数位数数值，范围在 -10 38 -1 和 10 38 -1 之间 (DBTYPE_DECIMAL)。 该数据类型将映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Double">
      <summary>浮点数字，范围在 -1.79E +308 到 1.79E +308 之间 (DBTYPE_R8)。 它映射到 <see cref="T:System.Double" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Empty">
      <summary>无任何值 (DBTYPE_EMPTY)。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Error">
      <summary>32 位错误代码 (DBTYPE_ERROR)。 它映射到 <see cref="T:System.Exception" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Filetime">
      <summary>64 位无符号整数，表示自 1601 年 1 月 1 日以来 100 个纳秒间隔的数字 (DBTYPE_FILETIME)。 它映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Guid">
      <summary>全局唯一标识符（或 GUID） (DBTYPE_GUID)。 它映射到 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.IDispatch">
      <summary>指向 IDispatch 接口的指针 (DBTYPE_IDISPATCH)。 它映射到 <see cref="T:System.Object" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Integer">
      <summary>32 位带符号的整数 (DBTYPE_I4)。 它映射到 <see cref="T:System.Int32" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.IUnknown">
      <summary>指向 IUnknown 接口的指针 (DBTYPE_UNKNOWN)。 它映射到 <see cref="T:System.Object" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.LongVarBinary">
      <summary>长的二进制值（只限 <see cref="T:System.Data.OleDb.OleDbParameter" />）。 它映射到 <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.LongVarChar">
      <summary>长的字符串值（只限 <see cref="T:System.Data.OleDb.OleDbParameter" />）。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.LongVarWChar">
      <summary>长的以 null 终止的 Unicode 字符串值（只限 <see cref="T:System.Data.OleDb.OleDbParameter" />）。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Numeric">
      <summary>具有定点精度和小数位数的精确数值 (DBTYPE_NUMERIC)。 该数据类型将映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.PropVariant">
      <summary>自动化 PROPVARIANT (DBTYPE_PROP_VARIANT)。 它映射到 <see cref="T:System.Object" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Single">
      <summary>浮点数字，范围在 -3.40E +38 到 3.40E +38 之间 (DBTYPE_R4)。 它映射到 <see cref="T:System.Single" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.SmallInt">
      <summary>16 位带符号的整数 (DBTYPE_I2)。 它映射到 <see cref="T:System.Int16" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.TinyInt">
      <summary>8 位带符号的整数 (DBTYPE_I1)。 它映射到 <see cref="T:System.SByte" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.UnsignedBigInt">
      <summary>64 位无符号整数 (DBTYPE_UI8)。 它映射到 <see cref="T:System.UInt64" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.UnsignedInt">
      <summary>32 位无符号整数 (DBTYPE_UI4)。 它映射到 <see cref="T:System.UInt32" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.UnsignedSmallInt">
      <summary>16 位无符号整数 (DBTYPE_UI2)。 它映射到 <see cref="T:System.UInt16" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.UnsignedTinyInt">
      <summary>8 位无符号整数 (DBTYPE_UI1)。 它映射到 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.VarBinary">
      <summary>二进制数据的变长流（只限 <see cref="T:System.Data.OleDb.OleDbParameter" />）。 它映射到 <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.VarChar">
      <summary>非 Unicode 字符的变长流（只限 <see cref="T:System.Data.OleDb.OleDbParameter" />）。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Variant">
      <summary>可包含数字、字符串、二进制或日期数据以及特殊值 Empty 和 Null 的特殊数据类型 (DBTYPE_VARIANT)。 如果未指定任何其他类型，则假定为该类型。 它映射到 <see cref="T:System.Object" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.VarNumeric">
      <summary>变长数值（只限 <see cref="T:System.Data.OleDb.OleDbParameter" />）。 该数据类型将映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.VarWChar">
      <summary>长可变、以 null 终止的 Unicode 字符流（只限 <see cref="T:System.Data.OleDb.OleDbParameter" />）。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.WChar">
      <summary>以 null 终止的 Unicode 字符流 (DBTYPE_WSTR)。 它映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="T:System.Data.Sql.SqlDataSourceEnumerator">
      <summary>提供了一种枚举本地网络内的所有可用 SQL Server 实例的机制。</summary>
    </member>
    <member name="M:System.Data.Sql.SqlDataSourceEnumerator.GetDataSources">
      <summary>检索包含有关所有可见 SQL Server 2000 或 SQL Server 2005 实例的信息的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>返回一个包含有关可见 SQL Server 实例的信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Sql.SqlDataSourceEnumerator.Instance">
      <summary>获取 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" /> 的实例，该实例可用于检索有关可用 SQL Server 实例的信息。</summary>
      <returns>一个 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" /> 实例，该实例可用于检索有关可用 SQL Server 实例的信息。</returns>
    </member>
    <member name="T:System.Data.Sql.SqlNotificationRequest">
      <summary>表示对给定命令的通知的请求。</summary>
    </member>
    <member name="M:System.Data.Sql.SqlNotificationRequest.#ctor">
      <summary>使用默认值创建 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Sql.SqlNotificationRequest.#ctor(System.String,System.String,System.Int32)">
      <summary>使用用户定义的字符串创建 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 类的新实例，该字符串标识特定的通知请求、预定义的 SQL Server 2005 Service Broker 服务名以及（以秒来计算）超时时间。</summary>
      <param name="userData">一个字符串，它包含此通知的应用程序特定的标识符。 通知基础结构并不使用它，但是可以使用它将通知与应用程序状态相关联。 此参数中指示的值包含在 Service Broker 队列消息中。</param>
      <param name="options">一个字符串，它包含发送通知消息的 Service Broker 服务名，并且必须包括一个数据库名称或 Service Broker 实例 GUID（用来将服务名查找的范围限制为一个特定的数据库）。 有关 <paramref name="options" /> 参数的格式的更多信息，请参阅 <see cref="P:System.Data.Sql.SqlNotificationRequest.Options" />。</param>
      <param name="timeout">等待通知消息的时间（以秒为单位）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 参数的值为 NULL。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 或 <paramref name="userData" /> 参数大于 uint16.MaxValue，或者 <paramref name="timeout" /> 参数中的值小于零。</exception>
    </member>
    <member name="P:System.Data.Sql.SqlNotificationRequest.Options">
      <summary>获取或设置发送通知消息的 SQL Server Service Broker 服务名。</summary>
      <returns>string，包含发送通知消息的 SQL Server 2005 Service Broker 服务名，以及用于限制服务器名查找范围的数据库或服务中间装置实例 GUID。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 NULL。</exception>
      <exception cref="T:System.ArgumentException">该值比 uint16.MaxValue 长。</exception>
    </member>
    <member name="P:System.Data.Sql.SqlNotificationRequest.Timeout">
      <summary>获取或设置一个值，该值指定在操作超时之前，SQL Server 等待发生更改的时间。</summary>
      <returns>带符号的整数值，指定在操作超时之前，SQL Server 等待发生更改的时间（以秒为单位）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.Sql.SqlNotificationRequest.UserData">
      <summary>获取或设置此通知的应用程序特定的标识符。</summary>
      <returns>此通知的应用程序特定的标识符的 string 值。</returns>
      <exception cref="T:System.ArgumentException">该值比 uint16.MaxValue 长。</exception>
    </member>
    <member name="T:System.Data.SqlClient.ApplicationIntent">
      <summary>指定 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent" /> 的值。 可能的值为 ReadWrite 和 ReadOnly。</summary>
    </member>
    <member name="F:System.Data.SqlClient.ApplicationIntent.ReadOnly">
      <summary>连接到服务器时的应用程序工作负荷类型是只读的。</summary>
    </member>
    <member name="F:System.Data.SqlClient.ApplicationIntent.ReadWrite">
      <summary>连接到服务器时的应用程序工作负荷类型是可读写的。</summary>
    </member>
    <member name="T:System.Data.SqlClient.OnChangeEventHandler">
      <summary>处理当收到与 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象相关联的任何命令的通知时激发的 <see cref="E:System.Data.SqlClient.SqlDependency.OnChange" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Data.SqlClient.SortOrder">
      <summary>指定数据行排序方式。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Ascending">
      <summary>按升序排序各行。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Descending">
      <summary>按降序排序各行。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Unspecified">
      <summary>默认值。 不指定排序顺序。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlBulkCopy">
      <summary>使您可以用其他源的数据有效批量加载 SQL Server 表。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)">
      <summary>使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的指定打开实例初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
      <param name="connection">将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例。 如果连接字符串不使用 Integrated Security = true，可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)">
      <summary>使用提供的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的现有打开实例初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例的行为取决于 <paramref name="copyOptions" /> 参数中提供的选项。 如果提供非空 <see cref="T:System.Data.SqlClient.SqlTransaction" />，则复制操作将在该事务中执行。</summary>
      <param name="connection">将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例。 如果连接字符串不使用 Integrated Security = true，可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
      <param name="copyOptions">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 枚举中的值的组合，该枚举确定将哪些数据源行复制到目标表中。</param>
      <param name="externalTransaction">现有的 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 实例，批量复制操作将在该实例下进行。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)">
      <summary>基于提供的 <paramref name="connectionString" /> 初始化和打开 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的新实例。 此构造函数使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
      <param name="connectionString">定义将打开的且由 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例使用的连接的字符串。 如果连接字符串不使用 Integrated Security = true，可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)">
      <summary>基于提供的 <paramref name="connectionString" /> 初始化和打开 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的新实例。 此构造函数使用此 <see cref="T:System.Data.SqlClient.SqlConnection" /> 来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例的行为取决于 <paramref name="copyOptions" /> 参数中提供的选项。</summary>
      <param name="connectionString">定义将打开的且由 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例使用的连接的字符串。 如果连接字符串不使用 Integrated Security = true，可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
      <param name="copyOptions">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 枚举中的值的组合，该枚举确定将哪些数据源行复制到目标表中。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.BatchSize">
      <summary>每一批次中的行数。 在每一批次结束时，将该批次中的行发送到服务器。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> 属性的整数值；或者如果未设置任何值，则为零。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout">
      <summary>超时之前操作完成所允许的秒数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> 属性的整数值。 默认值为 30 秒。 值 0 指示没有限制；批量复制将无限期等待。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.Close">
      <summary>关闭 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings">
      <summary>返回 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 项的集合。 列映射定义数据源中的列和目标表中的列之间的关系。</summary>
      <returns>列映射集合。 默认情况下为空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName">
      <summary>服务器上目标表的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性的字符串值；或者如果未提供任何值，则为 null。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming">
      <summary>启用或禁用 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象，传输 <see cref="T:System.Data.IDataReader" /> 对象的数据。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象可以对 <see cref="T:System.Data.IDataReader" /> 对象的数据进行流处理，则为 true；否则，为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter">
      <summary>定义在生成通知事件之前要处理的行数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 属性的整数值，或者如果未设置该属性，则为零。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied">
      <summary>在每次处理完 <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 属性指定的行数时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的当前实例占用的所有资源。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])">
      <summary>将所提供的 <see cref="T:System.Data.DataRow" /> 数组中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)">
      <summary>将所提供的 <see cref="T:System.Data.DataTable" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)">
      <summary>只将与所提供 <see cref="T:System.Data.DataTable" /> 中所提供行状态匹配的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
      <param name="rowState">
        <see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会被复制到目标表中。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)">
      <summary>将所提供的 <see cref="T:System.Data.IDataReader" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，它的行将被复制到目标表中。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 的异步版本，将 <see cref="T:System.Data.DataRow" /> 数组中提供的所有行都复制到由 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />。 在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。 在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 执行期间，连接中断或在数据检索期间已关闭。 在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。 在任务对象中返回，出现连接池超时。 在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在任务对象中返回，由在打开连接时发生的 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 的异步版本，将 <see cref="T:System.Data.DataRow" /> 数组中提供的所有行都复制到由 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象的数组。</param>
      <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />。 在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。 在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 执行期间，连接中断或在数据检索期间已关闭。 在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。 在任务对象中返回，出现连接池超时。 在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在任务对象中返回，由在打开连接时发生的 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 的异步版本，将 <see cref="T:System.Data.DataTable" /> 中提供的所有行都复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。 在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。 在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 执行期间，连接中断或在数据检索期间已关闭。 在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。 在任务对象中返回，出现连接池超时。 在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在任务对象中返回，由在打开连接时发生的 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 的异步版本，之间与 <see cref="T:System.Data.DataTable" /> 中所提供行状态匹配的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性中指定的目标表中。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
      <param name="rowState">
        <see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会被复制到目标表中。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />。 在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。 在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 执行期间，连接中断或在数据检索期间已关闭。 在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。 在任务对象中返回，出现连接池超时。 在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在任务对象中返回，由在打开连接时发生的 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 的异步版本，之间与 <see cref="T:System.Data.DataTable" /> 中所提供行状态匹配的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性中指定的目标表中。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
      <param name="rowState">
        <see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会被复制到目标表中。</param>
      <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />。 在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。 在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 执行期间，连接中断或在数据检索期间已关闭。 在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。 在任务对象中返回，出现连接池超时。 在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在任务对象中返回，由在打开连接时发生的 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 的异步版本，将 <see cref="T:System.Data.DataTable" /> 中提供的所有行都复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，它的行将被复制到目标表中。</param>
      <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。 在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。 在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 执行期间，连接中断或在数据检索期间已关闭。 在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。 在任务对象中返回，出现连接池超时。 在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在任务对象中返回，由在打开连接时发生的 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 的异步版本，将 <see cref="T:System.Data.IDataReader" /> 中提供的所有行都复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，它的行将被复制到目标表中。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />。 在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。 在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 执行期间，连接中断或在数据检索期间已关闭。 在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。 在任务对象中返回，出现连接池超时。 在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。 在 <see cref="T:System.Threading.Tasks.Task" /> 返回之前， <see cref="T:System.Data.IDataReader" /> 已关闭。 在 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，与 <see cref="T:System.Data.IDataReader" /> 相关的连接已关闭。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在任务对象中返回，由在打开连接时发生的 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 的异步版本，将 <see cref="T:System.Data.IDataReader" /> 中提供的所有行都复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，它的行将被复制到目标表中。</param>
      <param name="cancellationToken">取消指示。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值让方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />。 在任务完成之前为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。 在 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 执行期间，连接中断或在数据检索期间已关闭。 在任务对象中返回，方法执行期间，<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象处于关闭状态。 在任务对象中返回，出现连接池超时。 在任务对象中返回，方法执行前，<see cref="T:System.Data.SqlClient.SqlConnection" /> 对象处于关闭状态。 在 <see cref="T:System.Threading.Tasks.Task" /> 返回之前， <see cref="T:System.Data.IDataReader" /> 已关闭。 在 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，与 <see cref="T:System.Data.IDataReader" /> 相关的连接已关闭。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在任务对象中返回，由在打开连接时发生的 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="T:System.Data.SqlClient.SqlBulkCopyColumnMapping">
      <summary>定义 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例的数据源中的列与该实例的目标表中的列之间的映射。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor">
      <summary>用于初始化新的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象的默认构造函数。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)">
      <summary>创建新的列映射，并使用列序号引用源列和目标列。</summary>
      <param name="sourceColumnOrdinal">数据源中源列的序号位置。</param>
      <param name="destinationOrdinal">目标表中目标列的序号位置。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.String)">
      <summary>创建新的列映射，并使用列序号引用源列和目标列的列名称。</summary>
      <param name="sourceColumnOrdinal">数据源中源列的序号位置。</param>
      <param name="destinationColumn">目标表中目标列的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.Int32)">
      <summary>创建新的列映射，并使用列名称引用源列和目标列的列序号。</summary>
      <param name="sourceColumn">数据源中源列的名称。</param>
      <param name="destinationOrdinal">目标表中目标列的序号位置。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.String)">
      <summary>创建新的列映射，并使用列名称引用源列和目标列。</summary>
      <param name="sourceColumn">数据源中源列的名称。</param>
      <param name="destinationColumn">目标表中目标列的名称。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn">
      <summary>正在目标数据库表中映射的列的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" /> 属性的字符串值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal">
      <summary>目标表中目标列的序号值。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" /> 属性的整数值，或者如果尚未设置该属性，则为 -1。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn">
      <summary>正在数据源中映射的列的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" /> 属性的字符串值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal">
      <summary>数据源中源列的序号位置。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal" /> 属性的整数值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection">
      <summary>继承自 <see cref="T:System.Collections.CollectionBase" /> 的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象的集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>将指定的映射添加到 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> 中。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</returns>
      <param name="bulkCopyColumnMapping">描述要添加到集合中的映射的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)">
      <summary>通过使用序号指定源列和目标列，创建一个新的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 并将其添加到集合中。</summary>
      <returns>列映射。</returns>
      <param name="sourceColumnIndex">数据源中源列的序号位置。</param>
      <param name="destinationColumnIndex">目标表中目标列的序号位置。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.String)">
      <summary>通过对源列使用序号和对目标列使用字符串，创建一个新的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 并将其添加到集合中。</summary>
      <returns>列映射。</returns>
      <param name="sourceColumnIndex">数据源中源列的序号位置。</param>
      <param name="destinationColumn">目标表中目标列的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.Int32)">
      <summary>通过使用列名称描述源列，同时使用序号指定目标列，从而创建一个新的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 并将其添加到集合中。</summary>
      <returns>列映射。</returns>
      <param name="sourceColumn">数据源中源列的名称。</param>
      <param name="destinationColumnIndex">目标表中目标列的序号位置。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.String)">
      <summary>通过使用列名称指定源列和目标列，创建一个新的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 并将其添加到集合中。</summary>
      <returns>列映射。</returns>
      <param name="sourceColumn">数据源中源列的名称。</param>
      <param name="destinationColumn">目标表中目标列的名称。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear">
      <summary>清除集合的内容。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains(System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>获取一个值，该值指示集合中是否存在指定的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</summary>
      <returns>如果集合中存在指定映射，则为 true；否则为 false。</returns>
      <param name="value">有效的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping[],System.Int32)">
      <summary>从特定索引处开始，将 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> 的元素复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 项的数组。</summary>
      <param name="array">作为从 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> 复制的元素的目标位置的一维 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf(System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>获取指定 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象的索引。</summary>
      <returns>列映射的从零开始的索引；如果在集合中未找到该列映射，则为 -1。</returns>
      <param name="value">要搜索的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert(System.Int32,System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>在指定索引处插入一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />。</summary>
      <param name="index">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> 中要插入新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 的位置的整数值。</param>
      <param name="value">要插入集合中的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item(System.Int32)">
      <summary>获取位于指定索引位置的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</returns>
      <param name="index">要查找的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 的从零开始的索引。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> 中移除指定的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 元素。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的映射。</summary>
      <param name="index">要从集合中移除的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象的从零开始的索引。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlBulkCopyOptions">
      <summary>按位标志，指定一个或多个与 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 的实例一起使用的选项。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints">
      <summary>请在插入数据的同时检查约束。 默认情况下，不检查约束。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.Default">
      <summary>对所有选项使用默认值。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.FireTriggers">
      <summary>指定后，会导致服务器为插入到数据库中的行激发插入触发器。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.KeepIdentity">
      <summary>保留源标识值。 如果未指定，则由目标分配标识值。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.KeepNulls">
      <summary>保留目标表中的空值，而不管默认值的设置如何。 如果未指定，则空值将由默认值替换（如果适用）。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.TableLock">
      <summary>在批量复制操作期间获取批量更新锁。 如果未指定，则使用行锁。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction">
      <summary>如果已指定，则每一批批量复制操作将在事务中发生。 如果指示了此选项，并且为构造函数提供了 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 对象，则发生 <see cref="T:System.ArgumentException" />。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientFactory">
      <summary>表示一组方法，这些方法用于创建 <see cref="N:System.Data.SqlClient" /> 提供程序对数据源类的实现的实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlClientFactory.CanCreateDataSourceEnumerator">
      <summary>如果可以创建 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />，则返回 true；否则为 false。</summary>
      <returns>如果可以创建 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateCommand">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbCommand" /> 实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的新强类型实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateCommandBuilder">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateConnection">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbConnection" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateConnectionStringBuilder">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateDataAdapter">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateDataSourceEnumerator">
      <summary>返回一个新 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />。</summary>
      <returns>新的数据源枚举器。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateParameter">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbParameter" /> 实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的新强类型实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回一个新 <see cref="T:System.Security.CodeAccessPermission" />。</summary>
      <returns>
        <see cref="T:System.Security.CodeAccessPermission" /> 的强类型实例。</returns>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举的成员。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientFactory.Instance">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlClientFactory" /> 的实例。 此操作可用于检索强类型数据对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IServiceProvider.GetService(System.Type)" />。</summary>
      <returns>服务对象。</returns>
      <param name="serviceType">一个对象，它指定要获取的服务对象的类型。</param>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientMetaDataCollectionNames">
      <summary>提供一个常数列表，该列表与 GetSchema 方法一起使用以检索元数据集合。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Columns">
      <summary>用于 GetSchema 方法的常数，表示 Columns 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Databases">
      <summary>用于 GetSchema 方法的常数，表示 Databases 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.ForeignKeys">
      <summary>用于 GetSchema 方法的常数，表示 ForeignKeys 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.IndexColumns">
      <summary>用于 GetSchema 方法的常数，表示 IndexColumns 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Indexes">
      <summary>用于 GetSchema 方法的常数，表示 Indexes 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Parameters">
      <summary>用于 GetSchema 方法的常数，表示 Parameters 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.ProcedureColumns">
      <summary>用于 GetSchema 方法的常数，表示 ProcedureColumns 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Procedures">
      <summary>用于 GetSchema 方法的常数，表示 Procedures 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Tables">
      <summary>用于 GetSchema 方法的常数，表示 Tables 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.UserDefinedTypes">
      <summary>用于 GetSchema 方法的常数，表示 UserDefinedTypes 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Users">
      <summary>用于 GetSchema 方法的常数，表示 Users 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.ViewColumns">
      <summary>用于 GetSchema 方法的常数，表示 ViewColumns 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Views">
      <summary>用于 GetSchema 方法的常数，表示 Views 集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientPermission">
      <summary>启用用于 SQL Server 的 .NET Framework 数据提供程序，帮助确保用户具有足够的安全级别来访问数据源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许空白密码。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 对象添加新的连接字符串和一组限制性关键字。</summary>
      <param name="connectionString">连接字符串。</param>
      <param name="restrictions">关键限制。</param>
      <param name="behavior">
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 枚举之一。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.Copy">
      <summary>以 <see cref="T:System.Security.IPermission" /> 形式返回 <see cref="T:System.Data.SqlClient.SqlClientPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientPermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一，表示使用声明性安全可执行的操作。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermissionAttribute.CreatePermission">
      <summary>返回一个 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 对象，该对象是根据特性属性配置的。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.SqlClient.SqlCommand">
      <summary>表示要对 SQL Server 数据库执行的一个 Transact-SQL 语句或存储过程。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String)">
      <summary>用查询文本初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)">
      <summary>初始化具有查询文本和 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">一个 <see cref="T:System.Data.SqlClient.SqlConnection" />，它表示到 SQL Server 实例的连接。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
      <summary>使用查询文本、<see cref="T:System.Data.SqlClient.SqlConnection" /> 以及 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">一个 <see cref="T:System.Data.SqlClient.SqlConnection" />，它表示到 SQL Server 实例的连接。</param>
      <param name="transaction">将在其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="T:System.Data.SqlClient.SqlTransaction" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery">
      <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 时，也需要该值。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中未包含名称/值对“Asynchronous Processing=true”。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)">
      <summary>如果提供回调过程和状态信息，则启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 时，也需要该值。</returns>
      <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 null（在 Microsoft Visual Basic 中为 Nothing）以指示不需要回调。</param>
      <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中未包含名称/值对“Asynchronous Processing=true”。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader">
      <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />（返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例）时，也需要该值。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中未包含名称/值对“Asynchronous Processing=true”。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)">
      <summary>如果提供回调过程和状态信息，则启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />（返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例）时，也需要该值。</returns>
      <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 null（在 Microsoft Visual Basic 中为 Nothing）以指示不需要回调。</param>
      <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中未包含名称/值对“Asynchronous Processing=true”。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)">
      <summary>在给定回调过程和状态信息的情况下，通过使用 CommandBehavior 值之一并从服务器中检索一个或多个结果集，初始化由此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      <returns>一个可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />（返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例）时，也需要该值。</returns>
      <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 null（在 Microsoft Visual Basic 中为 Nothing）以指示不需要回调。</param>
      <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一，指示用于语句执行和数据检索的选项。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中未包含名称/值对“Asynchronous Processing=true”。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)">
      <summary>使用 <see cref="T:System.Data.CommandBehavior" /> 值之一，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />（返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例）时，也需要该值。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一，指示用于语句执行和数据检索的选项。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中未包含名称/值对“Asynchronous Processing=true”。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader">
      <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" /> 对象返回。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用可返回单个 XML 值的 EndExecuteXmlReader 时，也需要该值。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中未包含名称/值对“Asynchronous Processing=true”。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)">
      <summary>使用回调过程启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" /> 对象返回。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用将命令结果以 XML 格式返回的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> 时，也需要此值。</returns>
      <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 null（在 Microsoft Visual Basic 中为 Nothing）以指示不需要回调。</param>
      <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中未包含名称/值对“Asynchronous Processing=true”。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.Cancel">
      <summary>尝试取消 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的执行。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.Clone">
      <summary>创建作为当前实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandText">
      <summary>获取或设置要对数据源执行的 Transact-SQL 语句、表名或存储过程。</summary>
      <returns>要执行的 Transact-SQL 语句或存储过程。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandTimeout">
      <summary>获取或设置在终止执行命令的尝试并生成错误之前的等待时间。</summary>
      <returns>等待命令执行的时间（以秒为单位）。 默认值为 30 秒。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandType">
      <summary>获取或设置一个值，该值指示如何解释 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 属性。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 Text。</returns>
      <exception cref="T:System.ArgumentException">该值不是有效的 <see cref="T:System.Data.CommandType" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的此实例使用的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</summary>
      <returns>与数据源的连接。 默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">命令在事务中提交时 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 属性被更改。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的新实例。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象是否应在 Windows 窗体设计器控件中可见。</summary>
      <returns>一个值，它指示命令对象是否应在控件中可见。 默认值为 true。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)">
      <summary>完成 Transact-SQL 语句的异步执行。</summary>
      <returns>受影响的行数（与 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> 相同的行为）。</returns>
      <param name="asyncResult">通过调用 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 Nothing）</exception>
      <exception cref="T:System.InvalidOperationException">对一个命令执行调用了多次 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />，或者该方法与其执行方法不匹配（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 来完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> 的调用的执行）。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 中指定的时间，并且通过 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 指定的异步操作不完整。 在某些情况下， <see cref="T:System.IAsyncResult" /> 可能不正确地设置为 IsCompleted 。 如果该事件发生，并调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> ，且同时满足 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 中指定的时间超时、异步操作 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 未完成，则 EndExecuteNonQuery 将引发一个 SqlException 错误 若要纠正这种情况，您应增加 CommandTimeout 的值或由异步操作降低进行的工作。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)">
      <summary>完成 Transact-SQL 语句的异步执行，返回请求的 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>可用于检索请求行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
      <param name="asyncResult">由调用 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" /> 返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 Nothing）</exception>
      <exception cref="T:System.InvalidOperationException">对一个命令执行调用了多次 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />，或者该方法与其执行方法不匹配（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> 来完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> 的调用的执行）。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)">
      <summary>完成 Transact-SQL 语句的异步执行，将请求的数据以 XML 形式返回。</summary>
      <returns>可用于获取生成的 XML 数据的 <see cref="T:System.Xml.XmlReader" /> 对象。</returns>
      <param name="asyncResult">由调用 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> 返回的 <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 Nothing）</exception>
      <exception cref="T:System.InvalidOperationException">对一个命令执行调用了多次 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />，或者该方法与其执行方法不匹配（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> 来完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 的调用的执行）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery">
      <summary>对连接执行 Transact-SQL 语句并返回受影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在对锁定的行执行该命令期间发生了异常。 如果使用的是 Microsoft .NET Framework 1.0 版，将不会生成该异常。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> 的异步版本，针对该连接执行 Transact-SQL 语句，并返回影响的行数。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.InvalidOperationException">在任务完成之前为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReader">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在对锁定的行执行该命令期间发生了异常。 如果使用的是 Microsoft .NET Framework 1.0 版，将不会生成该异常。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">连接的当前状态为关闭。 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 需要打开的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。 通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" />。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。 通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="behavior">语句执行和数据检索的选项。当设置为 Default 时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 将读取整个行（返回完整“任务”前）。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
      <exception cref="T:System.InvalidOperationException">在任务完成前，对于同一个实例调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" /> 多次。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="behavior">语句执行和数据检索的选项。当设置为 Default 时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 将读取整个行（返回完整“任务”前）。</param>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
      <exception cref="T:System.InvalidOperationException">在任务完成前，对于同一个实例调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> 多次。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 值无效。</exception>
      <exception cref="T:System.InvalidOperationException">在任务完成前，对于同一个实例调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> 多次。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteScalar">
      <summary>执行查询，并返回查询所返回的结果集中第一行的第一列。 忽略其他列或行。</summary>
      <returns>结果集中第一行的第一列；如果结果集为空，则为空引用（在 Visual Basic 中为 Nothing）。 返回的最大字符数为 2033 个字符。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在对锁定的行执行该命令期间发生了异常。 如果使用的是 Microsoft .NET Framework 1.0 版，将不会生成该异常。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" /> 的异步版本，异步执行查询，并将查询返回的结果集中第一行的第一列返回。 忽略其他列或行。 取消标记可用于在命令超时超过前请求放弃操作。 通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 并生成一个 <see cref="T:System.Xml.XmlReader" /> 对象。</summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在对锁定的行执行该命令期间发生了异常。 如果使用的是 Microsoft .NET Framework 1.0 版，将不会生成该异常。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Xml.XmlReader" /> 对象。 通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Xml.XmlReader" /> 对象。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidCastException">当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用了除 Binary 或 VarBinary 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 有关此步流的更多信息，请参见SqlClient 流支持。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用了除 Char、NChar、NVarChar、 VarChar 或 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。 当 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用了除 Xml 之外的 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />。</exception>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。 进行流式操作期间的已关闭或已放置的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关此步流的更多信息，请参见SqlClient 流支持。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。 以流的方式进行操作间发生的超时。 有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">在以流的方式进行操作期间出现在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 中的错误。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">进行流式操作期间 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象已关闭。有关此步流的更多信息，请参见SqlClient 流支持。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Notification">
      <summary>获取或设置一个指定与此命令绑定的 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象的值。</summary>
      <returns>如果设置为空（默认值），则不应请求任何通知。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.NotificationAutoEnlist">
      <summary>获取或设置一个值，该值指示应用程序是否应自动接收来自公共 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象的查询通知。</summary>
      <returns>如果应用程序应自动接收查询通知，则为 true；否则为 false。 默认值为“True”。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <returns>Transact-SQL 语句或存储过程的参数。 默认值为空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.Prepare">
      <summary>在 SQL Server 的实例上创建命令的一个准备版本。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ResetCommandTimeout">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 属性重置为其默认值。</summary>
    </member>
    <member name="E:System.Data.SqlClient.SqlCommand.StatementCompleted">
      <summary>当 Transact-SQL 语句执行完成时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Transaction">
      <summary>获取或设置将在其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="T:System.Data.SqlClient.SqlTransaction" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlTransaction" />。 默认值为 null。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.UpdatedRowSource">
      <summary>获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" /> 的“Update”方法使用时，如何应用于 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlCommandBuilder">
      <summary>自动生成单表命令，用于将对 <see cref="T:System.Data.DataSet" /> 所做的更改与关联的 SQL Server 数据库的更改相协调。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)">
      <summary>使用关联的 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 对象初始化 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的新实例。</summary>
      <param name="adapter">
        <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 的名称。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.CatalogLocation">
      <summary>对于 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的实例，获取或设置 <see cref="T:System.Data.Common.CatalogLocation" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.CatalogLocation" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator">
      <summary>设置或获取一个字符串，该字符串用作 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的实例的目录分隔符。</summary>
      <returns>指示要用于 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的目录分隔符的字符串。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.DataAdapter">
      <summary>获取或设置自动为其生成 Transact-SQL 语句的一个 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)">
      <summary>从在 <see cref="T:System.Data.SqlClient.SqlCommand" /> 中指定的存储过程中检索参数信息并填充指定的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象的 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> 集合。</summary>
      <param name="command">引用将从其中导出参数信息的存储过程的 <see cref="T:System.Data.SqlClient.SqlCommand" />。 将派生参数添加到 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> 集合中。</param>
      <exception cref="T:System.InvalidOperationException">此命令文本不是一个有效的存储过程名。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand">
      <summary>获取自动生成的、对数据库执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取自动生成的、对数据库执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>自动生成的、执行删除操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则生成与列名匹配的参数名（如果可能）。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand">
      <summary>获取自动生成的、对数据库执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取自动生成的、对数据库执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>自动生成的、执行插入操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则生成与列名匹配的参数名（如果可能）。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand">
      <summary>获取自动生成的、对数据库执行更新操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取自动生成的、对数据库执行更新操作所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>自动生成的、执行更新所需的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <param name="useColumnsForParameterNames">如果为 true，则生成与列名匹配的参数名（如果可能）。 如果为 false，则生成 @p1、@p2，以此类推。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)">
      <summary>给定了具有正确的目录大小写设置且不带引号的标识符时，返回该标识符的正确的带引号形式。 这包括正确地转义该标识符中的任何嵌入引号。</summary>
      <returns>带引号的标识符版本。 标识符内的嵌入引号被正确地转义。</returns>
      <param name="unquotedIdentifier">不带引号的原始标识符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix">
      <summary>获取或设置在指定其名称中包含空格或保留标记等字符的 SQL Server 数据库对象（如表或列）时使用的一个或多个起始字符。</summary>
      <returns>要使用的一个或多个起始字符。 默认值为空字符串。</returns>
      <exception cref="T:System.InvalidOperationException">在生成 INSERT、UPDATE 或 DELETE 命令后，不能更改此属性。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix">
      <summary>获取或设置在指定其名称中包含空格或保留标记等字符的 SQL Server 数据库对象（如表或列）时使用的一个或多个结束字符。</summary>
      <returns>要使用的结束字符。 默认值为空字符串。</returns>
      <exception cref="T:System.InvalidOperationException">当生成 Insert、Update 或 Delete 命令后，不能更改此属性。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator">
      <summary>获取或设置要用作架构标识符和任何其他标识符之间的分隔符的字符。</summary>
      <returns>要用作架构分隔符的字符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>给定了带引号的标识符时，返回该标识符的正确的不带引号的形式。 这包括正确地非转义该标识符的所有嵌入的引号。</summary>
      <returns>未加引号的标识符，其嵌入的引号已正确进行非转义。</returns>
      <param name="quotedIdentifier">其嵌入引号将被移除的标识符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlConnection">
      <summary>表示一个到 SQL Server 数据库的打开的连接。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)">
      <summary>如果给定包含连接字符串的字符串，则初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例。</summary>
      <param name="connectionString">用于打开 SQL Server 数据库的连接。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)">
      <summary>初始化给定连接字符串的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例，而不使用包含用户识别号和密码的 Integrated Security = true 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</summary>
      <param name="connectionString">不使用以下任何连接字符串关键字的连接字符串：Integrated Security = true、 UserId，或 Password；或不使用 ContextConnection = true。</param>
      <param name="credential">
        <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。 如果 <paramref name="credential" /> 为 null，则 <see cref="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)" /> 在功能上等效于 <see cref="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction">
      <summary>开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">使用多活动结果集 (MARS) 时，不允许执行并行事务。</exception>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="iso">事务应在其下运行的隔离级别。</param>
      <exception cref="T:System.Data.SqlClient.SqlException">使用多活动结果集 (MARS) 时，不允许执行并行事务。</exception>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)">
      <summary>以指定的隔离级别和事务名称启动数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="iso">事务应在其下运行的隔离级别。</param>
      <param name="transactionName">事务的名称。</param>
      <exception cref="T:System.Data.SqlClient.SqlException">使用多活动结果集 (MARS) 时，不允许执行并行事务。</exception>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)">
      <summary>以指定的事务名称启动数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="transactionName">事务的名称。</param>
      <exception cref="T:System.Data.SqlClient.SqlException">使用多活动结果集 (MARS) 时，不允许执行并行事务。</exception>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)">
      <summary>为打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 更改当前数据库。</summary>
      <param name="database">要代替当前数据库加以使用的数据库的名称。</param>
      <exception cref="T:System.ArgumentException">数据库名称无效。</exception>
      <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">不能更改数据库。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)">
      <summary>更改 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象指示的用户的 SQL Server 密码。</summary>
      <param name="connectionString">包含连接至服务器的足够信息的连接字符串。 不应使用以下任何连接字符串关键字的连接字符串：Integrated Security = true、 UserId，或 Password；或者 ContextConnection = true。</param>
      <param name="credential">
        <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</param>
      <param name="newSecurePassword">新密码。 <paramref name="newSecurePassword" /> 必须是只读的。 该密码也必须符合服务器上设置的任何密码安全策略（例如：最小长度、特定字符的要求）。</param>
      <exception cref="T:System.ArgumentException">连接字符串包含 UserId、 Password 或 Integrated Security=true 的任意组合。 连接字符串包含 Context Connection=true。 <paramref name="newSecurePassword" /> 的长度超过 128 个字符。 <paramref name="newSecurePassword" /> 不是只读的。 <paramref name="newSecurePassword" /> 是空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">其中一个参数（<paramref name="connectionString" />、<paramref name="credential" /> 或 <paramref name="newSecurePassword" />）为 null。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)">
      <summary>将连接字符串中指示的用户的 SQL Server 密码更改为提供的新密码。</summary>
      <param name="connectionString">包含连接至所需服务器的足够信息的连接字符串。 连接字符串必须包含用户 ID 和当前密码。</param>
      <param name="newPassword">要设置的新密码。 此密码必须符合服务器上设置的任何密码安全策略，包括最小长度、特定字符的要求等。</param>
      <exception cref="T:System.ArgumentException">连接字符串包括使用集成安全性的选项。 Or <paramref name="newPassword" /> 的长度超过 128 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 或 <paramref name="newPassword" /> 参数为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ClearAllPools">
      <summary>清空连接池。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)">
      <summary>清空与指定连接关联的连接池。</summary>
      <param name="connection">要从连接池中清除的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ClientConnectionId">
      <summary>最近连接尝试连接的 ID，无论该尝试是成功还是失败。</summary>
      <returns>最近连接尝试的连接 ID。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.Close">
      <summary>关闭与数据库的连接。 此方法是关闭任何已打开连接的首选方法。</summary>
      <exception cref="T:System.Data.SqlClient.SqlException">在打开连接时出现连接级别的错误。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ConnectionString">
      <summary>获取或设置用于打开 SQL Server 数据库的字符串。</summary>
      <returns>连接字符串，其中包含源数据库名称和建立初始连接所需的其他参数。 默认值为空字符串。</returns>
      <exception cref="T:System.ArgumentException">提供了无效的连接字符串参数，或未提供所需的连接字符串参数。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ConnectionTimeout">
      <summary>获取在尝试建立连接时终止尝试并生成错误之前所等待的时间。</summary>
      <returns>等待连接打开的时间（以秒为单位）。 默认值为 15 秒。</returns>
      <exception cref="T:System.ArgumentException">所设置的值小于 0。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.CreateCommand">
      <summary>创建并返回一个与 <see cref="T:System.Data.SqlClient.SqlConnection" /> 关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.Credential">
      <summary>获取或设置此连接的 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</summary>
      <returns>此连接的 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.Database">
      <summary>获取当前数据库或连接打开后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称或连接打开后要使用的数据库的名称。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.DataSource">
      <summary>获取要连接的 SQL Server 实例的名称。</summary>
      <returns>联结到 SQL Server 的实例的名称。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors">
      <summary>获取或设置 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> 属性。</summary>
      <returns>如果已设置 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> 属性，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.GetSchema">
      <summary>返回此 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的数据源的架构信息。 有关架构的更多信息，请参见 SQL Server 架构集合。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String)">
      <summary>使用指定的架构名称字符串，返回此 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> 被指定为空。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])">
      <summary>使用指定的架构名称字符串和指定的限制值字符串数组，返回此 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的数据源的架构信息。</summary>
      <returns>包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">请求的架构的一组限制值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> 被指定为空。</exception>
    </member>
    <member name="E:System.Data.SqlClient.SqlConnection.InfoMessage">
      <summary>当 SQL Server 返回一个警告或信息性消息时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.Open">
      <summary>使用 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> 所指定的属性设置打开数据库连接。</summary>
      <exception cref="T:System.InvalidOperationException">未指定数据源或服务器，不能打开连接。 或 连接已打开。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在打开连接时出现连接级别的错误。 如果 <see cref="P:System.Data.SqlClient.SqlException.Number" /> 属性包含值 18487 或 18488，则表示指定的密码已过期或必须进行重置。 有关更多信息，请参见 <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> 方法。 app.config 文件的 &lt;system.data.localdb&gt; 标记具有无效或未知的元素。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">&lt;localdbinstances&gt; 部分内具有两个名称相同的词条。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlConnection.Open" />的异步版本，打开由 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />指定的属性设置的数据库连接。 取消标记可用于在连接超时超过前请求放弃操作。异常将通过返回的任务传播。 如果在未成功连接的情况下连接超时时间已过，则返回的任务将被标记为“附带异常出错”。 实现返回一个不带有用于共用和非共用连接的锁定调用线程的“任务”。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />。 在连接字符串中指定 Context Connection=true。 连接超时之前，连接水池中的连接不可用。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">在打开连接时，已发生的由 SQL Server 返回的任何错误。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.PacketSize">
      <summary>用来与 SQL Server 的实例进行通信的网络数据包的大小，以字节为单位。</summary>
      <returns>网络数据包的大小（以字节为单位）。 默认值为 8000。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ResetStatistics">
      <summary>如果启用统计信息收集，则所有的值都将重置为零。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.RetrieveStatistics">
      <summary>调用该方法时，将返回统计信息的名称值对集合。</summary>
      <returns>返回 <see cref="T:System.Collections.DictionaryEntry" /> 项的 <see cref="T:System.Collections.IDictionary" /> 类型的引用。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ServerVersion">
      <summary>获取包含客户端连接的 SQL Server 实例的版本的字符串。</summary>
      <returns>SQL Server 实例的版本。</returns>
      <exception cref="T:System.InvalidOperationException">连接处于关闭状态。 当返回的任务尚未完成，且调用 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> 后连接并未打开时，将调用 <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.State">
      <summary>指示最近在连接上执行网络操作时， <see cref="T:System.Data.SqlClient.SqlConnection" /> 的状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.StatisticsEnabled">
      <summary>如果设置为 true，则对当前连接启用统计信息收集。</summary>
      <returns>如果启用了统计信息收集，则返回 true；否则返回 false。 默认为 false 类型。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为此实例副本的新对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.WorkstationId">
      <summary>获取标识数据库客户端的一个字符串。</summary>
      <returns>标识数据库客户端的一个字符串。 如果没有指定，则为客户端计算机的名称。 如果两个都没有指定，则为空字符串。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.SqlClient.SqlConnectionStringBuilder">
      <summary>为创建和管理由 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类使用的连接字符串的内容提供了一种简单方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 类的新实例。 所提供的连接字符串为实例的内部连接信息提供数据。</summary>
      <param name="connectionString">对象内部连接信息的基础。 分析为名称/值对。 无效的键名会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">连接字符串中的键名无效。</exception>
      <exception cref="T:System.FormatException">连接字符串中的值无效（特别是需要布尔值或数值型值而并未提供时）。</exception>
      <exception cref="T:System.ArgumentException">提供的 <paramref name="connectionString" /> 无效。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent">
      <summary>连接到 SQL Server 可用性组中的数据库时声明应用程序工作负荷类型。 您可以使用 <see cref="T:System.Data.SqlClient.ApplicationIntent" /> 设置此属性的值。 有关 AlwaysOn 可用性组的 SqlClient 支持的更多信息，请参见SqlClient 对高可用性的支持，灾难恢复。</summary>
      <returns>返回属性（值类型为 <see cref="T:System.Data.SqlClient.ApplicationIntent" />）的当前值。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName">
      <summary>获取或设置与连接字符串关联的应用程序的名称。</summary>
      <returns>应用程序的名称；或者，如果未提供名称，则为“.NET SqlClient Data Provider”。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing">
      <summary>获取或设置一个布尔值，该值指定使用此连接字符串创建的连接是否允许异步处理。</summary>
      <returns>在 .NET Framework 4.5 开始时，忽略此属性。 更多关于 SqlClient 支持异步编程的信息，请参见 异步编程。 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename">
      <summary>获取或设置包含主数据文件名称的字符串。 该字符串包括可附加数据库的完整路径名。</summary>
      <returns>AttachDBFilename 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例的内容。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset">
      <summary>已过时。 获取或设置一个布尔值，该值指示在从连接池中提取连接时是否重置连接。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset" /> 属性的值；如果未提供任何值，则为 true。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount">
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval">
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout">
      <summary>获取或设置在终止尝试并产生错误之前，等待与服务器连接的时间长度（以秒为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout" /> 属性的值；如果未提供任何值，则为 15 秒。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 是否包含特定键。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection">
      <summary>获取或设置一个值，该值指示应建立与 SQL Server 的客户端/服务器连接还是进程内连接。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection" /> 属性的值；如果未提供任何值，则为 False。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage">
      <summary>获取或设置 SQL Server 语言记录名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource">
      <summary>获取或设置要连接到的 SQL Server 实例的名称或网络地址。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt">
      <summary>获取或设置一个布尔值，该值指示在服务器安装了证书的情况下，SQL Server 是否为客户端和服务器之间发送的所有数据使用 SSL 加密。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Enlist">
      <summary>获取或设置一个布尔值，该值指示 SQL Server 连接池程序是否在创建线程的当前事务上下文中自动登记连接。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Enlist" /> 属性的值；如果未提供任何值，则为 true 。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner">
      <summary>获取或设置在主服务器停机时要连接到的伙伴服务器的名称或地址。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog">
      <summary>获取或设置与该连接关联的数据库的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity">
      <summary>获取或设置一个布尔值，该值指示是否在连接中指定用户 ID 和密码（值为 false 时），或者是否使用当前的 Windows 帐户凭据进行身份验证（值为 true 时）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 的大小是否是固定的。</summary>
      <returns>任何情况下都为 true，因为 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 提供固定大小的键/值对集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键相关联的值。 在 C# 中，此属性为索引器。</summary>
      <returns>与指定的键相关联的值。</returns>
      <param name="keyword">要获取或设置的项的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">尝试添加可用键中不存在的键。</exception>
      <exception cref="T:System.FormatException">连接字符串中的值无效（特别是需要布尔值或数值型值而并未提供时）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Keys">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的键。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout">
      <summary>获取或设置连接被销毁前在连接池中存活的最短时间（以秒为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout" /> 属性的值；如果未提供任何值，则为 0。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize">
      <summary>获取或设置针对此特定连接字符串连接池中所允许的最大连接数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize" /> 属性的值；如果未提供任何值，则为 100。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize">
      <summary>获取或设置针对此特定连接字符串连接池中所允许的最小连接数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize" /> 属性的值；如果未提供任何值，则为 0。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets">
      <summary>如果为 true，则应用程序可以保留多活动结果集 (MARS)。 如果为 false，则应用程序必须处理或取消一个批处理中的所有结果集，然后才能对该连接执行任何其他批处理。 有关更多信息，请参见多活动结果集 (MARS)。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover">
      <summary>如果您的应用程序要连接到不同子网上的 AlwaysOn 可用性组 (AG)，则设置 MultiSubnetFailover=true 会加快检测（当前）活动服务器以及与服务器的连接。 有关 AlwaysOn 可用性组的 SqlClient 支持的更多信息，请参见SqlClient 对高可用性的支持，灾难恢复。</summary>
      <returns>返回表示当前属性值的 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary">
      <summary>获取或设置一个字符串，该字符串包含用于建立与 SQL Server 的连接的网络库的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize">
      <summary>获取或设置用来与 SQL Server 的实例通信的网络数据包的大小（以字节为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize" /> 属性的值；如果未提供任何值，则为 8000。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Password">
      <summary>获取或设置 SQL Server 帐户的密码。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Password" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">密码不正确设置为无效。请参见下面的代码示例。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo">
      <summary>获取或设置一个布尔值，该值指示如果连接是打开的或者一直处于打开状态，那么安全敏感信息（如密码）是否将不作为连接的一部分返回。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling">
      <summary>获取或设置一个布尔值，该值指示每次请求连接时该连接是汇入连接池还是显式打开。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling" /> 属性的值；如果未提供任何值，则为 true。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)">
      <summary>移除 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例中具有指定键的项。</summary>
      <returns>如果该键存在于连接字符串中并被移除，则为 true；如果该键不存在，则为 false。</returns>
      <param name="keyword">要从此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication">
      <summary>获取或设置一个布尔值，该值指示是否使用连接来支持复制。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>指示此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例中是否存在指定的键。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 包含带有指定键的项，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中定位的键。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding">
      <summary>获取或设置一个字符串值，该值指示该连接如何保持与登记 System.Transactions 事务的关联。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate">
      <summary>获取或设置一个值，该值指示在跳过用于验证信任的证书链遍历时是否加密信道。</summary>
      <returns>Boolean。 可识别的值为 true、false、yes 和 no。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中检索与所提供的键对应的值。</summary>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则为 true；否则为 false。</returns>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword." /> 对应的值</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion">
      <summary>获取或设置一个字符串值，该值指示应用程序所需的类型系统。</summary>
      <returns>下表列出了 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion" /> 属性的可能值： 值 描述 SQL Server 2005 使用 SQL Server 2005 类型系统。 对 ADO.NET 的当前版本不进行任何转换。 SQL Server 2008 使用 SQL Server 2008 类型系统。 最新 使用此客户端/服务器对能够处理的最新版本。 这个最新版本将随着客户端和服务器组件的升级自动更新。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID">
      <summary>获取或设置连接到 SQL Server 时要使用的用户 ID。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance">
      <summary>获取或设置一个值，该值指示是否将连接从默认的 SQL Server Express 实例重定向到在调用方帐户之下运行并且在运行时启动的实例。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance" /> 属性的值；如果未提供任何值，则为 False。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Values">
      <summary>获取包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的值。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID">
      <summary>获取或设置连接到 SQL Server 的工作站的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.SqlClient.SqlCredential">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlCredential" /> 提供了更安全的方式来指定使用 SQL Server 身份验证的登录尝试密码。 <see cref="T:System.Data.SqlClient.SqlCredential" /> 由用户 ID 和将用于 SQL Server 身份验证的密码构成。 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象中的密码是 <see cref="T:System.Security.SecureString" /> 类型。 无法继承 <see cref="T:System.Data.SqlClient.SqlCredential" />。 Windows 身份验证 (Integrated Security = true) 有登录到 SQL Server 数据库的最安全的方式。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCredential.#ctor(System.String,System.Security.SecureString)">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlCredential" /> 类型的对象。</summary>
      <param name="userId">用户 ID。</param>
      <param name="password">密码；标记为只读的 <see cref="T:System.Security.SecureString" /> 值。通过一个读/写 <see cref="T:System.Security.SecureString" /> 参数将引发 <see cref="T:System.ArgumentException" />。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlCredential.Password">
      <summary>返回 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象的密码组件。</summary>
      <returns>返回 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象的密码组件。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCredential.UserId">
      <summary>返回 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象的用户 ID 组件。</summary>
      <returns>返回 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象的用户 ID 组件。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlDataAdapter">
      <summary>表示用于填充 <see cref="T:System.Data.DataSet" /> 和更新 SQL Server 数据库的一组数据命令和一个数据库连接。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类的新实例，用指定的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 作为 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 的属性。</summary>
      <param name="selectCommand">一个 <see cref="T:System.Data.SqlClient.SqlCommand" />（可以是 Transact-SQL SELECT 语句或存储过程），已设置为 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 的 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 属性。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)">
      <summary>使用 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 和 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类的一个新实例。</summary>
      <param name="selectCommandText">一个 <see cref="T:System.String" />，它是将要由 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 的 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 属性使用的 Transact-SQL SELECT 语句或存储过程。</param>
      <param name="selectConnection">表示该连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。 如果连接字符串不使用 Integrated Security = true，可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)">
      <summary>用 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 和一个连接字符串初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类的一个新实例。</summary>
      <param name="selectCommandText">一个 <see cref="T:System.String" />，它是将要由 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 的 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 属性使用的 Transact-SQL SELECT 语句或存储过程。</param>
      <param name="selectConnectionString">连接字符串。 如果连接字符串不使用 Integrated Security = true，可以使用 <see cref="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来通过用户 ID 和密码比在连接字符串的文本中指定用户 ID 和密码更安全。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.DeleteCommand">
      <summary>获取或设置一个 Transact-SQL 语句或存储过程，以从数据集删除记录。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用 <see cref="T:System.Data.SqlClient.SqlCommand" />，以在数据库中删除对应于 <see cref="T:System.Data.DataSet" /> 中已删除行的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.InsertCommand">
      <summary>获取或设置一个 Transact-SQL 语句或存储过程，以在数据源中插入新记录。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用 <see cref="T:System.Data.SqlClient.SqlCommand" />，以在数据库中插入对应于 <see cref="T:System.Data.DataSet" /> 中的新行的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated">
      <summary>在对数据源执行命令后的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中发生。 尝试进行更新，因此激发了该事件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating">
      <summary>在对数据源执行命令前的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中发生。 尝试进行更新，因此激发了该事件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand">
      <summary>获取或设置一个 Transact-SQL 语句或存储过程，用于在数据源中选择记录。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.SqlClient.SqlCommand" />，用来从数据库中为 <see cref="T:System.Data.DataSet" /> 中的位置选择记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" />。</summary>
      <returns>
        <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IdbCommand that is" />，它针对数据集中已删除的行删除数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Data.IDbDataAdapter.InsertCommand" />。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它针对数据集中的新行将记录插入到数据源。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Data.IDbDataAdapter.SelectCommand" />。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IDbCommand" />，它从数据源中选择记录以便放入数据集中。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" />。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.IdbCommand" />，它针对数据集中已修改的行更新数据源中的记录。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为当前实例的副本的新对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize">
      <summary>获取或设置每次到服务器的往返过程中处理的行数。</summary>
      <returns>每一批处理的行数。 值为 效果 0批大小没有限制。 1禁用批量更新。 &gt;1 一次使用多批 <see cref="P:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize" /> 操作来发送更改。 将此值设置为 1 之外的值时，与 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 关联的所有命令必须将其 UpdatedRowSource 属性设置为 None 或 OutputParameters。 否则将引发异常。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.UpdateCommand">
      <summary>获取或设置一个 Transact-SQL 语句或存储过程，用于更新数据源中的记录。</summary>
      <returns>在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中使用的 <see cref="T:System.Data.SqlClient.SqlCommand" />，用于在数据库中更新对应于 <see cref="T:System.Data.DataSet" /> 中已修改行的记录。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlDataReader">
      <summary>提供一种从 SQL Server 数据库读取行的只进流的方式。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Connection">
      <summary>获取与 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 关联的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</summary>
      <returns>与 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 关联的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Depth">
      <summary>获取一个值，用于指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未放在有效的记录集中，则为 0；否则为当前行中的列数。 默认值为 -1。</returns>
      <exception cref="T:System.NotSupportedException">没有对 SQL Server 实例的当前连接。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <returns>列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)">
      <summary>获取指定列的字节形式的值。</summary>
      <returns>指定列的字节形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字节流读入缓冲区，并将其作为从给定的缓冲区偏移量开始的数组。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">字段中的索引，从其开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">
        <paramref name="buffer" /> 中写入操作开始位置的索引。</param>
      <param name="length">要复制到缓冲区中的最大长度。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)">
      <summary>获取指定列的单个字符串形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字符流作为数组从给定的缓冲区偏移量开始读入缓冲区。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">字段中的索引，从其开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">
        <paramref name="buffer" /> 中写入操作开始位置的索引。</param>
      <param name="length">要复制到缓冲区中的最大长度。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)">
      <summary>获取一个表示指定列的数据类型的字符串。</summary>
      <returns>表示指定列的数据类型的字符串。</returns>
      <param name="i">要查找的列的从零开始的序号位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)">
      <summary>检索指定列的 <see cref="T:System.DateTimeOffset" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)">
      <summary>获取指定列的双精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)">
      <summary>获取是对象的数据类型的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Type" />，它是对象的数据类型。 在用户定义的类型 (UDT) 从数据库中返回的情况下，如果客户端上不存在该类型，则 GetFieldType 返回 null。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)">
      <summary>同步获取作为类型的指定列的值。 <see cref="M:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)" /> 是此方法的异步版本。</summary>
      <returns>返回的类型对象。</returns>
      <param name="i">要检索的列。</param>
      <typeparam name="T">要返回的值的类型。 有关更多信息，请参见备注部分。</typeparam>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。 没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该列中的值 null (<see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" /> == true)，检索非 SQL 类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与 SQL Server 返回的类型不匹配或无法进行转换。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>异步获取作为类型的指定列的值。 <see cref="M:System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)" />是此方法的同步版本。</summary>
      <returns>返回的类型对象。</returns>
      <param name="i">要检索的列。</param>
      <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播。 此构造函数不对取消做保证。 设置 CancellationToken.None 使得这种方法等同于 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />。 返回任务必须标记为已取消。</param>
      <typeparam name="T">要返回的值的类型。 有关更多信息，请参见备注部分。</typeparam>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。 没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该列中的值 null (<see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" /> == true)，检索非 SQL 类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与 SQL Server 返回的类型不匹配或无法进行转换。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)">
      <summary>获取指定列的单精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)">
      <summary>获取指定列的值作为全局唯一标识符 (GUID)。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)">
      <summary>获取指定列的 32 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)">
      <summary>获取指定列的 64 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetName(System.Int32)">
      <summary>获取指定列的名称。</summary>
      <returns>指定列的名称。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)">
      <summary>在给定列名称的情况下获取列序号。</summary>
      <returns>从零开始的列序号。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名称。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>获取一个 Object，它表示基础提供程序特定的字段类型。</summary>
      <returns>获取一个 <see cref="T:System.Object" />，它表示基础提供程序特定的字段类型。</returns>
      <param name="i">表示列序号的 <see cref="T:System.Int32" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>获取一个表示基础提供程序特定值的 Object。</summary>
      <returns>一个 <see cref="T:System.Object" />，它表示基础提供程序特定值。</returns>
      <param name="i">表示列序号的 <see cref="T:System.Int32" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>获取表示基础提供程序特定值的对象的数组。</summary>
      <returns>对象数组，它表示基础提供程序特定的值。</returns>
      <param name="values">要将列值复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSchemaTable">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，它描述 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 的列元数据。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 是关闭的。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 形式的值。</summary>
      <returns>列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlString" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlString" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)">
      <summary>返回指定列中 SQL Server 类型的数据值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlDbType" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])">
      <summary>填充包含记录中所有列的值的 <see cref="T:System.Object" /> 数组，这些值表示为 SQL Server 类型。</summary>
      <returns>表示复制的列数的整数。</returns>
      <param name="values">要将值复制到其中的 <see cref="T:System.Object" /> 数组。 这些列值表示为 SQL Server 类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)">
      <summary>获取指定列的 XML 值形式的值。</summary>
      <returns>包含相应字段中存储的 XML 的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引在 0 至 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围之外。</exception>
      <exception cref="T:System.InvalidOperationException">已尝试读取或访问关闭的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">检索的数据与 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型不兼容。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)">
      <summary>检索作为 <see cref="T:System.IO.Stream" /> 的二进制、图像、varbinary、UDT 和变量数据类型。</summary>
      <returns>流对象。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。 没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不属于以下类型之一： binary image varbinary UDT</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetString(System.Int32)">
      <summary>获取指定列的字符串形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)">
      <summary>检索作为 <see cref="T:System.IO.TextReader" /> 的 Char、 NChar、 NText、 NVarChar、 text、 varChar 和 Variant data types。</summary>
      <returns>返回的对象。</returns>
      <param name="i">要检索的列。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。 没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不属于以下类型之一： char nchar ntext nvarchar 文本 varchar</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)">
      <summary>检索指定列的 <see cref="T:System.TimeSpan" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)">
      <summary>获取以本机格式表示的指定列的值。</summary>
      <returns>对于 null 数据库列，此方法返回 <see cref="T:System.DBNull" />。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性列复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)">
      <summary>检索作为 <see cref="T:System.Xml.XmlReader" /> 的类型 XML 数据。</summary>
      <returns>返回的对象。</returns>
      <param name="i">指定列的值。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。 没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">返回的类不是 xml。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.HasRows">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 是否包含一行或多行。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 包含一行或多行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.IsClosed">
      <summary>检索一个布尔值，该值指示是否已关闭指定的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例。</summary>
      <returns>如果指定的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例已关闭，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)">
      <summary>确定指定的 <see cref="T:System.Data.CommandBehavior" /> 是否与 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 的对应项匹配。</summary>
      <returns>如果指定的 <see cref="T:System.Data.CommandBehavior" /> 为 true，则为 true；否则为 false。</returns>
      <param name="condition">
        <see cref="T:System.Data.CommandBehavior" /> 枚举。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在的或缺少的值。</summary>
      <returns>如果指定的列值与 <see cref="T:System.DBNull" /> 等效，则为 true；否则为 false。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" /> 的异步版本，其获取一个值，这个值指示此列是否包含不存在或缺失的值。  取消标记可用于在命令超时超过前请求放弃操作。 通过返回的任务对象将报告异常。</summary>
      <returns>如果指定的列值与 DBNull 等效，则为 true；否则为 false。</returns>
      <param name="i">从零开始的要检索的列。</param>
      <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播。 此构造函数不对取消做保证。 设置 CancellationToken.None 使得这种方法等同于 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />。 返回任务必须标记为已取消。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。 数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。 没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。 按顺序模式尝试读取上一步骤中读取的列。 没有正在进行的异步操作。 以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Item(System.Int32)">
      <summary>在给定列序号的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Item(System.String)">
      <summary>在给定列名称的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="name">列名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.NextResult">
      <summary>当读取批处理 Transact-SQL 语句的结果时，使数据读取器前进到下一个结果。</summary>
      <returns>如果存在多个结果集，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlDataReader.NextResult" /> 的异步版本，读取批处理 Transact-SQL 语句的结果时，将数据读取器推进到下一个结果。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)" />。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.Read">
      <summary>使 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 前进到下一条记录。</summary>
      <returns>如果存在多个行，则为 true；否则为 false。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 的异步版本，将 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 前移到下一条记录。 取消标记可用于在命令超时超过前请求放弃操作。 通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" />。 在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.RecordsAffected">
      <summary>获取执行 Transact-SQL 语句所更改、插入或删除的行数。</summary>
      <returns>已更改、插入或删除的行数；如果没有任何行受到影响或语句失败，则为 0；-1 表示 SELECT 语句。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>返回指定的列序号的 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>指定列序号的 <see cref="T:System.Data.IDataReader" /> 实例。</returns>
      <param name="i">列序号。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.SqlClient.SQLDebugging">
      <summary>包括此对象是为了支持应用程序调试。 不应直接使用。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SQLDebugging.#ctor">
      <summary>包括此对象是为了支持应用程序调试。 不应直接使用。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlDependency">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象表示应用程序和 SQL Server 实例间的查询通知依赖关系。 应用程序可以创建一个 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象并进行注册以通过 <see cref="T:System.Data.SqlClient.OnChangeEventHandler" /> 事件处理程序接收通知。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.#ctor">
      <summary>用默认设置创建 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.#ctor(System.Data.SqlClient.SqlCommand)">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的新实例，并将其与 <see cref="T:System.Data.SqlClient.SqlCommand" /> 参数关联。</summary>
      <param name="command">要与此 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。 该构造函数将设置 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象，并将其绑定到此命令。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">已将一个 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象赋值给了 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象的 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 未与此依赖项关联。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.#ctor(System.Data.SqlClient.SqlCommand,System.String,System.Int32)">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的一个新实例，将其与 <see cref="T:System.Data.SqlClient.SqlCommand" /> 参数关联，并指定通知选项和超时值。</summary>
      <param name="command">要与此 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。 该构造函数将设置 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象，并将其绑定到此命令。</param>
      <param name="options">此依赖项要使用的通知请求选项。如果使用默认服务，则为 <paramref name="null" />。</param>
      <param name="timeout">此通知的超时时间（以秒为单位）。 默认值为 0，指示应当使用服务器的超时。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> 参数为 NULL。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">超时值小于零。</exception>
      <exception cref="T:System.InvalidOperationException">已将一个 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象赋值给了 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象的 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 未与此依赖项关联。 进行了从 SQLCLR 内创建一个 SqlDependency 实例的尝试。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.AddCommandDependency(System.Data.SqlClient.SqlCommand)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象与此 <see cref="T:System.Data.SqlClient.SqlDependency" /> 实例关联。</summary>
      <param name="command">一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象，包含一个对通知有效的语句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">已将一个 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象赋值给了 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象的 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 未与此依赖项关联。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlDependency.HasChanges">
      <summary>获取一个值，该值指示与依赖项关联的结果集之一是否已经更改。</summary>
      <returns>一个布尔值，指示结果集之一是否已经更改。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDependency.Id">
      <summary>获取一个值，该值唯一标识 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的此实例。</summary>
      <returns>GUID 的字符串表示，为 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类的每个实例都生成。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.SqlClient.SqlDependency.OnChange">
      <summary>当收到与此 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象关联的任意命令的通知时发生。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.Start(System.String)">
      <summary>启动用于接收依赖项更改通知的侦听器，该通知来自由连接字符串指定的 SQL Server 实例。</summary>
      <returns>如果侦听器初始化成功，则为 true；如果已存在兼容的侦听器，则为 false。</returns>
      <param name="connectionString">从中获取更改通知的 SQL Server 实例的连接字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">与上次调用此方法相比，<paramref name="connectionString" /> 参数相同，但其他参数不同。 此方法是从 CLR 内部调用的。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所必需的 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">随后调用了该方法，调用使用等效的 <paramref name="connectionString" /> 参数和不同的用户，或者不是同一架构的默认用户的用户。 还有所有基础 SqlClient 异常。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)">
      <summary>启动用于接收依赖项更改通知的侦听器，该侦听器使用指定的 SQL Server Service Broker 队列从由连接字符串指定的 SQL Server 实例接收。</summary>
      <returns>如果侦听器初始化成功，则为 true；如果已存在兼容的侦听器，则为 false。</returns>
      <param name="connectionString">SQL Server 实例（从中获取更改通知）的连接字符串。</param>
      <param name="queue">要使用的现有 SQL Server Service Broker 队列。 如果为 null，则使用默认队列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">与上次调用此方法相比，<paramref name="connectionString" /> 参数相同，但其他参数不同。 此方法是从 CLR 内部调用的。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所必需的 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">已经随后调用了该方法，调用使用等效的 <paramref name="connectionString" /> 参数和不同的用户，或者不是同一架构的默认用户的用户。 还有所有基础 SqlClient 异常。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.Stop(System.String)">
      <summary>停止在上一次 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> 调用中指定的连接的侦听器。</summary>
      <returns>如果侦听器完全停止，则为 true；如果 <see cref="T:System.AppDomain" /> 从侦听器解除绑定，但至少还有一个其他 <see cref="T:System.AppDomain" /> 使用同一侦听器，则为 false。</returns>
      <param name="connectionString">SQL Server 实例的连接字符串，在上一次 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String)" /> 调用中使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是从 SQLCLR 内部调用的。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所必需的 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">发生基础 SqlClient 异常。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.Stop(System.String,System.String)">
      <summary>停止在上一次 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> 调用中指定的连接的侦听器。</summary>
      <returns>如果侦听器完全停止，则为 true；如果 <see cref="T:System.AppDomain" /> 从侦听器解除绑定，但至少还有一个其他 <see cref="T:System.AppDomain" /> 使用同一侦听器，则为 false。</returns>
      <param name="connectionString">SQL Server 实例的连接字符串，在上一次 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" /> 调用中使用。</param>
      <param name="queue">在上一次 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" /> 调用中使用的 SQL Server Service Broker 队列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是从 SQLCLR 内部调用的。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所必需的 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">发生基础 SqlClient 异常。</exception>
    </member>
    <member name="T:System.Data.SqlClient.SqlError">
      <summary>收集与 SQL Server 返回的警告或错误有关的信息。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Class">
      <summary>获取从 SQL Server 返回的错误的严重程度。</summary>
      <returns>一个 1 至 25 的值，它指示错误的严重级别。 默认值为 0。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.LineNumber">
      <summary>从包含错误的 Transact-SQL 批命令或存储过程中获取行号。</summary>
      <returns>Transact-SQL 批命令或存储过程内包含错误的行号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Message">
      <summary>获取对错误进行描述的文本。</summary>
      <returns>对错误进行描述的文本。 有关由 SQL Server 生成的错误的更多信息，请参见 SQL Server Books Online（《SQL Server 联机丛书》）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Number">
      <summary>获取一个标识错误类型的数字。</summary>
      <returns>标识错误类型的数字。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Procedure">
      <summary>获取生成错误的存储过程或远程过程调用 (RPC) 的名称。</summary>
      <returns>存储过程或 RPC 的名称。 有关由 SQL Server 生成的错误的更多信息，请参见 SQL Server Books Online（《SQL Server 联机丛书》）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Server">
      <summary>获取生成错误的 SQL Server 实例的名称。</summary>
      <returns>SQL Server 实例的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Source">
      <summary>获取生成错误的提供程序的名称。</summary>
      <returns>生成错误的提供程序的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.State">
      <summary>某些错误消息可能在数据库引擎的代码中多次引发。 例如，几种不同的情况下可引发 1105 错误。 引发错误的每种特定情况将分配一个唯一状态代码。</summary>
      <returns>状态代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlError.ToString">
      <summary>获取错误信息的完整文本。</summary>
      <returns>错误信息的完整文本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlErrorCollection">
      <summary>收集 SQL Server .NET Framework 数据提供程序生成的所有错误。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合的元素复制到 <see cref="T:System.Array" /> 中，从指定索引开始。</summary>
      <param name="array">向其中复制元素的 <see cref="T:System.Array" />。</param>
      <param name="index">从该处开始复制到 <paramref name="array" /> 参数中的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 与 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合中的元素数之和大于 <see cref="T:System.Array" /> 的 <see cref="P:System.Array.Length" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <paramref name="array" /> 无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.CopyTo(System.Data.SqlClient.SqlError[],System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合的元素复制到 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 中，从指定索引开始。</summary>
      <param name="array">向其中复制元素的 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />。</param>
      <param name="index">从该处开始复制到 <paramref name="array" /> 参数中的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 与 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合中的元素数之和大于 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <paramref name="array" /> 无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.Count">
      <summary>获取集合中错误的数目。</summary>
      <returns>集合中错误的总数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.Item(System.Int32)">
      <summary>获取位于指定索引处的错误。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlError" />，包含指定索引位置的错误。</returns>
      <param name="index">要检索的错误的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引参数超出数组界限。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlException">
      <summary>当 SQL Server 返回警告或错误时引发的异常。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Class">
      <summary>获取从 SQL Server .NET Framework 数据提供程序返回的错误的严重级别。</summary>
      <returns>一个 1 至 25 的值，它指示错误的严重级别。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.ClientConnectionId">
      <summary>表示客户端连接 ID。 有关详细信息，请参阅 ADO.NET 中的数据跟踪。</summary>
      <returns>返回客户端连接 ID。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Errors">
      <summary>获取由一个或多个 <see cref="T:System.Data.SqlClient.SqlError" /> 对象组成的集合，这些对象提供有关 SQL Server .NET Framework 数据提供程序所生成的异常的详细信息。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlError" /> 类的收集的实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它存有有关所引发的异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="si" /> 参数是空引用（Visual Basic 中为 Nothing）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.LineNumber">
      <summary>获取生成错误的 Transact-SQL 批命令或存储过程内的行号。</summary>
      <returns>生成错误的 Transact-SQL 批命令或存储过程内的行号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Number">
      <summary>获取一个标识错误类型的数字。</summary>
      <returns>标识错误类型的数字。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Procedure">
      <summary>获取生成错误的存储过程或远程过程调用 (RPC) 的名称。</summary>
      <returns>存储过程或 RPC 的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Server">
      <summary>获取正在运行生成错误的 SQL Server 实例的计算机的名称。</summary>
      <returns>运行 SQL Server 实例的计算机的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Source">
      <summary>获取生成错误的提供程序的名称。</summary>
      <returns>生成错误的提供程序的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.State">
      <summary>从 SQL Server 中获取一个数值错误代码，它表示错误、警告或“未找到数据”消息。 有关如何将这些值解码的更多信息，请参见“SQL Server 联机丛书”。</summary>
      <returns>表示错误代码的数字。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlException.ToString">
      <summary>返回表示当前 <see cref="T:System.Data.SqlClient.SqlException" /> 对象的字符串，并包括客户端连接 ID（有关更多信息，请参见 <see cref="P:System.Data.SqlClient.SqlException.ClientConnectionId" />）。</summary>
      <returns>一个字符串，表示当前的 <see cref="T:System.Data.SqlClient.SqlException" /> object.<see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlInfoMessageEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Errors">
      <summary>获取从服务器发送来的警告的集合。</summary>
      <returns>从服务器发送来的警告的集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Message">
      <summary>获取从数据库发送的全文本错误。</summary>
      <returns>错误的完整文本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Source">
      <summary>获取生成错误的对象的名称。</summary>
      <returns>生成错误的对象的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlInfoMessageEventArgs.ToString">
      <summary>检索 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件的字符串表示形式。</summary>
      <returns>表示 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlInfoMessageEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlInfoMessageEventArgs" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlNotificationEventArgs">
      <summary>表示传递给通知事件处理程序的参数集。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlNotificationEventArgs.#ctor(System.Data.SqlClient.SqlNotificationType,System.Data.SqlClient.SqlNotificationInfo,System.Data.SqlClient.SqlNotificationSource)">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" /> 对象的一个新实例。</summary>
      <param name="type">
        <see cref="T:System.Data.SqlClient.SqlNotificationType" /> 值，指示此通知是由于实际更改生成的还是通过订阅生成的。</param>
      <param name="info">指示通知事件的原因的 <see cref="T:System.Data.SqlClient.SqlNotificationInfo" /> 值。 发生的原因可能是：实际更改了存储区中的数据，或者通知变为无效（例如，它已超时）。</param>
      <param name="source">
        <see cref="T:System.Data.SqlClient.SqlNotificationSource" /> 值，指示生成通知的源。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlNotificationEventArgs.Info">
      <summary>获取指示通知事件的原因（如数据库中的某个行已被修改或某个表已被截断）的值。</summary>
      <returns>通知事件原因。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlNotificationEventArgs.Source">
      <summary>获取指示生成通知（如查询数据或数据库状态已更改）的源的值。</summary>
      <returns>通知的源。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlNotificationEventArgs.Type">
      <summary>获取一个值，该值指示此通知是由于实际更改生成的还是通过订阅生成的。</summary>
      <returns>指示通知是否由更改或订阅生成的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlNotificationInfo">
      <summary>此枚举提供有关不同通知的其他信息，这些信息可由依赖项事件处理程序接收。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.AlreadyChanged">
      <summary>SqlDependency 对象已激发，无法向该对象添加新命令。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Alter">
      <summary>与已修改的查询相关的基础服务器对象。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Delete">
      <summary>数据已由 DELETE 语句更改。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Drop">
      <summary>与已丢弃的查询相关的基础对象。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Error">
      <summary>发生内部服务器错误。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Expired">
      <summary>SqlDependency 对象已过期。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Insert">
      <summary>数据已由 INSERT 语句更改。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Invalid">
      <summary>提供了无法通知的语句（例如，UPDATE 语句）。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Isolation">
      <summary>在无效的隔离模式下执行该语句（例如，快照）。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Merge">
      <summary>用于查明触发查询通知的服务器端原因。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Options">
      <summary>订阅时没有正确设置 SET 选项。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.PreviousFire">
      <summary>上一语句导致在当前事务下激发了查询通知。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Query">
      <summary>不能通知或已提供的 SELECT 语句。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Resource">
      <summary>因服务器资源压力而激发。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Restart">
      <summary>服务器已重新启动（重新启动期间发送通知）。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.TemplateLimit">
      <summary>订阅查询导致某一目标表上的模板数量超过允许的最大限制。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Truncate">
      <summary>一个或多个表已截断。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Unknown">
      <summary>在客户端无法识别出服务器所发送的信息选项时使用。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Update">
      <summary>数据已由 UPDATE 语句更改。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlNotificationSource">
      <summary>指示依赖项事件处理程序所接收的通知的源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Client">
      <summary>发生了客户端启动的通知（如由于发生客户端超时，或尝试向已激发的依赖项添加命令）。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Data">
      <summary>数据已更改；例如，发生了插入、更新、删除或截断操作。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Database">
      <summary>数据库状态已更改；例如，与查询相关的数据库已被删除或分离。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Environment">
      <summary>运行时环境与通知不兼容；例如，隔离级别设置为快照，或一个或多个 SET 选项不兼容。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Execution">
      <summary>执行的过程中发生运行时错误。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Object">
      <summary>某数据库对象已更改；例如，与查询相关的某基础对象已被删除或修改。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Owner">
      <summary>仅限内部；不应在代码中使用。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Statement">
      <summary>Transact-SQL 语句对通知无效；例如，未能通知 SELECT 语句或执行了非 SELECT 语句。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.System">
      <summary>发生了系统相关的事件。 例如，存在内部错误、服务器被重新启动或资源压力导致失效。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Timeout">
      <summary>订阅超时已过期。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Unknown">
      <summary>当客户端无法识别服务器发送的源选项时使用。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlNotificationType">
      <summary>描述 <see cref="T:System.Data.SqlClient.OnChangeEventHandler" /> 事件处理程序可通过 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" /> 参数接收的不同通知类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationType.Change">
      <summary>被监视的服务器中的数据已更改。 使用 <see cref="T:System.Data.SqlClient.SqlNotificationInfo" /> 项确定更改的详细信息。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationType.Subscribe">
      <summary>创建通知订阅时发生错误。 使用 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" /> 对象的 <see cref="T:System.Data.SqlClient.SqlNotificationInfo" /> 项来确定发生错误的原因。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationType.Unknown">
      <summary>当客户端未识别由服务器发送的类型选项时使用。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlParameter">
      <summary>表示 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的参数，也可以是它到 <see cref="T:System.Data.DataSet" /> 列的映射。 此类不能被继承。 有关参数的更多信息，请参见 配置参数和参数数据类型 (ADO.NET)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType)">
      <summary>用参数名称和数据类型初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dbType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32)">
      <summary>用参数名称、<see cref="T:System.Data.SqlDbType" /> 和大小初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dbType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>用参数名称、参数的类型、参数的大小、<see cref="T:System.Data.ParameterDirection" />、参数的精度、参数的小数位数、源列、要使用的 <see cref="T:System.Data.DataRowVersion" /> 和参数的值初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="isNullable">如果字段的值可为 null，则为 true；否则为 false。</param>
      <param name="precision">要将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 解析为的小数点左右两侧的总位数。</param>
      <param name="scale">要将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 解析为的总小数位数。</param>
      <param name="sourceColumn">如果此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在对 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 的调用中使用，则为源列 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />) 的名称。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dbType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的一个新实例，该类使用参数名、参数的类型、参数的长度、方向、精度、小数位数、源列名称、<see cref="T:System.Data.DataRowVersion" /> 值之一、用于源列映射的布尔值、SqlParameter 的值、此 XML 实例的架构集合所在的数据库的名称、此 XML 实例的架构集合所在的关系架构以及此参数的架构集合的名称。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="precision">要将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 解析为的小数点左右两侧的总位数。</param>
      <param name="scale">要将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 解析为的总小数位数。</param>
      <param name="sourceColumn">如果此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在对 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 的调用中使用，则为源列 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />) 的名称。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="sourceColumnNullMapping">如果源列可以为 null，则为 true；如果不可以为 null，则为 false。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的值。</param>
      <param name="xmlSchemaCollectionDatabase">此 XML 实例的架构集合所在的数据库的名称。</param>
      <param name="xmlSchemaCollectionOwningSchema">包含此 XML 实例的架构集合的关系架构。</param>
      <param name="xmlSchemaCollectionName">此参数的架构集合的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.String)">
      <summary>用参数名称、<see cref="T:System.Data.SqlDbType" />、大小和源列名称初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="sourceColumn">如果此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在对 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 的调用中使用，则为源列 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />) 的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dbType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Object)">
      <summary>用参数名称和新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的一个值初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的值。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.CompareInfo">
      <summary>获取或设置 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象定义应如何为此参数执行字符串比较。</summary>
      <returns>一个 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象为此参数定义字符串比较。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.SqlDbType" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlDbType" /> 值之一。 默认值为 NVarChar。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受空值。 在执行命令时，<see cref="P:System.Data.SqlClient.SqlParameter.IsNullable" /> 不会用于验证参数的值且不会阻止发送或接收 null 值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.LocaleId">
      <summary>获取或设置可确定特定区域的约定和语言的区域设置标识符。</summary>
      <returns>返回与参数关联的区域设置标识符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Offset">
      <summary>获取或设置对 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的偏移量。</summary>
      <returns>对 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的偏移量。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。 默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Precision">
      <summary>获取或设置用来表示 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的最大位数。 默认值为 0。 这指示数据提供程序设置 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的精度。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ResetDbType">
      <summary>重置与此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 关联的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ResetSqlDbType">
      <summary>重置与此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 关联的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Scale">
      <summary>获取或设置 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 解析为的小数位数。</summary>
      <returns>要将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 解析为的小数位数。 默认值为 0。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Size">
      <summary>获取或设置列中数据的最大大小（以字节为单位）。</summary>
      <returns>列中数据的最大大小（以字节为单位）。 默认值是从参数值推导出的。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /></summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为空字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。 这样 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 便能够为可以为 null 的列正确生成 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；如果不可以为 null，则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SourceVersion">
      <summary>获取或设置在加载 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 时要使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SqlDbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.SqlDbType" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlDbType" /> 值之一。 默认值为 NVarChar。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SqlValue">
      <summary>获取作为 SQL 类型的参数的值，或设置该值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是使用 SQL 类型的参数的值。 默认值为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>作为此实例副本的新 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ToString">
      <summary>获取一个包含 <see cref="P:System.Data.SqlClient.SqlParameter.ParameterName" /> 的字符串。</summary>
      <returns>一个包含 <see cref="P:System.Data.SqlClient.SqlParameter.ParameterName" /> 的字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.TypeName">
      <summary>获取或设置表值参数的类型名称。</summary>
      <returns>指定表值参数的类型名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.UdtTypeName">
      <summary>获取或设置一个 string，它将用户定义的类型表示为参数。</summary>
      <returns>一个 string，表示数据库中用户定义的类型的完全限定名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Value">
      <summary>获取或设置该参数的值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是该参数的值。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase">
      <summary>获取此 XML 实例的架构集合所在的数据库的名称。</summary>
      <returns>此 XML 实例的架构集合所在的数据库的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName">
      <summary>获取用于此 XML 实例的架构集合的名称。</summary>
      <returns>用于此 XML 实例的架构集合的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema">
      <summary>包含此 XML 实例的架构集合的关系架构。</summary>
      <returns>此 XML 实例拥有的关系架构。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlParameterCollection">
      <summary>表示与 <see cref="T:System.Data.SqlClient.SqlCommand" /> 相关联的参数的集合以及各个参数到 <see cref="T:System.Data.DataSet" /> 中列的映射。 此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.Data.SqlClient.SqlParameter)">
      <summary>将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="value" /> 参数中指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 已经添加到这个或其他 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</exception>
      <exception cref="T:System.InvalidCastException">传递的参数不是 <see cref="T:System.Data.SqlClient.SqlParameter" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的索引。</returns>
      <param name="value">一个 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Data.SqlDbType)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameter" /> 添加到指定了参数名和数据类型的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="sqlDbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Data.SqlDbType,System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameter" /> 添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中（给定了指定的参数名、<see cref="T:System.Data.SqlDbType" /> 和大小）。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="sqlDbType">要添加到集合中的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的 <see cref="T:System.Data.SqlDbType" />。</param>
      <param name="size">
        <see cref="T:System.Int32" /> 的大小。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Data.SqlDbType,System.Int32,System.String)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameter" /> 及其参数名、数据类型和列宽添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="sqlDbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">列长。</param>
      <param name="sourceColumn">如果此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在对 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 的调用中使用，则为源列 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />) 的名称。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Object)">
      <summary>将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。 使用 SqlParameterCollection.Add 方法的重载来指定整数参数值时，请务必谨慎。 因为此重载接受 <see cref="T:System.Object" /> 类型的 <paramref name="value" />，所以当此值为零时，必须将整数值转换为 <see cref="T:System.Object" /> 类型，如下面的 C# 示例所示。 parameters.Add("@pname", Convert.ToInt32(0));如果不执行此转换，编译器将假定您正尝试调用 SqlParameterCollection.Add (string，SqlDbType) 重载。</returns>
      <param name="parameterName">要添加到集合的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。</param>
      <param name="value">
        <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="value" /> 参数中指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 已经添加到这个或其他 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddRange(System.Array)">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的末尾添加值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddRange(System.Data.SqlClient.SqlParameter[])">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的末尾添加 <see cref="T:System.Data.SqlClient.SqlParameter" /> 值的数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的末尾添加值。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加的值。 使用 <see cref="F:System.DBNull.Value" />（而不是 null）指示空值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Clear">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中移除所有 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.Data.SqlClient.SqlParameter)">
      <summary>确定指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.String)">
      <summary>确定指定的参数名是否在<see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中（从指定的目标 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Array" /> 中复制开始处的索引。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.CopyTo(System.Data.SqlClient.SqlParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />，从指定的目标索引开始复制。</summary>
      <param name="array">
        <see cref="T:System.Data.SqlClient.SqlParameterCollection" />，它是从当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中复制开始处的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Count">
      <summary>返回一个整数，其中包含 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中元素的数目。 只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中以整数表示的元素的数目。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.Data.SqlClient.SqlParameter)">
      <summary>获取指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />（它是 <see cref="T:System.Data.SqlClient.SqlParameter" />）在集合中从零开始的位置。 当 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="value">要查找的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.Object)">
      <summary>获取指定的 <see cref="T:System.Object" /> 在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Object" />（它是 <see cref="T:System.Data.SqlClient.SqlParameter" />）在集合中从零开始的位置。 当 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的位置。</summary>
      <returns>具有指定的区分大小写名称的指定 <see cref="T:System.Data.SqlClient.SqlParameter" /> 从零开始的位置。 当 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="parameterName">要查找的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的区分大小写的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Insert(System.Int32,System.Data.SqlClient.SqlParameter)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象插入 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入 value。</param>
      <param name="value">要插入到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 插入 <see cref="T:System.Object" /> 中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入 value。</param>
      <param name="value">要在 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中插入的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的大小是否是固定的。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 具有固定大小，则返回 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 为只读，则返回 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 是否是同步的。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 同步，则返回 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Item(System.Int32)">
      <summary>获取指定索引处的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</returns>
      <param name="index">要检索的参数的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Item(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</returns>
      <param name="parameterName">要检索的参数的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的 <paramref name="parameterName" /> 无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Remove(System.Data.SqlClient.SqlParameter)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.SqlClient.SqlParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="value">要从集合中移除的对象。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.RemoveAt(System.Int32)">
      <summary>从指定索引处的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中移除 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.RemoveAt(System.String)">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中移除位于指定参数名称处的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowsCopiedEventArgs">
      <summary>表示传递给 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventHandler" /> 的参数集。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlRowsCopiedEventArgs.#ctor(System.Int64)">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventArgs" /> 对象的新实例。</summary>
      <param name="rowsCopied">一个 <see cref="T:System.Int64" />，指示在当前的批量复制操作过程中复制的行数。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort">
      <summary>获取或设置指示是否应中止批量复制操作的值。</summary>
      <returns>如果应中止批量复制操作，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlRowsCopiedEventArgs.RowsCopied">
      <summary>获取一个值，该值返回在当前批量复制操作期间复制的行数。</summary>
      <returns>int，返回复制的行数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowsCopiedEventHandler">
      <summary>表示处理 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 的 <see cref="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventArgs" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowUpdatedEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="row">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">
        <see cref="T:System.Data.StatementType" /> 值之一，该值指定所执行的查询的类型。</param>
      <param name="tableMapping">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlRowUpdatedEventArgs.Command">
      <summary>获取或设置当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.SqlClient.SqlCommand" />。</summary>
      <returns>当调用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.SqlClient.SqlCommand" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowUpdatedEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 的 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowUpdatingEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="row">要进行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">要在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 过程中执行的 <see cref="T:System.Data.IDbCommand" />。</param>
      <param name="statementType">
        <see cref="T:System.Data.StatementType" /> 值之一，该值指定所执行的查询的类型。</param>
      <param name="tableMapping">通过 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 发送的 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlRowUpdatingEventArgs.Command">
      <summary>获取或设置进行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时执行的 <see cref="T:System.Data.SqlClient.SqlCommand" />。</summary>
      <returns>进行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 时要执行的 <see cref="T:System.Data.SqlClient.SqlCommand" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowUpdatingEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 的 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlTransaction">
      <summary>表示要在 SQL Server 数据库中生成的 Transact-SQL 事务。 此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlTransaction.Connection">
      <summary>获取与该事务关联的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象，或者如果该事务不再有效，则为 null。</summary>
      <returns>与该事务关联的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlTransaction.IsolationLevel">
      <summary>指定该事务的 <see cref="T:System.Data.IsolationLevel" />。</summary>
      <returns>该事务的 <see cref="T:System.Data.IsolationLevel" />。 默认值为 ReadCommitted。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)">
      <summary>从挂起状态回滚事务，并指定事务或保存点名称。</summary>
      <param name="transactionName">要回滚的事务的名称，或要回滚到的保存点的名称。</param>
      <exception cref="T:System.ArgumentException">未指定事务名称。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Save(System.String)">
      <summary>在事务中创建保存点（它可用于回滚事务的一部分），并指定保存点名称。</summary>
      <param name="savePointName">保存点的名称。</param>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。 - 或 - 连接已断开。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlTypes.INullable">
      <summary>所有 <see cref="N:System.Data.SqlTypes" /> 对象和结构均实现 INullable 接口。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.INullable.IsNull">
      <summary>指示结构是否为 null。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 如果此对象的值为空，则为 true。 否则为 false。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlAlreadyFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
      <param name="e">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBinary">
      <summary>表示要存储在数据库中或从数据库中检索的二进制数据的可变长度流。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的新实例，将 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性设置为已提供的字节数组的内容。</summary>
      <param name="value">要存储或检索的字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值以创建一个新的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />，为 x 和 y 的串联值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与所提供的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <returns>有符号的数，指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象的相对值。 返回值 Condition 小于零 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象的值小于该对象。 零 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与对象相同。 大于零 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象大于对象。 - 或 - 对象为 null 引用。</returns>
      <param name="value">要与此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象进行比较的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与所提供的对象进行比较，并返回其相对值的指示值。</summary>
      <returns>有符号的数，指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象的相对值。 返回值 Condition 小于零 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象的值小于该对象。 零 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与对象相同。 大于零 此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象大于对象。 - 或 - 对象为 null 引用。</returns>
      <param name="value">要与此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构比较的对象。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>
        <paramref name="x" /> 和 <paramref name="y" /> 参数的串联值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlBinary 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构是否为 Null。 此属性是只读的。</summary>
      <returns>如果为null，则返回 true。 否则返回 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)">
      <summary>从 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性获取单字节，该属性位于整数参数 <paramref name="index" /> 指示的位置。 如果 <paramref name="index" /> 指示位置位于字节数组的结尾以外，将引发 <see cref="T:System.Data.SqlTypes.SqlNullValueException" />。 此属性是只读的。</summary>
      <returns>位于整数参数指示的位置的字节。</returns>
      <param name="index">要检索的字节的位置。</param>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 时，读取该属性。 - 或 - <paramref name="index" /> 参数指示超过字节数组长度（由 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性指示）的位置。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Length">
      <summary>获取 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性的长度（以字节为单位）。 此属性是只读的。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性中的二进制数据的长度。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 时，读取 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBinary.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串连两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>
        <paramref name="x" /> 和 <paramref name="y" /> 参数的串联值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构转换为 <see cref="T:System.Byte" /> 数组。</summary>
      <returns>
        <see cref="T:System.Byte" /> 数组。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary">
      <summary>将字节数组转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，它表示已转换的字节数组。</returns>
      <param name="x">要转换的字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToSqlGuid">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的此实例转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象转换为字符串。</summary>
      <returns>一个包含 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 的字符串。 如果 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 为 null，字符串将包含“null”。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的值。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 时，读取 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBoolean">
      <summary>表示要存储在数据库中或者从数据库中检索的整数值，为 1 或 0。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)">
      <summary>使用提供的布尔值初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的新实例。</summary>
      <param name="value">新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值，为 true 或 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)">
      <summary>使用指定的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的新实例。</summary>
      <param name="value">其值用于新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位 AND 运算。</summary>
      <returns>逻辑 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.ByteValue">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的以字节表示的值。</summary>
      <returns>表示 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值的字节。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象与所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <returns>有符号数，指示实例和值的相对值。 值 描述 负整数 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 正整数 此实例大于 <paramref name="value" />。 - 或 - <paramref name="value" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象，或 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构与指定对象进行比较，并返回它们的相对值指示。</summary>
      <returns>有符号数，指示实例和值的相对值。 值 描述 负整数 此实例小于 <paramref name="value" />。 零 此实例等于 <paramref name="value" />。 正整数 此实例大于 <paramref name="value" />。 - 或 - <paramref name="value" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的对象，或 null 引用（在 Visual Basic 中为 Nothing）。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.False">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性的“假”值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsFalse">
      <summary>指示当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是否为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</summary>
      <returns>如果 Value 为 False，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构是否为 Null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsTrue">
      <summary>指示当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是否为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</summary>
      <returns>如果 Value 为 True，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.One">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性的 1 值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行 1 的求补运算。</summary>
      <returns>所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 1 的补码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位 AND 运算。</summary>
      <returns>逻辑 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对其操作数执行按位“或”运算。</summary>
      <returns>逻辑 OR 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的参数执行按位“异或”(XOR) 运算。</summary>
      <returns>逻辑 XOR 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为布尔值。</summary>
      <returns>设置为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的布尔值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)">
      <summary>可以使用“假”运算符来测试 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 以确定它是否为“假”。</summary>
      <returns>如果提供的参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 False，则返回 true；否则返回 false。</returns>
      <param name="x">要测试的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>包含 0 或 1 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的字节值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 执行 NOT 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，其 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 有以下几种情况：<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />（参数为真时）、<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />（参数为 null 时）和 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />（其他情况下）。</returns>
      <param name="x">将要对其执行 NOT 运算的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行 1 的求补运算。</summary>
      <returns>所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 1 的补码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)">
      <summary>可以使用“真”运算符来测试 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 以确定它是否为真。</summary>
      <returns>如果提供的参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为真，则返回 true；否则返回 false。</returns>
      <param name="x">要测试的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位“或”运算。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其“值”是按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)">
      <summary>将逻辑值的指定 <see cref="T:System.String" /> 表示形式转换为它的等效 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，包含已分析的值。</returns>
      <param name="s">要转换的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 1。 否则，新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 1。 否则，新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 1。 否则，新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 SqlInt16 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值为 1。 否则，新 SqlInt16 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 SqlInt32 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值为 1。 否则，新 SqlInt32 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 SqlInt64 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值为 true，则新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值为 1。 否则，新 SqlInt64 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值为 true，则新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 1。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值为 false，则新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值既不是 1 也不是 0，则新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 1；否则新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true ，则 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 1。 否则，新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为字符串。</summary>
      <returns>一个字符串，它包含 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的值。 如果值为 null，字符串将包含“null”。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.True">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性的 true 值。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值。 此属性是只读的。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，则为 true；否则为 false。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>逻辑 XOR 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlByte">
      <summary>表示要存储在数据库中或从数据库中检索的 8 位无符号整数，此整数在 0 到 255 范围内。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)">
      <summary>使用指定的字节值初始化 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的新实例。</summary>
      <param name="value">要存储在新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性中的字节值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 Value 属性包含加法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位 AND 运算。</summary>
      <returns>按位 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位“或”计算。</summary>
      <returns>按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)">
      <summary>将此实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)">
      <summary>将此实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以其第二个操作数。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlByte 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Object)">
      <summary>将提供的 <see cref="T:System.Object" /> 参数与 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>二进制反码运算符对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含两个操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位 AND 运算。</summary>
      <returns>按位 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位“或”计算。</summary>
      <returns>按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以其第二个操作数。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" />，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为字节。</summary>
      <returns>一个字节，其值等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">要转换为字节的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 SqlInt64 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">一个 SqlMoney 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的数值。</returns>
      <param name="x">SqlString 类的实例。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 SqlBoolean 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于提供的参数。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的字节值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>二进制反码运算符对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数。</summary>
      <returns>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数所得的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 8 位无符号整数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，包含 String 参数表示的 8 位数字。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数。</summary>
      <returns>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数所得的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个 SqlDecimal 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 SqlDouble 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 SqlInt16 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 SqlInt32 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个 SqlInt64 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 SqlMoney 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 SqlSingle 结构，它与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构具有相同的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的此实例转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个字符串，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。 如果 Value 为空，String 将为空字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值。 此属性为只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>该 XOR 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBytes">
      <summary>表示包装 <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" /> 或 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" /> 的可变引用类型。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])">
      <summary>根据指定的字节数组初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
      <param name="buffer">无符号字节的数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)">
      <summary>根据指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)">
      <summary>根据指定的 <see cref="T:System.IO.Stream" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
      <param name="s">
        <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Buffer">
      <summary>返回一个对内部缓冲区的引用。</summary>
      <returns>返回一个对内部缓冲区的引用。 对于在非托管指针上创建的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例，将返回内部缓冲区的托管副本。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 XmlSchemaSet 的 XSD 的 string。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 是否为 null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Item(System.Int64)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 值。</returns>
      <param name="offset">一个 <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Length">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的长度。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，表示 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的长度。 如果没有可由实例使用的缓冲区，或者如果该值为 null，则返回 -1。 返回流包装实例的 <see cref="P:System.IO.Stream.Length" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.MaxLength">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的内部缓冲区的值的最大长度。</summary>
      <returns>一个长值，表示内部缓冲区的值的最大长度。 对于流包装的 <see cref="T:System.Data.SqlTypes.SqlBytes" />，将返回 -1。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Null">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的 null 实例。</summary>
      <returns>按 <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" /> 返回 true 的方式返回一个实例。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlBytes">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</returns>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)~System.Data.SqlTypes.SqlBinary">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</returns>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中的字节复制到传入缓冲区中并返回复制的字节数。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 长值，表示已复制的字节数。</returns>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的 <see cref="T:System.Int64" /> 长值偏移量。</param>
      <param name="buffer">要在其中执行“复制到”操作的字节数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字节数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)">
      <summary>设置此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例的长度。</summary>
      <param name="value">表示长度的 <see cref="T:System.Int64" /> 长值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetNull">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例设置为 null。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Storage">
      <summary>返回有关此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例的存储状态的信息。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Stream">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的数据作为流进行获取或设置。</summary>
      <returns>包含 SqlBytes 数据的流。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取序列化信息，其中包含重新实例化此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例所需的所有数据。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>该成员支持 .NET Framework 结构，不应从代码直接使用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="r">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.ToSqlBinary">
      <summary>从此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例构造和返回一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>来自此实例的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Value">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 保存的值的托管副本。</summary>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的值，为字节数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将传入缓冲区中的字节复制到此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中。</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的 <see cref="T:System.Int64" /> 长值偏移量。</param>
      <param name="buffer">要在其中执行“复制到”操作的字节数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字节数。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 是一个可变引用类型，可包装 <see cref="T:System.Char" /> 数组或 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])">
      <summary>根据指定的字符数组初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> 数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)">
      <summary>根据指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Buffer">
      <summary>返回一个对内部缓冲区的引用。</summary>
      <returns>返回一个对内部缓冲区的引用。 对于在非托管指针上创建的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例，将返回内部缓冲区的托管副本。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 是否为 null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlChars" /> 为 null，则返回 true。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Item(System.Int64)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Char" /> 值。</returns>
      <param name="offset">一个 <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Length">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中包含的值的长度。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指示 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中包含的值的长度（以字符为单位）。 如果没有可由该实例使用的缓冲区，或者该值为 null，则返回 -1。 返回流包装实例的 <see cref="P:System.IO.Stream.Length" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.MaxLength">
      <summary>获取内部缓冲区可保存的值的最大长度（以双字节字符为单位）。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，表示内部缓冲区的值的最大长度（以双字节为单位）。 对于流包装的 <see cref="T:System.Data.SqlTypes.SqlChars" />，将返回 -1。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Null">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的 null 实例。</summary>
      <returns>按 <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" /> 返回 true 的方式返回一个实例。 有关详细信息，请参阅 处理 Null 值 (ADO.NET)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)~System.Data.SqlTypes.SqlString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlChars">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</returns>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中的字符复制到传入缓冲区中，并返回复制的字符数。</summary>
      <returns>一个 <see cref="T:System.Int64" />long 值，表示已复制的字节数。</returns>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中所含值的 <see cref="T:System.Int64" />long 值偏移量。</param>
      <param name="buffer">向其复制的字符数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数值，表示要复制的字符数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)">
      <summary>设置此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例的长度。</summary>
      <param name="value">表示长度的 <see cref="T:System.Int64" />long 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetNull">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例设置为 null。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Storage">
      <summary>返回有关此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例的存储状态的信息。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取序列化信息以及包含重新实例化此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例所需的所有数据。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>该成员支持 .NET Framework 结构，不应从代码直接使用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="r">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示形式。</summary>
      <returns>此类的 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Value">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 保存的值的托管副本。</summary>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的值，为字符数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将传入缓冲区中的字符复制到此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中。</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中所含值的 long 值偏移量。</param>
      <param name="buffer">向其复制的字符数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字符数。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlCompareOptions">
      <summary>为 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构指定比较选项值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort2">
      <summary>执行二进制排序。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreKanaType">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略假名类型。 假名类型是指日语平假名和片假名字符，它们表示日语中的语音。 平假名用于表示日语自有的短语和字词，而片假名用于表示从其他语言借用的字词，如“computer”或“Internet”。 语音既可以用平假名也可以用片假名表示。 如果选择该值，则认为一个语音的平假名字符等于同一语音的片假名字符。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreNonSpace">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略非空格组合字符，比如音调符号。 Unicode 标准将组合字符定义为与基字符组合起来产生新字符的字符。 非空格组合字符在呈现时本身不占用字符空间。 有关非空格组合字符的更多信息，请参见位于 http://www.unicode.org 上的“Unicode Standard”（Unicode 标准）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreWidth">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略字符宽度。 例如，日语片假名字符可以写为全角或半角形式；如果选择该值，则认为写为全角形式的片假名字符等于写为半角形式的同一字符。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.None">
      <summary>为 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较指定默认选项设置。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDateTime">
      <summary>表示要存储在数据库中或从数据库中检索的日期和时间数据，值范围介于 1753 年 1 月 1 日到 9999 年 12 月 31 日之间，精度为 3.33 毫秒。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构具有与其相应的 .NET Framework 类型 <see cref="T:System.DateTime" /> 不同的基础数据类型，该结构可以表示 12:00:00 AM 1/1/0001 和 11:59:59 PM 12/31/9999 之间的任何时间，精度可达到 100 毫微秒。 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实际上存储的是相对于 00:00:00 AM 1/1/1900 的差值。 因此，将“00:00:00 AM 1/1/1900”转换为整数将返回 0。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="value">一个 DateTime 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="dayTicks">将日期表示为刻度数的整数值。</param>
      <param name="timeTicks">将时间表示为刻度数的整数值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>通过使用提供的参数初始化年、月、日，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>通过使用所提供的参数初始化新结构的年、月、日、小时、分钟和秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中月份的第几天的值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>通过使用所提供的参数初始化新结构的年、月、日、小时、分钟、秒和毫秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中月份的第几天的值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
      <param name="millisecond">一个双精度型值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的毫秒值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>通过使用提供的参数初始化新结构的年、月、日、小时、分钟和毫微秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
      <param name="bilisecond">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的毫微秒值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Add(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>向指定的 TimeSpan 添加一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">一个 Timespan 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构与提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。 零 此实例与 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 相同。 大于零 此实例大于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。 - 或 - <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null 引用（在 Visual Basic 中为 Nothing ）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构与提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.DayTicks">
      <summary>获取刻度数，它表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日期。</summary>
      <returns>刻度数，表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性中包含的日期。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="N:System.Data.SqlTypes" /> 结构的 Value 属性设置为 null 时所引发的异常。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构是否为 Null。</summary>
      <returns>如果为 null，则返回 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MaxValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的最大有效日期值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MinValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的最小有效日期值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例执行逻辑比较，确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Addition(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>将提供的 <see cref="T:System.TimeSpan" /> 参数 <paramref name="t" /> 指示的一段时间添加到提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。 如果任一参数为 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />，则新的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 将是 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="t">一个 <see cref="T:System.TimeSpan" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.DateTime">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.DateTime" /> 结构。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，其 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性与提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性包含相同的日期和时间值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDateTime">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的日期和时间。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null，则新创建的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 Value 将为 Null。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)~System.Data.SqlTypes.SqlDateTime">
      <summary>将 <see cref="T:System.DateTime" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等于提供的 <see cref="T:System.DateTime" /> 结构的 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性的组合。</returns>
      <param name="value">一个 DateTime 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例执行逻辑比较，确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Subtraction(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>从提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中减去提供的 <see cref="T:System.TimeSpan" /> 结构 <paramref name="t" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它表示该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="t">一个 <see cref="T:System.TimeSpan" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)">
      <summary>将日期和时间的指定的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 形式。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它等于指定的 string 表示的日期和时间。</returns>
      <param name="s">要分析的 string。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerHour">
      <summary>值为等效于 1 小时的刻度数的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerMinute">
      <summary>值为等效于 1 分钟的刻度数的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerSecond">
      <summary>值为等效于 1 秒的刻度数的常数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Subtract(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>从此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实例中减去指定的 Timespan。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">一个 Timespan 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.TimeTicks">
      <summary>获取表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的时间的刻度数。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的时间的刻度数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString 结构，其值是表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中包含的日期和时间的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 String，它表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的值。 此属性是只读的。</summary>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="N:System.Data.SqlTypes" /> 结构的 Value 属性设置为 null 时所引发的异常。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDecimal">
      <summary>表示具有固定精度和小数位数的数值，该数值介于 - 10^38 +1 和 10^38 - 1 之间。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="bPrecision">可用来表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的最大位数。</param>
      <param name="bScale">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性将解析为的小数位数。</param>
      <param name="fPositive">一个布尔值，它指示新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是表示正数还是负数。</param>
      <param name="data1">一个 32 位无符号整数，它将与 data2、data3 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data2">一个 32 位无符号整数，它将与 data1、data3 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data3">一个 32 位无符号整数，它将与 data1、data2 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data4">一个 32 位无符号整数，它将与 data1、data2 和 data3 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="bPrecision">可用来表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的最大位数。</param>
      <param name="bScale">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性将解析为的小数位数。</param>
      <param name="fPositive">一个布尔值，它指示新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是表示正数还是负数。</param>
      <param name="bits">128 位无符号整数，提供新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)">
      <summary>使用提供的 <see cref="T:System.Decimal" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="value">要作为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构存储的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)">
      <summary>使用提供的 double 类型的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="dVal">一个双精度型值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)">
      <summary>使用提供的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="value">提供的整数值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)">
      <summary>使用提供的长整数值初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="value">提供的长整型值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)">
      <summary>Abs 方法获取 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的绝对值。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的绝对值的无符号数字。</returns>
      <param name="n">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的小数位数调整为位数参数指示的位数。 取决于 fRound 参数的值，该值将舍入到适当的位数或者截断。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含调整后的数字。</returns>
      <param name="n">要调整的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="digits">已调整的结构的位数。</param>
      <param name="fRound">如果此参数是 true，将舍入新值，如果为 false，将截断该值。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.BinData">
      <summary>以字节数组形式获取此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值的二进制表示形式。</summary>
      <returns>一个字节数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值的二进制表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)">
      <summary>返回大于或等于指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小整数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，表示大于或等于指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小整数。</returns>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，将要计算其最大值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的值调整为指定精度和小数位数。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值已经调整为参数中指定的精度和小数位数。</returns>
      <param name="n">将要调整其值的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="precision">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的精度。</param>
      <param name="scale">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的小数位数。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Data">
      <summary>以整数数组形式获取此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的二进制表示形式。</summary>
      <returns>一个整数数组，其中包含此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的二进制表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该除法运算符计算将第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数所得的结果。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlDecimal 的值将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)">
      <summary>将提供的 <see cref="T:System.Object" /> 参数与 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的实例并且两者相等，则为 true。 否则为 false。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 数字舍入为下一个较小的整数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的整数部分。</returns>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，将要计算其最小值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是否为 Null。</summary>
      <returns>如果此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为 null，则为 true。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsPositive">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 是否大于零。</summary>
      <returns>如果将 Null 赋给了 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />，则为 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否小于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxPrecision">
      <summary>一个常数，它表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" /> 属性的可能的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxScale">
      <summary>一个常数，它表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 类的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该除法运算符计算将第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数所得的结果。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDecimal">
      <summary>将所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Decimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>一个新 Decimal 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Double" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的值等于 <see cref="T:System.Double" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Double" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 SqlDecimal。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 操作数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Decimal" /> 值转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 Decimal 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlDecimal">
      <summary>将所提供的 <see cref="T:System.Int64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Int64" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否小于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算从第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数中减去第二个操作数所得的结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的“值”属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数求反。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值包含求反的结果。</returns>
      <param name="x">需求反的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 形式。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值乘到指定的幂。</summary>
      <returns>一个包含结果的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
      <param name="n">要乘幂的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="exp">一个 double 类型值，指示数字应乘到的幂。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Precision">
      <summary>获取用于表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的最大位数。</summary>
      <returns>用于表示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 Value 的最大位数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>以指定精度获取与指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值最接近的数字。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含该舍入运算的结果。</returns>
      <param name="n">要舍入的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="position">返回值中的有效小数位数（精度）。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Scale">
      <summary>获取 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 解析为的小数位数。</summary>
      <returns>Value 属性解析后的小数位数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的符号。</summary>
      <returns>一个指示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的符号的数字。</returns>
      <param name="n">要计算其符号的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算从第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数中减去第二个操作数所得的结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的“值”属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToDouble">
      <summary>返回等于此实例的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的内容的双精度型值。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的小数表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 Value。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 true，则 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 1。 否则，<see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，它的值是一个表示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构中包含的值的字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个新的 <see cref="T:System.String" /> 对象，其中包含 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值截断到希望的位置。</summary>
      <returns>为 <paramref name="position" /> 参数提供一个负值，以便将该值截断到小数点左侧对应的位置。</returns>
      <param name="n">要截断的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="position">数字将要截断到的小数位置。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。 此属性是只读的。</summary>
      <returns>介于 -79,228,162,514,264,337,593,543,950,335 到 79,228,162,514,162,514,264,337,593,543,950,335 之间的数字。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDouble">
      <summary>表示要存储在数据库中或从数据库中检索的浮点数字，该数字介于 -1.79E+308 到 1.79E+308 的范围内。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)">
      <summary>通过使用提供的双精度型参数设置新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性，从而初始化 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的新实例。</summary>
      <param name="value">一个双精度型值，其值用于新 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该加法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</summary>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性进行比较。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.IsNull">
      <summary>返回一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例是否为 null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为 null，则返回 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MaxValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MinValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的最小可能值的常数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</summary>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定它们是否不等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该加法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</summary>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble">
      <summary>将所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为 0 或 1，取决于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为双精度型值。</summary>
      <returns>等效于指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值的双精度型值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的数值。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 <see cref="F:System.Data.SqlTypes.SqlByte.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 <see cref="F:System.Data.SqlTypes.SqlDecimal.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt16.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt64.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 <see cref="F:System.Data.SqlTypes.SqlSingle.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>与指定双精度型参数具有相同值的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
      <param name="x">要转换的双精度型值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</summary>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数中减去第二个操作数。</summary>
      <returns>该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)">
      <summary>返回指定 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的求反值。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效双精度浮点数字。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />，包含 String 所表示的值。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数中减去第二个操作数。</summary>
      <returns>该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>.NET 框架所使用的 XML 架构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 SqlBoolean 结构，如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为非零，其 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为零，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />；如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 SqlByte 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 Value。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 SqlDecimal 结构，其转换后的值等于此 SqlDouble 的舍入值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 Value 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 Value 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 Value 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 SqlMoney 结构，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 SqlSingle 结构，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString，表示此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为字符串。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlFileStream">
      <summary>公开使用 FILESTREAM 列特性作为字节序列存储的 SQL Server 数据。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 类的新实例。</summary>
      <param name="path">文件的逻辑路径。 可通过对表中的基础 FILESTREAM 列使用 Transact-SQL Pathname 函数来检索该路径。</param>
      <param name="transactionContext">SqlFileStream 对象的事务上下文。 应用程序应返回通过调用 GET_FILESTREAM_TRANSACTION_CONTEXT 方法而返回的字节数组。</param>
      <param name="access">打开该文件时要使用的访问模式。 受支持的 <see cref="T:System.IO.FileAccess" /> 枚举值包括 <see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 和 <see cref="F:System.IO.FileAccess.ReadWrite" />。 使用 FileAccess.Read 时，SqlFileStream 对象可用于读取所有现有数据。 使用 FileAccess.Write 时，SqlFileStream 指向一个零字节文件。 在关闭该对象并执行该事务时，将覆盖现有数据。 使用 FileAccess.ReadWrite 时，SqlFileStream 指向一个包含所有现有数据的文件。 句柄会定位到该文件开头。 您可以使用 System.IOSeek 方法之一移动该文件中的句柄位置来写入或追加新数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null 引用，或者 <paramref name="transactionContext" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="path" /> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。 <paramref name="path" /> 以“\\.\”开头，例如“\\.\PHYSICALDRIVE0”。 对 NTCreateFile 的调用返回的句柄不是 FILE_TYPE_DISK 类型。 <paramref name="options" /> 包含不受支持的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的 <paramref name="path" /> 无效，例如在未映射的驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">操作系统不允许对指定的路径进行请求的访问。 当指定 Write 或 ReadWrite 访问权限，并且文件或目录设置为只读访问时，会发生这种情况。</exception>
      <exception cref="T:System.InvalidOperationException">NtCreateFile 失败，并返回设置为 ERROR_SHARING_VIOLATION 的错误代码。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess,System.IO.FileOptions,System.Int64)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 类的新实例。</summary>
      <param name="path">文件的逻辑路径。 可通过对表中的基础 FILESTREAM 列使用 Transact-SQL Pathname 函数来检索该路径。</param>
      <param name="transactionContext">SqlFileStream 对象的事务上下文。 当设置为 null 时，隐式事务将用于 SqlFileStream 对象。 应用程序应返回通过调用 GET_FILESTREAM_TRANSACTION_CONTEXT 方法而返回的字节数组。</param>
      <param name="access">打开该文件时要使用的访问模式。 受支持的 <see cref="T:System.IO.FileAccess" /> 枚举值包括 <see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 和 <see cref="F:System.IO.FileAccess.ReadWrite" />。 使用 FileAccess.Read 时，SqlFileStream 对象可用于读取所有现有数据。 使用 FileAccess.Write 时，SqlFileStream 指向一个零字节文件。 在关闭该对象并执行该事务时，将覆盖现有数据。 使用 FileAccess.ReadWrite 时，SqlFileStream 指向一个包含所有现有数据的文件。 句柄会定位到该文件开头。 您可以使用 System.IOSeek 方法之一移动该文件中的句柄位置来写入或追加新数据。</param>
      <param name="options">指定打开该文件时要使用的选项。 受支持的 <see cref="T:System.IO.FileOptions" /> 值包括 <see cref="F:System.IO.FileOptions.Asynchronous" />、 <see cref="F:System.IO.FileOptions.WriteThrough" />、 <see cref="F:System.IO.FileOptions.SequentialScan" /> 和 <see cref="F:System.IO.FileOptions.RandomAccess" />。</param>
      <param name="allocationSize">创建文件时要使用的分配大小。 如果设置为 0，则将使用默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null 引用，或者 <paramref name="transactionContext" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="path" /> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。 <paramref name="path" /> 以“\\.\”开头，例如“\\.\PHYSICALDRIVE0”。 对 NTCreateFile 的调用返回的句柄不是 FILE_TYPE_DISK 类型。 <paramref name="options" /> 包含不受支持的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的 <paramref name="path" /> 无效，例如在未映射的驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">操作系统不允许对指定的路径进行请求的访问。 当指定 Write 或 ReadWrite 访问权限，并且文件或目录设置为只读访问时，会发生这种情况。</exception>
      <exception cref="T:System.InvalidOperationException">NtCreateFile 失败，并返回设置为 ERROR_SHARING_VIOLATION 的错误代码。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。</summary>
      <returns>表示异步读取的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <param name="buffer">数据读入的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="callback">可选的异步回调，在完成读取时调用。</param>
      <param name="state">一个用户提供的对象，该对象将此特定的异步读取请求与其他请求区分开来。</param>
      <exception cref="T:System.NotSupportedException">流不支持数据读取。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。</summary>
      <returns>表示异步写入的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="callback">可选的异步回调，在完成写入时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <exception cref="T:System.NotSupportedException">流不支持写入数据。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读取。</summary>
      <returns>如果当前流支持读取，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找。</summary>
      <returns>如果当前流支持查找，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanTimeout">
      <summary>获取一个值，该值指示当前流是否能超时。</summary>
      <returns>如果当前流可以超时，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写入。</summary>
      <returns>如果当前流支持写入，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。</summary>
      <returns>从流中读取的字节数，介于零 (0) 和所请求的字节数之间。 流仅在流的末尾返回零 (0)，否则应一直阻止到至少有 1 个字节可用为止。</returns>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IAsyncResult" /> 对象并不来自于相应的 BeginRead 方法。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作。</summary>
      <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IAsyncResult" /> 对象并不来自于相应的 BeginWrite 方法。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Flush">
      <summary>清除该流的所有缓冲区，并使所有缓冲的数据都写入基础设备。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Length">
      <summary>获取一个值，该值指示当前流的长度（以字节为单位）。</summary>
      <returns>一个 <see cref="T:System.Int64" />，指示当前流的长度（以字节为单位）。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Name">
      <summary>获取传递给构造函数的 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 的逻辑路径。</summary>
      <returns>一个指示 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 名称的字符串值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Position">
      <summary>获取或设置当前流中的位置。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 中的当前位置。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从当前流读取字节序列，并将流中的位置向前移动读取的字节数。</summary>
      <returns>读入缓冲区中的总字节数。 如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。</returns>
      <param name="buffer">字节数组。 此方法返回时，缓冲区包含指定的字节数组，该数组的偏移量和 (偏移量 + 计数 – 1) 之间的值由从当前源中读取的字节替换。</param>
      <param name="offset">缓冲区中从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
      <param name="count">要从当前流中最多读取的字节数。</param>
      <exception cref="T:System.NotSupportedException">该对象不支持读取数据。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.ReadByte">
      <summary>从流中读取一个字节，并将流内的位置向前推进一个字节，或者如果已到达流的末尾，则返回 -1。</summary>
      <returns>转换为 <see cref="T:System.Int32" /> 的无符号字节，或者如果到达流的末尾，则为 -1。</returns>
      <exception cref="T:System.NotSupportedException">该对象不支持读取数据。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.ReadTimeout">
      <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。</summary>
      <returns>一个确定流在超时前尝试读取多长时间的值（以毫秒为单位）。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>设置当前流中的位置。</summary>
      <returns>当前流中的新位置。</returns>
      <param name="offset">相对于 <paramref name="origin" /> 参数的字节偏移量</param>
      <param name="origin">一个 <see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.SetLength(System.Int64)">
      <summary>设置当前流的长度。</summary>
      <param name="value">所需的当前流的长度（以字节表示）。</param>
      <exception cref="T:System.NotSupportedException">该对象不支持读取数据。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.TransactionContext">
      <summary>获取或设置此 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 对象的事务上下文。</summary>
      <returns>传递给此 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 对象的构造函数的 <paramref name="transactionContext" /> 数组。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节序列写入当前流，并将流的当前位置向前移动写入的字节数。</summary>
      <param name="buffer">字节数组。 此方法将 <paramref name="count" /> 个字节从 <paramref name="buffer" /> 复制到当前流。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">要写入当前流的字节数。</param>
      <exception cref="T:System.NotSupportedException">该对象不支持写入数据。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.WriteByte(System.Byte)">
      <summary>将一个字节写入流内的当前位置，并将流内的位置向前推进一个字节。</summary>
      <param name="value">要写入流的字节。</param>
      <exception cref="T:System.NotSupportedException">该对象不支持写入数据。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.WriteTimeout">
      <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试写入多长时间。</summary>
      <returns>一个确定流在超时前尝试写入多长时间的值（以毫秒为单位）。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlGuid">
      <summary>表示要存储在数据库中或要从数据库中检索的 GUID。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])">
      <summary>使用提供的字节数组参数初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="value">字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)">
      <summary>使用指定的 <see cref="T:System.Guid" /> 参数初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="g">一个 <see cref="T:System.Guid" /></param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的值初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="a">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的开头四个字节。</param>
      <param name="b">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下两个字节。</param>
      <param name="c">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下两个字节。</param>
      <param name="d">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="e">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="f">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="g">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="h">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="i">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="j">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="k">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)">
      <summary>使用指定的 <see cref="T:System.String" /> 参数初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="s">
        <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构与所提供的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 进行比较，并返回其相对值的指示值。 不仅仅是比较最后 6 个字节，但会将最后 6 个字节视为比较中最重要的字节。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于对象。 零 此实例等于对象。 大于零 此实例大于对象 - 或 - 对象是 null 引用 (Nothing)。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构与所提供的对象进行比较，并返回其相对值的指示。 不仅仅是比较最后 6 个字节，但会将最后 6 个字节视为比较中最重要的字节。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于对象。 零 此实例等于对象。 大于零 此实例大于对象 - 或 - 对象是 null 引用 (Nothing)</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlGuid 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlGuid.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlGuid">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlGuid" />，它的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />。</returns>
      <param name="x">SqlBinary 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Guid">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数转换为 <see cref="T:System.Guid" />。</summary>
      <returns>一个新 <see cref="T:System.Guid" />，它等于 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlGuid">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)~System.Data.SqlTypes.SqlGuid">
      <summary>将提供的 <see cref="T:System.Guid" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="T:System.Guid" /> 参数。</returns>
      <param name="x">
        <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Parse(System.String)">
      <summary>将指定的 <see cref="T:System.String" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToByteArray">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为字节数组。</summary>
      <returns>一个字节数组，表示此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlBinary">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>一个 SqlBinary 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构中的字节。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的值。 此属性是只读的。</summary>
      <returns>一个 <see cref="T:System.Guid" /> 结构。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt16">
      <summary>表示要在数据库中存储或检索的 16 位有符号整数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)">
      <summary>使用提供的短整型参数初始化 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的新实例。</summary>
      <param name="value">短整型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 对象为 null 引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlInt16 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)">
      <summary>将指定对象与 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 <see cref="T:System.String" /> 值。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构是否为 Null。</summary>
      <returns>如果为 null，则返回 true。 否则为 false。 有关详细信息，请参阅 处理 Null 值 (ADO.NET)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 运算符对它的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Int16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为短整型。</summary>
      <returns>短整型，其值等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象参数表示的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的短整型转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>与指定的短整型具有相同值的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
      <param name="x">短整型值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 运算符对它的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数中减去第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>一个 16 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数中减去第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>.NET 框架所使用的 XML 架构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的值小于 0 或大于 255，则将发生 <see cref="T:System.OverflowException" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的此实例的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 对象，它表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的此实例的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的此实例的值。 此属性是只读的。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值的短整型。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它包含该“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt32">
      <summary>表示要在数据库中存储或检索的 32 位有符号整数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)">
      <summary>使用提供的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的新实例。</summary>
      <param name="value">要转换的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlInt32 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构是否为 Null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 为 Null，则此属性为 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 类的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含二进制求补运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Int32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为整数。</summary>
      <returns>已转换的整数值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 SqlInt64 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 转换为整数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 Value 属性等于整数参数。</returns>
      <param name="x">一个整数值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含二进制求补运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数中减去第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>一个 32 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数中减去第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的 Value。 如果 SqlInt32 的值小于 0 或大于 255，则将发生 <see cref="T:System.OverflowException" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值。 此属性是只读的。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值的整数。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">此属性包含 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>表示要在数据库中存储或检索的 64 位有符号整数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>使用提供的长整型初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的新实例。</summary>
      <param name="value">长整型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing ）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlInt64 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的可能的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的可能的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 SqlInt64 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>对它的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位二进制反码运算。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为长值。</summary>
      <returns>一个新长值，它等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>将长参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于长参数的值。</returns>
      <param name="x">长整型值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 SqlInt64 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>对它的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位二进制反码运算。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的求反 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>一个 64 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的 Value。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的此实例转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值。 此属性是只读的。</summary>
      <returns>一个长整型，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>表示要存储在数据库中或要从数据库中检索的货币值，范围介于 -2 63（或 -922,337,203,685,477.5808）到 2 63 -1（或 +922,337,203,685,477.5807）之间，精度为千分之十货币单位。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>使用指定的 <see cref="T:System.Decimal" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>使用指定的双精度型值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>用指定的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>使用指定的长整型值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlMoney 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的实例并且两者相等，则相等比较将返回 true；否则返回 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>返回一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该乘法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>一个新 <see cref="T:System.Decimal" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>将 <see cref="T:System.Decimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于 <see cref="T:System.Decimal" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Int64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Int64" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该乘法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含求反的结果。</returns>
      <param name="x">需求反的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 形式。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的此实例的值转换为 <see cref="T:System.Decimal" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Decimal" /> 结构，它的值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Double" />。</summary>
      <returns>一个双精度型，它的值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Int32" />。</summary>
      <returns>一个 32 位整数，其值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的值转换为 <see cref="T:System.Int64" />。</summary>
      <returns>一个 64 位整数，其值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的值为零，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，它的值是一个表示此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的此实例转换为字符串。</summary>
      <returns>一个字符串，它的值是此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的实例的货币值。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的实例的货币值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNotFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
      <param name="e">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>当 <see cref="N:System.Data.SqlTypes" /> 结构的 Value 属性设置为 null 时所引发的异常。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>表示要存储在数据库中或从数据库中检索的浮点数，范围在 -3.40E+38 到 3.40E+38 之间。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>使用提供的 double 类型的参数初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">一个双精度型值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">一个浮点数，它将用作新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构除以第二个结构。</summary>
      <returns>一个 SqlInt64 结构，包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlSingle 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的实例并且两者相等，则为 true。 否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构执行逻辑比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构是否为 Null。</summary>
      <returns>如果为 null，则返回 true。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构除以第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 SqlSingle 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为浮点型。</summary>
      <returns>一个 float 类型值，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值。</returns>
      <param name="x">要转换为浮点型的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构执行逻辑比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>将指定的浮点值转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含指定浮点型的值。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的浮点值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构中减去第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>对指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>将指定 <see cref="T:System.String" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构中减去第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 Value。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 true，则 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 1。 否则，<see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新 SqlDecimal 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 SqlDouble 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 SqlInt16 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，表示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个表示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值的 String 对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值。 此属性是只读的。</summary>
      <returns>一个浮点值，介于 -3.40E+38 到 3.40E+38 的范围内。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>表示要存储在数据库中或从数据库中检索的字符的可变长度流。 <see cref="T:System.Data.SqlTypes.SqlString" /> 具有与其相应的 .NET Framework <see cref="T:System.String" /> 数据类型不同的基础数据结构。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>使用指定的区域设置 ID、比较选项和数据，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="fUnicode">如果是 Unicode 编码，则为 true。 否则为 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">数组中的起始索引。</param>
      <param name="count">要从索引复制的字符数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">数组中的起始索引。</param>
      <param name="count">要从索引复制的字符数。</param>
      <param name="fUnicode">如果是 Unicode 编码，则为 true。 否则为 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>使用指定的字符串和区域设置 ID 值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>使用指定字符串、区域设置 ID 和比较选项值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值以创建一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它是 <paramref name="x" /> 与 <paramref name="y" /> 的串联值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>创建此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的一个副本。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中所有的属性值都与原始值相同。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>获取 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象定义如何对此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构执行字符串比较。</summary>
      <returns>一个 CompareInfo 对象，该对象定义此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的字符串比较。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>获取与指定 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值等效的 <see cref="T:System.Globalization.CompareOptions" /> 枚举。</summary>
      <returns>一个 CompareOptions 值，该值对应于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的 SqlCompareOptions。</returns>
      <param name="compareOptions">一个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值，该值描述此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象与所提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。 返回值 Condition 小于零 此实例小于该对象。 零 此实例等于该对象。 大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串连两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它包含表示两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数内容的新串联的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>获取 <see cref="T:System.Globalization.CultureInfo" /> 结构，它表示有关此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的区域性信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" /> 结构，描述有关此 SqlString 结构的区域性的信息，包括区域性的名称、书写体系和使用的日历，还包括对特定于区域性对象的访问，这些对象提供常规运算的方法，例如格式化日期和排序字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。 否则为 false。 如果任一实例为 null，则 SqlString 将为 null。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlString" /> 的实例并且两者相等，则相等比较将返回 true；否则返回 false。</returns>
      <param name="value">要比较的对象。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>获取字节的数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlString" /> ANSI 格式的内容。</summary>
      <returns>一个字节数组，包含 <see cref="T:System.Data.SqlTypes.SqlString" /> ANSI 格式的内容。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>获取字节的数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlString" /> Unicode 格式的内容。</summary>
      <returns>一个字节数组，包含 <see cref="T:System.Data.SqlTypes.SqlString" /> Unicode 格式的内容。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较应忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>指定字符串比较必须忽略假名类型。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>指定字符串比较必须忽略非空格组合字符，比如音调符号。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>指定字符串比较必须忽略字符宽度。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构是否为 Null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 为 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，则返回 true。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</summary>
      <returns>存储在 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性中的字符串的区域设置 ID。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串连两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它包含表示两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数内容的新串联的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 SqlDecimal 参数的字符串表示形式。</returns>
      <param name="x">要转换的 SqlDecimal 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它的值是指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 SqlInt32 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 String，它的内容与 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性相同。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>将 <see cref="T:System.String" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，包含指定的 String 的值。</returns>
      <param name="x">要转换的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>一个或多个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 枚举值的组合，它们表示此 <see cref="T:System.Data.SqlTypes.SqlString" /> 与其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较方式。</summary>
      <returns>一个值，它指定如何将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 与其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构进行比较。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个新的 SqlByte 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构所表示的数字。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个新的 SqlDateTime 结构，其中包含此 <see cref="T:System.Data.SqlTypes.SqlString" /> 所表示的日期值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，其中包含此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构所表示的 Guid。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.String" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构具有相同值的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>获取存储在此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构中的字符串。 此属性是只读的。</summary>
      <returns>存储的字符串。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">字符串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>在将值设置到 <see cref="N:System.Data.SqlTypes" /> 结构中会截断该值时引发的异常。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对 <see cref="T:System.Exception" /> 的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="e">对内部 <see cref="T:System.Exception" /> 的引用。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> 的基异常类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="si">承载序列化对象数据的对象。</param>
      <param name="sc">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <param name="name">字符串形式的名称。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <param name="name">字符串形式的名称。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
      <param name="direct">一个布尔值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String,System.String[],System.CodeDom.CodeNamespaceImport[],System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <param name="name">字符串形式的名称。</param>
      <param name="targetNamespace">目标命名空间。</param>
      <param name="references">引用的字符串数组。</param>
      <param name="namespaceImports">CodeNamespaceImport 对象数组。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
      <param name="direct">表示定向的布尔值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</returns>
      <param name="name">
        <paramref name="name" />
      </param>
      <param name="xmlNamespace">
        <paramref name="xmlNamespace" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</returns>
      <param name="type">
        <paramref name="type" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.SqlTypesNamespace">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>表示存储在服务器中的或从服务器中检索的 XML 数据。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，以提供来自所提供的 <see cref="T:System.IO.Stream" /> 派生实例中的 XML 值。</summary>
      <param name="value">一个 <see cref="T:System.IO.Stream" /> 派生实例（如 <see cref="T:System.IO.FileStream" />），要从该实例加载 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 XML 内容。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，并将其与提供的 <see cref="T:System.Xml.XmlReader" /> 的内容关联起来。</summary>
      <param name="value">一个要用作新 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的值的 <see cref="T:System.Xml.XmlReader" /> 派生类实例。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>作为 <see cref="T:System.Xml.XmlReader" /> 来获取此 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的 XML 内容的值。</summary>
      <returns>一个包含 XML 内容的 <see cref="T:System.Xml.XmlReader" /> 派生实例。 根据信息的内部表示方式，服务器上的实际类型会有所不同（例如，返回值可能为 <see cref="T:System.Xml.XmlTextReader" />）。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">曾尝试访问 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的 null 实例上的此属性。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的字符串。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>指示此实例是否表示一个 null <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</summary>
      <returns>如果 Value 为 null，则为 true。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型的 null 实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型的 null 实例。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法产生并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="r">一个 XmlReader。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">一个 XmlWriter</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 XML 内容的字符串表示形式。</summary>
      <returns>XML 内容的字符串表示形式。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.StorageState">
      <summary>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举不用作独立组件，而是用作其他类从中派生标准功能的枚举。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Buffer">
      <summary>缓冲区大小。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Stream">
      <summary>流。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.UnmanagedBuffer">
      <summary>非托管缓冲区。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBinarySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBitSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeFloatSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeMoneySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNTextSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNumericSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeRealSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension">
      <summary>TypeSmallDateTimeSchemaImporterExtension 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension.#ctor">
      <summary>初始化 TypeSmallDateTimeSchemaImporterExtension  类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeTextSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Xml.XmlDataDocument">
      <summary>允许通过相关的 <see cref="T:System.Data.DataSet" /> 存储、检索和操作结构化数据。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlDataDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)">
      <summary>用指定的 <see cref="T:System.Data.DataSet" /> 初始化 <see cref="T:System.Xml.XmlDataDocument" /> 类的新实例。</summary>
      <param name="dataset">要加载到 XmlDataDocument 的 DataSet。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)">
      <summary>创建当前节点的副本。</summary>
      <returns>克隆的节点。</returns>
      <param name="deep">如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)">
      <summary>创建具有指定 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的元素。</summary>
      <returns>一个新的 <see cref="T:System.Xml.XmlElement" />。</returns>
      <param name="prefix">新元素的前缀。 如果为 String.Empty 或 null，则没有前缀。</param>
      <param name="localName">新元素的本地名称。</param>
      <param name="namespaceURI">新元素的命名空间统一资源标识符 (URI)。 如果为 String.Empty 或 null，则没有 namespaceURI。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)">
      <summary>创建具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />。</returns>
      <param name="name">实体引用的名称。</param>
      <exception cref="T:System.NotSupportedException">调用此方法。</exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>创建一个用于导航此文档的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。 XPathNavigator 定位在 <paramref name="node" /> 参数中指定的节点上。</summary>
      <returns>用于文档导航的 XPathNavigator。</returns>
      <param name="node">希望导航器最初定位在的 <see cref="T:System.Xml.XmlNode" />。</param>
    </member>
    <member name="P:System.Xml.XmlDataDocument.DataSet">
      <summary>获取 <see cref="T:System.Data.DataSet" />，该数据集提供 XmlDataDocument 中数据的关系表示形式。</summary>
      <returns>DataSet，该数据集可用于访问使用关系模型的 XmlDataDocument 中的数据。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementById(System.String)">
      <summary>获取具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。 <see cref="T:System.Xml.XmlDataDocument" /> 类不支持该方法。 调用此方法将引发异常。</summary>
      <returns>具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。</returns>
      <param name="elemId">要匹配的特性 ID。</param>
      <exception cref="T:System.NotSupportedException">调用此方法。</exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)">
      <summary>检索与指定 <see cref="T:System.Data.DataRow" /> 关联的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>包含指定 DataRow 的表示形式的 XmlElement。</returns>
      <param name="r">想要检索其关联 XmlElement 的 DataRow。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)">
      <summary>返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" /> 匹配的所有子代元素的列表。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。</returns>
      <param name="name">要匹配的限定名。 它针对匹配节点的 <see cref="P:System.Xml.XmlDocument.Name" /> 属性进行匹配。 特殊值“*”匹配所有标记。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)">
      <summary>检索与指定 <see cref="T:System.Xml.XmlElement" /> 关联的 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>包含 XmlElement 的表示形式的 DataRow；如果没有与 XmlElement 关联的 DataRow，则为 null。</returns>
      <param name="e">想要检索其关联 DataRow 的 XmlElement。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)">
      <summary>从指定的流加载 XmlDataDocument。</summary>
      <param name="inStream">包含要加载的 XML 文档的流。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)">
      <summary>从指定的 <see cref="T:System.IO.TextReader" /> 加载 XmlDataDocument。</summary>
      <param name="txtReader">用于将 XML 数据输送到文档中的 TextReader。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.String)">
      <summary>使用指定的 URL 加载 XmlDataDocument。</summary>
      <param name="filename">文件的 URL，该文件包含要加载的 XML 文档。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)">
      <summary>从指定的 <see cref="T:System.Xml.XmlReader" /> 加载 XmlDataDocument。</summary>
      <param name="reader">包含要加载的 XML 文档的 XmlReader。</param>
      <exception cref="T:System.NotSupportedException">正在加载的 XML 包含实体引用，而该读取器不能解析实体。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
  </members>
</doc>