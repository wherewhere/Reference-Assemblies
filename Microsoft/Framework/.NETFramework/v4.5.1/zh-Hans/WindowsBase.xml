<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用“弱事件侦听器”模式附加 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>添加指定的事件处理程序，当指定的源引发 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件时进行调用。</summary>
      <param name="source">引发 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>将指定侦听器添加到指定源的 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件中。</summary>
      <param name="source">带事件的对象。</param>
      <param name="listener">要作为侦听器添加的对象。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary>返回包含 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件侦听器的新对象。</summary>
      <returns>包含 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>从指定源中移除指定的事件处理程序。</summary>
      <param name="source">引发 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>将指定的侦听器从指定源的 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件中移除。</summary>
      <param name="source">带事件的对象。</param>
      <param name="listener">要移除的侦听器。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>开始对指定源侦听 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</summary>
      <param name="source">带事件的对象。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>停止对指定源侦听 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</summary>
      <param name="source">带事件的对象。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用“弱事件侦听器”模式附加 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>添加指定的事件处理程序，当指定的源引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件时进行调用。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件的源对象。</param>
      <param name="handler">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件的源对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>将指定侦听器添加到指定源的 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件中。</summary>
      <param name="source">带事件的对象。</param>
      <param name="listener">要作为侦听器添加的对象。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary>返回包含 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件侦听器的新对象。</summary>
      <returns>包含 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>从指定源中移除指定的事件处理程序。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>将指定的侦听器从指定源的 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件中移除。</summary>
      <param name="source">带事件的对象。</param>
      <param name="listener">要移除的侦听器。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>开始对指定源侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。</summary>
      <param name="source">带事件的对象。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>停止对指定源侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。</summary>
      <param name="source">带事件的对象。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的有关信息。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>使用指定的 <see cref="isCancelable" /> 值初始化 <paramref name="T:System.ComponentModel.CurrentChangingEventArgs" /> 类的新实例。</summary>
      <param name="isCancelable">指示事件是否可以取消的值。</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>获取或设置一个值，该值指示是否取消事件。</summary>
      <returns>如果要取消事件，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> 的值为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>获取指示事件是否可以取消的值。</summary>
      <returns>如果可以取消事件，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>表示处理 <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> 事件的方法。</summary>
      <param name="sender">引发事件的对象。</param>
      <param name="e">有关事件的信息。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用“弱事件侦听器”模式附加 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>添加指定的事件处理程序，当指定的源引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件时进行调用。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>将指定侦听器添加到指定源的 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件中。</summary>
      <param name="source">带事件的对象。</param>
      <param name="listener">要作为侦听器添加的对象。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary>返回包含 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件侦听器的新对象。</summary>
      <returns>包含 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>从指定源中移除指定的事件处理程序。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>将指定的侦听器从指定源的 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件中移除。</summary>
      <param name="source">带事件的对象。</param>
      <param name="listener">要移除的侦听器。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>开始对指定源侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。</summary>
      <param name="source">带事件的对象。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>停止对指定源侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。</summary>
      <param name="source">带事件的对象。</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>提供说明依赖项属性的其他属性特征的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的扩展名。</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>使其他对象在此属性更改时能得到通知。</summary>
      <param name="component">为其添加处理程序的组件。</param>
      <param name="handler">要作为侦听器添加的委托。</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>获取该成员的特性集合。</summary>
      <returns>特性的 <see cref="T:System.ComponentModel.AttributeCollection" /> 集合。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>返回重置对象是否会更改该对象的值。</summary>
      <returns>如果重置组件更改其值，则为 true；否则为 false。</returns>
      <param name="component">要测试重置功能的组件。</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>获取成员所属的类别的名称，如 <see cref="T:System.ComponentModel.CategoryAttribute" /> 中所指定的。</summary>
      <returns>该成员所属的类别的名称。 如果没有 <see cref="T:System.ComponentModel.CategoryAttribute" />，类别名将被设置为默认类别 Misc。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>获取该属性绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示该属性绑定到的组件的类型。 在调用 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> 时，指定对象可能是此类型的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>获取该属性的类型转换器。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" />，用于转换该属性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>返回依赖项属性标识符。</summary>
      <returns>依赖项属性标识符。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>获取成员的说明，如 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 中所指定的。</summary>
      <returns>成员的说明。 如果没有 <see cref="T:System.ComponentModel.DescriptionAttribute" />，属性值被设置为默认值，它是一个空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>获取或设置一个回调，设计器将使用此回调修改依赖项属性的有效值，然后将此依赖项属性值存储在依赖项属性引擎中。</summary>
      <returns>一个回调，设计器将使用此回调修改依赖项属性的有效值，然后将此依赖项属性值存储在依赖项属性引擎中。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>获取是否只能在设计时设置该成员，如 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 中所指定的。</summary>
      <returns>如果只能在设计时设置该成员，则为 true；如果可以在运行时设置该成员，则为 false。 如果没有 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />，则返回值是默认值 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>获取可以显示在窗口（如“属性”窗口）中的名称。</summary>
      <returns>为属性显示的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>比较两个 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 实例是否相等。</summary>
      <returns>如果值相等，则为 true；否则为 false。</returns>
      <param name="obj">与当前实例进行比较的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>返回提供的属性名的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</summary>
      <returns>请求的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
      <param name="name">依赖项属性或附加属性的注册名称。</param>
      <param name="ownerType">拥有属性定义的对象的 <see cref="T:System.Type" />。</param>
      <param name="targetType">要设置其属性的对象的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>返回提供的属性名的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</summary>
      <returns>请求的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
      <param name="name">依赖项属性或附加属性的注册名称。</param>
      <param name="ownerType">拥有属性定义的对象的 <see cref="T:System.Type" />。</param>
      <param name="targetType">要设置其属性的对象的 <see cref="T:System.Type" />。</param>
      <param name="ignorePropertyType">指定忽略属性类型。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>返回提供的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</summary>
      <returns>如果 <paramref name="property" /> 描述的属性是依赖项属性，则返回一个有效的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。 否则，它返回 null<see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
      <param name="property">要检查的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>返回提供的依赖项属性和目标类型的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</summary>
      <returns>提供的依赖项属性的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
      <param name="dependencyProperty">依赖项属性的标识符。</param>
      <param name="targetType">在其中设置属性的对象的类型。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>返回一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有匹配指定组件的指定特性的属性。</returns>
      <param name="instance">要获取其属性的组件。</param>
      <param name="filter">用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>获取指定类型的编辑器。</summary>
      <returns>请求的编辑器类型的实例，或者，如果未能找到编辑器，则为 null。</returns>
      <param name="editorBaseType">编辑器的基类型，用于区分属性所支持的多个编辑器。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>返回此 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>返回组件的属性的当前值。</summary>
      <returns>请求的值。</returns>
      <param name="component">组件实例。</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>获取一个值，该值指示属性是否注册为附加属性并通过附加用法来使用。</summary>
      <returns>如果属性为附加属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>获取一个值，以指示属性上的 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 的值。</summary>
      <returns>如果 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 是在属性上指定的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>获取指示是否应该本地化该属性的值，如 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 中所指定的值。</summary>
      <returns>如果使用值 true 的 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 构造函数标记成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>获取指示该属性是否为只读的值。</summary>
      <returns>如果该属性为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>获取与依赖项属性关联的元数据。</summary>
      <returns>依赖项属性元数据。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>获取依赖项属性的表示的 <see cref="T:System.Type" />。</summary>
      <returns>依赖项属性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>使其他对象在此属性更改时能得到通知。</summary>
      <param name="component">为其添加处理程序的组件。</param>
      <param name="handler">要作为侦听器添加的委托。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>将组件的此属性的值重置为默认值。</summary>
      <param name="component">具有要重置为默认值的属性值的组件。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>将组件的值设置为一个不同的值。</summary>
      <param name="component">具有要进行设置的属性值的组件。</param>
      <param name="value">新值。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>指示是否需要通过序列化过程永久保存该属性的值。</summary>
      <returns>如果属性应该被永久保存，则为 true；否则为 false。</returns>
      <param name="component">具有要检查其持久性的属性的组件。</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>指示此属性的值更改通知是否源自属性说明符的外部（例如源自组件本身），或指示通知是否只源自对 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> 的直接调用。</summary>
      <returns>如果此属性的通知可以源自属性说明符的外部（例如源自组件本身），则为 true。 如果通知只源自对 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> 的直接调用，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>将此实例的值转换为其等效的字符串表示形式。</summary>
      <returns>返回 <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> 值。</returns>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary>提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用弱事件侦听器模式附加 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>添加指定的事件处理程序，当指定的源引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件时进行调用。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary>返回包含 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件侦听器的新对象。</summary>
      <returns>包含 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>从指定源中移除指定的事件处理程序。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary>开始对指定源侦听 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的源对象。</param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary>停止对指定源侦听 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的源对象。</param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>为描述如何将集合中的项划分为组的类型提供抽象基类。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.GroupDescription" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>返回给定项的组名称。</summary>
      <returns>给定项的组名称。</returns>
      <param name="item">要返回其组名称的项。</param>
      <param name="level">分组级别。</param>
      <param name="culture">要提供给转换器的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>获取名称的集合，这些名称用于初始化一个组，该组由具有给定名称的子组组成。</summary>
      <returns>名称的集合，这些名称用于初始化一个组，该组由具有给定名称的子组组成。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>返回一个值，该值指示组名称和项名称是否匹配，从而指示项是否属于组。</summary>
      <returns>如果名称匹配并且项属于组，则为 true，否则为 false。</returns>
      <param name="groupName">要检查的组名称。</param>
      <param name="itemName">要检查的项名称。</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> 事件。</summary>
      <param name="e">要引发的事件的参数。</param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>返回序列化进程是否应序列化此类的实例上 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> 属性的有效值。</summary>
      <returns>如果应序列化 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> 属性值，则返回 true；否则返回 false。</returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>允许集合具有当前记录管理、自定义排序、筛选和分组这些功能。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.Filter" /> 属性进行筛选。</summary>
      <returns>如果此视图支持筛选，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> 属性进行分组。</summary>
      <returns>如果此视图支持分组，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> 属性进行排序。</summary>
      <returns>如果此视图支持排序，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>返回一个值，该值指示给定项是否属于此集合视图。</summary>
      <returns>如果该项属于此集合视图，则为 true；否则为 false。</returns>
      <param name="item">要检查的对象。</param>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>获取或设置根据区域性而可能不同的视图的任何操作（如排序）的区域性信息。</summary>
      <returns>要在排序期间使用的区域性。</returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>在实现此接口时，会在更改当前项之后引发此事件。</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>在实现此接口时，会在更改当前项之前引发此事件。 事件处理程序可以取消此事件。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>获取视图中的当前项。</summary>
      <returns>如果没有当前项，则为视图的当前项或 null。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>获取视图中 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的序号位置。</summary>
      <returns>视图中 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的序号位置。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>进入延迟循环，该循环可用于将更改合并到视图并延迟自动刷新。</summary>
      <returns>一个可用于释放调用对象的 <see cref="T:System.IDisposable" /> 对象。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>获取或设置用于确定某个项是否适合包含在视图中的回调。</summary>
      <returns>用于确定某个项是否适合包含在视图中的方法。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>获取 <see cref="T:System.ComponentModel.GroupDescription" /> 对象的集合，这些对象描述集合中的项在视图中的分组方式。</summary>
      <returns>
        <see cref="T:System.ComponentModel.GroupDescription" /> 对象的集合，这些对象描述集合中的项在视图中的分组方式。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>获取顶级组。</summary>
      <returns>如果没有任何组，则为顶级组的只读集合或 null。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>获取一个值，该值指示视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是否超出集合的末尾。</summary>
      <returns>如果视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 超出集合的末尾，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>获取一个值，该值指示视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是否位于集合开始位置之外。</summary>
      <returns>如果视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 位于集合的开始位置之外，则返回 true；否则返回 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>返回一个值，该值指示获得的视图是否为空。</summary>
      <returns>如果最终的视图为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>将指定项设置为视图中的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns>如果最终的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 位于视图中，则为 true；否则为 false。</returns>
      <param name="item">要设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的项。</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>将视图中的第一项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns>如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>将视图中的最后一项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns>如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>将视图中位于 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 之后的项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns>如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>将位于指定索引位置的项设置为视图中的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns>如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 true；否则为 false。</returns>
      <param name="position">一个索引位置，位于该位置的项将设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>将视图中位于 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 之前的项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns>如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>重新创建该视图。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>获取 <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合，这些对象描述集合中的项在视图中的排序方式。</summary>
      <returns>
        <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合，这些对象描述集合中的项在视图中的排序方式。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>返回基础集合。</summary>
      <returns>一个表示基础集合的 <see cref="T:System.Collections.IEnumerable" /> 对象。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>可以实现集合以创建其数据的视图的接口。 正常情况下，用户代码不在此接口上调用方法。</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>在实现此接口的集合上创建新视图。 通常，用户代码不调用此方法。</summary>
      <returns>新创建的视图。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary>定义能够使 <see cref="T:System.Windows.Data.CollectionView" /> 排序，分组和筛选的属性。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary>获取一个值，该值指示集合视图是否支持在真实时间中打开或关闭筛选数据。</summary>
      <returns>如果集合视图支持旋转的实时筛选开关，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary>获取一个值，该值指示集合视图是否支持在真实时间中打开或关闭分组数据。</summary>
      <returns>如果集合视图支持旋转的实时分组开关，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary>获取一个值，该值指示集合视图是否支持在真实时间中打开或关闭排序数据。</summary>
      <returns>如果集合视图支持旋转的实时排序开关，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary>获取或设置一个值，该值指示是否启用实时筛选数据。</summary>
      <returns>如果已启用实时筛选数据，则为 true；如果未启用活动筛选，则为 false；如果不能确定集合视图是否实现活动筛选，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary>获取或设置一个值，该值指示是否启用实时数据分组。</summary>
      <returns>如果启用实时分组数据，则为 true；如果未启用活动分组，则为 false；如果不能确定集合视图是否实现活动分组，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary>获取或设置一个值，该值指示是否启用实时排序。</summary>
      <returns>如果已启用实时排序数据，则为 true；如果未启用活动排序，则为 false；如果不能确定集合视图是否实现活动排序，则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary>获取在真实时间中参与筛选数据的属性的字符集合。</summary>
      <returns>指定参与真实时间中的筛选数据的属性的字符集合。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary>获取在真实时间中参与分组数据的属性的字符集合。</summary>
      <returns>指定参与真实时间中的分组数据的属性的字符集合。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary>获取在真实时间中参与排序数据的属性的字符集合。</summary>
      <returns>指定参与真实时间中的排序数据的属性的字符集合。</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>定义 <see cref="T:System.Windows.Data.CollectionView" /> 所实现的方法和属性，用于向集合提供编辑功能。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>将新项添加到集合中。</summary>
      <returns>添加到集合中的新项。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>获取一个值，该值指示是否可以将新项添加到集合中。</summary>
      <returns>如果可以将新项添加到集合中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>获取一个值，该值指示集合视图是否可以放弃挂起的更改并还原所编辑对象的原始值。</summary>
      <returns>如果集合视图可以放弃挂起的更改并还原所编辑对象的原始值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>结束编辑事务，并还原项的原始值（如有可能）。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>结束添加事务并放弃挂起的新项。</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>获取一个值，该值指示是否可以从集合中移除项。</summary>
      <returns>如果可以从集合中移除项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>结束编辑事务并保存挂起的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>结束添加事务并保存挂起的新项。</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>获取正在当前添加事务过程中添加的项。</summary>
      <returns>如果 <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> 为 true，则为要添加的项；否则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>获取集合中正在编辑的项。</summary>
      <returns>如果 <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> 为 true，则为集合中所编辑的项；否则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>开始指定项的编辑事务。</summary>
      <param name="item">要编辑的项。</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>获取一个值，该值指示是否正在执行添加事务。</summary>
      <returns>如果正在进行添加事务，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>获取一个值，该值指示是否正在执行编辑事务。</summary>
      <returns>如果正在执行编辑事务，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>获取或设置集合视图中新项占位符的位置。</summary>
      <returns>用于指定集合视图中新项占位符位置的枚举值之一。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>从集合中移除指定的项。</summary>
      <param name="item">要移除的项。</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>从集合中移除指定位置的项。</summary>
      <param name="index">要移除的项的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于集合视图中的项数。</exception>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>定义 <see cref="T:System.Windows.Data.CollectionView" /> 所实现的方法和属性，它们可用于指定添加特定类型的项。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>将指定的对象添加到集合。</summary>
      <returns>添加到集合中的对象。</returns>
      <param name="newItem">要添加到集合中的对象。</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>获取一个值，该值指示是否可以向集合中添加指定的对象。</summary>
      <returns>如果可以将指定的对象添加到集合中，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>定义一个提供对象属性相关信息的属性。</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>获取一个集合，该集合包含某集合中项的可用属性的相关信息。</summary>
      <returns>一个集合，该集合包含某集合中项的可用属性的相关信息。</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>包含有关属性的信息。</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.ItemPropertyInfo" /> 类的新实例。</summary>
      <param name="name">属性的名称。</param>
      <param name="type">属性的类型。</param>
      <param name="descriptor">其中包含有关属性的附加信息的对象。</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>获取包含有关属性的附加信息的对象。</summary>
      <returns>其中包含有关属性的附加信息的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>获取属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>获取属性的类型。</summary>
      <returns>属性的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>指定新项的占位符出现在集合中的何处。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>新项的占位符出现在集合的开头。新项位于集合开头新项占位符之后。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>新项的占位符出现在集合的结尾。 将新项添加到集合结尾新项占位符之前。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>集合不使用新项占位符。 根据基础集合确定所添加项的位置。通常将项添加到集合的结尾。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用“弱事件侦听器”模式附加 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>添加指定的事件处理程序，当指定的源为指定的属性引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件时进行调用。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</param>
      <param name="propertyName">要侦听其上的更改的 <paramref name="source" /> 上存在的属性的名称。 设置为 <see cref="F:System.String.Empty" /> 以指定“任何属性”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">多个方法与 <paramref name="handler" />相关联。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>将指定的侦听器添加到指定源上的侦听器列表中。</summary>
      <param name="source">带事件的对象。</param>
      <param name="listener">要作为侦听器添加的对象。</param>
      <param name="propertyName">要侦听其上的更改的 <paramref name="source" /> 上存在的属性的名称。 设置为 <see cref="F:System.String.Empty" /> 以指定“任何属性”。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary>返回包含 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件侦听器的新对象。</summary>
      <returns>包含 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>从提供的源的数据中移除不再处于活动状态的侦听器。</summary>
      <returns>如果已移除某些项，则为 true；否则为 false。</returns>
      <param name="source">要从中移除所有侦听器的源对象。</param>
      <param name="data">要清除的数据。 这应为 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</param>
      <param name="purgeAll">设置为 true 以停止侦听，并完全移除所有数据。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>从指定源中移除指定的事件处理程序。</summary>
      <param name="source">引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的源对象。</param>
      <param name="handler">委托处理 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</param>
      <param name="propertyName">要停止侦听其上的更改的 <paramref name="source" /> 上存在的属性的名称。 设置为 <see cref="F:System.String.Empty" /> 以指定“任何属性”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">多个方法与 <paramref name="handler" />相关联。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>将指定的侦听器从提供的源上的侦听器列表中移除。</summary>
      <param name="source">要从中移除侦听器的对象。</param>
      <param name="listener">要移除的侦听器。</param>
      <param name="propertyName">要停止侦听其上的更改的 <paramref name="source" /> 上存在的属性的名称。 设置为 <see cref="F:System.String.Empty" /> 以指定“任何属性”。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>开始侦听提供的源上的 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
      <param name="source">要在其上开始侦听 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 的对象。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>停止侦听提供的源上的 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
      <param name="source">要在其上停止侦听 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 的源对象。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>指定哪些属性应由类型描述符报告，尤其是 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> 方法。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> 类的新实例。</summary>
      <param name="filter">描述此属性筛选器的选项。</param>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>此成员支持 Microsoft .NET Framework 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>返回一个值，以指示当前 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.NET Framework 特性 是否与指定对象相等。</summary>
      <returns>如果指定的 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> 等于当前的 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />，则为 true；否则为 false。</returns>
      <param name="value">与此 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> 进行比较的对象。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>获取此 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 特性 的筛选选项。</summary>
      <returns>属性筛选选项。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>返回当前 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.NET Framework 特性的哈希代码。</summary>
      <returns>32 位带符号整数值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>返回一个值，以指示当前 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.NET Framework 特性 的属性筛选选项是否与所提供对象的属性筛选选项相匹配。</summary>
      <returns>如果匹配，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。 此对象应为 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>指定哪些属性应由类型描述符报告，尤其是 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> 方法。 此枚举用于指定 <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> 属性的值。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>返回所有属性。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>仅返回在对象的给定当前上下文中无效的属性。 请参见“备注”。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>不返回任何属性</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>仅返回当前设置了本地值的属性。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>仅返回未设置本地值或者未在外部表达式存储区（如绑定或延迟资源）中设置属性的属性。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>返回在当前范围内的对象上有效的任何属性。 请参见“备注”。</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>定义要用作集合的排序条件的方向和属性名。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.SortDescription" /> 结构的新实例。</summary>
      <param name="propertyName">作为列表的排序依据的属性 (Property) 名。</param>
      <param name="direction">排序顺序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 参数不能为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" /> 参数不能为空。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="direction" /> 参数未指定一个有效的值。</exception>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>获取或设置一个值，该值指示是按升序还是降序进行排序。</summary>
      <returns>指示是按升序还是降序进行排序的 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>比较 <see cref="T:System.ComponentModel.SortDescription" /> 的指定实例与当前实例的值是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 与 <see cref="T:System.ComponentModel.SortDescription" /> 的此实例具有相同值，则为 true。</returns>
      <param name="obj">要比较的 <see cref="T:System.ComponentModel.SortDescription" /> 实例。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>返回 <see cref="T:System.ComponentModel.SortDescription" /> 的此实例的哈希代码。</summary>
      <returns>
        <see cref="T:System.ComponentModel.SortDescription" /> 的此实例的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>获取一个值，该值指示此对象是否处于不可变状态。</summary>
      <returns>如果正在使用此对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>比较两个 <see cref="T:System.ComponentModel.SortDescription" /> 对象的值是否相等。</summary>
      <returns>如果两个对象相等，则为 true；否则为 false。</returns>
      <param name="sd1">要比较的第一个实例。</param>
      <param name="sd2">要比较的第二个实例。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>比较两个 <see cref="T:System.ComponentModel.SortDescription" /> 对象的值是否不相等。</summary>
      <returns>如果值不相等，则为 true；否则为 false。</returns>
      <param name="sd1">要比较的第一个实例。</param>
      <param name="sd2">要比较的第二个实例。</param>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>获取或设置要用作排序条件的属性 (Property) 名。</summary>
      <returns>默认值为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>表示 <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SortDescriptionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>在添加或移除项时发生。</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>获取 <see cref="T:System.ComponentModel.SortDescriptionCollection" /> 的不可更改的空实例。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>将一项插入集合中指定索引处。</summary>
      <param name="index">从零开始的索引，在此处插入了 <paramref name="item" />。</param>
      <param name="item">要插入的对象。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>移除集合中指定索引处的项。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">位于指定索引处的元素的新值。</param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>在添加或移除项时发生。</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>说明对特定对象进行跟踪的详细等级。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>跟踪所有附加信息。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>跟踪一些附加信息。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>跟踪中等数量的附加信息。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>不跟踪可用的附加信息。</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>提供专门针对于 Windows Presentation Foundation (WPF) 应用程序的调试跟踪支持。</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>获取动画跟踪源。</summary>
      <returns>动画跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>获取数据绑定跟踪源。</summary>
      <returns>数据绑定跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>获取依赖项属性跟踪源。</summary>
      <returns>依赖项属性跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>获取文档跟踪源。</summary>
      <returns>文档跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>获取 Freezable 跟踪源。</summary>
      <returns>Freezable 跟踪源。</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>获取指定元素的 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 附加属性的值。</summary>
      <returns>该元素的 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 属性值。</returns>
      <param name="element">从中读取属性值的元素。</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>获取 hwnd 宿主跟踪源。</summary>
      <returns>hwnd 宿主跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>获取标记跟踪源。</summary>
      <returns>标记跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>获取名称范围跟踪源。</summary>
      <returns>名称范围跟踪源。</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>通过强制重新读取 app.config 文件来刷新跟踪源。</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>获取资源字典跟踪源。</summary>
      <returns>资源字典跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>获取路由事件跟踪源。</summary>
      <returns>路由事件跟踪源。</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>将 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLeve" />l 附加属性 的值设置为指定元素。</summary>
      <param name="element">附加属性所写入的元素。</param>
      <param name="traceLevel">所需的 <see cref="T:System.Diagnostics.PresentationTraceLevel" /> 值。</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>获取 shell 跟踪源。</summary>
      <returns>shell 跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.TraceLevel">
      <summary>获取或设置一个值，该值指定对特定对象进行跟踪的详细等级。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.PresentationTraceLevel" /> 值，该值指示对特定对象进行跟踪的详细等级。</returns>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>标识 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />附加属性。</summary>
    </member>
    <member name="T:System.IO.FileFormatException">
      <summary>应该符合一定文件格式规范的输入文件或数据流的格式不正确时引发的异常。</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor">
      <summary>创建 <see cref="T:System.IO.FileFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据创建 <see cref="T:System.IO.FileFormatException" /> 类的一个新实例，并对其进行初始化。 在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String)">
      <summary>使用指定的错误消息创建 <see cref="T:System.IO.FileFormatException" /> 类的一个新实例。</summary>
      <param name="message">一个表示错误消息的 <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和异常类型创建 <see cref="T:System.IO.FileFormatException" /> 类的一个新实例。</summary>
      <param name="message">一个表示错误消息的 <see cref="T:System.String" /> 值。</param>
      <param name="innerException">
        <see cref="P:System.Exception.InnerException" /> 属性的值，表示当前异常的原因。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri)">
      <summary>使用源 URI 值创建 <see cref="T:System.IO.FileFormatException" /> 类的一个新实例。</summary>
      <param name="sourceUri">导致此错误的文件的 <see cref="T:System.Uri" /> 值。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.Exception)">
      <summary>使用源 URI 值和异常类型创建 <see cref="T:System.IO.FileFormatException" /> 类的一个新实例。</summary>
      <param name="sourceUri">导致此错误的文件的 <see cref="T:System.Uri" /> 值。</param>
      <param name="innerException">
        <see cref="P:System.Exception.InnerException" /> 属性的值，表示当前异常的原因。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String)">
      <summary>使用源 URI 值和指定的错误消息创建 <see cref="T:System.IO.FileFormatException" /> 类的一个新实例。</summary>
      <param name="sourceUri">导致此错误的文件的 <see cref="T:System.Uri" /> 值。</param>
      <param name="message">一个表示错误消息的 <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String,System.Exception)">
      <summary>使用源 URI 值、指定的错误消息和异常类型创建 <see cref="T:System.IO.FileFormatException" /> 类的一个新实例。</summary>
      <param name="sourceUri">导致此错误的文件的 <see cref="T:System.Uri" /> 值。</param>
      <param name="message">一个表示错误消息的 <see cref="T:System.String" /> 值。</param>
      <param name="innerException">
        <see cref="P:System.Exception.InnerException" /> 属性的值，表示当前异常的原因。</param>
    </member>
    <member name="M:System.IO.FileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有文件名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="P:System.IO.FileFormatException.SourceUri">
      <summary>获取导致 <see cref="T:System.IO.FileFormatException" /> 的文件的名称。</summary>
      <returns>一个 <see cref="T:System.Uri" />，表示导致此异常的文件的名称。</returns>
    </member>
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>指定在签名时使用的 X.509 证书的存储位置。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>证书嵌入自己的 <see cref="T:System.IO.Packaging.PackagePart" /> 中。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>证书嵌入为要添加的签名创建的 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> 中。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>证书没有嵌入包中。</summary>
    </member>
    <member name="T:System.IO.Packaging.CompressionOption">
      <summary>为 <see cref="T:System.IO.Packaging.PackagePart" /> 中存储的内容指定压缩级别。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Fast">
      <summary>已针对性能优化了压缩。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Maximum">
      <summary>已针对大小优化了压缩。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Normal">
      <summary>优化压缩以在大小和性能之间保持平衡。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.NotCompressed">
      <summary>已关闭压缩。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.SuperFast">
      <summary>优化压缩以获得高性能。</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>表示包含加密包的 OLE 复合文件。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>关闭加密包和存放它的 OLE 复合文件。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>在指定的流上创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</summary>
      <returns>新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <param name="envelopeStream">要在其上创建文件的流。</param>
      <param name="publishLicense">嵌入复合文件的发布许可证。</param>
      <param name="cryptoProvider">确定允许当前用户对加密的内容执行哪些操作的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> 不提供读/写访问权限。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />，然后为其提供指定的文件名。</summary>
      <returns>新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <param name="envelopeFileName">OLE 复合文件的名称。</param>
      <param name="publishLicense">嵌入复合文件的发布许可证。</param>
      <param name="cryptoProvider">确定允许当前用户对加密的内容执行哪些操作的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>创建并返回将指定的未加密的包用作其内容的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />（在指定的流上）。</summary>
      <returns>新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <param name="envelopeStream">要在其上创建文件的流。</param>
      <param name="packageStream">表示现有未加密的包的流。</param>
      <param name="publishLicense">嵌入复合文件的发布许可证。</param>
      <param name="cryptoProvider">确定允许当前用户对加密的内容执行哪些操作的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> 或 <paramref name="packageStream" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> 不提供读/写访问权限。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>创建并返回将指定的未加密的包用作其内容的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />，然后为其提供指定的文件名。</summary>
      <returns>新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <param name="envelopeFileName">OLE 复合文件的名称。</param>
      <param name="packageStream">表示现有未加密的包的流。</param>
      <param name="publishLicense">嵌入复合文件的发布许可证。</param>
      <param name="cryptoProvider">确定允许当前用户对加密的内容执行哪些操作的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> 或 <paramref name="packageStream" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>释放由 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>获取一个值，该值指示文件是以读访问权限、写访问权限，还是以读写访问权限打开的。</summary>
      <returns>用于打开文件的 <see cref="T:System.IO.FileAccess" /> 值。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>为 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 及其包内容刷新流。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>获取 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 内部的加密包。</summary>
      <returns>封包中的 <see cref="T:System.IO.Packaging.Package" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>获取一个值，该值指示指定的流是否为具有加密包流的 OLE 复合文件。</summary>
      <returns>如果指定的流是具有加密包流的 OLE 复合文件，则为 true；否则，为 false。</returns>
      <param name="stream">所测试的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>获取一个值，该值指示指定的文件是否为具有加密包流的 OLE 复合文件。</summary>
      <returns>如果指定的文件是具有加密包流的 OLE 复合文件，则为 true；否则，为 false。</returns>
      <param name="fileName">所测试的文件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>打开指定流中的加密包。</summary>
      <returns>打开的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <param name="envelopeStream">包含加密包的流。</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>以只读和非共享方式打开指定文件中的加密包。</summary>
      <returns>打开的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <param name="envelopeFileName">包含加密包的文件。</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>以非共享方式使用指定的访问权限打开指定文件中的加密包。</summary>
      <returns>打开的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <param name="envelopeFileName">包含加密包的文件。</param>
      <param name="access">访问类型。</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>打开指定文件中的加密包，并为其提供指定的访问权限和共享属性。</summary>
      <returns>打开的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <param name="envelopeFileName">包含加密包的文件。</param>
      <param name="access">访问类型。</param>
      <param name="sharing">共享的类型。</param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>获取权限管理文档的核心包属性（如，Title 和 Subject）。</summary>
      <returns>包的 <see cref="T:System.IO.Packaging.PackageProperties" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>获取存储在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 中的权限管理信息；具体而言，即存储在包含权限管理保护包的 OLE 复合文件中的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 和 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <returns>包的 <see cref="T:System.IO.Packaging.RightsManagementInformation" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>获取一个对象，该对象提供对加密包外部的复合文件流的访问。</summary>
      <returns>一个 <see cref="T:System.IO.Packaging.StorageInfo" />，表示加密包外部的 OLE 复合文件中的流。</returns>
    </member>
    <member name="T:System.IO.Packaging.EncryptionOption">
      <summary>为 <see cref="T:System.IO.Packaging.Package" /> 中的部分指定加密选项。</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.None">
      <summary>无加密。</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.RightsManagement">
      <summary>通过权限管理支持的加密。</summary>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>表示处理当 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> 检测到无效的签名时所引发的 <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> 的方法。</summary>
      <param name="sender">无效的 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.IO.Packaging.Package">
      <summary>表示可以存储多个数据对象的容器。</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)">
      <summary>初始化使用给定的 <see cref="T:System.IO.FileAccess" /> 的 <see cref="T:System.IO.Packaging.Package" /> 类的新实例。</summary>
      <param name="openFileAccess">包的文件 IO 权限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="openFileAccess" /> 的值无效。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)">
      <summary>初始化使用给定 <see cref="T:System.IO.FileAccess" /> 和流选项的 <see cref="T:System.IO.Packaging.Package" /> 类的新实例。</summary>
      <param name="openFileAccess">包的文件 IO 权限。</param>
      <param name="streaming">如果打开包以进行流式处理，则为 true，否则为 false。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="openFileAccess" /> 的值无效。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Close">
      <summary>保存并关闭包和所有基础部件流。</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)">
      <summary>使用给定的 URI 和内容类型创建新的未压缩部件。</summary>
      <returns>新创建的部件。</returns>
      <param name="partUri">新部件的 统一资源标识符 (URI)。</param>
      <param name="contentType">数据流的内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> 或 <paramref name="contentType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" />URI。</exception>
      <exception cref="T:System.InvalidOperationException">包中已存在具有指定的 <paramref name="partUri" /> 的部件。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包为只读的（无法添加新部件）。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>使用给定的 URI、内容类型和压缩选项创建新部件。</summary>
      <returns>新创建的部件。</returns>
      <param name="partUri">新部件的 URI。</param>
      <param name="contentType">数据流的内容类型。</param>
      <param name="compressionOption">数据流的压缩选项、<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> 或 <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> 压缩。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> 或 <paramref name="contentType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" />统一资源标识符 (URI)。</exception>
      <exception cref="T:System.InvalidOperationException">包中已存在具有指定的 <paramref name="partUri" /> 的部件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="compressionOption" /> 值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包为只读的（无法添加新部件）。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>在派生类中重写时，会在包中创建一个新部件。</summary>
      <returns>创建的部件。</returns>
      <param name="partUri">正在创建的部件的 统一资源标识符 (URI)。</param>
      <param name="contentType">数据流的内容类型。</param>
      <param name="compressionOption">数据流的压缩选项。</param>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>使用给定的 URI、目标模式和关系类型创建与部件的包级别关系。</summary>
      <returns>与指定部件的包级别关系。</returns>
      <param name="targetUri">目标部件的 统一资源标识符 (URI)。</param>
      <param name="targetMode">指示目标部件对包来说是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 还是 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
      <param name="relationshipType">唯一定义关系的角色的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetUri" /> 部件为 <see cref="T:System.IO.Packaging.PackageRelationship" />，或 <paramref name="targetMode" /> 为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，而 <paramref name="targetUri" /> 为绝对 URI。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetMode" /> 的值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包为只读。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>使用给定的 URI、目标模式、关系类型和 标识符 (ID) 创建与部件的包级别关系。</summary>
      <returns>与指定部件的包级别关系。</returns>
      <param name="targetUri">目标部件的 统一资源标识符 (URI)。</param>
      <param name="targetMode">指示目标部件对包来说是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 还是 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
      <param name="relationshipType">唯一定义关系的角色的 URI。</param>
      <param name="id">唯一 XML 标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetUri" /> 部件为 <see cref="T:System.IO.Packaging.PackageRelationship" />，或 <paramref name="targetMode" /> 为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，而 <paramref name="targetUri" /> 为绝对 URI。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetMode" /> 的值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包为只读。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> 不是有效的 XML 标识符；或者包中已存在具有指定的 <paramref name="id" /> 的部件。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePart(System.Uri)">
      <summary>使用包中给定的 URI 删除部件。</summary>
      <param name="partUri">要删除的部件的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" />URI。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包为只读。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)">
      <summary>在派生类中重写时，会使用给定的 URI 删除部件。</summary>
      <param name="partUri">要删除的 <see cref="T:System.IO.Packaging.PackagePart" /> 的 <see cref="P:System.IO.Packaging.PackagePart.Uri" />。</param>
    </member>
    <member name="M:System.IO.Packaging.Package.DeleteRelationship(System.String)">
      <summary>删除包级别关系。</summary>
      <param name="id">要删除的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包为只读。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> 不是有效的 XML 标识符。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Dispose(System.Boolean)">
      <summary>刷新并保存所有部件和关系的内容，关闭包，并释放所有资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.Packaging.Package.FileOpenAccess">
      <summary>获取包的文件访问设置。</summary>
      <returns>
        <see cref="T:System.IO.FileAccess" /> 值之一：<see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 或 <see cref="F:System.IO.FileAccess.ReadWrite" />。</returns>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Flush">
      <summary>保存包中包含的所有部件和关系的内容。</summary>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包为只读的，无法进行修改。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.FlushCore">
      <summary>在派生类中重写时，会将所有部件和关系的内容保存到派生类存储区中。</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPart(System.Uri)">
      <summary>返回具有给定 URI 的部件。</summary>
      <returns>具有指定 <paramref name="partUri" /> 的部件。</returns>
      <param name="partUri">要返回的部件的 统一资源标识符 (URI)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" />统一资源标识符 (URI)。</exception>
      <exception cref="T:System.InvalidOperationException">包中不存在具有指定 <paramref name="partUri" /> 的部件。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartCore(System.Uri)">
      <summary>在派生类中重写时，会返回由给定 URI 寻址的部件。</summary>
      <returns>请求的部件；或者，如果包中不存在具有指定 <paramref name="partUri" /> 的部件，则为 null。</returns>
      <param name="partUri">要检索的部件的 统一资源标识符 (URI)。</param>
    </member>
    <member name="M:System.IO.Packaging.Package.GetParts">
      <summary>返回包中所有部件的集合。</summary>
      <returns>包中包含的所有 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的集合。</returns>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartsCore">
      <summary>在派生类中重写时，会返回包中所有部件的数组。</summary>
      <returns>包中包含的所有部件的数组。</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationship(System.String)">
      <summary>返回具有给定标识符的包级别关系。</summary>
      <returns>具有指定 <paramref name="id" /> 的包级别关系。</returns>
      <param name="id">要返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> 不是有效的 XML 标识符。</exception>
      <exception cref="T:System.InvalidOperationException">包中不存在具有指定 <paramref name="id" /> 的关系。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationships">
      <summary>返回所有包级别关系的集合。</summary>
      <returns>包中包含的所有包级别关系的集合。</returns>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)">
      <summary>返回与给定的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 匹配的所有包级别关系的集合。</summary>
      <returns>与指定的 <paramref name="relationshipType" /> 匹配的包级别关系的集合。</returns>
      <param name="relationshipType">在集合中匹配和返回的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> 是空字符串。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream)">
      <summary>在给定的 IO 流上打开包。</summary>
      <returns>打开的包。</returns>
      <param name="stream">在其上打开包的 IO 流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)">
      <summary>使用给定的 IO 流和文件模式打开包。</summary>
      <returns>打开的包。</returns>
      <param name="stream">在其上打开包的 IO 流。</param>
      <param name="packageMode">用于打开包的文件模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> 值无效。</exception>
      <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
      <summary>使用给定的 IO 流、文件模式和文件访问设置打开包。</summary>
      <returns>打开的包。</returns>
      <param name="stream">在其上打开包的 IO 流。</param>
      <param name="packageMode">用于打开包的文件模式。</param>
      <param name="packageAccess">用于打开包的文件访问。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 的值无效。</exception>
      <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String)">
      <summary>打开位于给定路径和文件名的包。</summary>
      <returns>打开的包。</returns>
      <param name="path">包的路径和文件名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)">
      <summary>使用给定的文件模式打开位于给定路径的包。</summary>
      <returns>打开的包。</returns>
      <param name="path">包的路径和文件名。</param>
      <param name="packageMode">用于打开包的文件模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> 的值无效。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>使用给定的文件模式和文件访问设置打开位于给定路径的包。</summary>
      <returns>打开的包。</returns>
      <param name="path">包的路径和文件名。</param>
      <param name="packageMode">用于打开包的文件模式。</param>
      <param name="packageAccess">用于打开包的文件访问。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 的值无效。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>使用给定的文件模式、文件访问和文件共享设置打开位于给定路径的包。</summary>
      <returns>打开的包。</returns>
      <param name="path">包的路径和文件名。</param>
      <param name="packageMode">用于打开包的文件模式。</param>
      <param name="packageAccess">用于打开包的文件访问。</param>
      <param name="packageShare">用于打开包的文件共享模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" />、<paramref name="packageAccess" /> 或 <paramref name="packageShare" /> 的值无效。</exception>
    </member>
    <member name="P:System.IO.Packaging.Package.PackageProperties">
      <summary>获取包的核心属性。</summary>
      <returns>包的核心属性。</returns>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.PartExists(System.Uri)">
      <summary>指示具有给定 URI 的部件是否在包中。</summary>
      <returns>如果具有指定的 <paramref name="partUri" /> 的部件在包中，则为 true；否则为 false。</returns>
      <param name="partUri">要检查的部件的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" />统一资源标识符 (URI)。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的（无法读取信息）。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.RelationshipExists(System.String)">
      <summary>指示具有给定 ID 的包级别关系是否包含在包中。</summary>
      <returns>如果具有指定的 <paramref name="id" /> 的包级别关系在包中，则为 true；否则为 false。</returns>
      <param name="id">要检查的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> 不是有效的 XML 标识符。</exception>
      <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.System#IDisposable#Dispose">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不是为应用程序使用而设计的。请改用类型安全的 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 方法。</summary>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>表示一个数字签名，该数字签名应用到一组包部件和关系中。</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>获取 X.509 证书嵌入选项。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 值之一，指定数字签名的选项。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>返回应用于给定部件的 <see cref="T:System.Security.Cryptography.Xml.Transform" /> 操作的排序列表。</summary>
      <returns>表示应用于具有给定 <paramref name="partName" /> URI 的部件的规范 XML 转换的 URI 字符串（如 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> 或 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />）排序列表。</returns>
      <param name="partName">为其返回转换列表的 <see cref="T:System.IO.Packaging.PackagePart" /> 的 <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>获取或设置 XML 数字签名。</summary>
      <returns>XML 数字签名。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>获取包含签名的 <see cref="T:System.IO.Packaging.PackagePart" />。</summary>
      <returns>包含签名的包部件。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>获取标识签名类型的 URI 字符串。</summary>
      <returns>标识签名类型的 URI 字符串。 默认值为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>获取 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 的加密哈希值。</summary>
      <returns>包含 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 的加密哈希值的字节数组。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>获取已使用相关签名进行签名的所有 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的集合。</summary>
      <returns>包含已使用相关签名进行签名的所有包部件的集合。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>获取已使用相关签名进行签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的列表。</summary>
      <returns>已使用相关签名进行签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的列表。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>获取签名者的 X.509 证书。</summary>
      <returns>签名者的数字证书；或者，如果证书未存储在 <see cref="T:System.IO.Packaging.Package" /> 中，则为 null。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>获取创建签名的日期和时间。</summary>
      <returns>创建签名的日期和时间。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>获取由 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 属性返回的日期和时间的格式。</summary>
      <returns>由 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 属性返回的日期和时间的格式。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>针对 X.509 证书验证文档数字签名。</summary>
      <returns>如果验证成功，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />；否则为标识问题的 <see cref="T:System.IO.Packaging.VerifyResult" /> 值之一。</returns>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>根据给定的 X.509 证书验证数字签名。</summary>
      <returns>如果验证成功，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />；否则为标识问题的 <see cref="T:System.IO.Packaging.VerifyResult" /> 值之一。</returns>
      <param name="signingCertificate">要根据其验证数字签名的签名者的 X.509 证书。</param>
      <exception cref="T:System.InvalidOperationException">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>提供一个实用工具类，用来在 <see cref="T:System.IO.Packaging.Package" /> 中创建和验证数字签名。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>使用指定的 <see cref="T:System.IO.Packaging.Package" /> 初始化 <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> 类的新实例以供使用。</summary>
      <param name="package">与此签名管理器关联的包。</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>获取或设置由 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> 方法使用的 X.509 证书嵌入选项以对包部件进行数字签名。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 值之一。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>使用用户选择的 X.509 证书来副署包中的所有签名。</summary>
      <returns>作为副署添加的签名；或者，如果无法找到证书或用户已取消证书选择对话框，则为 null。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>使用指定的 X.509 证书来副署包中的所有签名。</summary>
      <returns>作为副署添加的签名。</returns>
      <param name="certificate">要作为副署签名添加的 X.509 证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为null</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>使用给定的 X.509 证书来副署签名列表。</summary>
      <returns>用于副署每个 <paramref name="signatures" /> 的数字签名。</returns>
      <param name="certificate">用于副署每个指定 <paramref name="signatures" /> X.509 证书。</param>
      <param name="signatures">要副署的签名列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 或 <paramref name="signatures" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">该包不包含任何已签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象。</exception>
      <exception cref="T:System.ArgumentException">该包不包含任何 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 部件。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>获取 URI 字符串，该字符串可标识用于创建和验证签名的默认哈希算法。</summary>
      <returns>一个 URI 字符串，标识用于创建和验证签名的默认哈希算法。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>返回给定签名 统一资源标识符 (URI) 的数字签名。</summary>
      <returns>指定 <paramref name="signatureUri" /> 的数字签名，或者，如果找不到给定 <paramref name="signatureUri" /> 的签名，则为 null。</returns>
      <param name="signatureUri">要返回的数字签名的 URI。</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>获取或设置用于创建和验证签名的 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 实例的 URI 标识符。</summary>
      <returns>用于创建和验证签名的 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 实例的 <see cref="T:System.Security.Cryptography.Xml.SignedXml" />URI 标识符。</returns>
      <exception cref="T:System.ArgumentNullException">要设置的 URI 的字符串为 null。</exception>
      <exception cref="T:System.ArgumentException">要设置的 URI 的字符串为空。</exception>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>当 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> 遇到无效的签名时发生。</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>获取一个值，该值指示包是否包含任何签名。</summary>
      <returns>如果包中包含签名，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>获取或设置父窗口的句柄，以显示证书选择对话框。</summary>
      <returns>用于显示证书选择对话框的父窗口的句柄。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>从包中移除所有数字签名。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>使用给定签名 统一资源标识符 (URI) 移除数字签名。</summary>
      <param name="signatureUri">要移除的 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 的 URI。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>提示用户提供 X.509 证书（然后会将其用于对指定的包部件列表进行数字签名）。</summary>
      <returns>用于对 <paramref name="parts" /> 列表进行签名的数字签名。</returns>
      <param name="parts">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的 统一资源标识符 (URI) 列表。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>使用给定的 X.509 证书对包部件列表进行签名。</summary>
      <returns>用于对给定 <paramref name="parts" /> 列表进行签名的数字签名；或者，如果找不到证书或用户在证书选择对话框中单击了“取消”，则为 null。</returns>
      <param name="parts">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的 统一资源标识符 (URI) 列表。</param>
      <param name="certificate">用于对每个指定 <paramref name="parts" /> 进行数字签名的 X.509 证书。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>使用给定的 X.509 证书对包部件列表和包关系进行签名。</summary>
      <returns>用于对在 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。</returns>
      <param name="parts">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的 统一资源标识符 (URI) 列表。</param>
      <param name="certificate">用于对每个指定部件和关系进行数字签名的 X.509 证书。</param>
      <param name="relationshipSelectors">要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象列表。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 均不指定任何要签名的对象。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>使用给定的 X.509 证书和标识符 (ID) 对包部件列表和包关系进行签名。</summary>
      <returns>用于对在 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。</returns>
      <param name="parts">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的 统一资源标识符 (URI) 列表。</param>
      <param name="certificate">用于对每个指定部件和关系进行数字签名的 X.509 证书。</param>
      <param name="relationshipSelectors">要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象列表。</param>
      <param name="signatureId">与签名关联的标识字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 均不指定任何要签名的元素。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>使用指定的 X.509 证书和签名标识符 (ID) 对包部件列表、包关系或自定义对象进行签名。</summary>
      <returns>用于对在 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。</returns>
      <param name="parts">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的 统一资源标识符 (URI) 列表。</param>
      <param name="certificate">用于对每个指定部件和关系进行数字签名的 X.509 证书。</param>
      <param name="relationshipSelectors">要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象列表。</param>
      <param name="signatureId">与签名关联的标识字符串。</param>
      <param name="signatureObjects">要签名的自定义数据对象列表。</param>
      <param name="objectReferences">对要签名的自定义对象引用的列表。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" />、<paramref name="relationshipSelectors" />、<paramref name="signatureObjects" /> 或 <paramref name="objectReferences" /> 均不指定任何要签名的元素。</exception>
      <exception cref="T:System.InvalidOperationException">被签名的部件的 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 引用一个空的、null 或未定义的 <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="signatureId" /> 不为 null，且不是有效的 XML 架构 ID（例如，以前导数字开头）。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>获取签名源部件的 统一资源标识符 (URI)。</summary>
      <returns>签名源部件的 URI。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>获取默认签名源关系的类型。</summary>
      <returns>默认签名源关系的类型。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>获取包中包含的所有签名的集合。</summary>
      <returns>所有 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 对象的集合。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>获取或设置用于创建签名 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 的日期/时间格式。</summary>
      <returns>用于创建签名 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 的日期/时间格式。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>获取一个字典，其中包含每个定义的 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 及其关联 XML<see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 标识符。</summary>
      <returns>其中包含每个定义的 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 及其关联 XML<see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 标识符的一个字典。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>验证给定的 X.509 证书。</summary>
      <returns>如果证书验证成功，则为 <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" />（值 0）；否则，为错误标志的按位枚举。</returns>
      <param name="certificate">要验证的 X.509 证书。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>验证包内所有签名部件上的签名。</summary>
      <returns>如果成功验证了所有签名，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />（值 0）；否则，为标识错误的枚举。</returns>
      <param name="exitOnFailure">如果首次失败时退出，则为 true；如果要继续检查所有签名，则为 false。</param>
    </member>
    <member name="T:System.IO.Packaging.PackagePart">
      <summary>为存储在 <see cref="T:System.IO.Packaging.Package" /> 中的部分提供基类。该类为抽象类。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)">
      <summary>使用指定的父 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 和部分 URI 初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类的新实例。</summary>
      <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
      <param name="partUri">此部分的 URI，相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> 或 <paramref name="partUri" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)">
      <summary>使用指定的父 <see cref="P:System.IO.Packaging.PackagePart.Package" />、部分 URI 和 MIME 内容类型初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类的新实例。</summary>
      <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
      <param name="partUri">此部分的 URI，相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
      <param name="contentType">部分数据流的 MIME 内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> 或 <paramref name="partUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" />URI。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>使用指定的父 <see cref="P:System.IO.Packaging.PackagePart.Package" />、部分 URI、MIME 内容类型和 <see cref="T:System.IO.Packaging.CompressionOption" /> 初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类的新实例。</summary>
      <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
      <param name="partUri">此部分的 URI，相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
      <param name="contentType">部分的数据流的 MIME 内容类型。</param>
      <param name="compressionOption">部分数据流的压缩选项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> 或 <paramref name="partUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" />URI。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="compressionOption" /> 值无效。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.CompressionOption">
      <summary>获取部分内容流的压缩选项。</summary>
      <returns>部分内容流的压缩选项。</returns>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.ContentType">
      <summary>获取内容流的 MIME 类型。</summary>
      <returns>部分的内容数据流的 MIME 类型。</returns>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。 - 或 - 派生类 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> 方法返回的字符串为空。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>创建此 <see cref="T:System.IO.Packaging.PackagePart" /> 与指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</summary>
      <returns>此 <see cref="T:System.IO.Packaging.PackagePart" /> 与目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</returns>
      <param name="targetUri">目标部分的 URI。</param>
      <param name="targetMode">枚举值之一。 例如，如果目标部分在 <see cref="T:System.IO.Packaging.Package" /> 的内部，则为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />；如果目标是 <see cref="T:System.IO.Packaging.Package" /> 外部的资源，则为 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
      <param name="relationshipType">关系的角色。</param>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetMode" /> 参数不是有效的 <see cref="T:System.IO.Packaging.TargetMode" /> 枚举值。</exception>
      <exception cref="T:System.ArgumentException">由 <paramref name="targetUri" /> 标识的部分是关系（关系的目标不能是另一个关系）。 - 或 - 将 <paramref name="targetMode" /> 指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，但 <paramref name="targetUri" /> 是绝对外部 URI。</exception>
      <exception cref="T:System.IO.IOException">包是只读的（无法添加新关系）。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>创建此 <see cref="T:System.IO.Packaging.PackagePart" /> 与指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</summary>
      <returns>此 <see cref="T:System.IO.Packaging.PackagePart" /> 与目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</returns>
      <param name="targetUri">目标部分的 URI。</param>
      <param name="targetMode">枚举值之一。 例如，如果目标部分在 <see cref="T:System.IO.Packaging.Package" /> 的内部，则为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />；如果目标是 <see cref="T:System.IO.Packaging.Package" /> 外部的资源，则为 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
      <param name="relationshipType">关系的角色。</param>
      <param name="id">关系的唯一 ID。</param>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetMode" /> 参数不是有效的 <see cref="T:System.IO.Packaging.TargetMode" /> 枚举值。</exception>
      <exception cref="T:System.ArgumentException">由 <paramref name="targetUri" /> 标识的部分是关系（关系的目标不能是另一个关系）。 - 或 - 将 <paramref name="targetMode" /> 指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，但 <paramref name="targetUri" /> 是绝对外部 URI。</exception>
      <exception cref="T:System.IO.IOException">包是只读的（无法添加新关系）。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> 不是有效的 XML 标识符。 - 或 - 已存在具有指定 <paramref name="id" /> 的部分。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)">
      <summary>删除指定的部分级 <see cref="T:System.IO.Packaging.PackageRelationship" />。</summary>
      <param name="id">要删除的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">包是只读的（无法删除关系）。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> 不是有效的 XML 标识符。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetContentTypeCore">
      <summary>当在派生类中重写时，返回部分内容的 MIME 类型。</summary>
      <returns>部分内容的 MIME 类型。</returns>
      <exception cref="T:System.NotSupportedException">派生类不为 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> 方法提供所需的重写实现。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)">
      <summary>返回具有指定 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的关系。</summary>
      <returns>与指定 <paramref name="id" /> 相匹配的关系。</returns>
      <param name="id">要返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> 不是有效的 XML 标识符。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> 是空字符串。</exception>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。 - 或 - 包中不存在具有指定 <paramref name="id" /> 的关系。</exception>
      <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationships">
      <summary>返回此部分拥有的所有关系的集合。</summary>
      <returns>此部分拥有的所有关系的集合。</returns>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)">
      <summary>返回与指定 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 相匹配的关系的集合。</summary>
      <returns>与指定 <paramref name="relationshipType" /> 相匹配的关系的集合。</returns>
      <param name="relationshipType">要在集合中查找并返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> 是空字符串。</exception>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream">
      <summary>返回部分内容数据流。</summary>
      <returns>此部分的内容数据流。</returns>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)">
      <summary>返回在指定 I/O <see cref="T:System.IO.FileMode" /> 中打开的内容流。</summary>
      <returns>此部分的内容流。</returns>
      <param name="mode">打开内容流时采用的 I/O 模式。</param>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 参数不是有效的 <see cref="T:System.IO.FileMode" /> 枚举值。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> 参数与包和部分流不兼容。 - 或 - 派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>返回使用指定 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 打开的部分内容流。</summary>
      <returns>此部分的内容流。</returns>
      <param name="mode">打开内容流时采用的 I/O 模式。</param>
      <param name="access">打开内容流时使用的访问权限。</param>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 参数不是有效的 <see cref="T:System.IO.FileMode" /> 枚举值。 - 或 - <paramref name="access" /> 参数不是有效的 <see cref="T:System.IO.FileAccess" /> 枚举值。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> 或 <paramref name="access" /> 与包和部分流不兼容。 - 或 - <paramref name="access" /> 参数指定为 <see cref="F:System.IO.FileAccess.Read" />，但 <paramref name="mode" /> 参数需要写访问权。（<see cref="F:System.IO.FileMode.Create" />、<see cref="F:System.IO.FileMode.CreateNew" />、<see cref="F:System.IO.FileMode.Truncate" /> 和 <see cref="F:System.IO.FileMode.Append" /> 的 <see cref="T:System.IO.FileMode" /> 值需要 <see cref="F:System.IO.FileAccess.Write" /> 或 <see cref="F:System.IO.FileAccess.ReadWrite" /> 访问权限。） - 或 - 派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)">
      <summary>当在派生类中重写时，返回使用指定的 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 打开的部分内容流。</summary>
      <returns>此部分的内容数据流。</returns>
      <param name="mode">打开内容流时采用的 I/O 模式。</param>
      <param name="access">打开内容流时使用的访问权限。</param>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Package">
      <summary>获取此部分的父 <see cref="T:System.IO.Packaging.Package" />。</summary>
      <returns>此部分的父包。</returns>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)">
      <summary>返回一个值，指示此部分是否拥有具有指定 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的关系。</summary>
      <returns>如果此部分拥有具有指定 <paramref name="id" /> 的关系，则为 true；否则为 false。</returns>
      <param name="id">要检查的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> 不是有效的 XML 标识符。</exception>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Uri">
      <summary>获取部分的 URI。</summary>
      <returns>部分的相对于包根的 URI。</returns>
      <exception cref="T:System.InvalidOperationException">已删除此部分。 - 或 - <see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
    </member>
    <member name="T:System.IO.Packaging.PackagePartCollection">
      <summary>表示 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的集合。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.GetEnumerator">
      <summary>返回用于循环访问集合中的部件一个枚举器。</summary>
      <returns>用于循环访问集合中的 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的枚举器。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageProperties">
      <summary>表示 <see cref="T:System.IO.Packaging.Package" /> 的核心属性。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.#ctor">
      <summary>初始化 <see cref="T:System.IO.Packaging.PackageProperties" /> 类的新实例。</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Category">
      <summary>当在派生类中重写时，获取或设置 <see cref="T:System.IO.Packaging.Package" /> 的类别。</summary>
      <returns>包含在 <see cref="T:System.IO.Packaging.Package" /> 中的内容的类别。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentStatus">
      <summary>在派生类中重写时，获取或设置一个值，该值表示 <see cref="T:System.IO.Packaging.Package" /> 的状态。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> 内容的状态。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentType">
      <summary>在派生类中重写时，获取或设置一个值，该值表示包含在 <see cref="T:System.IO.Packaging.Package" /> 中的内容的类型。</summary>
      <returns>包含在 <see cref="T:System.IO.Packaging.Package" /> 中的内容的类型。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Created">
      <summary>在派生类中重写时，获取或设置 <see cref="T:System.IO.Packaging.Package" /> 的创建日期和时间。</summary>
      <returns>最初创建 <see cref="T:System.IO.Packaging.Package" /> 的日期和时间。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Creator">
      <summary>在派生类中重写时，获取或设置一个值，该值标识创建了 <see cref="T:System.IO.Packaging.Package" /> 及其内容的个体或实体。</summary>
      <returns>创建了 <see cref="T:System.IO.Packaging.Package" /> 及其内容的个体或实体。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Description">
      <summary>在派生类中重写时，获取或设置包含在 <see cref="T:System.IO.Packaging.Package" /> 中的内容的说明。</summary>
      <returns>包含在 <see cref="T:System.IO.Packaging.Package" /> 中的内容的说明。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose">
      <summary>释放由 <see cref="T:System.IO.Packaging.PackageProperties" /> 实例使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Packaging.PackageProperties" /> 实例使用的非托管资源，并选择释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Identifier">
      <summary>在派生类中重写时，获取或设置一个值，该值明确标识 <see cref="T:System.IO.Packaging.Package" /> 及其内容。</summary>
      <returns>明确标识 <see cref="T:System.IO.Packaging.Package" /> 及其内容的值。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Keywords">
      <summary>在派生类中重写时，获取或设置一个值，该值定义界定的关键字集来支持搜索和索引 <see cref="T:System.IO.Packaging.Package" /> 及其内容。</summary>
      <returns>支持搜索和索引 <see cref="T:System.IO.Packaging.Package" /> 及其内容的界定关键字集。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Language">
      <summary>在派生类中重写时，获取或设置一个值，该值标识 <see cref="T:System.IO.Packaging.Package" /> 内容的语言。</summary>
      <returns>标识 <see cref="T:System.IO.Packaging.Package" /> 内容语言的值。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastModifiedBy">
      <summary>在派生类中重写时，获取或设置一个值，该值标识上次修改 <see cref="T:System.IO.Packaging.Package" /> 内容的用户。</summary>
      <returns>上次修改 <see cref="T:System.IO.Packaging.Package" /> 内容的用户。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastPrinted">
      <summary>在派生类中重写时，获取或设置上次打印 <see cref="T:System.IO.Packaging.Package" /> 内容的日期和时间。</summary>
      <returns>上次打印 <see cref="T:System.IO.Packaging.Package" /> 内容的日期和时间。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Modified">
      <summary>在派生类中重写时，获取或设置上次更改 <see cref="T:System.IO.Packaging.Package" /> 的日期和时间。</summary>
      <returns>上次更改 <see cref="T:System.IO.Packaging.Package" /> 的日期和时间。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Revision">
      <summary>在派生类中重写时，获取或设置 <see cref="T:System.IO.Packaging.Package" /> 的修订号。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> 的修订号。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Subject">
      <summary>当在派生类中重写时，获取或设置 <see cref="T:System.IO.Packaging.Package" /> 内容的主题。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> 内容的主题。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Title">
      <summary>在派生类中重写时，获取或设置为 <see cref="T:System.IO.Packaging.Package" /> 及其内容指定的名称。</summary>
      <returns>为 <see cref="T:System.IO.Packaging.Package" /> 及其内容指定的名称。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Version">
      <summary>在派生类中重写时，获取或设置 <see cref="T:System.IO.Packaging.Package" /> 的版本号。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> 的版本号。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationship">
      <summary>表示源 <see cref="T:System.IO.Packaging.Package" /> 或 <see cref="T:System.IO.Packaging.PackagePart" /> 与可以为 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源的目标对象之间的关联。</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Id">
      <summary>获取标识关系的字符串。</summary>
      <returns>标识关系的字符串。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Package">
      <summary>获取包含此关系的 <see cref="T:System.IO.Packaging.Package" />。</summary>
      <returns>包含此关系的包。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.RelationshipType">
      <summary>获取关系的限定类型名称。</summary>
      <returns>关系的限定类型名称。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.SourceUri">
      <summary>获取拥有关系的包或部分的 URI。</summary>
      <returns>拥有关系的 <see cref="T:System.IO.Packaging.Package" /> 或 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetMode">
      <summary>获取一个值，该值指示关系的目标是否是到 <see cref="T:System.IO.Packaging.Package" /> 的 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 或 <see cref="F:System.IO.Packaging.TargetMode.External" />。</summary>
      <returns>指示 <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" /> 是否引用到 <see cref="T:System.IO.Packaging.Package" /> 的资源 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 或 <see cref="F:System.IO.Packaging.TargetMode.External" /> 的枚举值。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetUri">
      <summary>获取关系的目标资源的 URI。</summary>
      <returns>目标资源的 URI。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipCollection">
      <summary>表示为给定的 <see cref="T:System.IO.Packaging.PackagePart" /> 或 <see cref="T:System.IO.Packaging.Package" /> 所拥有的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 元素的集合。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator">
      <summary>返回一个用于循环访问集合中的关系的枚举器。</summary>
      <returns>用于循环访问集合中的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 元素的枚举器。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <returns>不要使用—使用 <see cref="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelector">
      <summary>定义 <see cref="T:System.IO.Packaging.PackageRelationship" /> 条件来选择部分级或包级关系。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)">
      <summary>初始化 <see cref="T:System.IO.Packaging.PackageRelationshipSelector" /> 类的新实例。</summary>
      <param name="sourceUri">拥有关系的 <see cref="T:System.IO.Packaging.PackagePart" /> 或 <see cref="T:System.IO.Packaging.Package" /> (<paramref name="SourceUri" />="/") 的 统一资源标识符 (URI)。</param>
      <param name="selectorType">
        <paramref name="selectionCriteria" /> 的类型，要么按关系 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />，要么按关系 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />。</param>
      <param name="selectionCriteria">用来基于 <paramref name="selectorType" /> 选择关系的限定字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceUri" /> 或 <paramref name="selectionCriteria" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="selectorType" /> 参数无效。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="selectorType" /> 参数是 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />，但 <paramref name="selectionCriteria" /> 不是有效的 XML 架构定义 (XSD) 标识符 (ID)。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selectionCriteria" /> 对于指定的 <paramref name="selectorType" /> 无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selectionCriteria" /> 对于指定的 <paramref name="selectorType" /> 无效。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.Select(System.IO.Packaging.Package)">
      <summary>返回与定义的 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />、<see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> 和 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" /> 相匹配的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象的列表。</summary>
      <returns>与指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数的选择参数相匹配的关系的列表。</returns>
      <param name="package">要基于选择条件从中选择关系的包。</param>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria">
      <summary>获取指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数的选择条件。</summary>
      <returns>基于指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数的 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> 或 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> 的 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> 的选择条件。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType">
      <summary>获取为 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数指定的 <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" />。</summary>
      <returns>指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数的 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> 或 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> 的选择器类型。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri">
      <summary>获取指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数、作为关系所有者的根包 URI ("/") 或部分 <see cref="P:System.IO.Packaging.PackagePart.Uri" />。</summary>
      <returns>指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数、作为关系所有者的根包 URI ("/") 或部分 <see cref="P:System.IO.Packaging.PackagePart.Uri" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelectorType">
      <summary>指定用于通过 <see cref="T:System.IO.Packaging.PackageRelationshipSelector" /> 匹配并返回 <see cref="T:System.IO.Packaging.PackageRelationship" /> 选择的选择条件的类型。</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Id">
      <summary>按 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 进行 <see cref="T:System.IO.Packaging.PackageRelationship" /> 选择。</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Type">
      <summary>按 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 进行 <see cref="T:System.IO.Packaging.PackageRelationship" /> 选择。</summary>
    </member>
    <member name="T:System.IO.Packaging.PackUriHelper">
      <summary>提供用来撰写和分析包 URI 对象的实用工具方法。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)">
      <summary>返回一个值，该值指示两个包 URI 是否相等。</summary>
      <returns>一个带符号整数，指示 <paramref name="firstPackUri" /> 和 <paramref name="secondPackUri" /> 之间的关系。 值 含义 小于 0 <paramref name="firstPackUri" /> 小于 <paramref name="secondPackUri" />。 0<paramref name="firstPackUri" /> 与 <paramref name="secondPackUri" /> 相等。 大于 0 <paramref name="firstPackUri" /> 大于 <paramref name="secondPackUri" />。</returns>
      <param name="firstPackUri">第一个包 URI。</param>
      <param name="secondPackUri">第二个包 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPackUri" /> 或 <paramref name="secondPackUri" /> 不是绝对 URI。 - 或 - <paramref name="firstPackUri" /> 或 <paramref name="secondPackUri" /> 不以“pack://”方案开头。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)">
      <summary>返回一个值，该值指示两个包部件 URI 是否相等。</summary>
      <returns>一个值，指示 <paramref name="firstPartUri" /> 和 <paramref name="secondPartUri" /> 之间的关系。 值 含义 小于 0 <paramref name="firstPartUri" /> 小于 <paramref name="secondPartUri" />。 0<paramref name="firstPartUri" /> 与 <paramref name="secondPartUri" /> 相等。 大于 0 <paramref name="firstPartUri" /> 大于 <paramref name="secondPartUri" />。</returns>
      <param name="firstPartUri">第一个 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
      <param name="secondPartUri">第二个 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPartUri" /> 或 <paramref name="secondPartUri" /> 不是有效部件 URI 语法。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)">
      <summary>创建一个指向包的新包 URI。</summary>
      <returns>由给定的 <paramref name="packageUri" /> 引用的 <see cref="T:System.IO.Packaging.Package" /> 的包 URI。</returns>
      <param name="packageUri">引用的 <see cref="T:System.IO.Packaging.Package" /> 的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> 不是绝对 URI。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)">
      <summary>已知 <see cref="T:System.IO.Packaging.Package" /> 的 URI 及包中部件的 URI，创建一个包 URI。</summary>
      <returns>给定 <see cref="T:System.IO.Packaging.PackagePart" /> 的包 URI。</returns>
      <param name="packageUri">T:System.IO.Packaging.Package 的 <see cref="TLA2#tla_uri" />。</param>
      <param name="partUri">包中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> 不是绝对 URI。 - 或 - <paramref name="partUri" /> 不是有效的部件 URI 语法。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)">
      <summary>给定 <see cref="T:System.IO.Packaging.Package" /> 的 URI、包中某部件的 URI 以及要追加的“#”片段，创建一个包 URI。</summary>
      <returns>标识指定的包、包部件和片段的包 URI。</returns>
      <param name="packageUri">T:System.IO.Packaging.Package 的 <see cref="TLA2#tla_uri" />。</param>
      <param name="partUri">包中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
      <param name="fragment">一个“#”引用，标识包部件内的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> 不是绝对 URI。 - 或 - <paramref name="partUri" /> 不是有效的部件 URI 语法。 - 或 - <paramref name="fragment" /> 为空或确实以“#”开头。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)">
      <summary>创建格式化的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</summary>
      <returns>格式化的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</returns>
      <param name="partUri">包中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)">
      <summary>返回指定 <see cref="T:System.IO.Packaging.PackagePart" /> URI 的规范化形式。</summary>
      <returns>给定 <paramref name="partUri" /> 的规范化形式。</returns>
      <param name="partUri">要规范化的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)">
      <summary>返回内部 URI，它指向指定包 URI 的整个包。</summary>
      <returns>来自指定 <paramref name="packUri" /> 的 <see cref="T:System.IO.Packaging.Package" /> 的 URI。</returns>
      <param name="packUri">包 URI，根据其返回 <see cref="T:System.IO.Packaging.Package" /> 的 URI。</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)">
      <summary>返回指定包 URI 内的 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</summary>
      <returns>给定 <paramref name="packUri" /> 中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI，或者，如果 <paramref name="packUri" /> 指向包而不是 <see cref="T:System.IO.Packaging.PackagePart" />，则为 null。</returns>
      <param name="packUri">包 URI，根据其返回 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</param>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)">
      <summary>返回与指定的 <see cref="T:System.IO.Packaging.PackagePart" /> 关联的关系部件的 URI。</summary>
      <returns>与由 <paramref name="partUri" /> 标识的 <see cref="T:System.IO.Packaging.PackagePart" /> 关联的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的 URI。</returns>
      <param name="partUri">要返回关联 <see cref="T:System.IO.Packaging.PackageRelationship" /> 的 URI 的 <see cref="T:System.IO.Packaging.PackagePart" /> 的 <see cref="P:System.IO.Packaging.PackagePart.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 语法对于包部件 URI 无效。 - 或 - <paramref name="partUri" /> 为绝对 URI。 - 或 - <paramref name="partUri" /> 引用关系部件。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)">
      <summary>返回两个指定的 <see cref="T:System.IO.Packaging.PackagePart" />URI 之间的相对 URI。</summary>
      <returns>从 <paramref name="sourcePartUri" /> 到 <paramref name="targetPartUri" /> 的相对 URI。</returns>
      <param name="sourcePartUri">源部件的 URI。</param>
      <param name="targetPartUri">目标部件的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> 或 <paramref name="targetPartUri" /> 为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)">
      <summary>从具有指定 URI 的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 中返回 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />。</summary>
      <returns>来自于具有指定 <paramref name="relationshipPartUri" /> 的关系的 <see cref="T:System.IO.Packaging.PackagePart" /> 的 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />。</returns>
      <param name="relationshipPartUri">从其中返回 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 的关系部件的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipPartUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipPartUri" /> 为绝对 URI。 - 或 - <paramref name="relationshipPartUri" /> 语法对于 <see cref="T:System.IO.Packaging.PackagePart" /> 无效。 - 或 - <paramref name="relationshipPartUri" /> 不引用关系部件。 - 或 - 关系部件的 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 会引用其他关系部件（无效，请参见“备注”）。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)">
      <summary>返回一个值，指示指定的 URI 是否为 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的 URI。</summary>
      <returns>如果 <paramref name="partUri" /> 标识 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件，则为 true；否则为 false。</returns>
      <param name="partUri">用于检查 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 为绝对 URI。 - 或 - <paramref name="partUri" /> 是无效的 <see cref="T:System.IO.Packaging.PackagePart" /> 语法。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)">
      <summary>返回部件 URI，给定源部件 URI 和带有指向目标部件的相对路径的 URI。</summary>
      <returns>指定 <paramref name="SourcePartUri" /> 和 <paramref name="targetUri" /> 参数之间解析的目标部件的 URI。</returns>
      <param name="sourcePartUri">源部件的 URI，或指定 <see cref="T:System.IO.Packaging.Package" /> 根的“/”。</param>
      <param name="targetUri">到目标部件的相对 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> 或 <paramref name="targetUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourcePartUri" /> 不是有效的部件 URI。 - 或 - <paramref name="targetUri" /> 不是有效的相对 URI。</exception>
    </member>
    <member name="F:System.IO.Packaging.PackUriHelper.UriSchemePack">
      <summary>定义包 URI 方案名称“pack”。</summary>
      <returns>包 URI 方案名称字符串“pack”。</returns>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>表示存储在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 中的数字版权管理 (DRM) 信息。</summary>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>获取或设置用于访问包的加密权限管理数据流的 <see cref="T:System.Security.RightsManagement.CryptoProvider" />。</summary>
      <returns>访问权限管理信息的 <see cref="T:System.Security.RightsManagement.CryptoProvider" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>从加密权限管理数据流中删除指定用户的 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <param name="userKey">要删除的 <see cref="T:System.Security.RightsManagement.UseLicense" /> 的用户。</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>从加密权限管理数据流返回用户和 <see cref="T:System.Security.RightsManagement.UseLicense" /> 键/值对的字典集合。</summary>
      <returns>包含在权限管理保护包中的用户和 <see cref="T:System.Security.RightsManagement.UseLicense" /> 键/值对的集合。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>从加密权限管理数据流返回嵌入的 <see cref="T:System.Security.RightsManagement.PublishLicense" />。</summary>
      <returns>嵌入的 <see cref="T:System.Security.RightsManagement.PublishLicense" />；或者 null（如果包中不包含 <see cref="T:System.Security.RightsManagement.PublishLicense" />）。</returns>
      <exception cref="T:System.IO.FileFormatException">该类的当前版本无法读取此包中的权限管理信息。</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>从加密权限管理数据流返回指定用户的嵌入 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <returns>指定用户的 <see cref="T:System.Security.RightsManagement.UseLicense" />；或 null（如果包中不包含与给定的 <paramref name="userKey" /> 相匹配的 <see cref="T:System.Security.RightsManagement.UseLicense" />）。</returns>
      <param name="userKey">要为其返回 <see cref="T:System.Security.RightsManagement.UseLicense" /> 的用户或用户组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userKey" /> 参数为 null。</exception>
      <exception cref="T:System.IO.FileFormatException">该类的当前版本无法读取此包中的权限管理信息。</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>将给定的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 保存到加密权限管理数据流。</summary>
      <param name="publishLicense">要在包中存储和嵌入的发布许可证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publishLicense" /> 参数为 null。</exception>
      <exception cref="T:System.IO.FileFormatException">该类的当前版本无法读取此包中的权限管理信息。</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>将指定用户的给定 <see cref="T:System.Security.RightsManagement.UseLicense" /> 保存到加密权限管理数据流。</summary>
      <param name="userKey">
        <see cref="T:System.Security.RightsManagement.UseLicense" /> 的用户。</param>
      <param name="useLicense">要在包中存储和嵌入的使用许可证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userKey" /> 或 <paramref name="useLicense" /> 参数为 null。</exception>
      <exception cref="T:System.IO.FileFormatException">该类的当前版本无法读取此包中的权限管理信息。</exception>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary>指定提供给 <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" /> 的事件参数。</summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary>获取要验证的数字签名。</summary>
      <returns>要验证的数字签名。</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary>获取签名验证错误。</summary>
      <returns>签名验证错误。</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>提供访问和信息，用以操作 <see cref="T:System.IO.Packaging.Package" /> 中的数据存储区。</summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>使用给定名称新建流。</summary>
      <returns>具有指定 <paramref name="name" /> 的新流。</returns>
      <param name="name">新流的名称。</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>使用给定名称 <see cref="T:System.IO.Packaging.CompressionOption" /> 和 <see cref="T:System.IO.Packaging.EncryptionOption" /> 新建流。</summary>
      <returns>带有指定的 <paramref name="name" />、<paramref name="compressionOption" /> 和 <paramref name="encryptionOption" /> 的新流。</returns>
      <param name="name">新流的名称。</param>
      <param name="compressionOption">数据流的压缩选项。</param>
      <param name="encryptionOption">数据流的加密选项。</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>新建将此 <see cref="T:System.IO.Packaging.StorageInfo" /> 作为父级的子级 <see cref="T:System.IO.Packaging.StorageInfo" />。</summary>
      <returns>新的子级数据存储区。</returns>
      <param name="name">新子级数据存储区的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>删除具有指定名称的流。</summary>
      <param name="name">要删除的流的 <see cref="T:System.IO.Packaging.StreamInfo" /> 名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>删除指定的子存储区。</summary>
      <param name="name">要删除的子存储区的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>返回具有给定名称的 <see cref="T:System.IO.Packaging.StreamInfo" /> 实例。</summary>
      <returns>具有指定 <paramref name="name" /> 的流。</returns>
      <param name="name">要返回的 <see cref="T:System.IO.Packaging.StreamInfo" /> 实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>返回当前包含在此存储区中的 <see cref="T:System.IO.Packaging.StreamInfo" /> 实例的数组。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.StreamInfo" /> 对象的数组，每个都指向在此存储区中定义的 I/O 流。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>返回具有给定名称的子级子存储区。</summary>
      <returns>具有指定 <paramref name="name" /> 的子级子存储区。</returns>
      <param name="name">要返回的子存储区的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>返回当前包含在此存储区中的子级子存储区的数组。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.StorageInfo" /> 对象的数组，每个都指向在此存储区中定义的子存储区。</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>获取存储区的名称。</summary>
      <returns>该存储区的名称。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>返回一个值，该值指示给定的流是否存在。</summary>
      <returns>如果具有指定 <paramref name="name" /> 的流存在，则为 true；否则为 false。</returns>
      <param name="name">要检查的 <see cref="T:System.IO.Packaging.StreamInfo" /> 名称。</param>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>返回一个值，该值指示给定的子级子存储区是否存在。</summary>
      <returns>如果具有指定 <paramref name="name" /> 的子级子存储区存在，则为 true；否则为 false。</returns>
      <param name="name">要检查的子级 <see cref="T:System.IO.Packaging.StorageInfo" /> 名称。</param>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>提供用于操作 <see cref="T:System.IO.Packaging.Package" /> 中的 I/O 流的访问和信息。</summary>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>获得流的 <see cref="T:System.IO.Packaging.CompressionOption" /> 设置。</summary>
      <returns>包流的压缩选项设置。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>获取流的 <see cref="T:System.IO.Packaging.EncryptionOption" /> 设置。</summary>
      <returns>包流的加密选项设置。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>返回在默认 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 中打开的流。</summary>
      <returns>在默认 <see cref="T:System.IO.Packaging.Package" /> 根 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 中打开的 I/O 流。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>返回在指定 <see cref="T:System.IO.FileMode" /> 中打开的 I/O 流。</summary>
      <returns>在指定文件 <paramref name="mode" /> 中打开的流。</returns>
      <param name="mode">用于打开流的文件模式。</param>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>返回以指定的 <see cref="T:System.IO.FileMode" /> 打开并且具有给定的 <see cref="T:System.IO.FileAccess" /> 的 I/O 流。</summary>
      <returns>在指定的 <see cref="T:System.IO.FileMode" /> 中打开并且具有给定的 <see cref="T:System.IO.FileAccess" /> 的 I/O 流。</returns>
      <param name="mode">用于打开流的文件模式。</param>
      <param name="access">用于读取或写入流的文件访问模式。</param>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>获取流的名称。</summary>
      <returns>该流的名称。</returns>
    </member>
    <member name="T:System.IO.Packaging.TargetMode">
      <summary>指定 <see cref="T:System.IO.Packaging.PackageRelationship" /> 的目标是在 <see cref="T:System.IO.Packaging.Package" /> 的内部还是外部。</summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.External">
      <summary>关系引用包外部的资源。</summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.Internal">
      <summary>关系引用包内部的部分。</summary>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>指定证书或签名验证的结果。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>X.509 证书不可用于验证签名。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>X.509 证书无效。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>签名无效。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>指定的包或部件没有签名。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>未找到与签名的引用关系。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>验证成功。</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackage">
      <summary>实现抽象 <see cref="T:System.IO.Packaging.Package" /> 基类的派生子类 － <see cref="T:System.IO.Packaging.ZipPackage" /> 类将 ZIP 存档用作容器存储。 此类不能被继承。</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackagePart">
      <summary>表示存储在 <see cref="T:System.IO.Packaging.ZipPackage" /> 中的部分。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermission">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermission" /> 描述一组安全权限，安全权限控制音频、图像和视频媒体在不完全可信的 Windows Presentation Foundation (WPF) 应用程序中的运行能力。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
      <summary>通过指定音频权限级别初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。</summary>
      <param name="permissionAudio">
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
      <summary>通过指定音频、视频和图像权限级别初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。</summary>
      <param name="permissionAudio">
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 枚举值。</param>
      <param name="permissionVideo">
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 枚举值。</param>
      <param name="permissionImage">
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
      <summary>通过指定图像权限级别初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。</summary>
      <param name="permissionImage">
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
      <summary>通过指定视频权限级别初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。</summary>
      <param name="permissionVideo">
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>通过指定权限状态初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 的一个枚举值。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Audio">
      <summary>获取音频权限级别的当前值。</summary>
      <returns>音频权限级别。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">用于重新构造权限的 XML 编码。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Image">
      <summary>获取图像权限级别的当前值。</summary>
      <returns>图像权限级别。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限和指定权限的交集。</summary>
      <returns>两个权限的交集是对它们共同描述的状态进行描述的权限。 对于相交的权限，只有同时满足两个原始权限的请求才是有效的。</returns>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <returns>如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否为无限制的。</summary>
      <returns>如果音频、图像和视频权限全部不受限制，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <returns>一个新权限，它表示当前权限与指定权限的并集。</returns>
      <param name="target">将与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Video">
      <summary>获取视频权限级别的当前值。</summary>
      <returns>媒体权限级别。</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAttribute">
      <summary>允许对使用声明安全性应用到代码中的 <see cref="T:System.Security.Permissions.MediaPermission" /> 进行安全操作。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的音频权限级别。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 的状态。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.MediaPermission" />。</summary>
      <returns>与此特性对应的 <see cref="T:System.Security.Permissions.MediaPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的图像权限级别。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 的状态。</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的视频权限级别。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 的状态。</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAudio">
      <summary>指定音频的权限级别。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
      <summary>允许播放不受限制音频的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
      <summary>拒绝播放所有音频的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
      <summary>允许播放安全、有限制音频的权限，该权限包括拒绝对图像文件的流访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
      <summary>只允许对位于应用程序源站点的文件进行音频播放的权限。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionImage">
      <summary>指定图像的权限级别。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
      <summary>允许显示不受限制图像的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
      <summary>拒绝显示所有图像的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
      <summary>允许显示安全、有限制图像的权限，该权限包括拒绝对图像文件的流访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
      <summary>只允许显示位于应用程序源站点的图像的权限。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionVideo">
      <summary>指定视频的权限级别。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
      <summary>允许播放不受限制视频的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
      <summary>拒绝播放所有视频的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
      <summary>允许播放安全、有限制视频的权限，该权限包括拒绝对图像文件的流访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
      <summary>只允许对位于应用程序源站点的文件进行视频播放的权限。</summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermission">
      <summary>
        <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 对象控制创建 Web 浏览器控件的能力。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>通过指定权限状态初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的一个新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 的一个枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
      <summary>通过指定 Web 浏览器权限级别初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的一个新实例。</summary>
      <param name="webBrowserPermissionLevel">
        <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" /> 的一个枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">用于重新构造权限的 XML 编码。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限和指定权限的交集。</summary>
      <returns>两个权限的交集是对它们共同描述的状态进行描述的权限。 对于相交的权限，只有同时满足两个原始权限的请求才是有效的。</returns>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <returns>如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否为无限制的。</summary>
      <returns>如果 <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" /> 属性设置为 <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermission.Level">
      <summary>获取或设置 Web 浏览器权限级别的当前值。</summary>
      <returns>Web 浏览器权限级别的当前值。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <returns>一个新权限，它表示当前权限与指定权限的并集。</returns>
      <param name="target">将与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
      <summary>允许对使用声明安全性应用到代码中的 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 进行安全操作。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>用指定的 <see cref="T:System.Security.Permissions.SecurityAction" /> 初始化 <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
      <summary>创建并返回 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的新实例。</summary>
      <returns>与安全声明相对应的 <see cref="T:System.Security.Permissions.WebBrowserPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> 的当前 Web 浏览器权限级别。</summary>
      <returns>当前 Web 浏览器权限级别的状态。</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
      <summary>指定 Web 浏览器的权限级别。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
      <summary>无法将框架定位到 HTML 的 Web 浏览器。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
      <summary>可以安全地将框架定位到 HTML（但需要满足若干个限制）的 Web 浏览器。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
      <summary>可以不受限制地进行定位的 Web 浏览器。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>指定权限管理身份验证的方法。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>对任何请求的用户进行隐式身份验证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>Windows Live ID 身份验证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>企业域环境中的 Windows 身份验证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>Windows 身份验证或 Windows Live ID 身份验证。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>表示授予用户访问权限管理文档中信息的权限。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>初始化 <see cref="T:System.Security.RightsManagement.ContentGrant" /> 类的新实例，以向指定的 <see cref="T:System.Security.RightsManagement.ContentUser" /> 授予指定的 <see cref="T:System.Security.RightsManagement.ContentRight" />。</summary>
      <param name="user">向其授予访问权限的用户。</param>
      <param name="right">所授予的访问权限。</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>初始化 <see cref="T:System.Security.RightsManagement.ContentGrant" /> 类的新实例，以授予指定的 <see cref="T:System.Security.RightsManagement.ContentUser" /> 在指定的 <see cref="T:System.DateTime" /> 期间内具有指定的 <see cref="T:System.Security.RightsManagement.ContentRight" />。</summary>
      <param name="user">向其授予访问权限的用户。</param>
      <param name="right">所授予的访问权限。</param>
      <param name="validFrom">该权限开始生效的起始日期和时间。</param>
      <param name="validUntil">该权限到期的终止日期和时间。</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>获取所授予的 <see cref="T:System.Security.RightsManagement.ContentRight" />。</summary>
      <returns>向 <see cref="P:System.Security.RightsManagement.ContentGrant.User" /> 授予的访问权限，该权限已在 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> 构造函数中指定。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>获取向其授予访问权限 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 的用户。</summary>
      <returns>向其授予访问权限 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 的用户，该权限已在 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> 构造函数中指定。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>获取所授予的 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 开始生效的起始日期和时间。</summary>
      <returns>所授予的 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 开始生效的起始日期和时间；如果没有起始日期和时间限制，则为 <see cref="T:System.DateTime" />.<see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>获取所授予的 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 到期的终止日期和时间。</summary>
      <returns>所授予的 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 到期的终止日期和时间；如果没有终止日期和时间限制，则为 <see cref="T:System.DateTime" />.<see cref="F:System.DateTime.MaxValue" />。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>指定可授予用户访问权限管理文档中内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>用户可以编辑包含受保护内容的文档。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>用户可以编辑和加密受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>用户可以导出受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>用户可以提取（复制和粘贴）受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>用户可以将受保护的内容转发给其他用户。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>用户可以控制对受保护内容的编程访问。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>用户是内容所有者。内容所有者可以对受保护的内容进行编辑和加密，并可以对已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 进行解密。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>用户可以打印受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>用户可以答复受保护内容的发送方。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>用户可以“全部答复”受保护内容的接收方。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>用户可以对受保护的内容进行数字签名。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>用户可以查看受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>用户可以对已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 中指定的权限进行解密并查看这些权限。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>表示对其授予权限管理内容访问权限的用户或用户组。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>初始化 <see cref="T:System.Security.RightsManagement.ContentUser" /> 类的新实例。</summary>
      <param name="name">用户或用户组名称。</param>
      <param name="authenticationType">身份验证的方法。</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>获取“Anyone”<see cref="T:System.Security.RightsManagement.ContentUser" /> 角色的实例。</summary>
      <returns>“Anyone”<see cref="T:System.Security.RightsManagement.ContentUser" /> 角色的一个实例。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>获取为 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数指定的 <see cref="T:System.Security.RightsManagement.AuthenticationType" />。</summary>
      <returns>为 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数指定的 <see cref="T:System.Security.RightsManagement.AuthenticationType" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>返回一个值，该值指示此 <see cref="T:System.Security.RightsManagement.ContentUser" /> 是否与另一个给定实例等效。</summary>
      <returns>如果 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> 对于此用户和给定用户是相同的，则为 true；否则为 false。</returns>
      <param name="obj">要比较是否等效的用户实例。</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>返回基于用户 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> 计算出的哈希代码。</summary>
      <returns>基于用户 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> 计算出的哈希代码。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>返回一个值，该值指示当前是否已验证用户的身份。</summary>
      <returns>如果当前已验证用户的身份，则为 true；否则为 false。在进行身份验证之前，默认值为 false。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>获取为 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数指定的用户或用户组名称。</summary>
      <returns>为 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数指定的用户或用户组名称。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>获取“Owner”<see cref="T:System.Security.RightsManagement.ContentUser" /> 角色的实例。</summary>
      <returns>“Owner”<see cref="T:System.Security.RightsManagement.ContentUser" /> 角色的一个实例。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>为加密和解密受保护的内容提供数字权限管理服务。</summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>获取密码块大小（以字节为单位）。</summary>
      <returns>密码块大小（以字节为单位）。默认的 高级加密标准 (AES) 块大小为 8。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>获取一个集合，该集合列出已通过验证并授予用户的权限。</summary>
      <returns>一个集合，枚举已通过验证并向用户授予的权限。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>获取一个指示用户是否有解密权限的值。</summary>
      <returns>如果 <see cref="T:System.Security.RightsManagement.UseLicense" /> 授予用户解密权限，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>获取一个指示用户是否有加密权限的值。</summary>
      <returns>如果 <see cref="T:System.Security.RightsManagement.UseLicense" /> 授予用户加密权限，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>获取一个值，该值指示 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 是否可以接受块长度不同的缓冲区。</summary>
      <returns>如果传递到 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 的缓冲区可以与传递到 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 的缓冲区长度不同，则为 true；否则，如果传递到 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 的缓冲区必须拥有完全相同的长度，则为 false。对于 高级加密标准 (AES)，默认值为 true。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>将密码文本解密为明文。</summary>
      <returns>
        <paramref name="cryptoText" /> 的解密明文。</returns>
      <param name="cryptoText">要解密的密码文本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cipherText" /> 为 null。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">未授予解密权限。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>将明文加密为密码文本。</summary>
      <returns>给定 <paramref name="clearText" /> 的加密密码文本。</returns>
      <param name="clearText">要加密的明文内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clearText" /> 为 null。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">不允许加密。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>通过垃圾回收来回收实例之前，释放资源并执行内部清理。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>表示一对不可变的（只读）“名称”和“说明”字符串。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> 类的新实例。</summary>
      <param name="name">区域设置 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 属性的值。</param>
      <param name="description">区域设置 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数或 <paramref name="description" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>获取区域设置说明。</summary>
      <returns>区域设置说明。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>指示给定对象的 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性是否与此 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> 的相应属性匹配。</summary>
      <returns>如果给定对象的 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性与此实例的相应属性匹配，则为 true；否则为 false。</returns>
      <param name="obj">用于比较 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性的对象。</param>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>获取基于 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性计算出的哈希代码。</summary>
      <returns>基于此 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> 的 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性计算出的哈希代码。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>获取区域设置名称。</summary>
      <returns>区域设置名称。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>表示已签名的权限管理发布许可证。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>从指定的已签名并序列化的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 初始化 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 类的新实例。</summary>
      <param name="signedPublishLicense">已签名并序列化的发布许可证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signedPublishLicense" /> 为 null。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">该许可证无效。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>尝试为指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 中的用户或用户组获取 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <returns>指定 <paramref name="secureEnvironment" /> 中的用户或用户组的 <see cref="T:System.Security.RightsManagement.UseLicense" />。</returns>
      <param name="secureEnvironment">用于激活和绑定许可证的安全环境。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> 为 null。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">身份验证失败。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>尝试为指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 中的用户或用户组获取 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <returns>指定 <paramref name="secureEnvironment" /> 中的用户或用户组的 <see cref="T:System.Security.RightsManagement.UseLicense" />。</returns>
      <param name="secureEnvironment">用于激活和绑定许可证的安全环境。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> 为 null。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">身份验证失败。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>获取发布者创建的内容标识符。</summary>
      <returns>发布者创建的内容标识符。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>返回已签名的此 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 的 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 解密版本。</summary>
      <returns>此许可证的未签名的解密版本。</returns>
      <param name="cryptoProvider">用于对该许可证进行解密的权限管理服务。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cryptoProvider" /> 为 null。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>获取内容作者或发布者的联系人名称。</summary>
      <returns>内容作者或发布者的联系人名称。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>获取内容作者或发布者的联系人 URI。</summary>
      <returns>内容作者或发布者的联系人 统一资源标识符 (URI)。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>返回用于创建此许可证的序列化 XrML 字符串。</summary>
      <returns>用于创建此许可证的序列化可扩展权限标记语言 (XrML) 字符串。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>获取用于获取 <see cref="T:System.Security.RightsManagement.UseLicense" /> 的 URI。</summary>
      <returns>用于获取 <see cref="T:System.Security.RightsManagement.UseLicense" /> 的 URI。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>表示权限管理操作无法成功完成时的错误条件。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例并使用与异常有关的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储区。</summary>
      <param name="info">包含序列化数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
      <param name="failureCode">错误的失败代码。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>使用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 和 <see cref="P:System.Exception.InnerException" /> 初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
      <param name="failureCode">错误的失败代码。</param>
      <param name="innerException">导致错误的异常实例。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>使用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 和 <see cref="P:System.Exception.Message" /> 初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
      <param name="failureCode">错误的失败代码。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>使用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />，<see cref="P:System.Exception.Message" /> 和 <see cref="P:System.Exception.InnerException" /> 初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
      <param name="failureCode">错误的失败代码。</param>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致错误的异常实例。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>使用给定消息初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>使用给定的 <see cref="P:System.Exception.Message" /> 和 <see cref="P:System.Exception.InnerException" /> 初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致此异常的异常实例。</param>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>获取错误的 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />。</summary>
      <returns>错误的失败代码。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用参数名和与异常有关的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储区。</summary>
      <param name="info">包含序列化数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null。</exception>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>指定在执行权限管理操作时可能发生的错误情况。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>异步操作已取消，或者发生了不可恢复的错误。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>许可证激活失败；权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>在进行 Windows 身份验证时，在证书的 Active Directory (AD) 中未找到当前用户。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>所请求的操作已在进行。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>由 Internet 请求返回的可能身份验证错误（HTTP 错误 401）。 或者，当前用户在无提示用户激活尝试中没有有效的域凭据。 或者，采用无提示用户激活方式的证书服务器不在本地 Intranet 或受信任站点区域中。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>所传递的常量无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>访问条件与传递到绑定中的启用主体不匹配。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>当前用户不能满足最终用户许可证 (EUL) 中定义的条件。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>指定的资源并未包含在许可证的任意工作节点中。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>启用主体与最终用户许可证 (EUL) 中的已发布主体不匹配。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>受保护内容的定义时间段已过期，不再允许访问。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>当前计算机未在权限管理组标识中定义。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>当前用户没有访问受保护内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>指定的权限组不包含在最终用户许可证 (EUL) 中。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>当前用户没有访问受保护内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>许可证要求必须获取一个新的吊销列表。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>当前用户没有访问受保护内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>当前用户没有访问受保护内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>当前用户没有访问受保护内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>当前用户没有访问受保护内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>最终用户许可证 (EUL) 不包含工作节点。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>受保护内容的定义时间段已过期，不再允许访问。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>权限管理证书链已断开。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>已检测到时钟回滚。无法访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>不支持所请求的加密操作。 例如，传递要用于解密的 RMS 加密对象。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>因为已检测到调试器，所以无法使用受限权限打开或发布内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>无法验证用户的电子邮件地址。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>无法启用指定的主体。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>不允许加密。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>无法加载 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>无法加载 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>颁发许可证模板中定义的授权时间段已过期，不再允许访问。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>已设置了指定的选项。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>未指定客户端会话的用户名。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>在计算机激活尝试中使用的硬件 ID (HID) 的格式设置不正确。 权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>在计算机激活尝试中使用的硬件 ID (HID) 无效。 权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>许可证的内容 ID 与许可证存储会话的内容 ID 不匹配。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>传递的对象类型与此操作不兼容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>创建绑定许可证时，指定了颁发许可证，而非最终用户许可证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>缺少部分信息。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>安装操作失败。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>指定的算法类型无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>RMS 服务器电子邮件地址验证失败。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>指定的编码类型无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>环境或启用主体句柄无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>权限管理服务模板包含一个或多个错误。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>键/值对中指定的密钥长度无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>其中一个证书的许可证结构无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>无法对经权限管理签名的数字证书进行验证。（签名证书可能已被篡改。）</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>指定的数值无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>指定的注册表路径无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>指定的时间信息无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>权限管理版本不正确。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>不支持键/值对中指定的密钥类型。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>库操作失败。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>不支持指定的库插件。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>未能从权限管理服务器中获取最终用户许可证 (EUL)。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>当前用户凭据对于获取许可证无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>某个操作违反了权限管理的清单策略。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>无法设置指定的元数据。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>用户未激活，或者未提交权限帐户证书 (RAC) 并且许可证存储区中也找不到任何许可证与此会话关联的许可证匹配。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>必须先激活计算机才能激活用户。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>权限管理无法连接至为许可证服务器指定的 URI。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>受保护的内容已损坏。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>所需许可证不可用。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>指定索引处没有许可证或证书。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>权限管理内容已损坏。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>请求删除的项不存在。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>已达到许可证服务器的最终用户许可证 (EUL) 最大配额。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>文档不包含所有者许可证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>所请求特性的实例不存在。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>未找到指定的许可证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>权限管理服务器不允许使用当前用户的临时证书。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>尚未设置证书或许可证的吊销信息。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>当前用户没有访问受保护内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>使用权限管理发布内容时未指定所请求的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>权限管理服务未正确配置。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>操作已成功完成。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>证书数量超出所允许的最大数量。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>已创建的 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 实例过多。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>发生了未指定的错误。当应用程序在调试模式下运行时也会引发此异常。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>如果要请求计算机激活或权限帐户证书，则接收 <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> 表示应用程序应将 null 传递到 ActServInfo 参数中。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>受保护内容的定义时间段已过期，不再允许访问。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>表示一个可用于用户激活、许可证绑定和其他权限管理操作的安全客户端会话。</summary>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>获取创建 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 时指定的 <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" />。</summary>
      <returns>创建 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 时为 <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> 方法指定的应用程序清单。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>使用给定应用程序权限清单、<see cref="T:System.Security.RightsManagement.AuthenticationType" /> 和 <see cref="T:System.Security.RightsManagement.UserActivationMode" /> 创建安全客户端会话。</summary>
      <returns>一个可用于激活、许可证绑定和其他权限管理操作的安全客户端会话。</returns>
      <param name="applicationManifest">应用程序权限清单。</param>
      <param name="authentication">身份验证的方法。</param>
      <param name="userActivationMode">用户权限帐户证书类型。</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>使用给定权限清单创建一个指定用户的安全客户端会话。</summary>
      <returns>一个可用于激活、许可证绑定和其他权限管理操作的安全客户端会话。</returns>
      <param name="applicationManifest">应用程序权限清单。</param>
      <param name="user">要为其授予权限管理内容访问权限的用户或用户组。</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>释放由 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 表示释放托管资源和非托管资源；false 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>返回激活用户的列表。</summary>
      <returns>当前激活用户的一个列表。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>指示是否已激活给定用户以访问权限管理内容。</summary>
      <returns>如果已激活给定的 <paramref name="user" /> 以访问权限管理内容，则为 true；否则为 false。</returns>
      <param name="user">要为其授予权限管理内容访问权限的用户或用户组。</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>移除指定用户的许可证激活。</summary>
      <param name="user">要为其移除许可证激活的用户。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="user" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">给定的 <paramref name="user" /> 既未经过 Windows 身份验证也未经过 Passport 身份验证的身份验证。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>获取创建 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 时指定的用户或用户组。</summary>
      <returns>创建 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 时为 <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> 方法指定的用户或用户组。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>表示一个未签名的权限管理<see cref="T:System.Security.RightsManagement.PublishLicense" /> 或未签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 模板。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>初始化 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>从指定的 XrML 发布许可证模板初始化 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 类的新实例。</summary>
      <param name="publishLicenseTemplate">用于创建此许可证的 可扩展权限标记语言 (XrML) 发布许可证模板。</param>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>获取或设置发布者创建的内容标识符。</summary>
      <returns>发布者创建的权限管理内容标识符。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>获取一组已分配的用户权限。</summary>
      <returns>此许可证中提供的一组已分配的用户权限。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>获取一组名称和说明对。</summary>
      <returns>一组名称和说明对。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>获取或设置内容所有者。</summary>
      <returns>拥有已发布内容的用户。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>获取或设置内容作者或发布者的联系人名称。</summary>
      <returns>内容作者或发布者的联系人名称。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>获取或设置内容作者或发布者的联系人 URI。</summary>
      <returns>内容作者或发布者的联系人 统一资源标识符 (URI)。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>创建一个已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 并向文档作者返回 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <returns>通过对此 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 进行签名而创建的已签名 <see cref="T:System.Security.RightsManagement.PublishLicense" />。</returns>
      <param name="secureEnvironment">用于激活和绑定许可证的安全环境。</param>
      <param name="authorUseLicense">向文档作者返回的 <see cref="T:System.Security.RightsManagement.UseLicense" />。</param>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>返回基于 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 的 XrML 创建的序列化模板。</summary>
      <returns>基于 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 的 XrML 创建的序列化模板。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>表示一个许可证，它为受保护的权限管理内容提供访问权限。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.RightsManagement.UseLicense" /> 类的新实例。</summary>
      <param name="useLicense">一个采用序列化 可扩展权限标记语言 (XrML) 形式的使用许可证。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="useLicense" /> 为 null。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
        <paramref name="useLicense" /> 无效。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>获取应用程序数据字典，该字典包括从发布应用程序传递给使用应用程序的键/值对。</summary>
      <returns>应用程序数据字典，该字典包括从发布应用程序传递给使用应用程序的键/值对。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>将许可证绑定到给定的 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
      <returns>如果许可证绑定成功，则为 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 实例；否则为 null。</returns>
      <param name="secureEnvironment">将许可证绑定到的环境。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> 为 null。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>获取发布者创建的内容标识符。</summary>
      <returns>发布者创建的内容标识符。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>指示此许可证是否与另一个给定许可证等效。</summary>
      <returns>如果两个许可证等效，则为 true；否则为 false。</returns>
      <param name="x">要比较的许可证。</param>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>返回与此许可证关联的哈希代码。</summary>
      <returns>此许可证的哈希代码。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>获取许可证的所有者。</summary>
      <returns>许可证的所有者。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>返回用于创建此许可证的序列化 XrML 字符串。</summary>
      <returns>最初传递给 <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> 构造函数的序列化 可扩展权限标记语言 (XrML) 字符串。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>指定用于请求激活权限管理的用户权限帐户证书的类型。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>永久性权限帐户证书。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>临时性权限帐户证书。</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>为报告附加属性使用范围的 .NET Framework 特性提供基类。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>指定附加属性只能供从指定类型派生的元素浏览。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>使用提供的 <paramref name="targetType" /> 初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 类的一个新实例。</summary>
      <param name="targetType">确定此.NET Framework 特性所应用附加属性使用范围的预期类型。</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>确定当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.NET Framework 特性是否与指定的对象相等。</summary>
      <returns>如果指定的 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 等于当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 进行比较的 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />。</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>返回此 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.NET Framework 特性的哈希代码。</summary>
      <returns>32 位无符号整数值。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>获取确定此 .NET Framework 特性所应用的附加属性使用范围的基本类型。</summary>
      <returns>请求的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>获取此 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.NET Framework 特性的唯一类型标识符。</summary>
      <returns>一个对象，表示 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 的唯一标识符。</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>指定只能在其类定义还应用了另一个特定 .NET Framework 特性的元素上浏览附加属性。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 类的新实例。</summary>
      <param name="attributeType">为了在应用 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 的类上浏览附加属性，而必须还对该类应用的 .NET Framework 特性 的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>获取必须同时应用在类上的 .NET Framework 特性 的类型。</summary>
      <returns>.NET Framework 特性 类型。</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>确定当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 特性 是否与指定的对象相等。</summary>
      <returns>如果指定的 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 等于当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 进行比较的 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />。</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>返回此 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />.NET Framework 特性的哈希代码。</summary>
      <returns>32 位无符号整数值。</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary>包含指定应用程序相对于新的 WPF 功能（在 WindowsBase 程序集中）应如何运行的属性。</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary>获取或设置一个指示信息是否有关 <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> 保存为 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 值。</summary>
      <returns>true ，如果 <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> 有关的信息保存到 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />；否则， false。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary>获取或设置一个值，此值指示是 <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> 方法将委托置于调度程序队列之上，还是直接调用委托。</summary>
      <returns>true如果<see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" />方法将委托置于调度程序队列之上，还是直接调用委托，否则false。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary>获取或设置一个值，该值指示单个 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 是否用于多个调度程序操作。</summary>
      <returns>如果单个 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 为多个计划程序操作，是真实的；否则 false。</returns>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>为只要重新计算依赖项属性值或专门请求强制转换时就调用的方法提供一个模板。</summary>
      <returns>强制转换后的值（采用适当的类型）。</returns>
      <param name="d">该属性所在的对象。 在调用该回调时，属性系统将会传递该值。</param>
      <param name="baseValue">该属性在尝试执行任何强制转换之前的新值。</param>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>表示一个参与依赖项属性系统的对象。</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>初始化 <see cref="T:System.Windows.DependencyObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>清除属性的本地值。 要清除的属性由 <see cref="T:System.Windows.DependencyProperty" /> 标识符指定。</summary>
      <param name="dp">要清除的依赖项属性，由<see cref="T:System.Windows.DependencyProperty" />对象引用标识。</param>
      <exception cref="T:System.InvalidOperationException">尝试对密封的 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>清除只读属性的本地值。 要清除的属性由 <see cref="T:System.Windows.DependencyPropertyKey" /> 指定。</summary>
      <param name="key">要清除的依赖项属性的键。</param>
      <exception cref="T:System.InvalidOperationException">尝试对密封的 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>强制转换所指定依赖项属性的值。 当依赖项属性存在于调用 <see cref="T:System.Windows.DependencyObject" /> 上时，可通过调用依赖项属性的属性元数据中指定的任何 <see cref="T:System.Windows.CoerceValueCallback" /> 函数来实现此目的。</summary>
      <param name="dp">要强制转换的依赖项属性的标识符。</param>
      <exception cref="T:System.InvalidOperationException">指定的 <paramref name="dp" /> 或它的值无效或不存在。</exception>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>获取对此实例的 CLR 类型进行包装的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
      <returns>对此实例的 CLR 类型进行包装的 <see cref="T:System.Windows.DependencyObjectType" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>确定提供的 <see cref="T:System.Windows.DependencyObject" /> 是否等效于当前 <see cref="T:System.Windows.DependencyObject" />。</summary>
      <returns>如果两个实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.Windows.DependencyObject" />。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>获取此 <see cref="T:System.Windows.DependencyObject" /> 的哈希代码。</summary>
      <returns>带符号的 32 位整数哈希代码。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>创建一个专用的枚举数，用于确定哪些依赖项属性在此 <see cref="T:System.Windows.DependencyObject" /> 上具有以本地方式设置的值。</summary>
      <returns>一个专用的本地值枚举数。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>返回 <see cref="T:System.Windows.DependencyObject" /> 的此实例上的依赖项属性的当前有效值。</summary>
      <returns>返回当前的有效值。</returns>
      <param name="dp">要为其检索值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</param>
      <exception cref="T:System.InvalidOperationException">指定的 <paramref name="dp" /> 或其值无效，或者指定的 <paramref name="dp" /> 不存在。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>重新计算指定依赖项属性的有效值</summary>
      <param name="dp">要使其失效的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</param>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>获取一个值，该值指示此实例当前是否为密封的（只读）。</summary>
      <returns>如果此实例是密封的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>每当更新此 <see cref="T:System.Windows.DependencyObject" /> 上的任何依赖项属性的有效值时调用。 更改的特定依赖项属性将在事件数据中报告。</summary>
      <param name="e">将包含相关依赖项属性标识符、类型的属性元数据以及旧值和新值的事件数据。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>返回依赖项属性的本地值（如果存在）。</summary>
      <returns>返回本地值，或在未设置本地值的情况下返回 sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</returns>
      <param name="dp">要为其检索值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>设置依赖项属性的值而不更改其值源。</summary>
      <param name="dp">要设置的依赖项属性的标识符。</param>
      <param name="value">新的本地值。</param>
      <exception cref="T:System.InvalidOperationException">尝试修改只读依赖项属性，或尝试修改密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 的类型不是为 <paramref name="dp" /> 属性注册时使用的正确类型。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>设置依赖项属性的本地值，该依赖项属性由其标识符指定。</summary>
      <param name="dp">要设置的依赖项属性的标识符。</param>
      <param name="value">新的本地值。</param>
      <exception cref="T:System.InvalidOperationException">尝试修改只读依赖项属性，或尝试修改密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 的类型不是为 <paramref name="dp" /> 属性注册时使用的正确类型。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>设置只读依赖项属性的本地值，该依赖项属性由其 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符指定。</summary>
      <param name="key">要设置的属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符。</param>
      <param name="value">新的本地值。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>返回一个值，该值指示序列化进程是否应序列化提供的依赖项属性的值。</summary>
      <returns>如果应对提供的依赖项属性的值进行序列化，则为 true；否则为 false。</returns>
      <param name="dp">应序列化的依赖项属性的标识符。</param>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>为所有 <see cref="T:System.Windows.DependencyObject" /> 派生类型实现基础类型缓存。</summary>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>获取当前 <see cref="T:System.Windows.DependencyObjectType" /> 的直接基类的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
      <returns>基类的类型。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>返回一个表示给定系统 (CLR) 类型的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
      <returns>一个表示系统 (CLR) 类型的 <see cref="T:System.Windows.DependencyObjectType" />。</returns>
      <param name="systemType">要转换的系统 (CLR) 类型。</param>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>返回此 <see cref="T:System.Windows.DependencyObjectType" /> 的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>为常数时间数组查找操作获取一个从零开始的唯一标识符。</summary>
      <returns>内部标识符。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>确定指定的对象是否是当前 <see cref="T:System.Windows.DependencyObjectType" /> 的实例。</summary>
      <returns>如果当前 <see cref="T:System.Windows.DependencyObjectType" /> 表示的类位于作为 <paramref name="d" /> 传递的 <see cref="T:System.Windows.DependencyObject" /> 的继承层次结构中，则为 true；否则为 false。</returns>
      <param name="dependencyObject">将与当前 <see cref="T:System.Windows.DependencyObjectType" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>确定当前 <see cref="T:System.Windows.DependencyObjectType" /> 是否派生自指定的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
      <returns>如果 <paramref name="dependencyObjectType" /> 参数和当前 <see cref="T:System.Windows.DependencyObjectType" /> 表示类的类型，并且由当前 <see cref="T:System.Windows.DependencyObjectType" /> 表示的类派生自 <paramref name="dependencyObjectType" /> 表示的类，则为 true。 否则为 false。 如果 <paramref name="dependencyObjectType" /> 和当前的 T:System.Windows.DependencyObjectType 表示相同的类，则此方法还返回 <see cref="false" />。</returns>
      <param name="dependencyObjectType">要比较的 <see cref="T:System.Windows.DependencyObjectType" />。</param>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>获取表示的公共语言运行时 (CLR) 系统类型的名称。</summary>
      <returns>表示的 CLR 系统类型的名称。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary>获取由此 <see cref="T:System.Windows.DependencyObjectType" /> 表示的公共语言运行时 (CLR) 系统类型。</summary>
      <returns>由此 <see cref="T:System.Windows.DependencyObjectType" /> 表示的 CLR 系统类型。</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>表示可通过方法设置的属性，如样式、数据绑定、动画和继承。</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>将另一类型作为已注册的依赖项属性的所有者来添加。</summary>
      <returns>对标识依赖项属性的原始 <see cref="T:System.Windows.DependencyProperty" /> 标识符的引用。 此标识符应由添加类作为 public static readonly 字段公开。</returns>
      <param name="ownerType">要作为此依赖项对象的所有者添加的类型。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>将另一类型作为已注册的依赖项属性的所有者来添加，以便在依赖项属性位于所提供的所有者类型上时为其提供依赖项属性元数据。</summary>
      <returns>对标识依赖项属性的原始 <see cref="T:System.Windows.DependencyProperty" /> 标识符的引用。 此标识符应由添加类作为 public static readonly 字段公开。</returns>
      <param name="ownerType">要作为此依赖项对象的所有者添加的类型。</param>
      <param name="typeMetadata">一种元数据，当依赖项对象存在于提供的类型上时它限定该依赖项对象。</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>获取依赖项对象的默认元数据。</summary>
      <returns>依赖项对象的默认元数据。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>返回此 <see cref="T:System.Windows.DependencyProperty" /> 的哈希代码。</summary>
      <returns>此 <see cref="T:System.Windows.DependencyProperty" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>为此依赖项属性（当它位于指定的现有类型上时）返回元数据。</summary>
      <returns>属性元数据对象。</returns>
      <param name="forType">从中检索依赖项属性元数据的特定类型。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>为此依赖项属性（当它位于指定的对象实例上时）返回元数据。</summary>
      <returns>属性元数据对象。</returns>
      <param name="dependencyObject">一个进行类型检查的依赖项对象，用以确定元数据应来自依赖项对象的哪个类型特定版本。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary>为此依赖项属性（当它位于指定类型上时）返回元数据。</summary>
      <returns>属性元数据对象。</returns>
      <param name="dependencyObjectType">一个特定对象，该对象记录需要来自哪个依赖项对象类型的依赖项对象元数据。</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>获取唯一标识依赖项对象的内部生成值。</summary>
      <returns>唯一数字标识符。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>确定指定的值对于该依赖项对象的类型是否可接受（与原依赖项对象注册中提供的属性类型相对照）。</summary>
      <returns>如果指定的值是已注册的属性类型或可接受的派生类型，则为 true；否则为 false。</returns>
      <param name="value">要检查的值。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>确定所提供的值通过基本类型检查后是否被属性类型接受，以及它是否有可能在该类型的值的允许范围以内。</summary>
      <returns>如果值是可接受的，并且具有正确的类型或派生类型，则为 true；否则为 false。</returns>
      <param name="value">要检查的值。</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>获取依赖项属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>当此依赖项属性位于指定类型的实例上时为其指定替换元数据，以在该依赖项属性继承自基类型时重写该属性已存在的元数据。</summary>
      <param name="forType">一种类型，在该类型上继承该依赖项对象并将应用所提供的替换元数据。</param>
      <param name="typeMetadata">一种元数据，它将应用于重写类型上的依赖项对象。</param>
      <exception cref="T:System.InvalidOperationException">尝试重写只读依赖项对象上的元数据（不能使用此签名完成该操作）。</exception>
      <exception cref="T:System.ArgumentException">当依赖项对象存在于提供的类型上时，已为该依赖项对象建立元数据。</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>当只读依赖项属性位于指定类型的实例上时为其提供替换元数据，以便重写在最初注册依赖项属性时提供的元数据。 您必须为只读依赖项对象传递 <see cref="T:System.Windows.DependencyPropertyKey" />，以避免引发异常。</summary>
      <param name="forType">一种类型，在该类型上继承该依赖项对象并将应用所提供的替换元数据。</param>
      <param name="typeMetadata">一种元数据，它将应用于重写类型上的依赖项对象。</param>
      <param name="key">只读依赖项属性的访问键。</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>获取使用属性系统注册依赖项对象或者将自己作为属性所有者添加的对象的类型。</summary>
      <returns>注册属性或者将自己作为属性所有者添加的对象的类型。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>获取依赖项对象用于其值的类型。</summary>
      <returns>属性值的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>获取一个值，该值指示由此 <see cref="T:System.Windows.DependencyProperty" /> 实例标识的依赖项对象是否为只读依赖项对象。</summary>
      <returns>如果该依赖项对象为只读属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>使用指定的属性名称、属性类型和所有者类型注册依赖项属性。</summary>
      <returns>一个依赖项对象标识符，应使用它在您的类中设置 public static readonly 字段的值。 然后，在以后使用该标识符引用依赖项对象，用于某些操作，例如以编程方式设置其值，或者获取元数据。</returns>
      <param name="name">要注册的依赖项对象的名称。 在所有者类型的注册命名空间内，名称必须是唯一的。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>使用指定的属性名称、属性类型、所有者类型和属性元数据注册依赖项属性。</summary>
      <returns>一个依赖项对象标识符，应使用它在您的类中设置 public static readonly 字段的值。 然后，在以后使用该标识符引用依赖项对象，用于某些操作，例如以编程方式设置其值，或者获取元数据。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
      <param name="typeMetadata">依赖项对象的属性元数据。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>使用指定的属性名称、属性类型、所有者类型、属性元数据和属性的值验证回调来注册依赖项属性。</summary>
      <returns>一个依赖项对象标识符，应使用它在您的类中设置 public static readonly 字段的值。 然后，在以后使用该标识符引用依赖项对象，用于某些操作，例如以编程方式设置其值，或者获取元数据。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
      <param name="typeMetadata">依赖项对象的属性元数据。</param>
      <param name="validateValueCallback">对回调的引用，除了典型的类型验证之外，该引用还应执行依赖项对象值的任何自定义验证。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>使用指定的属性名称、属性类型和所有者类型注册附加属性。</summary>
      <returns>一个依赖项对象标识符，应使用它在您的类中设置 public static readonly 字段的值。 然后，在以后使用该标识符引用依赖项对象，用于某些操作，例如以编程方式设置其值，或者获取元数据。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>使用指定的属性名称、属性类型、所有者类型和属性元数据注册附加属性。</summary>
      <returns>一个依赖项对象标识符，应使用它在您的类中设置 public static readonly 字段的值。 然后，在以后使用该标识符引用依赖项对象，用于某些操作，例如以编程方式设置其值，或者获取元数据。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
      <param name="defaultMetadata">依赖项对象的属性元数据。 这可能包括默认值以及其他特性。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>使用指定的属性名称、所有者类型、属性元数据和属性的值验证回调来注册附加属性。</summary>
      <returns>一个依赖项对象标识符，应使用它在您的类中设置 public static readonly 字段的值。 然后，在以后使用该标识符引用依赖项对象，用于某些操作，例如以编程方式设置其值，或者获取元数据。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
      <param name="defaultMetadata">依赖项对象的属性元数据。 这可能包括默认值以及其他特性。</param>
      <param name="validateValueCallback">对回调的引用，除了典型的类型验证之外，该引用还应执行依赖项对象值的任何自定义验证。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>使用指定的属性类型、所有者类型和属性元数据来注册只读附加属性。</summary>
      <returns>一种依赖项对象项，应使用它在您的类中设置静态只读字段的值，然后，在以后使用该字段的值引用依赖项对象。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
      <param name="defaultMetadata">依赖项对象的属性元数据。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>使用指定的属性类型、所有者类型、属性元数据和验证回调来注册只读附加属性。</summary>
      <returns>一种依赖项对象项，应使用它在您的类中设置静态只读字段的值，然后，使用该字段的值引用依赖项对象。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
      <param name="defaultMetadata">依赖项对象的属性元数据。</param>
      <param name="validateValueCallback">对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖项对象值的任何自定义验证。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>使用指定的属性类型、所有者类型和属性元数据来注册只读依赖项属性。</summary>
      <returns>一种依赖项对象项，应使用它在您的类中设置静态只读字段的值，然后，使用该字段的值引用依赖项对象。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
      <param name="typeMetadata">依赖项对象的属性元数据。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>使用指定的属性类型、所有者类型、属性元数据和验证回调来注册只读依赖项属性。</summary>
      <returns>一种依赖项对象项，应使用它在您的类中设置静态只读字段的值，然后，在以后使用该字段的值引用依赖项对象。</returns>
      <param name="name">要注册的依赖项对象的名称。</param>
      <param name="propertyType">属性的类型。</param>
      <param name="ownerType">正注册依赖项对象的所有者类型。</param>
      <param name="typeMetadata">依赖项对象的属性元数据。</param>
      <param name="validateValueCallback">对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖项对象值的任何自定义验证。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary>返回依赖项属性的字符串表示形式。</summary>
      <returns>依赖项属性的字符串表示形式。</returns>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>指定由 WPF 属性系统使用的静态值而非 null，以指示属性存在，但其值未经属性系统设置。</summary>
      <returns>未设置值。 实际上，这是对 <see cref="T:System.Object" /> 构造函数的调用结果。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>获取依赖项对象的值验证回调。</summary>
      <returns>最初依赖项对象注册时为 <paramref name="validateValueCallback" /> 参数提供的该依赖项对象的值验证回调。</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>为各种属性更改事件提供数据。 通常，这些事件会报告只读依赖项属性的值中的有效值更改。 另一种用法是作为 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现的一部分。</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>初始化 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 类的新实例。</summary>
      <param name="property">更改的依赖项属性的标识符。</param>
      <param name="oldValue">相关事件报告更改或状态更改之前的属性的值。</param>
      <param name="newValue">相关事件报告更改或状态更改之后的属性的值。</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>确定提供的对象是否与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同。</summary>
      <returns>如果提供的对象与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同，则为 true；否则为 false。</returns>
      <param name="obj">与当前的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 比较的对象。</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>确定提供的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 是否与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同。</summary>
      <returns>如果提供的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同，则为 true；否则为 false。</returns>
      <param name="args">要与当前的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 进行比较的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>获取此 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 的哈希代码。</summary>
      <returns>带符号的 32 位整数哈希代码。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>获取发生更改之后的属性的值。</summary>
      <returns>发生更改之后的属性值。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>获取发生更改之前的属性的值。</summary>
      <returns>发生更改之前的属性值。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>确定两个指定的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 对象是否具有相同的值。</summary>
      <returns>如果两个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 实例等效，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <param name="right">要比较的第二个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>确定两个指定的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 对象是否不同。</summary>
      <returns>如果两个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 实例不同，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <param name="right">要比较的第二个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>获取发生值更改的依赖项属性的标识符。</summary>
      <returns>发生值更改的依赖项属性的标识符字段。</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>表示将处理某些事件的方法，这些事件在特定的 <see cref="T:System.Windows.DependencyObject" /> 实现上的 <see cref="T:System.Windows.DependencyProperty" /> 发生更改时引发。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>提供依赖项对象标识符，以便对只读依赖项对象进行有限的写访问。</summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>获取与此专用只读依赖项对象标识符关联的依赖项对象标识符。</summary>
      <returns>相关的依赖项对象标识符。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>重写由此依赖项对象标识符表示的只读依赖项对象的元数据。</summary>
      <param name="forType">作为此依赖项对象存在基础以及应依据其重写元数据的类型。</param>
      <param name="typeMetadata">为此类型提供的元数据。</param>
      <exception cref="T:System.InvalidOperationException">尝试在读写依赖项对象上进行元数据重写（无法使用此签名完成该操作）。</exception>
      <exception cref="T:System.ArgumentException">当属性存在于提供的类型上时，已为该属性建立元数据。</exception>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>此类型支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>在 <see cref="T:System.Windows.Expression" /> 的实例与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.ExpressionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否能从源对象转换为 <see cref="T:System.Windows.Expression" /> 对象。</summary>
      <returns>始终为 false。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器能否将 <see cref="T:System.Windows.Expression" /> 对象转换为特定的目标类型。</summary>
      <returns>始终为 false。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将所提供的值转换为 <see cref="T:System.Windows.Expression" /> 类型。</summary>
      <returns>始终引发异常，并返回 null。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的对象。</param>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将所提供的 <see cref="T:System.Windows.Expression" /> 对象转换为指定的类型。</summary>
      <returns>始终引发异常，并返回 null。</returns>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>定义一个对象，该对象具有可修改状态和只读（冻结）状态。 派生自 <see cref="T:System.Windows.Freezable" /> 的类提供详细的更改通知，可以是不可变的，并且可以进行自我克隆。</summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Freezable" /> 派生类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>获取一个值，该值指示是否可将对象变为不可修改。</summary>
      <returns>如果当前对象可以变为不可修改，或者已经不可修改，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>在修改 <see cref="T:System.Windows.Freezable" /> 或其包含的对象时发生。</summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>创建此 <see cref="T:System.Windows.Freezable" /> 的可修改复本，以制作该对象值的深层副本。 在复制此对象的依赖项对象时，此方法会复制表达式（可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>使用基（未经过动画处理的）属性值使该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的复本（深层副本）。</summary>
      <param name="sourceFreezable">要克隆的对象。</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>使用 <see cref="T:System.Windows.Freezable" /> 的当前值创建其可修改复本（深层副本）。</summary>
      <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>使用当前属性值使该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的可修改复本（深层副本）。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Freezable" />。</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>初始化 <see cref="T:System.Windows.Freezable" /> 类的新实例。</summary>
      <returns>新实例。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>在派生类中实现时，创建 <see cref="T:System.Windows.Freezable" /> 派生类的新实例。</summary>
      <returns>新实例。</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>使当前对象变为不可修改并将其 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 true。</summary>
      <exception cref="T:System.InvalidOperationException">无法使 <see cref="T:System.Windows.Freezable" /> 变为不可修改。</exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>如果 <paramref name="isChecking" /> 参数为 true，则此方法指示是否可将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改。 如果 <paramref name="isChecking" /> 参数为 false，则此方法尝试将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改，并指示操作是否成功。</summary>
      <returns>当 <paramref name="isChecking" /> 为 true 时，如果可以将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改，则此方法返回 true；如果无法将其变为不可修改，则返回 false。 当 <paramref name="isChecking" /> 为 false 时，如果指定的 <see cref="T:System.Windows.Freezable" /> 目前已经不可修改，则此方法返回 true；如果无法将其变为不可修改，则返回 false。</returns>
      <param name="freezable">要检查或要变为不可修改的对象。 如果 <paramref name="isChecking" /> 为 true，则检查此对象，以确定是否可将其变为不可修改。 如果 <paramref name="isChecking" /> 为 false，则在可能的情况下将此对象变为不可修改。</param>
      <param name="isChecking">若为 true，则返回是否可冻结对象的指示（不实际冻结对象）；若为 false，则实际冻结对象。</param>
      <exception cref="T:System.InvalidOperationException">如果 <paramref name="isChecking" /> 为 false，则表明将 <paramref name="freezable" /> 变为不可修改的尝试已失败；对象目前处于未知状态（可能已将其部分冻结）。</exception>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>使 <see cref="T:System.Windows.Freezable" /> 对象变为不可修改或测试是否可将其变为不可修改。</summary>
      <returns>当 <paramref name="isChecking" /> 为 true 时，如果可以将 <see cref="T:System.Windows.Freezable" /> 变为不可修改，则此方法返回 true；如果无法将其变为不可修改，则返回 false。 当 <paramref name="isChecking" /> 为 false 时，如果指定的 <see cref="T:System.Windows.Freezable" /> 目前已经不可修改，则此方法返回 true，如果无法将其变为不可修改，则返回 false。</returns>
      <param name="isChecking">若为 true，则返回是否可冻结对象的指示（不实际冻结对象）；若为 false，则实际冻结对象。</param>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>使用基（未经过动画处理的）属性值创建 <see cref="T:System.Windows.Freezable" /> 的冻结副本。 由于副本已冻结，因此将通过引用复制任何冻结的子对象。</summary>
      <returns>
        <see cref="T:System.Windows.Freezable" /> 的冻结副本。 副本的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 true。</returns>
      <exception cref="T:System.InvalidOperationException">无法冻结此 <see cref="T:System.Windows.Freezable" />，因为它包含表达式或经过动画处理的属性。</exception>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>使用基（未经过动画处理的）属性值使该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结复本。</summary>
      <param name="sourceFreezable">要复制的实例。</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>使用当前属性值创建 <see cref="T:System.Windows.Freezable" /> 的冻结副本。 由于副本已冻结，因此将通过引用复制任何冻结的子对象。</summary>
      <returns>
        <see cref="T:System.Windows.Freezable" /> 的冻结副本。 副本的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 true。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>使当前实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结复本。 如果对象具有经过动画处理的依赖项对象，则复制这些属性当前经过动画处理的值。</summary>
      <param name="sourceFreezable">要复制和冻结的 <see cref="T:System.Windows.Freezable" />。</param>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>获取一个值，该值指示对象当前是否可修改。</summary>
      <returns>如果对象已被冻结且不可修改，则为 true；如果对象可修改，则为 false。</returns>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>修改当前 <see cref="T:System.Windows.Freezable" /> 对象时调用。</summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>确保为刚刚设置的 <see cref="T:System.Windows.DependencyObjectType" /> 数据成员建立适当的上下文指针。</summary>
      <param name="oldValue">数据成员以前的值。</param>
      <param name="newValue">数据成员当前的值。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不应在代码中直接使用。</summary>
      <param name="oldValue">数据成员以前的值。</param>
      <param name="newValue">数据成员当前的值。</param>
      <param name="property">已更改的属性。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>重写 <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> 的 <see cref="T:System.Windows.DependencyObject" /> 实现，以便还调用任何 <see cref="E:System.Windows.Freezable.Changed" /> 处理程序来响应 <see cref="T:System.Windows.Freezable" /> 类型的发生变化的依赖项属性。</summary>
      <param name="e">事件数据，其中包含有关哪个属性发生了更改、其旧值和新值的信息。</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>确保正在从有效的线程访问 <see cref="T:System.Windows.Freezable" />。 <see cref="T:System.Windows.Freezable" /> 的继承者必须在任何 API 一开始读取不属于依赖项对象的数据成员时调用此方法。</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>为 <see cref="T:System.Windows.Freezable" /> 引发 <see cref="E:System.Windows.Freezable.Changed" /> 事件并调用其 <see cref="M:System.Windows.Freezable.OnChanged" /> 方法。 从 <see cref="T:System.Windows.Freezable" /> 派生的类应在任何 API 结束对未存储为依赖项属性的类成员的修改时调用此方法。</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>验证 <see cref="T:System.Windows.Freezable" /> 是否未被冻结，并且是否正在从有效的线程上下文中访问它。 <see cref="T:System.Windows.Freezable" /> 的继承项应当在任何 API 一开始写入不属于依赖项属性的数据成员时调用此方法。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Freezable" /> 实例已冻结，并且无法写入其成员。</exception>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>描述整数矩形的宽度、高度和位置。</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>用指定的 <see cref="P:System.Windows.Int32Rect.X" /> 和 <see cref="P:System.Windows.Int32Rect.Y" /> 坐标以及指定的 <see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" /> 来初始化 <see cref="T:System.Windows.Int32Rect" /> 的新实例。</summary>
      <param name="x">新的 <see cref="T:System.Windows.Int32Rect" /> 实例的 <see cref="P:System.Windows.Int32Rect.X" />，用于指定矩形左上角的 x 坐标。</param>
      <param name="y">新的 <see cref="T:System.Windows.Int32Rect" /> 实例的 <see cref="P:System.Windows.Int32Rect.Y" />，用于指定矩形左上角的 y 坐标。</param>
      <param name="width">新的 <see cref="T:System.Windows.Int32Rect" /> 实例的 <see cref="P:System.Windows.Int32Rect.Width" />，用于指定矩形的宽度。</param>
      <param name="height">新的 <see cref="T:System.Windows.Int32Rect" /> 实例的 <see cref="P:System.Windows.Int32Rect.Height" />，用于指定矩形的高度。</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>获取空矩形，这个特殊值表示没有位置或区域的矩形。</summary>
      <returns>一个没有位置或区域的空矩形。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>确定指定的矩形是否与此矩形相等。</summary>
      <returns>如果 o 为一个 <see cref="T:System.Windows.Int32Rect" /> 并且它与此矩形具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则为 true；否则为 false。</returns>
      <param name="o">要与当前矩形进行比较的对象。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>确定指定的矩形是否与此矩形相等。</summary>
      <returns>如果两个矩形具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则为 true；否则为 false。</returns>
      <param name="value">要与当前矩形进行比较的矩形。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>确定指定的矩形是否相等。</summary>
      <returns>如果 int32Rect1 与 int32Rect2 具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则为 true；否则为 false。</returns>
      <param name="int32Rect1">要比较的第一个矩形。</param>
      <param name="int32Rect2">要比较的第二个矩形。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>从此矩形的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" /> 值创建哈希代码。</summary>
      <returns>此矩形的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Int32Rect" /> 的 <see cref="P:System.Windows.Int32Rect.Width" /> and <see cref="P:System.Windows.Int32Rect.Height" /> 属性大于 0。</summary>
      <returns>如果 <see cref="T:System.Windows.Int32Rect" /> 的 <see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" /> 属性大于 0，则为 true；否则为 <paramref name="false" />。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>获取或设置矩形的高度。</summary>
      <returns>矩形的高度。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>获取一个值，该值指示矩形是否为空。</summary>
      <returns>如果矩形为空，则为 true；否则为 false。 默认值为“True”。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>比较两个矩形是否完全相等。</summary>
      <returns>如果 int32Rect1 与 int32Rect2 具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则为 true；否则为 false。</returns>
      <param name="int32Rect1">要比较的第一个矩形。</param>
      <param name="int32Rect2">要比较的第二个矩形。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>比较两个矩形是否不相等。</summary>
      <returns>如果 int32Rect1 与 int32Rect2 具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则为 false；否则，如果它们的这些值不完全相同，则为 true。</returns>
      <param name="int32Rect1">要比较的第一个矩形。</param>
      <param name="int32Rect2">要比较的第二个矩形。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>从指定的 <see cref="T:System.String" /> 表示形式创建一个 <see cref="T:System.Windows.Int32Rect" /> 结构。</summary>
      <returns>等效的 <see cref="T:System.Windows.Int32Rect" /> 结构。</returns>
      <param name="source">
        <see cref="T:System.Windows.Int32Rect" /> 的字符串表示形式。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式格式化当前实例的值。</summary>
      <returns>使用指定格式的当前实例的值。</returns>
      <param name="format">要使用的格式。</param>
      <param name="provider">要用于设置值格式的提供程序。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>创建此 <see cref="T:System.Windows.Int32Rect" /> 的字符串表示形式。</summary>
      <returns>一个字符串，其中包含与此 <see cref="T:System.Windows.Int32Rect" /> 结构相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>基于提供的 <see cref="T:System.IFormatProvider" /> 创建此 <see cref="T:System.Windows.Int32Rect" /> 的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Windows.Int32Rect" /> 实例的字符串表示形式。</returns>
      <param name="provider">要使用的格式提供程序。 如果提供程序为 null，则使用当前区域性。</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>获取或设置矩形的宽度。</summary>
      <returns>矩形的宽度。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>获取或设置矩形左上角的 x 坐标。</summary>
      <returns>矩形左上角的 x 坐标。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>获取或设置矩形左上角的 y 坐标。</summary>
      <returns>矩形左上角的 y 坐标。 默认值为 0。</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>在其他类型的实例和 <see cref="T:System.Windows.Int32Rect" /> 之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Int32RectConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Int32Rect" /> 的实例。</summary>
      <returns>如果可将类型转换为 <see cref="T:System.Windows.Int32Rect" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="sourceType">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Int32Rect" /> 的实例转换成其他类型。</summary>
      <returns>如果此 <see cref="T:System.Windows.Int32Rect" /> 可转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="destinationType">要计算用于转换的此 <see cref="T:System.Windows.Int32Rect" /> 的所需类型。</param>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试将指定类型转换成 <see cref="T:System.Windows.Int32Rect" />。</summary>
      <returns>通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Int32Rect" />。</returns>
      <param name="context">提供转换所需的上下文信息。</param>
      <param name="culture">要在转换过程中考虑的区域性信息。</param>
      <param name="value">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">如果指定的对象为 NULL 或者是无法转换为 <see cref="T:System.Windows.Int32Rect" /> 的类型，则引发该异常。</exception>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试将 <see cref="T:System.Windows.Int32Rect" /> 转换为指定类型。</summary>
      <returns>通过转换此 <see cref="T:System.Windows.Int32Rect" /> 创建的对象。</returns>
      <param name="context">提供转换所需的上下文信息。</param>
      <param name="culture">要在转换过程中考虑的区域性信息。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="destinationType">要将此 <see cref="T:System.Windows.Int32Rect" /> 转换到的类型。</param>
      <exception cref="T:System.NotSupportedException">如果 <paramref name="value" /> 为 null 或者不是 <see cref="T:System.Windows.Int32Rect" />，或者，如果 <paramref name="destinationType" /> 不是要转换的有效类型之一，则引发该异常。</exception>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>为希望通过 WeakEvent 模式和 <see cref="T:System.Windows.WeakEventManager" /> 接收事件的类提供事件侦听支持。</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>接收集中事件管理器中的事件。</summary>
      <returns>如果侦听器已对事件进行了处理，则为 true。 在 WPF 中，<see cref="T:System.Windows.WeakEventManager" /> 处理为侦听器未处理的事件注册侦听器被视为错误。 无论如何，如果此方法接收到它未能识别或处理的事件，它都应该返回 false。</returns>
      <param name="managerType">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
      <param name="sender">发出该事件的对象。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>表示本地设置的依赖项对象的属性标识符和属性值。</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.Windows.LocalValueEntry" /> 实例是否相等。</summary>
      <returns>此 <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> 实现比较 <see cref="P:System.Windows.LocalValueEntry.Property" /> 的各个值，并可能比较 <see cref="P:System.Windows.LocalValueEntry.Value" /> 的各个值。 <see cref="T:System.Windows.LocalValueEntry" /> 的 <see cref="P:System.Windows.LocalValueEntry.Property" /> 组件为值类型，因此将始终是按位比较。 对于 <see cref="P:System.Windows.LocalValueEntry.Value" /> 组件，如果它是值类型，此实现将使用按位比较。 对于具有引用类型的本地设置的属性，该行为将推迟到该类型的相等性确定机制中进行，因为它只在内部为两个值使用 == 运算符。 默认情况下，这将是值的引用相等性，因而整个 <see cref="T:System.Windows.LocalValueEntry" /> 的相等性将变为引用相等性。</returns>
      <param name="obj">与当前的 <see cref="T:System.Windows.LocalValueEntry" /> 进行比较的 <see cref="T:System.Windows.LocalValueEntry" />。</param>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>返回此 <see cref="T:System.Windows.LocalValueEntry" /> 的哈希代码。</summary>
      <returns>32 位带符号整数值。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>比较指定的 <see cref="T:System.Windows.LocalValueEntry" /> 实例，以确定它们是否相同。</summary>
      <returns>如果 <paramref name="obj1" /> <see cref="T:System.Windows.LocalValueEntry" /> 等于 <paramref name="obj2" /> <see cref="T:System.Windows.LocalValueEntry" />，则为 true；否则为 false。</returns>
      <param name="obj1">要比较的第一个实例。</param>
      <param name="obj2">要比较的第二个实例。</param>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>比较指定的 <see cref="T:System.Windows.LocalValueEnumerator" /> 实例，以确定它们是否不同。</summary>
      <returns>此实现比较 <see cref="P:System.Windows.LocalValueEntry.Property" /> 的值和 <see cref="T:System.Windows.LocalValueEntry" /> 的 <see cref="P:System.Windows.LocalValueEntry.Value" /> 组件。 <see cref="T:System.Windows.LocalValueEntry" /> 的 <see cref="P:System.Windows.LocalValueEntry.Property" /> 组件始终为值类型，所以此比较将始终是按位比较。 对于 <see cref="P:System.Windows.LocalValueEntry.Value" /> 组件，如果它是值类型，此实现将使用按位比较。 对于具有引用类型的本地设置的属性，该行为将推迟到该类型的相等性确定机制中进行，因为它只在内部为两个值使用 == 运算符。 默认情况下，这是值的引用相等性。</returns>
      <param name="obj1">要比较的第一个实例。</param>
      <param name="obj2">要比较的第二个实例。</param>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>获取本地设置的依赖项对象的标识符（由此条目表示）。</summary>
      <returns>本地设置的依赖项对象的标识符。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>获取本地设置的依赖项对象的值。</summary>
      <returns>本地设置的依赖项对象（对象形式）的值。</returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>为 <see cref="T:System.Windows.DependencyObject" /> 上存在的任何依赖项属性的本地值提供枚举支持。</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>获取在集合中表示的项数。</summary>
      <returns>集合中的项数。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前 <see cref="T:System.Windows.LocalValueEntry" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>确定提供的 <see cref="T:System.Windows.LocalValueEnumerator" /> 是否等效于此 <see cref="T:System.Windows.LocalValueEnumerator" />。</summary>
      <returns>如果指定的 <see cref="T:System.Windows.LocalValueEnumerator" /> 等于当前的 <see cref="T:System.Windows.LocalValueEnumerator" />，则为 true；否则为 false。</returns>
      <param name="obj">与当前的 <see cref="T:System.Windows.LocalValueEnumerator" /> 进行比较的 <see cref="T:System.Windows.LocalValueEnumerator" />。</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>返回当前 <see cref="T:System.Windows.LocalValueEnumerator" /> 的哈希代码。</summary>
      <returns>32 位整数哈希代码。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>比较两个指定的 <see cref="T:System.Windows.LocalValueEnumerator" /> 对象是否相同。</summary>
      <returns>如果 <paramref name="obj1" /> <see cref="T:System.Windows.LocalValueEnumerator" /> 等于 <paramref name="obj2" /> <see cref="T:System.Windows.LocalValueEnumerator" />，则为 true；否则为 false。</returns>
      <param name="obj1">要比较的第一个对象。</param>
      <param name="obj2">要比较的第二个对象。</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>比较两个指定的 <see cref="T:System.Windows.LocalValueEnumerator" /> 对象，以确定它们是否不相同。</summary>
      <returns>如果实例不相等，则为 true；否则为 false。</returns>
      <param name="obj1">要比较的第一个对象。</param>
      <param name="obj2">要比较的第二个对象。</param>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>实现对 <see cref="T:System.Windows.Markup.INameScope" /> 方法的基本 WPF 支持，这些方法用于向特定 XAML 名称范围中存储名称-对象映射或检索此类映射。 添加附加属性支持，以便更简单地在元素级别动态获取或设置 XAML 名称范围的名称。</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>初始化 <see cref="T:System.Windows.NameScope" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>向集合中添加一项。</summary>
      <param name="item">一个 <see cref="T:System.Collections.Generic.KeyValuePair`2" />（键为 <see cref="T:System.String" />，值为 <see cref="T:System.Object" />），表示要添加到 XAML 名称范围中的名称映射。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 的任一个或两个组件都为 null。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>向集合中添加一项。</summary>
      <param name="key">字符串键，即作为要添加的 XAML 名称范围映射的名称。</param>
      <param name="value">对象值，即要添加的 XAML 名称范围映射的对象引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>确定集合是否包含指定的项。</summary>
      <returns>如果指定的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 标识此 <see cref="T:System.Windows.NameScope" /> 中的现有映射，则为 true。 如果当前的 <see cref="T:System.Windows.NameScope" /> 中不存在指定的 <see cref="T:System.Collections.Generic.KeyValuePair`2" />，则为 false。</returns>
      <param name="item">要在集合中查找的项，指定为 <see cref="T:System.Collections.Generic.KeyValuePair`2" />（键为 <see cref="T:System.String" />，值为 <see cref="T:System.Object" />）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>返回此 <see cref="T:System.Windows.NameScope" /> 中是否已存在所提供的名称。</summary>
      <returns>如果指定的 <paramref name="key" /> 标识此 <see cref="T:System.Windows.NameScope" /> 中现有映射的名称，则为 true。 如果当前的 <see cref="T:System.Windows.NameScope" /> 中不存在指定的 <paramref name="key" />，则为 false。</returns>
      <param name="key">要查找的字符串键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>将集合的元素复制到一个数组中，从特定的数组索引开始。</summary>
      <param name="array">一维数组，是从集合中复制的元素的目标，并且索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>返回此 <see cref="T:System.Windows.NameScope" /> 中映射名称的集合中的项数。</summary>
      <returns>集合中的项数。</returns>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>根据提供的名称字符串，返回由此 <see cref="T:System.Windows.NameScope" /> 保留的 XAML 名称范围中的相应对象。</summary>
      <returns>用 <paramref name="name" /> 映射的所请求对象。 如果提供的 <paramref name="name" /> 为 null 或空字符串，或者未找到匹配的对象，则可返回 null。</returns>
      <param name="name">要检索其对象部分的现有映射的名称部分。</param>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>为 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性提供附加属性 get 访问器。</summary>
      <returns>一个 XAML 名称范围，作为 <see cref="T:System.Windows.Markup.INameScope" /> 实例。</returns>
      <param name="dependencyObject">要从中获取 XAML 名称范围的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>获取或设置具有指定键的项。</summary>
      <returns>以 <paramref name="key" /> 形式提供的 XAML 名称所映射的对象的值。</returns>
      <param name="key">映射到 get 或 set 的 XAML 名称映射的字符串名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 提供为 null。 - 或 - <paramref name="value" /> 作为用于设置操作的 null 提供。</exception>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>获取 <see cref="T:System.Windows.NameScope" /> 字典中键的集合。</summary>
      <returns>
        <see cref="T:System.Windows.NameScope" /> 字典中键的集合。</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>获取或设置动态附加的 <see cref="T:System.Windows.NameScope" /> 实例。</summary>
      <returns>特定对象上的附加名称范围。</returns>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>标识 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>将新的名称-对象对注册到当前的 XAML 名称范围中。</summary>
      <param name="name">要用于映射给定对象的名称。</param>
      <param name="scopedElement">要映射到所提供名称的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="scopedElement" /> 提供为 null。</exception>
      <exception cref="T:System.ArgumentException">提供的<paramref name="name" />为空字符串 - 或 - 提供的<paramref name="name" />包含对 XAML 名称无效的字符，因此被分析程序拒绝 - 或 - 提供的 <paramref name="name" /> 导致注册重复的名称。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从集合中移除特定对象。</summary>
      <returns>如果从集合中成功移除了项，则为 true；否则为 false。 如果在集合中没有找到该项，还会返回 false。</returns>
      <param name="item">要从集合中移除的对象，指定为 <see cref="T:System.Collections.Generic.KeyValuePair`2" />（键为 <see cref="T:System.String" />，值为 <see cref="T:System.Object" />）。</param>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>从集合中移除指定名称的映射。</summary>
      <returns>如果从集合中成功移除了项，则为 true；否则为 false。 如果在集合中没有找到该项，还会返回 false。</returns>
      <param name="key">字符串键，这是要移除的 XAML 名称范围映射的名称。</param>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>为 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性提供附加属性 set 访问器。</summary>
      <param name="dependencyObject">要更改其 XAML 名称范围的对象。</param>
      <param name="value">使用接口强制转换的新 XAML 名称范围。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>获取与指定的键相关联的值。</summary>
      <returns>如果 <see cref="T:System.Windows.NameScope" /> 包含以 <paramref name="key" /> 形式提供的名称的映射，则为 true。 否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定的键，则其中包含与该键关联的值；否则为 null 对象。 该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>从 XAML 名称范围中移除名称-对象映射。</summary>
      <param name="name">要移除的映射的名称。</param>
      <exception cref="T:System.ArgumentException">提供的<paramref name="name" />为空字符串。 - 或 - 提供的<paramref name="name" />尚未注册。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>获取 <see cref="T:System.Windows.NameScope" /> 字典中值的集合。</summary>
      <returns>
        <see cref="T:System.Windows.NameScope" /> 字典中值的集合。</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>表示二维空间内的 X 和 Y 坐标对。</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>创建一个包含指定坐标的新 <see cref="T:System.Windows.Point" /> 结构。</summary>
      <param name="x">新的 <see cref="T:System.Windows.Point" /> 结构的 X 坐标。</param>
      <param name="y">新的 <see cref="T:System.Windows.Point" /> 结构的 Y 坐标。</param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>将 <see cref="T:System.Windows.Vector" /> 与 <see cref="T:System.Windows.Point" /> 相加并将结果以 <see cref="T:System.Windows.Point" /> 结构返回。</summary>
      <returns>返回 <paramref name="point" /> 与 <paramref name="vector" /> 之和。</returns>
      <param name="point">要相加的 <see cref="T:System.Windows.Point" /> 结构。</param>
      <param name="vector">要相加的 <see cref="T:System.Windows.Vector" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否是 <see cref="T:System.Windows.Point" /> 以及它是否包含与此 <see cref="T:System.Windows.Point" /> 相同的坐标。</summary>
      <returns>如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Point" /> 并且包含与此 <see cref="T:System.Windows.Point" /> 相同的 <see cref="P:System.Windows.Point.X" /> 值和 <see cref="P:System.Windows.Point.Y" /> 值，则为 true；否则为 false。</returns>
      <param name="o">要比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。</summary>
      <returns>如果两个 <see cref="T:System.Windows.Point" /> 结构都包含相同的 <see cref="P:System.Windows.Point.X" /> 值和 <see cref="P:System.Windows.Point.Y" /> 值，则为 true；否则为 false。</returns>
      <param name="value">要与此实例进行比较的点。</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。</summary>
      <returns>如果 <paramref name="point1" /> 和 <paramref name="point2" /> 包含相同的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值，则为 true；否则为 false。</returns>
      <param name="point1">要比较的第一个点。</param>
      <param name="point2">要比较的第二个点。</param>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>返回该 <see cref="T:System.Windows.Point" /> 的哈希代码。</summary>
      <returns>此 <see cref="T:System.Windows.Point" /> 结构的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>将指定的 <see cref="T:System.Windows.Point" /> 结构转换为指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <returns>已转换的点。</returns>
      <param name="point">要转换的点。</param>
      <param name="matrix">变换矩阵。</param>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>将某个点的 <see cref="P:System.Windows.Point.X" /> 坐标和 <see cref="P:System.Windows.Point.Y" /> 坐标偏移指定的量。</summary>
      <param name="offsetX">该点的 <see cref="P:System.Windows.Point.X" /> 坐标偏移量</param>
      <param name="offsetY">该 点的 <see cref="P:System.Windows.Point.Y" /> 坐标偏移量。</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>将指定的 <see cref="T:System.Windows.Point" /> 平移指定的 <see cref="T:System.Windows.Vector" /> 并返回结果。</summary>
      <returns>将指定点平移指定的向量所得的结果。</returns>
      <param name="point">要平移的点。</param>
      <param name="vector">
        <paramref name="point" /> 的平移量。</param>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。</summary>
      <returns>如果两个点（即 <paramref name="point1" /> 和 <paramref name="point2" />）的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标都相等，则为 true；否则为 false。</returns>
      <param name="point1">要比较的第一个 <see cref="T:System.Windows.Point" /> 结构。</param>
      <param name="point2">要比较的第二个 <see cref="T:System.Windows.Point" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>创建一个 <see cref="T:System.Windows.Vector" /> 结构，该结构的 <see cref="P:System.Windows.Vector.X" /> 值等于该点的 <see cref="P:System.Windows.Point.X" /> 值，且 <see cref="P:System.Windows.Vector.Y" /> 值等于该点的 <see cref="P:System.Windows.Point.Y" /> 值。</summary>
      <returns>一个向量，它的 <see cref="P:System.Windows.Vector.X" /> 值等于该点的 <see cref="P:System.Windows.Point.X" /> 值，且 <see cref="P:System.Windows.Vector.Y" /> 值等于该点的 <see cref="P:System.Windows.Point.Y" /> 值。</returns>
      <param name="point">要变换的点。</param>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>创建一个 <see cref="T:System.Windows.Size" /> 结构，该结构的 <see cref="P:System.Windows.Size.Width" /> 等于此点的 <see cref="P:System.Windows.Point.X" /> 值，且 <see cref="P:System.Windows.Size.Height" /> 等于此点的 <see cref="P:System.Windows.Point.Y" /> 值。</summary>
      <returns>一个 <see cref="T:System.Windows.Size" /> 结构，它的 <see cref="P:System.Windows.Size.Width" /> 等于此点的 <see cref="P:System.Windows.Point.X" /> 值，且 <see cref="P:System.Windows.Size.Height" /> 等于此点的 <see cref="P:System.Windows.Point.Y" /> 值。</returns>
      <param name="point">要变换的点。</param>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>比较两个 <see cref="T:System.Windows.Point" /> 结构是否不相等。</summary>
      <returns>如果 <paramref name="point1" /> 和 <paramref name="point2" /> 的 <see cref="P:System.Windows.Point.X" /> 或 <see cref="P:System.Windows.Point.Y" /> 坐标不同，则为 true；如果 <paramref name="point1" /> 和 <paramref name="point2" /> 的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标相同，则为 false。</returns>
      <param name="point1">要比较的第一个点。</param>
      <param name="point2">要比较的第二个点。</param>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>将指定的 <see cref="T:System.Windows.Point" /> 转换为指定的 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <returns>使用指定的矩阵转换指定点所得的结果。</returns>
      <param name="point">要转换的点。</param>
      <param name="matrix">变换矩阵。</param>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>从指定的 <see cref="T:System.Windows.Point" /> 中减去另一个指定的 <see cref="T:System.Windows.Point" /> 并将差作为 <see cref="T:System.Windows.Vector" /> 返回。</summary>
      <returns>
        <paramref name="point1" /> 和 <paramref name="point2" /> 之间的差值。</returns>
      <param name="point1">要从中减去 <paramref name="point2" /> 的点。</param>
      <param name="point2">要从 <paramref name="point1" /> 中减去的点。</param>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>从指定的 <see cref="T:System.Windows.Point" /> 减去指定的 <see cref="T:System.Windows.Vector" /> 并返回所得的 <see cref="T:System.Windows.Point" />。</summary>
      <returns>
        <paramref name="point" /> 和 <paramref name="vector" /> 之间的差值。</returns>
      <param name="point">要从中减去 <paramref name="vector" /> 的点。</param>
      <param name="vector">要从 <paramref name="point1" /> 中减去的向量</param>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>从指定的 <see cref="T:System.String" /> 构造 <see cref="T:System.Windows.Point" />。</summary>
      <returns>等效的 <see cref="T:System.Windows.Point" /> 结构。</returns>
      <param name="source">点的字符串表示形式。</param>
      <exception cref="T:System.FormatException">
        <paramref name="source" /> 不是由两个逗号分隔或空格分隔的双精度值组成。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含两个数字。 - 或 - <paramref name="source" /> 包含的分隔符过多。</exception>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>从指定的 <see cref="T:System.Windows.Point" /> 中减去另一个指定的 <see cref="T:System.Windows.Point" /> 并将差作为 <see cref="T:System.Windows.Vector" /> 返回。</summary>
      <returns>
        <paramref name="point1" /> 和 <paramref name="point2" /> 之间的差值。</returns>
      <param name="point1">要从中减去 <paramref name="point2" /> 的点。</param>
      <param name="point2">要从 <paramref name="point1" /> 中减去的点。</param>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>从指定的 <see cref="T:System.Windows.Point" /> 减去指定的 <see cref="T:System.Windows.Vector" /> 并返回所得的 <see cref="T:System.Windows.Point" />。</summary>
      <returns>
        <paramref name="point" /> 和 <paramref name="vector" /> 之间的差值。</returns>
      <param name="point">要从中减去 <paramref name="vector" /> 的点。</param>
      <param name="vector">要从 <paramref name="point" /> 中减去的 <paramref name="vector" />。</param>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不应在代码中直接使用。 有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。</summary>
      <returns>一个字符串，包含采用指定格式的当前实例的值。</returns>
      <param name="format">指定要使用的格式的字符串。 - 或 - null，表示使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</param>
      <param name="provider">用于格式化该值的 IFormatProvider。 - 或 - 从操作系统的当前区域设置中获取数字格式信息的 null。</param>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>创建此 <see cref="T:System.Windows.Point" /> 的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含此 <see cref="T:System.Windows.Point" /> 结构的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>创建此 <see cref="T:System.Windows.Point" /> 的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含此 <see cref="T:System.Windows.Point" /> 结构的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值。</returns>
      <param name="provider">区域性特定的格式设置信息。</param>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>获取或设置此 <see cref="T:System.Windows.Point" /> 结构的 <see cref="P:System.Windows.Point.X" /> 坐标值。</summary>
      <returns>此 <see cref="T:System.Windows.Point" /> 结构的 <see cref="P:System.Windows.Point.X" /> 坐标值。默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>获取或设置此 <see cref="T:System.Windows.Point" /> 的 <see cref="P:System.Windows.Point.Y" /> 坐标值。</summary>
      <returns>此 <see cref="T:System.Windows.Point" /> 结构的 <see cref="P:System.Windows.Point.Y" /> 坐标值。默认值为 0。</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>在 <see cref="T:System.Windows.Point" /> 与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.PointConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将一个对象从给定类型转换为 <see cref="T:System.Windows.Point" /> 的实例。</summary>
      <returns>如果可将类型转换为 <see cref="T:System.Windows.Point" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="sourceType">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Point" /> 的实例转换成其他类型。</summary>
      <returns>如果此 <see cref="T:System.Windows.Point" /> 可转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="destinationType">要计算用于转换的此 <see cref="T:System.Windows.Point" /> 的所需类型。</param>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试将指定对象转换为 <see cref="T:System.Windows.Point" />。</summary>
      <returns>通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Point" />。</returns>
      <param name="context">提供转换所需的上下文信息。</param>
      <param name="culture">要在转换过程中考虑的区域性信息。</param>
      <param name="value">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">如果指定的对象为 NULL 或者是无法转换为 <see cref="T:System.Windows.Point" /> 的类型，则引发该异常。</exception>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试将 <see cref="T:System.Windows.Point" /> 转换为指定类型。</summary>
      <returns>通过转换此 <see cref="T:System.Windows.Point" /> 创建的对象。</returns>
      <param name="context">提供转换所需的上下文信息。</param>
      <param name="culture">要在转换过程中考虑的区域性信息。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Point" />。</param>
      <param name="destinationType">要将此 <see cref="T:System.Windows.Point" /> 转换到的类型。</param>
      <exception cref="T:System.NotSupportedException">如果 <paramref name="value" /> 为 null 或者不是 <see cref="T:System.Windows.Point" />，或者，如果 <paramref name="destinationType" /> 不是要转换的有效类型之一，则引发该异常。</exception>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>表示在依赖项对象的有效属性值更改时调用的回调。</summary>
      <param name="d">属性值已更改的 <see cref="T:System.Windows.DependencyObject" />。</param>
      <param name="e">由任何事件发出的事件数据，该事件跟踪对此属性的有效值的更改。</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>定义依赖项对象在应用于特定类型（包括该属性向其注册的条件）时行为的某些方面。</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary>初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>使用此元数据将应用于的依赖项对象的指定默认值，初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。</summary>
      <param name="defaultValue">要为依赖项对象指定的默认值，通常作为某种特定类型的值提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；请参见“备注”。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>用指定的默认值和 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现引用初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。</summary>
      <param name="defaultValue">依赖项对象的默认值，通常作为某种特定类型的值提供。</param>
      <param name="propertyChangedCallback">对处理程序实现的引用，每当属性的有效值更改时，属性系统都将调用该处理程序实现。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；请参见“备注”。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>用指定的默认值和回调初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。</summary>
      <param name="defaultValue">依赖项对象的默认值，通常作为某种特定类型的值提供。</param>
      <param name="propertyChangedCallback">对处理程序实现的引用，每当属性的有效值更改时，属性系统都将调用该处理程序实现。</param>
      <param name="coerceValueCallback">对处理程序实现的引用，每当属性系统对该属性调用 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 时都将调用此处理程序实现。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；请参见“备注”。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>用指定的 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现引用初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。</summary>
      <param name="propertyChangedCallback">对处理程序实现的引用，每当属性的有效值更改时，属性系统都将调用该处理程序实现。</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>获取或设置对此元数据中所指定 <see cref="T:System.Windows.CoerceValueCallback" /> 实现的引用。</summary>
      <returns>一个 <see cref="T:System.Windows.CoerceValueCallback" /> 实现引用。</returns>
      <exception cref="T:System.InvalidOperationException">将元数据属性应用到依赖项对象操作后，将无法设置该属性。</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>获取或设置依赖项属性的默认值。</summary>
      <returns>属性的默认值。 用无参数构造函数创建的 <see cref="T:System.Windows.PropertyMetadata" /> 实例上的默认值将为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；请参见“备注”。</returns>
      <exception cref="T:System.ArgumentException">创建之后将无法设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；请参见“备注”。</exception>
      <exception cref="T:System.InvalidOperationException">将元数据属性应用到依赖项对象操作后，将无法设置该属性。</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>获取一个值，该值确定是否已通过某种方式将元数据应用于属性，从而导致该元数据实例变为不可变状态。</summary>
      <returns>如果元数据实例不可变，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>将此元数据与基元数据合并。</summary>
      <param name="baseMetadata">要与此实例的值合并的基元数据。</param>
      <param name="dp">要应用此元数据的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>当此元数据已经应用到一个属性时（这表明正在密封元数据）调用。</summary>
      <param name="dp">已应用了元数据的依赖项对象。</param>
      <param name="targetType">与此元数据关联的类型（如果这是特定于类型的元数据）。 如果这是默认元数据，则此值为 null 引用。</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>获取或设置对此元数据中所指定 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现的引用。</summary>
      <returns>一个 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现引用。</returns>
      <exception cref="T:System.InvalidOperationException">将元数据属性应用到依赖项对象操作后，将无法设置该属性。</exception>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>描述矩形的宽度、高度和位置。</summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定的 x 坐标、y 坐标、宽度和高度。</summary>
      <param name="x">矩形左上角的 x 坐标。</param>
      <param name="y">矩形左上角的 y 坐标。</param>
      <param name="width">矩形的宽度。</param>
      <param name="height">矩形的高度。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> 是负值。 - 或 - <paramref name="height" /> 是负值。</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构的大小刚好足以包含两个指定点。</summary>
      <param name="point1">新矩形必须包含的第一个点。</param>
      <param name="point2">新矩形必须包含的第二个点。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定的左上角位置和指定的宽度及高度。</summary>
      <param name="location">一个点，指定矩形的左上角位置。</param>
      <param name="size">一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构的大小刚好足以包含指定点及指定点和指定向量之和。</summary>
      <param name="point">矩形必须包含的第一个点。</param>
      <param name="vector">指定点的偏移量。 所得矩形的大小将刚好足以包含这两个点。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定大小，位于 (0,0)。</summary>
      <param name="size">一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>获取矩形底边的 y 轴值。</summary>
      <returns>矩形底边的 y 轴值。 如果矩形为空，则该值为 <see cref="F:System.Double.NegativeInfinity" />。</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>获取矩形的左下角位置</summary>
      <returns>矩形的左下角位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>获取矩形的右下角位置。</summary>
      <returns>矩形的左下角位置。</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>指示矩形中是否包含指定的 x 坐标和 y 坐标。</summary>
      <returns>如果（<paramref name="x" />、<paramref name="y" />）包含在矩形中，则为 true；否则为 false。</returns>
      <param name="x">要检查的点的 x 坐标。</param>
      <param name="y">要检查的点的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>指示矩形中是否包含指定点。</summary>
      <returns>如果矩形中包含指定点，则为 true；否则为 false。</returns>
      <param name="point">要检查的点。</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>指示矩形中是否包含指定矩形。</summary>
      <returns>如果 <paramref name="rect" /> 完全包含在矩形中，则为 true；否则为 false。</returns>
      <param name="rect">要检查的矩形。</param>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>获取一个特殊值，该值表示没有位置或区域的矩形。</summary>
      <returns>空矩形，其 <see cref="P:System.Windows.Rect.X" /> 和 <see cref="P:System.Windows.Rect.Y" /> 属性值为 <see cref="F:System.Double.PositiveInfinity" />，<see cref="P:System.Windows.Rect.Width" /> 和 <see cref="P:System.Windows.Rect.Height" /> 属性值为 <see cref="F:System.Double.NegativeInfinity" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>指示指定对象是否等于当前矩形。</summary>
      <returns>如果 <paramref name="o" /> 为 <see cref="T:System.Windows.Rect" />，并且具有与当前矩形相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 true；否则为 false。</returns>
      <param name="o">要与当前矩形进行比较的对象。</param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>指示指定矩形是否等于当前矩形。</summary>
      <returns>如果指定矩形具有与当前矩形相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 true；否则为 false。</returns>
      <param name="value">要与当前矩形进行比较的矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>指示指定的矩形是否相等。</summary>
      <returns>如果这些矩形具有相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 true；否则为 false。</returns>
      <param name="rect1">要比较的第一个矩形。</param>
      <param name="rect2">要比较的第二个矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>创建矩形的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Windows.Rect" /> 结构的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>获取或设置矩形的高度。</summary>
      <returns>一个正数，表示矩形的高度。 默认值为 0。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Height" /> 设置为一个负值。</exception>
      <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.Windows.Rect.Empty" /> 矩形上设置 <see cref="P:System.Windows.Rect.Height" />。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>使用指定的宽度和高度量向所有方向放大或缩小矩形。</summary>
      <param name="width">矩形左边和右边的放大或缩小量。</param>
      <param name="height">矩形上边和下边的放大或缩小量。</param>
      <exception cref="T:System.InvalidOperationException">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>创建一个矩形，该矩形是通过将指定矩形向所有方向放大或缩小指定宽度和高度而得到的。</summary>
      <returns>所得矩形。</returns>
      <param name="rect">要修改的 <see cref="T:System.Windows.Rect" /> 结构。</param>
      <param name="width">矩形左边和右边的放大或缩小量。</param>
      <param name="height">矩形上边和下边的放大或缩小量。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> 是 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>返回矩形，该矩形是通过将指定矩形向所有方向放大指定 <see cref="T:System.Windows.Size" /> 而得到的。</summary>
      <returns>所得矩形。</returns>
      <param name="rect">要修改的 <see cref="T:System.Windows.Rect" /> 结构。</param>
      <param name="size">指定矩形的放大量。 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Left" /> 和 <see cref="P:System.Windows.Rect.Right" /> 属性的增量。 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Top" /> 和 <see cref="P:System.Windows.Rect.Bottom" /> 属性的增量。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> 是 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>使用指定的 <see cref="T:System.Windows.Size" /> 向所有方向放大矩形。</summary>
      <param name="size">指定矩形的放大量。 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Left" /> 和 <see cref="P:System.Windows.Rect.Right" /> 属性的增量。 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Top" /> 和 <see cref="P:System.Windows.Rect.Bottom" /> 属性的增量。</param>
      <exception cref="T:System.InvalidOperationException">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>查找当前矩形和指定矩形的交集，并将结果存储为当前矩形。</summary>
      <param name="rect">要与当前矩形相交的矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>返回指定矩形的交集。</summary>
      <returns>两个矩形的交集；如果不存在任何交集，则为 <see cref="P:System.Windows.Rect.Empty" />。</returns>
      <param name="rect1">要比较的第一个矩形。</param>
      <param name="rect2">要比较的第二个矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>指示指定矩形是否与当前矩形相交。</summary>
      <returns>如果指定矩形与当前矩形相交，则为 true；否则为 false。</returns>
      <param name="rect">要检查的矩形。</param>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>获取一个值，该值指示矩形是否为 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</summary>
      <returns>如果矩形为 <see cref="P:System.Windows.Rect.Empty" /> 矩形，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>获取矩形左边的 x 轴值。</summary>
      <returns>矩形左边的 x 轴值。</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>获取或设置矩形的左上角位置。</summary>
      <returns>矩形的左上角位置。 默认值为 (0, 0)。</returns>
      <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.Windows.Rect.Empty" /> 矩形上设置 <see cref="P:System.Windows.Rect.Location" />。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>将矩形沿水平和垂直方向移动指定的量。</summary>
      <param name="offsetX">水平移动矩形的量。</param>
      <param name="offsetY">垂直移动矩形的量。</param>
      <exception cref="T:System.InvalidOperationException">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>返回一个矩形，该矩形是通过将指定矩形偏移指定的水平和垂直量而得到的。</summary>
      <returns>所得矩形。</returns>
      <param name="rect">要移动的矩形。</param>
      <param name="offsetX">新矩形的水平偏移量。</param>
      <param name="offsetY">新矩形的垂直偏移量。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> 为 <see cref="P:System.Windows.Rect.Empty" />。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>返回一个矩形，该矩形是通过将指定矩形偏移指定向量而得到的。</summary>
      <returns>所得矩形。</returns>
      <param name="rect">原始矩形。</param>
      <param name="offsetVector">一个向量，指定新矩形的水平和垂直偏移量。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> 为 <see cref="P:System.Windows.Rect.Empty" />。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>将矩形移动指定向量。</summary>
      <param name="offsetVector">一个向量，指定矩形沿水平和垂直方向移动的量。</param>
      <exception cref="T:System.InvalidOperationException">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>比较两个矩形是否完全相等。</summary>
      <returns>如果这些矩形具有相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 true；否则为 false。</returns>
      <param name="rect1">要比较的第一个矩形。</param>
      <param name="rect2">要比较的第二个矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>比较两个矩形是否不相等。</summary>
      <returns>如果这些矩形具有不相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 true；否则为 false。</returns>
      <param name="rect1">要比较的第一个矩形。</param>
      <param name="rect2">要比较的第二个矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>根据指定的字符串表示形式创建新的矩形。</summary>
      <returns>所得矩形。</returns>
      <param name="source">矩形的字符串表示形式，格式为“x, y, width, height”。</param>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>获取矩形右边的 x 轴值。</summary>
      <returns>矩形右边的 x 轴值。</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>将当前矩形的大小与指定的 x 和 y 值相乘。</summary>
      <param name="scaleX">x 方向的比例因子。</param>
      <param name="scaleY">y 方向的比例因子。</param>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>获取或设置矩形的宽度和高度。</summary>
      <returns>一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</returns>
      <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.Windows.Rect.Empty" /> 矩形上设置 <see cref="P:System.Windows.Rect.Size" />。</exception>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式格式化当前实例的值。</summary>
      <returns>矩形的字符串表示形式。</returns>
      <param name="format">要使用的格式。 - 或 - null 引用（Visual Basic 中为 Nothing）将使用为 <see cref="T:System.IFormattable" /> 实现的类型所定义的默认格式。</param>
      <param name="provider">要用于设置值格式的提供程序。 - 或 - null 引用（Visual Basic 中为 Nothing）将从操作系统的当前区域设置中获取数字格式信息。</param>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>获取矩形顶边的 y 轴位置。</summary>
      <returns>矩形顶边的 y 轴位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>获取矩形的左上角位置。</summary>
      <returns>矩形的左上角位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>获取矩形的右上角位置。</summary>
      <returns>矩形的右上角位置。</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>返回矩形的字符串表示形式。</summary>
      <returns>当前矩形的字符串表示形式。 此字符串采用以下格式："<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />"。</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>使用指定的格式提供程序返回矩形的字符串表示形式。</summary>
      <returns>当前矩形的字符串表示形式，由指定的格式提供程序确定。</returns>
      <param name="provider">区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>通过应用指定矩阵来转换矩形。</summary>
      <param name="matrix">指定将应用转换的矩阵。</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>返回矩形，该矩形是通过向指定矩形应用指定矩阵而得到的。</summary>
      <returns>此操作生成的矩形。</returns>
      <param name="rect">作为转换基础的矩形。</param>
      <param name="matrix">指定将应用转换的矩阵。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>放大当前矩形，使其刚好足以包含指定点。</summary>
      <param name="point">要包含的点。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>放大当前矩形，使其刚好足以包含指定矩形。</summary>
      <param name="rect">要包含的矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>创建一个矩形，该矩形的大小刚好足以包含指定矩形和指定点。</summary>
      <returns>大小刚好足以包含指定矩形和指定点的矩形。</returns>
      <param name="rect">要包含的矩形。</param>
      <param name="point">要包含的点。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>创建一个矩形，该矩形的大小刚好足以包含两个指定矩形。</summary>
      <returns>所得矩形。</returns>
      <param name="rect1">要包含的第一个矩形。</param>
      <param name="rect2">要包含的第二个矩形。</param>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>获取或设置矩形的宽度。</summary>
      <returns>一个正数，表示矩形的宽度。 默认值为 0。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Width" /> 设置为一个负值。</exception>
      <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.Windows.Rect.Empty" /> 矩形上设置 <see cref="P:System.Windows.Rect.Width" />。</exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>获取或设置矩形左边的 x 轴值。</summary>
      <returns>矩形左边的 x 轴值。</returns>
      <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.Windows.Rect.Empty" /> 矩形上设置 <see cref="P:System.Windows.Rect.X" />。</exception>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>获取或设置矩形顶边的 y 轴值。</summary>
      <returns>矩形顶边的 y 轴值。</returns>
      <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.Windows.Rect.Empty" /> 矩形上设置 <see cref="P:System.Windows.Rect.Y" />。</exception>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>在 <see cref="T:System.Windows.Rect" /> 实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.RectConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Rect" /> 的实例。</summary>
      <returns>如果可将类型转换为 <see cref="T:System.Windows.Rect" />，则为 true；否则为 false。</returns>
      <param name="context">提供转换所需的上下文信息。</param>
      <param name="sourceType">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Rect" /> 转换成指定类型。</summary>
      <returns>如果可将 <see cref="T:System.Windows.Rect" /> 转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">提供转换所需的上下文信息。</param>
      <param name="destinationType">要计算用于转换的此 <see cref="T:System.Windows.Rect" /> 的所需类型。</param>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试将指定对象转换为 <see cref="T:System.Windows.Rect" />。</summary>
      <returns>通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Rect" />。</returns>
      <param name="context">提供转换所需的上下文信息。</param>
      <param name="culture">在转换时考虑的区域性信息。</param>
      <param name="value">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">如果指定的对象为 NULL 或者是无法转换为 <see cref="T:System.Windows.Rect" /> 的类型，则引发该异常。</exception>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试将 <see cref="T:System.Windows.Rect" /> 转换为指定类型。</summary>
      <returns>通过转换此 <see cref="T:System.Windows.Rect" /> 创建的对象。</returns>
      <param name="context">提供转换所需的上下文信息。</param>
      <param name="culture">转换过程中考虑的区域性信息。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Rect" />。</param>
      <param name="destinationType">要将此 <see cref="T:System.Windows.Rect" /> 转换到的类型。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 null。 - 或 - <paramref name="value" /> 不是 <see cref="T:System.Windows.Rect" />。 - 或 - <paramref name="destinationType" /> 不是转换的有效类型之一。</exception>
    </member>
    <member name="T:System.Windows.Size">
      <summary>实现用于描述对象的 <see cref="T:System.Windows.Size" /> 的结构。</summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>初始化 <see cref="T:System.Windows.Size" /> 结构的新实例，并为其分配初始 <paramref name="width" /> 和 <paramref name="height" />。</summary>
      <param name="width">
        <see cref="T:System.Windows.Size" /> 的实例的初始宽度。</param>
      <param name="height">
        <see cref="T:System.Windows.Size" /> 的实例的初始高度。</param>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>获取一个值，该值表示空的静态 <see cref="T:System.Windows.Size" />。</summary>
      <returns>
        <see cref="T:System.Windows.Size" /> 的空实例。</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>比较某个对象与 <see cref="T:System.Windows.Size" /> 的实例是否相等。</summary>
      <returns>如果大小相等，则为 true；否则为 false。</returns>
      <param name="o">要比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>比较某个值与 <see cref="T:System.Windows.Size" /> 的实例是否相等。</summary>
      <returns>如果 <see cref="T:System.Windows.Size" /> 的实例相等，则为 true；否则为 false。</returns>
      <param name="value">要与此 <see cref="T:System.Windows.Size" /> 的当前实例进行比较的大小。</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>比较 <see cref="T:System.Windows.Size" /> 的两个实例是否相等。</summary>
      <returns>如果 <see cref="T:System.Windows.Size" /> 的实例相等，则为 true；否则为 false。</returns>
      <param name="size1">要比较的第一个 <see cref="T:System.Windows.Size" /> 实例。</param>
      <param name="size2">要比较的第二个 <see cref="T:System.Windows.Size" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>获取此 <see cref="T:System.Windows.Size" /> 实例的哈希代码。</summary>
      <returns>此 <see cref="T:System.Windows.Size" /> 实例的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>获取或设置此 <see cref="T:System.Windows.Size" /> 实例的 <see cref="P:System.Windows.Size.Height" />。</summary>
      <returns>此 <see cref="T:System.Windows.Size" /> 实例的 <see cref="P:System.Windows.Size.Height" />。 默认值为 0。 该值不能为负数。</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>获取一个值，该值指示此 <see cref="T:System.Windows.Size" /> 实例是否为 <see cref="P:System.Windows.Size.Empty" />。</summary>
      <returns>如果此 Size 实例为 <see cref="P:System.Windows.Size.Empty" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>比较 <see cref="T:System.Windows.Size" /> 的两个实例是否相等。</summary>
      <returns>如果 <see cref="T:System.Windows.Size" /> 的两个实例相等，则为 true；否则为 false。</returns>
      <param name="size1">要比较的第一个 <see cref="T:System.Windows.Size" /> 实例。</param>
      <param name="size2">要比较的第二个 <see cref="T:System.Windows.Size" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>将 <see cref="T:System.Windows.Size" /> 的实例显式转换为 <see cref="T:System.Windows.Point" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Windows.Point" />，其值与此 <see cref="T:System.Windows.Size" /> 实例的值相等。</returns>
      <param name="size">要转换的 <see cref="T:System.Windows.Size" /> 值。</param>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>将 <see cref="T:System.Windows.Size" /> 的实例显式转换为 <see cref="T:System.Windows.Vector" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Windows.Vector" />，其值与此 <see cref="T:System.Windows.Size" /> 实例的值相等。</returns>
      <param name="size">要转换的 <see cref="T:System.Windows.Size" /> 值。</param>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>比较 <see cref="T:System.Windows.Size" /> 的两个实例是否不相等。</summary>
      <returns>如果 <see cref="T:System.Windows.Size" /> 的实例不相等，则为 true；否则为 false。</returns>
      <param name="size1">要比较的第一个 <see cref="T:System.Windows.Size" /> 实例。</param>
      <param name="size2">要比较的第二个 <see cref="T:System.Windows.Size" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>从转换后的 <see cref="T:System.String" /> 返回 <see cref="T:System.Windows.Size" /> 的实例。</summary>
      <returns>
        <see cref="T:System.Windows.Size" /> 的一个实例。</returns>
      <param name="source">一个要分析为 <see cref="T:System.Windows.Size" /> 值的 <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <returns>使用指定格式的当前实例的值。</returns>
      <param name="format">要使用的格式。</param>
      <param name="provider">要用于设置值格式的提供程序。</param>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>返回一个表示此 <see cref="T:System.Windows.Size" /> 对象的 <see cref="T:System.String" />。</summary>
      <returns>用于指定后跟高度的宽度的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>返回一个表示此 <see cref="T:System.Windows.Size" /> 实例的 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Windows.Size" /> 对象。</returns>
      <param name="provider">一个对象，提供用于控制格式设置的方式。</param>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>获取或设置此 <see cref="T:System.Windows.Size" /> 实例的 <see cref="P:System.Windows.Size.Width" />。</summary>
      <returns>此 <see cref="T:System.Windows.Size" /> 实例的 <see cref="P:System.Windows.Size.Width" />。 默认值为 0。 该值不能为负数。</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>在 <see cref="T:System.Windows.Size" /> 类的实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.SizeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将一个类从特定类型转换成 <see cref="T:System.Windows.Size" /> 实例。</summary>
      <returns>如果可以将 <paramref name="sourceType" /> 转换为 <see cref="T:System.Windows.Size" /> 实例，则为 true；否则为 false。</returns>
      <param name="context">提供有关某个组件的上下文信息。</param>
      <param name="sourceType">标识要计算用于转换的数据类型。</param>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Size" /> 的实例转换成不同类型。</summary>
      <returns>如果可以将 <see cref="T:System.Windows.Size" /> 的此实例转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">提供有关某个组件的上下文信息。</param>
      <param name="destinationType">标识要计算用于转换的数据类型。</param>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图将指定对象转换为 <see cref="T:System.Windows.Size" /> 实例。</summary>
      <returns>根据已转换的 <paramref name="source" /> 创建的 <see cref="T:System.Windows.Size" /> 实例。</returns>
      <param name="context">提供有关某个组件的上下文信息。</param>
      <param name="culture">转换过程中应考虑的区域性特定信息。</param>
      <param name="value">正在转换的源对象。</param>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试将 <see cref="T:System.Windows.Size" /> 的实例转换为指定类型。</summary>
      <returns>从 <see cref="T:System.Windows.Size" /> 的已转换实例创建的对象。</returns>
      <param name="context">提供有关某个组件的上下文信息。</param>
      <param name="culture">转换过程中应考虑的区域性特定信息。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Size" /> 实例。</param>
      <param name="destinationType">此 <see cref="T:System.Windows.Size" /> 实例被转换成的类型。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 是 null 或者不是 <see cref="T:System.Windows.Size" /> 的实例；或者 <paramref name="destinationType" /> 不是有效目标类型之一。</exception>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>为 Windows Presentation Foundation (WPF) 应用程序提供启动屏幕。</summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>使用指定的资源程序集初始化 <see cref="T:System.Windows.SplashScreen" /> 类的新实例。</summary>
      <param name="resourceAssembly">包含嵌入资源的程序集。</param>
      <param name="resourceName">嵌入资源的名称。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>使用指定的资源初始化 <see cref="T:System.Windows.SplashScreen" /> 类的新实例。</summary>
      <param name="resourceName">嵌入资源的名称。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>关闭初始屏幕。</summary>
      <param name="fadeoutDuration">一个 <see cref="T:System.TimeSpan" />，它指定初始屏幕在关闭操作启动后将需要多长时间淡化。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>显示初始屏幕。</summary>
      <param name="autoClose">设置为 true 以自动关闭初始屏幕；设置为 false 以手动关闭初始屏幕。</param>
      <exception cref="T:System.IO.IOException">未能找到构造函数中指定的资源。</exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>显示初始屏幕。</summary>
      <param name="autoClose">设置为 true 以自动关闭初始屏幕；设置为 false 以手动关闭初始屏幕。</param>
      <param name="topMost">如果初始屏幕窗口应该使用 WS_EX_TOPMOST 样式，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>表示用作回调的方法，用于验证依赖项属性的值是否有效。</summary>
      <returns>如果该值通过了验证，则为 true；如果提交的值无效，则为 false。</returns>
      <param name="value">要验证的值。</param>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>表示 二维 空间中的置换。</summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>初始化 <see cref="T:System.Windows.Vector" /> 结构的新实例。</summary>
      <param name="x">新 <see cref="T:System.Windows.Vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 偏移量。</param>
      <param name="y">新 <see cref="T:System.Windows.Vector" /> 的 <see cref="P:System.Windows.Vector.Y" /> 偏移量。</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>按指定向量平移指定点，并返回结果点。</summary>
      <returns>按 <paramref name="vector" /> 平移 <paramref name="point" /> 的结果。</returns>
      <param name="vector">指定点的平移量。</param>
      <param name="point">要平移的点。</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>将两个向量相加并将结果以 <see cref="T:System.Windows.Vector" /> 结构的形式返回。</summary>
      <returns>
        <paramref name="vector1" /> 与 <paramref name="vector2" /> 之和。</returns>
      <param name="vector1">要相加的第一个向量。</param>
      <param name="vector2">要相加的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>检索两个指定向量之间的角度（用度表示）。</summary>
      <returns>
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的角度（以度为单位）。</returns>
      <param name="vector1">要计算的第一个向量。</param>
      <param name="vector2">要计算的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>计算两个向量的叉积。</summary>
      <returns>
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 的叉乘积。 可使用下面的公式计算叉乘积： (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</returns>
      <param name="vector1">要计算的第一个向量。</param>
      <param name="vector2">要计算的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>计算两个向量的行列式。</summary>
      <returns>
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 的行列式。</returns>
      <param name="vector1">要计算的第一个向量。</param>
      <param name="vector2">要计算的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>将指定向量除以指定标量，并将结果以 <see cref="T:System.Windows.Vector" /> 形式返回。</summary>
      <returns>
        <paramref name="vector" /> 除以 <paramref name="scalar" /> 的结果。</returns>
      <param name="vector">作为除数的向量结构。</param>
      <param name="scalar">
        <paramref name="vector" /> 的被除量。</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是不是 <see cref="T:System.Windows.Vector" /> 结构，如果是，则确定其是否与此向量具有相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值。</summary>
      <returns>如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Vector" /> 并具有与此向量相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值，则为 true；否则为 false。</returns>
      <param name="o">要比较的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary>比较两个向量是否相等。</summary>
      <returns>如果 <paramref name="value" /> 具有与此向量相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值，则为 true；否则为 false。</returns>
      <param name="value">要与此向量比较的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>比较两个指定向量是否相等。</summary>
      <returns>如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量相等，则为 true；否则为 false。</returns>
      <param name="vector1">要比较的第一个向量。</param>
      <param name="vector2">要比较的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>返回此向量的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>获取此向量的长度。</summary>
      <returns>此向量的长度。</returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>获取此向量的长度的平方。</summary>
      <returns>此向量的 <see cref="P:System.Windows.Vector.Length" /> 的平方。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary>将指定标量与指定向量相乘，并返回结果 <see cref="T:System.Windows.Vector" />。</summary>
      <returns>
        <paramref name="scalar" /> 与 <paramref name="vector" /> 相乘的结果。</returns>
      <param name="scalar">要乘以的标量。</param>
      <param name="vector">要相乘的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary>将指定向量与指定标量相乘，并返回结果 <see cref="T:System.Windows.Vector" />。</summary>
      <returns>
        <paramref name="vector" /> 与 <paramref name="scalar" /> 相乘的结果。</returns>
      <param name="vector">要相乘的向量。</param>
      <param name="scalar">要乘以的标量。</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Matrix" /> 变换指定向量的坐标空间。</summary>
      <returns>按 <paramref name="matrix" /> 变换 <paramref name="vector" /> 的结果。</returns>
      <param name="vector">要变换的向量结构。</param>
      <param name="matrix">要应用于 <paramref name="vector" /> 的变换。</param>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>计算两个指定向量的点积并将结果以 <see cref="T:System.Double" /> 形式返回。</summary>
      <returns>一个 <see cref="T:System.Double" />，其中包含 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的标量点积，标量点积可通过下面的公式计算得出：  (vector1.X * vector2.X) + (vector1.Y * vector2.Y)</returns>
      <param name="vector1">要相乘的第一个向量。</param>
      <param name="vector2">要相乘的第二个向量结构。</param>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>对此向量求反。 向量的大小与以前相同，但现在的方向与以前相反。</summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary>规范化此向量。</summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary>按指定向量平移点，并返回结果点。</summary>
      <returns>按 <paramref name="vector" /> 平移 <paramref name="point" /> 的结果。</returns>
      <param name="vector">用于平移 <paramref name="point" /> 的向量。</param>
      <param name="point">要平移的点。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>将两个向量相加并将结果以向量形式返回。</summary>
      <returns>
        <paramref name="vector1" /> 与 <paramref name="vector2" /> 之和。</returns>
      <param name="vector1">要相加的第一个向量。</param>
      <param name="vector2">要相加的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary>将指定向量除以指定标量，并返回结果向量。</summary>
      <returns>
        <paramref name="vector" /> 除以 <paramref name="scalar" /> 的结果。</returns>
      <param name="vector">作为除数的向量。</param>
      <param name="scalar">
        <paramref name="vector" /> 将除以的标量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary>比较两个向量是否相等。</summary>
      <returns>如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量相等，则为 true；否则为 false。</returns>
      <param name="vector1">要比较的第一个向量。</param>
      <param name="vector2">要比较的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>使用此向量的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值创建 <see cref="T:System.Windows.Point" />。</summary>
      <returns>一个点，其 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标值与 <paramref name="vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 偏移值相等。</returns>
      <param name="vector">要变换的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>根据此向量的偏移量创建 <see cref="T:System.Windows.Size" />。</summary>
      <returns>一个 <see cref="T:System.Windows.Size" />，其 <see cref="P:System.Windows.Size.Width" /> 等于此向量的 <see cref="P:System.Windows.Vector.X" /> 属性的绝对值，其 <see cref="P:System.Windows.Size.Height" /> 等于此向量的 <see cref="P:System.Windows.Vector.Y" /> 属性的绝对值。</returns>
      <param name="vector">要变换的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>比较两个向量是否不相等。</summary>
      <returns>如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量不相等，则为 true；否则为 false。</returns>
      <param name="vector1">要比较的第一个向量。</param>
      <param name="vector2">要比较的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary>将指定标量与指定向量相乘，并返回结果向量。</summary>
      <returns>
        <paramref name="scalar" /> 与 <paramref name="vector" /> 相乘的结果。</returns>
      <param name="scalar">要乘以的标量。</param>
      <param name="vector">要相乘的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>将指定向量与指定标量相乘，并返回结果向量。</summary>
      <returns>
        <paramref name="vector" /> 与 <paramref name="scalar" /> 相乘的结果。</returns>
      <param name="vector">要相乘的向量。</param>
      <param name="scalar">要乘以的标量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Matrix" /> 变换指定向量的坐标空间。</summary>
      <returns>按 <paramref name="matrix" /> 变换 <paramref name="vector" /> 的结果。</returns>
      <param name="vector">要变换的向量。</param>
      <param name="matrix">要应用于 <paramref name="vector" /> 的变换。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>计算两个指定向量结构的点积并将结果以 <see cref="T:System.Double" /> 形式返回。</summary>
      <returns>返回一个 <see cref="T:System.Double" />，其中包含 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的标量点积，标量点积可通过下面的公式计算得出： vector1.X * vector2.X + vector1.Y * vector2.Y</returns>
      <param name="vector1">要相乘的第一个向量。</param>
      <param name="vector2">要相乘的第二个向量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>从一个指定向量中减去另一个指定向量。</summary>
      <returns>
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的差值。</returns>
      <param name="vector1">从其中减去 <paramref name="vector2" /> 的向量。</param>
      <param name="vector2">要从 <paramref name="vector1" /> 中减去的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>对指定向量求反。</summary>
      <returns>一个向量，其 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值与 <paramref name="vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值相反。</returns>
      <param name="vector">要求反的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>将向量的字符串表示形式转换为等效的 <see cref="T:System.Windows.Vector" /> 结构。</summary>
      <returns>等效的 <see cref="T:System.Windows.Vector" /> 结构。</returns>
      <param name="source">向量的字符串表示形式。</param>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>从一个指定向量中减去另一个指定向量。</summary>
      <returns>
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的差值。</returns>
      <param name="vector1">从其中减去 <paramref name="vector2" /> 的向量。</param>
      <param name="vector2">要从 <paramref name="vector1" /> 中减去的向量。</param>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不应在代码中直接使用。 有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。</summary>
      <returns>一个字符串，包含采用指定格式的当前实例的值。</returns>
      <param name="format">指定要使用的格式的字符串。 - 或 - null，表示使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</param>
      <param name="provider">用于格式化该值的 IFormatProvider。 - 或 - 从操作系统的当前区域设置中获取数字格式信息的 null。</param>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>返回此 <see cref="T:System.Windows.Vector" /> 结构的字符串表示形式。</summary>
      <returns>一个字符串，表示此 <see cref="T:System.Windows.Vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>使用指定的格式设置信息返回此 <see cref="T:System.Windows.Vector" /> 结构的字符串表示形式。</summary>
      <returns>一个字符串，表示此 <see cref="T:System.Windows.Vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值。</returns>
      <param name="provider">特定于区域的格式设置信息。</param>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>获取或设置此向量的 <see cref="P:System.Windows.Vector.X" /> 分量。</summary>
      <returns>此向量的 <see cref="P:System.Windows.Vector.X" /> 分量。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>获取或设置此向量的 <see cref="P:System.Windows.Vector.Y" /> 分量。</summary>
      <returns>此向量的 <see cref="P:System.Windows.Vector.Y" /> 分量。 默认值为 0。</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary>在 <see cref="T:System.Windows.Vector" /> 与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Vector" /> 结构的新实例。</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指示是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Vector" /> 的实例。</summary>
      <returns>如果可以将指定类型的对象转换为 <see cref="T:System.Windows.Vector" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="sourceType">将对其查询转换支持的源 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Vector" /> 实例转换成指定类型。</summary>
      <returns>如果可以将 <see cref="T:System.Windows.Vector" /> 的实例转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="destinationType">要计算用于转换的此 <see cref="T:System.Windows.Vector" /> 的所需类型。</param>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为 <see cref="T:System.Windows.Vector" />。</summary>
      <returns>通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Vector" />。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="culture">描述正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">正在转换的对象。</param>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的 <see cref="T:System.Windows.Vector" /> 转换成指定类型。</summary>
      <returns>通过转换此 <see cref="T:System.Windows.Vector" /> 创建的对象。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="culture">描述正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Vector" />。</param>
      <param name="destinationType">要将此 <see cref="T:System.Windows.Vector" /> 转换到的类型。</param>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>为在弱事件模式中使用的事件管理器提供基类。 管理器为也使用该模式的事件（或回调）添加和移除侦听器。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>在基类值由派生类的构造函数用作初始值设定项时初始化基类值。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>将正在托管的事件传送到每个侦听器。</summary>
      <param name="sender">在其中处理事件的对象。</param>
      <param name="args">一个包含要传递的事件的事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>将正在托管的事件传送到所提供列表中的每个侦听器。</summary>
      <param name="sender">在其中处理事件的对象。</param>
      <param name="args">一个 <see cref="T:System.EventArgs" />，其中包含事件数据。</param>
      <param name="list">提供的 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>返回用于所提供类型的 <see cref="T:System.Windows.WeakEventManager" /> 实现。</summary>
      <returns>匹配的 <see cref="T:System.Windows.WeakEventManager" /> 实现。</returns>
      <param name="managerType">要为其获取 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>获取或设置为指定的源存储的数据。</summary>
      <returns>通过此源的管理器存储的数据。</returns>
      <param name="source">所请求源的从零开始的索引。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary>返回包含事件侦听器的新对象。</summary>
      <returns>包含事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary>添加指定的委托为指定源的事件处理程序。</summary>
      <param name="source">处理程序代理订阅的源对象。</param>
      <param name="handler">处理 <paramref name="source" /> 引发的事件的委托。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>将提供的侦听器添加到为托管事件所提供的源中。</summary>
      <param name="source">要附加侦听器的源。</param>
      <param name="listener">侦听类（必须实现 <see cref="T:System.Windows.IWeakEventListener" />）。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary>从指定的源中移除以前添加的处理程序。</summary>
      <param name="source">要从中移除处理程序的源。</param>
      <param name="handler">要从 <paramref name="source" /> 移除的委托。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>从提供的源中移除以前添加的侦听器。</summary>
      <param name="source">要从中移除侦听器的源。</param>
      <param name="listener">侦听类（必须实现 <see cref="T:System.Windows.IWeakEventListener" />）。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>从所提供源的数据列表中移除不活动的侦听器项。 如果某些项实际上已经从列表中移除，则返回 true。</summary>
      <returns>如果某些项实际上已经移除，则为 true；否则为 false。</returns>
      <param name="source">要侦听的事件的源。</param>
      <param name="data">要检查的数据。 此对象应为 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 实现。</param>
      <param name="purgeAll">设置为 true 可停止侦听 <paramref name="source" />，并从 <paramref name="data" /> 中完全移除所有项。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>在基础数据表上建立读取锁定，并返回 <see cref="T:System.IDisposable" />。</summary>
      <returns>一个对象，可用于在数据表成员上建立锁定，然后通过 using 构造被相应释放。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>移除指定源的所有侦听器。</summary>
      <param name="source">要移除侦听器信息的源。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>要求在优先级较低的线程上清除基础侦听器列表中未使用的项。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>为指定的管理器类型设置当前管理器。</summary>
      <param name="managerType">要为其设置新事件管理器的类型。</param>
      <param name="manager">新事件管理器。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>在派生类中重写时，开始侦听被托管的事件。 第一次调用 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 方法后，只要处理了所提供源中的相关事件，管理器就应处于调用 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 或 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 的状态。</summary>
      <param name="source">开始侦听的源。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>在派生类中重写时，停止为被托管的事件侦听所提供的源。</summary>
      <param name="source">停止侦听的源。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>在基础数据表上建立写入锁定，并返回 <see cref="T:System.IDisposable" />。</summary>
      <returns>一个对象，可用于在数据表成员上建立锁定，然后通过 using 构造被相应释放。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary>提供类型安全的 <see cref="T:System.Windows.WeakEventManager" />，其可让您指定要用于弱事件监听程序模式的事件处理程序。 此类定义事件源的类型参数和使用的事件数据的类型参数。</summary>
      <typeparam name="TEventSource">引发事件的类型。</typeparam>
      <typeparam name="TEventArgs">保存事件数据的类型。</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary>添加指定的事件处理程序到指定的事件。</summary>
      <param name="source">引发指定事件的源对象。</param>
      <param name="eventName">要订阅的事件的名称。</param>
      <param name="handler">处理事件的委托。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary>返回包含事件侦听器的新对象。</summary>
      <returns>包含事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary>从指定事件中移除指定的事件处理程序。</summary>
      <param name="source">引发指定事件的源对象。</param>
      <param name="eventName">从中移除处理程序的事件的名称。</param>
      <param name="handler">移除的委托</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary>启动对指定对象侦听事件。</summary>
      <param name="source">引发事件到其中的对象。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary>停止对指定对象侦听事件。</summary>
      <param name="source">引发事件到其中的对象。</param>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>提供用于存储 <see cref="T:System.Windows.WeakEventManager" /> 的侦听器的内置集合列表。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>使用指定的初始容量初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</summary>
      <param name="capacity">应在初始列表中分配的项数。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>将 <see cref="T:System.Windows.IWeakEventListener" /> 对象添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中。</summary>
      <param name="listener">要添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的侦听器元素。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary>将事件处理程序添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中。</summary>
      <param name="handler">将添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>声明列表正在使用中。 这可以防止在列表项迭代过程中直接更改列表。</summary>
      <returns>如果列表已经声明为正在使用中，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>创建此 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的可修改复本。</summary>
      <returns>当前对象的可修改复本。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary>将当前的 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 复制到指定 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</summary>
      <param name="newList">要复制到的对象。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>获取 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项数。</summary>
      <returns>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项数。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>将正在托管的事件传送到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的每个侦听器。</summary>
      <returns>如果任何一个 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中侦听器引用的对象已被垃圾回收，则为 true；否则，为false 。</returns>
      <param name="sender">引发事件的对象。</param>
      <param name="args">一个包含事件数据的对象。</param>
      <param name="managerType">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>获取表示用于对比的空列表的值。</summary>
      <returns>空列表表示。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>解除由 <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /> 启动的锁定状态。</summary>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>获取声明此 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 是否为空的值。</summary>
      <returns>如果列表为空，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的特定侦听器项。</summary>
      <returns>该索引处的项，如果该索引处没有项，则为 null 引用。</returns>
      <param name="index">列表中侦听器的从零开始的索引。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>检查是否正在使用提供的列表，如果正在使用，则将列表引用参数设置为该列表的副本，而不是原稿列表的副本。</summary>
      <returns>如果调用时正在使用提供的列表，并因此 <paramref name="list" /> 参数引用被重置为副本，则为 true。 如果未使用提供的列表，在此情况下 <paramref name="list" /> 参数引用保持不变，则为 false。</returns>
      <param name="list">要检查其使用状态和可能副本的列表。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>从基础引用目标为 null 引用的列表中移除所有项。</summary>
      <returns>如果清除了所有项，则返回 true；否则返回 false。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中移除侦听器项的第一个匹配项。</summary>
      <param name="listener">要移除的项。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary>从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 目标中移除事件处理程序。</summary>
      <param name="handler">要从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中移除的处理程序。</param>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary>提供用于存储 <see cref="T:System.Windows.WeakEventManager" /> 的侦听器的类型安全集合列表。 这种用于定义使用的事件数据的类型参数。</summary>
      <typeparam name="TEventArgs">保存事件数据的类型。</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary>初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary>使用指定的初始容量初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 类的新实例。</summary>
      <param name="capacity">应在初始列表中分配的项数。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary>创建该 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的可修改复本，从而制作值的深层副本。</summary>
      <returns>当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>将正在托管的事件传送到 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 中的每个侦听器。</summary>
      <returns>如果任何一个 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 中侦听器引用的对象已被垃圾回收，则为 true；否则，为false 。</returns>
      <param name="sender">引发事件的对象。</param>
      <param name="e">一个包含事件数据的对象。</param>
      <param name="managerType">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Int32Rect" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Int32Rect" /> 的实例。</summary>
      <returns>始终返回 true。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.Windows.Int32Rect" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Int32Rect" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Int32Rect" /> 的一个新实例。</returns>
      <param name="value">要转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Int32Rect" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Int32Rect" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Point" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Converters.PointValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Point" /> 的实例。</summary>
      <returns>始终返回 true。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.Windows.Point" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Point" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Point" /> 的一个新实例。</returns>
      <param name="value">要转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Point" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Point" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Rect" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Converters.RectValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Rect" /> 的实例。</summary>
      <returns>始终返回 true。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.Windows.Rect" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Rect" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Rect" /> 的一个新实例。</returns>
      <param name="value">要转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Rect" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Rect" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Size" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Converters.SizeValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Size" /> 的实例。</summary>
      <returns>始终返回 true。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.Windows.Size" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Size" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Size" /> 的一个新实例。</returns>
      <param name="value">要转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Size" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Size" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Vector" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Converters.VectorValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Vector" /> 的实例。</summary>
      <returns>始终返回 true。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.Windows.Vector" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Vector" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Vector" /> 的一个新实例。</returns>
      <param name="value">要转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Vector" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Vector" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>
        <see cref="T:System.Windows.Data.DataSourceProvider" /> 对象的公共基类和协定，它们是执行某些查询以生成可以用作绑定源对象的单个对象或对象列表的工厂。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Data.DataSourceProvider" /> 类的新实例。 这是一个受保护的构造函数。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>指示即将开始初始化此对象；在调用匹配的 <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> 方法前不要进行隐式 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>在派生类中重写此基类时，如果已调用 <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> 或 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />，那么此基类会调用此方法。 如果刷新发生延迟或已禁用初始加载，则基类会延迟调用。</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>获取基础数据对象。</summary>
      <returns>属于基础数据对象的 <see cref="T:System.Object" /> 类型的值。</returns>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>在 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性具有一个新值时发生。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>进入延迟循环，该循环可用于更改提供程序的属性并延迟自动刷新。</summary>
      <returns>一个可用于释放调用对象的 <see cref="T:System.IDisposable" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>获取或设置要使用的 UI 线程的当前 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象。</summary>
      <returns>当前 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象到要使用的 UI 线程。 默认情况下，这是与创建此实例的线程关联的 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>表示此对象的初始化已完成；如果没有其他未完成的 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" />，则这会导致 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />。</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>获取最新查询操作的错误。</summary>
      <returns>
        <see cref="T:System.Exception" /> 类型的值，它是最新查询操作的错误，如果没有错误，则该值为 null。</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>启动对基础数据模型的初始查询。 结果返回到 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性。</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>获取或设置一个值，该值指示是否阻止或延迟数据自动加载。</summary>
      <returns>如果要阻止或延迟数据自动加载，则为 false；否则为 true。 默认值为 true。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>获取一个值，该值指示是否有某个未完成的 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> 正在运行。</summary>
      <returns>如果有某个未完成的 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> 正在运行，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发带有提供的参数的 <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> 事件。</summary>
      <param name="e">要引发的事件的参数。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>派生类调用此方法以指示查询已完成。</summary>
      <param name="newData">作为查询结果的数据。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>派生类调用此方法以指示查询已完成。</summary>
      <param name="newData">作为查询结果的数据。</param>
      <param name="error">在运行查询期间发生的错误。 如果未发生错误，此值为 null。</param>
      <param name="completionWork">用于对 UI 线程执行完成工作的可选委托，如设置其他属性。</param>
      <param name="callbackArguments">可选实参，作为带 <paramref name="completionWork" /> 委托的形参发送。</param>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>启动对基础数据模型的刷新操作。 结果返回到 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性。</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>指定 用户界面 (UI) 内尝试所需焦点更改请求的方向。 该方向基于 Tab 键顺序，或者根据布局中的相关方向。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>将焦点移至当前设定焦点的元素下部的另一个可获得焦点的元素。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>按照 Tab 键顺序将焦点移至第一个可获得焦点的元素。 对于 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />，不受支持。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>按照 Tab 键顺序将焦点移至最后一个可获得焦点的元素。 对于 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />，不受支持。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>将焦点移至当前设定焦点的元素左侧的另一个可获得焦点的元素。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>按照 Tab 键顺序将焦点移至下一个可获得焦点的元素。 对于 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />，不受支持。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>按照 Tab 键顺序将焦点移至前一个可获得焦点的元素。 对于 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />，不受支持。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>将焦点移至当前设定焦点的元素右侧的另一个可获得焦点的元素。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>将焦点移至当前设定焦点的元素上部的另一个可获得焦点的元素。</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>指定键盘上可能的键值。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>A 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>ABNT_C1（巴西）键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>ABNT_C2（巴西）键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>加号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>应用程序键（Microsoft Natural Keyboard，人体工程学键盘）。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>ATTN 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>B 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>Backspace 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>浏览器后退键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>浏览器搜藏夹键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>浏览器前进键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>浏览器主页键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>浏览器刷新键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>浏览器搜索键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>浏览器停止键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>C 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>Cancel 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>Caps Lock 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>Caps Lock 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>Clear 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>Crsel 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>D 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>0（零）键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>1（一）键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>3 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>4 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>5 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>6 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>7 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>8 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>9 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>DBE_ALPHANUMERIC 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>DBE_CODEINPUT 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>DBE_DBCSCHAR 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>DBE_DETERMINESTRING 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>DBE_ENTERDLGCONVERSIONMODE 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>The DBE_ENTERIMECONFIGMODE 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>DBE_ENTERWORDREGISTERMODE 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>DBE_FLUSHSTRING 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>DBE_HIRAGANA 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>DBE_KATAKANA 键</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>DBE_NOCODEINPUT 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>DBE_NOROMAN 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>DBE_ROMAN 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>DBE_SBCSCHAR 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>此键与另一个键配合使用，创建了一个组合字符。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>句点键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>Delete 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>除号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>向下键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>E 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>End 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>Enter 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>ERASE EOF 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>Esc 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>Execute 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>Exsel 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>F 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>F1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>F10 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>F11 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>F12 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>F13 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>F14 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>F15 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>F16 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>F17 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>F18 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>F19 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>F2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>F20 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>F21 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>F22 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>F23 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>F24 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>F3 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>F4 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>F5 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>F6 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>F7 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>F8 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>F9 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>IME 最终模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>G 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>H 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>IME Hangul 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>IME Hanja 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>Help 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>Home 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>I 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>IME 接受键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>IME 转换键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>IME 模式更改请求。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>IME 非转换键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>一个特殊键，用于屏蔽 IME 正在处理的真实键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>Insert 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>J 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>IME Junja 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>K 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>IME Kana 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>IME Kanji 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>L 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>启动应用程序 1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>启动应用程序 2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>启动邮件键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>向左键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>左 Alt 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>左 Ctrl 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>左 Shift 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>Linefeed 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>左 Windows 徽标键（Microsoft Natural Keyboard，人体工程学键盘）。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>M 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>媒体下一曲目键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>媒体暂停播放键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>媒体上一曲目键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>媒体停止键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>乘号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>N 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>Page Down 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>保留以备将来使用的常数。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>没有按任何键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>Num Lock 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>数字键盘上的 0 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>数字键盘上的 1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>数字键盘上的 2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>数字键盘上的 3 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>数字键盘上的 4 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>数字键盘上的 5 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>数字键盘上的 6 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>数字键盘上的 7 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>数字键盘上的 8 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>数字键盘上的 9 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>O 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>OEM 1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>OEM 102 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>OEM 2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>OEM 3 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>OEM 4 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>OEM 5 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>OEM 6 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>OEM 7 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>OEM 8 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>OEM ATTN 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>OEM 自动键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>OEM 反斜杠键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>OEM BACKTAB 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>OEM Clear 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>OEM 右括号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>OEM 逗号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>OEM 复制键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>OEM ENLW 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>OEM 完成键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>OEM 减号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>OEM 左括号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>OEM 句点键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>OEM 管道键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>OEM 添加键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>OEM 问号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>OEM 引号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>OEM 分号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>OEM 波形符键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>P 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>PA1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>Page Down 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>Page Up 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>Pause 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>PLAY 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>Print 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>Print Screen 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>Page Up 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>Q 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>R 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>Return 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>向右键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>右 Alt 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>右 Ctrl 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>右 Shift 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>右 Windows 徽标键（Microsoft Natural Keyboard，人体工程学键盘）。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>S 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>Scroll Lock 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>Select 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>选择媒体键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>分隔符键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>计算机睡眠键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>Print Screen 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>空格键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>减号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>一个特殊键，用于屏蔽正作为系统键处理的真实键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>T 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>Tab 键</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>U 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>向上键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>V 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>调低音量键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>静音键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>调高音量键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>W 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>X 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>Y 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>Z 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>ZOOM 键。</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>在 <see cref="T:System.Windows.Input.Key" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.Key" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定上下文，将指定类型的对象转换为 <see cref="T:System.Windows.Input.Key" /> 的实例。</summary>
      <returns>如果 <paramref name="sourceType" /> 为 <see cref="T:System.String" /> 类型，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定的上下文将 <see cref="T:System.Windows.Input.Key" /> 的实例转换为指定类型。</summary>
      <returns>如果 <paramref name="destinationType" /> 为 <see cref="T:System.String" /> 类型，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试使用指定上下文将指定对象转换为 <see cref="T:System.Windows.Input.Key" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试使用指定上下文将 <see cref="T:System.Windows.Input.Key" /> 转换为指定类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 无法转换为 <paramref name="destinationType" />。</exception>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>提供在 Win32 虚拟键和 WPF<see cref="T:System.Windows.Input.Key" /> 枚举之间进行转换的静态方法。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>将 Win32 虚拟键转换为 WPF <see cref="T:System.Windows.Input.Key" />。</summary>
      <returns>WPF 键。</returns>
      <param name="virtualKey">要转换的虚拟键。</param>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>将 WPF <see cref="T:System.Windows.Input.Key" /> 转换为 Win32 虚拟键。</summary>
      <returns>Win32 虚拟键。</returns>
      <param name="key">要转换的 WPF。</param>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.Key" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.KeyValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.Key" /> 的实例。</summary>
      <returns>始终返回 true。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定的 <see cref="T:System.Windows.Input.Key" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的键。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.Key" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Input.Key" /> 的新实例。</returns>
      <param name="value">要转换为 <see cref="T:System.Windows.Input.Key" /> 的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Input.Key" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Input.Key" /> 的固定字符串表示形式。</returns>
      <param name="value">要转换为字符串的键。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>指定修改键集。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>Alt 键。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>CTRL 键。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>没有按下任何修饰符。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>Shift 键。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>Windows 徽标键。</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>在 <see cref="T:System.Windows.Input.ModifierKeys" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.ModifierKeysConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定上下文，将指定类型的对象转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例。</summary>
      <returns>如果 <paramref name="sourceType" /> 为 <see cref="T:System.String" /> 类型，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可以使用指定上下文将 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例转换为指定类型。</summary>
      <returns>如果 <paramref name="destinationType" /> 为 <see cref="T:System.String" /> 类型，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试使用指定上下文将指定对象转换为 <see cref="T:System.Windows.Input.ModifierKeys" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试使用指定上下文将 <see cref="T:System.Windows.Input.ModifierKeys" /> 转换为指定类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> 无法映射到有效 <see cref="T:System.Windows.Input.ModifierKeys" />。</exception>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>确定指定值是否为有效的 <see cref="T:System.Windows.Input.ModifierKeys" /> 值。</summary>
      <returns>如果输入是有效的 <see cref="T:System.Windows.Input.ModifierKeys" /> 值，则为 true；否则为 false。</returns>
      <param name="modifierKeys">要检查其有效性的值。</param>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 的一个实例。</summary>
      <returns>始终返回 true。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定的 <see cref="T:System.Windows.Input.ModifierKeys" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的修改键。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 值。</summary>
      <returns>
        <see cref="T:System.Windows.Input.ModifierKeys" /> 的新实例，基于所提供的 <paramref name="value" />。</returns>
      <param name="value">要转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Input.ModifierKeys" /> 值的固定字符串表示形式。</returns>
      <param name="value">要转换为字符串的键。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>表示将焦点移至其他控件的请求。</summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>初始化 <see cref="T:System.Windows.Input.TraversalRequest" /> 类的新实例。</summary>
      <param name="focusNavigationDirection">预期的焦点遍历方向，作为一个枚举值。</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>获取遍历方向。</summary>
      <returns>遍历方向枚举值之一。</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary>获取或设置一个值，该值指示焦点遍历是否已到达可以具有焦点的最后一个子元素。</summary>
      <returns>如果此遍历已到达可以具有焦点的最后一个子元素；则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>在互操作方案中，启用 Win32 与 WPF 之间的消息泵的共享控件。</summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>获取已引发的最后一条消息。</summary>
      <returns>最后一条消息。</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>当线程变成模式线程时发生。</summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>获取一个值，该值指示线程是否是模式。</summary>
      <returns>如果线程是模式，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>当模式线程变成非模式线程时发生。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>调用以指示模式线程不再是模式。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>调用以指示该线程是模式。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>调用以指示某线程处于空闲状态。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>指示会对可能的处理显示新消息。</summary>
      <returns>如果侦听消息循环的任一模块已处理了该消息，则为 true。 消息循环的所有者应忽略该消息。 如果未处理该消息，则为 false。 这种情况下，消息泵的所有者应调用 Win32 函数 TranslateMessage，接下来调用 DispatchMessage。</returns>
      <param name="msg">该消息及其关联数据。</param>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>当消息泵接收键盘消息时发生。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>当线程空闲时发生。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>当消息泵接收键盘消息时发生。</summary>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>为跨互操作边界和在 HWND 之间管理 Tab 键次序、快捷键、助记键的组件提供键盘接收器。 此接口实现 WPF-Win32 互操作方案中的键盘消息管理。</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>获取一个值，该值指示接收器或其所包含的组件之一是否具有焦点。</summary>
      <returns>如果接收器或其所包含的组件之一具有焦点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>获取或设置对组件容器的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 接口的引用。</summary>
      <returns>对容器的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 接口的引用。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>调用此接收器的助记键（访问键）之一时调用。</summary>
      <returns>如果消息已得到处理，则为 true；否则为 false。</returns>
      <param name="msg">助记键和关联数据的消息。 请勿修改此消息结构。 仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>注册所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接口。</summary>
      <returns>所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 站点。</returns>
      <param name="sink">所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接收器。</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>在接收器的第一个制表位或最后一个制表位上设置焦点。</summary>
      <returns>如果已按要求对焦点进行了设置，则为 true；如果没有制表位，则为 false。</returns>
      <param name="request">指定是将焦点设置到第一个制表位，还是设置到最后一个制表位。</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>在 keydown 消息级处理键盘输入。</summary>
      <returns>如果方法实现对该消息进行了处理，则为 true；否则为 false。</returns>
      <param name="msg">消息及关联数据。 请勿修改此结构。 仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>在调用 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> 之前处理 WM_CHAR、WM_SYSCHAR、WM_DEADCHAR 和 WM_SYSDEADCHAR 输入消息。</summary>
      <returns>如果消息已处理并且不应调用 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />，则为 true；否则为 false。</returns>
      <param name="msg">消息及关联数据。 请勿修改此结构。 仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>管理容器中的键盘焦点。此接口实现 WPF-Win32 互操作方案中的键盘消息管理。</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>当所包含的组件到达其最后一个制表位并且按 Tab 键不能移动到其他项时，由该组件调用。</summary>
      <returns>如果此方法返回 true，则表示该站点已将焦点移动至其他组件。 如果此方法返回 false，则表示焦点仍在调用组件中。 组件应该“回绕”并将焦点设置到其所包含的第一个制表位。</returns>
      <param name="request">指定是将焦点设置到第一个制表位，还是设置到最后一个制表位。</param>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>获取与此站点关联的键盘接收器。</summary>
      <returns>当前站点的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接口。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>从此站点中注销子键盘输入接收器。</summary>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>包含来自线程的消息队列的消息信息。</summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>获取或设置其窗口过程接收消息的窗口的窗口句柄 (HWND)。</summary>
      <returns>窗口句柄 (HWND)。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>获取或设置指定有关消息的其他信息的 <paramref name="lParam" /> 值。 其具体含义取决于 <see cref="P:System.Windows.Interop.MSG.message" /> 成员的值。</summary>
      <returns>消息的 <paramref name="lParam" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>获取或设置消息标识符。</summary>
      <returns>消息标识符。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>获取或设置发送消息之后屏幕上光标位置的 x 坐标。</summary>
      <returns>光标位置的 x 坐标。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>获取或设置发送消息之后屏幕上光标位置的 y 坐标。</summary>
      <returns>光标位置的 y 坐标。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>获取或设置消息的发送时间。</summary>
      <returns>消息的发送时间。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>获取或设置消息的 <paramref name="wParam" /> 值，该值指定有关该消息的其他信息。 其具体含义取决于该消息的值。</summary>
      <returns>消息的 <paramref name="wParam" /> 值。</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>表示处理 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> 和 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> 事件的方法。</summary>
      <param name="msg">含消息数据的结构。</param>
      <param name="handled">如果消息已得到处理，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>指定要如何序列化属性。</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>属性应序列化为特性。</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>指定属性的序列化标志。</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>初始化 <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> 类的新实例。</summary>
      <param name="designerSerializationOptions">指定要如何序列化该属性。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="designerSerializationOptions" /> 不是有效的 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 值。</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>获取特性的 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 集。</summary>
      <returns>以枚举值形式表示的序列化选项。</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>由 WPF XAML 编译器在内部使用的抽象类，用于支持使用内部类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.InternalTypeHelper" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>在派生（生成）类中重写时，会将事件处理程序委托附加到内部事件。</summary>
      <param name="eventInfo">事件的事件信息（CLR 反射信息）。</param>
      <param name="target">附加处理程序的目标。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>在派生（生成）类中重写时，会创建一个引用非公共处理程序方法的事件委托。</summary>
      <returns>委托引用。</returns>
      <param name="delegateType">委托的 <see cref="T:System.Type" />。</param>
      <param name="target">附加处理程序的目标。</param>
      <param name="handler">处理程序实现的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>在派生（生成）类中重写时，创建内部类型的实例。</summary>
      <returns>已创建的实例。</returns>
      <param name="type">要创建的 <see cref="T:System.Type" />。</param>
      <param name="culture">特定于区域性的信息。</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>在派生（生成）类中重写时，获取目标对象的内部属性的值</summary>
      <returns>该属性的值。</returns>
      <param name="propertyInfo">要获取的属性的属性信息。</param>
      <param name="target">容纳所需属性值的对象。</param>
      <param name="culture">特定于区域性的信息。</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>在派生（生成）类中重写时，设置目标对象的内部属性的值。</summary>
      <param name="propertyInfo">要设置的属性的属性信息。</param>
      <param name="target">容纳所需属性值的对象。</param>
      <param name="value">要设置的值。</param>
      <param name="culture">特定于区域性的信息。</param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>提供一种机制，通过该机制，类型可以声明它们可从标记扩展接收表达式（或另一个类），其中的输出是一个与目标属性不同的属性类型。 请不要用于 .NET Framework 4 实现；请参见备注。</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>对提供属性值的标记扩展提供处理。 请不要用于 .NET Framework 4 实现；请参见 <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" /> 中的备注。</summary>
      <param name="property">目标属性的名称。</param>
      <param name="markupExtension">传入数据的标记扩展实例。</param>
      <param name="serviceProvider">可以提供附加服务，在为属性值处理标记扩展数据时，应执行这些服务。</param>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>使用可以添加服务的方法来提供 <see cref="T:System.IServiceProvider" /> 接口的实现。</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ServiceProviders" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>将服务添加到列表。</summary>
      <param name="serviceType">新服务的服务类型。</param>
      <param name="service">服务实现类。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="service" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">尝试添加一个已经在字典中存在的服务。</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>获取指定类型的服务对象。</summary>
      <returns>类型 <paramref name="serviceType" /> 的服务实现。 如果没有为类型 <paramref name="serviceType" /> 存储任何服务，则可以为 null。</returns>
      <param name="serviceType">要获取的服务对象的类型。</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>一个抽象类，用来表示可用于在对象树内进行导航的对象。</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>当在派生类中重写时，可为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类分配根上下文。</summary>
      <param name="context">要为其分配根上下文的 <see cref="T:System.Windows.Markup.IValueSerializerContext" />。</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>当在派生类中重写时，可获取与此 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 关联的特性。</summary>
      <returns>特性的集合。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>当在派生类中重写时，可获取由此 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 表示的对象的实例。</summary>
      <returns>对象的实例。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>当在派生类中重写时，可获取 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 实例的类型。</summary>
      <returns>对象的类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>当在派生类中重写时，可获取应写入 XAML 的此 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 实例的属性。</summary>
      <returns>属性。</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>一个提供属性说明的抽象类，这些属性说明要在写入标记（该标记封装对属性及其值的访问）时使用。</summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>当在派生类中重写时，可获取与此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 关联的特性。</summary>
      <returns>特性的集合。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>在派生类中重写时，如果以依赖项属性的形式实现标记属性，则获取该属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</summary>
      <returns>依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否为附加 <see cref="T:System.Windows.DependencyProperty" />。</summary>
      <returns>如果此属性为附加 <see cref="T:System.Windows.DependencyProperty" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否为复合属性。</summary>
      <returns>如果此属性为复合属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示构造函数参数。</summary>
      <returns>如果此属性表示构造函数参数，则为 true；否该 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示集合的直接内容。</summary>
      <returns>如果此属性表示直接内容，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 将项存储在字典中时使用的键。</summary>
      <returns>如果此属性表示键，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示为创建属性实例而传递给类型转换器的文本，或者确定是否应使用构造函数。</summary>
      <returns>如果此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示字符串，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>当在派生类中重写时，可获取组成此属性的值的多个项。</summary>
      <returns>组成此属性的值的多个项。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>当在派生类中重写时，可获取用于诊断和错误报告的名称。</summary>
      <returns>标识符属性名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>当在派生类中重写时，可获取标记属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>属性说明符。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>在派生类中重写时，获取属性的 CLR 类型。</summary>
      <returns>CLR 类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>当在派生类中重写时，可获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 的字符串值。</summary>
      <returns>字符串值。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>在派生类重写时，获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 在将其值序列化为字符串时将引用的一组类型。</summary>
      <returns>这组类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>在派生类重写时，获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 的当前值。</summary>
      <returns>当前值。</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>允许 WPF 应用程序对所有用户界面元素禁用每英寸点数 (dpi) 识别。</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary>表示用于 二维 空间变换的 3x3 仿射变换矩阵。</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>初始化 <see cref="T:System.Windows.Media.Matrix" /> 结构的新实例。</summary>
      <param name="m11">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M11" /> 系数。</param>
      <param name="m12">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M12" /> 系数。</param>
      <param name="m21">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M21" /> 系数。</param>
      <param name="m22">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M22" /> 系数。</param>
      <param name="offsetX">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 系数。</param>
      <param name="offsetY">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 系数。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary>将指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <param name="matrix">要追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary>获取此 <see cref="T:System.Windows.Media.Matrix" /> 结构的行列式。</summary>
      <returns>此 <see cref="T:System.Windows.Media.Matrix" /> 的行列式。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否是一个与此 <see cref="T:System.Windows.Media.Matrix" /> 相同的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <returns>如果 <paramref name="o" /> 是一个与此 <see cref="T:System.Windows.Media.Matrix" /> 结构相同的 <see cref="T:System.Windows.Media.Matrix" /> 结构，则为 true；否则为 false。</returns>
      <param name="o">要比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>确定指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否与此实例相同。</summary>
      <returns>如果两个实例相等，则为 true；否则为 false。</returns>
      <param name="value">要与此实例比较的 <see cref="T:System.Windows.Media.Matrix" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否相同。</summary>
      <returns>如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 相同，则为 true；否则为 false。</returns>
      <param name="matrix1">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="matrix2">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>返回此 <see cref="T:System.Windows.Media.Matrix" /> 结构的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary>获取一个值，该值指示此 <see cref="T:System.Windows.Media.Matrix" /> 结构是否可以反转。</summary>
      <returns>如果 <see cref="T:System.Windows.Media.Matrix" /> 存在逆矩阵，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>获取一个恒等 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <returns>一个恒等矩阵。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary>反转此 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <exception cref="T:System.InvalidOperationException">不能反转 <see cref="T:System.Windows.Media.Matrix" /> 结构。</exception>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>获取一个值，该值指示此 <see cref="T:System.Windows.Media.Matrix" /> 结构是否为恒等矩阵。</summary>
      <returns>如果 <see cref="T:System.Windows.Media.Matrix" /> 结构是恒等矩阵，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第一行与第一列相交处的值。</summary>
      <returns>此 <see cref="T:System.Windows.Media.Matrix" /> 中第一行与第一列相交处的值。 默认值为 1。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第一行与第二列相交处的值。</summary>
      <returns>此 <see cref="T:System.Windows.Media.Matrix" /> 中第一行与第二列相交处的值。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第一列相交处的值。</summary>
      <returns>此 <see cref="T:System.Windows.Media.Matrix" /> 中第二行与第一列相交处的值。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第二列相交处的值。</summary>
      <returns>此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第二列相交处的值。 默认值为 1。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>让 <see cref="T:System.Windows.Media.Matrix" /> 结构乘以另一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <returns>
        <paramref name="trans1" /> 乘以 <paramref name="trans2" /> 的结果。</returns>
      <param name="trans1">要相乘的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="trans2">要相乘的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第一列相交处的值。</summary>
      <returns>此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第一列相交处的值。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第二列相交处的值。</summary>
      <returns>此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第二列相交处的值。 默认值为 0。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否相同。</summary>
      <returns>如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 相同，则为 true；否则为 false。</returns>
      <param name="matrix1">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="matrix2">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否不同。</summary>
      <returns>如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 不同，则为 true；否则为 false。</returns>
      <param name="matrix1">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="matrix2">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>让 <see cref="T:System.Windows.Media.Matrix" /> 结构乘以另一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <returns>
        <paramref name="trans1" /> 乘以 <paramref name="trans2" /> 的结果。</returns>
      <param name="trans1">要相乘的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="trans2">要相乘的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary>将矩阵的 <see cref="T:System.String" /> 表示形式转换为等效的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <returns>等效的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</returns>
      <param name="source">矩阵的 <see cref="T:System.String" /> 表示形式。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary>将指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构添加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构之前。</summary>
      <param name="matrix">要添加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构之前的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary>以此 <see cref="T:System.Windows.Media.Matrix" /> 结构的原点为中心旋转指定的角度。</summary>
      <param name="angle">旋转角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>绕指定的点旋转此矩阵。</summary>
      <param name="angle">此矩阵要旋转的角度（单位为度）。</param>
      <param name="centerX">此矩阵要围绕其旋转的点的 x 坐标。</param>
      <param name="centerY">此矩阵要围绕其旋转的点的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加围绕指定点的指定角度的旋转。</summary>
      <param name="angle">旋转角度（单位为度）。</param>
      <param name="centerX">旋转中心的 x 坐标。</param>
      <param name="centerY">旋转中心的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定角度的旋转。</summary>
      <param name="angle">要在前面添加的旋转的角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加指定的缩放向量。</summary>
      <param name="scaleX">此 <see cref="T:System.Windows.Media.Matrix" /> 要沿 x 轴缩放的值。</param>
      <param name="scaleY">此 <see cref="T:System.Windows.Media.Matrix" /> 要沿 y 轴缩放的值。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>围绕指定的点按指定的量缩放此 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <param name="scaleX">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的缩放量。</param>
      <param name="scaleY">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的缩放量。</param>
      <param name="centerX">缩放操作中心点的 x 坐标。</param>
      <param name="centerY">缩放操作中心点的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 前面添加围绕指定点的指定缩放。</summary>
      <param name="scaleX">x 轴的缩放比例。</param>
      <param name="scaleY">y 轴的缩放比例。</param>
      <param name="centerX">执行缩放操作所围绕的点的 x 坐标。</param>
      <param name="centerY">执行缩放操作所围绕的点的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定的缩放向量。</summary>
      <param name="scaleX">此 <see cref="T:System.Windows.Media.Matrix" /> 结构要沿 x 轴缩放的值。</param>
      <param name="scaleY">此 <see cref="T:System.Windows.Media.Matrix" /> 结构要沿 y 轴缩放的值。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary>将此 <see cref="T:System.Windows.Media.Matrix" /> 结构更改为恒等矩阵。</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加 x 和 y 维中指定角度的扭曲。</summary>
      <param name="skewX">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 x 维角度。</param>
      <param name="skewY">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 y 维角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加 x 和 y 维中指定角度的扭曲。</summary>
      <param name="skewX">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 x 维角度。</param>
      <param name="skewY">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 y 维角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式格式化当前实例的值。</summary>
      <returns>使用指定格式的当前实例的值。</returns>
      <param name="format">要使用的格式。 - 或 - null 引用（Visual Basic 中为 Nothing）将使用为 <see cref="T:System.IFormattable" /> 实现的类型所定义的默认格式。</param>
      <param name="provider">要用于设置值格式的提供程序。 - 或 - null 引用（Visual Basic 中为 Nothing）将从操作系统的当前区域设置中获取数字格式信息。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>创建此 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，其中包含此 <see cref="T:System.Windows.Media.Matrix" /> 的 <see cref="P:System.Windows.Media.Matrix.M11" />、<see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" /> 和 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>使用区域性特定的格式设置信息创建此 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，其中包含此 <see cref="T:System.Windows.Media.Matrix" /> 的 <see cref="P:System.Windows.Media.Matrix.M11" />、<see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" /> 和 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 值。</returns>
      <param name="provider">特定于区域的格式设置信息。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>用 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的点并返回结果。</summary>
      <returns>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换 <paramref name="point" /> 的结果。</returns>
      <param name="point">要转换的点。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的点。</summary>
      <param name="points">要变换的点。 数组中的原始点将被它们的变换值替换。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的向量。</summary>
      <returns>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换 <paramref name="vector" /> 的结果。</returns>
      <param name="vector">要变换的向量。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的向量。</summary>
      <param name="vectors">要变换的向量。 数组中的原始向量将被它们的变换值替换。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加指定偏移量的平移。</summary>
      <param name="offsetX">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的偏移量。</param>
      <param name="offsetY">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的偏移量。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary>在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定偏移量的平移。</summary>
      <param name="offsetX">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的偏移量。</param>
      <param name="offsetY">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的偏移量。</param>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>在 <see cref="T:System.Windows.Media.Matrix" /> 实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.MatrixConverter" /> 的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将一个对象从特定类型转换为 <see cref="T:System.Windows.Media.Matrix" /> 的实例。</summary>
      <returns>如果可将类型转换为 <see cref="T:System.Windows.Media.Matrix" />，则为 true；否则为 false。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="sourceType">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.Matrix" /> 的实例转换成其他类型。</summary>
      <returns>如果此 <see cref="T:System.Windows.Media.Matrix" /> 可转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="destinationType">要计算用于转换的此 <see cref="T:System.Windows.Media.Matrix" /> 的所需类型。</param>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试将指定对象转换为 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <returns>由转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Media.Matrix" />。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="culture">正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">指定的对象为 Null 或者为无法转换为 <see cref="T:System.Windows.Media.Matrix" /> 的类型。</exception>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试将 <see cref="T:System.Windows.Media.Matrix" /> 转换为指定类型。</summary>
      <returns>由转换此 <see cref="T:System.Windows.Media.Matrix" /> 创建的对象。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="culture">正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Media.Matrix" />。</param>
      <param name="destinationType">要将此 <see cref="T:System.Windows.Media.Matrix" /> 转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 Null 或不是 <see cref="T:System.Windows.Media.Matrix" />，或者 <paramref name="destinationType" /> 不是有效的转换类型。</exception>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Media.Matrix" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可以从给定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Media.Matrix" /> 的实例。</summary>
      <returns>如果该值可以转换，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.Matrix" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的 <see cref="T:System.Windows.Media.Matrix" /> 的实例。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.ArgumentException">当 <paramref name="value" /> 不是 <see cref="T:System.Windows.Media.Int32Collection" /> 时发生。</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Media.Matrix" /> 的一个新实例。</returns>
      <param name="value">要转换为 <see cref="T:System.Windows.Media.Matrix" /> 的 <see cref="T:System.String" /> 值。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Media.Matrix" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>提供的 <see cref="T:System.Windows.Media.Matrix" /> 对象的 <see cref="T:System.String" /> 表示形式。</returns>
      <param name="value">要进行计算以供转换的 <see cref="T:System.Windows.Media.Matrix" /> 的实例。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>提供用于管理线程工作项队列的服务。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程的指定参数异步执行指定委托。</summary>
      <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="args">作为给定方法的参数传递的对象数组。 可以为 null。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上的指定参数，按指定优先级异步执行指定委托。</summary>
      <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="args">作为给定方法的参数传递的对象数组。 可以为 null。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
      <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="method">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
      <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="method">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg">作为参数传递到指定方法中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>按指定的优先级并使用指定的参数数组在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
      <returns>调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中挂起执行的委托进行交互。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="method">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg">作为参数传递到指定方法中的对象。</param>
      <param name="args">作为指定方法的参数传递的对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的优先级。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>异步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭。</summary>
      <param name="priority">将按其开始关闭调度程序的优先级。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>确定调用线程是否为与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</summary>
      <returns>如果调用线程是与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>获取当前正在执行的线程的 <see cref="T:System.Windows.Threading.Dispatcher" />，并在该线程没有关联的调度程序时创建一个新的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>与当前线程关联的调度程序。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>禁用对 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的处理。</summary>
      <returns>一个用于重新启用调度程序处理的结构。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>请求退出所有帧，包括嵌套的帧。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>获取指定线程的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>
        <paramref name="thread" /> 的调度程序。</returns>
      <param name="thread">要从中获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程。</param>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已经完成关闭。</summary>
      <returns>如果调度程序已经完成关闭，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否正在关闭。</summary>
      <returns>如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已经开始关闭，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>获取提供有关 <see cref="T:System.Windows.Threading.Dispatcher" /> 的其他事件信息的挂钩集合。</summary>
      <returns>与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的挂钩。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的 <see cref="T:System.Action" />。</summary>
      <param name="callback">要通过调度程序调用的委托。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Action" />。</summary>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Action" />。</summary>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
      <param name="cancellationToken">指示是否取消操作的对象。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Action" />。</summary>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
      <param name="cancellationToken">指示是否取消操作的对象。</param>
      <param name="timeout">等待操作启动的最长时间。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数同步执行指定委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="args">作为给定方法的参数传递的对象数组。 可以为 null。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="timeout">等待操作完成的最长时间。</param>
      <param name="args">作为给定方法的参数传递的对象数组。 可以为 null。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="timeout">等待操作完成的最长时间。</param>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="args">作为给定方法的参数传递的对象数组。 可以为 null。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="method">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="args">作为给定方法的参数传递的对象数组。 可以为 null。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的 <see cref="T:System.Func`1" />。</summary>
      <param name="callback">要通过调度程序调用的委托。</param>
      <typeparam name="TResult">指定委托的返回值类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Func`1" />。</summary>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
      <typeparam name="TResult">指定委托的返回值类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Func`1" />。</summary>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
      <param name="cancellationToken">指示是否取消操作的对象。</param>
      <typeparam name="TResult">指定委托的返回值类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Func`1" />。</summary>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
      <param name="cancellationToken">指示是否取消操作的对象。</param>
      <param name="timeout">等待操作启动的最长时间。</param>
      <typeparam name="TResult">指定委托的返回值类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="method">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="method">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg">作为参数传递到给定方法中的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="method">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg">作为参数传递到给定方法中的对象。</param>
      <param name="args">作为给定方法的参数传递的对象数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>按指定的优先级并使用指定的超时值在创建 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上同步执行指定的委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="timeout">用于等待操作完成的最长时间。</param>
      <param name="method">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="timeout">用于等待操作完成的最长时间。</param>
      <param name="method">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg">作为参数传递到给定方法中的对象。 如果不需要参数，则可以为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <returns>正在被调用的委托的返回值，如果该委托没有返回值，则为 null。</returns>
      <param name="priority">指定调用方法的优先级，与 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中的其他挂起操作相关。</param>
      <param name="timeout">用于等待操作完成的最长时间。</param>
      <param name="method">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg">作为参数传递到指定方法中的对象。</param>
      <param name="args">作为指定方法的参数传递的对象数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的 <see cref="T:System.Action" />。</summary>
      <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="callback">要通过调度程序调用的委托。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Action" />。</summary>
      <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Action" />。</summary>
      <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
      <param name="cancellationToken">指示是否取消操作的对象。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的 <see cref="T:System.Func`1" />。</summary>
      <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="callback">要通过调度程序调用的委托。</param>
      <typeparam name="TResult">指定委托的返回值类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Func`1" />。</summary>
      <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
      <typeparam name="TResult">指定委托的返回值类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Func`1" />。</summary>
      <returns>调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
      <param name="callback">要通过调度程序调用的委托。</param>
      <param name="priority">决定相对于 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的其他挂起操作调用回调的顺序的优先级。</param>
      <param name="cancellationToken">指示是否取消操作的对象。</param>
      <typeparam name="TResult">指定委托的返回值类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>同步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭过程。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>进入执行循环。</summary>
      <param name="frame">调度程序要处理的帧。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frame" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 为true - 或 - <paramref name="frame" /> 在不同的 <see cref="T:System.Windows.Threading.Dispatcher" /> 中运行。 - 或 - 已禁用对调度程序的处理。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>将主执行帧推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 的事件队列中。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>当 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成关闭时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>当 <see cref="T:System.Windows.Threading.Dispatcher" /> 开始关闭时发生。</summary>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</summary>
      <returns>线程。</returns>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>在通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>当在筛选阶段通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>确定指定的 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是否为有效的优先级。</summary>
      <param name="priority">要检查的优先级。</param>
      <param name="parameterName">将由优先级无效时发生的异常返回的字符串。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <exception cref="T:System.InvalidOperationException">调用线程不能访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary>创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</summary>
      <returns>异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary>创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。当控件返回等待此方法的结果的代码按指定的优先级计划时，发生的操作。</summary>
      <returns>异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</returns>
      <param name="priority">安排延续的优先级别。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>为与 <see cref="T:System.Windows.Threading.Dispatcher" /> 相关的事件提供事件数据。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>与此事件关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>调度程序。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>表示 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的执行循环。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>使用指定的退出请求标志初始化 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 类的新实例。</summary>
      <param name="exitWhenRequested">指示在要求退出所有帧时是否将退出此帧。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>获取或设置一个值，该值指示此 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 是否应该继续。</summary>
      <returns>如果此帧应该继续，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>为 <see cref="T:System.Windows.Threading.DispatcherHooks" /> 事件提供事件数据。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>初始化 <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> 类的新实例。</summary>
      <param name="operation">与事件关联的操作。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>获取与此事件关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>与此事件关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>获取与此事件关联的 <see cref="T:System.Windows.Threading.DispatcherOperation" />。</summary>
      <returns>操作。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>表示将处理与 <see cref="T:System.Windows.Threading.DispatcherHooks" /> 相关的事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>提供有关 <see cref="T:System.Windows.Threading.Dispatcher" /> 处理的附加事件信息。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>在调度程序没有要处理的其他操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>中止操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>完成操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>将操作发布到调度程序时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>在更改操作的优先级时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary>调用操作时发生。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>表示与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的对象。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Threading.DispatcherObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。</summary>
      <returns>如果调用线程可以访问此对象，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>获取与此 <see cref="T:System.Windows.Threading.DispatcherObject" /> 关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>调度程序。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>强制调用线程具有此 <see cref="T:System.Windows.Threading.DispatcherObject" /> 的访问权限。</summary>
      <exception cref="T:System.InvalidOperationException">调用线程不可以访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>表示一个用于与已发布到 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的操作进行交互的对象。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>中止该操作。</summary>
      <returns>如果中止了操作，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>中止操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>操作完成时发生。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>获取操作所发布到的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>调度程序。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary>返回完成异步操作时通知的对象。</summary>
      <returns>完成异步操作时通知的对象。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary>开始与 <see cref="T:System.Windows.Threading.DispatcherOperation" /> 关联的操作。</summary>
      <returns>在所有情况下均为 null。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>获取或设置 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中的操作的优先级。</summary>
      <returns>队列中委托的优先级。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>获取操作完成后的结果。</summary>
      <returns>操作的结果或 null（如果操作未完成）。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>获取操作的当前状态。</summary>
      <returns>操作的状态。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary>获取一个表示当前操作的 <see cref="T:System.Threading.Task" />。</summary>
      <returns>表示当前操作的对象。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>等待操作完成</summary>
      <returns>操作的状态。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> 等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />。等待已在同一线程上执行的操作时可能会发生此异常。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>等待操作在指定的时期内完成。</summary>
      <returns>操作的状态。</returns>
      <param name="timeout">要等待的最大时期。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> 等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />。等待已在同一线程上执行的操作时可能会发生此异常。</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary>表示一个用于与已发布到 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的操作进行交互的对象，并包含 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <typeparam name="TResult">由 <see cref="T:System.Threading.Tasks.Task`1" /> 返回的类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary>返回等待返回结果的异步操作对象。</summary>
      <returns>一个等待返回结果的异步操作对象。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary>开始与 <see cref="T:System.Windows.Threading.DispatcherOperation" /> 关联的操作。</summary>
      <returns>操作的结果。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary>获取操作完成后的结果。</summary>
      <returns>操作的结果。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary>获取一个表示当前操作的 <see cref="T:System.Threading.Task`1" />。</summary>
      <returns>表示当前操作的对象。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>表示一个用于调度程序操作的委托。</summary>
      <returns>由回调返回的对象。</returns>
      <param name="arg">一个传递到回调的参数。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>描述 <see cref="T:System.Windows.Threading.DispatcherOperation" /> 状态的可能值。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>该操作已中止。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>该操作已完成。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>该操作已开始执行，但尚未完成。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>该操作为挂起状态，并仍然处于 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>描述可通过 <see cref="T:System.Windows.Threading.Dispatcher" /> 调用操作的优先级。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>枚举值为 2。在应用程序空闲时处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>枚举值为 4。在完成所有其他非空闲操作后处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>枚举值为 3。在完成后台操作后处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>枚举值为 8。按数据绑定的优先级处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>枚举值为 0。不处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>枚举值为 5。按输入的优先级处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>枚举值为 -1。这是一个无效的优先级。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>枚举值为 6。在布局和呈现已完成，即将处理输入优先级的项之前处理操作。 具体来说，此值在引发 Loaded 事件时使用。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>枚举值为 9。按正常优先级处理操作。这是典型的应用程序优先级。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>枚举值为 7。按呈现的优先级别处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>枚举值为 10。在其他异步操作之前处理操作。这是最高优先级。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>枚举值为 1。在系统空闲时处理操作。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary>表示异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary>返回对象，其等待异步任务的完成。</summary>
      <returns>一个对象，其等待异步任务的完成。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary>表示对象，其等待异步任务的完成。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary>异步任务完成后关闭等待任务。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary>获取一个值，该值指示异步任务是否已完成。</summary>
      <returns>所有情况下均为 false。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary>将操作设置为当 <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> 对象停止等待异步任务完成时执行。</summary>
      <param name="continuation">在等待操作完成时要执行的操作。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>表示处于禁用状态的调度程序，并提供重新启用调度程序处理的方法。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>重新启用调度程序处理。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否等同于此 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象。</summary>
      <returns>如果指定的对象等同于此 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象，则为 true；否则为 false。</returns>
      <param name="obj">要评价是否相等的对象。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>带符号的 32 位整数哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>确定两个 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否相等。</summary>
      <returns>如果 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>确定两个 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否相等。</summary>
      <returns>如果 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象不相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>为 Windows Presentation Foundation (WPF) 提供同步上下文。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>使用当前的 <see cref="T:System.Windows.Threading.Dispatcher" /> 初始化 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>使用指定的 <see cref="T:System.Windows.Threading.Dispatcher" /> 初始化 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 类的新实例。</summary>
      <param name="dispatcher">要将此 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 与其关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary>使用指定的 <see cref="T:System.Windows.Threading.Dispatcher" /> 初始化 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 类的新实例。</summary>
      <param name="dispatcher">要将此 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 与其关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</param>
      <param name="priority">用于的优先级别发送和发送回调方法。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>创建此 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 的副本。</summary>
      <returns>此同步上下文的副本。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>异步调用同步上下文中的回调。</summary>
      <param name="d">要调用的委托。</param>
      <param name="state">传递给委托的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>同步调用同步上下文中的回调。</summary>
      <param name="d">要调用的委托。</param>
      <param name="state">传递给委托的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>等待指定数组中的任一元素或所有元素接收信号。</summary>
      <returns>满足等待的对象的数组索引。</returns>
      <param name="waitHandles">一个包含本机操作系统句柄的数组。</param>
      <param name="waitAll">若等待所有句柄，则为 true；若等待任一句柄，则为 false。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>集成到按指定时间间隔和指定优先级处理的 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中的计时器。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例，该类使用指定的时间间隔、优先级、事件处理程序和 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="interval">刻度之间的时间段。</param>
      <param name="priority">调用计时器的优先级。</param>
      <param name="callback">当 <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> 事件发生时调用的事件处理程序。</param>
      <param name="dispatcher">与计时器关联的调度程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>初始化按指定优先级处理计时器事件的 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例。</summary>
      <param name="priority">调用计时器的优先级。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例，该类按指定优先级在指定的 <see cref="T:System.Windows.Threading.Dispatcher" /> 上运行。</summary>
      <param name="priority">调用计时器的优先级。</param>
      <param name="dispatcher">与计时器关联的调度程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>获取与此 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>调度程序。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>获取或设置计时器刻度之间的时间段。</summary>
      <returns>刻度之间的时间段。 默认值是 00:00:00。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>获取或设置一个指示是否正在运行计时器的值。</summary>
      <returns>如果计时器处于启用状态，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>启动 <see cref="T:System.Windows.Threading.DispatcherTimer" />。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>停止 <see cref="T:System.Windows.Threading.DispatcherTimer" />。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>获取或设置用户定义的数据对象。</summary>
      <returns>用户定义的数据。默认值为 null。</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>超过计时器间隔时发生。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>提供 <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件的数据。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>获取通过调度程序执行代码时引发的异常。</summary>
      <returns>异常。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>获取或设置是否已处理异常事件。</summary>
      <returns>如果异常已得到处理，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>提供 <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> 事件的数据。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>获取通过调度程序执行代码时引发的异常。</summary>
      <returns>异常。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>获取或设置异常是否应被捕获，并获取或设置调用的事件处理程序。</summary>
      <returns>如果应引发 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
  </members>
</doc>